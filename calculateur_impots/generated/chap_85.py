# -*- coding: utf-8 -*-
# flake8: noqa


# WARNING: This file is automatically generated by a script. No not modify it by hand!

# Original files are "chap-85.json" and "chap-85.m"


def BIPTTA(i):
    if i in ('V', 'C', 'P'):
        return BIPTA(i) + BI1A(i)
    else:
        raise NotImplementedError()


def BIPTA(i):
    if i in ('V', 'C', 'P'):
        return BICNO(i) - BICDN(i) * 1 - positif(ART1731BIS * PREM8_11)
    else:
        raise NotImplementedError()

def BINTTA(i):
    if i in ('V', 'C', 'P'):
        return BINTA(i) + BI2A(i)
    else:
        raise NotImplementedError()


def BINTA(i):
    if i in ('V', 'C', 'P'):
        return BICRE(i) - BICDE(i) * 1 - positif(ART1731BIS * PREM8_11)
    else:
        raise NotImplementedError()

def BI12A(i):
    if i in ('V', 'C', 'P'):
        return BI1A(i) + BI2A(i)
    else:
        raise NotImplementedError()

def BITA(i):
    if i in ('V', 'C', 'P'):
        return BIPTA(i) + BINTA(i)
    else:
        raise NotImplementedError()


def BITTA(i):
    if i in ('V', 'C', 'P'):
        return BITA(i) + BI12A(i)
    else:
        raise NotImplementedError()

BI1 = somme((BI1(i) for i in ('V', 'C', 'P')))


BI2 = somme((BI2(i) for i in ('V', 'C', 'P')))

def BI1(i):
    if i in ('V', 'C', 'P'):
        return BI1A(i)
    else:
        raise NotImplementedError()


def BI2(i):
    if i in ('V', 'C', 'P'):
        return BI2A(i)
    else:
        raise NotImplementedError()

def BIHTA(i):
    if i in ('V', 'P', 'C'):
        return max(0, arr(BIHNO(i) - BIHDN(i) * 1 - positif(ART1731BIS * PREM8_11) * MAJREV)) + min(0, BIHNO(i) - BIHDN(i) * 1 - positif(ART1731BIS * PREM8_11))
    else:
        raise NotImplementedError()


def BINHTA(i):
    if i in ('V', 'P', 'C'):
        return max(0, arr(BICHRE(i) - BICHDE(i) * 1 - positif(ART1731BIS * PREM8_11) * MAJREV)) + min(0, BICHRE(i) - BICHDE(i) * 1 - positif(ART1731BIS * PREM8_11))
    else:
        raise NotImplementedError()

def MIB_TVEN(i):
    if i in ('V', 'C', 'P'):
        return MIBVEN(i) + MIBNPVEN(i) + MIBGITE(i) + LOCGIT(i)
    else:
        raise NotImplementedError()


def MIB_TPRES(i):
    if i in ('V', 'C', 'P'):
        return MIBPRES(i) + MIBNPPRES(i) + MIBMEU(i)
    else:
        raise NotImplementedError()


def MIB_TT(i):
    if i in ('V', 'C', 'P'):
        return MIB_TVEN(i) + MIB_TPRES(i)
    else:
        raise NotImplementedError()

def PMIB_AP(i):
    if i in ('V', 'C', 'P'):
        return min(MIBPRES(i), max(MIN_MBIC, arr(MIBPRES(i) * TX_MIBPRES / 100)))
    else:
        raise NotImplementedError()


def PMIB_AV(i):
    if i in ('V', 'C', 'P'):
        return min(MIBVEN(i), max(MIN_MBIC, arr(MIBVEN(i) * TX_MIBVEN / 100)))
    else:
        raise NotImplementedError()


def MIB_AV(i):
    if i in ('V', 'C', 'P'):
        return min(MIB_TVEN(i), max(MIN_MBIC, arr(MIB_TVEN(i) * TX_MIBVEN / 100)))
    else:
        raise NotImplementedError()


def MIB_AP(i):
    if i in ('V', 'C', 'P'):
        return min(MIB_TPRES(i), max(MIN_MBIC, arr(MIB_TPRES(i) * TX_MIBPRES / 100)))
    else:
        raise NotImplementedError()

def MIB_ABNPV(i):
    if i in ('V', 'C', 'P'):
        return max(0, arr(MIB_AV(i) * MIBNPVEN(i) / MIB_TVEN(i))) * positif(present(MIBGITE(i)) + present(LOCGIT(i))) + MIB_AV(i) - MIB_ABV(i) * 1 - positif(present(MIBGITE(i)) + present(LOCGIT(i)))
    else:
        raise NotImplementedError()


def MIB_ABNPVL(i):
    if i in ('V', 'C', 'P'):
        return MIB_AV(i) - MIB_ABV(i) - MIB_ABNPV(i) * positif(present(MIBGITE(i)) + present(LOCGIT(i)))
    else:
        raise NotImplementedError()


def MIB_ABP(i):
    if i in ('V', 'C', 'P'):
        return max(0, arr(MIB_AP(i) * MIBPRES(i) / MIB_TPRES(i)))
    else:
        raise NotImplementedError()


def MIB_ABV(i):
    if i in ('V', 'C', 'P'):
        return max(0, arr(MIB_AV(i) * MIBVEN(i) / MIB_TVEN(i)))
    else:
        raise NotImplementedError()


def MIB_ABNPPL(i):
    if i in ('V', 'C', 'P'):
        return MIB_AP(i) - MIB_ABP(i) - MIB_ABNPP(i) * present(MIBMEU(i))
    else:
        raise NotImplementedError()


def MIB_ABNPP(i):
    if i in ('V', 'C', 'P'):
        return max(0, arr(MIB_AP(i) * MIBNPPRES(i) / MIB_TPRES(i))) * present(MIBMEU(i)) + MIB_AP(i) - MIB_ABP(i) * 1 - present(MIBMEU(i))
    else:
        raise NotImplementedError()

MIBNETVF = somme((MIB_NETV(i) for i in ('V', 'C', 'P')))


MIBNETNPVF = somme((MIB_NETNPV(i) for i in ('V', 'C', 'P')))


MIBNETNPVLF = somme((MIB_NETNPVL(i) for i in ('V', 'C', 'P')))


MIBNETPF = somme((MIB_NETP(i) for i in ('V', 'C', 'P')))


MIBNETNPPF = somme((MIB_NETNPP(i) for i in ('V', 'C', 'P')))


MIBNETNPPLF = somme((MIB_NETNPPL(i) for i in ('V', 'C', 'P')))


def MIB_NETNPVL(i):
    if i in ('V', 'C', 'P'):
        return MIBGITE(i) + LOCGIT(i) - MIB_ABNPVL(i)
    else:
        raise NotImplementedError()


def MIB_NETP(i):
    if i in ('V', 'C', 'P'):
        return MIBPRES(i) - MIB_ABP(i)
    else:
        raise NotImplementedError()


def MIB_NETV(i):
    if i in ('V', 'C', 'P'):
        return MIBVEN(i) - MIB_ABV(i)
    else:
        raise NotImplementedError()


def MIB_NETNPV(i):
    if i in ('V', 'C', 'P'):
        return MIBNPVEN(i) - MIB_ABNPV(i)
    else:
        raise NotImplementedError()


def PMIB_NETV(i):
    if i in ('V', 'C', 'P'):
        return MIBVEN(i) - PMIB_AV(i)
    else:
        raise NotImplementedError()


def MIB_NETNPPL(i):
    if i in ('V', 'C', 'P'):
        return MIBMEU(i) - MIB_ABNPPL(i)
    else:
        raise NotImplementedError()


def PMIB_NETP(i):
    if i in ('V', 'C', 'P'):
        return MIBPRES(i) - PMIB_AP(i)
    else:
        raise NotImplementedError()


def MIBNETNPVLNS(i):
    if i in ('V', 'C', 'P'):
        return MIB_NETNPVL(i) - MIBNETNPVLS(i)
    else:
        raise NotImplementedError()


def MIB_NETNPP(i):
    if i in ('V', 'C', 'P'):
        return MIBNPPRES(i) - MIB_ABNPP(i)
    else:
        raise NotImplementedError()


def MIBNETNPVLS(i):
    if i in ('V', 'C', 'P'):
        return arr(MIB_NETNPVL(i) * MIBGITE(i) / MIBGITE(i) + LOCGIT(i))
    else:
        raise NotImplementedError()

MIB_NETCT = MIBPVV + MIBPVC + MIBPVP - BICPMVCTV - BICPMVCTC - BICPMVCTP


MIB_NETNPCT = MIBNPPVV + MIBNPPVC + MIBNPPVP - MIBNPDCT

MIB_1AF = max(0, somme((MIB_1A(i) for i in ('V', 'C', 'P'))))


def MIB_P1A(i):
    if i in ('V', 'C', 'P'):
        return MIB1A(i) - MIBDE(i)
    else:
        raise NotImplementedError()


def MIB_1A(i):
    if i in ('V', 'C', 'P'):
        return max(0, MIB_P1A(i) + MIB_NP1A(i))
    else:
        raise NotImplementedError()


def MIB_NP1A(i):
    if i in ('V', 'C', 'P'):
        return MIBNP1A(i) - MIBNPDE(i)
    else:
        raise NotImplementedError()

def REVIBI12(i):
    if i in ('V', 'C', 'P'):
        return BIH1(i) + BIH2(i) + BI1A(i) + BI2A(i)
    else:
        raise NotImplementedError()

BICPF = somme((BIPTA(i) + BIHTA(i) + MIB_NETV(i) + MIB_NETP(i) for i in ('V', 'C', 'P'))) + MIB_NETCT

DEFNP = somme((min(DEFBIC(i), DEFBIC(i)1731 + 0) * positif(ART1731BIS * PREM8_11) + DEFBIC(i) * 1 - positif(ART1731BIS * PREM8_11) for i in (1, 2, 3, 4, 5, 6)))


TOTDEFNP = null(4 - V_IND_TRAIT) * DEFNP + null(5 - V_IND_TRAIT) * ART1731BIS * min(DEFNP, DEFNPI1731) * 1 - PREM8_11 + 0 * PREM8_11 + min(DEFNP, DEFNPI1731) * 1 - ART1731BIS

def BICNP(i):
    if i in ('V', 'C', 'P'):
        return BINTA(i) + BINHTA(i) + MIB_NETNPV(i) + MIB_NETNPP(i)
    else:
        raise NotImplementedError()

BICNPF = 1 - positif(DEFRIBIC) * 1 - PREM8_11 * max(0, somme((BICNP(i) for i in ('V', 'C', 'P'))) + MIB_NETNPCT - DEFNPI) + positif(DEFRIBIC) * 1 - PREM8_11 * max(0, somme((BICNP(i) for i in ('V', 'C', 'P'))) + MIB_NETNPCT - DEFNPI + DEFBICNPF)

DEFNPI = abs(min(DEFNP, somme((BICNP(i) * positif(BICNP(i)) for i in ('V', 'C', 'P'))) + MIB_NETNPCT)) * positif(BICNPV + BICNPC + BICNPP + MIB_NETNPCT) * 1 - positif(ART1731BIS) + ART1731BIS * 1 - PREM8_11 * min(DEFBIC6 + DEFBIC5 + DEFBIC4 + DEFBIC3 + DEFBIC2 + DEFBIC1, max(DEFNPI1731, max(DEFNPI_P, DEFNPIP2)))

BICNPR = somme((BINTA(i) for i in ('V', 'C', 'P')))

BI12F = somme((REVIBI12(i) for i in ('V', 'C', 'P'))) + MIB_1AF

BIN = BICPF + BICNPF


def BICIMP(i):
    if i in ('V', 'C', 'P'):
        return BIHTA(i) + BIPTA(i) + MIB_NETV(i) + MIB_NETP(i)
    else:
        raise NotImplementedError()

DCTMIB = BICPMVCTV + BICPMVCTC + BICPMVCTP * positif_ou_nul(BIPN + MIB_NETCT) + 1 - positif_ou_nul(BIPN + MIB_NETCT) * BICPMVCTV + BICPMVCTC + BICPMVCTP - abs(BIPN + MIB_NETCT) + 1 - positif_ou_nul(BIPN + MIB_NETCT) * null(BICPMVCTV + BICPMVCTC + BICPMVCTP - abs(BIPN + MIB_NETCT)) * BICPMVCTV + BICPMVCTC + BICPMVCTP


DCTMIBNP = MIBNPDCT * positif_ou_nul(BINNV + BINNC + BINNP + MIB_NETNPCT) + 1 - positif_ou_nul(BINNV + BINNC + BINNP + MIB_NETNPCT) * MIBNPDCT - abs(BINNV + BINNC + BINNP + MIB_NETNPCT) + 1 - positif_ou_nul(BINNV + BINNC + BINNP + MIB_NETNPCT) * null(MIBNPDCT - abs(BINNV + BINNC + BINNP + MIB_NETNPCT)) * MIBNPDCT

VARLOCDEFPROCGAV = min(max(LOCPROCGAV, max(LOCPROCGAV_P, LOCPROCGAVP2)), LOCDEFPROCGAV)


VARLOCDEFPROCGAC = min(max(LOCPROCGAC, max(LOCPROCGAC_P, LOCPROCGACP2)), LOCDEFPROCGAC)


VARLOCDEFPROCGAP = min(max(LOCPROCGAP, max(LOCPROCGAP_P, LOCPROCGAPP2)), LOCDEFPROCGAP)


VARLOCDEFPROV = min(max(LOCPROV, max(LOCPROV_P, LOCPROVP2)), LOCDEFPROV)


VARLOCDEFPROC = min(max(LOCPROC, max(LOCPROC_P, LOCPROCP2)), LOCDEFPROC)


VARLOCDEFPROP = min(max(LOCPROP, max(LOCPROP_P, LOCPROPP2)), LOCDEFPROP)


DEPLOCV = LOCPROCGAV - LOCDEFPROCGAV + LOCPROV - LOCDEFPROV


DEPLOCC = LOCPROCGAC - LOCDEFPROCGAC + LOCPROC - LOCDEFPROC


DEPLOCP = LOCPROCGAP - LOCDEFPROCGAP + LOCPROP - LOCDEFPROP


DENPLOCAFFV = positif(present(LOCNPCGAV) + present(LOCGITCV) + present(LOCDEFNPCGAV) + present(LOCNPV) + present(LOCGITHCV) + present(LOCDEFNPV))


DENPLOCAFFC = positif(present(LOCNPCGAC) + present(LOCGITCC) + present(LOCDEFNPCGAC) + present(LOCNPC) + present(LOCGITHCC) + present(LOCDEFNPC))


DENPLOCAFFP = positif(present(LOCNPCGAPAC) + present(LOCGITCP) + present(LOCDEFNPCGAPAC) + present(LOCNPPAC) + present(LOCGITHCP) + present(LOCDEFNPPAC))


DENPLOCV = LOCNPCGAV + LOCGITCV - LOCDEFNPCGAV + LOCNPV + LOCGITHCV - LOCDEFNPV


DENPLOCC = LOCNPCGAC + LOCGITCC - LOCDEFNPCGAC + LOCNPC + LOCGITHCC - LOCDEFNPC


DENPLOCP = LOCNPCGAPAC + LOCGITCP - LOCDEFNPCGAPAC + LOCNPPAC + LOCGITHCP - LOCDEFNPPAC


PLOCCGAV = LOCPROCGAV - LOCDEFPROCGAV * 1 - positif(ART1731BIS * PREM8_11)


PLOCCGAC = LOCPROCGAC - LOCDEFPROCGAC * 1 - positif(ART1731BIS * PREM8_11)


PLOCCGAPAC = LOCPROCGAP - LOCDEFPROCGAP * 1 - positif(ART1731BIS * PREM8_11)


VARLOCDEFNPCGAV = min(max(LOCNPCGAV + LOCGITCV, max(LOCNPCGAV_P + LOCGITCV_P, LOCNPCGAVP2 + LOCGITCVP2)), LOCDEFNPCGAV)


VARLOCDEFNPCGAC = min(max(LOCNPCGAC + LOCGITCC, max(LOCNPCGAC_P + LOCGITCC_P, LOCNPCGACP2 + LOCGITCCP2)), LOCDEFNPCGAC)


VARLOCDEFNPCGAP = min(max(LOCNPCGAPAC + LOCGITCP, max(LOCNPCGAPAC_P + LOCGITCP_P, LOCNPCGAPACP2 + LOCGITCPP2)), LOCDEFNPCGAPAC)


NPLOCCGAV = LOCNPCGAV + LOCGITCV - LOCDEFNPCGAV * 1 - positif(ART1731BIS * PREM8_11)


NPLOCCGAC = LOCNPCGAC + LOCGITCC - LOCDEFNPCGAC * 1 - positif(ART1731BIS * PREM8_11)


NPLOCCGAPAC = LOCNPCGAPAC + LOCGITCP - LOCDEFNPCGAPAC * 1 - positif(ART1731BIS * PREM8_11)


NPLOCCGASSV = LOCNPCGAV + LOCGITCV - LOCDEFNPCGAV


NPLOCCGASSC = LOCNPCGAC + LOCGITCC - LOCDEFNPCGAC


NPLOCCGASSPAC = LOCNPCGAPAC + LOCGITCP - LOCDEFNPCGAPAC


NPLOCCGASV = arr(NPLOCCGAV * LOCNPCGAV / LOCNPCGAV + LOCGITCV) * present(LOCNPCGAV) + min(0, NPLOCCGAV) * 1 - present(LOCNPCGAV)


NPLOCCGASC = arr(NPLOCCGAC * LOCNPCGAC / LOCNPCGAC + LOCGITCC) * present(LOCNPCGAC) + min(0, NPLOCCGAC) * 1 - present(LOCNPCGAC)


NPLOCCGASP = arr(NPLOCCGAPAC * LOCNPCGAPAC / LOCNPCGAPAC + LOCGITCP) * present(LOCNPCGAPAC) + min(0, NPLOCCGAPAC) * 1 - present(LOCNPCGAPAC)


NPLOCCGANSV = NPLOCCGAV - NPLOCCGASV


NPLOCCGANSC = NPLOCCGAC - NPLOCCGASC


NPLOCCGANSP = NPLOCCGAPAC - NPLOCCGASP


PLOCV = min(0, LOCPROV - LOCDEFPROV * 1 - positif(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFPROV * 1 - positif(ART1731BIS * PREM8_11) - LOCPROV) + arr(max(0, LOCPROV - LOCDEFPROV * 1 - positif(ART1731BIS * PREM8_11)) * MAJREV) * positif(LOCPROV - LOCDEFPROV * 1 - positif(ART1731BIS * PREM8_11))


PLOCC = min(0, LOCPROC - LOCDEFPROC * 1 - positif(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFPROC * 1 - positif(ART1731BIS * PREM8_11) - LOCPROC) + arr(max(0, LOCPROC - LOCDEFPROC * 1 - positif(ART1731BIS * PREM8_11)) * MAJREV) * positif(LOCPROC - LOCDEFPROC * 1 - positif(ART1731BIS * PREM8_11))


PLOCPAC = min(0, LOCPROP - LOCDEFPROP * 1 - positif(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFPROP * 1 - positif(ART1731BIS * PREM8_11) - LOCPROP) + arr(max(0, LOCPROP - LOCDEFPROP * 1 - positif(ART1731BIS * PREM8_11)) * MAJREV) * positif(LOCPROP - LOCDEFPROP * 1 - positif(ART1731BIS * PREM8_11))


VARLOCDEFNPV = min(LOCDEFNPV, max(LOCNPV + LOCGITHCV, max(LOCNPV_P + LOCGITHCV_P, LOCNPVP2 + LOCGITHCVP2)))


VARLOCDEFNPC = min(LOCDEFNPC, max(LOCNPC + LOCGITHCC, max(LOCNPC_P + LOCGITHCC_P, LOCNPCP2 + LOCGITHCCP2)))


VARLOCDEFNPP = min(LOCDEFNPPAC, max(LOCNPPAC + LOCGITHCP, max(LOCNPP_P + LOCGITHCP_P, LOCNPPP2 + LOCGITHCPP2)))


NPLOCV = min(0, LOCNPV + LOCGITHCV - LOCDEFNPV * 1 - positif(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFNPV * 1 - positif(ART1731BIS * PREM8_11) - LOCNPV - LOCGITHCV) + arr(max(0, LOCNPV + LOCGITHCV - LOCDEFNPV * 1 - positif(ART1731BIS * PREM8_11)) * MAJREV) * positif(LOCNPV + LOCGITHCV - LOCDEFNPV * 1 - positif(ART1731BIS * PREM8_11))


NPLOCC = min(0, LOCNPC + LOCGITHCC - LOCDEFNPC * 1 - positif(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFNPC * 1 - positif(ART1731BIS * PREM8_11) - LOCNPC - LOCGITHCC) + arr(max(0, LOCNPC + LOCGITHCC - LOCDEFNPC * 1 - positif(ART1731BIS * PREM8_11)) * MAJREV) * positif(LOCNPC + LOCGITHCC - LOCDEFNPC * 1 - positif(ART1731BIS * PREM8_11))


NPLOCPAC = min(0, LOCNPPAC + LOCGITHCP - LOCDEFNPPAC * 1 - positif(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFNPPAC * 1 - positif(ART1731BIS * PREM8_11) - LOCNPPAC - LOCGITHCP) + arr(max(0, LOCNPPAC + LOCGITHCP - LOCDEFNPPAC * 1 - positif(ART1731BIS * PREM8_11)) * MAJREV) * positif(LOCNPPAC + LOCGITHCP - LOCDEFNPPAC * 1 - positif(ART1731BIS * PREM8_11))


NPLOCSSV = min(0, LOCNPV + LOCGITHCV - LOCDEFNPV) * positif_ou_nul(LOCDEFNPV - LOCNPV - LOCGITHCV) + arr(max(0, LOCNPV + LOCGITHCV - LOCDEFNPV) * MAJREV) * positif(LOCNPV + LOCGITHCV - LOCDEFNPC)


NPLOCSSC = min(0, LOCNPC + LOCGITHCC - LOCDEFNPC) * positif_ou_nul(LOCDEFNPC - LOCNPC - LOCGITHCC) + arr(max(0, LOCNPC + LOCGITHCC - LOCDEFNPC) * MAJREV) * positif(LOCNPC + LOCGITHCC - LOCDEFNPC)


NPLOCSSPAC = min(0, LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) * positif_ou_nul(LOCDEFNPPAC - LOCNPPAC - LOCGITHCP) + arr(max(0, LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) * MAJREV) * positif(LOCNPPAC + LOCGITHCP - LOCDEFNPPAC)


NPLOCSV = arr(NPLOCV * LOCNPV / LOCNPV + LOCGITHCV) * positif(LOCNPV) + min(0, NPLOCV) * 1 - positif(LOCNPV)


NPLOCSC = arr(NPLOCC * LOCNPC / LOCNPC + LOCGITHCC) * present(LOCNPC) + min(0, NPLOCC) * 1 - positif(LOCNPC)


NPLOCSP = arr(NPLOCPAC * LOCNPPAC / LOCNPPAC + LOCGITHCP) * positif(LOCNPPAC) + min(0, NPLOCPAC) * 1 - positif(LOCNPPAC)


NPLOCNSV = NPLOCV - NPLOCSV


NPLOCNSC = NPLOCC - NPLOCSC


NPLOCNSP = NPLOCPAC - NPLOCSP

PLOCNETV = PLOCCGAV + PLOCV


PLOCNETC = PLOCCGAC + PLOCC


PLOCNETPAC = PLOCCGAPAC + PLOCPAC


NPLOCNETTV = NPLOCCGAV + NPLOCV + MIB_NETNPVLV + MIB_NETNPPLV


NPLOCNETTC = NPLOCCGAC + NPLOCC + MIB_NETNPVLC + MIB_NETNPPLC


NPLOCNETTPAC = NPLOCCGAPAC + NPLOCPAC + MIB_NETNPVLP + MIB_NETNPPLP


NPLOCNETTSV = NPLOCCGASV + NPLOCSV + MIBNETNPVLSV + MIB_NETNPPLV


NPLOCNETTSC = NPLOCCGASC + NPLOCSC + MIBNETNPVLSC + MIB_NETNPPLC


NPLOCNETTSP = NPLOCCGASP + NPLOCSP + MIBNETNPVLSP + MIB_NETNPPLP


NPLOCNETV = NPLOCCGAV + NPLOCV


NPLOCNETC = NPLOCCGAC + NPLOCC


NPLOCNETPAC = NPLOCCGAPAC + NPLOCPAC

PLOCNETF = PLOCNETV + PLOCNETC + PLOCNETPAC


TOTDEFLOCNP = LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1


TOTDEFLOCNPBIS = null(4 - V_IND_TRAIT) * LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1 * 1 - positif(ART1731BIS * PREM8_11) + null(5 - V_IND_TRAIT) * max(0, min(LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1, TOTDEFLOCNP1731 * ART1731BIS * 1 - PREM8_11 + LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1 * 1 - positif(ART1731BIS * PREM8_11)))


TOTDEFLOCNPPS = LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1


NPLOCNETF10 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - positif(ART1731BIS * PREM8_11)


NPLOCNETF9 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - positif(ART1731BIS * PREM8_11)


NPLOCNETF8 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - positif(ART1731BIS * PREM8_11)


NPLOCNETF7 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - positif(ART1731BIS * PREM8_11)


NPLOCNETF6 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF5, LNPRODEF51731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF5 * 1 - positif(ART1731BIS * PREM8_11)


NPLOCNETF5 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF5, LNPRODEF51731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF5 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF4, LNPRODEF41731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF4 * 1 - positif(ART1731BIS * PREM8_11)


NPLOCNETF4 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF5, LNPRODEF51731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF5 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF4, LNPRODEF41731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF4 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF3, LNPRODEF31731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF3 * 1 - positif(ART1731BIS * PREM8_11)


NPLOCNETF3 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF5, LNPRODEF51731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF5 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF4, LNPRODEF41731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF4 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF3, LNPRODEF31731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF3 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF2, LNPRODEF21731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF2 * 1 - positif(ART1731BIS * PREM8_11)


NPLOCNETF2 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF5, LNPRODEF51731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF5 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF4, LNPRODEF41731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF4 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF3, LNPRODEF31731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF3 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF2, LNPRODEF21731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF2 * 1 - positif(ART1731BIS * PREM8_11) + min(LNPRODEF1, LNPRODEF11731 + 0) * positif(ART1731BIS * PREM8_11) + LNPRODEF1 * 1 - positif(ART1731BIS * PREM8_11)

NPLOCNETF = positif(1 - positif(DEFRILOC) + PREM8_11) * max(0, NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - DNPLOCIMPU) + positif(DEFRILOC) * 1 - PREM8_11 * max(0, NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - DNPLOCIMPU + DEFLOCNPF)


NPLOCNETSF = max(0, NPLOCNETTSV + NPLOCNETTSC + NPLOCNETTSP - TOTDEFLOCNPBIS)

DNPLOCIMPU = 1 - DEFRILOC * 1 - PREM8_11 * max(0, min(TOTDEFLOCNP, NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC)) + positif(DEFRILOC) * 1 - PREM8_11 * min(LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1, max(DNPLOCIMPU1731, max(DNPLOCIMPU_P, DNPLOCIMPUP2)))


NPLOCNETFHDEFANT = max(0, NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC)


DEFNPLOCF = min(0, NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - TOTDEFLOCNPBIS - LNPRODEF10)


DEFNONPLOC = abs(DEFNPLOCF)

DEFLOC2 = 1 - positif(NPLOCNETF2) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4 - LNPRODEF3 - LNPRODEF2, 0) - LNPRODEF1, LNPRODEF1)) * positif_ou_nul(LNPRODEF1 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4 - LNPRODEF3 - LNPRODEF2, 0)) * 1 - positif(ART1731BIS) + min(LNPRODEF1, TOTDEFLOCNP - DNPLOCIMPU) * positif(ART1731BIS * 1 - positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF1 * ART1731BIS * positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))


DEFLOC3 = 1 - positif(NPLOCNETF3) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4 - LNPRODEF3, 0) - LNPRODEF2, LNPRODEF2)) * positif_ou_nul(LNPRODEF2 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4 - LNPRODEF3, 0)) * 1 - positif(ART1731BIS) + min(LNPRODEF2, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2) * positif(ART1731BIS * 1 - positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF2 * ART1731BIS * positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))


DEFLOC4 = 1 - positif(NPLOCNETF4) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4, 0) - LNPRODEF3, LNPRODEF3)) * positif_ou_nul(LNPRODEF3 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4, 0)) * 1 - positif(ART1731BIS) + min(LNPRODEF3, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3) * positif(ART1731BIS * 1 - positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF3 * ART1731BIS * positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))


DEFLOC5 = 1 - positif(NPLOCNETF5) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5, 0) - LNPRODEF4, LNPRODEF4)) * positif_ou_nul(LNPRODEF4 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5, 0)) * 1 - positif(ART1731BIS) + min(LNPRODEF4, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4) * positif(ART1731BIS * 1 - positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF4 * ART1731BIS * positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))


DEFLOC6 = 1 - positif(NPLOCNETF6) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6, 0) - LNPRODEF5, LNPRODEF5)) * positif_ou_nul(LNPRODEF5 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6, 0)) * 1 - positif(ART1731BIS) + min(LNPRODEF5, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5) * positif(ART1731BIS * 1 - positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF5 * ART1731BIS * positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))


DEFLOC7 = 1 - positif(NPLOCNETF7) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7, 0) - LNPRODEF6, LNPRODEF6)) * positif_ou_nul(LNPRODEF6 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7, 0)) * 1 - positif(ART1731BIS) + min(LNPRODEF6, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6) * positif(ART1731BIS * 1 - positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF6 * ART1731BIS * positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))


DEFLOC8 = 1 - positif(NPLOCNETF8) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8, 0) - LNPRODEF7, LNPRODEF7)) * positif_ou_nul(LNPRODEF7 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8, 0)) * 1 - positif(ART1731BIS) + min(LNPRODEF7, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6 - DEFLOC7) * positif(ART1731BIS * 1 - positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF7 * ART1731BIS * positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))


DEFLOC9 = 1 - positif(NPLOCNETF9) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9, 0) - LNPRODEF8, LNPRODEF8)) * positif_ou_nul(LNPRODEF8 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9, 0)) * 1 - positif(ART1731BIS) + min(LNPRODEF8, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6 - DEFLOC7 - DEFLOC8) * positif(ART1731BIS * 1 - positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF8 * ART1731BIS * positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))


DEFLOC10 = 1 - positif(NPLOCNETF10) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10, 0) - LNPRODEF9, LNPRODEF9)) * positif_ou_nul(LNPRODEF9 - max(NPLOCNETFHDEFANT - LNPRODEF10, 0)) * 1 - positif(ART1731BIS) + min(LNPRODEF9, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6 - DEFLOC7 - DEFLOC8 - DEFLOC9) * positif(ART1731BIS * 1 - positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF9 * ART1731BIS * positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))

DEFNPLOCFAV = max(0, abs(DEFNPLOCF) - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6 - DEFLOC7 - DEFLOC8 - DEFLOC9 - DEFLOC10)

DEFLOC1 = positif(DEFNONPLOC) * DEFNPLOCFAV * 1 - positif(ART1731BIS) + DEFLOCNPF * positif(ART1731BIS * 1 - PREM8_11) + LOCDEFNPCGAV + LOCDEFNPV + LOCDEFNPCGAC + LOCDEFNPC + LOCDEFNPCGAPAC + LOCDEFNPPAC * ART1731BIS * positif(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))


VAREDEFLOCNP = min(TOTDEFLOCNP, NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC)

DFBICNPF = somme((BICNP(i) for i in ('V', 'C', 'P'))) + MIB_NETNPCT + DEFNPI + BICDEV + BICDEC + BICDEP + BICHDEV + BICHDEC + BICHDEP


DEFBICNPF = DEFRIBIC * 1 - PREM8_11 * max(0, min(BICDEV + BICDEC + BICDEP + BICHDEV + BICHDEC + BICHDEP, max(DFBICNPF1731, max(DFBICNPF_P, DFBICNPFP2)) - BICDEV - BICDEC - BICDEP - BICHDEV - BICHDEC - BICHDEP))

DEFLOCNP = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - DNPLOCIMPU + LOCDEFNPV + LOCDEFNPC + LOCDEFNPPAC + LOCDEFNPCGAV + LOCDEFNPCGAC + LOCDEFNPCGAPAC


DEFLOCNPF = DEFRILOC + 0 * 1 - PREM8_11 * max(0, min(LOCDEFNPV + LOCDEFNPC + LOCDEFNPPAC + LOCDEFNPCGAV + LOCDEFNPCGAC + LOCDEFNPCGAPAC, max(DEFLOCNP1731, max(DEFLOCNP_P, DEFLOCNPP2)) - LOCDEFNPV - LOCDEFNPC - LOCDEFNPPAC - LOCDEFNPCGAV - LOCDEFNPCGAC - LOCDEFNPCGAPAC))
