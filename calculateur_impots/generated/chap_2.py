# -*- coding: utf-8 -*-


# WARNING: This file is automatically generated by a script. No not modify it by hand!

# Original files are "chap-2.json and chap-2.m"


def NAPINI(IAVIMBIS, IAVIMO, INDTXMIN, INDTXMOY, IRANT, IRN, NAPCRPAVIM, PIR, RASAR, SEUIL_61, V_CR2):
    return IRN + PIR - IRANT * 1 - INDTXMIN * 1 - INDTXMOY + min(0, IRN + PIR - IRANT) * INDTXMIN + INDTXMOY + max(0, IRN + PIR - IRANT) * INDTXMIN * positif(IAVIMBIS - NAPCRPAVIM - SEUIL_61) + INDTXMOY * positif(IAVIMO - NAPCRPAVIM - SEUIL_61) + RASAR * V_CR2


def RC1INI(NAPINI, SEUIL_12):
    return positif(NAPINI + 1 - SEUIL_12)


def NAPTOT(HAUTREVCUM, IRCUM, PCAPCUM, RECUMIR, TAXACUM, TAXLOYCUM):
    return IRCUM + TAXACUM + PCAPCUM + TAXLOYCUM + HAUTREVCUM - RECUMIR


def NAPTOTA(V_ANTRE, V_IRPSANT):
    return V_IRPSANT - V_ANTRE


def NAPTOTAIR(V_ANTREIR, V_TOTIRANT):
    return V_TOTIRANT - V_ANTREIR


def TOTCRA(V_ANTCR):
    return V_ANTCR


def TOTIRPSANT(V_ANTRE, V_IRPSANT, V_NONMERANT, V_NONRESTANT):
    return V_IRPSANT - V_NONMERANT + V_NONRESTANT - V_ANTRE


def IRNIN(IRANT, IRN):
    return IRN - IRANT * positif(IRN - IRANT)


def ISF4BASE(ISF4BIS, SEUIL_12):
    return ISF4BIS * positif_ou_nul(ISF4BIS - SEUIL_12)


def ISFIN(ISF4BASE):
    return ISF4BASE


def IRNIN_INR(IR9YI, IRANT, IRN):
    return max(0, IRN - IRANT - IR9YI) * positif(IRN - IRANT)


def CSBASE_INR(CS9YP, CSG, CSGIM):
    return max(0, CSG - CSGIM - CS9YP)


def RDBASE_INR(CRDSIM, RD9YP, RDSN):
    return max(0, RDSN - CRDSIM - RD9YP)


def PSBASE_INR(PRS, PRSPROV, PS9YP):
    return max(0, PRS - PRSPROV - PS9YP)


def CVNBASE_INR(COD8YT, CVN9YP, CVNSALC):
    return max(0, CVNSALC - COD8YT - CVN9YP)


def CDISBASE_INR(CDIS, CDIS9YP, CDISPROV):
    return max(0, CDIS - CDISPROV - CDIS9YP)


def GLOBASE_INR(CGLOA, COD8YL, GLO9YP):
    return max(0, CGLOA - COD8YL - GLO9YP)


def REGVBASE_INR(BREGV, REGV9YP):
    return max(0, BREGV - REGV9YP)


def RSE1BASE_INR(CSPROVYD, RSE19YP, RSE1N):
    return max(0, RSE1N - CSPROVYD - RSE19YP)


def RSE2BASE_INR(CIRSE8SA, CIRSE8TV, CSPROVYF, CSPROVYN, RSE29YP, RSE8SA, RSE8TV):
    return max(0, max(0, RSE8TV - CIRSE8TV - CSPROVYF) + max(0, RSE8SA - CIRSE8SA - CSPROVYN) - RSE29YP)


def RSE3BASE_INR(CSPROVYG, RSE39YP, RSE3N):
    return max(0, RSE3N - CSPROVYG - RSE39YP)


def RSE4BASE_INR(CIRSE8SB, CIRSE8TX, CSPROVYH, CSPROVYP, RSE49YP, RSE8SB, RSE8TX):
    return max(0, max(0, RSE8TX - CIRSE8TX - CSPROVYH) + max(0, RSE8SB - CIRSE8SB - CSPROVYP) - RSE49YP)


def RSE5BASE_INR(CSPROVYE, RSE59YP, RSE5N):
    return max(0, RSE5N - CSPROVYE - RSE59YP)


def TAXABASE_INR(IAMD1, IRANT, IRN, SEUIL_61, TAXA9YI, TAXASSUR):
    return arr(max(TAXASSUR - TAXA9YI + min(0, IRN - IRANT), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def PCAPBASE_INR(CAP9YI, IAMD1, IPCAPTAXT, IRANT, IRN, SEUIL_61, TAXASSUR):
    return arr(max(IPCAPTAXT - CAP9YI + min(0, IRN - IRANT + TAXASSUR), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def LOYBASE_INR(IAMD1, IPCAPTAXT, IRANT, IRN, LOY9YI, SEUIL_61, TAXASSUR, TAXLOY):
    return arr(max(TAXLOY - LOY9YI + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def CHRBASE_INR(CHR9YI, IAMD1, IHAUTREVT, IPCAPTAXT, IRANT, IRN, SEUIL_61, TAXASSUR, TAXLOY):
    return arr(max(IHAUTREVT - CHR9YI + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def CSBASE(CSG, CSGIM):
    return CSG - CSGIM


def RDBASE(CRDSIM, RDSN):
    return RDSN - CRDSIM


def PSBASE(PRS, PRSPROV):
    return PRS - PRSPROV


def CVNBASE(COD8YT, CVNSALC):
    return CVNSALC - COD8YT


def CDISBASE(CDIS, CDISPROV):
    return CDIS - CDISPROV


def GLOBASE(CGLOA, COD8YL):
    return CGLOA - COD8YL


def RSE1BASE(CSPROVYD, RSE1N):
    return RSE1N - CSPROVYD


def RSE2BASE(CIRSE8SA, CIRSE8TV, CSPROVYF, CSPROVYN, RSE8SA, RSE8TV):
    return max(0, RSE8TV - CIRSE8TV - CSPROVYF) + max(0, RSE8SA - CIRSE8SA - CSPROVYN)


def RSE3BASE(CSPROVYG, RSE3N):
    return RSE3N - CSPROVYG


def RSE4BASE(CIRSE8SB, CIRSE8TX, CSPROVYH, CSPROVYP, RSE8SB, RSE8TX):
    return max(0, RSE8TX - CIRSE8TX - CSPROVYH) + max(0, RSE8SB - CIRSE8SB - CSPROVYP)


def RSE5BASE(CSPROVYE, RSE5N):
    return RSE5N - CSPROVYE


def REGVBASE(BREGV):
    return BREGV


def TAXABASE(IAMD1, IRANT, IRN, SEUIL_61, TAXASSUR):
    return arr(max(TAXASSUR + min(0, IRN - IRANT), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def PCAPBASE(IAMD1, IPCAPTAXT, IRANT, IRN, SEUIL_61, TAXASSUR):
    return arr(max(IPCAPTAXT + min(0, IRN - IRANT + TAXASSUR), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def LOYBASE(IAMD1, IPCAPTAXT, IRANT, IRN, SEUIL_61, TAXASSUR, TAXLOY):
    return arr(max(TAXLOY + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def CHRBASE(IAMD1, IHAUTREVT, IPCAPTAXT, IRANT, IRN, SEUIL_61, TAXASSUR, TAXLOY):
    return arr(max(IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def IRBASE_I(IRANT, IRN, SEUIL_12):
    return IRN - IRANT * positif(IRN + 1 - SEUIL_12)


def IRBASE_N(CAPBASE_IRECT, HRBASE_IRECT, IAN, IRANT, IRE, IRN, TAXABASE_IRECT):
    return IRN - IRANT * 1 - positif(IRN - IRANT + TAXABASE_IRECT + CAPBASE_IRECT + HRBASE_IRECT) + IAN - min(IAN, IRE) * positif(IRN - IRANT + TAXABASE_IRECT + CAPBASE_IRECT + HRBASE_IRECT)


def TAXABASE_I(IAMD1, SEUIL_61, TAXASSUR):
    return TAXASSUR * positif(IAMD1 + 1 - SEUIL_61)


def TAXABASE_N(IAMD1, IRANT, IRN, SEUIL_61, TAXASSUR):
    return arr(max(TAXASSUR + min(0, IRN - IRANT), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def CAPBASE_I(IAMD1, IPCAPTAXT, SEUIL_61):
    return IPCAPTAXT * positif(IAMD1 + 1 - SEUIL_61)


def CAPBASE_N(IAMD1, IPCAPTAXT, IRANT, IRN, SEUIL_61, TAXASSUR):
    return arr(max(IPCAPTAXT + min(0, IRN - IRANT + TAXASSUR), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def LOYBASE_I(IAMD1, SEUIL_61, TAXLOY):
    return TAXLOY * positif(IAMD1 + 1 - SEUIL_61)


def LOYBASE_N(IAMD1, IPCAPTAXT, IRANT, IRN, SEUIL_61, TAXASSUR, TAXLOY):
    return arr(max(TAXLOY + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def HRBASE_I(IAMD1, IHAUTREVT, SEUIL_61):
    return IHAUTREVT * positif(IAMD1 + 1 - SEUIL_61)


def HRBASE_N(IAMD1, IHAUTREVT, IPCAPTAXT, IRANT, IRN, SEUIL_61, TAXASSUR, TAXLOY):
    return arr(max(IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY), 0)) * positif(IAMD1 + 1 - SEUIL_61)


def IRNN(IRNIN):
    return IRNIN


def PTOTIRCS(PCDIS, PCSG, PCVN, PGLOA, PHAUTREV, PIR, PPCAP, PPRS, PRDS, PREGV, PRSE1, PRSE2, PRSE3, PRSE4, PRSE5, PTAXA, PTAXLOY):
    return PIR + PTAXA + PTAXLOY + PHAUTREV + PPCAP + PPRS + PCSG + PRDS + PCDIS + PREGV + PCVN + PGLOA + PRSE1 + PRSE2 + PRSE3 + PRSE4 + PRSE5


def TOTPENIR(PHAUTREV, PIR, PPCAP, PTAXA, PTAXLOY):
    return PIR + PTAXA + PTAXLOY + PHAUTREV + PPCAP


def TOTPENCS(PCDIS, PCSG, PCVN, PGLOA, PPRS, PRDS, PREGV, PRSE1, PRSE2, PRSE3, PRSE4, PRSE5):
    return PPRS + PCSG + PRDS + PCVN + PREGV + PCDIS + PGLOA + PRSE1 + PRSE2 + PRSE3 + PRSE4 + PRSE5


def INCTOTIR(RETHAUTREV, RETIR, RETLOY, RETPCAP, RETTAXA):
    return RETIR + RETTAXA + RETPCAP + RETLOY + RETHAUTREV


def INCTOTCS(RETCDIS, RETCS, RETCVN, RETGLOA, RETPS, RETRD, RETREGV, RETRSE1, RETRSE2, RETRSE3, RETRSE4, RETRSE5):
    return RETCS + RETRD + RETPS + RETCVN + RETREGV + RETCDIS + RETGLOA + RETRSE1 + RETRSE2 + RETRSE3 + RETRSE4 + RETRSE5


def RETIRCSTOT(INCTOTCS, INCTOTIR):
    return INCTOTIR + INCTOTCS


def PIR(IAMD1, PTOIR, SEUIL_61):
    return PTOIR * positif_ou_nul(IAMD1 - SEUIL_61)


def PPRS(PTOPRS):
    return PTOPRS


def PCSG(PTOCSG):
    return PTOCSG


def PRSE1(PTORSE1):
    return PTORSE1


def PRSE2(PTORSE2):
    return PTORSE2


def PRSE3(PTORSE3):
    return PTORSE3


def PRSE4(PTORSE4):
    return PTORSE4


def PRSE5(PTORSE5):
    return PTORSE5


def PREGV(PTOREGV):
    return PTOREGV


def PRDS(PTORDS):
    return PTORDS


def PTAXA(PTOTAXA):
    return PTOTAXA


def PPCAP(PTOTPCAP):
    return PTOTPCAP


def PTAXLOY(PTOTLOY):
    return PTOTLOY


def PHAUTREV(PTOTCHR):
    return PTOTCHR


def PCVN(PTOCVN):
    return PTOCVN


def PCDIS(PTOCDIS):
    return PTOCDIS


def PGLOA(PTOGLOA):
    return PTOGLOA


def PTOT(PIR):
    return PIR


def ILIIRNET(IRCUM, PIR, RECUMIR, TOTIRCUM, TOTPENIR):
    return positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0, IRCUM - PIR) + 1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * TOTIRCUM - RECUMIR - TOTPENIR


def PIRNETNEG(IRCUM, PIR):
    return max(0, PIR - IRCUM)


def ILITAXANET(PIRNETNEG, PTAXA, RECUMIR, TAXACUM, TOTIRCUM, TOTPENIR):
    return positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0, TAXACUM - PTAXA - PIRNETNEG) + 1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * 0


def PTAXANETNEG(IRCUM, PIR, PTAXA, TAXACUM):
    return max(0, PIR + PTAXA - IRCUM - TAXACUM)


def ILICAPNET(PCAPCUM, PPCAP, PTAXANETNEG, RECUMIR, TOTIRCUM, TOTPENIR):
    return positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0, PCAPCUM - PPCAP - PTAXANETNEG) + 1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * 0


def PPCAPNETNEG(IRCUM, PCAPCUM, PIR, PPCAP, PTAXA, TAXACUM):
    return max(0, PIR + PTAXA + PPCAP - IRCUM - TAXACUM - PCAPCUM)


def ILILOYNET(PPCAPNETNEG, PTAXLOY, RECUMIR, TAXLOYCUM, TOTIRCUM, TOTPENIR):
    return positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0, TAXLOYCUM - PTAXLOY - PPCAPNETNEG) + 1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * 0


def PTAXLOYNETNEG(IRCUM, PCAPCUM, PIR, PPCAP, PTAXA, PTAXLOY, TAXACUM, TAXLOYCUM):
    return max(0, PIR + PTAXA + PPCAP + PTAXLOY - IRCUM - TAXACUM - PCAPCUM - TAXLOYCUM)


def ILICHRNET(HAUTREVCUM, PHAUTREV, PTAXLOYNETNEG, RECUMIR, TOTIRCUM, TOTPENIR):
    return positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0, HAUTREVCUM - PHAUTREV - PTAXLOYNETNEG) + 1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * 0


def ILITOTIRNET(ILICAPNET, ILICHRNET, ILIIRNET, ILILOYNET, ILITAXANET):
    return ILIIRNET + ILITAXANET + ILICAPNET + ILILOYNET + ILICHRNET


def ILITOTPSNET(NAPCR61, TOTPENCS):
    return max(0, NAPCR61 - TOTPENCS)


def TOTIRE(INE, IRE, IREP, ITRED):
    return IREP - ITRED - IRE - INE


def TOTTP(REVTP, TTPVQ):
    return TTPVQ + REVTP


def MAJOTOT28IR(NMAJ1, NMAJCHR1, NMAJLOY1, NMAJPCAP1, NMAJTAXA1):
    return NMAJ1 + NMAJTAXA1 + NMAJPCAP1 + NMAJLOY1 + NMAJCHR1


def MAJOTOT28PS(NMAJC1, NMAJCDIS1, NMAJCVN1, NMAJGLO1, NMAJP1, NMAJR1, NMAJREGV1, NMAJRSE11, NMAJRSE21, NMAJRSE31, NMAJRSE41, NMAJRSE51):
    return NMAJC1 + NMAJR1 + NMAJP1 + NMAJCVN1 + NMAJREGV1 + NMAJCDIS1 + NMAJGLO1 + NMAJRSE11 + NMAJRSE21 + NMAJRSE31 + NMAJRSE41 + NMAJRSE51


def MAJO1728TOT(MAJOTOT28IR, MAJOTOT28PS):
    return MAJOTOT28IR + MAJOTOT28PS

