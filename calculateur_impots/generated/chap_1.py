# -*- coding: utf-8 -*-


# WARNING: This file is automatically generated by a script. No not modify it by hand!

# Original files are "chap-1.json and chap-1.m"


def NAPT(NAPTEMPCX, TOTIRPSANT):
    return NAPTEMPCX - TOTIRPSANT


def NAPTIR(HAUTREVNET, IRESTITIR, IRNET, PCAPNET, TAXANET, TAXLOYNET):
    return IRNET + TAXANET + TAXLOYNET + PCAPNET + HAUTREVNET - IRESTITIR


def NAPCOROLIR(NONMER, NONREST, RECUMIR, TOTIRCUM, V_ANTREIR, V_NONMERANT, V_NONRESTANT, V_NOTRAIT, V_TOTIRANT):
    return TOTIRCUM - NONMER - RECUMIR + NONREST * positif(20 - V_NOTRAIT) + max(0, TOTIRCUM - NONMER - RECUMIR + NONREST - V_TOTIRANT - V_NONMERANT - V_ANTREIR + V_NONRESTANT) * positif_ou_nul(V_NOTRAIT - 20)


def NAPCOROLCS(NAPCR61, V_ANTCR):
    return max(0, NAPCR61 - V_ANTCR)


def RC1(IRCUM_A, NAPINI, RECUMBIS, SEUIL_12, V_ANTIR):
    return (1) if (NAPINI - V_ANTIR - IRCUM_A + RECUMBIS >= SEUIL_12) else (0)


def IAVIMBIS(IRB, PIR):
    return IRB + PIR


def IAVIMO(ADO1, ID11, IMI, ITP, PIR, RED, REI, V_CR2):
    return max(0, max(ID11 - ADO1, IMI) - RED) + ITP + REI + PIR * V_CR2


def NAPI(IHAUTREVT, IPCAPTAXT, IRANT, IRD, PIRD, RASAR, TAXASSUR, TAXLOY, V_CR2):
    return IRD + PIRD - IRANT + TAXASSUR + IPCAPTAXT + IHAUTREVT + TAXLOY + RASAR * V_CR2


def INTMS(MOISAN):
    return inf(MOISAN / 10000)


def INTAN(INTMS, MOISAN):
    return MOISAN / 10000 - INTMS * 10000 * present(MOISAN)


def TXINT(INTAN, INTMS, MOISAN, TXMOISRETARD, TXMOISRETARD2, V_ANREV):
    return positif(2006 - arr(INTAN)) * max(0, INTAN - V_ANREV + 1 * 12 + INTMS - 6) * TXMOISRETARD + positif_ou_nul(V_ANREV - 2006) * max(0, INTAN - V_ANREV + 1 * 12 + INTMS - 6) * TXMOISRETARD2 + 1 - positif(2006 - arr(INTAN)) * 1 - positif_ou_nul(V_ANREV - 2006) * 2006 - V_ANREV + 1 * 12 - 6 * TXMOISRETARD * positif(2006 - V_ANREV + 1) + TXMOISRETARD2 * null(2006 - V_ANREV + 1) + INTAN - 2006 * 12 + INTMS * TXMOISRETARD2 * present(MOISAN)


def COPETO(CMAJ):
    return (10) if (CMAJ == 7 or CMAJ == 10 or CMAJ == 17 or CMAJ == 18) else ((40) if (CMAJ == 8 or CMAJ == 11) else (80))


def CSTOTSSPENA(BREGV, CDIS, CGLOA, CSG, CVNSALC, PRS, RDSN, RSE1N, RSE2N, RSE3N, RSE4N, RSE5N):
    return max(0, CSG + RDSN + PRS + BREGV + CVNSALC + CDIS + CGLOA + RSE1N + RSE2N + RSE3N + RSE4N + RSE5N)


def PTOIR(BTO, BTOINR, CMAJ, COPETO, TXINT):
    return arr(BTO * COPETO / 100) + arr(BTO * COPETO / 100) * positif(null(CMAJ - 10) + null(CMAJ - 17)) + arr(BTOINR * TXINT / 100)


def PTOPRS(COPETO, CSTOTSSPENA, PRS, PRSPROV, PS9YP, SEUIL_61, TXINT):
    return arr(max(0, PRS - PRSPROV) * COPETO / 100) + arr(max(0, PRS - PRSPROV - PS9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def PTOCSG(COPETO, CS9YP, CSG, CSGIM, CSTOTSSPENA, SEUIL_61, TXINT):
    return arr(max(0, CSG - CSGIM) * COPETO / 100) + arr(max(0, CSG - CSGIM - CS9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def PTORSE1(CIRSE1, COPETO, CSPROVYD, CSTOTSSPENA, RSE1, RSE19YP, SEUIL_61, TXINT):
    return arr(max(0, RSE1 - CIRSE1 - CSPROVYD) * COPETO / 100) + arr(max(0, RSE1 - CIRSE1 - CSPROVYD - RSE19YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def PTORSE2(CIRSE2, COPETO, CSPROVRSE2, CSTOTSSPENA, RSE2, RSE29YP, SEUIL_61, TXINT):
    return arr(max(0, RSE2 - CIRSE2 - CSPROVRSE2) * COPETO / 100) + arr(max(0, RSE2 - CIRSE2 - CSPROVRSE2 - RSE29YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def PTORSE3(CIRSE3, COPETO, CSPROVYG, CSTOTSSPENA, RSE3, RSE39YP, SEUIL_61, TXINT):
    return arr(max(0, RSE3 - CIRSE3 - CSPROVYG) * COPETO / 100) + arr(max(0, RSE3 - CIRSE3 - CSPROVYG - RSE39YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def PTORSE4(CIRSE4, COPETO, CSPROVRSE4, CSTOTSSPENA, RSE4, RSE49YP, SEUIL_61, TXINT):
    return arr(max(0, RSE4 - CIRSE4 - CSPROVRSE4) * COPETO / 100) + arr(max(0, RSE4 - CIRSE4 - CSPROVRSE4 - RSE49YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def PTORSE5(CIRSE5, COPETO, CSPROVYE, CSTOTSSPENA, RSE5, RSE59YP, SEUIL_61, TXINT):
    return arr(max(0, RSE5 - CIRSE5 - CSPROVYE) * COPETO / 100) + arr(max(0, RSE5 - CIRSE5 - CSPROVYE - RSE59YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def PTOREGV(BREGV, COPETO, CSTOTSSPENA, REGV9YP, SEUIL_61, TXINT):
    return arr(BREGV * COPETO / 100) + arr(max(0, BREGV - REGV9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def PTORDS(COPETO, CRDSIM, CSTOTSSPENA, RD9YP, RDSN, SEUIL_61, TXINT):
    return arr(max(0, RDSN - CRDSIM) * COPETO / 100) + arr(max(0, RDSN - CRDSIM - RD9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def PTOTAXA(AVFISCOPTER, CMAJ, COPETO, INE, IRANT, IRB, IRN, TAXA9YI, TAXASSUR, TXINT):
    return arr(max(0, TAXASSUR - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRN - IRANT)) * COPETO / 100) + arr(max(0, TAXASSUR - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRN - IRANT)) * COPETO / 100) * positif(null(CMAJ - 10) + null(CMAJ - 17)) + arr(max(0, TAXASSUR - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRN - IRANT) - TAXA9YI) * TXINT / 100)


def PTOTPCAP(AVFISCOPTER, CAP9YI, CMAJ, COPETO, INE, IPCAPTAXT, IRANT, IRB, IRN, TAXASSUR, TXINT):
    return arr(max(0, IPCAPTAXT - min(IPCAPTAXT + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR)) + min(0, IRN - IRANT + TAXASSUR)) * COPETO / 100) + arr(max(0, IPCAPTAXT - min(IPCAPTAXT + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR)) + min(0, IRN - IRANT + TAXASSUR)) * COPETO / 100) * positif(null(CMAJ - 10) + null(CMAJ - 17)) + arr(max(0, IPCAPTAXT - min(IPCAPTAXT + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR)) + min(0, IRN - IRANT + TAXASSUR) - CAP9YI) * TXINT / 100)


def PTOTLOY(AVFISCOPTER, CMAJ, COPETO, INE, IPCAPTAXT, IRANT, IRB, IRN, LOY9YI, TAXASSUR, TAXLOY, TXINT):
    return arr(max(0, TAXLOY - min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - IPCAPTAXT)) + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT)) * COPETO / 100) + arr(max(0, TAXLOY - min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - IPCAPTAXT)) + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT)) * COPETO / 100) * positif(null(CMAJ - 10) + null(CMAJ - 17)) + arr(max(0, TAXLOY - min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - IPCAPTAXT)) + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT) - LOY9YI) * TXINT / 100)


def PTOTCHR(CHR9YI, CMAJ, COPETO, IHAUTREVT, IPCAPTAXT, IRANT, IRN, TAXASSUR, TAXLOY, TXINT):
    return arr(max(0, IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY)) * COPETO / 100) + arr(max(0, IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY)) * COPETO / 100) * positif(null(CMAJ - 10) + null(CMAJ - 17)) + arr(max(0, IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY) - CHR9YI) * TXINT / 100)


def PTOCVN(COD8YT, COPETO, CSTOTSSPENA, CVN9YP, CVNSALC, SEUIL_61, TXINT):
    return arr(max(0, CVNSALC - COD8YT) * COPETO / 100) + arr(max(0, CVNSALC - COD8YT - CVN9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def PTOCDIS(CDIS, CDIS9YP, CDISC, CDISPROV, COPETO, CSTOTSSPENA, SEUIL_61, TXINT):
    return arr(max(0, CDIS - CDISPROV) * COPETO / 100) + arr(max(0, CDISC - CDISPROV - CDIS9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def PTOGLOA(CGLOA, COD8YL, COPETO, CSTOTSSPENA, GLO9YP, SEUIL_61, TXINT):
    return arr(max(0, CGLOA - COD8YL) * COPETO / 100) + arr(max(0, CGLOA - COD8YL - GLO9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)


def BINRIR(AVFISCOPTER, IHAUTREVT, INE, IPCAPTAXT, IRANT, IRB, IRN, TAXASSUR, TAXLOY):
    return max(0, IRN - IRANT) + max(0, TAXASSUR - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRN - IRANT)) + max(0, IPCAPTAXT - min(IPCAPTAXT + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR)) + min(0, IRN - IRANT + TAXASSUR)) + max(0, TAXLOY - min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - IPCAPTAXT)) + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT)) + max(0, IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY))


def BINRPS(BREGV, CDIS, CDISPROV, CGLOA, COD8YL, COD8YT, CRDSIM, CSG, CSGIM, CSPROVRSE2, CSPROVRSE4, CSPROVYD, CSPROVYE, CSPROVYG, CVNSALC, PRS, PRSPROV, RDSN, RSE1, RSE2, RSE3, RSE4, RSE5):
    return max(0, CSG - CSGIM) + max(0, RDSN - CRDSIM) + max(0, PRS - PRSPROV) + max(0, CVNSALC - COD8YT) + max(0, CDIS - CDISPROV) + max(0, CGLOA - COD8YL) + max(0, RSE1 - CSPROVYD) + max(0, RSE2 - CSPROVRSE2) + max(0, RSE3 - CSPROVYG) + max(0, RSE4 - CSPROVRSE4) + max(0, RSE5 - CSPROVYE) + BREGV


def VAR9YIIR(ACODELAISINR, BINRIR, BINRPS):
    return arr(ACODELAISINR * BINRIR / BINRIR + BINRPS)


def VAR9YIPS(ACODELAISINR, VAR9YIIR):
    return max(0, ACODELAISINR - VAR9YIIR)


def IR9YI(BINRIR, IRANT, IRN, VAR9YIIR):
    return arr(VAR9YIIR * max(0, IRN - IRANT) / BINRIR)


def TAXA9YI(AVFISCOPTER, BINRIR, IHAUTREVT, INE, IPCAPTAXT, IR9YI, IRANT, IRB, IRN, TAXASSUR, TAXLOY, VAR9YIIR):
    return positif(IPCAPTAXT + TAXLOY + IHAUTREVT) * arr(VAR9YIIR * max(0, TAXASSUR - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRN - IRANT)) / BINRIR) + 1 - positif(IPCAPTAXT + TAXLOY + IHAUTREVT) * max(0, VAR9YIIR - IR9YI)


def CAP9YI(AVFISCOPTER, BINRIR, IHAUTREVT, INE, IPCAPTAXT, IR9YI, IRANT, IRB, IRN, TAXA9YI, TAXASSUR, TAXLOY, VAR9YIIR):
    return positif(TAXLOY + IHAUTREVT) * arr(VAR9YIIR * max(0, IPCAPTAXT - min(IPCAPTAXT + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR)) + min(0, IRN - IRANT + TAXASSUR)) / BINRIR) + 1 - positif(TAXLOY + IHAUTREVT) * max(0, VAR9YIIR - IR9YI - TAXA9YI)


def LOY9YI(AVFISCOPTER, BINRIR, CAP9YI, IHAUTREVT, INE, IPCAPTAXT, IR9YI, IRANT, IRB, IRN, TAXA9YI, TAXASSUR, TAXLOY, VAR9YIIR):
    return positif(IHAUTREVT) * arr(VAR9YIIR * max(0, TAXLOY - min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - IPCAPTAXT)) + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT)) / BINRIR) + 1 - positif(IHAUTREVT) * max(0, VAR9YIIR - IR9YI - TAXA9YI - CAP9YI)


def CHR9YI(CAP9YI, IR9YI, LOY9YI, TAXA9YI, VAR9YIIR):
    return max(0, VAR9YIIR - IR9YI - TAXA9YI - CAP9YI - LOY9YI)


def CS9YP(BINRPS, BREGV, CDIS, CGLOA, CSG, CSGIM, CVNSALC, PRS, RDSN, RSE1, RSE2, RSE3, RSE4, RSE5, VAR9YIPS):
    return positif(RDSN + PRS + CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * CSG - CSGIM / BINRPS) + 1 - positif(RDSN + PRS + CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * VAR9YIPS


def RD9YP(BINRPS, BREGV, CDIS, CGLOA, CRDSIM, CS9YP, CVNSALC, PRS, RDSN, RSE1, RSE2, RSE3, RSE4, RSE5, VAR9YIPS):
    return positif(PRS + CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * RDSN - CRDSIM / BINRPS) + 1 - positif(PRS + CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP)


def PS9YP(BINRPS, BREGV, CDIS, CGLOA, CS9YP, CVNSALC, PRS, PRSPROV, RD9YP, RSE1, RSE2, RSE3, RSE4, RSE5, VAR9YIPS):
    return positif(CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * PRS - PRSPROV / BINRPS) + 1 - positif(CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP)


def CVN9YP(BINRPS, BREGV, CDIS, CGLOA, COD8YT, CS9YP, CVNSALC, PS9YP, RD9YP, RSE1, RSE2, RSE3, RSE4, RSE5, VAR9YIPS):
    return positif(CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * CVNSALC - COD8YT / BINRPS) + 1 - positif(CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP)


def CDIS9YP(BINRPS, BREGV, CDIS, CDISPROV, CGLOA, CS9YP, CVN9YP, PS9YP, RD9YP, RSE1, RSE2, RSE3, RSE4, RSE5, VAR9YIPS):
    return positif(CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * CDIS - CDISPROV / BINRPS) + 1 - positif(CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP)


def GLO9YP(BINRPS, BREGV, CDIS9YP, CGLOA, COD8YL, CS9YP, CVN9YP, PS9YP, RD9YP, RSE1, RSE2, RSE3, RSE4, RSE5, VAR9YIPS):
    return positif(RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * CGLOA - COD8YL / BINRPS) + 1 - positif(RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP)


def RSE19YP(BINRPS, BREGV, CDIS9YP, CS9YP, CSPROVYD, CVN9YP, GLO9YP, PS9YP, RD9YP, RSE1, RSE2, RSE3, RSE4, RSE5, VAR9YIPS):
    return positif(RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * RSE1 - CSPROVYD / BINRPS) + 1 - positif(RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP)


def RSE29YP(BINRPS, BREGV, CDIS9YP, CS9YP, CSPROVRSE2, CVN9YP, GLO9YP, PS9YP, RD9YP, RSE19YP, RSE2, RSE3, RSE4, RSE5, VAR9YIPS):
    return positif(RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * RSE2 - CSPROVRSE2 / BINRPS) + 1 - positif(RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP - RSE19YP)


def RSE39YP(BINRPS, BREGV, CDIS9YP, CS9YP, CSPROVYG, CVN9YP, GLO9YP, PS9YP, RD9YP, RSE19YP, RSE29YP, RSE3, RSE4, RSE5, VAR9YIPS):
    return positif(RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * RSE3 - CSPROVYG / BINRPS) + 1 - positif(RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP - RSE19YP - RSE29YP)


def RSE49YP(BINRPS, BREGV, CDIS9YP, CS9YP, CSPROVRSE4, CVN9YP, GLO9YP, PS9YP, RD9YP, RSE19YP, RSE29YP, RSE39YP, RSE4, RSE5, VAR9YIPS):
    return positif(RSE5 + BREGV) * arr(VAR9YIPS * RSE4 - CSPROVRSE4 / BINRPS) + 1 - positif(RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP - RSE19YP - RSE29YP - RSE39YP)


def RSE59YP(BINRPS, BREGV, CDIS9YP, CS9YP, CSPROVYE, CVN9YP, GLO9YP, PS9YP, RD9YP, RSE19YP, RSE29YP, RSE39YP, RSE49YP, RSE5, VAR9YIPS):
    return positif(BREGV) * arr(VAR9YIPS * RSE5 - CSPROVYE / BINRPS) + 1 - positif(BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP - RSE19YP - RSE29YP - RSE39YP - RSE49YP)


def REGV9YP(CDIS9YP, CS9YP, CVN9YP, GLO9YP, PS9YP, RD9YP, RSE19YP, RSE29YP, RSE39YP, RSE49YP, RSE59YP, VAR9YIPS):
    return max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP - RSE19YP - RSE29YP - RSE39YP - RSE49YP - RSE59YP)


def BTO(IAMD1, IRANT, IRN, SEUIL_61):
    return max(0, IRN - IRANT) * positif(IAMD1 + 1 - SEUIL_61)


def BTOINR(IAMD1, IR9YI, IRANT, IRN, SEUIL_61):
    return max(0, IRN - IR9YI - IRANT) * positif(IAMD1 + 1 - SEUIL_61)


def IRD(IRN, PIR, SEUIL_12, V_IND_TRAIT):
    return IRN * positif(5 - V_IND_TRAIT) + 1 - positif(5 - V_IND_TRAIT) * positif_ou_nul(IRN + PIR - SEUIL_12) + 1 - positif(IRN + PIR)


def PRSD(NAPPS, V_PSANT):
    return NAPPS - V_PSANT


def CSGD(NAPCS, V_CSANT):
    return NAPCS - V_CSANT


def RDSD(NAPRD, V_RDANT):
    return NAPRD - V_RDANT


def CVND(NAPCVN, V_CVNANT):
    return NAPCVN - V_CVNANT


def REGVD(NAPREGV, V_REGVANT):
    return NAPREGV - V_REGVANT


def CGLOAD(NAPGLOA, V_GLOANT):
    return NAPGLOA - V_GLOANT


def CDISD(NAPCDIS, V_CDISANT):
    return NAPCDIS - V_CDISANT


def CRSE1D(NAPRSE1, V_RSE1ANT):
    return NAPRSE1 - V_RSE1ANT


def CRSE2D(NAPRSE2, V_RSE2ANT):
    return NAPRSE2 - V_RSE2ANT


def CRSE3D(NAPRSE3, V_RSE3ANT):
    return NAPRSE3 - V_RSE3ANT


def CRSE4D(NAPRSE4, V_RSE4ANT):
    return NAPRSE4 - V_RSE4ANT


def CRSE5D(NAPRSE5, V_RSE5ANT):
    return NAPRSE5 - V_RSE5ANT


def CSGAC(CICSG, CSGC):
    return max(0, CSGC - CICSG)


def CSNET(CICSG, CSGC, CSGIM, PCSG):
    return max(0, CSGC + PCSG - CICSG - CSGIM)


def RDSAC(CIRDS, RDSC):
    return max(0, RDSC - CIRDS)


def RDNET(CIRDS, CRDSIM, PRDS, RDSC):
    return max(0, RDSC + PRDS - CIRDS - CRDSIM)


def PRSNET(CIPRS, PPRS, PRSC, PRSPROV):
    return max(0, PRSC + PPRS - CIPRS - PRSPROV)


def CVNAC(CVNSALC):
    return CVNSALC


def CVNNET(COD8YT, CVNSALC, PCVN):
    return max(0, CVNSALC + PCVN - COD8YT)


def REGVNET(BREGV, PREGV):
    return BREGV + PREGV


def CDISAC(CDISC):
    return CDISC


def CDISNET(CDISC, CDISPROV, PCDIS):
    return max(0, CDISC + PCDIS - CDISPROV)


def CGLOAAC(CGLOA):
    return CGLOA


def CGLOANET(CGLOA, COD8YL, PGLOA):
    return max(0, CGLOA + PGLOA - COD8YL)


def RSE1AC(CIRSE1, RSE1):
    return max(0, RSE1 - CIRSE1)


def RSE1NET(CIRSE1, CSPROVYD, PRSE1, RSE1):
    return max(0, RSE1 + PRSE1 - CIRSE1 - CSPROVYD)


def RSE2AC(CIRSE2, RSE2):
    return max(0, RSE2 - CIRSE2)


def RSE2NET(CIRSE8SA, CIRSE8TV, CSPROVYF, CSPROVYN, PRSE2, RSE8SA, RSE8TV):
    return max(0, RSE8TV - CIRSE8TV - CSPROVYF) + max(0, RSE8SA - CIRSE8SA - CSPROVYN) + PRSE2


def RSE3AC(CIRSE3, RSE3):
    return max(0, RSE3 - CIRSE3)


def RSE3NET(CIRSE3, CSPROVYG, PRSE3, RSE3):
    return max(0, RSE3 + PRSE3 - CIRSE3 - CSPROVYG)


def RSE4AC(CIRSE4, RSE4):
    return max(0, RSE4 - CIRSE4)


def RSE4NET(CIRSE8SB, CIRSE8TX, CSPROVYH, CSPROVYP, PRSE4, RSE8SB, RSE8TX):
    return max(0, RSE8TX - CIRSE8TX - CSPROVYH) + max(0, RSE8SB - CIRSE8SB - CSPROVYP) + PRSE4


def RSE5AC(CIRSE5, RSE5):
    return max(0, RSE5 - CIRSE5)


def RSE5NET(CIRSE5, CSPROVYE, PRSE5, RSE5):
    return max(0, RSE5 + PRSE5 - CIRSE5 - CSPROVYE)


def RSENETTOT(RSE1NET, RSE2NET, RSE3NET, RSE4NET, RSE5NET):
    return RSE1NET + RSE2NET + RSE3NET + RSE4NET + RSE5NET


def TOTCRBRUT(BREGV, CDISC, CDISPROV, CGLOA, CICSG, CIPRS, CIRDS, CIRSE1, CIRSE2, CIRSE3, CIRSE4, CIRSE5, COD8YL, COD8YT, CRDSIM, CSGC, CSGIM, CSPROVRSE2, CSPROVRSE4, CSPROVYD, CSPROVYE, CSPROVYG, CVNSALC, PCDIS, PCSG, PCVN, PGLOA, PPRS, PRDS, PREGV, PRSC, PRSE1, PRSE2, PRSE3, PRSE4, PRSE5, PRSPROV, RDSC, RSE1, RSE2, RSE3, RSE4, RSE5):
    return max(0, CSGC + PCSG - CICSG - CSGIM + RDSC + PRDS - CIRDS - CRDSIM + PRSC + PPRS - CIPRS - PRSPROV + CVNSALC + PCVN - COD8YT + BREGV + PREGV + CDISC + PCDIS - CDISPROV + CGLOA + PGLOA - COD8YL + RSE1 + PRSE1 + RSE2 + PRSE2 + RSE3 + PRSE3 + RSE4 + PRSE4 + RSE5 + PRSE5 - CIRSE1 - CSPROVYD - CIRSE5 - CSPROVYE - CIRSE2 - CSPROVRSE2 - CIRSE3 - CSPROVYG - CIRSE4 - CSPROVRSE4)


def TOTCRNET(CDISNET, CGLOANET, CSNET, CVNNET, PRSNET, RDNET, REGVNET, RSE1NET, RSE2NET, RSE3NET, RSE4NET, RSE5NET):
    return CSNET + RDNET + PRSNET + CVNNET + REGVNET + CDISNET + CGLOANET + RSE1NET + RSE2NET + RSE3NET + RSE4NET + RSE5NET


def IARD(IAR, IAR_A):
    return IAR - IAR_A


def PIRD(IRN, PIR, PIR_A, SEUIL_12, V_IND_TRAIT):
    return PIR * positif(5 - V_IND_TRAIT) + 1 - positif(5 - V_IND_TRAIT) * positif_ou_nul(IRN + PIR - SEUIL_12) + 1 - positif(IRN + PIR) - PIR_A * positif_ou_nul(PIR_A - SEUIL_12) + 1 - positif(PIR_A)


def PPRSD(CSREC, CSRECA, PPRS, PPRS_A):
    return PPRS * CSREC - PPRS_A * CSRECA


def PCSGD(CSREC, CSRECA, PCSG, PCSG_A):
    return PCSG * CSREC - PCSG_A * CSRECA


def PRDSD(CSREC, CSRECA, PRDS, PRDS_A):
    return PRDS * CSREC - PRDS_A * CSRECA


def PTOTD(PIRD):
    return PIRD


def BPRS(COD8XK, COD8YK, ESFP, PREREV, R1649, RDNCP, RDNP, RDPTP, RDRCM, RDRFPS, RDRV, RE168, TAX1649, V_CNR, V_REGCO):
    return arr(RDRFPS * 1 - null(4 - V_REGCO) + COD8XK + COD8YK + RDRV + RDRCM + RDNP + RDNCP + RDPTP + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - positif(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR


def BPRSAPS(ESFP, PREREV, R1649, RDNP, RDRCMAPS, RDRFAPS, RDRVAPS, RE168, TAX1649, V_CNR, V_REGCO):
    return arr(RDRFAPS * 1 - null(4 - V_REGCO) + RDRVAPS + RDRCMAPS + RDNP + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - positif(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR


def PRSC(ANNUL2042, BPRS, T_PREL_SOC):
    return arr(BPRS * T_PREL_SOC / 100) * 1 - positif(ANNUL2042)


def PRSCAPS(ANNUL2042, BPRSAPS, T_PREL_SOC):
    return arr(BPRSAPS * T_PREL_SOC / 100) * 1 - positif(ANNUL2042)


def PRS(CIPRS, PRSC):
    return max(0, PRSC - CIPRS)


def PRSAPS(CIPRSAPS, PRSCAPS):
    return PRSCAPS - CIPRSAPS


def CSGC(ANNUL2042, BCSG, T_CSG):
    return arr(BCSG * T_CSG / 100) * 1 - positif(ANNUL2042)


def CSGCAPS(ANNUL2042, BCSGAPS, T_CSG):
    return arr(BCSGAPS * T_CSG / 100) * 1 - positif(ANNUL2042)


def RSE1(ANNUL2042, BRSE1, TXTQ):
    return arr(BRSE1 * TXTQ / 100) * 1 - positif(ANNUL2042)


def BRSE8TV(ALLECS, RE168, TAX1649, V_CNR):
    return ALLECS * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def BRSE8SA(COD8SA, RE168, TAX1649, V_CNR):
    return COD8SA * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def RSE2(ANNUL2042, BRSE8SA, BRSE8TV, TXTV):
    return arr(BRSE8TV * TXTV / 100) * 1 - positif(ANNUL2042) + arr(BRSE8SA * TXTV / 100) * 1 - positif(ANNUL2042)


def RSE3(ANNUL2042, BRSE3, TXTW):
    return arr(BRSE3 * TXTW / 100) * 1 - positif(ANNUL2042)


def BRSE8TX(PENECS, RE168, TAX1649, V_CNR):
    return PENECS * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def BRSE8SB(COD8SB, RE168, TAX1649, V_CNR):
    return COD8SB * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def RSE4(ANNUL2042, BRSE8SB, BRSE8TX, TXTX):
    return arr(BRSE8TX * TXTX / 100) * 1 - positif(ANNUL2042) + arr(BRSE8SB * TXTX / 100) * 1 - positif(ANNUL2042)


def RSE5(ANNUL2042, BRSE5, TX075):
    return arr(BRSE5 * TX075 / 100) * 1 - positif(ANNUL2042)


def RSETOT(RSE1, RSE2, RSE3, RSE4, RSE5):
    return RSE1 + RSE2 + RSE3 + RSE4 + RSE5


def CSG(CICSG, CSGC):
    return max(0, CSGC - CICSG)


def CSGAPS(CICSGAPS, CSGCAPS):
    return max(0, CSGCAPS - CICSGAPS)


def RSE1N(CIRSE1, RSE1):
    return max(0, RSE1 - CIRSE1)


def RSE2N(CIRSE2, RSE2):
    return max(0, RSE2 - CIRSE2)


def RSE3N(CIRSE3, RSE3):
    return max(0, RSE3 - CIRSE3)


def RSE4N(CIRSE4, RSE4):
    return max(0, RSE4 - CIRSE4)


def RSE5N(CIRSE5, RSE5):
    return max(0, RSE5 - CIRSE5)


def RDRF(ART1731BIS, DEFRF4BC, MICFR, RFCF, RFDANT, RFMIC):
    return max(0, RFCF + RFMIC - MICFR - RFDANT) * 1 - positif(ART1731BIS) + max(0, RFCF + RFMIC - MICFR + DEFRF4BC) * positif(ART1731BIS)


def RDRFPS(ART1731BIS, DEFRF4BC, MICFR, REVRF, RFCFPS, RFDANT, RFMIC, RRFI):
    return max(0, RFCFPS + RFMIC - MICFR - RFDANT) * 1 - positif(ART1731BIS) + max(0, RRFI + REVRF + DEFRF4BC) * positif(ART1731BIS)


def RDRFAPS(ART1731BIS, DEFRF4BC, DEFRF4BD, MICFR, RFCFAPS, RFDANT, RFMIC):
    return max(0, RFCFAPS + RFMIC - MICFR - RFDANT) * 1 - positif(ART1731BIS) + max(0, RFCFAPS + RFMIC - MICFR + DEFRF4BD + DEFRF4BC) * positif(ART1731BIS)


def RDRCM1(COD2FA, DISQUO, DRTNC, INTERE, PROVIE, RAVC, RCMABD, RCMAV, RCMHAB, RCMHAD, RCMIMPAT, RCMNAB, RCMPRIVM, RCMRDS, RCMSOC, RCMTNC, REVACT, REVPEA, RTCAR, TRCMABD):
    return TRCMABD + DRTNC + RAVC + RCMNAB + RTCAR + RCMPRIVM + RCMIMPAT - RCMSOC - positif(RCMRDS) * min(RCMRDS, RCMABD + REVACT + RCMAV + PROVIE + RCMHAD + DISQUO + RCMHAB + INTERE + RCMTNC + REVPEA + COD2FA)


def RDRCM1NEG(RDRCM1):
    return min(0, RDRCM1)


def RDRCM1NEGPLAF(COD2FA, RDRCM1):
    return min(COD2FA, abs(RDRCM1))


def RDRCM1BIS(RDRCM1, RDRCM1NEGPLAF):
    return 1 - positif(RDRCM1) * RDRCM1NEGPLAF * -1 + positif_ou_nul(RDRCM1) * RDRCM1


def RDRCM(COD2FA, RDRCM1BIS):
    return RDRCM1BIS + COD2FA


def RDRCM1APS(COD2FA, RCMABD, RCMAV, RCMHAB, RCMHAD, RCMIMPAT, RCMRDS, RCMSOC, RCMTNC, REGPRIVM):
    return RCMABD + RCMTNC + RCMAV + RCMHAD + RCMHAB + REGPRIVM + RCMIMPAT - RCMSOC - positif(RCMRDS) * min(RCMRDS, RCMABD + RCMAV + RCMHAD + RCMHAB + RCMTNC + COD2FA)


def RDRCM1NEGAPS(RDRCM1APS):
    return min(0, RDRCM1APS)


def RDRCM1NEGPLAFAPS(COD2FA, RDRCM1APS):
    return min(COD2FA, abs(RDRCM1APS))


def RDRCM1BISAPS(RDRCM1APS, RDRCM1NEGPLAFAPS):
    return 1 - positif(RDRCM1APS) * RDRCM1NEGPLAFAPS * -1 + positif_ou_nul(RDRCM1APS) * RDRCM1APS


def RDRCMAPS(COD2FA, RDRCM1BISAPS):
    return RDRCM1BISAPS + COD2FA


def RDRV(RVBCSG):
    return RVBCSG


def RDRVAPS(RVB1, RVB2, RVB3, RVB4, TXRVT1, TXRVT2, TXRVT3, TXRVT4):
    return arr(RVB1 * TXRVT1 / 100) + arr(RVB2 * TXRVT2 / 100) + arr(RVB3 * TXRVT3 / 100) + arr(RVB4 * TXRVT4 / 100)


def RDNP(NPLOCNETSF, RCSC, RCSP, RCSV, V_REGCO):
    return RCSV + RCSC + RCSP + max(0, NPLOCNETSF) * 1 - null(V_REGCO - 2) * 1 - null(V_REGCO - 4)


def PVTAUXPS(BPCOPTC, BPCOPTV, BPCOSAC, BPCOSAV, BPV18C, BPV18V, BPV40C, BPV40V, BPVSJ, BPVSK, GAINPEA, PEA):
    return BPVSJ + BPVSK + BPV18V + BPV18C + BPCOPTV + BPCOPTC + BPV40V + BPV40C + BPCOSAV + BPCOSAC + PEA + GAINPEA


def RDNCP(IPVLOC, PVBARPS, PVTAUXPS):
    return PVBARPS + PVTAUXPS * 1 - positif(IPVLOC)


def RDPTP(BA1AC, BA1AP, BA1AV, BAF1AC, BAF1AP, BAF1AV, BI1AC, BI1AP, BI1AV, BI2AC, BI2AP, BI2AV, BN1AC, BN1AP, BN1AV, BNCNP1AC, BNCNP1AP, BNCNP1AV, BNCNPDEC, BNCNPDEP, BNCNPDEV, BNCPRO1AC, BNCPRO1AP, BNCPRO1AV, BNCPRODEC, BNCPRODEP, BNCPRODEV, MIB1AC, MIB1AP, MIB1AV, MIBDEC, MIBDEP, MIBDEV, MIBNP1AC, MIBNP1AP, MIBNP1AV, MIBNPDEC, MIBNPDEP, MIBNPDEV, PVINCE, PVINPE, PVINVE, PVSOCC, PVSOCV):
    return BAF1AV + BAF1AC + BAF1AP + BA1AV + BA1AC + BA1AP + max(0, MIB1AV - MIBDEV) + max(0, MIB1AC - MIBDEC) + max(0, MIB1AP - MIBDEP) + BI1AV + BI1AC + BI1AP + max(0, MIBNP1AV - MIBNPDEV) + max(0, MIBNP1AC - MIBNPDEC) + max(0, MIBNP1AP - MIBNPDEP) + BI2AV + BI2AC + BI2AP + max(0, BNCPRO1AV - BNCPRODEV) + max(0, BNCPRO1AC - BNCPRODEC) + max(0, BNCPRO1AP - BNCPRODEP) + BN1AV + BN1AC + BN1AP + max(0, BNCNP1AV - BNCNPDEV) + max(0, BNCNP1AC - BNCNPDEC) + max(0, BNCNP1AP - BNCNPDEP) + PVINVE + PVINCE + PVINPE + PVSOCV + PVSOCC


def RGLOA(GLDGRATC, GLDGRATV):
    return GLDGRATV + GLDGRATC


def BCSG(COD8XK, COD8YK, ESFP, PREREV, R1649, RDNCP, RDNP, RDPTP, RDRCM, RDRFPS, RDRV, RE168, TAX1649, V_CNR, V_REGCO):
    return arr(RDRFPS * 1 - null(4 - V_REGCO) + COD8XK + COD8YK + RDRV + RDRCM + RDNP + RDNCP + RDPTP + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - positif(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR


def BCSGAPS(ESFP, PREREV, R1649, RDNP, RDRCMAPS, RDRFAPS, RDRVAPS, RE168, TAX1649, V_CNR, V_REGCO):
    return arr(RDRFAPS * 1 - null(4 - V_REGCO) + RDRVAPS + RDRCMAPS + RDNP + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - positif(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR


def BRSE1(RE168, SALECS, TAX1649, V_CNR):
    return SALECS * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def BRSE2(ALLECS, COD8SA, RE168, TAX1649, V_CNR):
    return ALLECS + COD8SA * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def BRSE3(INDECS, RE168, TAX1649, V_CNR):
    return INDECS * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def BRSE4(COD8SB, PENECS, RE168, TAX1649, V_CNR):
    return PENECS + COD8SB * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def BRSE5(RE168, SALECSG, TAX1649, V_CNR):
    return SALECSG * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def BRSETOT(BRSE1, BRSE2, BRSE3, BRSE4, BRSE5):
    return BRSE1 + BRSE2 + BRSE3 + BRSE4 + BRSE5


def PRSETOT(PRSE1, PRSE2, PRSE3, PRSE4, PRSE5):
    return PRSE1 + PRSE2 + PRSE3 + PRSE4 + PRSE5


def RETRSETOT(RETRSE1, RETRSE2, RETRSE3, RETRSE4, RETRSE5):
    return RETRSE1 + RETRSE2 + RETRSE3 + RETRSE4 + RETRSE5


def RSEPROVTOT(CSPROVYD, CSPROVYE, CSPROVYF, CSPROVYG, CSPROVYH, CSPROVYN, CSPROVYP):
    return CSPROVYD + CSPROVYE + CSPROVYF + CSPROVYN + CSPROVYG + CSPROVYH + CSPROVYP


def NMAJRSE1TOT(NMAJRSE11, NMAJRSE21, NMAJRSE31, NMAJRSE41, NMAJRSE51):
    return NMAJRSE11 + NMAJRSE21 + NMAJRSE31 + NMAJRSE41 + NMAJRSE51


def NMAJRSE4TOT(NMAJRSE14, NMAJRSE24, NMAJRSE34, NMAJRSE44, NMAJRSE54):
    return NMAJRSE14 + NMAJRSE24 + NMAJRSE34 + NMAJRSE44 + NMAJRSE54


def BDCSG(ABDETPLUS, BCSG, BDCSG3VA, IPPNCS, PVBARPS, RDNP, RDRCM1, RDRFPS, RDRV, RE168, TAX1649, V_CNR):
    return min(BCSG * 1 - V_CNR, max(0, RDRFPS + RDRV + RDNP + max(0, RDRCM1) + PVBARPS - IPPNCS * 1 - V_CNR)) * 1 - positif(present(RE168) + present(TAX1649)) * 1 - positif(ABDETPLUS) + min(BCSG * 1 - V_CNR, BDCSG3VA)


def DGLOD(BGLOA, COD8YL, CSREC, NAPCR61, RE168, TAX1649, TX051, V_GLOANT):
    return positif(CSREC + V_GLOANT) * arr(BGLOA - COD8YL / 0.075 * TX051 / 100) * 1 - positif(present(RE168) + present(TAX1649)) * positif(NAPCR61)


def IDGLO(BGLOA, COD8YL, CSREC, DGLOD, TX051, V_IDGLOANT, V_IND_TRAIT):
    return (arr(BGLOA - COD8YL / 0.075 * TX051 / 100) * positif(CSREC)) if (V_IND_TRAIT == 4) else (abs(DGLOD - V_IDGLOANT))


def CSGDED3UA(ABDETPLUS, COD3UA, TX051):
    return positif(ABDETPLUS + 0) * min(arr(ABDETPLUS + COD3UA + 0 * TX051 / 100), COD3UA)


def CSGDEDAUTRE(ABDETPLUS, COD3UA, PVBARPS, TX051):
    return positif(ABDETPLUS + 0) * arr(PVBARPS - ABDETPLUS - COD3UA + 0 * TX051 / 100)


def CSGDED(CSGDED3UA, CSGDEDAUTRE):
    return max(0, CSGDED3UA + CSGDEDAUTRE)


def PVBAR3VA(CSGDED, TX051):
    return positif(CSGDED) * arr(CSGDED * 100 / TX051)


def BDCSG3VA(ABDETPLUS, IPPNCS, PVBAR3VA, RDNP, RDRCM1, RDRFPS, RDRV, RE168, TAX1649, V_CNR):
    return positif(ABDETPLUS) * max(0, RDRV + max(0, RDRCM1) + RDRFPS + RDNP + PVBAR3VA - IPPNCS) * 1 - V_CNR * 1 - positif(present(RE168) + present(TAX1649))


def BDRSE1(CSPROVYD, RE168, REVCSXA, SALECS, TAX1649, TX075, V_CNR):
    return max(0, SALECS - REVCSXA - arr(CSPROVYD / TX075 / 100)) * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def BDRSE2(ALLECS, CSPROVYF, RE168, REVCSXC, TAX1649, TX066, V_CNR):
    return max(0, ALLECS - REVCSXC - arr(CSPROVYF / TX066 / 100)) * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def BDRSE3(CSPROVYG, INDECS, RE168, REVCSXD, TAX1649, TX062, V_CNR):
    return max(0, INDECS - REVCSXD - arr(CSPROVYG / TX062 / 100)) * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def BDRSE4(CSPROVYH, PENECS, RE168, REVCSXE, TAX1649, TX038, V_CNR):
    return max(0, PENECS - REVCSXE - arr(CSPROVYH / TX038 / 100)) * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def BDRSE5(CSPROVYE, RE168, REVCSXB, SALECSG, TAX1649, TX075, V_CNR):
    return max(0, SALECSG - REVCSXB - arr(CSPROVYE / TX075 / 100)) * 1 - positif(present(RE168) + present(TAX1649)) * 1 - V_CNR


def DRSED(BDRSE1, BDRSE2, BDRSE3, BDRSE4, BDRSE5, CSREC, NAPCR61, TX051, TXTQDED, TXTVDED, TXTWDED, TXTXDED, V_IDRSEANT):
    return arr(BDRSE1 * TXTQDED / 100) + arr(BDRSE2 * TXTVDED / 100) + arr(BDRSE3 * TXTWDED / 100) + arr(BDRSE4 * TXTXDED / 100) + arr(BDRSE5 * TX051 / 100) * positif(CSREC + V_IDRSEANT) * positif(NAPCR61)


def IDRSE(BDRSE1, BDRSE2, BDRSE3, BDRSE4, BDRSE5, CSREC, DRSED, TX051, TXTQDED, TXTVDED, TXTWDED, TXTXDED, V_IDRSEANT, V_IND_TRAIT):
    return (positif(CSREC) * arr(BDRSE1 * TXTQDED / 100) + arr(BDRSE2 * TXTVDED / 100) + arr(BDRSE3 * TXTWDED / 100) + arr(BDRSE4 * TXTXDED / 100) + arr(BDRSE5 * TX051 / 100)) if (V_IND_TRAIT == 4) else (abs(DRSED - V_IDRSEANT))


def DCSGD(BDCSG, CSREC, DCSGIM, DCSGIM_A, NAPCR61, T_IDCSG, V_IDANT):
    return positif(CSREC + V_IDANT) * arr(BDCSG * T_IDCSG / 100) - DCSGIM - DCSGIM_A * positif(NAPCR61)


def IDCSG(BDCSG, CRDEG, CSREC, DCSGD, DCSGIM, NAPCRP, T_IDCSG, V_IDANT, V_IND_TRAIT):
    return (arr(BDCSG * T_IDCSG / 100) - DCSGIM * positif(CSREC)) if (V_IND_TRAIT == 4) else ((0) if (CRDEG == 0 and NAPCRP == 0) else (abs(DCSGD - V_IDANT)))


def BRDS(ALLECS, COD8SA, COD8SB, COD8XK, COD8YK, ESFP, INDECS, PENECS, PREREV, R1649, RDNCP, RDNP, RDPTP, RDRCM, RDRFPS, RDRV, RE168, RGLOA, SALECS, SALECSG, TAX1649, V_CNR, V_REGCO):
    return arr(RDRFPS * 1 - null(4 - V_REGCO) + COD8XK + COD8YK + RDRV + RDRCM + RDNP + RDNCP + RDPTP + RGLOA + SALECS + SALECSG + ALLECS + INDECS + PENECS + COD8SA + COD8SB + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - positif(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR


def BRDSAPS(ALLECS, ESFP, INDECS, PENECS, PREREV, R1649, RDNP, RDRCMAPS, RDRFAPS, RDRVAPS, RE168, SALECS, SALECSG, TAX1649, V_CNR, V_REGCO):
    return arr(RDRFAPS * 1 - null(4 - V_REGCO) + RDRVAPS + RDRCMAPS + RDNP + SALECS + SALECSG + ALLECS + INDECS + PENECS + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - positif(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR


def RDSC(ANNUL2042, BRDS, T_RDS):
    return arr(BRDS * T_RDS / 100) * 1 - positif(ANNUL2042)


def RDSCAPS(ANNUL2042, BRDSAPS, T_RDS):
    return arr(BRDSAPS * T_RDS / 100) * 1 - positif(ANNUL2042)


def RDSN(CIRDS, RDSC):
    return RDSC - CIRDS


def RDSNAPS(CIRDSAPS, RDSCAPS):
    return RDSCAPS - CIRDSAPS


def RDSNAC(CIRDSAC, RDSCAC):
    return RDSCAC - CIRDSAC


def CSRTF(BA1Ai, BI1Ai, BI2Ai, BN1Ai, C, IPVLOC, P, PVINCE, PVINPE, PVINVE, RDPTP, V):
    return RDPTP + PVINVE + PVINCE + PVINPE + somme(BN1Ai + BI1Ai + BI2Ai + BA1Ai) * 1 - positif(IPVLOC)


def RDRTF(CSRTF):
    return CSRTF


def PSRTF(CSRTF):
    return CSRTF


def BASSURV3(CESSASSV, LIM_ASSUR3):
    return max(0, CESSASSV - LIM_ASSUR3)


def BASSURV2(BASSURV3, CESSASSV, LIM_ASSUR2):
    return max(0, CESSASSV - BASSURV3 - LIM_ASSUR2)


def BASSURV1(BASSURV2, BASSURV3, CESSASSV, LIM_ASSUR1):
    return max(0, CESSASSV - BASSURV3 - BASSURV2 - LIM_ASSUR1)


def BASSURC3(CESSASSC, LIM_ASSUR3):
    return max(0, CESSASSC - LIM_ASSUR3)


def BASSURC2(BASSURC3, CESSASSC, LIM_ASSUR2):
    return max(0, CESSASSC - BASSURC3 - LIM_ASSUR2)


def BASSURC1(BASSURC2, BASSURC3, CESSASSC, LIM_ASSUR1):
    return max(0, CESSASSC - BASSURC3 - BASSURC2 - LIM_ASSUR1)


def BASSURV(CESSASSV):
    return CESSASSV


def BASSURC(CESSASSC):
    return CESSASSC


def TAXASSURV(BASSURV1, BASSURV2, BASSURV3, RE168, TAX1649, TX_ASSUR1, TX_ASSUR2, TX_ASSUR3):
    return arr(BASSURV1 * TX_ASSUR1 / 100 + BASSURV2 * TX_ASSUR2 / 100 + BASSURV3 * TX_ASSUR3 / 100) * 1 - positif(RE168 + TAX1649)


def TAXASSURC(BASSURC1, BASSURC2, BASSURC3, RE168, TAX1649, TX_ASSUR1, TX_ASSUR2, TX_ASSUR3):
    return arr(BASSURC1 * TX_ASSUR1 / 100 + BASSURC2 * TX_ASSUR2 / 100 + BASSURC3 * TX_ASSUR3 / 100) * 1 - positif(RE168 + TAX1649)


def TAXASSUR(TAXASSURC, TAXASSURV):
    return TAXASSURV + TAXASSURC


def BCVNSAL(CVNSALAC, CVNSALAV, GLDGRATC, GLDGRATV, RE168, TAX1649):
    return CVNSALAV + CVNSALAC + GLDGRATV + GLDGRATC * 1 - positif(present(TAX1649) + present(RE168))


def B3SVN(CVNSALAC, CVNSALAV, RE168, TAX1649):
    return CVNSALAV + CVNSALAC * 1 - positif(present(TAX1649) + present(RE168))


def CVNSALC(ANNUL2042, BCVNSAL, TX10):
    return arr(BCVNSAL * TX10 / 100) * 1 - positif(ANNUL2042)


def BGLOA(GLDGRATC, GLDGRATV, RE168, TAX1649, V_CNR):
    return GLDGRATV + GLDGRATC * 1 - V_CNR * 1 - positif(present(TAX1649) + present(RE168))


def CGLOA(ANNUL2042, BGLOA, TX075):
    return arr(BGLOA * TX075 / 100) * 1 - positif(ANNUL2042)


def BGLOACNR(GLDGRATC, GLDGRATV, RE168, TAX1649, V_CNR):
    return GLDGRATV + GLDGRATC * V_CNR * 1 - positif(present(TAX1649) + present(RE168))


def BCDIS(GSALC, GSALV, RE168, TAX1649, V_CNR):
    return GSALV + GSALC * 1 - V_CNR * 1 - positif(present(TAX1649) + present(RE168))


def CDISC(ANNUL2042, BCDIS, TCDIS):
    return arr(BCDIS * TCDIS / 100) * 1 - positif(ANNUL2042)


def CDIS(CDISC):
    return CDISC


def BREGV(COD2LA, RE168, TAX1649, V_CNR):
    return COD2LA * 1 - V_CNR * 1 - positif(present(TAX1649) + present(RE168))


def MREGV(BREGV):
    return BREGV

