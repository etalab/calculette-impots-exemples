# -*- coding: utf-8 -*-
# flake8: noqa


# WARNING: This file is automatically generated by a script. No not modify it by hand!

# Original files are "chap-teff.json" and "chap-teff.m"


def TMIB_TT(i):
    if i in ('V', 'C', 'P'):
        return TMIB_TVEN(i) + TMIB_TPRES(i)
    else:
        raise NotImplementedError()


def TMIB_TVEN(i):
    if i in ('V', 'C', 'P'):
        return MIBVEN(i) + AUTOBICV(i) + MIBNPVEN(i) + MIBGITE(i) + LOCGIT(i)
    else:
        raise NotImplementedError()


def TMIB_TPRES(i):
    if i in ('V', 'C', 'P'):
        return MIBPRES(i) + AUTOBICP(i) + MIBNPPRES(i) + MIBMEU(i)
    else:
        raise NotImplementedError()

def TMIB_PRESA(i):
    if i in ('V', 'C', 'P'):
        return min(MIBPRES(i) + MIBNPPRES(i), max(MIN_MBIC, arr(MIBPRES(i) + MIBNPPRES(i) * TX_MIBPRES / 100)))
    else:
        raise NotImplementedError()


def TMIB_AUTOAP(i):
    if i in ('V', 'C', 'P'):
        return TMIB_AP(i) - TMIB_PRESA(i)
    else:
        raise NotImplementedError()


def TMIB_AP(i):
    if i in ('V', 'C', 'P'):
        return min(TMIB_TPRES(i), max(MIN_MBIC, arr(TMIB_TPRES(i) * TX_MIBPRES / 100)))
    else:
        raise NotImplementedError()


def TPMIB_AV(i):
    if i in ('V', 'C', 'P'):
        return min(MIBVEN(i) + AUTOBICV(i), max(MIN_MBIC, arr(MIBVEN(i) + AUTOBICV(i) * TX_MIBVEN / 100)))
    else:
        raise NotImplementedError()


def TPMIB_AP(i):
    if i in ('V', 'C', 'P'):
        return min(MIBPRES(i) + AUTOBICP(i), max(MIN_MBIC, arr(MIBPRES(i) + AUTOBICP(i) * TX_MIBPRES / 100)))
    else:
        raise NotImplementedError()


def TMIB_VENTA(i):
    if i in ('V', 'C', 'P'):
        return min(MIBVEN(i) + MIBNPVEN(i), max(MIN_MBIC, arr(MIBVEN(i) + MIBNPVEN(i) * TX_MIBVEN / 100)))
    else:
        raise NotImplementedError()


def TMIB_AUTOAV(i):
    if i in ('V', 'C', 'P'):
        return TMIB_AV(i) - TMIB_VENTA(i)
    else:
        raise NotImplementedError()


def TMIB_AV(i):
    if i in ('V', 'C', 'P'):
        return min(TMIB_TVEN(i), max(MIN_MBIC, arr(TMIB_TVEN(i) * TX_MIBVEN / 100)))
    else:
        raise NotImplementedError()

def TMIB_ABNPPL(i):
    if i in ('V', 'C', 'P'):
        return TMIB_AP(i) - TMIB_ABP(i) - TMIB_ABNPP(i) * present(MIBMEU(i))
    else:
        raise NotImplementedError()


def TMIB_ABV(i):
    if i in ('V', 'C', 'P'):
        return max(0, arr(TMIB_AV(i) * MIBVEN(i) + AUTOBICV(i) / TMIB_TVEN(i)))
    else:
        raise NotImplementedError()


def TMIB_ABNPV(i):
    if i in ('V', 'C', 'P'):
        return max(0, arr(TMIB_AV(i) * MIBNPVEN(i) / TMIB_TVEN(i))) * positif(present(MIBGITE(i)) + present(LOCGIT(i))) + TMIB_AV(i) - TMIB_ABV(i) * 1 - positif(present(MIBGITE(i)) + present(LOCGIT(i)))
    else:
        raise NotImplementedError()


def TMIB_ABP(i):
    if i in ('V', 'C', 'P'):
        return max(0, arr(TMIB_AP(i) * MIBPRES(i) + AUTOBICP(i) / TMIB_TPRES(i)))
    else:
        raise NotImplementedError()


def TMIB_ABNPVL(i):
    if i in ('V', 'C', 'P'):
        return TMIB_AV(i) - TMIB_ABV(i) - TMIB_ABNPV(i) * positif(present(MIBGITE(i)) + present(LOCGIT(i)))
    else:
        raise NotImplementedError()


def TMIB_ABNPP(i):
    if i in ('V', 'C', 'P'):
        return max(0, arr(TMIB_AP(i) * MIBNPPRES(i) / TMIB_TPRES(i))) * present(MIBMEU(i)) + TMIB_AP(i) - TMIB_ABP(i) * 1 - present(MIBMEU(i))
    else:
        raise NotImplementedError()

TMIBNETVF = somme((TMIB_NETV(i) for i in ('V', 'C', 'P')))


TMIBNETNPVF = somme((TMIB_NETNPV(i) for i in ('V', 'C', 'P')))


TMIBNETPF = somme((TMIB_NETP(i) for i in ('V', 'C', 'P')))


TMIBNETNPPF = somme((TMIB_NETNPP(i) for i in ('V', 'C', 'P')))


TBICPABV = arr(TMIB_ABVV * AUTOBICVV / MIBVENV + AUTOBICVV + TMIB_ABPV * AUTOBICPV / MIBPRESV + AUTOBICPV)


TBICPROVC = max(0, arr(TMIB_ABVC * AUTOBICVC / MIBVENC + AUTOBICVC + TMIB_ABPC * AUTOBICPC / MIBPRESC + AUTOBICPC))


TBICPABC = min(TBICPROVC, arr(TMIB_ABVC * AUTOBICVC / MIBVENC + AUTOBICVC + TMIB_ABPC * AUTOBICPC / MIBPRESC + AUTOBICPC))


TBICPROVP = max(0, arr(TMIB_ABVP * AUTOBICVP / MIBVENP + AUTOBICVP + TMIB_ABPP * AUTOBICPP / MIBPRESP + AUTOBICPP))


TBICPABP = min(TBICPROVP, arr(TMIB_ABVP * AUTOBICVP / MIBVENP + AUTOBICVP + TMIB_ABPP * AUTOBICPP / MIBPRESP + AUTOBICPP))


TBICNPABV = arr(TMIB_ABNPVV / MIBNPVENV + TMIB_ABNPPV / MIBNPPRESV)


TBICNPPROVC = max(0, arr(TMIB_ABNPVC / MIBNPVENC + TMIB_ABNPPC / MIBNPPRESC))


TBICNPABC = min(TBICNPPROVC, arr(TMIB_ABNPVC / MIBNPVENC + TMIB_ABNPPC / MIBNPPRESC))


TBICNPPROVP = max(0, arr(TMIB_ABNPVP / MIBNPVENP + TMIB_ABNPPP / MIBNPPRESP))


TBICNPABP = min(TBICNPPROVP, arr(TMIB_ABNPVP / MIBNPVENP + TMIB_ABNPPP / MIBNPPRESP))


ABICPDECV = AUTOBICVV + AUTOBICPV


ABICPDECC = AUTOBICVC + AUTOBICPC


ABICPDECP = AUTOBICVP + AUTOBICPP


ABICPNETV = AUTOBICVV + AUTOBICPV - max(0, TMIB_AUTOAVV - TMIB_ABNPVLV) - max(0, TMIB_AUTOAPV - TMIB_ABNPPLV)


ABICPNETC = AUTOBICVC + AUTOBICPC - max(0, TMIB_AUTOAVC - TMIB_ABNPVLC) - max(0, TMIB_AUTOAPC - TMIB_ABNPPLC)


ABICPNETP = AUTOBICVP + AUTOBICPP - max(0, TMIB_AUTOAVP - TMIB_ABNPVLP) - max(0, TMIB_AUTOAPP - TMIB_ABNPPLP)


AUTOBICPNET = ABICPNETV + ABICPNETC + ABICPNETP


def TPMIB_NETV(i):
    if i in ('V', 'C', 'P'):
        return MIBVEN(i) + AUTOBICV(i) - TPMIB_AV(i)
    else:
        raise NotImplementedError()


def TMIB_NETNPV(i):
    if i in ('V', 'C', 'P'):
        return MIBNPVEN(i) - TMIB_ABNPV(i)
    else:
        raise NotImplementedError()


def TMIB_NETP(i):
    if i in ('V', 'C', 'P'):
        return MIBPRES(i) + AUTOBICP(i) - TMIB_ABP(i)
    else:
        raise NotImplementedError()


def TPMIB_NETP(i):
    if i in ('V', 'C', 'P'):
        return MIBPRES(i) + AUTOBICP(i) - TPMIB_AP(i)
    else:
        raise NotImplementedError()


def TMIB_NETV(i):
    if i in ('V', 'C', 'P'):
        return MIBVEN(i) + AUTOBICV(i) - TMIB_ABV(i)
    else:
        raise NotImplementedError()


def TMIB_NETNPP(i):
    if i in ('V', 'C', 'P'):
        return MIBNPPRES(i) - TMIB_ABNPP(i)
    else:
        raise NotImplementedError()

def TSPETOT(i):
    if i in ('V', 'C', 'P'):
        return BNCPRO(i) + AUTOBNC(i) + BNCNP(i)
    else:
        raise NotImplementedError()

def TSPEBASAB(i):
    if i in ('V', 'C', 'P'):
        return TSPETOT(i)
    else:
        raise NotImplementedError()


def TSPEAB(i):
    if i in ('V', 'C', 'P'):
        return arr(max(MIN_SPEBNC, TSPEBASAB(i) * SPETXAB / 100) * positif_ou_nul(TSPETOT(i) - MIN_SPEBNC)) + arr(min(MIN_SPEBNC, TSPEBASAB(i)) * positif(MIN_SPEBNC - TSPETOT(i)))
    else:
        raise NotImplementedError()

AUTOBNCPNET = ABNCPNETV + ABNCPNETC + ABNCPNETP


HONONET = HONONETV + HONONETC + HONONETP


def ABNCPNET(i):
    if i in ('V', 'C', 'P'):
        return AUTOBNC(i) - TBNCPAB(i)
    else:
        raise NotImplementedError()


def TBNCPAB(i):
    if i in ('V', 'C', 'P'):
        return arr(TSPEABP(i) * AUTOBNC(i) / BNCPRO(i) + AUTOBNC(i))
    else:
        raise NotImplementedError()


def HONODEC(i):
    if i in ('V', 'C', 'P'):
        return XHONO(i) + XHONOAA(i)
    else:
        raise NotImplementedError()


def HONONET(i):
    if i in ('V', 'C', 'P'):
        return arr(XHONO(i) * MAJREV) + XHONOAA(i)
    else:
        raise NotImplementedError()


def TBNCNPAB(i):
    if i in ('V', 'C', 'P'):
        return TBNCTOTAB(i) - TBNCPAB(i)
    else:
        raise NotImplementedError()


def TSPEABP(i):
    if i in ('V', 'C', 'P'):
        return arr(TSPEAB(i) * BNCPRO(i) + AUTOBNC(i) / TSPETOT(i))
    else:
        raise NotImplementedError()


def ABNCPDEC(i):
    if i in ('V', 'C', 'P'):
        return AUTOBNC(i)
    else:
        raise NotImplementedError()


def TSPEABNP(i):
    if i in ('V', 'C', 'P'):
        return TSPEAB(i) - TSPEABP(i)
    else:
        raise NotImplementedError()


def TBNCTOTAB(i):
    if i in ('V', 'C', 'P'):
        return arr(TSPEAB(i) * AUTOBNC(i) / TSPETOT(i))
    else:
        raise NotImplementedError()

TSPENET = somme((TSPENET(i) for i in ('V', 'C', 'P')))


def TSPENET(i):
    if i in ('V', 'C', 'P'):
        return TSPENETP(i) + TSPENETNP(i)
    else:
        raise NotImplementedError()


def TSPENETNP(i):
    if i in ('V', 'C', 'P'):
        return max(0, BNCNP(i) - TSPEABNP(i))
    else:
        raise NotImplementedError()


def TSPENETP(i):
    if i in ('V', 'C', 'P'):
        return max(0, BNCPRO(i) + AUTOBNC(i) - TSPEABP(i))
    else:
        raise NotImplementedError()

def TXSPEAA(i):
    if i in ('V', 'C', 'P'):
        return BNCRE(i) + XHONOAA(i) - BNCDE(i) * 1 - positif(ART1731BIS)
    else:
        raise NotImplementedError()

def TXSPEH(i):
    if i in ('V', 'C', 'P'):
        return max(0, arr(BNHRE(i) + XHONO(i) - BNHDE(i) * 1 - positif(ART1731BIS) * MAJREV)) + min(0, BNHRE(i) + XHONO(i) - BNHDE(i) * 1 - positif(ART1731BIS))
    else:
        raise NotImplementedError()

def TXSPENET(i):
    if i in ('V', 'C', 'P'):
        return TXSPEAA(i) + TXSPEH(i)
    else:
        raise NotImplementedError()

TXSPENET = somme((TXSPENET(i) for i in ('V', 'C', 'P')))

TTSBNV = TSHALLOV + ALLOV + max(0, SALEXTV - COD1AD)


TTSBNC = TSHALLOC + ALLOC + max(0, SALEXTC - COD1BD)


TTSBN1 = TSHALLO1 + ALLO1 + max(0, SALEXT1 - COD1CD)


TTSBN2 = TSHALLO2 + ALLO2 + max(0, SALEXT2 - COD1DD)


TTSBN3 = TSHALLO3 + ALLO3 + max(0, SALEXT3 - COD1ED)


TTSBN4 = TSHALLO4 + ALLO4 + max(0, SALEXT4 - COD1FD)


TTSHALLOP = TSHALLO1 + TSHALLO2 + TSHALLO3 + TSHALLO4


TALLOP = ALLO1 + ALLO2 + ALLO3 + ALLO4


TTSBNP = TTSHALLOP + TALLOP


TEXTSV = TTSBNV + BPCOSAV + GLDGRATV + T2TSNV


TEXTSC = TTSBNC + BPCOSAC + GLDGRATC + T2TSNC


TGATASAV = BPCOSAV + GLDGRATV


TGATASAC = BPCOSAC + GLDGRATC


TTSBV = TEXTSV + somme((GLD(x)V for x in interval(1, 3))) + CODDAJ + CODEAJ


TTSBC = TEXTSC + somme((GLD(x)C for x in interval(1, 3))) + CODDBJ + CODEBJ


TTSBP = somme((TTSB(i) for i in interval(1, 4)))


T2PRBV = CARPEV + PENSALV + CODRAZ


T2PRBC = CARPEC + PENSALC + CODRBZ


T2PRB1 = CARPEP1 + PENSALP1 + CODRCZ


T2PRB2 = CARPEP2 + PENSALP2 + CODRDZ


T2PRB3 = CARPEP3 + PENSALP3 + CODREZ


T2PRB4 = CARPEP4 + PENSALP4 + CODRFZ


TEXPRV = TPRBV + COD1AH + T2PRBV + PEBFV


TEXPRC = TPRBC + COD1BH + T2PRBC + PEBFC


TEXPR1 = TPRB1 + COD1CH + T2PRB1 + PEBF1


TEXPR2 = TPRB2 + COD1DH + T2PRB2 + PEBF2


TEXPR3 = TPRB3 + COD1EH + T2PRB3 + PEBF3


TEXPR4 = TPRB4 + COD1FH + T2PRB4 + PEBF4


def TTSB(i):
    if i in (1, 2, 3, 4):
        return TEXTS(i)
    else:
        raise NotImplementedError()


def TPRB(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return PRBR(i) + PALI(i) + PENIN(i)
    else:
        raise NotImplementedError()


def T2TSN(i):
    if i in ('V', 'C'):
        return CARTS(i) + REMPLA(i)
    elif i in (1, 2, 3, 4):
        return CARTSP(i) + REMPLAP(i)
    else:
        raise NotImplementedError()


def TEXTS(i):
    if i in interval(1, 4):
        return TTSBN(i) + T2TSN(i)
    else:
        raise NotImplementedError()


def TEXSPB(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return TEXTS(i) + TEXPR(i)
    else:
        raise NotImplementedError()

def TDFN(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return min(PLAF_DEDFORFTS, TTPS10(i))
    else:
        raise NotImplementedError()


def TTPS10(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return arr(TTSB(i) * TX_DEDFORFTS / 100)
    else:
        raise NotImplementedError()

def T10MINS(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return max(min(TTSB(i), TDEDMIN(i)), TDFN(i))
    else:
        raise NotImplementedError()


def TIND_10MIN_0(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return positif(TDEDMIN(i) - TDFN(i)) * positif(TTSB(i))
    else:
        raise NotImplementedError()


def TDEDMIN(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return positif(DETS(i)) * MIN_DEMEMPLOI + 1 - positif(DETS(i)) * MIN_DEDSFORFTS
    else:
        raise NotImplementedError()


def TIND_MIN(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return 1 - positif(TIND_10MIN_0(i))
    else:
        raise NotImplementedError()

T10MINSP = T10MINS1 + T10MINS2 + T10MINS3 + T10MINS4


TFRDPROVV = TTSBNV + TPRV + PALIV - TAPRV


TFRDPROVC = TTSBNC + TPRC + PALIC - TAPRC


TFRDPROV1 = TTSBN1 + PRBR1 + PALI1 - TAPR1


TFRDPROV2 = TTSBN2 + PRBR2 + PALI2 - TAPR2


TFRDPROV3 = TTSBN3 + PRBR3 + PALI3 - TAPR3


TFRDPROV4 = TTSBN4 + PRBR4 + PALI4 - TAPR4


TFRDPROVP = TFRDPROV1 + TFRDPROV2 + TFRDPROV3 + TFRDPROV4


TFRDP = 1 - positif(PREM8_11) * FRNP + COD1CE + COD1DE + COD1EE + COD1FE * positif(FRNP + COD1CE + COD1DE + COD1EE + COD1FE - T10MINSP) + null(4 - V_IND_TRAIT) * positif(PREM8_11) * min(FRNP + COD1CE + COD1DE + COD1EE + COD1FE, TFRDPROVP) + null(5 - V_IND_TRAIT) * positif(PREM8_11) * min(FRNP + COD1CE + COD1DE + COD1EE + COD1FE, max(TFRDPROVPP2, TFRDPROVP1731))


TFRDV = 1 - positif(PREM8_11) * FRNV + COD1AE * positif(FRNV + COD1AE - T10MINSV) + null(4 - V_IND_TRAIT) * positif(PREM8_11) * min(FRNV + COD1AE, TFRDPROVV) + null(5 - V_IND_TRAIT) * positif(PREM8_11) * min(FRNV + COD1AE, min(TFRDPROVV, max(TFRDPROVVP2, TFRDPROVV1731)))


TFRDC = 1 - positif(ART1731BIS) * FRNC + COD1BE * positif(FRNC + COD1BE - T10MINSC) + null(4 - V_IND_TRAIT) * positif(PREM8_11) * min(FRNC + COD1BE, TFRDPROVC) + null(5 - V_IND_TRAIT) * positif(PREM8_11) * min(FRNC + COD1BE, min(TFRDPROVC, max(TFRDPROVCP2, TFRDPROVC1731)))


TFRD1 = 1 - positif(PREM8_11) * FRN1 + COD1CE * positif(FRN1 + COD1CE - T10MINS1) + null(4 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN1 + COD1CE, TFRDPROV1) * positif(FRN2 + FRN3 + FRN4 + COD1DE + COD1EE + COD1FE) + positif(PREM8_11) * max(0, TFRDP) * 1 - positif(FRN2 + FRN3 + FRN4 + COD1DE + COD1EE + COD1FE) + null(5 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN1 + COD1CE, min(TFRDPROV1, max(TFRDPROV1P2, TFRDPROV11731))) * positif(FRN2 + FRN3 + FRN4 + COD1DE + COD1EE + COD1FE) + positif(PREM8_11) * max(0, TFRDP) * 1 - positif(FRN2 + FRN3 + FRN4 + COD1DE + COD1EE + COD1FE)


TFRD2 = 1 - positif(PREM8_11) * FRN2 + COD1DE * positif(FRN2 + COD1DE - T10MINS2) + null(4 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN2 + COD1DE, TFRDPROV2) * positif(FRN3 + FRN4 + COD1EE + COD1FE) + positif(PREM8_11) * max(0, TFRDP - TFRD1) * 1 - positif(FRN3 + FRN4 + COD1EE + COD1FE) + null(5 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN2 + COD1DE, min(TFRDPROV2, max(TFRDPROV2P2, TFRDPROV21731))) * positif(FRN3 + FRN4 + COD1EE + COD1FE) + positif(PREM8_11) * max(0, TFRDP - TFRD1) * 1 - positif(FRN3 + FRN4 + COD1EE + COD1FE)


TFRD3 = 1 - positif(PREM8_11) * FRN3 + COD1EE * positif(FRN3 + COD1EE - T10MINS3) + null(4 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN3 + COD1EE, TFRDPROV3) * positif(FRN4 + COD1FE) + positif(PREM8_11) * max(0, TFRDP - TFRD1 - TFRD2) * 1 - positif(FRN4 + COD1FE) + null(5 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN3 + COD1EE, min(TFRDPROV3, max(TFRDPROV3P2, TFRDPROV31731))) * positif(FRN4 + COD1FE) + positif(PREM8_11) * max(0, TFRDP - TFRD1 - TFRD2) * 1 - positif(FRN4 + COD1FE)


TFRD4 = max(0, TFRDP - TFRD1 - TFRD2 - TFRD3)


TIND_10V = positif_ou_nul(T10MINSV - TFRDV + COD1AE)


TIND_10C = positif_ou_nul(T10MINSC - TFRDC + COD1BE)


TIND_101 = positif_ou_nul(T10MINS1 - TFRD1 + COD1CE)


TIND_102 = positif_ou_nul(T10MINS2 - TFRD2 + COD1DE)


TIND_103 = positif_ou_nul(T10MINS3 - TFRD3 + COD1EE)


TIND_104 = positif_ou_nul(T10MINS4 - TFRD4 + COD1FE)


TABTS1AJ = positif(SALEXTV + ALLOV + BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * TSHALLOV / TTSBV) + 1 - positif(SALEXTV + ALLOV + BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * TREP10V


TABTS1AC = positif(ALLOV + BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * max(0, SALEXTV - COD1AD) / TTSBV) + 1 - positif(ALLOV + BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ)


TABTS1AP = positif(BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * ALLOV / TTSBV) + 1 - positif(BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ - TABTS1AC)


TABTS3VJ = positif(GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * BPCOSAV / TTSBV) + 1 - positif(GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ - TABTS1AC - TABTS1AP)


TABTS1TT = positif(CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * GLDGRATV / TTSBV) + 1 - positif(CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ - TABTS1AC - TABTS1AP - TABTS3VJ)


TABTSRAJ = positif(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * CARTSV / TTSBV) + 1 - positif(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ - TABTS1AC - TABTS1AP - TABTS3VJ - TABTS1TT)


TABTSRAP = positif(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * REMPLAV / TTSBV) + 1 - positif(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ - TABTS1AC - TABTS1AP - TABTS3VJ - TABTS1TT - TABTSRAJ)


TABTSV = TABTS1AJ + TABTS1AC + TABTS1AP + TABTS3VJ + TABTS1TT + TABTSRAJ + TABTSRAP


TABTS1BJ = positif(SALEXTC + ALLOC + BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * TSHALLOC / TTSBC) + 1 - positif(SALEXTC + ALLOC + BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * TREP10C


TABTS1BC = positif(ALLOC + BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * max(0, SALEXTC - COD1BD) / TTSBC) + 1 - positif(ALLOC + BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ)


TABTS1BP = positif(BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * ALLOC / TTSBC) + 1 - positif(BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ - TABTS1BC)


TABTS3VK = positif(GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * BPCOSAC / TTSBC) + 1 - positif(GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ - TABTS1BC - TABTS1BP)


TABTS1UT = positif(CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * GLDGRATC / TTSBC) + 1 - positif(CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ - TABTS1BC - TABTS1BP - TABTS3VK)


TABTSRBJ = positif(REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * CARTSC / TTSBC) + 1 - positif(REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ - TABTS1BC - TABTS1BP - TABTS3VK - TABTS1UT)


TABTSRBP = positif(CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * REMPLAC / TTSBC) + 1 - positif(CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ - TABTS1BC - TABTS1BP - TABTS3VK - TABTS1UT - TABTSRBJ)


TABTSC = TABTS1BJ + TABTS1BC + TABTS1BP + TABTS3VK + TABTS1UT + TABTSRBJ + TABTSRBP


def TREP10(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return TIND_10(i) * TD10M(i) + 1 - TIND_10(i) * TFPT(i)
    else:
        raise NotImplementedError()


def TD10M(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return TIND_MIN(i) * TDFN(i) + 1 - TIND_MIN(i) * T10MINS(i)
    else:
        raise NotImplementedError()


def TFPT(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return max(TFRD(i), T10MINS(i))
    else:
        raise NotImplementedError()

TABDOMDAJ = positif(CODDAJ) * positif(CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * CODDAJ / TTSBV) + 1 - positif(CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTSV) + 0


TABDOMEAJ = positif(CODEAJ) * positif(GLD1V + GLD2V + GLD3V) * arr(TREP10V * CODEAJ / TTSBV) + 1 - positif(GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTSV - TABDOMDAJ) + 0


TABDOMDBJ = positif(CODDBJ) * positif(CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * CODDBJ / TTSBC) + 1 - positif(CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTSC) + 0


TABDOMEBJ = positif(CODEBJ) * positif(GLD1C + GLD2C + GLD3C) * arr(TREP10C * CODEBJ / TTSBC) + 1 - positif(GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTSC - TABDOMDBJ) + 0


TABGL1V = positif(GLD1V) * positif(GLD2V + GLD3V) * arr(TREP10V * GLD1V / TTSBV) + 1 - positif(GLD2V + GLD3V) * max(0, TREP10V - TABTSV - TABDOMDAJ - TABDOMEAJ) + 0


TABGL1C = positif(GLD1C) * positif(GLD2C + GLD3C) * arr(TREP10C * GLD1C / TTSBC) + 1 - positif(GLD2C + GLD3C) * max(0, TREP10C - TABTSC - TABDOMDBJ - TABDOMEBJ) + 0


TABGL2V = positif(GLD2V) * positif(GLD3V) * arr(TREP10V * GLD2V / TTSBV) + 1 - positif(GLD3V) * max(0, TREP10V - TABTSV - TABDOMDAJ - TABDOMEAJ - TABGL1V) + 0


TABGL2C = positif(GLD2C) * positif(GLD3C) * arr(TREP10C * GLD2C / TTSBC) + 1 - positif(GLD3C) * max(0, TREP10C - TABTSC - TABDOMDBJ - TABDOMEBJ - TABGL1C) + 0


TABGL3V = positif(GLD3V) * max(0, TREP10V - TABTSV - TABDOMDAJ - TABDOMEAJ - TABGL1V - TABGL2V) + 0


TABGL3C = positif(GLD3C) * max(0, TREP10C - TABTSC - TABDOMDBJ - TABDOMEBJ - TABGL1C - TABGL2C) + 0


TABTS1CJ = arr(TREP101 * TSHALLO1 / TTSB1)


TABTS1CC = positif(ALLO1 + CARTSP1 + REMPLAP1) * arr(TREP101 * max(0, SALEXT1 - COD1CD) / TTSB1) + 1 - positif(ALLO1 + CARTSP1 + REMPLAP1) * max(0, TREP101 - TABTS1CJ)


TABTS1CP = positif(CARTSP1 + REMPLAP1) * arr(TREP101 * ALLO1 / TTSB1) + 1 - positif(CARTSP1 + REMPLAP1) * max(0, TREP101 - TABTS1CJ - TABTS1CC)


TABTSRCJ = positif(REMPLAP1) * arr(TREP101 * CARTSP1 / TTSB1) + 1 - positif(REMPLAP1) * max(0, TREP101 - TABTS1CJ - TABTS1CC - TABTS1CP)


TABTSRCP = max(0, TREP101 - TABTS1CJ - TABTS1CC - TABTS1CP - TABTSRCJ)


TABTS1DJ = arr(TREP102 * TSHALLO2 / TTSB2)


TABTS1DC = positif(ALLO2 + CARTSP2 + REMPLAP2) * arr(TREP102 * max(0, SALEXT2 - COD1DD) / TTSB2) + 1 - positif(ALLO2 + CARTSP2 + REMPLAP2) * max(0, TREP102 - TABTS1DJ)


TABTS1DP = positif(CARTSP2 + REMPLAP2) * arr(TREP102 * ALLO2 / TTSB2) + 1 - positif(CARTSP2 + REMPLAP2) * max(0, TREP102 - TABTS1DJ - TABTS1DC)


TABTSRDJ = positif(REMPLAP2) * arr(TREP102 * CARTSP2 / TTSB2) + 1 - positif(REMPLAP2) * max(0, TREP102 - TABTS1DJ - TABTS1DC - TABTS1DP)


TABTSRDP = max(0, TREP102 - TABTS1DJ - TABTS1DC - TABTS1DP - TABTSRDJ)


TABTS1EJ = arr(TREP103 * TSHALLO3 / TTSB3)


TABTS1EC = positif(ALLO3 + CARTSP3 + REMPLAP3) * arr(TREP103 * max(0, SALEXT3 - COD1ED) / TTSB3) + 1 - positif(ALLO3 + CARTSP3 + REMPLAP3) * max(0, TREP103 - TABTS1EJ)


TABTS1EP = positif(CARTSP3 + REMPLAP3) * arr(TREP103 * ALLO3 / TTSB3) + 1 - positif(CARTSP3 + REMPLAP3) * max(0, TREP103 - TABTS1EJ - TABTS1EC)


TABTSREJ = positif(REMPLAP3) * arr(TREP103 * CARTSP3 / TTSB3) + 1 - positif(REMPLAP3) * max(0, TREP103 - TABTS1EJ - TABTS1EC - TABTS1EP)


TABTSREP = max(0, TREP103 - TABTS1EJ - TABTS1EC - TABTS1EP - TABTSREJ)


TABTS1FJ = arr(TREP104 * TSHALLO4 / TTSB4)


TABTS1FC = positif(ALLO4 + CARTSP4 + REMPLAP4) * arr(TREP104 * max(0, SALEXT4 - COD1FD) / TTSB4) + 1 - positif(ALLO4 + CARTSP4 + REMPLAP4) * max(0, TREP104 - TABTS1FJ)


TABTS1FP = positif(CARTSP4 + REMPLAP4) * arr(TREP104 * ALLO4 / TTSB4) + 1 - positif(CARTSP4 + REMPLAP4) * max(0, TREP104 - TABTS1FJ - TABTS1FC)


TABTSRFJ = positif(REMPLAP4) * arr(TREP104 * CARTSP4 / TTSB4) + 1 - positif(REMPLAP4) * max(0, TREP104 - TABTS1FJ - TABTS1FC - TABTS1FP)


TABTSRFP = max(0, TREP104 - TABTS1FJ - TABTS1FC - TABTS1FP - TABTSRFJ)

TABGLTV = somme((TABGL(x)V for x in interval(1, 3))) + TABDOMDAJ + TABDOMEAJ


TABGLTC = somme((TABGL(x)C for x in interval(1, 3))) + TABDOMDBJ + TABDOMEBJ

TTSN1AJ = TSHALLOV - TABTS1AJ


TTSN1AC = max(0, SALEXTV - COD1AD) - TABTS1AC


TTSN1AP = ALLOV - TABTS1AP


TTSN3VJ = BPCOSAV - TABTS3VJ


TTSN1TT = GLDGRATV - TABTS1TT


TTSNRAJ = CARTSV - TABTSRAJ


TTSNRAP = REMPLAV - TABTSRAP


TTSNDAJ = CODDAJ - TABDOMDAJ


TTSNEAJ = CODEAJ - TABDOMEAJ


TTSNGL1V = GLD1V - TABGL1V


TTSNGL2V = GLD2V - TABGL2V


TTSNGL3V = GLD3V - TABGL3V


TTSN1BJ = TSHALLOC - TABTS1BJ


TTSN1BC = max(0, SALEXTC - COD1BD) - TABTS1BC


TTSN1BP = ALLOC - TABTS1BP


TTSN3VK = BPCOSAC - TABTS3VK


TTSN1UT = GLDGRATC - TABTS1UT


TTSNRBJ = CARTSC - TABTSRBJ


TTSNRBP = REMPLAC - TABTSRBP


TTSNDBJ = CODDBJ - TABDOMDBJ


TTSNEBJ = CODEBJ - TABDOMEBJ


TTSNGL1C = GLD1C - TABGL1C


TTSNGL2C = GLD2C - TABGL2C


TTSNGL3C = GLD3C - TABGL3C


TTSN1CJ = TSHALLO1 - TABTS1CJ


TTSN1CC = max(0, SALEXT1 - COD1CD) - TABTS1CC


TTSN1CP = ALLO1 - TABTS1CP


TTSNRCJ = CARTSP1 - TABTSRCJ


TTSNRCP = REMPLAP1 - TABTSRCP


TTSN1DJ = TSHALLO2 - TABTS1DJ


TTSN1DC = max(0, SALEXT2 - COD1DD) - TABTS1DC


TTSN1DP = ALLO2 - TABTS1DP


TTSNRDJ = CARTSP2 - TABTSRDJ


TTSNRDP = REMPLAP2 - TABTSRDP


TTSN1EJ = TSHALLO3 - TABTS1EJ


TTSN1EC = max(0, SALEXT3 - COD1ED) - TABTS1EC


TTSN1EP = ALLO3 - TABTS1EP


TTSNREJ = CARTSP3 - TABTSREJ


TTSNREP = REMPLAP3 - TABTSREP


TTSN1FJ = TSHALLO4 - TABTS1FJ


TTSN1FC = max(0, SALEXT4 - COD1FD) - TABTS1FC


TTSN1FP = ALLO4 - TABTS1FP


TTSNRFJ = CARTSP4 - TABTSRFJ


TTSNRFP = REMPLAP4 - TABTSRFP


CUMSALEXTEF = TTSN1AC + TTSN1BC + TTSN1CC + TTSN1DC + TTSN1EC + TTSN1FC

TPL_PB = arr(PLAF_DEDPRFOYER - somme((TAPB(i) * TIND_APB(i) for i in ('V', 'C') or i in interval(1, 4))))


def TIND_APB(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return positif_ou_nul(TPLR(i) - TEXPR(i) * TX_DEDPER / 100)
    else:
        raise NotImplementedError()


def TPLR(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return min(MIN_DEDPR, TEXPR(i))
    else:
        raise NotImplementedError()


def TAPB(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return max(TPLR(i), TEXPR(i) * TX_DEDPER / 100)
    else:
        raise NotImplementedError()

TABPRV = arr(1 - TIND_APBV * min(TAPBV, TPL_PB * TAPBV / somme((TAPB(x) * 1 - TIND_APB(x) for x in ('V', 'C') or x in interval(1, 4)))) + TIND_APBV * TAPBV)


TABPRC = arr(1 - TIND_APBC * min(TAPBC, positif(TEXPR1 + TEXPR2 + TEXPR3 + TEXPR4) * TPL_PB * TAPBC / somme((TAPB(x) * 1 - TIND_APB(x) for x in ('V', 'C') or x in interval(1, 4))) + 1 - positif(TEXPR1 + TEXPR2 + TEXPR3 + TEXPR4) * max(0, TPL_PB - TABPRV)) + TIND_APBC * TAPBC)


TABPR1 = arr(1 - TIND_APB1 * min(TAPB1, positif(TEXPR2 + TEXPR3 + TEXPR4) * TPL_PB * TAPB1 / somme((TAPB(x) * 1 - TIND_APB(x) for x in ('V', 'C') or x in interval(1, 4))) + 1 - positif(TEXPR2 + TEXPR3 + TEXPR4) * max(0, TPL_PB - TABPRV - TABPRC)) + TIND_APB1 * TAPB1)


TABPR2 = arr(1 - TIND_APB2 * min(TAPB2, positif(TEXPR3 + TEXPR4) * TPL_PB * TAPB2 / somme((TAPB(x) * 1 - TIND_APB(x) for x in ('V', 'C') or x in interval(1, 4))) + 1 - positif(TEXPR3 + TEXPR4) * max(0, TPL_PB - TABPRV - TABPRC - TABPR1)) + TIND_APB2 * TAPB2)


TABPR3 = arr(1 - TIND_APB3 * min(TAPB3, positif(TEXPR4) * TPL_PB * TAPB3 / somme((TAPB(x) * 1 - TIND_APB(x) for x in ('V', 'C') or x in interval(1, 4))) + 1 - positif(TEXPR4) * max(0, TPL_PB - TABPRV - TABPRC - TABPR1 - TABPR2)) + TIND_APB3 * TAPB3)


TABPR4 = arr(1 - TIND_APB4 * min(TAPB4, max(0, TPL_PB - TABPRV - TABPRC - TABPR1 - TABPR2 - TABPR3)) + TIND_APB4 * TAPB4)

TAPRV = TIND_APBV * TABPRV + 1 - TIND_APBV * min(TABPRV, TPL_PB)


TAPRC = TIND_APBC * TABPRC + 1 - TIND_APBC * min(TABPRC, TPL_PB - 1 - TIND_APBV * TAPRV)


TAPR1 = TIND_APB1 * TABPR1 + 1 - TIND_APB1 * min(TABPR1, TPL_PB - 1 - TIND_APBV * TAPRV - 1 - TIND_APBC * TAPRC)


TAPR2 = TIND_APB2 * TABPR2 + 1 - TIND_APB2 * min(TABPR2, TPL_PB - 1 - TIND_APBV * TAPRV - 1 - TIND_APBC * TAPRC - 1 - TIND_APB1 * TAPR1)


TAPR3 = TIND_APB3 * TABPR3 + 1 - TIND_APB3 * min(TABPR3, TPL_PB - 1 - TIND_APBV * TAPRV - 1 - TIND_APBC * TAPRC - 1 - TIND_APB1 * TAPR1 - 1 - TIND_APB2 * TAPR2)


TAPR4 = TIND_APB4 * TABPR4 + 1 - TIND_APB4 * min(TABPR4, TPL_PB - 1 - TIND_APBV * TAPRV - 1 - TIND_APBC * TAPRC - 1 - TIND_APB1 * TAPR1 - 1 - TIND_APB2 * TAPR2 - 1 - TIND_APB3 * TAPR3)

def TPRNN(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return TEXPR(i) - TAPR(i)
    else:
        raise NotImplementedError()

TTSNTV = TTSN1AJ + TTSN1AC + TTSN1AP + TTSN3VJ + TTSN1TT + TTSNRAJ + TTSNRAP + TTSNDAJ + TTSNEAJ + TTSNGL1V + TTSNGL2V + TTSNGL3V


TTSNTC = TTSN1BJ + TTSN1BC + TTSN1BP + TTSN3VK + TTSN1UT + TTSNRBJ + TTSNRBP + TTSNDBJ + TTSNEBJ + TTSNGL1C + TTSNGL2C + TTSNGL3C


TTSNT1 = TTSN1CJ + TTSN1CC + TTSN1CP + TTSNRCJ + TTSNRCP


TTSNT2 = TTSN1DJ + TTSN1DC + TTSN1DP + TTSNRDJ + TTSNRDP


TTSNT3 = TTSN1EJ + TTSN1EC + TTSN1EP + TTSNREJ + TTSNREP


TTSNT4 = TTSN1FJ + TTSN1FC + TTSN1FP + TTSNRFJ + TTSNRFP

def TTSN(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return positif(TTSNT(i)) * min(0, TTSNT(i) + TPRNN(i)) + positif_ou_nul(TTSNT(i)) * TTSNT(i)
    else:
        raise NotImplementedError()


def TPRN(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return positif(TTSNT(i)) * positif(TTSNT(i) + TPRNN(i)) * TTSNT(i) + TPRNN(i) + positif_ou_nul(TTSNT(i)) * TPRNN(i)
    else:
        raise NotImplementedError()

TGLDOMAVDAJV = max(CODDAJ - TABDOMDAJ, 0)


TGLDOMAVEAJV = max(CODEAJ - TABDOMEAJ, 0)


TGLDOMAVDBJC = max(CODDBJ - TABDOMDBJ, 0)


TGLDOMAVEBJC = max(CODEBJ - TABDOMEBJ, 0)


TGLN1V = max(GLD1V - TABGL1V, 0)


TGLN2V = max(GLD2V - TABGL2V, 0)


TGLN3V = max(GLD3V - TABGL3V, 0)


TGLN4V = max(CODDAJ - TABDOMDAJ, 0) + max(CODEAJ - TABDOMEAJ, 0)


TGLN1C = max(GLD1C - TABGL1C, 0)


TGLN2C = max(GLD2C - TABGL2C, 0)


TGLN3C = max(GLD3C - TABGL3C, 0)


TGLN4C = max(CODDBJ - TABDOMDBJ, 0) + max(CODEBJ - TABDOMEBJ, 0)


def TGLNAV(i, x):
    if i in ('V', 'C') or x in interval(1, 3):
        return max(GLD(x, i) - TABGL(x, i), 0)
    else:
        raise NotImplementedError()

TTSV = TTSNV - somme((max(0, GLD(x)V - TABGL(x)V) for x in interval(1, 3))) - max(CODDAJ - TABDOMDAJ, 0) - max(CODEAJ - TABDOMEAJ, 0)


TTSC = TTSNC - somme((max(0, GLD(x)C - TABGL(x)C) for x in interval(1, 3))) - max(CODDBJ - TABDOMDBJ, 0) - max(CODEBJ - TABDOMEBJ, 0)


TFRDVREP = positif(ART1731BIS) * max(0, FRNV - TFRDV) * null(TIND_10V)


TFRDCREP = positif(ART1731BIS) * max(0, FRNC - TFRDC) * null(TIND_10C)


TFRD1REP = positif(ART1731BIS) * max(0, max(0, FRN1 - TFRD1) - TPRN1 * 1 - positif(FRN1 - TFRD1) * null(TIND_101) + max(0, FRN2 - TFRD2) - TPRN2 * 1 - positif(FRN2 - TFRD2) * null(TIND_102) + max(0, FRN3 - TFRD3) - TPRN3 * 1 - positif(FRN3 - TFRD3) * null(TIND_103) + max(0, FRN4 - TFRD4) - TPRN4 * 1 - positif(FRN4 - TFRD4) * null(TIND_104))


TFRDREPTOT = positif(ART1731BIS) * TFRDVREP + TFRDCREP + TFRD1REP


def TTS(i):
    if i in interval(1, 4):
        return TTSN(i)
    else:
        raise NotImplementedError()


def TTPR(i):
    if i in ('V', 'C'):
        return TTSN(i) + TPRN(i) - somme((TGLN(x)(i) for x in interval(1, 3)))
    elif i in interval(1, 4):
        return TTSN(i) + TPRN(i)
    else:
        raise NotImplementedError()


def TTSNN2TS(i):
    if i in ('V', 'C'):
        return positif(TTS(i)) * positif(REMPLA(i)) * arr(TTS(i) * CARTS(i) / TEXTS(i)) + 1 - positif(REMPLA(i)) * TTS(i) - TTSNN(i)
    elif i in interval(1, 4):
        return positif(TTS(i)) * positif(REMPLAP(i)) * arr(TTS(i) * CARTSP(i) / TEXTS(i)) + 1 - positif(REMPLAP(i)) * TTS(i) - TTSNN(i)
    else:
        raise NotImplementedError()


def TTSNN(i):
    if i in ('V', 'C'):
        return positif(TTS(i)) * arr(TTS(i) * TTSBN(i) + BPCOSA(i) + GLDGRAT(i) / TEXTS(i)) + 1 - positif(TTS(i)) * TTS(i)
    elif i in interval(1, 4):
        return positif(TTS(i)) * arr(TTS(i) * TTSBN(i) / TEXTS(i)) + 1 - positif(TTS(i)) * TTS(i)
    else:
        raise NotImplementedError()


def TTSNN2(i):
    if i in ('V', 'C'):
        return positif(TTS(i)) * positif(CARTS(i) + REMPLA(i)) * arr(TTS(i) * T2TSN(i) / TEXTS(i)) + 1 - positif(CARTS(i) + REMPLA(i)) * TTS(i) - TTSNN(i)
    elif i in interval(1, 4):
        return positif(TTS(i)) * positif(CARTSP(i) + REMPLAP(i)) * arr(TTS(i) * T2TSN(i) / TEXTS(i)) + 1 - positif(CARTSP(i) + REMPLAP(i)) * TTS(i) - TTSNN(i)
    else:
        raise NotImplementedError()


def TTSNN2REMP(i):
    if i in ('V', 'C'):
        return positif(TTS(i)) * TTS(i) - TTSNN(i) - TTSNN2TS(i)
    elif i in interval(1, 4):
        return positif(TTS(i)) * TTS(i) - TTSNN(i) - TTSNN2TS(i)
    else:
        raise NotImplementedError()

TPRRV = arr(TPRNV * PRBV / TEXPRV) + arr(TPRNV * COD1AH / TEXPRV)


TPRRC = arr(TPRNC * PRBC / TEXPRC) + arr(TPRNC * COD1BH / TEXPRC)


TPRR1 = arr(TPRN1 * PRB1 / TEXPR1) + arr(TPRN1 * COD1CH / TEXPR1)


TPRR2 = arr(TPRN2 * PRB2 / TEXPR2) + arr(TPRN2 * COD1DH / TEXPR2)


TPRR3 = arr(TPRN3 * PRB3 / TEXPR3) + arr(TPRN3 * COD1EH / TEXPR3)


TPRR4 = arr(TPRN4 * PRB4 / TEXPR4) + arr(TPRN4 * COD1FH / TEXPR4)


TPRR2V = positif(PEBFV + PENSALV + CODRAZ) * arr(TPRNV * CARPEV / TEXPRV) + 1 - positif(PEBFV + PENSALV + CODRAZ) * TPRNV - TPRRV


TPRR2C = positif(PEBFC + PENSALC + CODRBZ) * arr(TPRNC * CARPEC / TEXPRC) + 1 - positif(PEBFC + PENSALC + CODRBZ) * TPRNC - TPRRC


TPRR21 = positif(PEBF1 + PENSALP1 + CODRCZ) * arr(TPRN1 * CARPEP1 / TEXPR1) + 1 - positif(PEBF1 + PENSALP1 + CODRCZ) * TPRN1 - TPRR1


TPRR22 = positif(PEBF2 + PENSALP2 + CODRDZ) * arr(TPRN2 * CARPEP2 / TEXPR2) + 1 - positif(PEBF2 + PENSALP2 + CODRDZ) * TPRN2 - TPRR2


TPRR23 = positif(PEBF3 + PENSALP3 + CODREZ) * arr(TPRN3 * CARPEP3 / TEXPR3) + 1 - positif(PEBF3 + PENSALP3 + CODREZ) * TPRN3 - TPRR3


TPRR24 = positif(PEBF4 + PENSALP4 + CODRFZ) * arr(TPRN4 * CARPEP4 / TEXPR4) + 1 - positif(PEBF4 + PENSALP4 + CODRFZ) * TPRN4 - TPRR4


TPRR2ZV = positif(PEBFV + PENSALV) * arr(TPRNV * CODRAZ / TEXPRV) + 1 - positif(PEBFV + PENSALV) * TPRNV - TPRRV - TPRR2V


TPRR2ZC = positif(PEBFC + PENSALC) * arr(TPRNC * CODRBZ / TEXPRC) + 1 - positif(PEBFC + PENSALC) * TPRNC - TPRRC - TPRR2C


TPRR2Z1 = positif(PEBF1 + PENSALP1) * arr(TPRN1 * CODRCZ / TEXPR1) + 1 - positif(PEBF1 + PENSALP1) * TPRN1 - TPRR1 - TPRR21


TPRR2Z2 = positif(PEBF2 + PENSALP2) * arr(TPRN2 * CODRDZ / TEXPR2) + 1 - positif(PEBF2 + PENSALP2) * TPRN2 - TPRR2 - TPRR22


TPRR2Z3 = positif(PEBF3 + PENSALP3) * arr(TPRN3 * CODREZ / TEXPR3) + 1 - positif(PEBF3 + PENSALP3) * TPRN3 - TPRR3 - TPRR23


TPRR2Z4 = positif(PEBF4 + PENSALP4) * arr(TPRN4 * CODRFZ / TEXPR4) + 1 - positif(PEBF4 + PENSALP4) * TPRN4 - TPRR4 - TPRR24


CUMPENEXTEF = somme((TPRR(i) for i in ('V', 'C') or i in interval(1, 4)))


def TPENALIM(i):
    if i in ('V', 'C'):
        return positif(TEXPR(i)) * TPRN(i) - TPRR(i) - TPRR2(i) - TPRR2Z(i) - TPENF(i)
    elif i in interval(1, 4):
        return positif(TEXPR(i)) * TPRN(i) - TPRR(i) - TPRR2(i) - TPRR2Z(i) - TPENF(i)
    else:
        raise NotImplementedError()


def TPENF(i):
    if i in ('V', 'C'):
        return positif(PENSAL(i)) * arr(TPRN(i) * PEBF(i) / TEXPR(i)) + 1 - positif(PENSAL(i)) * max(0, TPRN(i) - TPRR(i) - TPRR2(i) - TPRR2Z(i))
    elif i in interval(1, 4):
        return positif(PENSALP(i)) * arr(TPRN(i) * PEBF(i) / TEXPR(i)) + 1 - positif(PENSALP(i)) * TPRN(i) - TPRR(i) - TPRR2(i) - TPRR2Z(i)
    else:
        raise NotImplementedError()

TTSPRT = TTSNNV + TPRRV + TTSNNC + TPRRC + TTSNN1 + TPRR1 + TTSNN2 + TPRR2 + TTSNN3 + TPRR3 + TTSNN4 + TPRR4


TTSPRT1731 = max(0, TTSPRV) + max(0, TTSPRC) + max(0, TTSPR1) + max(0, TTSPR2) + max(0, TTSPR3) + max(0, TTSPR4)


TTSPR = TTSPRT * 1 - ART1731BIS + TTSPRT1731 * ART1731BIS + RVTOT

TTSPRP = somme((TTSPR(i) for i in interval(1, 4)))


TTSPRDP = somme((TTSPRD(i) for i in interval(1, 4)))


def TFRNRETENU(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return max(0, TFRNRET(i) + TSPRD(i))
    else:
        raise NotImplementedError()


def TTSPR(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return TTSNN(i) + TPRR(i) * 1 - PREM8_11 + max(0, TTSNN(i) + TPRR(i)) * PREM8_11
    else:
        raise NotImplementedError()


def TTSPRD(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return min(0, TTSNN(i) + TPRR(i)) * ART1731BIS
    else:
        raise NotImplementedError()

TEFFBENEFTOT = TSPENET + TXSPENET + TMIBNETVF + TMIBNETNPVF + TMIBNETPF + TMIBNETNPPF * 1 - positif(VARIPTEFP * positif(ART1731BIS) + IPTEFP * 1 - ART1731BIS + VARIPTEFN * positif(ART1731BIS) + IPTEFN * 1 - ART1731BIS + IPMOND)

TBICPF = TMIBNETVF + TMIBNETPF + MIB_NETCT


TBICNPF = max(0, somme((BINTA(i) + BINHTA(i) for i in ('V', 'C', 'P'))) + TMIBNETNPVF + TMIBNETNPPF + MIB_NETNPCT - DEFNP)


TBNN = somme((TSPENETP(i) for i in ('V', 'C', 'P'))) + TXSPENET + max(0, somme((TSPENETNP(i) for i in ('V', 'C', 'P'))) + NOCEPIMP - min(DABNCNP6, DABNCNP61731 + 0) * positif(ART1731BIS) + DABNCNP6 * 1 - ART1731BIS - min(DABNCNP5, DABNCNP51731 + 0) * positif(ART1731BIS) + DABNCNP5 * 1 - ART1731BIS - min(DABNCNP4, DABNCNP41731 + 0) * positif(ART1731BIS) + DABNCNP4 * 1 - ART1731BIS - min(DABNCNP3, DABNCNP31731 + 0) * positif(ART1731BIS) + DABNCNP3 * 1 - ART1731BIS - min(DABNCNP2, DABNCNP21731 + 0) * positif(ART1731BIS) + DABNCNP2 * 1 - ART1731BIS - min(DABNCNP1, DABNCNP11731 + 0) * positif(ART1731BIS) + DABNCNP1 * 1 - ART1731BIS) + SPENETCT + SPENETNPCT

TEFFREV = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + BPVRCM + PVTAXSB + PVIMPOS * null(1 - FLAG_EXIT) + COD3VE + PVIMPOS + PVSURSI * null(2 - FLAG_EXIT) + max(BANOR, 0) + REB + min(BANOR, 0) * positif(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649


TEFFREVRFR = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + PVBAR + max(BANOR, 0) + REB + min(BANOR, 0) * positif(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649


RBGTEF = 1 - positif(TEFFREV + PREREV - DAR) * min(0, TEFFREV + PREREV - DAR + TOTALQUO) + positif(TEFFREV + PREREV - DAR) * TEFFREV + PREREV - DAR


RBGTEFRFR = 1 - positif(TEFFREVRFR + PREREV - DAR) * min(0, TEFFREVRFR + PREREV - DAR + TOTALQUO) + positif(TEFFREVRFR + PREREV - DAR) * TEFFREVRFR + PREREV - DAR


RPALETEF = max(0, min(somme((min(NCHENF(i), LIM_PENSALENF) + min(arr(CHENF(i) * MAJREV), LIM_PENSALENF) for i in interval(1, 4))), RBGTEF - DDCSG + TOTALQUO - SDD)) * 1 - V_CNR


RPALETEFRFR = max(0, min(somme((min(NCHENF(i), LIM_PENSALENF) + min(arr(CHENF(i) * MAJREV), LIM_PENSALENF) for i in interval(1, 4))), RBGTEFRFR - DDCSG + TOTALQUO - SDD)) * 1 - V_CNR


RPALPTEF = max(min(TOTPA, RBGTEF - RPALETEF - DDCSG + TOTALQUO - SDD), 0) * 1 - V_CNR


RPALPTEFRFR = max(min(TOTPA, RBGTEFRFR - RPALETEFRFR - DDCSG + TOTALQUO - SDD), 0) * 1 - V_CNR


RFACCTEF = max(min(DFA, RBGTEF - RPALETEF - RPALPTEF - DDCSG + TOTALQUO - SDD), 0)


RFACCTEFRFR = max(min(DFA, RBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - DDCSG + TOTALQUO - SDD), 0)


RDDIVTEF = max(min(DEDIV * 1 - V_CNR, RBGTEF - RPALETEF - RPALPTEF - RFACCTEF - DDCSG + TOTALQUO - SDD), 0)


RDDIVTEFRFR = max(min(DEDIV * 1 - V_CNR, RBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - RFACCTEFRFR - DDCSG + TOTALQUO - SDD), 0)


APERPVTEF = 1 - V_CNR * max(min(RPERPV, RBGTEF - RPALETEF - RPALPTEF - RFACCTEF - RDDIVTEF - DDCSG + TOTALQUO - SDD), 0)


APERPVTEFRFR = 1 - V_CNR * max(min(RPERPV, RBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - RFACCTEFRFR - RDDIVTEFRFR - DDCSG + TOTALQUO - SDD), 0)


APERPCTEF = 1 - V_CNR * max(min(RPERPC, RBGTEF - RPALETEF - RPALPTEF - RFACCTEF - RDDIVTEF - DDCSG + TOTALQUO - SDD - APERPVTEF), 0)


APERPCTEFRFR = 1 - V_CNR * max(min(RPERPC, RBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - RFACCTEFRFR - RDDIVTEFRFR - DDCSG + TOTALQUO - SDD - APERPVTEFRFR), 0)


APERPPTEF = 1 - V_CNR * max(min(RPERPP, RBGTEF - RPALETEF - RPALPTEF - RFACCTEF - RDDIVTEF - DDCSG + TOTALQUO - SDD - APERPVTEF - APERPCTEF), 0)


APERPPTEFRFR = 1 - V_CNR * max(min(RPERPP, RBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - RFACCTEFRFR - RDDIVTEFRFR - DDCSG + TOTALQUO - SDD - APERPVTEFRFR - APERPCTEFRFR), 0)


RRBGTEF = TEFFREV - DAR * 1 - positif(RE168 + TAX1649) + positif(RE168 + TAX1649) * RE168 + TAX1649


RRBGTEFRFR = TEFFREVRFR - DAR * 1 - positif(RE168 + TAX1649) + positif(RE168 + TAX1649) * RE168 + TAX1649


NUREPARTEF = min(NUPROPT, max(0, min(PLAF_NUREPAR, RRBGTEF - RPALETEF - RPALPTEF - RFACCTEF - RDDIVTEF - APERPVTEF - APERPCTEF - APERPPTEF - DDCSG + TOTALQUO - SDD))) * 1 - V_CNR


NUREPARTEFRFR = min(NUPROPT, max(0, min(PLAF_NUREPAR, RRBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - RFACCTEFRFR - RDDIVTEFRFR - APERPVTEFRFR - APERPCTEFRFR - APERPPTEFRFR - DDCSG + TOTALQUO - SDD))) * 1 - V_CNR


RBG2TEF = RBGTEF - max(0, min(RBGTEF, DDCSG))


RBG2TEFRFR = RBGTEFRFR - max(0, min(RBGTEFRFR, DDCSG))


RBLTEF = RBG2TEF - max(0, min(RBG2TEF, DPA + DFA + DEDIV + APERPVTEF + APERPCTEF + APERPPTEF + NUREPARTEF)) * 1 - V_CNR - min(RBG2TEF, V_8ZT) * V_CR2 * 1 - positif(RE168 + TAX1649)


RBLTEFRFR = RBG2TEFRFR - max(0, min(RBG2TEFRFR, DPA + DFA + DEDIV + APERPVTEFRFR + APERPCTEFRFR + APERPPTEFRFR + NUREPARTEFRFR)) * 1 - V_CNR - min(RBG2TEFRFR, V_8ZT) * V_CR2 * 1 - positif(RE168 + TAX1649)


RNGTEF = null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * IPVLOC + 1 - null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * RBLTEF


RNGTEFRFR = null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * IPVLOC + 1 - null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * RBLTEFRFR


NABTEF = min(max(LIM_ABTRNGDBL + 1 - RNGTEF + TOTALQUO - SDD - SDC, 0), 1) + min(max(LIM_ABTRNGSIMP + 1 - RNGTEF + TOTALQUO - SDD - SDC, 0), 1)


NABTEFRFR = min(max(LIM_ABTRNGDBL + 1 - RNGTEFRFR + TOTALQUO - SDD - SDC, 0), 1) + min(max(LIM_ABTRNGSIMP + 1 - RNGTEFRFR + TOTALQUO - SDD - SDC, 0), 1)


ABTPATEF = NDA * NABTEF * ABAT_UNVIEUX * 1 - V_CNR


ABTPATEFRFR = NDA * NABTEFRFR * ABAT_UNVIEUX * 1 - V_CNR


TEFFREVINTER = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + PVBAR + max(BANOR, 0) + REB + min(BANOR, 0) * positif(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649 - DAR


TEFFREVTOT = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + BPVRCM + PVTAXSB + PVIMPOS * null(1 - FLAG_EXIT) + COD3VE + PVIMPOS + PVSURSI * null(2 - FLAG_EXIT) + max(BANOR, 0) + REB + min(BANOR, 0) * positif(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649 - DAR - max(0, min(TEFFREVINTER, DPA + DFA + DEDIV + APERPVTEF + APERPCTEF + APERPPTEF + NUREPARTEF + ABTPATEF + ABTMA + DDCSG))


TEFFREVTOTRFR = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + PVBAR + max(BANOR, 0) + REB + min(BANOR, 0) * positif(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649 - DAR - max(0, min(TEFFREVINTER, DPA + DFA + DEDIV + APERPVTEFRFR + APERPCTEFRFR + APERPPTEFRFR + NUREPARTEFRFR + ABTPATEFRFR + ABTMA + DDCSG))


TEFFREVTOTRFRHR = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + PVBARHR + max(BANOR, 0) + REB + min(BANOR, 0) * positif(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649 - DAR - max(0, min(TEFFREVINTER, DPA + DFA + DEDIV + APERPVTEFRFR + APERPCTEFRFR + APERPPTEFRFR + NUREPARTEFRFR + ABTPATEFRFR + ABTMA + DDCSG))
