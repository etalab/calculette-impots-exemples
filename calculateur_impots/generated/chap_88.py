# -*- coding: utf-8 -*-
# flake8: noqa


# WARNING: This file is automatically generated by a script. No not modify it by hand!

# Original files are "chap-88.json" and "chap-88.m"


GLDOMAVDAJV = max(CODDAJ - ABDOMDAJ, 0) * INDEFTSV


GLDOMAVEAJV = max(CODEAJ - ABDOMEAJ, 0) * INDEFTSV


GLDOMAVDBJC = max(CODDBJ - ABDOMDBJ, 0) * INDEFTSC


GLDOMAVEBJC = max(CODEBJ - ABDOMEBJ, 0) * INDEFTSC


GLN1V = max(GLD1V - ABGL1V, 0) * INDEFTSV


GLN2V = max(GLD2V - ABGL2V, 0) * INDEFTSV


GLN3V = max(GLD3V - ABGL3V, 0) * INDEFTSV


GLN4DAJV = max(CODDAJ - ABDOMDAJ, 0) * INDEFTSV


GLN4V = max(CODDAJ - ABDOMDAJ, 0) + max(CODEAJ - ABDOMEAJ, 0) * INDEFTSV


GLN1C = max(GLD1C - ABGL1C, 0) * INDEFTSC


GLN2C = max(GLD2C - ABGL2C, 0) * INDEFTSC


GLN3C = max(GLD3C - ABGL3C, 0) * INDEFTSC


GLN4DBJC = max(CODDBJ - ABDOMDBJ, 0) * INDEFTSC


GLN4C = max(CODDBJ - ABDOMDBJ, 0) + max(CODEBJ - ABDOMEBJ, 0) * INDEFTSC


def GLNAV(i, x):
    if i in ('V', 'C') or x in interval(1, 3):
        return max(GLD(x, i) - ABGL(x, i), 0) * INDEFTSi
    else:
        raise NotImplementedError()

TSV = TSNV - somme((max(0, GLD(x)V - ABGL(x)V) for x in interval(1, 3))) - max(CODDAJ - ABDOMDAJ, 0) - max(CODEAJ - ABDOMEAJ, 0)


TSC = TSNC - somme((max(0, GLD(x)C - ABGL(x)C) for x in interval(1, 3))) - max(CODDBJ - ABDOMDBJ, 0) - max(CODEBJ - ABDOMEBJ, 0)


TSNN2VAFF = positif(TSV) * positif(CARTSV + REMPLAV) * arr(TSV * __2TSNV / EXTSV) + 1 - positif(CARTSV + REMPLAV) * TSV - TSNNV + positif(CODDAJ + CODEAJ) * max(CODDAJ - ABDOMDAJ, 0) + max(CODEAJ - ABDOMEAJ, 0)


TSNN2CAFF = positif(TSC) * positif(CARTSC + REMPLAC) * arr(TSC * __2TSNC / EXTSC) + 1 - positif(CARTSC + REMPLAC) * TSC - TSNNC + positif(CODDBJ + CODEBJ) * max(CODDBJ - ABDOMDBJ, 0) + max(CODEBJ - ABDOMEBJ, 0)


TSNN2PAFF = somme((TSNN2(i)AFF for i in interval(1, 4)))


def TS(i):
    if i in interval(1, 4):
        return TSN(i)
    else:
        raise NotImplementedError()


def TPR(i):
    if i in ('V', 'C'):
        return TSN(i) + PRN(i) - somme((GLN(x)(i) for x in interval(1, 3)))
    elif i in interval(1, 4):
        return TSN(i) + PRN(i)
    else:
        raise NotImplementedError()


def TSNN2AFF(i):
    if i in interval(1, 4):
        return positif(TS(i)) * positif(CARTSP(i) + REMPLAP(i)) * arr(TS(i) * __2TSN(i) / EXTS(i)) + 1 - positif(CARTSP(i) + REMPLAP(i)) * TS(i) - TSNN(i)
    else:
        raise NotImplementedError()


def TSNN2(i):
    if i in ('V', 'C'):
        return positif(TS(i)) * positif(CARTS(i) + REMPLA(i)) * arr(TS(i) * __2TSN(i) / EXTS(i)) + 1 - positif(CARTS(i) + REMPLA(i)) * TS(i) - TSNN(i)
    elif i in interval(1, 4):
        return positif(TS(i)) * positif(CARTSP(i) + REMPLAP(i)) * arr(TS(i) * __2TSN(i) / EXTS(i)) + 1 - positif(CARTSP(i) + REMPLAP(i)) * TS(i) - TSNN(i)
    else:
        raise NotImplementedError()


def TSNN2TS(i):
    if i in ('V', 'C'):
        return positif(TS(i)) * positif(REMPLA(i)) * arr(TS(i) * CARTS(i) / EXTS(i)) + 1 - positif(REMPLA(i)) * TS(i) - TSNN(i)
    elif i in interval(1, 4):
        return positif(TS(i)) * positif(REMPLAP(i)) * arr(TS(i) * CARTSP(i) / EXTS(i)) + 1 - positif(REMPLAP(i)) * TS(i) - TSNN(i)
    else:
        raise NotImplementedError()


def TSNN2REMP(i):
    if i in ('V', 'C'):
        return positif(TS(i)) * TS(i) - TSNN(i) - TSNN2TS(i)
    elif i in interval(1, 4):
        return positif(TS(i)) * TS(i) - TSNN(i) - TSNN2TS(i)
    else:
        raise NotImplementedError()


def TSNN(i):
    if i in ('V', 'C'):
        return positif(TS(i)) * arr(TS(i) * TSBN(i) + BPCOSA(i) + GLDGRAT(i) / EXTS(i)) + 1 - positif(TS(i)) * TS(i)
    elif i in interval(1, 4):
        return positif(TS(i)) * arr(TS(i) * TSBN(i) / EXTS(i)) + 1 - positif(TS(i)) * TS(i)
    else:
        raise NotImplementedError()

PRR2V = positif(PEBFV + PENSALV + CODRAZ) * arr(PRNV * CARPEV / EXPRV) + 1 - positif(PEBFV + PENSALV + CODRAZ) * PRNV - PRRV


PRR2C = positif(PEBFC + PENSALC + CODRBZ) * arr(PRNC * CARPEC / EXPRC) + 1 - positif(PEBFC + PENSALC + CODRBZ) * PRNC - PRRC


PRR21 = positif(PEBF1 + PENSALP1 + CODRCZ) * arr(PRN1 * CARPEP1 / EXPR1) + 1 - positif(PEBF1 + PENSALP1 + CODRCZ) * PRN1 - PRR1


PRR22 = positif(PEBF2 + PENSALP2 + CODRDZ) * arr(PRN2 * CARPEP2 / EXPR2) + 1 - positif(PEBF2 + PENSALP2 + CODRDZ) * PRN2 - PRR2


PRR23 = positif(PEBF3 + PENSALP3 + CODREZ) * arr(PRN3 * CARPEP3 / EXPR3) + 1 - positif(PEBF3 + PENSALP3 + CODREZ) * PRN3 - PRR3


PRR24 = positif(PEBF4 + PENSALP4 + CODRFZ) * arr(PRN4 * CARPEP4 / EXPR4) + 1 - positif(PEBF4 + PENSALP4 + CODRFZ) * PRN4 - PRR4


PRR2ZV = positif(PEBFV + PENSALV) * arr(PRNV * CODRAZ / EXPRV) + 1 - positif(PEBFV + PENSALV) * PRNV - PRRV - PRR2V


PRR2ZC = positif(PEBFC + PENSALC) * arr(PRNC * CODRBZ / EXPRC) + 1 - positif(PEBFC + PENSALC) * PRNC - PRRC - PRR2C


PRR2Z1 = positif(PEBF1 + PENSALP1) * arr(PRN1 * CODRCZ / EXPR1) + 1 - positif(PEBF1 + PENSALP1) * PRN1 - PRR1 - PRR21


PRR2Z2 = positif(PEBF2 + PENSALP2) * arr(PRN2 * CODRDZ / EXPR2) + 1 - positif(PEBF2 + PENSALP2) * PRN2 - PRR2 - PRR22


PRR2Z3 = positif(PEBF3 + PENSALP3) * arr(PRN3 * CODREZ / EXPR3) + 1 - positif(PEBF3 + PENSALP3) * PRN3 - PRR3 - PRR23


PRR2Z4 = positif(PEBF4 + PENSALP4) * arr(PRN4 * CODRFZ / EXPR4) + 1 - positif(PEBF4 + PENSALP4) * PRN4 - PRR4 - PRR24


PRR2ZP = PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4


def PENALIM(i):
    if i in ('V', 'C'):
        return positif(EXPR(i)) * PRN(i) - PRR(i) - PRR2(i) - PRR2Z(i) - PENF(i)
    elif i in interval(1, 4):
        return positif(EXPR(i)) * PRN(i) - PRR(i) - PRR2(i) - PRR2Z(i) - PENF(i)
    else:
        raise NotImplementedError()


def PRR(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return arr(PRN(i) * PRB(i) / EXPR(i))
    else:
        raise NotImplementedError()


def PENF(i):
    if i in ('V', 'C'):
        return positif(PENSAL(i)) * arr(PRN(i) * PEBF(i) / EXPR(i)) + 1 - positif(PENSAL(i)) * max(0, PRN(i) - PRR(i) - PRR2(i) - PRR2Z(i))
    elif i in interval(1, 4):
        return positif(PENSALP(i)) * arr(PRN(i) * PEBF(i) / EXPR(i)) + 1 - positif(PENSALP(i)) * PRN(i) - PRR(i) - PRR2(i) - PRR2Z(i)
    else:
        raise NotImplementedError()

RVTOT = RV1 + RV2 + RV3 + RV4


def RV(i):
    if i in (1, 2, 3, 4):
        return arr(RVB(i) * TXRVT(i) / 100)
    else:
        raise NotImplementedError()

__2RV1 = arr(RENTAX * TXRVT1 / 100)


__2RV2 = arr(RENTAX5 * TXRVT2 / 100)


__2RV3 = arr(RENTAX6 * TXRVT3 / 100)


__2RV4 = arr(RENTAX7 * TXRVT4 / 100)


T2RV = __2RV1 + __2RV2 + __2RV3 + __2RV4

RVBCSG = arr(RVB1 + RENTAX * TXRVT1 / 100) + arr(RVB2 + RENTAX5 * TXRVT2 / 100) + arr(RVB3 + RENTAX6 * TXRVT3 / 100) + arr(RVB4 + RENTAX7 * TXRVT4 / 100)

TSPR = TSPRT + RVTOT

TSPRP = somme((TSPR(i) for i in interval(1, 4))) * 1 - PREM8_11 + max(0, TSNN1 + PRR1 + TSNN2 + PRR2 + TSNN3 + PRR3 + TSNN4 + PRR4) * PREM8_11


TSPRTOT = somme((TSPR(i) for i in ('V', 'C') or i in interval(1, 4))) * 1 - ART1731BIS + max(0, TSNNV + PRRV + TSNNC + PRRC + TSNN1 + PRR1 + TSNN2 + PRR2 + TSNN3 + PRR3 + TSNN4 + PRR4) * ART1731BIS


TSPRDP = somme((TSPRD(i) for i in interval(1, 4)))


TSNNT = abs(TSNNV + PRRV + TSNNC + PRRC + TSNN1 + PRR1 + TSNN2 + PRR2 + TSNN3 + PRR3 + TSNN4 + PRR4) * 1 - positif(TSNNV + PRRV + TSNNC + PRRC + TSNN1 + PRR1 + TSNN2 + PRR2 + TSNN3 + PRR3 + TSNN4 + PRR4)


def TSPRD(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return min(0, TSNN(i) + PRR(i)) * ART1731BIS
    else:
        raise NotImplementedError()


def TSPR(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return TSNN(i) + PRR(i) * 1 - PREM8_11 + max(0, TSNN(i) + PRR(i)) * PREM8_11
    else:
        raise NotImplementedError()

def FRNRETENU(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return max(0, FRNRET(i) + TSPRD(i))
    else:
        raise NotImplementedError()

TSNN2P = somme((TSNN2(i) for i in interval(1, 4)))


PRR2P = somme((PRR2(i) for i in interval(1, 4)))


PENFP = PENF1 + PENF2 + PENF3 + PENF4


PENALIMP = PENALIM1 + PENALIM2 + PENALIM3 + PENALIM4

TSQVO = __2TSNV + CODDAJ + CODEAJ


TSQCJ = __2TSNC + CODDBJ + CODEBJ


TSQPC = somme((__2TSN(i) for i in interval(1, 4)))


PRQVO = CARPEV + PEBFV


PRQCJ = CARPEC + PEBFC


PRQPC = CARPEP1 + PEBF1 + CARPEP2 + PEBF2 + CARPEP3 + PEBF3 + CARPEP4 + PEBF4


PRQZV = CODRAZ


PRQZC = CODRBZ


PRQZP = CODRCZ + CODRDZ + CODREZ + CODRFZ


PENSALP = PENSALP1 + PENSALP2 + PENSALP3 + PENSALP4

PRQNV = __2PRBV


PRQNC = __2PRBC


PRQNP = somme((__2PRB(i) for i in interval(1, 4)))


PENSTOTV = PRR2V + PRR2ZV + PENALIMV


PENSTOTC = PRR2C + PRR2ZC + PENALIMC


PENSTOTP = PRR2P + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + PENALIMP

IPCAPTAXTOT = somme((IPCAPTAX(i) for i in ('V', 'C')))


def IPCAPTAX(i):
    if i in ('V', 'C'):
        return arr(BPCAPTAX(i) * T_PCAPTAX / 100)
    else:
        raise NotImplementedError()


def BPCAPTAX(i):
    if i in ('V', 'C'):
        return PCAPTAX(i) - arr(PCAPTAX(i) * TX_DEDPER / 100)
    else:
        raise NotImplementedError()

IPCAPTAXT = IPCAPTAXTOT - CICAP
