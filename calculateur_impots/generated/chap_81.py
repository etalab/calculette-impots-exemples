# -*- coding: utf-8 -*-
# flake8: noqa


# WARNING: This file is automatically generated by a script. No not modify it by hand!

# Original files are "chap-81.json" and "chap-81.m"


TSHALLOP = TSHALLO1 + TSHALLO2 + TSHALLO3 + TSHALLO4


ALLOP = ALLO1 + ALLO2 + ALLO3 + ALLO4


TSBNP = TSHALLOP + ALLOP


EXTSV = TSBNV + BPCOSAV + GLDGRATV + __2TSNV


EXTSC = TSBNC + BPCOSAC + GLDGRATC + __2TSNC


GATASAV = BPCOSAV + GLDGRATV


GATASAC = BPCOSAC + GLDGRATC


TSBV = EXTSV + somme((GLD(x)V for x in interval(1, 3))) + CODDAJ + CODEAJ


TSBC = EXTSC + somme((GLD(x)C for x in interval(1, 3))) + CODDBJ + CODEBJ


TSBP = somme((TSB(i) for i in interval(1, 4)))


__2PRBV = CARPEV + PENSALV + CODRAZ


__2PRBC = CARPEC + PENSALC + CODRBZ


__2PRB1 = CARPEP1 + PENSALP1 + CODRCZ


__2PRB2 = CARPEP2 + PENSALP2 + CODRDZ


__2PRB3 = CARPEP3 + PENSALP3 + CODREZ


__2PRB4 = CARPEP4 + PENSALP4 + CODRFZ


def EXTS(i):
    if i in interval(1, 4):
        return TSBN(i) + __2TSN(i)
    else:
        raise NotImplementedError()


def PRB(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return PRBR(i) + PALI(i) + PENIN(i)
    else:
        raise NotImplementedError()


def 2TSN(i):
    if i in ('V', 'C'):
        return CARTS(i) + REMPLA(i)
    elif i in (1, 2, 3, 4):
        return CARTSP(i) + REMPLAP(i)
    else:
        raise NotImplementedError()


def TSBN(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return TSHALLO(i) + ALLO(i)
    else:
        raise NotImplementedError()


def EXPR(i):
    if i in ('V', 'C'):
        return PRB(i) + __2PRB(i) + PEBF(i)
    elif i in interval(1, 4):
        return PRB(i) + __2PRB(i) + PEBF(i)
    else:
        raise NotImplementedError()


def EXSPB(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return EXTS(i) + EXPR(i)
    else:
        raise NotImplementedError()


def TSB(i):
    if i in (1, 2, 3, 4):
        return EXTS(i)
    else:
        raise NotImplementedError()

def DFN(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return min(PLAF_DEDFORFTS, TPS10(i))
    else:
        raise NotImplementedError()


def TPS10(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return arr(TSB(i) * TX_DEDFORFTS / 100)
    else:
        raise NotImplementedError()


def PDFN(i):
    if i in ('V', 'C', 'P'):
        return min(PLAF_DEDFORFTS, PTPS10(i))
    else:
        raise NotImplementedError()


def PTPS10(i):
    if i in ('V', 'C', 'P'):
        return arr(PERPSAL(i) * TX_DEDFORFTS / 100)
    else:
        raise NotImplementedError()

PDEDMINP = positif(DETS1) * MIN_DEMEMPLOI + 1 - positif(DETS1) * MIN_DEDSFORFTS


def 10MINS(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return max(min(TSB(i), DEDMIN(i)), DFN(i))
    else:
        raise NotImplementedError()


def IND_10MIN_0(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return positif(DEDMIN(i) - DFN(i)) * positif(TSB(i))
    else:
        raise NotImplementedError()


def PDEDMIN(i):
    if i in ('V', 'C'):
        return DEDMIN(i)
    else:
        raise NotImplementedError()


def PIND_10MIN_0(i):
    if i in ('V', 'C', 'P'):
        return positif(PDEDMIN(i) - PDFN(i)) * positif(PERPSAL(i))
    else:
        raise NotImplementedError()


def DEDMIN(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return positif(DETS(i)) * MIN_DEMEMPLOI + 1 - positif(DETS(i)) * MIN_DEDSFORFTS
    else:
        raise NotImplementedError()


def P10MINS(i):
    if i in ('V', 'C', 'P'):
        return max(min(PERPSAL(i), PDEDMIN(i)), PDFN(i))
    else:
        raise NotImplementedError()


def IND_MIN(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return 1 - positif(IND_10MIN_0(i))
    else:
        raise NotImplementedError()


def PIND_MIN(i):
    if i in ('V', 'C', 'P'):
        return 1 - positif(PIND_10MIN_0(i))
    else:
        raise NotImplementedError()

FRNP = FRN1 + FRN2 + FRN3 + FRN4


__10MINSP = __10MINS1 + __10MINS2 + __10MINS3 + __10MINS4


FRDPROVV = TSBNV + PRV + PALIV - APRV


FRDPROVC = TSBNC + PRC + PALIC - APRC


FRDPROV1 = TSBN1 + PRBR1 + PALI1 - APR1


FRDPROV2 = TSBN2 + PRBR2 + PALI2 - APR2


FRDPROV3 = TSBN3 + PRBR3 + PALI3 - APR3


FRDPROV4 = TSBN4 + PRBR4 + PALI4 - APR4


FRDPROVP = FRDPROV1 + FRDPROV2 + FRDPROV3 + FRDPROV4


FRDP = 1 - positif(PREM8_11) * FRNP * positif(FRNP - __10MINSP) + null(4 - V_IND_TRAIT) * positif(PREM8_11) * min(FRNP, FRDPROVP) + null(5 - V_IND_TRAIT) * positif(PREM8_11) * min(FRNP, max(FRDPROVPP2, FRDPROVP1731))


FRD1 = 1 - positif(PREM8_11) * FRN1 * positif(FRN1 - __10MINS1) + null(4 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN1, FRDPROV1) * positif(FRN2 + FRN3 + FRN4) + positif(PREM8_11) * max(0, FRDP) * 1 - positif(FRN2 + FRN3 + FRN4) + null(5 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN1, min(FRDPROV1, max(FRDPROV1P2, FRDPROV11731))) * positif(FRN2 + FRN3 + FRN4) + positif(PREM8_11) * max(0, FRDP) * 1 - positif(FRN2 + FRN3 + FRN4)


FRD2 = 1 - positif(PREM8_11) * FRN2 * positif(FRN2 - __10MINS2) + null(4 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN2, FRDPROV2) * positif(FRN3 + FRN4) + positif(PREM8_11) * max(0, FRDP - FRD1) * 1 - positif(FRN3 + FRN4) + null(5 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN2, min(FRDPROV2, max(FRDPROV2P2, FRDPROV21731))) * positif(FRN3 + FRN4) + positif(PREM8_11) * max(0, FRDP - FRD1) * 1 - positif(FRN3 + FRN4)


FRD3 = 1 - positif(PREM8_11) * FRN3 * positif(FRN3 - __10MINS3) + null(4 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN3, FRDPROV3) * positif(FRN4) + positif(PREM8_11) * max(0, FRDP - FRD1 - FRD2) * 1 - positif(FRN4) + null(5 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN3, min(FRDPROV3, max(FRDPROV3P2, FRDPROV31731))) * positif(FRN4) + positif(PREM8_11) * max(0, FRDP - FRD1 - FRD2) * 1 - positif(FRN4)


FRD4 = max(0, FRDP - FRD1 - FRD2 - FRD3)


PFRDV = FRDV + COD1AE * positif(FRDV + COD1AE - P10MINSV)


PFRDC = FRDC + COD1BE * positif(FRDC + COD1BE - P10MINSC)


PFRDP = FRD1 + COD1CE * positif(FRD1 + COD1CE - P10MINSP)


PIND_10V = positif_ou_nul(P10MINSV - FRDV + COD1AE)


PIND_10C = positif_ou_nul(P10MINSC - FRDC + COD1BE)


PIND_10P = positif_ou_nul(P10MINSP - FRD1 + COD1CE)


ABTS1AJ = positif(TSHALLOV) * arr(REP10V * TSHALLOV / TSBV)


ABTS1AP = positif(ALLOV) * positif(BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * ALLOV / TSBV) + 1 - positif(BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTS1AJ)


ABTS3VJ = positif(BPCOSAV) * positif(GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * BPCOSAV / TSBV) + 1 - positif(GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTS1AJ - ABTS1AP)


ABTS1TT = positif(GLDGRATV) * positif(CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * GLDGRATV / TSBV) + 1 - positif(CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTS1AJ - ABTS1AP - ABTS3VJ)


ABTSRAJ = positif(CARTSV) * positif(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * CARTSV / TSBV) + 1 - positif(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTS1AJ - ABTS1AP - ABTS3VJ - ABTS1TT)


ABTSRAP = positif(REMPLAV) * positif(CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * REMPLAV / TSBV) + 1 - positif(CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTS1AJ - ABTS1AP - ABTS1TT - ABTS3VJ - ABTSRAJ)


ABTSV = ABTS1AJ + ABTS1AP + ABTS3VJ + ABTS1TT + ABTSRAJ + ABTSRAP


ABDOMDAJ = positif(CODDAJ) * positif(CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * CODDAJ / TSBV) + 1 - positif(CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTSV) + 0


ABDOMEAJ = positif(CODEAJ) * positif(GLD1V + GLD2V + GLD3V) * arr(REP10V * CODEAJ / TSBV) + 1 - positif(GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTSV - ABDOMDAJ) + 0


ABGL1V = positif(GLD1V) * positif(GLD2V + GLD3V) * arr(REP10V * GLD1V / TSBV) + 1 - positif(GLD2V + GLD3V) * max(0, REP10V - ABTSV - ABDOMDAJ - ABDOMEAJ) + 0


ABGL2V = positif(GLD2V) * positif(GLD3V) * arr(REP10V * GLD2V / TSBV) + 1 - positif(GLD3V) * max(0, REP10V - ABTSV - ABDOMDAJ - ABDOMEAJ - ABGL1V) + 0


ABGL3V = max(0, REP10V - ABTSV - ABDOMDAJ - ABDOMEAJ - ABGL1V - ABGL2V) + 0


ABTS1BJ = arr(REP10C * TSHALLOC / TSBC)


ABTS1BP = positif(ALLOC) * positif(BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * ALLOC / TSBC) + 1 - positif(BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTS1BJ)


ABTS3VK = positif(BPCOSAC) * positif(GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * BPCOSAC / TSBC) + 1 - positif(GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTS1BJ - ABTS1BP)


ABTS1UT = positif(GLDGRATC) * positif(CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * GLDGRATC / TSBC) + 1 - positif(CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTS1BJ - ABTS1BP - ABTS3VK)


ABTSRBJ = positif(CARTSC) * positif(REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * CARTSC / TSBC) + 1 - positif(REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTS1BJ - ABTS1BP - ABTS3VK - ABTS1UT)


ABTSRBP = positif(REMPLAC) * positif(CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * REMPLAC / TSBC) + 1 - positif(CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTS1BJ - ABTS1BP - ABTS3VK - ABTS1UT - ABTSRBJ)


ABTSC = ABTS1BJ + ABTS1BP + ABTS3VK + ABTS1UT + ABTSRBJ + ABTSRBP


ABDOMDBJ = positif(CODDBJ) * positif(CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * CODDBJ / TSBC) + 1 - positif(CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTSC) + 0


ABDOMEBJ = positif(CODEBJ) * positif(GLD1C + GLD2C + GLD3C) * arr(REP10C * CODEBJ / TSBC) + 1 - positif(GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTSC - ABDOMDBJ) + 0


ABGL1C = positif(GLD1C) * positif(GLD2C + GLD3C) * arr(REP10C * GLD1C / TSBC) + 1 - positif(GLD2C + GLD3C) * max(0, REP10C - ABTSC - ABDOMDBJ - ABDOMEBJ) + 0


ABGL2C = positif(GLD2C) * positif(GLD3C) * arr(REP10C * GLD2C / TSBC) + 1 - positif(GLD3C) * max(0, REP10C - ABTSC - ABDOMDBJ - ABDOMEBJ - ABGL1C) + 0


ABGL3C = max(0, REP10C - ABTSC - ABDOMDBJ - ABDOMEBJ - ABGL1C - ABGL2C) + 0


ABTS1CJ = arr(REP101 * TSHALLO1 / TSB1)


ABTS1CP = positif(ALLO1) * positif(CARTSP1 + REMPLAP1) * arr(REP101 * ALLO1 / TSB1) + 1 - positif(CARTSP1 + REMPLAP1) * max(0, REP101 - ABTS1CJ)


ABTSRCJ = positif(CARTSP1) * positif(REMPLAP1) * arr(REP101 * CARTSP1 / TSB1) + 1 - positif(REMPLAP1) * max(0, REP101 - ABTS1CJ - ABTS1CP)


ABTSRCP = max(0, REP101 - ABTS1CJ + ABTS1CP + ABTSRCJ) + 0


ABTS1DJ = arr(REP102 * TSHALLO2 / TSB2)


ABTS1DP = positif(ALLO2) * positif(CARTSP2 + REMPLAP2) * arr(REP102 * ALLO2 / TSB2) + 1 - positif(CARTSP2 + REMPLAP2) * max(0, REP102 - ABTS1DJ)


ABTSRDJ = positif(CARTSP2) * positif(REMPLAP2) * arr(REP102 * CARTSP2 / TSB2) + 1 - positif(REMPLAP2) * max(0, REP102 - ABTS1DJ - ABTS1DP)


ABTSRDP = max(0, REP102 - ABTS1DJ + ABTS1DP + ABTSRDJ) + 0


ABTS1EJ = arr(REP103 * TSHALLO3 / TSB3)


ABTS1EP = positif(ALLO3) * positif(CARTSP3 + REMPLAP3) * arr(REP103 * ALLO3 / TSB3) + 1 - positif(CARTSP3 + REMPLAP3) * max(0, REP103 - ABTS1EJ)


ABTSREJ = positif(CARTSP3) * positif(REMPLAP3) * arr(REP103 * CARTSP3 / TSB3) + 1 - positif(REMPLAP3) * max(0, REP103 - ABTS1EJ - ABTS1EP)


ABTSREP = max(0, REP103 - ABTS1EJ + ABTS1EP + ABTSREJ) + 0


ABTS1FJ = arr(REP104 * TSHALLO4 / TSB4)


ABTS1FP = positif(ALLO4) * positif(CARTSP4 + REMPLAP4) * arr(REP104 * ALLO4 / TSB4) + 1 - positif(CARTSP4 + REMPLAP4) * max(0, REP104 - ABTS1FJ)


ABTSRFJ = positif(CARTSP4) * positif(REMPLAP4) * arr(REP104 * CARTSP4 / TSB4) + 1 - positif(REMPLAP4) * max(0, REP104 - ABTS1FJ - ABTS1FP)


ABTSRFP = max(0, REP104 - ABTS1FJ + ABTS1FP + ABTSRFJ) + 0


def FPT(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return max(FRD(i), __10MINS(i))
    else:
        raise NotImplementedError()


def REP10(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return IND_10(i) * D10M(i) + 1 - IND_10(i) * FPT(i)
    else:
        raise NotImplementedError()


def FRD(i):
    if i in ('V', 'C'):
        return 1 - positif(PREM8_11) * FRN(i) * positif(FRN(i) - __10MINS(i)) + null(4 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN(i), FRDPROV(i)) + null(5 - V_IND_TRAIT) * positif(PREM8_11) * min(FRN(i), min(FRDPROV(i), max(FRDPROV(i)P2, FRDPROV(i)1731)))
    else:
        raise NotImplementedError()


def IND_10(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return positif_ou_nul(__10MINS(i) - FRD(i))
    else:
        raise NotImplementedError()


def PD10M(i):
    if i in ('V', 'C', 'P'):
        return PIND_MIN(i) * PDFN(i) + 1 - PIND_MIN(i) * P10MINS(i)
    else:
        raise NotImplementedError()


def FRDA(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return FRN(i) * positif(FRN(i) - __10MINS(i))
    else:
        raise NotImplementedError()


def PFPT(i):
    if i in ('V', 'C', 'P'):
        return max(PFRD(i), P10MINS(i))
    else:
        raise NotImplementedError()


def PREP10(i):
    if i in ('V', 'C', 'P'):
        return PIND_10(i) * PD10M(i) + 1 - PIND_10(i) * PFPT(i)
    else:
        raise NotImplementedError()


def D10M(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return IND_MIN(i) * DFN(i) + 1 - IND_MIN(i) * __10MINS(i)
    else:
        raise NotImplementedError()


def INDEFTS(i):
    if i in ('V', 'C') or i in interval(1, 4):
        return positif_ou_nul(TSB(i) - FRD(i))
    else:
        raise NotImplementedError()

ABGLTV = somme((ABGL(x)V for x in interval(1, 3))) + ABDOMDAJ + ABDOMEAJ


ABGLTC = somme((ABGL(x)C for x in interval(1, 3))) + ABDOMDBJ + ABDOMEBJ

TSN1AJ = TSHALLOV - ABTS1AJ


TSN1AP = ALLOV - ABTS1AP


TSN3VJ = BPCOSAV - ABTS3VJ


TSN1TT = GLDGRATV - ABTS1TT


TSNRAJ = CARTSV - ABTSRAJ


TSNRAP = REMPLAV - ABTSRAP


TSNDAJ = CODDAJ - ABDOMDAJ


TSNEAJ = CODEAJ - ABDOMEAJ


TSNGL1V = GLD1V - ABGL1V


TSNGL2V = GLD2V - ABGL2V


TSNGL3V = GLD3V - ABGL3V


TSN1BJ = TSHALLOC - ABTS1BJ


TSN1BP = ALLOC - ABTS1BP


TSN3VK = BPCOSAC - ABTS3VK


TSN1UT = GLDGRATC - ABTS1UT


TSNRBJ = CARTSC - ABTSRBJ


TSNRBP = REMPLAC - ABTSRBP


TSNDBJ = CODDBJ - ABDOMDBJ


TSNEBJ = CODEBJ - ABDOMEBJ


TSNGL1C = GLD1C - ABGL1C


TSNGL2C = GLD2C - ABGL2C


TSNGL3C = GLD3C - ABGL3C


TSN1CJ = TSHALLO1 - ABTS1CJ


TSN1CP = ALLO1 - ABTS1CP


TSNRCJ = CARTSP1 - ABTSRCJ


TSNRCP = REMPLAP1 - ABTSRCP


TSN1DJ = TSHALLO2 - ABTS1DJ


TSN1DP = ALLO2 - ABTS1DP


TSNRDJ = CARTSP2 - ABTSRDJ


TSNRDP = REMPLAP2 - ABTSRDP


TSN1EJ = TSHALLO3 - ABTS1EJ


TSN1EP = ALLO3 - ABTS1EP


TSNREJ = CARTSP3 - ABTSREJ


TSNREP = REMPLAP3 - ABTSREP


TSN1FJ = TSHALLO4 - ABTS1FJ


TSN1FP = ALLO4 - ABTS1FP


TSNRFJ = CARTSP4 - ABTSRFJ


TSNRFP = REMPLAP4 - ABTSRFP

PL_PB = arr(PLAF_DEDPRFOYER - somme((APB(i) * IND_APB(i) for i in ('V', 'C') or i in interval(1, 4))))


def PLR(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return min(MIN_DEDPR, EXPR(i))
    else:
        raise NotImplementedError()


def APB(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return max(PLR(i), EXPR(i) * TX_DEDPER / 100)
    else:
        raise NotImplementedError()


def IND_APB(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return positif_ou_nul(PLR(i) - EXPR(i) * TX_DEDPER / 100)
    else:
        raise NotImplementedError()

def ABPR(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return arr(1 - IND_APB(i) * min(APB(i), PL_PB * APB(i) / somme((APB(x) * 1 - IND_APB(x) for x in ('V', 'C') or x in interval(1, 4)))) + IND_APB(i) * APB(i))
    else:
        raise NotImplementedError()

APRV = IND_APBV * ABPRV + 1 - IND_APBV * min(ABPRV, PL_PB)


APRC = IND_APBC * ABPRC + 1 - IND_APBC * min(ABPRC, PL_PB - 1 - IND_APBV * APRV)


APR1 = IND_APB1 * ABPR1 + 1 - IND_APB1 * min(ABPR1, PL_PB - 1 - IND_APBV * APRV - 1 - IND_APBC * APRC)


APR2 = IND_APB2 * ABPR2 + 1 - IND_APB2 * min(ABPR2, PL_PB - 1 - IND_APBV * APRV - 1 - IND_APBC * APRC - 1 - IND_APB1 * APR1)


APR3 = IND_APB3 * ABPR3 + 1 - IND_APB3 * min(ABPR3, PL_PB - 1 - IND_APBV * APRV - 1 - IND_APBC * APRC - 1 - IND_APB1 * APR1 - 1 - IND_APB2 * APR2)


APR4 = IND_APB4 * ABPR4 + 1 - IND_APB4 * min(ABPR4, PL_PB - 1 - IND_APBV * APRV - 1 - IND_APBC * APRC - 1 - IND_APB1 * APR1 - 1 - IND_APB2 * APR2 - 1 - IND_APB3 * APR3)

PRNNP = PRNN1 + PRNN2 + PRNN3 + PRNN4


def PRNN(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return EXPR(i) - APR(i)
    else:
        raise NotImplementedError()

TSNTV = TSN1AJ + TSN1AP + TSN3VJ + TSN1TT + TSNRAJ + TSNRAP + TSNDAJ + TSNEAJ + TSNGL1V + TSNGL2V + TSNGL3V


TSNTC = TSN1BJ + TSN1BP + TSN3VK + TSN1UT + TSNRBJ + TSNRBP + TSNDBJ + TSNEBJ + TSNGL1C + TSNGL2C + TSNGL3C


TSNT1 = TSN1CJ + TSN1CP + TSNRCJ + TSNRCP


TSNT2 = TSN1DJ + TSN1DP + TSNRDJ + TSNRDP


TSNT3 = TSN1EJ + TSN1EP + TSNREJ + TSNREP


TSNT4 = TSN1FJ + TSN1FP + TSNRFJ + TSNRFP

FRDVREP = positif(ART1731BIS) * max(0, FRNV - FRDV) * null(IND_10V) + max(0, FRNV1731 - __10MINSV) * IND_10V * positif(FRNV1731)


FRDCREP = positif(ART1731BIS) * max(0, FRNC - FRDC) * null(IND_10C) + max(0, FRNC1731 - __10MINSC) * IND_10C * positif(FRNC1731)


FRD1REP = positif(ART1731BIS) * max(0, max(0, FRN1 - FRD1) - PRN1 * 1 - positif(FRN1 - FRD1) * null(IND_101) + max(0, FRN2 - FRD2) - PRN2 * 1 - positif(FRN2 - FRD2) * null(IND_102) + max(0, FRN3 - FRD3) - PRN3 * 1 - positif(FRN3 - FRD3) * null(IND_103) + max(0, FRN4 - FRD4) - PRN4 * 1 - positif(FRN4 - FRD4) * null(IND_104) + max(0, FRN11731 - __10MINS1) * IND_101 * positif(FRN11731) + max(0, FRN21731 - __10MINS2) * IND_102 * positif(FRN21731) + max(0, FRN31731 - __10MINS3) * IND_103 * positif(FRN31731) + max(0, FRN41731 - __10MINS4) * IND_104 * positif(FRN41731))


FRDREPTOT = positif(ART1731BIS) * FRDAV - FRDV + FRDAC - FRDC + FRDA1 - FRD1 + FRDA2 - FRD2 + FRDA3 - FRD3 + FRDA4 - FRD4


def TSN(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return positif(TSNT(i)) * min(0, TSNT(i) + PRNN(i)) + positif_ou_nul(TSNT(i)) * TSNT(i)
    else:
        raise NotImplementedError()


def PRN(i):
    if i in (1, 2, 3, 4, 'V', 'C'):
        return positif(TSNT(i)) * positif(TSNT(i) + PRNN(i)) * TSNT(i) + PRNN(i) + positif_ou_nul(TSNT(i)) * PRNN(i)
    else:
        raise NotImplementedError()
