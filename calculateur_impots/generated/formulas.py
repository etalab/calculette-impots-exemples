# -*- coding: utf-8 -*-
# flake8: noqa
# WARNING: This file is automatically generated by a script. No not modify it by hand!

APATNAT1 = PATNAT1 * 1 - ART1731BIS + min(PATNAT1, max(APATNAT1_P + APATNAT1P2, APATNAT11731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
SPEDREPP = BNCPRODEP - BNCPRO1AP * is_positive(BNCPRODEP - BNCPRO1AP) - BNCNP1AP - BNCNPDEP * is_positive(BNCNP1AP - BNCNPDEP) * is_positive(BNCPRODEP - BNCPRO1AP * is_positive(BNCPRODEP - BNCPRO1AP) - BNCNP1AP - BNCNPDEP * is_positive(BNCNP1AP - BNCNPDEP))
ZIGRDANT = is_positive(V_RDANT) * TYPE2 * 1 - APPLI_OCEANS
INDC = positif_ou_nul(is_positive(ALLOC) + is_positive(REMPLAC) + is_positive(REMPLANBC) + is_positive(BACDEC) + is_positive(BACREC) + is_positive(_4BACREC) + is_positive(_4BAHREC) + is_positive(BAFC) + is_positive(ANOVEP) + is_positive(DNOCEPC) + is_positive(BAFPVC) + is_positive(BAHDEC) + is_positive(BAHREC) + is_positive(BICDEC) + is_positive(BICDNC) + is_positive(BICHDEC) + is_positive(BICHREC) + is_positive(BICNOC) + is_positive(BICREC) + is_positive(BIHDNC) + is_positive(BIHNOC) + is_positive(BNCAADC) + is_positive(BNCAABC) + is_positive(BNCDEC) + is_positive(BNCNPC) + is_positive(BNCNPPVC) + is_positive(BNCPROC) + is_positive(BNCPROPVC) + is_positive(BNCREC) + is_positive(BNHDEC) + is_positive(BNHREC) + is_positive(BPCOSAC) + is_positive(CARPEC) + is_positive(CARPENBAC) + is_positive(CARTSC) + is_positive(CARTSNBAC) + is_positive(COTFC) + is_positive(DETSC) + is_positive(FRNC) + is_positive(GLD1C) + is_positive(GLD2C) + is_positive(GLD3C) + is_positive(GLDGRATC) + is_positive(MIBNPPRESC) + is_positive(MIBNPPVC) + is_positive(MIBNPVENC) + is_positive(MIBPRESC) + is_positive(MIBPVC) + is_positive(MIBVENC) + is_positive(PALIC) + is_positive(PENSALC) + is_positive(PENSALNBC) + is_positive(PEBFC) + is_positive(PRBRC) + is_positive(TSHALLOC) + is_positive(BAFORESTC) + is_positive(LOCPROCGAC) + is_positive(LOCPROC) + is_positive(LOCNPCGAC) + is_positive(LOCNPC) + is_positive(LOCDEFNPCGAC) + is_positive(LOCDEFNPC) + is_positive(MIBMEUC) + is_positive(MIBGITEC) + is_positive(BICPMVCTC) + is_positive(BNCPMVCTC) + is_positive(LOCGITC) + is_positive(PENINC) + is_positive(CODRBZ) + is_positive(CODDBJ) + is_positive(CODEBJ))
IND_SPR = is_positive(sum([present(PRB1) + present(TSBN1) + present(FRN1), present(PRB2) + present(TSBN2) + present(FRN2), present(PRB3) + present(TSBN3) + present(FRN3), present(PRB4) + present(TSBN4) + present(FRN4), present(PRBV) + present(TSBNV) + present(FRNV), present(PRBC) + present(TSBNC) + present(FRNC)]) + sum([present(GLD1V), present(GLD2V), present(GLD1C), present(GLD2C)]) + sum([present(_2TSN1) + present(_2PRB1), present(_2TSN2) + present(_2PRB2), present(_2TSN3) + present(_2PRB3), present(_2TSN4) + present(_2PRB4), present(_2TSNV) + present(_2PRBV), present(_2TSNC) + present(_2PRBC), present(_3TSN1) + present(_3PRB1), present(_3TSN2) + present(_3PRB2), present(_3TSN3) + present(_3PRB3), present(_3TSN4) + present(_3PRB4), present(_3TSNV) + present(_3PRBV), present(_3TSNC) + present(_3PRBC), present(_4TSN1) + present(_4PRB1), present(_4TSN2) + present(_4PRB2), present(_4TSN3) + present(_4PRB3), present(_4TSN4) + present(_4PRB4), present(_4TSNV) + present(_4PRBV), present(_4TSNC) + present(_4PRBC)]))
BCEL_JBGL = arr(min(CELLIERJB + CELLIERJG + CELLIERJL + 0, LIMCELLIER) / 9)
DRTNC = RCMTNC + REVPEA
# TODO MAJOLOYTARDIF_P
BCVNSAL = CVNSALAV + CVNSALAC + GLDGRATV + GLDGRATC * 1 - is_positive(present(TAX1649) + present(RE168))
# TODO PCAPDEG
_2RCMRABD = arr(REVACT * 40 / 100)
HRBTRFR1 = V_BTRFRHR1 * 1 - positif_ou_nul(RFRH1) + RFRH1
PERPPLAFNUP3ANT = present(PERPPLAFNUP3) * PERPPLAFNUP3 + 1 - present(PERPPLAFNUP3) * V_BTPERPNUP3
ACELREPYC = CELREPYC * 1 - ART1731BIS + min(CELREPYC, max(ACELREPYC_P + ACELREPYCP2, ACELREPYC1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PPENEXOC = null(PPETPC + 0) + is_positive(TSHALLOC + 0) + is_positive(SALEXTC + 0) + 4 * is_positive(PPENHC + 0) + 8 * is_positive(PPEXTC + 0)
MIB_NETNPCT = MIBNPPVV + MIBNPPVC + MIBNPPVP - MIBNPDCT
PPENEXO4 = null(PPETPP4 + 0) + is_positive(TSHALLO4 + 0) + is_positive(SALEXT4 + 0) + 4 * is_positive(PPENHP4 + 0) + 8 * is_positive(PPEXT4 + 0)
# TODO MAJOPSTARDIF_R
BNCAFFV = is_positive(present(BNHREV) + present(BNCREV) + present(BNHDEV) + present(BNCDEV))
PVBAR = max(0, BPVRCM + COD3SG + COD3SL + ABDETPLUS + ABIMPPV + inf(CODRVG / CODNVG) - DPVRCM + COD3SH + COD3SM + ABDETMOINS + ABIMPMV)
TOTIRPSANT = V_IRPSANT - V_NONMERANT + V_NONRESTANT - V_ANTRE
REPENT4 = INVOMENTMN + RETROCOMMB + RETROCOMMC + RETROCOMLH + RETROCOMLI + INVOMENTKT + INVOMENTKU
# TODO CIRDSAC
TTSBN4 = TSHALLO4 + ALLO4 + max(0, SALEXT4 - COD1FD)
INDCODDAJ = is_positive(present(CODDAJ) + present(CODDBJ) + present(CODEAJ) + present(CODEBJ))
MAJTXCHR4 = is_positive(is_positive(is_positive(MAJOHR03) + is_positive(MAJOHR30) + is_positive(MAJOHR55)) * is_positive(is_positive(MAJOHR04) + is_positive(MAJOHR05) + is_positive(MAJOHR32)) + is_positive(is_positive(MAJOHR03) + is_positive(MAJOHR30) + is_positive(MAJOHR55)) * is_positive(MAJOHR06) + is_positive(is_positive(MAJOHR04) + is_positive(MAJOHR05) + is_positive(MAJOHR32)) * is_positive(MAJOHR06)) * -1 + is_positive(is_positive(MAJOHR03) + is_positive(MAJOHR30) + is_positive(MAJOHR55)) * 1 - is_positive(is_positive(MAJOHR04) + is_positive(MAJOHR05) + is_positive(MAJOHR06) + is_positive(MAJOHR32)) * 40 + is_positive(is_positive(MAJOHR04) + is_positive(MAJOHR05) + is_positive(MAJOHR32)) * 1 - is_positive(is_positive(MAJOHR03) + is_positive(MAJOHR30) + is_positive(MAJOHR55) + is_positive(MAJOHR06)) * 80 + is_positive(MAJOHR06) * 1 - is_positive(is_positive(MAJOHR03) + is_positive(MAJOHR04) + is_positive(MAJOHR05) + is_positive(MAJOHR30) + is_positive(MAJOHR32) + is_positive(MAJOHR55)) * 100
ZIPQPRRZ1TOT = sum([ZIPQPRRZV1, ZIPQPRRZC1, ZIPQPRRZ11, ZIPQPRRZ21, ZIPQPRRZ31, ZIPQPRRZ41])
SOMDEFBNC = BNCDEV + BNHDEV + BNCDEC + BNHDEC + BNCDEP + BNHDEP
NPLOCV = min(0, LOCNPV + LOCGITHCV - LOCDEFNPV * 1 - is_positive(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFNPV * 1 - is_positive(ART1731BIS * PREM8_11) - LOCNPV - LOCGITHCV) + arr(max(0, LOCNPV + LOCGITHCV - LOCDEFNPV * 1 - is_positive(ART1731BIS * PREM8_11)) * MAJREV) * is_positive(LOCNPV + LOCGITHCV - LOCDEFNPV * 1 - is_positive(ART1731BIS * PREM8_11))
PPE_NB_PAC = V_0CF + V_0CR + V_0DJ + V_0DN
BCEL_HNO = arr(min(CELLIERHN + CELLIERHO + 0, LIMCELLIER) / 9)
# TODO TEFFREVTOT3
PPENBHC = PPENHC + PPEXTC
TMIB_PRESAV = min(MIBPRESV + MIBNPPRESV, max(MIN_MBIC, arr(MIBPRESV + MIBNPPRESV * TX_MIBPRES / 100)))
HONODECV = XHONOV + XHONOAAV
BNCCREAP = BNCCRP + BNCCRFP
LIGSUP = is_positive(null(V_NOTRAIT - 26) + null(V_NOTRAIT - 36) + null(V_NOTRAIT - 46) + null(V_NOTRAIT - 56) + null(V_NOTRAIT - 66))
LIG134P = is_positive(present(BAFP) + present(BAHREP) + present(BAHDEP) + present(BACREP) + present(BACDEP) + present(BAFPVP) + present(BAFORESTP))
TPMIB_AVC = min(MIBVENC + AUTOBICVC, max(MIN_MBIC, arr(MIBVENC + AUTOBICVC * TX_MIBVEN / 100)))
TTSBNV = TSHALLOV + ALLOV + max(0, SALEXTV - COD1AD)
T2PRBC = CARPEC + PENSALC + CODRBZ
BASSURV3 = max(0, CESSASSV - LIM_ASSUR3)
TOTDLMRN = sum([DLMRN1, DLMRN2, DLMRN3, DLMRN4, DLMRN5, DLMRN6])
REI = IPREP + IPPRICORSE
BIPTAV = BICNOV - BICDNV * 1 - is_positive(ART1731BIS * PREM8_11)
TDEDMIN2 = is_positive(DETS2) * MIN_DEMEMPLOI + 1 - is_positive(DETS2) * MIN_DEDSFORFTS
MIB_TPRESV = MIBPRESV + MIBNPPRESV + MIBMEUV
# TODO RIDOMPRO
VARRMOND = RMOND + max(0, DEFZU * is_positive(SOMMEMOND_2) * 1 - PREM8_11 + DEFZU * PREM8_11 - DMOND) * is_positive(present(RMOND) + present(DMOND))
T2PRB2 = CARPEP2 + PENSALP2 + CODRDZ
BNNAAP = BNCAABP - BNCAADP * 1 - is_positive(ART1731BIS * PREM8_11)
XACCESS = sum([XACCESSV, XACCESSC, XACCESSP])
BOOLENF = is_positive(V_0CF + V_0CH + V_0DJ + V_0CR + 0)
PS_R1649 = R1649
XBICHDP = BICEXP + BICNOP
TXPF1728CDIS = 10 if (V_CODPF1728CDIS == 7 or V_CODPF1728CDIS == 10 or V_CODPF1728CDIS == 17 or V_CODPF1728CDIS == 18) else (40 if (V_CODPF1728CDIS == 8 or V_CODPF1728CDIS == 11) else (80 if (V_CODPF1728CDIS == 31) else 0))
XBICNETP = XBICHDP - BICDNP * 1 - is_positive(ART1731BIS)
NOCEPP = ANOPEP - DNOCEPP + BNCAABP - BNCAADP
EM7 = sum([min(1, max(0, V_0F0 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0F1 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0F2 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0F3 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0F4 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0F5 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0F6 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0F7 + AG_LIMFG - V_ANREV))]) + 1 - is_positive(sum([V_0F0, V_0F1, V_0F2, V_0F3, V_0F4, V_0F5, V_0F6, V_0F7]) + 0) * V_0CF
DESV = REPSOF
DRIRENOV = RIRENOV
DCELREPHF = CELREPHF
BN1V = BN1AV + PVINVE + INVENTV
SOMMEDD55 = sum([present(TSHALLO1) + present(ALLO1) + present(PRBR1) + present(PALI1) + present(PENIN1), present(TSHALLO2) + present(ALLO2) + present(PRBR2) + present(PALI2) + present(PENIN2), present(TSHALLO3) + present(ALLO3) + present(PRBR3) + present(PALI3) + present(PENIN3), present(TSHALLO4) + present(ALLO4) + present(PRBR4) + present(PALI4) + present(PENIN4), present(TSHALLOV) + present(ALLOV) + present(PRBRV) + present(PALIV) + present(PENINV), present(TSHALLOC) + present(ALLOC) + present(PRBRC) + present(PALIC) + present(PENINC)]) + present(CARTSV) + present(CARTSC) + present(CARTSP1) + present(CARTSP2) + present(CARTSP3) + present(CARTSP4) + present(CARTSNBAV) + present(CARTSNBAC) + present(CARTSNBAP1) + present(CARTSNBAP2) + present(CARTSNBAP3) + present(CARTSNBAP4) + present(REMPLAV) + present(REMPLAC) + present(REMPLAP1) + present(REMPLAP2) + present(REMPLAP3) + present(REMPLAP4) + present(REMPLANBV) + present(REMPLANBC) + present(REMPLANBP1) + present(REMPLANBP2) + present(REMPLANBP3) + present(REMPLANBP4) + present(CARPEV) + present(CARPEC) + present(CARPEP1) + present(CARPEP2) + present(CARPEP3) + present(CARPEP4) + present(CARPENBAV) + present(CARPENBAC) + present(CARPENBAP1) + present(CARPENBAP2) + present(CARPENBAP3) + present(CARPENBAP4) + present(PENSALV) + present(PENSALC) + present(PENSALP1) + present(PENSALP2) + present(PENSALP3) + present(PENSALP4) + present(PENSALNBV) + present(PENSALNBC) + present(PENSALNBP1) + present(PENSALNBP2) + present(PENSALNBP3) + present(PENSALNBP4) + present(PCAPTAXV) + present(PCAPTAXC) + present(CODRAZ) + present(CODRBZ) + present(CODRCZ) + present(CODRDZ) + present(CODREZ) + present(CODRFZ) + present(BACREV) + present(_4BACREV) + present(BA1AV) + present(BACDEV) + present(BACREC) + present(_4BACREC) + present(BA1AC) + present(BACDEC) + present(BACREP) + present(_4BACREP) + present(BA1AP) + present(BACDEP) + present(BAHREV) + present(_4BAHREV) + present(BAHDEV) + present(BAHREC) + present(_4BAHREC) + present(BAHDEC) + present(BAHREP) + present(_4BAHREP) + present(BAHDEP) + present(BICNOV) + present(BI1AV) + present(BICDNV) + present(BICNOC) + present(BI1AC) + present(BICDNC) + present(BICNOP) + present(BI1AP) + present(BICDNP) + present(BIHNOV) + present(BIHDNV) + present(BIHNOC) + present(BIHDNC) + present(BIHNOP) + present(BIHDNP) + present(MIBVENV) + present(MIBPRESV) + present(MIB1AV) + present(MIBDEV) + present(MIBVENC) + present(MIBPRESC) + present(MIB1AC) + present(MIBDEC) + present(MIBVENP) + present(MIBPRESP) + present(MIB1AP) + present(MIBDEP) + present(LOCPROCGAV) + present(LOCDEFPROCGAV) + present(LOCPROCGAC) + present(LOCDEFPROCGAC) + present(LOCPROCGAP) + present(LOCDEFPROCGAP) + present(LOCPROV) + present(LOCDEFPROV) + present(LOCPROC) + present(LOCDEFPROC) + present(LOCPROP) + present(LOCDEFPROP) + present(BICREV) + present(LOCNPCGAV) + present(BI2AV) + present(BICDEV) + present(LOCDEFNPCGAV) + present(BICREC) + present(LOCNPCGAC) + present(BI2AC) + present(BICDEC) + present(LOCDEFNPCGAC) + present(BICREP) + present(LOCNPCGAPAC) + present(BI2AP) + present(BICDEP) + present(LOCDEFNPCGAPAC) + present(BICHREV) + present(LOCNPV) + present(BICHDEV) + present(LOCDEFNPV) + present(BICHREC) + present(LOCNPC) + present(BICHDEC) + present(LOCDEFNPC) + present(BICHREP) + present(LOCNPPAC) + present(BICHDEP) + present(LOCDEFNPPAC) + present(MIBNPVENV) + present(MIBNPPRESV) + present(MIBNP1AV) + present(MIBNPDEV) + present(MIBNPVENC) + present(MIBNPPRESC) + present(MIBNP1AC) + present(MIBNPDEC) + present(MIBNPVENP) + present(MIBNPPRESP) + present(MIBNP1AP) + present(MIBNPDEP) + present(MIBMEUV) + present(MIBGITEV) + present(MIBMEUC) + present(MIBGITEC) + present(MIBMEUP) + present(MIBGITEP) + present(LOCGITCV) + present(LOCGITCC) + present(LOCGITCP) + present(LOCGITHCV) + present(LOCGITHCC) + present(LOCGITHCP) + present(LOCGITV) + present(LOCGITC) + present(LOCGITP) + present(BNCREV) + present(BN1AV) + present(BNCDEV) + present(BNCREC) + present(BN1AC) + present(BNCDEC) + present(BNCREP) + present(BN1AP) + present(BNCDEP) + present(BNHREV) + present(BNHDEV) + present(BNHREC) + present(BNHDEC) + present(BNHREP) + present(BNHDEP) + present(BNCPROV) + present(BNCPRO1AV) + present(BNCPRODEV) + present(BNCPROC) + present(BNCPRO1AC) + present(BNCPRODEC) + present(BNCPROP) + present(BNCPRO1AP) + present(BNCPRODEP) + present(BNCNPV) + present(BNCNP1AV) + present(BNCNPDEV) + present(BNCNPC) + present(BNCNP1AC) + present(BNCNPDEC) + present(BNCNPP) + present(BNCNP1AP) + present(BNCNPDEP) + present(BNCAABV) + present(ANOCEP) + present(PVINVE) + present(BNCAADV) + present(DNOCEP) + present(BNCAABC) + present(ANOVEP) + present(PVINCE) + present(BNCAADC) + present(DNOCEPC) + present(BNCAABP) + present(ANOPEP) + present(PVINPE) + present(BNCAADP) + present(DNOCEPP) + present(INVENTV) + present(INVENTC) + present(INVENTP)
SOMMEA884 = present(TSHALLOV) + present(TSHALLOC) + present(TSHALLO1) + present(TSHALLO2) + present(TSHALLO3) + present(TSHALLO4) + present(PCAPTAXV) + present(PCAPTAXC) + present(ALLOV) + present(ALLOC) + present(ALLO1) + present(ALLO2) + present(ALLO3) + present(ALLO4) + present(PALIV) + present(PALIC) + present(PALI1) + present(PALI2) + present(PALI3) + present(PALI4) + present(PRBRV) + present(PRBRC) + present(PRBR1) + present(PRBR2) + present(PRBR3) + present(PRBR4) + present(CARTSV) + present(CARTSC) + present(CARTSP1) + present(CARTSP2) + present(CARTSP3) + present(CARTSP4) + present(CARTSNBAV) + present(CARTSNBAC) + present(CARTSNBAP1) + present(CARTSNBAP2) + present(CARTSNBAP3) + present(CARTSNBAP4) + present(REMPLAV) + present(REMPLAC) + present(REMPLAP1) + present(REMPLAP2) + present(REMPLAP3) + present(REMPLAP4) + present(REMPLANBV) + present(REMPLANBC) + present(REMPLANBP1) + present(REMPLANBP2) + present(REMPLANBP3) + present(REMPLANBP4) + present(CARPEV) + present(CARPEC) + present(CARPEP1) + present(CARPEP2) + present(CARPEP3) + present(CARPEP4) + present(CARPENBAV) + present(CARPENBAC) + present(CARPENBAP1) + present(CARPENBAP2) + present(CARPENBAP3) + present(CARPENBAP4) + present(PENSALV) + present(PENSALC) + present(PENSALP1) + present(PENSALP2) + present(PENSALP3) + present(PENSALP4) + present(PENSALNBV) + present(PENSALNBC) + present(PENSALNBP1) + present(PENSALNBP2) + present(PENSALNBP3) + present(PENSALNBP4) + present(REVACT) + present(DISQUO) + present(REVACTNB) + present(DISQUONB) + present(COD2FA) + present(RCMHAD) + present(RCMABD) + present(PENINV) + present(PENINC) + present(PENIN1) + present(PENIN2) + present(PENIN3) + present(PENIN4) + present(CODRAZ) + present(CODRBZ) + present(CODRCZ) + present(CODRDZ) + present(CODREZ) + present(CODRFZ) + present(RFORDI) + present(RFMIC) + present(FONCI) + present(REAMOR) + present(BPVRCM) + present(PVTAXSB) + present(BPVSJ) + present(BPV18C) + present(BPV18V) + present(BPCOPTC) + present(BPCOPTV) + present(BPV40C) + present(BPV40V) + present(COD3SG) + present(ABDETPLUS) + present(COD3SL) + present(ABIMPPV) + present(PVIMMO) + present(CODRVG) + present(BACREV) + present(_4BACREV) + present(BAHREV) + present(_4BAHREV) + present(BA1AV) + present(BACREC) + present(_4BACREC) + present(BAHREC) + present(_4BAHREC) + present(BA1AC) + present(BACREP) + present(_4BACREP) + present(BAHREP) + present(_4BAHREP) + present(BA1AP) + present(BICNOV) + present(LOCPROCGAV) + present(BIHNOV) + present(LOCPROV) + present(BICNOC) + present(LOCPROCGAC) + present(BIHNOC) + present(LOCPROC) + present(BICNOP) + present(LOCPROCGAP) + present(BIHNOP) + present(LOCPROP) + present(MIBVENV) + present(MIBPRESV) + present(BI1AV) + present(MIBVENC) + present(MIBPRESC) + present(BI1AC) + present(MIBVENP) + present(MIBPRESP) + present(BI1AP) + present(BICREV) + present(LOCNPCGAV) + present(LOCGITCV) + present(BICREC) + present(LOCNPCGAC) + present(LOCGITCC) + present(BICREP) + present(LOCNPCGAPAC) + present(LOCGITCP) + present(BICHREV) + present(LOCNPV) + present(LOCGITHCV) + present(BICHREC) + present(LOCNPC) + present(LOCGITHCC) + present(BICHREP) + present(LOCNPPAC) + present(LOCGITHCP) + present(MIBMEUV) + present(MIBGITEV) + present(LOCGITV) + present(MIBNPVENV) + present(MIBNPPRESV) + present(MIBMEUC) + present(MIBGITEC) + present(LOCGITC) + present(MIBNPVENC) + present(MIBNPPRESC) + present(MIBMEUP) + present(MIBGITEP) + present(LOCGITP) + present(MIBNPVENP) + present(MIBNPPRESP) + present(BNCREV) + present(BNCREC) + present(BNCREP) + present(BNHREV) + present(BNHREC) + present(BNHREP) + present(BNCPROV) + present(BNCPROC) + present(BNCPROP) + present(BN1AV) + present(BN1AC) + present(BN1AP) + present(BNCAABV) + present(ANOCEP) + present(INVENTV) + present(PVINVE) + present(BNCAADV) + present(DNOCEP) + present(BNCAABC) + present(ANOVEP) + present(INVENTC) + present(PVINCE) + present(BNCAADC) + present(DNOCEPC) + present(BNCAABP) + present(ANOPEP) + present(INVENTP) + present(PVINPE) + present(BNCAADP) + present(DNOCEPP) + present(BNCNPV) + present(BNCNPC) + present(BNCNPP)
PMIB_APC = min(MIBPRESC, max(MIN_MBIC, arr(MIBPRESC * TX_MIBPRES / 100)))
DREPA = RDREP + DONETRAN
# TODO DEFRF4BB
TPRB4 = PRBR4 + PALI4 + PENIN4
BA1V = BA1AV + BAF1AV
# TODO TAXLOYANTAFF
BA1P = BA1AP + BAF1AP
DPATNAT3 = PATNAT3
ZIGCOD8YL = is_positive(COD8YL) * TYPE2
DCELREPYB = CELREPYB
T2TSN1 = CARTSP1 + REMPLAP1
ACELREPHW = CELREPHW * 1 - ART1731BIS + min(CELREPHW, max(ACELREPHW_P + ACELREPHWP2, ACELREPHW1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DSOUFIP = FFIP
DEPCHO = DEPCHOBAS + CIBOIBAIL + COD7SA + CINRJBAIL + COD7SB + CRENRJ + COD7SC + TRAMURWC + COD7WB + CINRJ + COD7RG + TRATOIVG + COD7VH + CIDEP15 + COD7RH + MATISOSI + COD7RI + TRAVITWT + COD7WU + MATISOSJ + COD7RJ + VOLISO + COD7RK + PORENT + COD7RL + CHAUBOISN + COD7RN + POMPESP + COD7RP + POMPESR + COD7RR + CHAUFSOL + COD7RS + POMPESQ + COD7RQ + ENERGIEST + COD7RT + DIAGPERF + COD7TV + RESCHAL + COD7TW + COD7RV + COD7RW + COD7RZ * is_positive(V_NOTRAIT - 10)
RCELREP_HU_R = is_positive(CELREPHU) * arr(CELREPHU * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
HONODECP = XHONOP + XHONOAAP
TPRBV = PRBRV + PALIV + PENINV
# TODO MAJORDTARDIF_D
DAR_REP = sum([DEFAA0, DEFAA1, DEFAA2, DEFAA3, DEFAA4]) * 1 - is_positive(IPVLOC)
AISFDONCEE = arr(ISFDONEURO * TX75 / 100)
LIGINRPCAP2 = is_positive(RETPCAP22)
F10AP = sum([F10A1, F10A2, F10A3, F10A4])
LIGISFANNUL = present(ISFBASE) * is_positive(ANNUL2042)
MIBRC = MIBVENC + MIBPRESC
SPEDREPNPV = BNCNPDEV - BNCNP1AV * is_positive(BNCNPDEV - BNCNP1AV) - BNCPRO1AV - BNCPRODEV * is_positive(BNCPRO1AV - BNCPRODEV) * is_positive(BNCNPDEV - BNCNP1AV * is_positive(BNCNPDEV - BNCNP1AV) - BNCPRO1AV - BNCPRODEV * is_positive(BNCPRO1AV - BNCPRODEV))
# TODO BIH1P
B3SVN = CVNSALAV + CVNSALAC * 1 - is_positive(present(TAX1649) + present(RE168))
DCELNQ = CELLIERNQ
LIGINRLOY2 = is_positive(RETLOY22)
BASSURV = CESSASSV
SPEPVNPV = BNCNP1AV - BNCNPDEV
# TODO MAJOHR17_2TARDIF_R
VAR0BT = 1 - is_positive(null(V_0BT + 0) + is_positive(V_0BT * V_0AV))
TMIB_PRESAP = min(MIBPRESP + MIBNPPRESP, max(MIN_MBIC, arr(MIBPRESP + MIBNPPRESP * TX_MIBPRES / 100)))
SOMMEA538VP = present(BAF1AV) + present(BA1AV) + present(MIB1AV) + present(BI1AV) + present(MIBNP1AV) + present(BI2AV) + present(BNCPRO1AV) + present(BN1AV) + present(BNCNP1AV) + present(PVINVE)
DCELRREDLE = CELRREDLE
TMIB_TVENP = MIBVENP + AUTOBICVP + MIBNPVENP + MIBGITEP + LOCGITP
ACELRREDLD = CELRREDLD * 1 - ART1731BIS + min(CELRREDLD, max(ACELRREDLD_P + ACELRREDLDP2, ACELRREDLD1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TSBNV = TSHALLOV + ALLOV
INDIS = 1 if (V_NOTRAIT + 0 == 14 or V_NOTRAIT + 0 == 16 or V_NOTRAIT + 0 == 26 or V_NOTRAIT + 0 == 36 or V_NOTRAIT + 0 == 46 or V_NOTRAIT + 0 == 56 or V_NOTRAIT + 0 == 66) else 0
DFIPC = FIPCORSE
DCELRREDLC = CELRREDLC
ZIGBASECVN = is_positive(BCVNSAL + V_CVNANT)
ZIPQPALIM1TOT = sum([ZIPQPALIMV1, ZIPQPALIMC1, ZIPQPALIM11, ZIPQPALIM21, ZIPQPALIM31, ZIPQPALIM41])
ACELREPGW = CELREPGW * 1 - ART1731BIS + min(CELREPGW, max(ACELREPGW_P + ACELREPGWP2, ACELREPGW1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BN1P = BN1AP + PVINPE + INVENTP
BQTRAV = is_positive(present(TRAVITWT) + present(COD7WU) * present(TRAMURWC) + present(COD7WB) + present(TRAVITWT) + present(COD7WU) * present(TRATOIVG) + present(COD7VH) + present(TRAVITWT) + present(COD7WU) * present(CHAUBOISN) + present(COD7RN) + present(TRAVITWT) + present(COD7WU) * present(POMPESR) + present(COD7RR) + present(CHAUFSOL) + present(COD7RS) + present(TRAVITWT) + present(COD7WU) * present(CIBOIBAIL) + present(COD7SA) + present(CINRJBAIL) + present(COD7SB) + present(POMPESP) + present(COD7RP) + present(POMPESQ) + present(COD7RQ) + present(ENERGIEST) + present(COD7RT) + present(TRAMURWC) + present(COD7WB) * present(TRATOIVG) + present(COD7VH) + present(TRAMURWC) + present(COD7WB) * present(CHAUBOISN) + present(COD7RN) + present(TRAMURWC) + present(COD7WB) * present(POMPESR) + present(COD7RR) + present(CHAUFSOL) + present(COD7RS) + present(TRAMURWC) + present(COD7WB) * present(CIBOIBAIL) + present(COD7SA) + present(CINRJBAIL) + present(COD7SB) + present(POMPESP) + present(COD7RP) + present(POMPESQ) + present(COD7RQ) + present(ENERGIEST) + present(COD7RT) + present(TRATOIVG) + present(COD7VH) * present(CHAUBOISN) + present(COD7RN) + present(TRATOIVG) + present(COD7VH) * present(CHAUBOISN) + present(COD7RN) + present(TRATOIVG) + present(COD7VH) * present(POMPESR) + present(COD7RR) + present(CHAUFSOL) + present(COD7RS) + present(TRATOIVG) + present(COD7VH) * present(CIBOIBAIL) + present(COD7SA) + present(CINRJBAIL) + present(COD7SB) + present(POMPESP) + present(COD7RP) + present(POMPESQ) + present(COD7RQ) + present(ENERGIEST) + present(COD7RT) + present(CHAUBOISN) + present(COD7RN) * present(POMPESR) + present(COD7RR) + present(CHAUFSOL) + present(COD7RS) + present(CHAUBOISN) + present(COD7RN) * present(CIBOIBAIL) + present(COD7SA) + present(CINRJBAIL) + present(COD7SB) + present(POMPESP) + present(COD7RP) + present(POMPESQ) + present(COD7RQ) + present(ENERGIEST) + present(COD7RT) + present(POMPESR) + present(COD7RR) + present(CHAUFSOL) + present(COD7RS) * present(CIBOIBAIL) + present(COD7SA) + present(CINRJBAIL) + present(COD7SB) + present(POMPESP) + present(COD7RP) + present(POMPESQ) + present(COD7RQ) + present(ENERGIEST) + present(COD7RT)) + 0
PLOCCGAPAC = LOCPROCGAP - LOCDEFPROCGAP * 1 - is_positive(ART1731BIS * PREM8_11)
DCELREPYE = CELREPYE
# TODO BPTP19WGWJ
MIB_P1AC = MIB1AC - MIBDEC
DCELREPHG = CELREPHG
CELSOMN = CELLIERNA + CELLIERNC + CELLIERND + CELLIERNE + CELLIERNF + CELLIERNH + CELLIERNI + CELLIERNJ + CELLIERNK + CELLIERNM + CELLIERNN + CELLIERNO
INDIS14 = 1 if (V_NOTRAIT + 0 == 14 or V_NOTRAIT + 0 == 16 or V_NOTRAIT + 0 == 26 or V_NOTRAIT + 0 == 36 or V_NOTRAIT + 0 == 46 or V_NOTRAIT + 0 == 56 or V_NOTRAIT + 0 == 66) else 0
DRESTIMO = RIMOSAUVANT + RIMOPPAUANT + RESTIMOPPAU + RESTIMOSAUV + RIMOPPAURE + RIMOSAUVRF + COD7SY + COD7SX
ZIGPROVYH = is_positive(CSPROVYH + CSPROVYP) * TYPE2
PPE_SALAVDEF3 = TSHALLO3 + CARTSP3 * is_positive(CARTSNBAP3) + SALEXT3
ZIPQPALIM5TOT = sum([ZIPQPALIMV5, ZIPQPALIMC5, ZIPQPALIM15, ZIPQPALIM25, ZIPQPALIM35, ZIPQPALIM45])
PPE_BOOL_NADA1 = min(1, is_positive(TSHALLO1 + 0) * null(PPETPP1 + 0) * null(PPENHP1 + 0) + is_positive(SALEXT1 + 0) * null(PPETPP1 + 0) * null(PPEXT1 + 0))
BARREVAP = BACREP + _4BACREP
RTCAR = RCMHAB + INTERE
DGARD = sum([RDGARD1, RDGARD2, RDGARD3, RDGARD4]) + sum([RDGARD1QAR, RDGARD2QAR, RDGARD3QAR, RDGARD4QAR])
BCIAQCUL = arr(CIAQCUL * TX_CIAQCUL / 100)
PMIB_AVV = min(MIBVENV, max(MIN_MBIC, arr(MIBVENV * TX_MIBVEN / 100)))
BARREVAC = BACREC + _4BACREC
BCIGA = CRIGA
BINTAP = BICREP - BICDEP * 1 - is_positive(ART1731BIS * PREM8_11)
DDONS = RDDOUP + DONAUTRE + REPDON03 + REPDON04 + REPDON05 + REPDON06 + REPDON07 + COD7UH
TXSPEHV = max(0, arr(BNHREV + XHONOV - BNHDEV * 1 - is_positive(ART1731BIS) * MAJREV)) + min(0, BNHREV + XHONOV - BNHDEV * 1 - is_positive(ART1731BIS))
ABICPDECP = AUTOBICVP + AUTOBICPP
# TODO MAJOPSTARDIF_D
BINTAC = BICREC - BICDEC * 1 - is_positive(ART1731BIS * PREM8_11)
# TODO INDCOLS
PRQZV = CODRAZ
SPEPVPV = BNCPRO1AV - BNCPRODEV
PPETX2 = PPE_TX2
BCEL_HM = arr(min(CELLIERHM + 0, LIMCELLIER) / 9)
SOMDEFLOC = LOCDEFPROCGAV + LOCDEFPROV + LOCDEFPROCGAC + LOCDEFPROC + LOCDEFPROCGAP + LOCDEFPROP
TDEDMIN4 = is_positive(DETS4) * MIN_DEMEMPLOI + 1 - is_positive(DETS4) * MIN_DEDSFORFTS
DMEUBLE = REPMEUBLE
DILMPC = COD7PC
REPENT2 = INVOMRETPM + INVOMENTRJ + INVOMRETPO + INVOMRETPT + INVOMRETPY + INVOMENTRL + INVOMENTRQ + INVOMENTRV + INVOMENTNV + INVOMRETPN + INVOMRETPS + INVOMRETPX + INVOMENTRK + INVOMENTRP + INVOMENTRU + INVOMENTNU + INVOMRETPP + INVOMRETPU + INVOMENTRG + INVOMENTRM + INVOMENTRR + INVOMENTRW + INVOMENTNW + INVOMRETPR + INVOMRETPW + INVOMENTRI + INVOMENTRO + INVOMENTRT + INVOMENTRY + INVOMENTNY
ACELREPHB = CELREPHB * 1 - ART1731BIS + min(CELREPHB, max(ACELREPHB_P + ACELREPHBP2, ACELREPHB1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ACELRREDLC = CELRREDLC * 1 - ART1731BIS + min(CELRREDLC, max(ACELRREDLC_P + ACELRREDLCP2, ACELRREDLC1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BPTP4 = BPCOPTV + BPCOPTC + BPVSK * 1 - is_positive(IPVLOC) * 1 - is_positive(present(TAX1649) + present(RE168))
PALIP = PALI1 + PALI2 + PALI3 + PALI4
DILMPE = COD7PE
LIG_AVISISF = 1 - is_positive(ISF_LIMINF + ISF_LIMSUP) * present(ISFBASE)
PPENEXOV = null(PPETPV + 0) + is_positive(TSHALLOV + 0) + is_positive(SALEXTV + 0) + 4 * is_positive(PPENHV + 0) + 8 * is_positive(PPEXTV + 0)
BRENOV = min(RIRENOV, PLAF_RENOV)
TGLFTOTM = sum([TGLFVM, TGLFCM, TGLF1M, TGLF2M, TGLF3M, TGLF4M])
RDPTP = BAF1AV + BAF1AC + BAF1AP + BA1AV + BA1AC + BA1AP + max(0, MIB1AV - MIBDEV) + max(0, MIB1AC - MIBDEC) + max(0, MIB1AP - MIBDEP) + BI1AV + BI1AC + BI1AP + max(0, MIBNP1AV - MIBNPDEV) + max(0, MIBNP1AC - MIBNPDEC) + max(0, MIBNP1AP - MIBNPDEP) + BI2AV + BI2AC + BI2AP + max(0, BNCPRO1AV - BNCPRODEV) + max(0, BNCPRO1AC - BNCPRODEC) + max(0, BNCPRO1AP - BNCPRODEP) + BN1AV + BN1AC + BN1AP + max(0, BNCNP1AV - BNCNPDEV) + max(0, BNCNP1AC - BNCNPDEC) + max(0, BNCNP1AP - BNCNPDEP) + PVINVE + PVINCE + PVINPE + PVSOCV + PVSOCC
GLPALIMTOT = sum([GLPALIMV, GLPALIMC, GLPALIM1, GLPALIM2, GLPALIM3, GLPALIM4])
RB05 = VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS
RIVDUEKL = arr(arr(min(DUFLOEL + 0, LIMDUFLO) / 9) * TX29 / 100) + arr(arr(min(DUFLOEK + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + 0, LIMDUFLO)) / 9) * TX18 / 100) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
DCELRREDLT = CELRREDLT
PVBARHR = max(0, BPVRCM + COD3SG + COD3SL + ABDETPLUS + ABIMPPV + CODRVG - DPVRCM + COD3SH + COD3SM + ABDETMOINS + ABIMPMV)
ACELREPHU = CELREPHU * 1 - ART1731BIS + min(CELREPHU, max(ACELREPHU_P + ACELREPHUP2, ACELREPHU1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
XBNCNPRO = sum([XBNNPV, XBNNPC, XBNNPP])
DCELREPGT = CELREPGT
SPENETNPCT = BNCNPPVV + BNCNPPVC + BNCNPPVP - BNCNPDCT
DCELREPHV = CELREPHV
SOMMEA860 = present(BICEXV) + present(BICNOV) + present(BI1AV) + present(BICDNV) + present(BICEXC) + present(BICNOC) + present(BI1AC) + present(BICDNC) + present(BICEXP) + present(BICNOP) + present(BI1AP) + present(BICDNP) + present(BIHEXV) + present(BIHNOV) + present(BIHDNV) + present(BIHEXC) + present(BIHNOC) + present(BIHDNC) + present(BIHEXP) + present(BIHNOP) + present(BIHDNP) + present(BNCEXV) + present(BNCREV) + present(BN1AV) + present(BNCDEV) + present(BNCEXC) + present(BNCREC) + present(BN1AC) + present(BNCDEC) + present(BNCEXP) + present(BNCREP) + present(BN1AP) + present(BNCDEP) + present(BNHEXV) + present(BNHREV) + present(BNHDEV) + present(BNHEXC) + present(BNHREC) + present(BNHDEC) + present(BNHEXP) + present(BNHREP) + present(BNHDEP)
_2PRB1 = CARPEP1 + PENSALP1 + CODRCZ
DEPLOCV = LOCPROCGAV - LOCDEFPROCGAV + LOCPROV - LOCDEFPROV
LIGBLOC = is_positive(V_NOTRAIT - 20)
BTANTGECUMWL = V_BTGECUMWL * 1 - present(COD7WD) + COD7WD
PERPPLAFNUP2ANT = present(PERPPLAFNUP2) * PERPPLAFNUP2 + 1 - present(PERPPLAFNUP2) * V_BTPERPNUP2
ACELREPHE = CELREPHE * 1 - ART1731BIS + min(CELREPHE, max(ACELREPHE_P + ACELREPHEP2, ACELREPHE1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DISFDONCEE = ISFDONEURO
# TODO IDEGR
DCELREPHW = CELREPHW
RD_TAX1649 = TAX1649
TSNN2P = sum([TSNN21, TSNN22, TSNN23, TSNN24])
ACELRREDLT = CELRREDLT * 1 - ART1731BIS + min(CELRREDLT, max(ACELRREDLT_P + ACELRREDLTP2, ACELRREDLT1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DEDMINC = is_positive(DETSC) * MIN_DEMEMPLOI + 1 - is_positive(DETSC) * MIN_DEDSFORFTS
PMIB_APV = min(MIBPRESV, max(MIN_MBIC, arr(MIBPRESV * TX_MIBPRES / 100)))
CS_RVORIGND = ESFP
RMOND_2 = max(0, RMOND + DEFZU - DMOND) * is_positive(SOMMEMOND_2) * 1 - PREM8_11 + RMOND * null(SOMMEMOND_2 + 0) * 1 - PREM8_11 + max(0, RMOND + DEFZU - DMOND) * PREM8_11
# TODO REPDONR5
DCELJBGL = CELLIERJB + CELLIERJG + CELLIERJL
# TODO RIVL1
NBQAR1 = null(V_0CF + V_0CR + V_0DJ + 0) * 1 / 2 * V_0CH - 2 * is_positive(V_0CH - 2) + 1 / 4 * is_positive(V_0CH + 0) + 1 / 4 * is_positive(V_0CH - 1)
LIG10P = positif_ou_nul(sum([TSBN1 + PRB1, TSBN2 + PRB2, TSBN3 + PRB3, TSBN4 + PRB4]) + is_positive(F10AP * null(sum([TSBN1 + PRB1, TSBN2 + PRB2, TSBN3 + PRB3, TSBN4 + PRB4]))))
ZIGINT22 = is_positive(RETCDIS22)
BRCMQ = REVACT + REVPEA + PROVIE + DISQUO + RESTUC + INTERE
DFORET = FORET
SPETOTC = BNCPROC + BNCNPC
MLOCDECV = MIBGITEV + LOCGITV + MIBMEUV
TDEDMIN1 = is_positive(DETS1) * MIN_DEMEMPLOI + 1 - is_positive(DETS1) * MIN_DEDSFORFTS
DNETU = sum([CHENF1, CHENF2, CHENF3, CHENF4])
SOMMEA880 = present(BICEXV) + present(BICNOV) + present(BI1AV) + present(BICDNV) + present(BICEXC) + present(BICNOC) + present(BI1AC) + present(BICDNC) + present(BICEXP) + present(BICNOP) + present(BI1AP) + present(BICDNP) + present(BIHEXV) + present(BIHNOV) + present(BIHDNV) + present(BIHEXC) + present(BIHNOC) + present(BIHDNC) + present(BIHEXP) + present(BIHNOP) + present(BIHDNP) + present(LOCPROCGAV) + present(LOCDEFPROCGAV) + present(LOCPROCGAC) + present(LOCDEFPROCGAC) + present(LOCPROCGAP) + present(LOCDEFPROCGAP) + present(LOCPROV) + present(LOCDEFPROV) + present(LOCPROC) + present(LOCDEFPROC) + present(LOCPROP) + present(LOCDEFPROP)
DDUFLOGIH = DUFLOGI + DUFLOGH
F10BP = sum([F10B1, F10B2, F10B3, F10B4])
ACELRREDLX = CELRREDLX * 1 - ART1731BIS + min(CELRREDLX, max(ACELRREDLX_P + ACELRREDLXP2, ACELRREDLX1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCMRTNC = arr(RCMTNC * 40 / 100)
BNCCREAV = BNCCRV + BNCCRFV
DCELRREDLS = CELRREDLS
# TODO RIVL5
DTOUREPA = RINVLOCREA + INVLOGREHA + INVLOCXV + COD7UZ
DRESINEUV = LOCRESINEUV + MEUBLENP + INVNPROF1 + INVNPROF2
CVNSALC = arr(BCVNSAL * TX10 / 100) * 1 - is_positive(ANNUL2042)
_2RV1 = arr(RENTAX * TXRVT1 / 100)
# TODO TAXANTAFF
MAJTXCVN4 = is_positive(is_positive(is_positive(MAJOCVN03) + is_positive(MAJOCVN55)) * is_positive(is_positive(MAJOCVN04) + is_positive(MAJOCVN05)) + is_positive(is_positive(MAJOCVN03) + is_positive(MAJOCVN55)) * is_positive(MAJOCVN06) + is_positive(is_positive(MAJOCVN04) + is_positive(MAJOCVN05)) * is_positive(MAJOCVN06)) * -1 + is_positive(is_positive(MAJOCVN03) + is_positive(MAJOCVN55)) * 1 - is_positive(is_positive(MAJOCVN04) + is_positive(MAJOCVN05) + is_positive(MAJOCVN06)) * 40 + is_positive(is_positive(MAJOCVN04) + is_positive(MAJOCVN05)) * 1 - is_positive(is_positive(MAJOCVN03) + is_positive(MAJOCVN55) + is_positive(MAJOCVN06)) * 80 + is_positive(MAJOCVN06) * 1 - is_positive(is_positive(MAJOCVN03) + is_positive(MAJOCVN04) + is_positive(MAJOCVN05) + is_positive(MAJOCVN55)) * 100
TXSPEAAP = BNCREP + XHONOAAP - BNCDEP * 1 - is_positive(ART1731BIS)
SOMMEBNC = BNCNPV + BNCNPC + BNCNPP + BNCNPPVV + BNCNPPVC + BNCNPPVP + BNCAABV + ANOCEP + BNCAABC + ANOVEP + BNCAABP + ANOPEP + 0
LIG1 = 1 - is_positive(RE168 + TAX1649)
ZIG_CTRIANT = is_positive(V_ANTCR) * TYPE2
ADUFLOEKL_1 = arr(min(DUFLOEL + 0, LIMDUFLO) / 9) + arr(min(DUFLOEK + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + 0, LIMDUFLO)) / 9) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
DDUFLOEKL = DUFLOEK + DUFLOEL
PERPPLATVANT = 1 - is_positive(present(PERPPLAFCV) + present(PERPPLAFNUV1) + present(PERPPLAFNUV2) + present(PERPPLAFNUV3)) * V_BTPERPTOTV + is_positive(present(PERPPLAFCV) + present(PERPPLAFNUV1) + present(PERPPLAFNUV2) + present(PERPPLAFNUV3)) * PERPPLAFCV + PERPPLAFNUV1 + PERPPLAFNUV2 + PERPPLAFNUV3
COPETO = 10 if (CMAJ == 7 or CMAJ == 10 or CMAJ == 17 or CMAJ == 18) else (40 if (CMAJ == 8 or CMAJ == 11) else 80)
ZIPQF1TOT = sum([ZIPQFV1, ZIPQFC1, ZIPQF11, ZIPQF21, ZIPQF31, ZIPQF41])
RIVDUGIH = arr(arr(min(DUFLOGI + 0, LIMDUFLO) / 9) * TX29 / 100) + arr(arr(min(DUFLOGH + 0, LIMDUFLO - min(DUFLOGI + 0, LIMDUFLO)) / 9) * TX18 / 100) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
BI1P = BI1AP
NBQAR4 = 1 / 4 * V_0CI
REVTSREMPQHT = sum([TSNN2REMPV, TSNN2REMPC, TSNN2REMP1, TSNN2REMP2, TSNN2REMP3, TSNN2REMP4])
ACELREPHF = CELREPHF * 1 - ART1731BIS + min(CELREPHF, max(ACELREPHF_P + ACELREPHFP2, ACELREPHF1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
SOMMEA899 = present(BICEXV) + present(BICNOV) + present(BI1AV) + present(BICDNV) + present(BICEXC) + present(BICNOC) + present(BI1AC) + present(BICDNC) + present(BICEXP) + present(BICNOP) + present(BI1AP) + present(BICDNP) + present(BIHEXV) + present(BIHNOV) + present(BIHDNV) + present(BIHEXC) + present(BIHNOC) + present(BIHDNC) + present(BIHEXP) + present(BIHNOP) + present(BIHDNP)
DCELREPYD = CELREPYD
XBICPRO = sum([XBIPV, XBIPC, XBIPP])
SOMMEA709 = is_positive(RINVLOCINV) + is_positive(RINVLOCREA) + is_positive(REPINVTOU) + is_positive(INVLOGREHA) + is_positive(INVLOCXN) + is_positive(INVLOCXV) + is_positive(COD7UY) + is_positive(COD7UZ) + 0
TXPFIRSE5 = 40 if (V_CODPFIRSE5 == 3 or V_CODPFIRSE5 == 30 or V_CODPFIRSE5 == 55) else (80 if (V_CODPFIRSE5 == 4 or V_CODPFIRSE5 == 5) else (100 if (V_CODPFIRSE5 == 6) else 0))
ACELREPHD = CELREPHD * 1 - ART1731BIS + min(CELREPHD, max(ACELREPHD_P + ACELREPHDP2, ACELREPHD1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
_2PRBC = CARPEC + PENSALC + CODRBZ
# TODO HAUTREVDEG
BINP = BICREP - BICDEP + BICHREP - BICHDEP
XBNNPC = BNCNPREXC + BNCNPREXAAC
BNCAFFP = is_positive(present(BNHREP) + present(BNCREP) + present(BNHDEP) + present(BNCDEP))
ZIPQPRR1TOT = sum([ZIPQPRRV1, ZIPQPRRC1, ZIPQPRR11, ZIPQPRR21, ZIPQPRR31, ZIPQPRR41])
PPE_BOOL_NADAC = min(1, is_positive(TSHALLOC + 0) * null(PPETPC + 0) * null(PPENHC + 0) + is_positive(SALEXTC + 0) * null(PPETPC + 0) * null(PPEXTC + 0))
SOMMEA739 = is_positive(INVSOCNRET) + is_positive(INVOMSOCKH) + is_positive(INVOMSOCKI) + is_positive(INVSOC2010) + is_positive(INVOMSOCQU) + is_positive(INVLOGSOC) + is_positive(INVOMSOCQJ) + is_positive(INVOMSOCQS) + is_positive(INVOMSOCQW) + is_positive(INVOMSOCQX) + is_positive(NRETROC40) + is_positive(NRETROC50) + is_positive(RETROCOMMB) + is_positive(RETROCOMMC) + is_positive(RETROCOMLH) + is_positive(RETROCOMLI) + is_positive(INVRETRO2) + is_positive(INVDOMRET60) + is_positive(INVRETRO1) + is_positive(INVDOMRET50) + is_positive(INVOMRETPO) + is_positive(INVOMRETPT) + is_positive(INVOMRETPN) + is_positive(INVOMRETPP) + is_positive(INVOMRETPS) + is_positive(INVOMRETPU) + is_positive(INVENDI) + is_positive(INVOMENTKT) + is_positive(INVOMENTKU) + is_positive(INVIMP) + is_positive(INVDIR2009) + is_positive(INVOMRETPR) + is_positive(INVOMRETPW) + is_positive(INVLGAUTRE) + is_positive(INVLGDEB2010) + is_positive(INVLOG2009) + is_positive(INVOMLOGOB) + is_positive(INVOMLOGOC) + is_positive(INVOMLOGOM) + is_positive(INVOMLOGON) + is_positive(INVOMRETPB) + is_positive(INVOMRETPF) + is_positive(INVOMRETPJ) + is_positive(INVOMRETPA) + is_positive(INVOMRETPE) + is_positive(INVOMRETPI) + is_positive(INVOMRETPY) + is_positive(INVOMRETPX) + is_positive(INVOMENTRG) + is_positive(INVOMRETPD) + is_positive(INVOMRETPH) + is_positive(INVOMRETPL) + is_positive(INVOMENTRI) + is_positive(INVOMLOGOI) + is_positive(INVOMLOGOJ) + is_positive(INVOMLOGOK) + is_positive(INVOMLOGOP) + is_positive(INVOMLOGOQ) + is_positive(INVOMLOGOR) + is_positive(INVOMENTRL) + is_positive(INVOMENTRQ) + is_positive(INVOMENTRV) + is_positive(INVOMENTNV) + is_positive(INVOMENTRK) + is_positive(INVOMENTRP) + is_positive(INVOMENTRU) + is_positive(INVOMENTNU) + is_positive(INVOMENTRM) + is_positive(INVOMENTRR) + is_positive(INVOMENTRW) + is_positive(INVOMENTNW) + is_positive(INVOMENTRO) + is_positive(INVOMENTRT) + is_positive(INVOMENTRY) + is_positive(INVOMENTNY) + is_positive(INVOMLOGOT) + is_positive(INVOMLOGOU) + is_positive(INVOMLOGOV) + is_positive(INVOMLOGOW) + is_positive(CODHOD) + is_positive(CODHOE) + is_positive(CODHOF) + is_positive(CODHOG) + is_positive(CODHOX) + is_positive(CODHOY) + is_positive(CODHOZ) + is_positive(CODHRA) + is_positive(CODHRB) + is_positive(CODHRC) + is_positive(CODHRD) + is_positive(CODHSA) + is_positive(CODHSB) + is_positive(CODHSC) + is_positive(CODHSE) + is_positive(CODHSF) + is_positive(CODHSG) + is_positive(CODHSH) + is_positive(CODHSJ) + is_positive(CODHSK) + is_positive(CODHSL) + is_positive(CODHSM) + is_positive(CODHSO) + is_positive(CODHSP) + is_positive(CODHSQ) + is_positive(CODHSR) + is_positive(CODHST) + is_positive(CODHSU) + is_positive(CODHSV) + is_positive(CODHSW) + is_positive(CODHSY) + is_positive(CODHSZ) + is_positive(CODHTA) + is_positive(CODHTB) + is_positive(CODHTD) + is_positive(CODHAA) + is_positive(CODHAB) + is_positive(CODHAC) + is_positive(CODHAE) + is_positive(CODHAF) + is_positive(CODHAG) + is_positive(CODHAH) + is_positive(CODHAJ) + is_positive(CODHAK) + is_positive(CODHAL) + is_positive(CODHAM) + is_positive(CODHAO) + is_positive(CODHAP) + is_positive(CODHAQ) + is_positive(CODHAR) + is_positive(CODHAT) + is_positive(CODHAU) + is_positive(CODHAV) + is_positive(CODHAW) + is_positive(CODHAY) + is_positive(CODHBA) + is_positive(CODHBB) + is_positive(CODHBE) + is_positive(CODHBF) + is_positive(CODHBG) + is_positive(CODHUA) + is_positive(CODHUB) + is_positive(CODHUC) + is_positive(CODHUD) + is_positive(CODHUE) + is_positive(CODHUF) + is_positive(CODHUG) + is_positive(CODHXA) + is_positive(CODHXB) + is_positive(CODHXC) + is_positive(CODHXE) + 0
XBA = sum([XBAV, XBAC, XBAP])
TPRB1 = PRBR1 + PALI1 + PENIN1
# TODO PRSAC
# TODO DEFRF4BD
TGLPALIMTOTM = sum([TGLPALIMVM, TGLPALIMCM, TGLPALIM1M, TGLPALIM2M, TGLPALIM3M, TGLPALIM4M])
BAA = min(RDREP + DONETRAN, PLAF_REDREPAS)
ACELREPGU = CELREPGU * 1 - ART1731BIS + min(CELREPGU, max(ACELREPGU_P + ACELREPGUP2, ACELREPGU1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
EM7QAR = sum([min(1, max(0, V_0H0 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0H1 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0H2 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0H3 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0H4 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0H5 + AG_LIMFG - V_ANREV))]) + sum([min(1, max(0, V_0P0 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0P1 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0P2 + AG_LIMFG - V_ANREV)), min(1, max(0, V_0P3 + AG_LIMFG - V_ANREV))]) + 1 - is_positive(sum([V_0H0, V_0H1, V_0H2, V_0H3, V_0H4, V_0H5]) + sum([V_0P0, V_0P1, V_0P2, V_0P3]) + 0) * V_0CH + V_0DP
RCELREP_HU = is_positive(CELREPHU) * arr(ACELREPHU * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCMRABD = arr(RCMABD * 40 / 100)
LIGISFTRCT = present(ISFBASE) * is_positive(V_TRCT)
V_EAD = (V_REGCO + 0) in [{'values': [5], 'type': 'enumeration_values'}]
ACELREPYK = CELREPYK * 1 - ART1731BIS + min(CELREPYF, max(ACELREPYK_P + ACELREPYKP2, ACELREPYK1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
MIBRNET = sum([MIBRNETV, MIBRNETC, MIBRNETP])
RETRSETOT = RETRSE1 + RETRSE2 + RETRSE3 + RETRSE4 + RETRSE5
TDEDMIN3 = is_positive(DETS3) * MIN_DEMEMPLOI + 1 - is_positive(DETS3) * MIN_DEDSFORFTS
PVTXEFF2 = max(0, BPVRCM + COD3SG + COD3SL + ABDETPLUS + ABIMPPV - DPVRCM + COD3SH + COD3SM + ABDETMOINS + ABIMPMV)
AGRIV = BAPERPV + BANOCGAV * 1 - is_positive(APPLI_OCEANS)
LIGLOCNEUF1 = is_positive(RIVL1) * LIG1
GLFTOTM = sum([GLFVM, GLFCM, GLF1M, GLF2M, GLF3M, GLF4M])
TPMIB_APP = min(MIBPRESP + AUTOBICPP, max(MIN_MBIC, arr(MIBPRESP + AUTOBICPP * TX_MIBPRES / 100)))
ABNCPDECP = AUTOBNCP
DPLAFREPME4 = COD7CY
DAIDC = CREAIDE
HONONETV = arr(XHONOV * MAJREV) + XHONOAAV
# TODO MAJOHR17_2TARDIF_P
DCELREPHA = CELREPHA
CI2CK = COD2CK * 1 - is_positive(RE168 + TAX1649) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
CS_R1649 = R1649
BI2V = BI2AV
RDRVAPS = arr(RVB1 * TXRVT1 / 100) + arr(RVB2 * TXRVT2 / 100) + arr(RVB3 * TXRVT3 / 100) + arr(RVB4 * TXRVT4 / 100)
DCELRREDLB = CELRREDLB
SOMMEA881 = present(BAEXV) + present(BACREV) + present(_4BACREV) + present(BA1AV) + present(BACDEV) + present(BAEXC) + present(BACREC) + present(_4BACREC) + present(BA1AC) + present(BACDEC) + present(BAEXP) + present(BACREP) + present(_4BACREP) + present(BA1AP) + present(BACDEP) + present(BAHEXV) + present(BAHREV) + present(_4BAHREV) + present(BAHDEV) + present(BAHEXC) + present(BAHREC) + present(_4BAHREC) + present(BAHDEC) + present(BAHEXP) + present(BAHREP) + present(_4BAHREP) + present(BAHDEP) + present(BICEXV) + present(BICNOV) + present(BI1AV) + present(BICDNV) + present(BICEXC) + present(BICNOC) + present(BI1AC) + present(BICDNC) + present(BICEXP) + present(BICNOP) + present(BI1AP) + present(BICDNP) + present(BIHEXV) + present(BIHNOV) + present(BIHDNV) + present(BIHEXC) + present(BIHNOC) + present(BIHDNC) + present(BIHEXP) + present(BIHNOP) + present(BIHDNP) + present(BICNPEXV) + present(BICREV) + present(BI2AV) + present(BICDEV) + present(BICNPEXC) + present(BICREC) + present(BI2AC) + present(BICDEC) + present(BICNPEXP) + present(BICREP) + present(BI2AP) + present(BICDEP) + present(BICNPHEXV) + present(BICHREV) + present(BICHDEV) + present(BICNPHEXC) + present(BICHREC) + present(BICHDEC) + present(BICNPHEXP) + present(BICHREP) + present(BICHDEP) + present(LOCPROCGAV) + present(LOCDEFPROCGAV) + present(LOCPROCGAC) + present(LOCDEFPROCGAC) + present(LOCPROCGAP) + present(LOCDEFPROCGAP) + present(LOCPROV) + present(LOCDEFPROV) + present(LOCPROC) + present(LOCDEFPROC) + present(LOCPROP) + present(LOCDEFPROP) + present(LOCNPCGAV) + present(LOCGITCV) + present(LOCDEFNPCGAV) + present(LOCNPCGAC) + present(LOCGITCC) + present(LOCDEFNPCGAC) + present(LOCNPCGAPAC) + present(LOCGITCP) + present(LOCDEFNPCGAPAC) + present(LOCNPV) + present(LOCGITHCV) + present(LOCDEFNPV) + present(LOCNPC) + present(LOCGITHCC) + present(LOCDEFNPC) + present(LOCNPPAC) + present(LOCGITHCP) + present(LOCDEFNPPAC) + present(BAPERPV) + present(BAPERPC) + present(BAPERPP) + present(BANOCGAV) + present(BANOCGAC) + present(BANOCGAP) + present(BNCEXV) + present(BNCREV) + present(BN1AV) + present(BNCDEV) + present(BNCEXC) + present(BNCREC) + present(BN1AC) + present(BNCDEC) + present(BNCEXP) + present(BNCREP) + present(BN1AP) + present(BNCDEP) + present(BNHEXV) + present(BNHREV) + present(BNHDEV) + present(BNHEXC) + present(BNHREC) + present(BNHDEC) + present(BNHEXP) + present(BNHREP) + present(BNHDEP) + present(XHONOAAV) + present(XHONOV) + present(XHONOAAC) + present(XHONOC) + present(XHONOAAP) + present(XHONOP) + present(BNCAABV) + present(ANOCEP) + present(INVENTV) + present(PVINVE) + present(BNCAADV) + present(DNOCEP) + present(BNCAABC) + present(ANOVEP) + present(INVENTC) + present(PVINCE) + present(BNCAADC) + present(DNOCEPC) + present(BNCAABP) + present(ANOPEP) + present(INVENTP) + present(PVINPE) + present(BNCAADP) + present(DNOCEPP) + present(BNCNPREXAAV) + present(BNCNPREXAAC) + present(BNCNPREXAAP) + present(BNCNPREXV) + present(BNCNPREXC) + present(BNCNPREXP)
TGLPRRTOTM = sum([TGLPRRVM + TGLPRRZVM, TGLPRRCM + TGLPRRZCM, TGLPRR1M + TGLPRRZ1M, TGLPRR2M + TGLPRRZ2M, TGLPRR3M + TGLPRRZ3M, TGLPRR4M + TGLPRRZ4M])
DILMPB = COD7PB
XBNV = BNHEXV + BNCEXV
DISFPLAF = ISFPLAF
SPENET = sum([SPENETV, SPENETC, SPENETP])
_2TSN3 = CARTSP3 + REMPLAP3
MAJTXC = COPETO
RCELREP_HT_R = is_positive(CELREPHT) * arr(CELREPHT * TX25 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ACELREPYA = CELREPYA * 1 - ART1731BIS + min(CELREPYA, max(ACELREPYA_P + ACELREPYAP2, ACELREPYA1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
AGV = V_ANREV - V_0DA * min(1, V_0DA)
MIBRP = MIBVENP + MIBPRESP
MIBNETNPPF = sum([MIB_NETNPPV, MIB_NETNPPC, MIB_NETNPPP])
PLOCPAC = min(0, LOCPROP - LOCDEFPROP * 1 - is_positive(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFPROP * 1 - is_positive(ART1731BIS * PREM8_11) - LOCPROP) + arr(max(0, LOCPROP - LOCDEFPROP * 1 - is_positive(ART1731BIS * PREM8_11)) * MAJREV) * is_positive(LOCPROP - LOCDEFPROP * 1 - is_positive(ART1731BIS * PREM8_11))
DFIPDOM = FIPDOMCOM
LIG134V = is_positive(present(BAFV) + present(BAHREV) + present(BAHDEV) + present(BACREV) + present(BACDEV) + present(BAFPVV) + present(BAFORESTV))
TXSPENET = sum([TXSPENETV, TXSPENETC, TXSPENETP])
SOMMEA718 = present(BAFV) + 1 - null(V_FORVA + 0) + present(BAFORESTV) + present(BAFPVV) + present(BAF1AV) + present(BAFC) + 1 - null(V_FORCA + 0) + present(BAFORESTC) + present(BAFPVC) + present(BAF1AC) + present(BAFP) + 1 - null(V_FORPA + 0) + present(BAFORESTP) + present(BAFPVP) + present(BAF1AP) + present(BACREV) + present(_4BACREV) + present(BA1AV) + present(BACDEV) + present(BACREC) + present(_4BACREC) + present(BA1AC) + present(BACDEC) + present(BACREP) + present(_4BACREP) + present(BA1AP) + present(BACDEP) + present(BAHREV) + present(_4BAHREV) + present(BAHDEV) + present(BAHREC) + present(_4BAHREC) + present(BAHDEC) + present(BAHREP) + present(_4BAHREP) + present(BAHDEP) + present(MIBVENV) + present(MIBPRESV) + present(MIBPVV) + present(MIB1AV) + present(MIBDEV) + present(BICPMVCTV) + present(MIBVENC) + present(MIBPRESC) + present(MIBPVC) + present(MIB1AC) + present(MIBDEC) + present(BICPMVCTC) + present(MIBVENP) + present(MIBPRESP) + present(MIBPVP) + present(MIB1AP) + present(MIBDEP) + present(BICPMVCTP) + present(BICNOV) + present(LOCPROCGAV) + present(BI1AV) + present(BICDNV) + present(LOCDEFPROCGAV) + present(BICNOC) + present(LOCPROCGAC) + present(BI1AC) + present(BICDNC) + present(LOCDEFPROCGAC) + present(BICNOP) + present(LOCPROCGAP) + present(BI1AP) + present(BICDNP) + present(LOCDEFPROCGAP) + present(BIHNOV) + present(LOCPROV) + present(BIHDNV) + present(LOCDEFPROV) + present(BIHNOC) + present(LOCPROC) + present(BIHDNC) + present(LOCDEFPROC) + present(BIHNOP) + present(LOCPROP) + present(BIHDNP) + present(LOCDEFPROP) + present(MIBMEUV) + present(MIBGITEV) + present(LOCGITV) + present(MIBNPVENV) + present(MIBNPPRESV) + present(MIBNPPVV) + present(MIBNP1AV) + present(MIBNPDEV) + present(MIBMEUC) + present(MIBGITEC) + present(LOCGITC) + present(MIBNPVENC) + present(MIBNPPRESC) + present(MIBNPPVC) + present(MIBNP1AC) + present(MIBNPDEC) + present(MIBMEUP) + present(MIBGITEP) + present(LOCGITP) + present(MIBNPVENP) + present(MIBNPPRESP) + present(MIBNPPVP) + present(MIBNP1AP) + present(MIBNPDEP) + present(MIBNPDCT) + present(BICREV) + present(LOCNPCGAV) + present(LOCGITCV) + present(BI2AV) + present(BICDEV) + present(LOCDEFNPCGAV) + present(BICREC) + present(LOCNPCGAC) + present(LOCGITCC) + present(BI2AC) + present(BICDEC) + present(LOCDEFNPCGAC) + present(BICREP) + present(LOCNPCGAPAC) + present(LOCGITCP) + present(BI2AP) + present(BICDEP) + present(LOCDEFNPCGAPAC) + present(BICHREV) + present(LOCNPV) + present(LOCGITHCV) + present(BICHDEV) + present(LOCDEFNPV) + present(BICHREC) + present(LOCNPC) + present(LOCGITHCC) + present(BICHDEC) + present(LOCDEFNPC) + present(BICHREP) + present(LOCNPPAC) + present(LOCGITHCP) + present(BICHDEP) + present(LOCDEFNPPAC) + present(BNCPROV) + present(BNCPROPVV) + present(BNCPRO1AV) + present(BNCPRODEV) + present(BNCPMVCTV) + present(BNCPROC) + present(BNCPROPVC) + present(BNCPRO1AC) + present(BNCPRODEC) + present(BNCPMVCTC) + present(BNCPROP) + present(BNCPROPVP) + present(BNCPRO1AP) + present(BNCPRODEP) + present(BNCPMVCTP) + present(BNCREV) + present(BN1AV) + present(BNCDEV) + present(BNCREC) + present(BN1AC) + present(BNCDEC) + present(BNCREP) + present(BN1AP) + present(BNCDEP) + present(BNHREV) + present(BNHDEV) + present(BNHREC) + present(BNHDEC) + present(BNHREP) + present(BNHDEP) + present(BNCNPV) + present(BNCNPPVV) + present(BNCNP1AV) + present(BNCNPDEV) + present(BNCNPC) + present(BNCNPPVC) + present(BNCNP1AC) + present(BNCNPDEC) + present(BNCNPP) + present(BNCNPPVP) + present(BNCNP1AP) + present(BNCNPDEP) + present(BNCNPDCT) + present(BNCAABV) + present(ANOCEP) + present(PVINVE) + present(INVENTV) + present(BNCAADV) + present(DNOCEP) + present(BNCAABC) + present(ANOVEP) + present(PVINCE) + present(INVENTC) + present(BNCAADC) + present(DNOCEPC) + present(BNCAABP) + present(ANOPEP) + present(PVINPE) + present(INVENTP) + present(BNCAADP) + present(DNOCEPP) + 0
TTSBP = sum([TTSB1, TTSB2, TTSB3, TTSB4])
FRNP = FRN1 + FRN2 + FRN3 + FRN4
# TODO MAJOCAPTARDIF_D
# TODO MAJORDTARDIF_P
PVBAR3VG = BPVRCM + PVTAXSB
PRZP = PENIN1 + PENIN2 + PENIN3 + PENIN4
TRCMRABD = RCMRABD + _2RCMRABD
PPE_AVRPRO1P = present(FEXP) + present(BAFP) + present(BAEXP) + present(BACREP) + present(_4BACREP) + present(BACDEP) + present(BAHEXP) + present(BAHREP) + present(_4BAHREP) + present(BAHDEP) + present(BICEXP) + present(BICNOP) + present(BICDNP) + present(BIHEXP) + present(BIHNOP) + present(BIHDNP) + present(BNCEXP) + present(BNCREP) + present(BNCDEP) + present(BNHEXP) + present(BNHREP) + present(BNHDEP) + present(MIBEXP) + present(BNCPROEXP) + present(MIBVENP) + present(MIBPRESP) + present(BNCPROP) + present(BAFPVP) + present(MIBPVP) + present(BNCPROPVP) + present(BAFORESTP) + present(AUTOBICVP) + present(AUTOBICPP) + present(AUTOBNCP) + present(LOCPROP) + present(LOCPROCGAP) + present(LOCDEFPROCGAP) + present(LOCDEFPROP) + present(XHONOAAP) + present(XHONOP)
MIBNPRC = MIBNPVENC + MIBNPPRESC
CS_RE168 = RE168
ACELJBGL = BCEL_JBGL * 1 - ART1731BIS + min(BCEL_JBGL, max(ACELJBGL_P + ACELJBGLP2, ACELJBGL1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELLIERJB + CELLIERJG + CELLIERJL) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
SPENETCT = BNCPROPVV + BNCPROPVC + BNCPROPVP - BNCPMVCTV - BNCPMVCTC - BNCPMVCTP
ZIGMONTS = is_positive(BCVNSAL + V_CVNANT)
DHEBE = RVCURE + RCCURE
BASSURC3 = max(0, CESSASSC - LIM_ASSUR3)
MIBNPRV = MIBNPVENV + MIBNPPRESV
ADUFLOGIH_1 = arr(min(DUFLOGI + 0, LIMDUFLO) / 9) + arr(min(DUFLOGH + 0, LIMDUFLO - min(DUFLOGI + 0, LIMDUFLO)) / 9) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
ZIGPROVYF = is_positive(CSPROVYF + CSPROVYN) * TYPE2
ACELHNO_R = positif_ou_nul(CELLIERHN + CELLIERHO) * BCEL_HNO * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TTSBNC = TSHALLOC + ALLOC + max(0, SALEXTC - COD1BD)
# TODO MAJOIRTARDIF_R
DCREAT = CONVCREA
SOMDEFANT = DEFAA5 + DEFAA4 + DEFAA3 + DEFAA2 + DEFAA1 + DEFAA0
DCELJP = CELLIERJP
NATMAJCDIS = 1
PPE_BOOL_NADA3 = min(1, is_positive(TSHALLO3 + 0) * null(PPETPP3 + 0) * null(PPENHP3 + 0) + is_positive(SALEXT3 + 0) * null(PPETPP3 + 0) * null(PPEXT3 + 0))
DCELRREDLN = CELRREDLN
TGLTSREMPTOTM = sum([TGLTSREMPVM, TGLTSREMPCM, TGLTSREMP1M, TGLTSREMP2M, TGLTSREMP3M, TGLTSREMP4M])
ZIPQF5TOT = sum([ZIPQFV5, ZIPQFC5, ZIPQF15, ZIPQF25, ZIPQF35, ZIPQF45])
TMIBNETNPVF = sum([TMIB_NETNPVV, TMIB_NETNPVC, TMIB_NETNPVP])
DCEL = CELSOMN
# TODO TRPQRVO5M
RCELREP_HR_R = is_positive(CELREPHR) * arr(CELREPHR * TX25 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BARAP = BACREP + _4BACREP - BACDEP * 1 - is_positive(ART1731BIS * PREM8_11)
REVF = sum([PENFV, PENFC, PENF1, PENF2, PENF3, PENF4])
RAA = arr(TX_REDREPAS / 100 * BAA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BTPSJ = BPVSJ * 1 - is_positive(IPVLOC)
BCEL_HJK = arr(min(CELLIERHJ + CELLIERHK + 0, LIMCELLIER) / 9)
TXPFITAXA = 40 if (V_CODPFITAXA == 3 or V_CODPFITAXA == 30 or V_CODPFITAXA == 55) else (80 if (V_CODPFITAXA == 4 or V_CODPFITAXA == 5) else (100 if (V_CODPFITAXA == 6) else 0))
# TODO MAJOIR17_2TARDIF_P
REVPRRQHT = sum([PRR2V + PRR2ZV, PRR2C + PRR2ZC, PRR21 + PRR2Z1, PRR22 + PRR2Z2, PRR23 + PRR2Z3, PRR24 + PRR2Z4])
DENPLOCV = LOCNPCGAV + LOCGITCV - LOCDEFNPCGAV + LOCNPV + LOCGITHCV - LOCDEFNPV
SOMMEA719 = present(BAEXV) + present(BACREV) + present(_4BACREV) + present(BA1AV) + present(BACDEV) + present(BAEXC) + present(BACREC) + present(_4BACREC) + present(BA1AC) + present(BACDEC) + present(BAEXP) + present(BACREP) + present(_4BACREP) + present(BA1AP) + present(BACDEP) + present(BAHEXV) + present(BAHREV) + present(_4BAHREV) + present(BAHDEV) + present(BAHEXC) + present(BAHREC) + present(_4BAHREC) + present(BAHDEC) + present(BAHEXP) + present(BAHREP) + present(_4BAHREP) + present(BAHDEP) + present(BICEXV) + present(BICNOV) + present(LOCPROCGAV) + present(BI1AV) + present(BICDNV) + present(LOCDEFPROCGAV) + present(BICEXC) + present(BICNOC) + present(LOCPROCGAC) + present(BI1AC) + present(BICDNC) + present(LOCDEFPROCGAC) + present(BICEXP) + present(BICNOP) + present(LOCPROCGAP) + present(BI1AP) + present(BICDNP) + present(LOCDEFPROCGAP) + present(BIHEXV) + present(BIHNOV) + present(LOCPROV) + present(BIHDNV) + present(LOCDEFPROV) + present(BIHEXC) + present(BIHNOC) + present(LOCPROC) + present(BIHDNC) + present(LOCDEFPROC) + present(BIHEXP) + present(BIHNOP) + present(LOCPROP) + present(BIHDNP) + present(LOCDEFPROP) + present(BICNPEXV) + present(BICREV) + present(LOCNPCGAV) + present(BI2AV) + present(BICDEV) + present(LOCDEFNPCGAV) + present(BICNPEXC) + present(BICREC) + present(LOCNPCGAC) + present(BI2AC) + present(BICDEC) + present(LOCDEFNPCGAC) + present(BICNPEXP) + present(BICREP) + present(LOCNPCGAPAC) + present(BI2AP) + present(BICDEP) + present(LOCDEFNPCGAPAC) + present(BICNPHEXV) + present(BICHREV) + present(LOCNPV) + present(BICHDEV) + present(LOCDEFNPV) + present(BICNPHEXC) + present(BICHREC) + present(LOCNPC) + present(BICHDEC) + present(LOCDEFNPC) + present(BICNPHEXP) + present(BICHREP) + present(LOCNPPAC) + present(BICHDEP) + present(LOCDEFNPPAC) + present(BNCEXV) + present(BNCREV) + present(BN1AV) + present(BNCDEV) + present(BNCEXC) + present(BNCREC) + present(BN1AC) + present(BNCDEC) + present(BNCEXP) + present(BNCREP) + present(BN1AP) + present(BNCDEP) + present(BNHEXV) + present(BNHREV) + present(BNHDEV) + present(BNHEXC) + present(BNHREC) + present(BNHDEC) + present(BNHEXP) + present(BNHREP) + present(BNHDEP) + present(XHONOAAV) + present(XHONOV) + present(XHONOAAC) + present(XHONOC) + present(XHONOAAP) + present(XHONOP) + present(BNCNPREXAAV) + present(BNCAABV) + present(BNCAADV) + present(BNCNPREXV) + present(ANOCEP) + present(DNOCEP) + present(PVINVE) + present(INVENTV) + present(BNCNPREXAAC) + present(BNCAABC) + present(BNCAADC) + present(BNCNPREXC) + present(ANOVEP) + present(DNOCEPC) + present(PVINCE) + present(INVENTC) + present(BNCNPREXAAP) + present(BNCAABP) + present(BNCAADP) + present(BNCNPREXP) + present(ANOPEP) + present(DNOCEPP) + present(PVINPE) + present(INVENTP) + 0
_2RV2 = arr(RENTAX5 * TXRVT2 / 100)
HONONETP = arr(XHONOP * MAJREV) + XHONOAAP
MIB_NETCT = MIBPVV + MIBPVC + MIBPVP - BICPMVCTV - BICPMVCTC - BICPMVCTP
TGLTSREMPTOT = sum([TGLTSREMPV, TGLTSREMPC, TGLTSREMP1, TGLTSREMP2, TGLTSREMP3, TGLTSREMP4])
ACELREPYJ = CELREPYJ * 1 - ART1731BIS + min(CELREPYJ, max(ACELREPYJ_P + ACELREPYJP2, ACELREPYJ1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
SOMMEA890 = SOMMEA881 + present(TSHALLOV) + present(TSHALLOC) + present(CARTSV) + present(CARTSC) + present(CARTSNBAV) + present(CARTSNBAC)
_2PRBV = CARPEV + PENSALV + CODRAZ
PRELIB = PPLIB + RCMLIB
ZIPQTS1TOT = sum([ZIPQTSV1, ZIPQTSC1, ZIPQTS11, ZIPQTS21, ZIPQTS31, ZIPQTS41])
PRQZP = CODRCZ + CODRDZ + CODREZ + CODRFZ
# TODO RDSCAC
DEDMIN1 = is_positive(DETS1) * MIN_DEMEMPLOI + 1 - is_positive(DETS1) * MIN_DEDSFORFTS
PRB1 = PRBR1 + PALI1 + PENIN1
PL_PB = arr(PLAF_DEDPRFOYER - sum([APBV * IND_APBV, APBC * IND_APBC, APB1 * IND_APB1, APB2 * IND_APB2, APB3 * IND_APB3, APB4 * IND_APB4]))
INDRNSP = is_positive(present(ANOCEP) + present(BA1AP) + present(BACDEP) + present(BACREP) + present(BAEXP) + present(BAF1AP) + present(BAFP) + present(BAFPVP) + present(BAHDEP) + present(BAHEXP) + present(BAHREP) + present(BAPERPP) + present(BI1AP) + present(BI2AP) + present(BICDEP) + present(BICDNP) + present(BICEXP) + present(BICHDEP) + present(BICNOP) + present(BIHDNP) + present(BIHEXP) + present(BIHNOP) + present(BIPERPP) + present(BN1AP) + present(BNCDEP) + present(BNCEXP) + present(BNCPRO1AP) + present(BNCPROP) + present(BNCPMVCTV) + present(BNCPRODEP) + present(BNCPROEXP) + present(BNCPROPVP) + present(BNCREP) + present(BNHDEP) + present(BNHEXP) + present(BNHREP) + present(DAGRI6) + present(DAGRI5) + present(DAGRI4) + present(DAGRI3) + present(DAGRI2) + present(DAGRI1) + present(DEFBIC1) + present(DEFBIC2) + present(DEFBIC3) + present(DEFBIC4) + present(DEFBIC5) + present(DEFBIC6) + present(DNOCEP) + present(FEXP) + present(MIB1AP) + present(BICPMVCTV) + present(BICPMVCTC) + present(BICPMVCTP) + present(MIBDEP) + present(MIBEXP) + present(MIBPRESP) + present(MIBPVP) + present(MIBVENP) + present(PVINVE) + present(RCSP) + 0)
DINVRED = INVREDMEU
PRR2P = sum([PRR21, PRR22, PRR23, PRR24])
XBIPC = BIHEXC + BICEXC
VARIPTEFN = max(0, IPTEFN * 1 - is_positive(SOMMEMOND_2) * 1 - PREM8_11 - DEFZU * is_positive(SOMMEMOND_2) * 1 - PREM8_11 - DEFZU * PREM8_11) * present(IPTEFN)
BCEL_FABC = arr(min(CELLIERFA + CELLIERFB + CELLIERFC, LIMCELLIER) / 9)
SPEPVNPC = BNCNP1AC - BNCNPDEC
DCELHNO = CELLIERHN + CELLIERHO
# TODO MAJOHR17_2TARDIF_D
DENPLOCAFFP = is_positive(present(LOCNPCGAPAC) + present(LOCGITCP) + present(LOCDEFNPCGAPAC) + present(LOCNPPAC) + present(LOCGITHCP) + present(LOCDEFNPPAC))
DLOYIMP = LOYIMP
PRQCJ = CARPEC + PEBFC
DCELRREDLZ = CELRREDLZ
TXPF1728CRP = 10 if (V_CODPF1728CRP == 7 or V_CODPF1728CRP == 10 or V_CODPF1728CRP == 17 or V_CODPF1728CRP == 18) else (40 if (V_CODPF1728CRP == 8 or V_CODPF1728CRP == 11) else (80 if (V_CODPF1728CRP == 31) else 0))
ACELREPHH = CELREPHH * 1 - ART1731BIS + min(CELREPHH, max(ACELREPHH_P + ACELREPHHP2, ACELREPHH1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
T2TSNV = CARTSV + REMPLAV
BNNAV = BNCREV - BNCDEV * 1 - is_positive(ART1731BIS * PREM8_11)
DCELFABC = CELLIERFA + CELLIERFB + CELLIERFC
BCEL_NQ = arr(min(CELLIERNQ + 0, LIMCELLIER) / 5)
ZIPQRF2TOT = sum([ZIPQRF12, ZIPQRF22])
BNCC = BNHREC + BNCREC - BNHDEC - BNCDEC
TXPFIRSE3 = 40 if (V_CODPFIRSE3 == 3 or V_CODPFIRSE3 == 30 or V_CODPFIRSE3 == 55) else (80 if (V_CODPFIRSE3 == 4 or V_CODPFIRSE3 == 5) else (100 if (V_CODPFIRSE3 == 6) else 0))
DRCVM = DPVRCM
PERPPLAFPANT = present(PERPPLAFCP) * PERPPLAFCP + 1 - present(PERPPLAFCP) * V_BTPERPP
TGLFTOT = sum([TGLFV, TGLFC, TGLF1, TGLF2, TGLF3, TGLF4])
PLOCC = min(0, LOCPROC - LOCDEFPROC * 1 - is_positive(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFPROC * 1 - is_positive(ART1731BIS * PREM8_11) - LOCPROC) + arr(max(0, LOCPROC - LOCDEFPROC * 1 - is_positive(ART1731BIS * PREM8_11)) * MAJREV) * is_positive(LOCPROC - LOCDEFPROC * 1 - is_positive(ART1731BIS * PREM8_11))
PPE_BOOL_ACT_COND = is_positive(is_positive(TSHALLOV) + is_positive(TSHALLOC) + is_positive(TSHALLO1) + is_positive(TSHALLO2) + is_positive(TSHALLO3) + is_positive(TSHALLO4) + is_positive(GLD1V) + is_positive(GLD2V) + is_positive(GLD3V) + is_positive(GLD1C) + is_positive(GLD2C) + is_positive(GLD3C) + is_positive(BPCOSAV) + is_positive(BPCOSAC) + is_positive(TSASSUV) + is_positive(TSASSUC) + is_positive(CARTSV) * is_positive(CARTSNBAV) + is_positive(CARTSC) * is_positive(CARTSNBAC) + is_positive(CARTSP1) * is_positive(CARTSNBAP1) + is_positive(CARTSP2) * is_positive(CARTSNBAP2) + is_positive(CARTSP3) * is_positive(CARTSNBAP3) + is_positive(CARTSP4) * is_positive(CARTSNBAP4) + is_positive(FEXV) + is_positive(BAFV) + is_positive(BAFPVV) + is_positive(BAEXV) + is_positive(BACREV) + is_positive(_4BACREV) + is_positive(BACDEV * 1 - is_positive(ART1731BIS)) + is_positive(BAHEXV) + is_positive(BAHREV) + is_positive(_4BAHREV) + is_positive(BAHDEV * 1 - is_positive(ART1731BIS)) + is_positive(MIBEXV) + is_positive(MIBVENV) + is_positive(MIBPRESV) + is_positive(MIBPVV) + is_positive(BICEXV) + is_positive(BICNOV) + is_positive(BICDNV * 1 - is_positive(ART1731BIS)) + is_positive(BIHEXV) + is_positive(BIHNOV) + is_positive(BIHDNV * 1 - is_positive(ART1731BIS)) + is_positive(FEXC) + is_positive(BAFC) + is_positive(BAFPVC) + is_positive(BAEXC) + is_positive(BACREC) + is_positive(_4BACREC) + is_positive(BACDEC * 1 - is_positive(ART1731BIS)) + is_positive(BAHEXC) + is_positive(BAHREC) + is_positive(_4BAHREC) + is_positive(BAHDEC * 1 - is_positive(ART1731BIS)) + is_positive(MIBEXC) + is_positive(MIBVENC) + is_positive(MIBPRESC) + is_positive(MIBPVC) + is_positive(BICEXC) + is_positive(BICNOC) + is_positive(BICDNC * 1 - is_positive(ART1731BIS)) + is_positive(BIHEXC) + is_positive(BIHNOC) + is_positive(BIHDNC * 1 - is_positive(ART1731BIS)) + is_positive(FEXP) + is_positive(BAFP) + is_positive(BAFPVP) + is_positive(BAEXP) + is_positive(BACREP) + is_positive(_4BACREP) + is_positive(BACDEP * 1 - is_positive(ART1731BIS)) + is_positive(BAHEXP) + is_positive(BAHREP) + is_positive(_4BAHREP) + is_positive(BAHDEP * 1 - is_positive(ART1731BIS)) + is_positive(MIBEXP) + is_positive(MIBVENP) + is_positive(MIBPRESP) + is_positive(BICEXP) + is_positive(MIBPVP) + is_positive(BICNOP) + is_positive(BICDNP * 1 - is_positive(ART1731BIS)) + is_positive(BIHEXP) + is_positive(BIHNOP) + is_positive(BIHDNP * 1 - is_positive(ART1731BIS)) + is_positive(BNCPROEXV) + is_positive(BNCPROV) + is_positive(BNCPROPVV) + is_positive(BNCEXV) + is_positive(BNCREV) + is_positive(BNCDEV * 1 - is_positive(ART1731BIS)) + is_positive(BNHEXV) + is_positive(BNHREV) + is_positive(BNHDEV * 1 - is_positive(ART1731BIS)) + is_positive(BNCCRV) + is_positive(BNCPROEXC) + is_positive(BNCPROC) + is_positive(BNCPROPVC) + is_positive(BNCEXC) + is_positive(BNCREC) + is_positive(BNCDEC * 1 - is_positive(ART1731BIS)) + is_positive(BNHEXC) + is_positive(BNHREC) + is_positive(BNHDEC * 1 - is_positive(ART1731BIS)) + is_positive(BNCCRC) + is_positive(BNCPROEXP) + is_positive(BNCPROP) + is_positive(BNCPROPVP) + is_positive(BNCEXP) + is_positive(BNCREP) + is_positive(BNCDEP * 1 - is_positive(ART1731BIS)) + is_positive(BNHEXP) + is_positive(BNHREP) + is_positive(BNHDEP * 1 - is_positive(ART1731BIS)) + is_positive(BNCCRP) + is_positive(BIPERPV) + is_positive(BIPERPC) + is_positive(BIPERPP) + is_positive(BAFORESTV) + is_positive(BAFORESTC) + is_positive(BAFORESTP) + is_positive(AUTOBICVV) + is_positive(AUTOBICPV) + is_positive(AUTOBNCV) + is_positive(AUTOBICVC) + is_positive(AUTOBICPC) + is_positive(AUTOBNCC) + is_positive(AUTOBICVP) + is_positive(AUTOBICPP) + is_positive(AUTOBNCP) + is_positive(LOCPROCGAV) + is_positive(LOCPROV) + is_positive(LOCDEFPROCGAV * 1 - is_positive(ART1731BIS)) + is_positive(LOCDEFPROV * 1 - is_positive(ART1731BIS)) + is_positive(LOCPROCGAC) + is_positive(LOCPROC) + is_positive(LOCDEFPROCGAC * 1 - is_positive(ART1731BIS)) + is_positive(LOCDEFPROC * 1 - is_positive(ART1731BIS)) + is_positive(LOCPROCGAP) + is_positive(LOCPROP) + is_positive(LOCDEFPROCGAP * 1 - is_positive(ART1731BIS)) + is_positive(LOCDEFPROP * 1 - is_positive(ART1731BIS)) + is_positive(XHONOAAV) + is_positive(XHONOAAC) + is_positive(XHONOAAP) + is_positive(XHONOV) + is_positive(XHONOC) + is_positive(XHONOP) + is_positive(GLDGRATV) + is_positive(GLDGRATC) + is_positive(CODDAJ) + is_positive(CODEAJ) + is_positive(CODDBJ) + is_positive(CODEBJ) + is_positive(SALEXTV) + is_positive(SALEXTC) + is_positive(SALEXT1) + is_positive(SALEXT2) + is_positive(SALEXT3) + is_positive(SALEXT4))
DISFE = ISFETRANG
# TODO DEFRFNONI
CS_PREREV = PREREV
PPE_BOOL_BT = V_0BT * is_positive(2 - V_0AV - BOOLENF)
INDCTX = 1 if (V_NOTRAIT + 0 == 23 or V_NOTRAIT + 0 == 33 or V_NOTRAIT + 0 == 43 or V_NOTRAIT + 0 == 53 or V_NOTRAIT + 0 == 63) else 0
TXPF1728RSE3 = 10 if (V_CODPF1728RSE3 == 7 or V_CODPF1728RSE3 == 10 or V_CODPF1728RSE3 == 17 or V_CODPF1728RSE3 == 18) else (40 if (V_CODPF1728RSE3 == 8 or V_CODPF1728RSE3 == 11) else (80 if (V_CODPF1728RSE3 == 31) else 0))
LIG3510 = is_positive(V_FORVA) * 1 - positif_ou_nul(BAFV) + is_positive(V_FORCA) * 1 - positif_ou_nul(BAFC) + is_positive(V_FORPA) * 1 - positif_ou_nul(BAFP) * 1 - is_positive(IPVLOC) * LIG1
SOMMEA896 = SOMMEA881
RECUMBISIR = V_ANTREIR if (V_NIMPAIR + 0 == 1) else (V_ANTREIR * positif_ou_nul(V_ANTREIR - SEUIL_8))
NATMAJRSE4 = 1
NATMAJREGV = 1
BCEL_FD = arr(min(CELLIERFD, LIMCELLIER) / 5)
MIB_TVENP = MIBVENP + MIBNPVENP + MIBGITEP + LOCGITP
# TODO RIVL6
# TODO MAJOTA17_2TARDIF_D
T2TSN4 = CARTSP4 + REMPLAP4
CSPROVRSE4 = CSPROVYH + CSPROVYP
LIGINRHAUT2 = is_positive(RETCHR22)
DCELREPGV = CELREPGV
XBNCMNPRO = sum([XSPENPV, XSPENPC, XSPENPP])
LIGINRTAX = is_positive(RETTAXA)
EAC = V_0CF + V_0DJ
CSPROVRSE2 = CSPROVYF + CSPROVYN
MIBRV = MIBVENV + MIBPRESV
ACELREPHV = CELREPHV * 1 - ART1731BIS + min(CELREPHV, max(ACELREPHV_P + ACELREPHVP2, ACELREPHV1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PPENBH4 = PPENHP4 + PPEXT4
TMIBNETPF = sum([TMIB_NETPV, TMIB_NETPC, TMIB_NETPP])
BNCAFFC = is_positive(present(BNHREC) + present(BNCREC) + present(BNHDEC) + present(BNCDEC))
LIGANTREIR = is_positive(V_ANTREIR + 0) * 1 - is_positive(V_ANTCR) * 1 - APPLI_OCEANS
TSHALLOP = TSHALLO1 + TSHALLO2 + TSHALLO3 + TSHALLO4
V_EAG = (V_REGCO + 0) in [{'values': [6, 7], 'type': 'enumeration_values'}]
# TODO TXPF1728REGV
VARIPTEFP = IPTEFP + max(0, DEFZU * is_positive(SOMMEMOND_2) * 1 - PREM8_11 + DEFZU * PREM8_11 - IPTEFN) * is_positive(present(IPTEFP) + present(IPTEFN))
# TODO IN07
RB04 = IND_TDR
NATMAJRSE2 = 1
# TODO HAUTREVANTAF
MIB_TPRESC = MIBPRESC + MIBNPPRESC + MIBMEUC
# TODO MAJOISFTARDIF_R
DCELREPHX = CELREPHX
DPERPV = PERP_COTV + RACCOTV
PPE_AVRPRO1C = present(FEXC) + present(BAFC) + present(BAEXC) + present(BACREC) + present(_4BACREC) + present(BACDEC) + present(BAHEXC) + present(BAHREC) + present(_4BAHREC) + present(BAHDEC) + present(BICEXC) + present(BICNOC) + present(BICDNC) + present(BIHEXC) + present(BIHNOC) + present(BIHDNC) + present(BNCEXC) + present(BNCREC) + present(BNCDEC) + present(BNHEXC) + present(BNHREC) + present(BNHDEC) + present(MIBEXC) + present(BNCPROEXC) + present(MIBVENC) + present(MIBPRESC) + present(BNCPROC) + present(BAFPVC) + present(MIBPVC) + present(BNCPROPVC) + present(BAFORESTC) + present(AUTOBICVC) + present(AUTOBICPC) + present(AUTOBNCC) + present(LOCPROC) + present(LOCPROCGAC) + present(LOCDEFPROCGAC) + present(LOCDEFPROC) + present(XHONOAAC) + present(XHONOC)
DAR = DEFAA5 + DEFAA4 + DEFAA3 + DEFAA2 + DEFAA1 + DEFAA0 * 1 - PREM8_11 * 1 - is_positive(IPVLOC)
ZIPQTS2TOT = sum([ZIPQTSV2, ZIPQTSC2, ZIPQTS12, ZIPQTS22, ZIPQTS32, ZIPQTS42])
DCELREPGW = CELREPGW
XBNNPP = BNCNPREXP + BNCNPREXAAP
XBAC = BAHEXC + BAEXC
ACELREPHA = CELREPHA * 1 - ART1731BIS + min(CELREPHA, max(ACELREPHA_P + ACELREPHAP2, ACELREPHA1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
AISFFIP = arr(ISFFIP * TX50 / 100)
SPEDREPNPP = BNCNPDEP - BNCNP1AP * is_positive(BNCNPDEP - BNCNP1AP) - BNCPRO1AP - BNCPRODEP * is_positive(BNCPRO1AP - BNCPRODEP) * is_positive(BNCNPDEP - BNCNP1AP * is_positive(BNCNPDEP - BNCNP1AP) - BNCPRO1AP - BNCPRODEP * is_positive(BNCPRO1AP - BNCPRODEP))
BIPTTAV = BIPTAV + BI1AV
PPETX1 = PPE_TX1
MIBNETNPPLF = sum([MIB_NETNPPLV, MIB_NETNPPLC, MIB_NETNPPLP])
XFORFAIT = sum([FEXV, FEXC, FEXP])
ACELREPHS = CELREPHS * 1 - ART1731BIS + min(CELREPHS, max(ACELREPHS_P + ACELREPHSP2, ACELREPHS1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
AISFDONF = arr(ISFDONF * TX75 / 100)
TMIBNETVF = sum([TMIB_NETVV, TMIB_NETVC, TMIB_NETVP])
PRQZC = CODRBZ
MIBDREPNPC = MIBNPDEC - MIBNP1AC * is_positive(MIBNPDEC - MIBNP1AC) - MIB1AC - MIBDEC * is_positive(MIB1AC - MIBDEC) * is_positive(MIBNPDEC - MIBNP1AC * is_positive(MIBNPDEC - MIBNP1AC) - MIB1AC - MIBDEC * is_positive(MIB1AC - MIBDEC))
PERPPLAFCANT = present(PERPPLAFCC) * PERPPLAFCC + 1 - present(PERPPLAFCC) * V_BTPERPC
NPLOCSSPAC = min(0, LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) * positif_ou_nul(LOCDEFNPPAC - LOCNPPAC - LOCGITHCP) + arr(max(0, LOCNPPAC + LOCGITHCP - LOCDEFNPPAC) * MAJREV) * is_positive(LOCNPPAC + LOCGITHCP - LOCDEFNPPAC)
MAJTXGLO4 = is_positive(is_positive(is_positive(MAJOGLO03) + is_positive(MAJOGLO55)) * is_positive(is_positive(MAJOGLO04) + is_positive(MAJOGLO05)) + is_positive(is_positive(MAJOGLO03) + is_positive(MAJOGLO55)) * is_positive(MAJOGLO06) + is_positive(is_positive(MAJOGLO04) + is_positive(MAJOGLO05)) * is_positive(MAJOGLO06)) * -1 + is_positive(is_positive(MAJOGLO03) + is_positive(MAJOGLO55)) * 1 - is_positive(is_positive(MAJOGLO04) + is_positive(MAJOGLO05) + is_positive(MAJOGLO06)) * 40 + is_positive(is_positive(MAJOGLO04) + is_positive(MAJOGLO05)) * 1 - is_positive(is_positive(MAJOGLO03) + is_positive(MAJOGLO55) + is_positive(MAJOGLO06)) * 80 + is_positive(MAJOGLO06) * 1 - is_positive(is_positive(MAJOGLO03) + is_positive(MAJOGLO04) + is_positive(MAJOGLO05) + is_positive(MAJOGLO55)) * 100
PPE_BOOL_NADA4 = min(1, is_positive(TSHALLO4 + 0) * null(PPETPP4 + 0) * null(PPENHP4 + 0) + is_positive(SALEXT4 + 0) * null(PPETPP4 + 0) * null(PPEXT4 + 0))
DCELJOQR = CELLIERJO + CELLIERJQ + CELLIERJR
DCELREPHS = CELREPHS
PPENBHV = PPENHV + PPEXTV
BTP18 = BPV18V + BPV18C * 1 - is_positive(IPVLOC)
# TODO MAJORDTARDIF_R
SOMDEFBANI = BACDEV + BAHDEV + BACDEC + BAHDEC + BACDEP + BAHDEP
INDTRAIT = null(5 - V_IND_TRAIT)
SPEDREPNPC = BNCNPDEC - BNCNP1AC * is_positive(BNCNPDEC - BNCNP1AC) - BNCPRO1AC - BNCPRODEC * is_positive(BNCPRO1AC - BNCPRODEC) * is_positive(BNCNPDEC - BNCNP1AC * is_positive(BNCNPDEC - BNCNP1AC) - BNCPRO1AC - BNCPRODEC * is_positive(BNCPRO1AC - BNCPRODEC))
ZIGLOANT = is_positive(V_GLOANT) * TYPE2 * 1 - APPLI_OCEANS
PERPBICPNC = BICEXC + BICNOC - BICDNC * 1 - is_positive(ART1731BIS) + BIHEXC + BIHNOC - BIHDNC * 1 - is_positive(ART1731BIS) + BIPERPC + LOCPROCGAC - LOCDEFPROCGAC * 1 - is_positive(ART1731BIS) + LOCPROC - LOCDEFPROC * 1 - is_positive(ART1731BIS)
ACELREPGL = CELREPGL * 1 - ART1731BIS + min(CELREPGL, max(ACELREPGL_P + ACELREPGLP2, ACELREPGL1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NMAJLOY4 = sum([MAJOLOY55, MAJOLOY3, MAJOLOY4, MAJOLOY5, MAJOLOY6])
# TODO MAJOLOYTARDIF_D
TXPF1728CVN = 10 if (V_CODPF1728CVN == 7 or V_CODPF1728CVN == 10 or V_CODPF1728CVN == 17 or V_CODPF1728CVN == 18) else (40 if (V_CODPF1728CVN == 8 or V_CODPF1728CVN == 11) else (80 if (V_CODPF1728CVN == 31) else 0))
# TODO PCAPANTAFF
TRAITSUP20 = is_positive(V_NOTRAIT - 20)
XBNNPV = BNCNPREXV + BNCNPREXAAV
DCELRREDMG = CELRREDMG
SURIMP = IPSURSI
NOCEPIMPP = is_positive(ANOPEP - DNOCEPP * 1 - is_positive(ART1731BIS * PREM8_11)) * arr(ANOPEP - DNOCEPP * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV) + positif_ou_nul(DNOCEPP * 1 - is_positive(ART1731BIS * PREM8_11) - ANOPEP) * ANOPEP - DNOCEPP * 1 - is_positive(ART1731BIS * PREM8_11) + BNNAAP
BI2P = BI2AP
AUBAINE13A = max(0, min(V_A13REELA, V_DIFTEOREEL))
FRF = sum([FRD1 * 1 - IND_101, FRD2 * 1 - IND_102, FRD3 * 1 - IND_103, FRD4 * 1 - IND_104, FRDV * 1 - IND_10V, FRDC * 1 - IND_10C]) * 1 - is_positive(APPLI_COLBERT + APPLI_OCEANS)
MIB_NP1AC = MIBNP1AC - MIBNPDEC
NIN = V_0AP + V_0AF + V_0CG + V_0CR * 0.5
NATMAJC = 1
ACELREPGS = CELREPGS * 1 - ART1731BIS + min(CELREPGS, max(ACELREPGS_P + ACELREPGSP2, ACELREPGS1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ACELHNO = BCEL_HNO * 1 - ART1731BIS + min(BCEL_HNO, max(ACELHNO_P + ACELHNOP2, ACELHNO1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELLIERHN + CELLIERHO) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TOTDABNCNP = null(4 - V_IND_TRAIT) * DABNCNP6 + DABNCNP5 + DABNCNP4 + DABNCNP3 + DABNCNP2 + DABNCNP1 * 1 - is_positive(ART1731BIS * PREM8_11) + null(5 - V_IND_TRAIT) * max(0, min(DABNCNP6 + DABNCNP5 + DABNCNP4 + DABNCNP3 + DABNCNP2 + DABNCNP1, TOTDABNCNP1731 * ART1731BIS * 1 - PREM8_11 + DABNCNP6 + DABNCNP5 + DABNCNP4 + DABNCNP3 + DABNCNP2 + DABNCNP1 * 1 - is_positive(ART1731BIS * PREM8_11)))
PREHAB = PREHABT + PREHABTN + PREHABTN1 + PREHABT1 + PREHABT2 + PREHABTN2 + PREHABTVT
CSGDED3UA = is_positive(ABDETPLUS + 0) * min(arr(ABDETPLUS + COD3UA + 0 * TX051 / 100), COD3UA)
DCOLENT = INVOMREP + NRETROC50 + NRETROC40 + INVENDI + INVOMENTMN + RETROCOMLH + RETROCOMMB + INVOMENTKT + RETROCOMLI + RETROCOMMC + INVOMENTKU + INVOMQV + INVENDEB2009 + INVRETRO1 + INVRETRO2 + INVIMP + INVDOMRET50 + INVDOMRET60 + INVDIR2009 + INVOMRETPA + INVOMRETPB + INVOMRETPD + INVOMRETPE + INVOMRETPF + INVOMRETPH + INVOMRETPI + INVOMRETPJ + INVOMRETPL + INVOMRETPM + INVOMRETPN + INVOMRETPO + INVOMRETPP + INVOMRETPR + INVOMRETPS + INVOMRETPT + INVOMRETPU + INVOMRETPW + INVOMRETPX + INVOMRETPY + INVOMENTRG + INVOMENTRI + INVOMENTRJ + INVOMENTRK + INVOMENTRL + INVOMENTRM + INVOMENTRO + INVOMENTRP + INVOMENTRQ + INVOMENTRR + INVOMENTRT + INVOMENTRU + INVOMENTRV + INVOMENTRW + INVOMENTRY + INVOMENTNU + INVOMENTNV + INVOMENTNW + INVOMENTNY + CODHSA + CODHSB + CODHSC + CODHSE + CODHSF + CODHSG + CODHSH + CODHSJ + CODHSK + CODHSL + CODHSM + CODHSO + CODHSP + CODHSQ + CODHSR + CODHST + CODHSU + CODHSV + CODHSW + CODHSY + CODHSZ + CODHTA + CODHTB + CODHTD
ZIGRSE5ANT = is_positive(V_RSE5ANT) * TYPE2 * 1 - APPLI_OCEANS
# TODO MAJOHRTARDIF_P
PPE_BOOL_SEULPAC = null(V_0CF + V_0CR + V_0DJ + V_0DN + V_0CH + V_0DP - 1)
# TODO PALIQV
_2REGPRIVM = arr(RESTUC * MAJREV)
LIG390 = GLD1V + GLD1C
LIG062C = CARPEC + CARPENBAC + PENSALC + PENSALNBC + CODRBZ
XTSBV = sum([GLD1V, GLD2V, GLD3V]) + TSBNV + BPCOSAV + TSASSUV + XETRANV + EXOCETV + GLDGRATV
RNBE_1 = RDENS + RDENL + RDENU + RDENSQAR + RDENLQAR + RDENUQAR
# TODO CS_DEG
TGATASAC = BPCOSAC + GLDGRATC
BASSURC2 = max(0, CESSASSC - BASSURC3 - LIM_ASSUR2)
# TODO ISFDEGR
PRQVO = CARPEV + PEBFV
PRB3 = PRBR3 + PALI3 + PENIN3
ZIGRSE4ANT = is_positive(V_RSE4ANT) * TYPE2 * 1 - APPLI_OCEANS
PERP_INDC = is_positive(0 + is_positive(TSHALLOC) + is_positive(ALLOC) + is_positive(GLD1C) + is_positive(GLD2C) + is_positive(GLD3C) + is_positive(GLDGRATC) + is_positive(BPCOSAC) + is_positive(TSASSUC) + is_positive(CARTSC) + is_positive(FEXC) + is_positive(BAFC) + is_positive(BAFPVC) + is_positive(BAEXC) + is_positive(BACREC) + is_positive(_4BACREC) + is_positive(BACDEC * 1 - is_positive(ART1731BIS)) + is_positive(BAHEXC) + is_positive(BAHREC) + is_positive(_4BAHREC) + is_positive(BAHDEC * 1 - is_positive(ART1731BIS)) + is_positive(BAPERPC) + is_positive(MIBEXC) + is_positive(MIBVENC) + is_positive(MIBPRESC) + is_positive(MIBPVC) + is_positive(AUTOBICVC) + is_positive(AUTOBICPC) + is_positive(BICEXC) + is_positive(BICNOC) + is_positive(BICDNC * 1 - is_positive(ART1731BIS)) + is_positive(BIHEXC) + is_positive(BIHNOC) + is_positive(BIHDNC * 1 - is_positive(ART1731BIS)) + is_positive(BIPERPC) + is_positive(LOCPROCGAC) - is_positive(LOCDEFPROCGAC * 1 - is_positive(ART1731BIS)) + is_positive(LOCPROC) - is_positive(LOCDEFPROC * 1 - is_positive(ART1731BIS)) + is_positive(BNCPROEXC) + is_positive(BNCPROC) + is_positive(BNCPROPVC) + is_positive(AUTOBNCC) + is_positive(BNCEXC) + is_positive(BNCREC) + is_positive(BNCDEC * 1 - is_positive(ART1731BIS)) + is_positive(BNHEXC) + is_positive(BNHREC) + is_positive(BNHDEC * 1 - is_positive(ART1731BIS)) + is_positive(BNCCRC))
XBICNPHDP = BICNPEXP + BICREP
XBICHDV = BICEXV + BICNOV
DCELRREDLF = CELRREDLF
BCEL_2012 = arr(min(CELLIERJA + CELLIERJD + CELLIERJE + CELLIERJF + CELLIERJH + CELLIERJJ + CELLIERJK + CELLIERJM + CELLIERJN + 0, LIMCELLIER) / 9)
_2PRB2 = CARPEP2 + PENSALP2 + CODRDZ
RBAC = BAHREC + _4BAHREC + BACREC + _4BACREC + BAFORESTC + BAFC + BAFPVC - BACDEC - BAHDEC
GLPRRTOTM = sum([GLPRRVM + GLPRRZVM, GLPRRCM + GLPRRZCM, GLPRR1M + GLPRRZ1M, GLPRR2M + GLPRRZ2M, GLPRR3M + GLPRRZ3M, GLPRR4M + GLPRRZ4M])
BCEL_HL = arr(min(CELLIERHL + 0, LIMCELLIER) / 9)
DEDIV = 1 - is_positive(RE168 + TAX1649) * CHRDED
NMAJ4 = sum([MAJOIR30, MAJOIR32, MAJOIR55, MAJOIR3, MAJOIR4, MAJOIR5, MAJOIR6])
PRC = PRBRC
ACELRREDLS = CELRREDLS * 1 - ART1731BIS + min(CELRREDLS, max(ACELRREDLS_P + ACELRREDLSP2, ACELRREDLS1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RD_PREREV = PREREV
RCMNAB = RCMHAD + DISQUO
MIBDREPNPV = MIBNPDEV - MIBNP1AV * is_positive(MIBNPDEV - MIBNP1AV) - MIB1AV - MIBDEV * is_positive(MIB1AV - MIBDEV) * is_positive(MIBNPDEV - MIBNP1AV * is_positive(MIBNPDEV - MIBNP1AV) - MIB1AV - MIBDEV * is_positive(MIB1AV - MIBDEV))
PS_PREREV = PREREV
PPERSATOT = RSAFOYER + RSAPAC1 + RSAPAC2
PPE_BOOL_NADA2 = min(1, is_positive(TSHALLO2 + 0) * null(PPETPP2 + 0) * null(PPENHP2 + 0) + is_positive(SALEXT2 + 0) * null(PPETPP2 + 0) * null(PPEXT2 + 0))
DEDSP = sum([DEDS1, DEDS2, DEDS3, DEDS4])
RFCD = RFORDI + FONCI + REAMOR
TSBN2 = TSHALLO2 + ALLO2
DCELREPYC = CELREPYC
MAJTXCDIS = COPETO
BNNAAV = BNCAABV - BNCAADV * 1 - is_positive(ART1731BIS * PREM8_11)
# TODO RIVL3
PMIB_NETVV = MIBVENV - PMIB_AVV
SOMMEA862 = present(MIBEXV) + present(MIBVENV) + present(MIBPRESV) + present(MIBPVV) + present(MIB1AV) + present(MIBDEV) + present(BICPMVCTV) + present(MIBEXC) + present(MIBVENC) + present(MIBPRESC) + present(MIBPVC) + present(MIB1AC) + present(MIBDEC) + present(BICPMVCTC) + present(MIBEXP) + present(MIBVENP) + present(MIBPRESP) + present(MIBPVP) + present(MIB1AP) + present(MIBDEP) + present(BICPMVCTP) + present(BICEXV) + present(BICNOV) + present(LOCPROCGAV) + present(BI1AV) + present(BICDNV) + present(LOCDEFPROCGAV) + present(BICEXC) + present(BICNOC) + present(LOCPROCGAC) + present(BI1AC) + present(BICDNC) + present(LOCDEFPROCGAC) + present(BICEXP) + present(BICNOP) + present(LOCPROCGAP) + present(BI1AP) + present(BICDNP) + present(LOCDEFPROCGAP) + present(BIHEXV) + present(BIHNOV) + present(LOCPROV) + present(BIHDNV) + present(LOCDEFPROV) + present(BIHEXC) + present(BIHNOC) + present(LOCPROC) + present(BIHDNC) + present(LOCDEFPROC) + present(BIHEXP) + present(BIHNOP) + present(LOCPROP) + present(BIHDNP) + present(LOCDEFPROP) + present(MIBMEUV) + present(MIBGITEV) + present(LOCGITV) + present(MIBNPEXV) + present(MIBNPVENV) + present(MIBNPPRESV) + present(MIBNPPVV) + present(MIBNP1AV) + present(MIBNPDEV) + present(MIBMEUC) + present(MIBGITEC) + present(LOCGITC) + present(MIBNPEXC) + present(MIBNPVENC) + present(MIBNPPRESC) + present(MIBNPPVC) + present(MIBNP1AC) + present(MIBNPDEC) + present(MIBMEUP) + present(MIBGITEP) + present(LOCGITP) + present(MIBNPEXP) + present(MIBNPVENP) + present(MIBNPPRESP) + present(MIBNPPVP) + present(MIBNP1AP) + present(MIBNPDEP) + present(MIBNPDCT) + present(BICNPEXV) + present(BICREV) + present(LOCNPCGAV) + present(LOCGITCV) + present(BI2AV) + present(BICDEV) + present(LOCDEFNPCGAV) + present(BICNPEXC) + present(BICREC) + present(LOCNPCGAC) + present(LOCGITCC) + present(BI2AC) + present(BICDEC) + present(LOCDEFNPCGAC) + present(BICNPEXP) + present(BICREP) + present(LOCNPCGAPAC) + present(LOCGITCP) + present(BI2AP) + present(BICDEP) + present(LOCDEFNPCGAPAC) + present(BICNPHEXV) + present(BICHREV) + present(LOCNPV) + present(LOCGITHCV) + present(BICHDEV) + present(LOCDEFNPV) + present(BICNPHEXC) + present(BICHREC) + present(LOCNPC) + present(LOCGITHCC) + present(BICHDEC) + present(LOCDEFNPC) + present(BICNPHEXP) + present(BICHREP) + present(LOCNPPAC) + present(LOCGITHCP) + present(BICHDEP) + present(LOCDEFNPPAC) + present(BNCPROEXV) + present(BNCPROV) + present(BNCPROPVV) + present(BNCPRO1AV) + present(BNCPRODEV) + present(BNCPMVCTV) + present(BNCPROEXC) + present(BNCPROC) + present(BNCPROPVC) + present(BNCPRO1AC) + present(BNCPRODEC) + present(BNCPMVCTC) + present(BNCPROEXP) + present(BNCPROP) + present(BNCPROPVP) + present(BNCPRO1AP) + present(BNCPRODEP) + present(BNCPMVCTP) + present(BNCPMVCTV) + present(BNCEXV) + present(BNCREV) + present(BN1AV) + present(BNCDEV) + present(BNCEXC) + present(BNCREC) + present(BN1AC) + present(BNCDEC) + present(BNCEXP) + present(BNCREP) + present(BN1AP) + present(BNCDEP) + present(BNHEXV) + present(BNHREV) + present(BNHDEV) + present(BNHEXC) + present(BNHREC) + present(BNHDEC) + present(BNHEXP) + present(BNHREP) + present(BNHDEP) + present(XSPENPV) + present(BNCNPV) + present(BNCNPPVV) + present(BNCNP1AV) + present(BNCNPDEV) + present(XSPENPC) + present(BNCNPC) + present(BNCNPPVC) + present(BNCNP1AC) + present(BNCNPDEC) + present(XSPENPP) + present(BNCNPP) + present(BNCNPPVP) + present(BNCNP1AP) + present(BNCNPDEP) + present(BNCNPDCT) + present(BNCNPREXAAV) + present(BNCAABV) + present(BNCAADV) + present(BNCNPREXV) + present(ANOCEP) + present(DNOCEP) + present(PVINVE) + present(INVENTV) + present(BNCNPREXAAC) + present(BNCAABC) + present(BNCAADC) + present(BNCNPREXC) + present(ANOVEP) + present(DNOCEPC) + present(PVINCE) + present(INVENTC) + present(BNCNPREXAAP) + present(BNCAABP) + present(BNCAADP) + present(BNCNPREXP) + present(ANOPEP) + present(DNOCEPP) + present(PVINPE) + present(INVENTP)
RD_RE168 = RE168
TMIB_VENTAP = min(MIBVENP + MIBNPVENP, max(MIN_MBIC, arr(MIBVENP + MIBNPVENP * TX_MIBVEN / 100)))
TXPF1728RSE1 = 10 if (V_CODPF1728RSE1 == 7 or V_CODPF1728RSE1 == 10 or V_CODPF1728RSE1 == 17 or V_CODPF1728RSE1 == 18) else (40 if (V_CODPF1728RSE1 == 8 or V_CODPF1728RSE1 == 11) else (80 if (V_CODPF1728RSE1 == 31) else 0))
TMIB_TPRESC = MIBPRESC + AUTOBICPC + MIBNPPRESC + MIBMEUC
AGREDTARDIF = is_positive(RETIR + RETTAXA + RETPCAP + RETLOY + RETHAUTREV + RETCS + RETRD + RETPS + RETCVN + RETCDIS + RETGLOA + RETRSE1 + RETRSE2 + RETRSE3 + RETRSE4 + RETRSE5 + RETREGV + RETARPRIM + FLAG_RETARD + 0)
BCELCOM2011 = arr(min(CELLIERNP + CELLIERNR + CELLIERNS + CELLIERNT + 0, LIMCELLIER) / 5)
TXPFI = 40 if (V_CODPFI == 3 or V_CODPFI == 30 or V_CODPFI == 55) else (80 if (V_CODPFI == 4 or V_CODPFI == 5 or V_CODPFI == 32) else (100 if (V_CODPFI == 6) else 0))
BINHTAP = max(0, arr(BICHREP - BICHDEP * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV)) + min(0, BICHREP - BICHDEP * 1 - is_positive(ART1731BIS * PREM8_11))
REPENT1 = CODHSB + CODHSG + CODHSL + CODHSQ + CODHSV + CODHTA + CODHSA + CODHSF + CODHSK + CODHSP + CODHSU + CODHSZ + CODHSC + CODHSH + CODHSM + CODHSR + CODHSW + CODHTB + CODHSE + CODHSJ + CODHSO + CODHST + CODHSY + CODHTD
REPRCMBIS = DEFRCM + DEFRCM2 + DEFRCM3 + DEFRCM4 + DEFRCM5 + DEFRCM6 * 1 - is_positive(ART1731BIS) + min(DEFRCM + DEFRCM2 + DEFRCM3 + DEFRCM4 + DEFRCM5 + DEFRCM6, max(REPRCM1731, max(REPRCM_P, REPRCMP2))) * ART1731BIS * 1 - PREM8_11 + 0 * ART1731BIS * PREM8_11
XBICNPRO = sum([XBINPV, XBINPC, XBINPP])
TSBN4 = TSHALLO4 + ALLO4
_2RV4 = arr(RENTAX7 * TXRVT4 / 100)
LIG2 = 1 - is_positive(ANNUL2042)
DCELREPGX = CELREPGX
NOCEP = ANOCEP - min(DNOCEP, DNOCEP1731 + 0) * is_positive(ART1731BIS) + DNOCEP * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP6, DABNCNP61731 + 0) * is_positive(ART1731BIS) + DABNCNP6 * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP5, DABNCNP51731 + 0) * is_positive(ART1731BIS) + DABNCNP5 * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP4, DABNCNP41731 + 0) * is_positive(ART1731BIS) + DABNCNP4 * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP3, DABNCNP31731 + 0) * is_positive(ART1731BIS) + DABNCNP3 * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP2, DABNCNP21731 + 0) * is_positive(ART1731BIS) + DABNCNP2 * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP1, DABNCNP11731 + 0) * is_positive(ART1731BIS) + DABNCNP1 * 1 - is_positive(ART1731BIS * PREM8_11)
ZIGCDISPROV = is_positive(CDISPROV) * TYPE2
VLHAB = max(0, IPVLOC)
RV1 = arr(RVB1 * TXRVT1 / 100)
DLOCENT = CODHAA + CODHAB + CODHAC + CODHAD + CODHAF + CODHAG + CODHAH + CODHAI + CODHAK + CODHAL + CODHAM + CODHAN + CODHAP + CODHAQ + CODHAR + CODHAS + CODHAU + CODHAV + CODHAW + CODHAX + CODHBA + CODHBB + CODHBE + CODHBF
DEFBICNPF = DEFRIBIC * 1 - PREM8_11 * max(0, min(BICDEV + BICDEC + BICDEP + BICHDEV + BICHDEC + BICHDEP, max(DFBICNPF1731, max(DFBICNPF_P, DFBICNPFP2)) - BICDEV - BICDEC - BICDEP - BICHDEV - BICHDEC - BICHDEP))
EXOCET = EXOCETC + EXOCETV
DEPLOCC = LOCPROCGAC - LOCDEFPROCGAC + LOCPROC - LOCDEFPROC
BNCV = BNHREV + BNCREV - BNHDEV - BNCDEV
SOMMEA877 = present(BAEXV) + present(BACREV) + present(_4BACREV) + present(BA1AV) + present(BACDEV) + present(BAEXC) + present(BACREC) + present(_4BACREC) + present(BA1AC) + present(BACDEC) + present(BAEXP) + present(BACREP) + present(_4BACREP) + present(BA1AP) + present(BACDEP) + present(BAHEXV) + present(BAHREV) + present(_4BAHREV) + present(BAHDEV) + present(BAHEXC) + present(BAHREC) + present(_4BAHREC) + present(BAHDEC) + present(BAHEXP) + present(BAHREP) + present(_4BAHREP) + present(BAHDEP) + present(BICEXV) + present(BICNOV) + present(BI1AV) + present(BICDNV) + present(BICEXC) + present(BICNOC) + present(BI1AC) + present(BICDNC) + present(BICEXP) + present(BICNOP) + present(BI1AP) + present(BICDNP) + present(BIHEXV) + present(BIHNOV) + present(BIHDNV) + present(BIHEXC) + present(BIHNOC) + present(BIHDNC) + present(BIHEXP) + present(BIHNOP) + present(BIHDNP)
XBIMN = sum([MIBEXV + MIBNPEXV, MIBEXC + MIBNPEXC, MIBEXP + MIBNPEXP])
MIB_NP1AV = MIBNP1AV - MIBNPDEV
TPMIB_AVV = min(MIBVENV + AUTOBICVV, max(MIN_MBIC, arr(MIBVENV + AUTOBICVV * TX_MIBVEN / 100)))
XBICIMPP = XBICHDP + XBICNPHDP
BICNPR = sum([BINTAV, BINTAC, BINTAP])
PERPBNCMNV = BNCPROEXV + max(0, BNCPROV + AUTOBNCV - max(arr(BNCPROV + AUTOBNCV * SPETXAB / 100), MIN_SPEBNC)) + BNCPROPVV - BNCPMVCTV
PERPBICPNV = BICEXV + BICNOV - BICDNV * 1 - is_positive(ART1731BIS) + BIHEXV + BIHNOV - BIHDNV * 1 - is_positive(ART1731BIS) + BIPERPV + LOCPROCGAV - LOCDEFPROCGAV * 1 - is_positive(ART1731BIS) + LOCPROV - LOCDEFPROV * 1 - is_positive(ART1731BIS)
TTSBN1 = TSHALLO1 + ALLO1 + max(0, SALEXT1 - COD1CD)
SOMMEA71702 = is_positive(CELLIERNA) + is_positive(CELLIERNB) + is_positive(CELLIERNC) + is_positive(CELLIERND) + is_positive(CELLIERNE) + is_positive(CELLIERNF) + is_positive(CELLIERNG) + is_positive(CELLIERNH) + is_positive(CELLIERNI) + is_positive(CELLIERNJ) + is_positive(CELLIERNK) + is_positive(CELLIERNL) + is_positive(CELLIERNM) + is_positive(CELLIERNN) + is_positive(CELLIERNO) + is_positive(CELLIERNP) + is_positive(CELLIERNQ) + is_positive(CELLIERNR) + is_positive(CELLIERNS) + is_positive(CELLIERNT) + 0
# TODO BIH1C
TPMIB_AVP = min(MIBVENP + AUTOBICVP, max(MIN_MBIC, arr(MIBVENP + AUTOBICVP * TX_MIBVEN / 100)))
ZIGLOA22 = is_positive(RETGLOA22)
HRNBTRFR = positif_ou_nul(V_BTRFRHR1 * 1 - is_positive(RFRH1) + RFRH1) + positif_ou_nul(V_BTRFRHR2 * 1 - is_positive(RFRH2) + RFRH2)
AISFFCPI = arr(ISFFCPI * TX50 / 100)
GATASAV = BPCOSAV + GLDGRATV
PMIB_AVP = min(MIBVENP, max(MIN_MBIC, arr(MIBVENP * TX_MIBVEN / 100)))
LIGCREAPP = is_positive(CREAPP) * LIG1 * LIG2
LIGEXITAX3 = is_positive(EXITTAX3) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RNBE = RNBE_1 * 1 - ART1731BIS + min(RNBE_1, max(RNBE_P + RNBEP2, RNBE1731 + 0) * 1 - PREM8_11) * ART1731BIS
LIGIPCAPC = present(PCAPTAXC) * 1 - is_positive(ANNUL2042 + 0) * LIG1
MAJTXR = COPETO
PPE_NBNONELI = sum([is_positive(PPEPRIME1), is_positive(PPEPRIME2), is_positive(PPEPRIME3), is_positive(PPEPRIME4), is_positive(PPEPRIMEU), is_positive(PPEPRIMEN)]) + sum([positif_ou_nul(PPE_RTA1 - PPELIMRPB) * is_positive(PPE_RCONTP1 - PPELIMRPH), positif_ou_nul(PPE_RTA2 - PPELIMRPB) * is_positive(PPE_RCONTP2 - PPELIMRPH), positif_ou_nul(PPE_RTA3 - PPELIMRPB) * is_positive(PPE_RCONTP3 - PPELIMRPH), positif_ou_nul(PPE_RTA4 - PPELIMRPB) * is_positive(PPE_RCONTP4 - PPELIMRPH), positif_ou_nul(PPE_RTAU - PPELIMRPB) * is_positive(PPE_RCONTPU - PPELIMRPH), positif_ou_nul(PPE_RTAN - PPELIMRPB) * is_positive(PPE_RCONTPN - PPELIMRPH)])
BTP3G = BPVRCM * 1 - is_positive(IPVLOC)
LIG106 = is_positive(RETIR)
TEXTSV = TTSBNV + BPCOSAV + GLDGRATV + T2TSNV
APIQABCD_1 = arr(min(PINELQD + 0, LIMDUFLO - min(DUFLOEL + 0, LIMDUFLO)) / 9) + arr(min(PINELQB + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + DUFLOEK + 0, LIMDUFLO)) / 9) + arr(min(PINELQC + 0, LIMDUFLO - min(DUFLOEL + PINELQD + 0, LIMDUFLO)) / 6) + arr(min(PINELQA + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + DUFLOEK + PINELQB + 0, LIMDUFLO)) / 6) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
BINTAV = BICREV - BICDEV * 1 - is_positive(ART1731BIS * PREM8_11)
LIG7CY = is_positive(COD7CY) * LIG1 * LIG2
TRAITINF20 = is_positive(20 - V_NOTRAIT)
BARSC = BAHREC + _4BAHREC - BAHDEC * 1 - is_positive(ART1731BIS * PREM8_11)
TOTPA = arr(PAAV * MAJREV) + PAAP
PMIB_NETPV = MIBPRESV - PMIB_APV
IND_ZIGRFG = is_positive(V_NOTRAIT - 20) * is_positive(present(RFORDI) + present(RFDORD) + present(RFDHIS) + present(RFMIC))
LIGBPTPGJ = is_positive(BPTP19WGWJ) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
# TODO RIVL4RES
PERPPLAFNUV3ANT = present(PERPPLAFNUV3) * PERPPLAFNUV3 + 1 - present(PERPPLAFNUV3) * V_BTPERPNUV3
ZIGRSE2ANT = is_positive(V_RSE2ANT) * TYPE2 * 1 - APPLI_OCEANS
ZIGINT4 = is_positive(RETRSE4) * LIG2
LIGCELLB = is_positive(DCELRREDLB) * LIG1 * LIG2
PVBARPS = max(0, BPVRCM + COD3SG + COD3SL + ABDETPLUS + ABIMPPV + CODRVG - DPVRCM + COD3SH + COD3SM + ABDETMOINS + ABIMPMV) + PVTITRESOC
MAJTXREGV = COPETO
LIGTAXASSUR = is_positive(present(CESSASSV) + present(CESSASSC)) * 1 - is_positive(ANNUL2042) * LIG1
TPMIB_APC = min(MIBPRESC + AUTOBICPC, max(MIN_MBIC, arr(MIBPRESC + AUTOBICPC * TX_MIBPRES / 100)))
RGLOA = GLDGRATV + GLDGRATC
APPLI_BATCH = 1
TOTCRA = V_ANTCR
LIGCELYD = is_positive(DCELREPYD) * LIG1 * LIG2
BPCAPTAXC = PCAPTAXC - arr(PCAPTAXC * TX_DEDPER / 100)
LIGELURASC = is_positive(ELURASC) * LIG1 * LIG2
LIGSPEDREPP = is_positive(SPEDREPP) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
ZIPQPALIMANT1TOT = sum([ZIPQPALIMANTV1, ZIPQPALIMANTC1, ZIPQPALIMANT11, ZIPQPALIMANT21, ZIPQPALIMANT31, ZIPQPALIMANT41])
TMIB_TPRESV = MIBPRESV + AUTOBICPV + MIBNPPRESV + MIBMEUV
IND_ZIGPROF = is_positive(V_NOTRAIT - 20) * is_positive(present(RCSV) + present(RCSC) + present(RCSP))
PERPPLAFVANT = present(PERPPLAFCV) * PERPPLAFCV + 1 - present(PERPPLAFCV) * V_BTPERPV
SOMMEA895 = present(BAEXV) + present(BACREV) + present(_4BACREV) + present(BA1AV) + present(BACDEV) + present(BAEXC) + present(BACREC) + present(_4BACREC) + present(BA1AC) + present(BACDEC) + present(BAEXP) + present(BACREP) + present(_4BACREP) + present(BA1AP) + present(BACDEP) + present(BAHEXV) + present(BAHREV) + present(_4BAHREV) + present(BAHDEV) + present(BAHEXC) + present(BAHREC) + present(_4BAHREC) + present(BAHDEC) + present(BAHEXP) + present(BAHREP) + present(_4BAHREP) + present(BAHDEP) + present(FEXV) + present(BAFV) + 1 - null(V_FORVA + 0) + present(BAFPVV) + present(BAF1AV) + present(FEXC) + present(BAFC) + 1 - null(V_FORCA + 0) + present(BAFPVC) + present(BAF1AC) + present(FEXP) + present(BAFP) + 1 - null(V_FORPA + 0) + present(BAFPVP) + present(BAF1AP)
PS_REVETRANG = 0
PENSALP = PENSALP1 + PENSALP2 + PENSALP3 + PENSALP4
MIBNETNPVLF = sum([MIB_NETNPVLV, MIB_NETNPVLC, MIB_NETNPVLP])
BI2 = sum([BI2V, BI2C, BI2P])
SPEPVNPP = BNCNP1AP - BNCNPDEP
DLOGDOM = INVLOG2008 + INVLGDEB2009 + INVLGDEB + INVLGAUTRE + INVLGDEB2010 + INVLOG2009 + INVOMLOGOA + INVOMLOGOB + INVOMLOGOC + INVOMLOGOH + INVOMLOGOI + INVOMLOGOJ + INVOMLOGOK + INVOMLOGOL + INVOMLOGOM + INVOMLOGON + INVOMLOGOO + INVOMLOGOP + INVOMLOGOQ + INVOMLOGOR + INVOMLOGOS + INVOMLOGOT + INVOMLOGOU + INVOMLOGOV + INVOMLOGOW + CODHOD + CODHOE + CODHOF + CODHOG + CODHOX + CODHOY + CODHOZ + CODHUA + CODHUB + CODHUC + CODHUD + CODHUE + CODHUF + CODHUG
CIGLOTOT = COD8XF + COD8XG + COD8XH
SOMMEA885 = present(BA1AV) + present(BA1AC) + present(BA1AP) + present(BI1AV) + present(BI1AC) + present(BI1AP) + present(BN1AV) + present(BN1AC) + present(BN1AP)
DPRESCOMP = PRESCOMP2000 + RDPRESREPORT
DCELHL = CELLIERHL
TXPFICDIS = 40 if (V_CODPFICDIS == 3 or V_CODPFICDIS == 30 or V_CODPFICDIS == 55) else (80 if (V_CODPFICDIS == 4 or V_CODPFICDIS == 5) else (100 if (V_CODPFICDIS == 6) else 0))
DPATNAT = PATNAT4
TEXTS4 = TTSBN4 + T2TSN4
TMIB_PRESAC = min(MIBPRESC + MIBNPPRESC, max(MIN_MBIC, arr(MIBPRESC + MIBNPPRESC * TX_MIBPRES / 100)))
RPI_QABCD = arr(arr(min(PINELQD + 0, LIMDUFLO - min(DUFLOEL + 0, LIMDUFLO)) / 9) * TX29 / 100) + arr(arr(min(PINELQB + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + DUFLOEK + 0, LIMDUFLO)) / 9) * TX18 / 100) + arr(arr(min(PINELQC + 0, LIMDUFLO - min(DUFLOEL + PINELQD + 0, LIMDUFLO)) / 6) * TX23 / 100) + arr(arr(min(PINELQA + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + DUFLOEK + PINELQB + 0, LIMDUFLO)) / 6) * TX12 / 100) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
LIGREPHA = is_positive(RINVLOCREA + INVLOGREHA + INVLOCXV + COD7UZ) * LIG1 * LIG2
MIBDREPV = MIBDEV - MIB1AV * is_positive(MIBDEV - MIB1AV) - MIBNP1AV - MIBNPDEV * is_positive(MIBNP1AV - MIBNPDEV) * is_positive(MIBDEV - MIB1AV * is_positive(MIBDEV - MIB1AV) - MIBNP1AV - MIBNPDEV * is_positive(MIBNP1AV - MIBNPDEV))
LIGCELGW = is_positive(DCELREPGW) * LIG1 * LIG2
INDIS26 = 1 if (V_NOTRAIT + 0 == 26 or V_NOTRAIT + 0 == 36 or V_NOTRAIT + 0 == 46 or V_NOTRAIT + 0 == 56 or V_NOTRAIT + 0 == 66) else 0
BTP2 = PEA * 1 - is_positive(IPVLOC)
PPEPEXO4 = is_positive(PPE_AVRPRO1P + 0) + is_positive(SALEXT4 + 0) + 4 * is_positive(PPEXT4 + PPETPP4 + 0)
ACELREPYG = CELREPYG * 1 - ART1731BIS + min(CELREPYG, max(ACELREPYG_P + ACELREPYGP2, ACELREPYG1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TXPF1728LOY = 10 if (V_CODPF1728LOY == 7 or V_CODPF1728LOY == 10 or V_CODPF1728LOY == 17 or V_CODPF1728LOY == 18) else (40 if (V_CODPF1728LOY == 8 or V_CODPF1728LOY == 11) else (80 if (V_CODPF1728LOY == 31) else 0))
BAFORP = arr(BAFP * MAJREV) + BAFORESTP + BAFPVP
DEDMIN4 = is_positive(DETS4) * MIN_DEMEMPLOI + 1 - is_positive(DETS4) * MIN_DEDSFORFTS
MIBNPRP = MIBNPVENP + MIBNPPRESP
VAR0AV = is_positive(V_0BT * V_0AV)
DILMIX = LOCMEUBIX
LIG82 = is_positive(present(RDSYVO) + present(RDSYCJ) + present(RDSYPP)) * LIG1 * LIG2
LIGREVRF = is_positive(present(FONCI) + present(REAMOR)) * 1 - is_positive(IPVLOC) * LIG1 * LIG2
RCM2FA = COD2FA * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
TPMIB_NETVC = MIBVENC + AUTOBICVC - TPMIB_AVC
SOMMEA538PP = present(BAF1AP) + present(BA1AP) + present(MIB1AP) + present(BI1AP) + present(MIBNP1AP) + present(BI2AP) + present(BNCPRO1AP) + present(BN1AP) + present(BNCNP1AP) + present(PVINPE)
ACELREPYH = CELREPYH * 1 - ART1731BIS + min(CELREPYH, max(ACELREPYH_P + ACELREPYHP2, ACELREPYH1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
SPEPVPP = BNCPRO1AP - BNCPRODEP
ABICPDECC = AUTOBICVC + AUTOBICPC
SOMMEA030 = sum([is_positive(TSHALLO1) + is_positive(ALLO1) + is_positive(CARTSP1) + is_positive(REMPLAP1) + is_positive(CARTSNBAP1) + is_positive(REMPLANBP1) + is_positive(PRBR1) + is_positive(CARPEP1) + is_positive(CARPENBAP1) + is_positive(PALI1) + is_positive(FRN1) + is_positive(PPETPP1) + is_positive(PPENHP1) + is_positive(PENSALP1) + is_positive(PENSALNBP1), is_positive(TSHALLO2) + is_positive(ALLO2) + is_positive(CARTSP2) + is_positive(REMPLAP2) + is_positive(CARTSNBAP2) + is_positive(REMPLANBP2) + is_positive(PRBR2) + is_positive(CARPEP2) + is_positive(CARPENBAP2) + is_positive(PALI2) + is_positive(FRN2) + is_positive(PPETPP2) + is_positive(PPENHP2) + is_positive(PENSALP2) + is_positive(PENSALNBP2), is_positive(TSHALLO3) + is_positive(ALLO3) + is_positive(CARTSP3) + is_positive(REMPLAP3) + is_positive(CARTSNBAP3) + is_positive(REMPLANBP3) + is_positive(PRBR3) + is_positive(CARPEP3) + is_positive(CARPENBAP3) + is_positive(PALI3) + is_positive(FRN3) + is_positive(PPETPP3) + is_positive(PPENHP3) + is_positive(PENSALP3) + is_positive(PENSALNBP3), is_positive(TSHALLO4) + is_positive(ALLO4) + is_positive(CARTSP4) + is_positive(REMPLAP4) + is_positive(CARTSNBAP4) + is_positive(REMPLANBP4) + is_positive(PRBR4) + is_positive(CARPEP4) + is_positive(CARPENBAP4) + is_positive(PALI4) + is_positive(FRN4) + is_positive(PPETPP4) + is_positive(PPENHP4) + is_positive(PENSALP4) + is_positive(PENSALNBP4)]) + is_positive(RSAPAC1) + is_positive(RSAPAC2) + is_positive(FEXP) + is_positive(BAFP) + is_positive(BAFORESTP) + is_positive(BAFPVP) + is_positive(BAF1AP) + is_positive(BAEXP) + is_positive(BACREP) + is_positive(_4BACREP) + is_positive(BA1AP) + is_positive(BACDEP * 1 - is_positive(ART1731BIS)) + is_positive(BAHEXP) + is_positive(BAHREP) + is_positive(_4BAHREP) + is_positive(BAHDEP * 1 - is_positive(ART1731BIS)) + is_positive(MIBEXP) + is_positive(MIBVENP) + is_positive(MIBPRESP) + is_positive(MIBPVP) + is_positive(MIB1AP) + is_positive(MIBDEP) + is_positive(BICPMVCTP) + is_positive(BICEXP) + is_positive(BICNOP) + is_positive(BI1AP) + is_positive(BICDNP * 1 - is_positive(ART1731BIS)) + is_positive(BIHEXP) + is_positive(BIHNOP) + is_positive(BIHDNP * 1 - is_positive(ART1731BIS)) + is_positive(MIBNPEXP) + is_positive(MIBNPVENP) + is_positive(MIBNPPRESP) + is_positive(MIBNPPVP) + is_positive(MIBNP1AP) + is_positive(MIBNPDEP) + is_positive(BICNPEXP) + is_positive(BICREP) + is_positive(BI2AP) + is_positive(min(BICDEP, BICDEP1731 + 0) * is_positive(ART1731BIS) + BICDEP * 1 - ART1731BIS) + is_positive(BICNPHEXP) + is_positive(BICHREP) + is_positive(min(BICHDEP, BICHDEP1731 + 0) * is_positive(ART1731BIS) + BICHDEP * 1 - ART1731BIS) + is_positive(BNCPROEXP) + is_positive(BNCPROP) + is_positive(BNCPROPVP) + is_positive(BNCPRO1AP) + is_positive(BNCPRODEP) + is_positive(BNCPMVCTP) + is_positive(BNCEXP) + is_positive(BNCREP) + is_positive(BN1AP) + is_positive(BNCDEP * 1 - is_positive(ART1731BIS)) + is_positive(BNHEXP) + is_positive(BNHREP) + is_positive(BNHDEP * 1 - is_positive(ART1731BIS)) + is_positive(BNCCRP) + is_positive(BNCNPP) + is_positive(BNCNPPVP) + is_positive(BNCNP1AP) + is_positive(BNCNPDEP) + is_positive(ANOPEP) + is_positive(PVINPE) + is_positive(INVENTP) + is_positive(min(DNOCEPP, DNOCEPP1731 + 0) * is_positive(ART1731BIS) + DNOCEPP * 1 - ART1731BIS) + is_positive(BNCCRFP) + is_positive(BNCAABP) + is_positive(min(BNCAADP, BNCAADP1731 + 0) * is_positive(ART1731BIS) + BNCAADP * 1 - ART1731BIS) + is_positive(RCSP) + is_positive(PPEACP) + is_positive(PPENJP) + is_positive(BAPERPP) + is_positive(BIPERPP) + is_positive(PERPP) + is_positive(PERP_COTP) + is_positive(RACCOTP) + is_positive(PLAF_PERPP) + sum([is_positive(PEBF1), is_positive(PEBF2), is_positive(PEBF3), is_positive(PEBF4)]) + is_positive(COTF1) + is_positive(COTF2) + is_positive(COTF3) + is_positive(COTF4) + is_positive(BNCNPREXAAP) + is_positive(BNCNPREXP) + is_positive(AUTOBICVP) + is_positive(AUTOBICPP) + is_positive(AUTOBNCP) + is_positive(LOCPROCGAP) + is_positive(LOCDEFPROCGAP * 1 - is_positive(ART1731BIS)) + is_positive(LOCPROP) + is_positive(LOCDEFPROP * 1 - is_positive(ART1731BIS)) + is_positive(LOCNPCGAPAC) + is_positive(LOCGITCP) + is_positive(LOCGITHCP) + is_positive(min(LOCDEFNPCGAPAC, LOCDEFNPCGAPAC1731 + 0) * is_positive(ART1731BIS) + LOCDEFNPCGAPAC * 1 - ART1731BIS) + is_positive(LOCNPPAC) + is_positive(min(LOCDEFNPPAC, LOCDEFNPPAC1731 + 0) * is_positive(ART1731BIS) + LOCDEFNPPAC * 1 - ART1731BIS) + is_positive(XHONOAAP) + is_positive(XHONOP) + is_positive(XSPENPP) + is_positive(BANOCGAP) + is_positive(MIBMEUP) + is_positive(MIBGITEP) + is_positive(LOCGITP) + is_positive(SALEXT1) + is_positive(COD1CD) + is_positive(COD1CE) + is_positive(PPEXT1) + is_positive(COD1CH) + is_positive(SALEXT2) + is_positive(COD1DD) + is_positive(COD1DE) + is_positive(PPEXT2) + is_positive(COD1DH) + is_positive(SALEXT3) + is_positive(COD1ED) + is_positive(COD1EE) + is_positive(PPEXT3) + is_positive(COD1EH) + is_positive(SALEXT4) + is_positive(COD1FD) + is_positive(COD1FE) + is_positive(PPEXT4) + is_positive(COD1FH) + is_positive(RDSYPP) + is_positive(PENIN1) + is_positive(PENIN2) + is_positive(PENIN3) + is_positive(PENIN4) + is_positive(CODRCZ) + is_positive(CODRDZ) + is_positive(CODREZ) + is_positive(CODRFZ) + 0
NAPTOTAIR = V_TOTIRANT - V_ANTREIR
# TODO PALIQP
TGLTSTOT = sum([TGLTSV, TGLTSC, TGLTS1, TGLTS2, TGLTS3, TGLTS4])
PVTAUX = BPVSJ + BPVSK + BPV18V + BPV18C + BPCOPTV + BPCOPTC + BPV40V + BPV40C + PEA + GAINPEA
XBINPP = BICNPHEXP + BICNPEXP
SPEDREPC = BNCPRODEC - BNCPRO1AC * is_positive(BNCPRODEC - BNCPRO1AC) - BNCNP1AC - BNCNPDEC * is_positive(BNCNP1AC - BNCNPDEC) * is_positive(BNCPRODEC - BNCPRO1AC * is_positive(BNCPRODEC - BNCPRO1AC) - BNCNP1AC - BNCNPDEC * is_positive(BNCNP1AC - BNCNPDEC))
RIHOTR = arr(INVLOCHOTR + INVLOGHOT * TX_REDIL25 / 100) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
REPENT5 = INVOMREP + NRETROC40 + NRETROC50 + INVENDI
SPEBASABC = SPETOTC
PS_RE168 = RE168
REVDECEXO = FEXV + FEXC + FEXP + BAEXV + BAEXC + BAEXP + BAHEXV + BAHEXC + BAHEXP + MIBEXV + MIBEXC + MIBEXP + BICEXV + BICEXC + BICEXP + BIHEXV + BIHEXC + BIHEXP + MIBNPEXV + MIBNPEXC + MIBNPEXP + BICNPEXV + BICNPEXC + BICNPEXP + BICNPHEXV + BICNPHEXC + BICNPHEXP + BNCPROEXV + BNCPROEXC + BNCPROEXP + BNCEXV + BNCEXC + BNCEXP + BNHEXV + BNHEXC + BNHEXP * 1 - is_positive(APPLI_COLBERT + APPLI_OCEANS)
# TODO MAJOHRTARDIF_R
LIGCELHNO = is_positive(DCELHNO) * LIG1 * LIG2
BDON7UH = min(LIM15000, COD7UH)
DILMJC = LOCMEUBJC
# TODO RIVL2
ADUFLOGIH = ADUFLOGIH_1 * 1 - ART1731BIS + min(ADUFLOGIH_1, max(ADUFLOGIH_P + ADUFLOGIHP2, ADUFLOGIH1731 + 0) * 1 - PREM8_11) * ART1731BIS
TMIB_VENTAV = min(MIBVENV + MIBNPVENV, max(MIN_MBIC, arr(MIBVENV + MIBNPVENV * TX_MIBVEN / 100)))
LIGDEFBANIF = is_positive(DEFBANIF) * is_positive(DEFRIBASUP + DEFRIGLOBSUP) * 1 - PREM8_11
CVNBASE = CVNSALC - COD8YT
MIB_TVENC = MIBVENC + MIBNPVENC + MIBGITEC + LOCGITC
LIGFIPDOM = is_positive(DFIPDOM) * LIG1 * LIG2
LIGCELHG = is_positive(DCELREPHG) * LIG1 * LIG2
ACELREPHT = CELREPHT * 1 - ART1731BIS + min(CELREPHT, max(ACELREPHT_P + ACELREPHTP2, ACELREPHT1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
_2TSN4 = CARTSP4 + REMPLAP4
LIGPVTISOC = is_positive(PVTITRESOC) * LIG1 * LIG2
BI12AP = BI1AP + BI2AP
MAJTXRSE5 = COPETO
PMIB_APP = min(MIBPRESP, max(MIN_MBIC, arr(MIBPRESP * TX_MIBPRES / 100)))
TTSBN3 = TSHALLO3 + ALLO3 + max(0, SALEXT3 - COD1ED)
TXPF1728CHR = 10 if (V_CODPF1728CHR == 7 or V_CODPF1728CHR == 10 or V_CODPF1728CHR == 17 or V_CODPF1728CHR == 18) else (40 if (V_CODPF1728CHR == 8 or V_CODPF1728CHR == 11) else (80 if (V_CODPF1728CRP == 31) else 0))
BIHTAP = max(0, arr(BIHNOP - BIHDNP * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV)) + min(0, BIHNOP - BIHDNP * 1 - is_positive(ART1731BIS * PREM8_11))
DCELREPYI = CELREPYI
DCOTFOR = COTFORET
NPLOCCGASSPAC = LOCNPCGAPAC + LOCGITCP - LOCDEFNPCGAPAC
# TODO MAJOISF17TARDIF_D
LIGMBDREPNPV = is_positive(MIBDREPNPV) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
DDIFAGRI = INTDIFAGRI
LIGINRPCAP = is_positive(RETPCAP)
LIGISFNEW = present(ISFBASE) * 1 - is_positive(20 - V_NOTRAIT) * null(5 - V_IND_TRAIT) * 1 - is_positive(ANNUL2042)
XBICHDC = BICEXC + BICNOC
DMONDT = max(0, RMOND + DEFZU - DMOND)
DCODOU = COD7OU
MAJOHRTARDIF_P1 = MAJOHRTARDIF_P - MAJOHR17_2TARDIF_P
RMONDT = is_positive(RMOND + DEFZU - DMOND) * RMOND + DEFZU - DMOND
BTP5 = PVIMPOS * 1 - is_positive(IPVLOC)
REB = REPSOF
PERPSALV = TSHALLOV + ALLOV + GLD1V + GLD2V + GLD3V + GLDGRATV + BPCOSAV + TSASSUV + CARTSV + REMPLAV + CODDAJ + CODEAJ + max(0, SALEXTV - COD1AD)
PVBAR3WB = PVIMPOS
LIG2052 = 1 - is_positive(V_ANTREIR + 0) * 1 - APPLI_OCEANS
PPESAL3 = PPE_SALAVDEF3 * 1 - PPE_BOOL_SEULPAC
ZIGLOA = is_positive(RETGLOA) * LIG2
TXPFILOY = 40 if (V_CODPFILOY == 3 or V_CODPFILOY == 30 or V_CODPFILOY == 55) else (80 if (V_CODPFILOY == 4 or V_CODPFILOY == 5) else (100 if (V_CODPFILOY == 6) else 0))
LIG134C = is_positive(present(BAFC) + present(BAHREC) + present(BAHDEC) + present(BACREC) + present(BACDEC) + present(BAFPVC) + present(BAFORESTC))
DAGRI = DAGRI1 + DAGRI2 + DAGRI3 + DAGRI4 + DAGRI5 + DAGRI6
BRCM = RCMABD + RCMTNC + RCMAV + RCMHAD + RCMHAB + REGPRIV
ZIGPROVYE = is_positive(CSPROVYE) * TYPE2
GATASAC = BPCOSAC + GLDGRATC
SOMDEFBIC = BICDNV + BIHDNV + BICDNC + BIHDNC + BICDNP + BIHDNP
ACELREPHX = CELREPHX * 1 - ART1731BIS + min(CELREPHX, max(ACELREPHX_P + ACELREPHXP2, ACELREPHX1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DEDMIN3 = is_positive(DETS3) * MIN_DEMEMPLOI + 1 - is_positive(DETS3) * MIN_DEDSFORFTS
PPENEXO2 = null(PPETPP2 + 0) + is_positive(TSHALLO2 + 0) + is_positive(SALEXT2 + 0) + 4 * is_positive(PPENHP2 + 0) + 8 * is_positive(PPEXT2 + 0)
RISFFIP_1 = min(18000, AISFFIP)
DPATNAT2 = PATNAT2
DCELREPYF = CELREPYF
INDRNSV = is_positive(present(ANOCEP) + present(BA1AV) + present(BACDEV) + present(BACREV) + present(BAEXV) + present(BAF1AV) + present(BAFV) + present(BAFPVV) + present(BAHDEV) + present(BAHEXV) + present(BAHREV) + present(BAPERPV) + present(BI1AV) + present(BI2AV) + present(BICDEV) + present(BICDNV) + present(BICEXV) + present(BICHDEV) + present(BICNOV) + present(BIHDNV) + present(BIHEXV) + present(BIHNOV) + present(BIPERPV) + present(BN1AV) + present(BNCDEV) + present(BNCEXV) + present(BNCPRO1AV) + present(BNCPROV) + present(BNCPMVCTV) + present(BNCPRODEV) + present(BNCPROEXV) + present(BNCPROPVV) + present(BNCREV) + present(BNHDEV) + present(BNHEXV) + present(BNHREV) + present(DAGRI6) + present(DAGRI5) + present(DAGRI4) + present(DAGRI3) + present(DAGRI2) + present(DAGRI1) + present(DEFBIC1) + present(DEFBIC2) + present(DEFBIC3) + present(DEFBIC4) + present(DEFBIC5) + present(DEFBIC6) + present(DNOCEP) + present(FEXV) + present(MIB1AV) + present(BICPMVCTV) + present(BICPMVCTC) + present(BICPMVCTP) + present(MIBDEV) + present(MIBEXV) + present(MIBPRESV) + present(MIBPVV) + present(MIBVENV) + present(PVINVE) + present(RCSV) + 0)
INDMAJREV = is_positive(is_positive(BIHNOV) + is_positive(BIHNOC) + is_positive(BIHNOP) + is_positive(BICHREV) + is_positive(BICHREC) + is_positive(BICHREP) + is_positive(BNHREV) + is_positive(BNHREC) + is_positive(BNHREP) + is_positive(ANOCEP) + is_positive(ANOVEP) + is_positive(ANOPEP) + is_positive(BAFV) + is_positive(BAFC) + is_positive(BAFP) + is_positive(BAHREV) + is_positive(BAHREC) + is_positive(BAHREP) + is_positive(_4BAHREV) + is_positive(_4BAHREC) + is_positive(_4BAHREP) + is_positive(REGPRIV))
LIGPVETR = is_positive(present(CIIMPPRO) + present(CIIMPPRO2)) * LIG1 * LIG2
TOTCORSE = CIINVCORSE + IPREPCORSE + CICORSENOW
ZIGINT122 = is_positive(RETRSE122) * LIG2
BI2C = BI2AC
LIG1523 = 1 - present(IND_TDR) * null(V_REGCO - 4) * LIG2
LIGCORSE = is_positive(present(CIINVCORSE) + present(IPREPCORSE) + present(CICORSENOW)) * LIG1 * LIG2
ACELRREDLE = CELRREDLE * 1 - ART1731BIS + min(CELRREDLE, max(ACELRREDLE_P + ACELRREDLEP2, ACELRREDLE1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREP_HV_R = is_positive(CELREPHV) * arr(CELREPHV * TX25 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ZIGCDISANT = is_positive(V_CDISANT) * TYPE2 * 1 - APPLI_OCEANS
# TODO AB
TXPFIRSE4 = 40 if (V_CODPFIRSE4 == 3 or V_CODPFIRSE4 == 30 or V_CODPFIRSE4 == 55) else (80 if (V_CODPFIRSE4 == 4 or V_CODPFIRSE4 == 5) else (100 if (V_CODPFIRSE4 == 6) else 0))
ZIPQTSREMP2TOT = sum([ZIPQTSREMPV2, ZIPQTSREMPC2, ZIPQTSREMP12, ZIPQTSREMP22, ZIPQTSREMP32, ZIPQTSREMP42])
TTSPRDP = sum([TTSPRD1, TTSPRD2, TTSPRD3, TTSPRD4])
BOOL_0AM = is_positive(is_positive(V_0AM + 0) + is_positive(V_0AO + 0))
ACELRREDMH = CELRREDMH * 1 - ART1731BIS + min(CELRREDMH, max(ACELRREDMH_P + ACELRREDMHP2, ACELRREDMH1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
JEUNART = sum([BNCCREAV, BNCCREAC, BNCCREAP])
DILMOA = COD7OA
# TODO RILRES
DISFFCPI = ISFFCPI
ZIGRSE1ANT = is_positive(V_RSE1ANT) * TYPE2 * 1 - APPLI_OCEANS
LIGCEL = is_positive(DCEL) * LIG1 * LIG2
TSPETOTV = BNCPROV + AUTOBNCV + BNCNPV
ZIPQFANT1TOT = sum([ZIPQFANTV1, ZIPQFANTC1, ZIPQFANT11, ZIPQFANT21, ZIPQFANT31, ZIPQFANT41])
NATMAJRSE5 = 1
BINNP = BINTAP + BINHTAP
DCELREPHD = CELREPHD
APATNAT = PATNAT4 * 1 - ART1731BIS + min(PATNAT4, max(APATNAT_P + APATNATP2, APATNAT1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PPENBH3 = PPENHP3 + PPEXT3
BN1C = BN1AC + PVINCE + INVENTC
NAPTOTA = V_IRPSANT - V_ANTRE
PVTAUXPS = BPVSJ + BPVSK + BPV18V + BPV18C + BPCOPTV + BPCOPTC + BPV40V + BPV40C + BPCOSAV + BPCOSAC + PEA + GAINPEA
ACELREPGV = CELREPGV * 1 - ART1731BIS + min(CELREPGV, max(ACELREPGV_P + ACELREPGVP2, ACELREPGV1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
# TODO MAJOISFTARDIF_D
MAJTXRSE1 = COPETO
BOOL_W = is_positive(V_0AW + 0) * positif_ou_nul(AGV - LIM_AGE_LET_S)
SPETOTV = BNCPROV + BNCNPV
# TODO MAJOLO17_2TARDIF_R
ZIPQPRRZ5TOT = sum([ZIPQPRRZV5, ZIPQPRRZC5, ZIPQPRRZ15, ZIPQPRRZ25, ZIPQPRRZ35, ZIPQPRRZ45])
MAJTXRSE4 = COPETO
LIGXFORF = is_positive(present(FEXV) + present(FEXC) + present(FEXP)) * LIG1 * LIG2
PDEDMINP = is_positive(DETS1) * MIN_DEMEMPLOI + 1 - is_positive(DETS1) * MIN_DEDSFORFTS
PPEPEXO1 = is_positive(PPE_AVRPRO1P + 0) + is_positive(SALEXT1 + 0) + 4 * is_positive(PPEXT1 + PPETPP1 + 0)
MAJTXCVN = COPETO
RCELREP_HX = is_positive(CELREPHX) * arr(ACELREPHX * TX25 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGILMPB = is_positive(DILMPB) * LIG1 * LIG2
PRB2 = PRBR2 + PALI2 + PENIN2
# TODO REPOMENTR3
TXPF1728RSE5 = 10 if (V_CODPF1728RSE5 == 7 or V_CODPF1728RSE5 == 10 or V_CODPF1728RSE5 == 17 or V_CODPF1728RSE5 == 18) else (40 if (V_CODPF1728RSE5 == 8 or V_CODPF1728RSE5 == 11) else (80 if (V_CODPF1728RSE5 == 31) else 0))
DILMOB = COD7OB
PRV = PRBRV
DENPLOCC = LOCNPCGAC + LOCGITCC - LOCDEFNPCGAC + LOCNPC + LOCGITHCC - LOCDEFNPC
DDCSG = V_BTCSGDED * 1 - present(DCSG) + DCSG * 1 - null(4 - V_REGCO) + is_positive(RCMSOC + 0) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) * 1 - is_positive(present(RE168) + present(TAX1649)) * arr(min(RCMSOC, RCMABD + REVACT + RCMAV + PROVIE + RCMHAD + DISQUO + RCMHAB + INTERE) * TX051 / 100)
ZIPQTSREMP5TOT = sum([ZIPQTSREMPV5, ZIPQTSREMPC5, ZIPQTSREMP15, ZIPQTSREMP25, ZIPQTSREMP35, ZIPQTSREMP45])
TALLOP = ALLO1 + ALLO2 + ALLO3 + ALLO4
CIIMPPROTOT = CIIMPPRO + CIIMPPRO2
SOMMERCM = RCMAV + RCMABD + RCMTNC + REGPRIV + RCMHAB + RCMHAD + PROVIE + REVACT + REVPEA + RESTUC + INTERE + DISQUO + 0
DDEVDUR = CIBOIBAIL + COD7SA + CINRJBAIL + COD7SB + CRENRJ + COD7SC + TRAMURWC + COD7WB + CINRJ + COD7RG + TRATOIVG + COD7VH + CIDEP15 + COD7RH + MATISOSI + COD7RI + TRAVITWT + COD7WU + MATISOSJ + COD7RJ + VOLISO + COD7RK + PORENT + COD7RL + CHAUBOISN + COD7RN + POMPESP + COD7RP + POMPESR + COD7RR + CHAUFSOL + COD7RS + POMPESQ + COD7RQ + ENERGIEST + COD7RT + DIAGPERF + COD7TV + RESCHAL + COD7TW + COD7RV + COD7RW + COD7RZ
MAJTX4 = 1 - is_positive(V_NBCODI) * 1 - is_positive(CMAJ) * is_positive(NMAJ4) * TXPFI + is_positive(CMAJ) * COPETO + is_positive(V_NBCODI) * -1
DFACC = CHRFAC
RCELREP_HX_R = is_positive(CELREPHX) * arr(CELREPHX * TX25 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ANCSDED2 = V_ANCSDED * 1 - null(933 - V_ROLCSG) + V_ANCSDED + 1 * null(933 - V_ROLCSG) * is_positive(V_ROLCSG + 0) + V_ANCSDED * 1 - is_positive(V_ROLCSG + 0)
# TODO MAJOLO17_2TARDIF_P
TGLTSTOTM = sum([TGLTSVM, TGLTSCM, TGLTS1M, TGLTS2M, TGLTS3M, TGLTS4M])
BINTTAP = BINTAP + BI2AP
TPRBC = PRBRC + PALIC + PENINC
MAJOLOYTARDIF_P1 = MAJOLOYTARDIF_P - MAJOLO17_2TARDIF_P
ZIG_INT = is_positive(RETCS + RETRD + RETPS + RETCVN) * LIG2
NPLOCCGAV = LOCNPCGAV + LOCGITCV - LOCDEFNPCGAV * 1 - is_positive(ART1731BIS * PREM8_11)
# TODO MAJOIRTARDIF_P
TDEDMINC = is_positive(DETSC) * MIN_DEMEMPLOI + 1 - is_positive(DETSC) * MIN_DEDSFORFTS
LIGBASRET = is_positive(present(IMPRET) + present(BASRET)) * LIG1 * LIG2
LIGTRCT = is_positive(V_TRCT)
# TODO RILNEUF
DCELREPGK = CELREPGK
COPETOISF = 10 if (CMAJ_ISF == 7 or CMAJ_ISF == 17 or CMAJ_ISF == 18) else (40 if (CMAJ_ISF == 8 or CMAJ_ISF == 34) else 0)
RD_RVORIGND = ESFP
LIGCOD3SH = is_positive(COD3SH) * LIG1 * LIG2
TXSPEAAC = BNCREC + XHONOAAC - BNCDEC * 1 - is_positive(ART1731BIS)
LIGPVSURSI = is_positive(PVSURSI + CODRWA) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ACELREPYD = CELREPYD * 1 - ART1731BIS + min(CELREPYD, max(ACELREPYD_P + ACELREPYDP2, ACELREPYD1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
T2TSN2 = CARTSP2 + REMPLAP2
_4BAQLV = is_positive(_4BACREV + _4BAHREV)
TTSHALLOP = TSHALLO1 + TSHALLO2 + TSHALLO3 + TSHALLO4
BNNSP = is_positive(BNHREP - BNHDEP * 1 - is_positive(ART1731BIS * PREM8_11)) * arr(BNHREP - BNHDEP * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV) + 1 - positif_ou_nul(BNHREP - BNHDEP * 1 - is_positive(ART1731BIS * PREM8_11)) * BNHREP - BNHDEP * 1 - is_positive(ART1731BIS * PREM8_11)
MAJTXRSE54 = is_positive(is_positive(is_positive(MAJORSE503) + is_positive(MAJORSE555)) * is_positive(is_positive(MAJORSE504) + is_positive(MAJORSE505)) + is_positive(is_positive(MAJORSE503) + is_positive(MAJORSE555)) * is_positive(MAJORSE506) + is_positive(is_positive(MAJORSE504) + is_positive(MAJORSE505)) * is_positive(MAJORSE506)) * -1 + is_positive(is_positive(MAJORSE503) + is_positive(MAJORSE555)) * 1 - is_positive(is_positive(MAJORSE504) + is_positive(MAJORSE505) + is_positive(MAJORSE506)) * 40 + is_positive(is_positive(MAJORSE504) + is_positive(MAJORSE505)) * 1 - is_positive(is_positive(MAJORSE503) + is_positive(MAJORSE555) + is_positive(MAJORSE506)) * 80 + is_positive(MAJORSE506) * 1 - is_positive(is_positive(MAJORSE503) + is_positive(MAJORSE504) + is_positive(MAJORSE505) + is_positive(MAJORSE555)) * 100
RAVC = RCMAV + PROVIE
PERPBNCMNC = BNCPROEXC + max(0, BNCPROC + AUTOBNCC - max(arr(BNCPROC + AUTOBNCC * SPETXAB / 100), MIN_SPEBNC)) + BNCPROPVC - BNCPMVCTC
PERPPLATCANT = 1 - is_positive(present(PERPPLAFCC) + present(PERPPLAFNUC1) + present(PERPPLAFNUC2) + present(PERPPLAFNUC3)) * V_BTPERPTOTC + is_positive(present(PERPPLAFCC) + present(PERPPLAFNUC1) + present(PERPPLAFNUC2) + present(PERPPLAFNUC3)) * PERPPLAFCC + PERPPLAFNUC1 + PERPPLAFNUC2 + PERPPLAFNUC3
BAFORV = arr(BAFV * MAJREV) + BAFORESTV + BAFPVV
BDCIFORET = RDFORESTRA + SINISFORET + COD7UA + COD7UB + RDFORESTGES + COD7UI
LIGISFANT = is_positive(V_ANTISF) * is_positive(V_NOTRAIT - 20)
ZIGINT322 = is_positive(RETRSE322) * LIG2
TXPF1728RSE2 = 10 if (V_CODPF1728RSE2 == 7 or V_CODPF1728RSE2 == 10 or V_CODPF1728RSE2 == 17 or V_CODPF1728RSE2 == 18) else (40 if (V_CODPF1728RSE2 == 8 or V_CODPF1728RSE2 == 11) else (80 if (V_CODPF1728RSE2 == 31) else 0))
T2PRB1 = CARPEP1 + PENSALP1 + CODRCZ
ZIPQTSREMPANT1TOT = sum([ZIPQTSREMPANTV1, ZIPQTSREMPANTC1, ZIPQTSREMPANT11, ZIPQTSREMPANT21, ZIPQTSREMPANT31, ZIPQTSREMPANT41])
DCELRREDLD = CELRREDLD
ACELREPHZ = CELREPHZ * 1 - ART1731BIS + min(CELREPHZ, max(ACELREPHZ_P + ACELREPHZP2, ACELREPHZ1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGDEFBICNPF = is_positive(DEFBICNPF) * DEFRIBIC * 1 - PREM8_11
LIGXBN = is_positive(XBNNPV + XBNNPC + XBNNPP) * LIG1 * LIG2
TXPF1728CAP = 10 if (V_CODPF1728CAP == 7 or V_CODPF1728CAP == 10 or V_CODPF1728CAP == 17 or V_CODPF1728CAP == 18) else (40 if (V_CODPF1728CAP == 8 or V_CODPF1728CAP == 11) else (80 if (V_CODPF1728CAP == 31) else 0))
ACELREPYF = CELREPYF * 1 - ART1731BIS + min(CELREPYF, max(ACELREPYF_P + ACELREPYFP2, ACELREPYF1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGIPCAPV = present(PCAPTAXV) * 1 - is_positive(ANNUL2042 + 0) * LIG1
XBINPV = BICNPHEXV + BICNPEXV
BARAV = BACREV + _4BACREV - BACDEV * 1 - is_positive(ART1731BIS * PREM8_11)
BRFG = min(RDGARD1, PLAF_REDGARD) + min(RDGARD2, PLAF_REDGARD) + min(RDGARD3, PLAF_REDGARD) + min(RDGARD4, PLAF_REDGARD) + min(RDGARD1QAR, PLAF_REDGARDQAR) + min(RDGARD2QAR, PLAF_REDGARDQAR) + min(RDGARD3QAR, PLAF_REDGARDQAR) + min(RDGARD4QAR, PLAF_REDGARDQAR)
BINHTAC = max(0, arr(BICHREC - BICHDEC * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV)) + min(0, BICHREC - BICHDEC * 1 - is_positive(ART1731BIS * PREM8_11))
PPEPEXO3 = is_positive(PPE_AVRPRO1P + 0) + is_positive(SALEXT3 + 0) + 4 * is_positive(PPEXT3 + PPETPP3 + 0)
INTMS = inf(MOISAN / 10000)
PERPPLATPANT = 1 - is_positive(present(PERPPLAFCP) + present(PERPPLAFNUP1) + present(PERPPLAFNUP2) + present(PERPPLAFNUP3)) * V_BTPERPTOTP + is_positive(present(PERPPLAFCP) + present(PERPPLAFNUP1) + present(PERPPLAFNUP2) + present(PERPPLAFNUP3)) * PERPPLAFCP + PERPPLAFNUP1 + PERPPLAFNUP2 + PERPPLAFNUP3
LIG024 = sum([_4TSN1, _4TSN2, _4TSN3, _4TSN4])
HONODECC = XHONOC + XHONOAAC
MAJTXP = COPETO
ZIPQPRR2TOT = sum([ZIPQPRRV2, ZIPQPRRC2, ZIPQPRR12, ZIPQPRR22, ZIPQPRR32, ZIPQPRR42])
PERPPLAFNUV2ANT = present(PERPPLAFNUV2) * PERPPLAFNUV2 + 1 - present(PERPPLAFNUV2) * V_BTPERPNUV2
LIGAVFISC = is_positive(AVFISCOPTER) * LIG1 * LIG2
LIGIREXITI = is_positive(IREXITI) * 1 - is_positive(IREXITS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
DPIQABCD = PINELQA + PINELQB + PINELQC + PINELQD
SPETOTP = BNCPROP + BNCNPP
BASSURV2 = max(0, CESSASSV - BASSURV3 - LIM_ASSUR2)
# TODO PPE_BOOL_NADAN
# TODO MAJOPSTARDIF_P
PPEPEXOC = is_positive(PPE_AVRPRO1C + 0) + is_positive(SALEXTC + 0) + 4 * is_positive(PPENJC + PPEACC + 0) + 8 * is_positive(PPEXTC + PPETPC + 0)
APATNAT2 = PATNAT2 * 1 - ART1731BIS + min(PATNAT2, max(APATNAT2_P + APATNAT2P2, APATNAT21731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGCELYC = is_positive(DCELREPYC) * LIG1 * LIG2
HONONETC = arr(XHONOC * MAJREV) + XHONOAAC
ZIGCVNANT = is_positive(V_CVNANT) * TYPE2 * 1 - APPLI_OCEANS
RIVCELFD1 = is_positive(CELLIERFD) * arr(BCEL_FD * TX24 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DCELREPYK = CELREPYK
MIB_1AF = max(0, sum([MIB_1AV, MIB_1AC, MIB_1AP]))
MIBNETNPVF = sum([MIB_NETNPVV, MIB_NETNPVC, MIB_NETNPVP])
TAUX1 = TX_BAR1 * 1 - V_ANC_BAR + TX_BAR1A * V_ANC_BAR - TX_BAR0
RIVPIQAC = arr(arr(min(PINELQC + 0, LIMDUFLO - min(DUFLOEL + PINELQD + 0, LIMDUFLO)) / 6) * TX23 / 100) + arr(arr(min(PINELQA + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + DUFLOEK + PINELQB + 0, LIMDUFLO)) / 6) * TX12 / 100) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
ICI8XV = min(arr(RCM2FA * TX24 / 100), arr(COD8XV * TX24 / 100)) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
TXPFICRP = 40 if (V_CODPFICRP == 3 or V_CODPFICRP == 30 or V_CODPFICRP == 55) else (80 if (V_CODPFICRP == 4 or V_CODPFICRP == 5 or V_CODPFICRP == 32) else (100 if (V_CODPFICRP == 6) else 0))
SOMMEA858 = SOMMEA881 + present(TSHALLOV) + present(TSHALLOC) + present(TSASSUV) + present(TSASSUC) + present(RFMIC) + present(RFORDI) + present(RFDORD) + present(RFDHIS)
LIGINRTAX22 = is_positive(RETTAXA22)
ZIG_CONTRIBPROV_A = is_positive(PRSPROV_A + CSGIM_A + CRDSIM_A) * LIG2
XBAV = BAHEXV + BAEXV
TXPFICVN = 40 if (V_CODPFICVN == 3 or V_CODPFICVN == 30 or V_CODPFICVN == 55) else (80 if (V_CODPFICVN == 4 or V_CODPFICVN == 5) else (100 if (V_CODPFICVN == 6) else 0))
DPREC = CHNFAC
RBGTH = TSHALLOV + TSHALLOC + TSHALLO1 + TSHALLO2 + TSHALLO3 + TSHALLO4 + ALLOV + ALLOC + ALLO1 + ALLO2 + ALLO3 + ALLO4 + SALEXTV + SALEXTC + SALEXT1 + SALEXT2 + SALEXT3 + SALEXT4 + TSASSUV + TSASSUC + XETRANV + XETRANC + ELURASV + ELURASC + IPMOND + PRBRV + PRBRC + PRBR1 + PRBR2 + PRBR3 + PRBR4 + COD1AH + COD1BH + COD1CH + COD1DH + COD1EH + COD1FH + PCAPTAXV + PCAPTAXC + PALIV + PALIC + PALI1 + PALI2 + PALI3 + PALI4 + RVB1 + RVB2 + RVB3 + RVB4 + GLD1V + GLD2V + GLD3V + GLD1C + GLD2C + GLD3C + GLDGRATV + GLDGRATC + PENINV + PENINC + PENIN1 + PENIN2 + PENIN3 + PENIN4 + RCMABD + RCMTNC + RCMAV + RCMHAD + REGPRIV + RCMHAB + PPLIB + RCMIMPAT + RCMLIB + COD2FA + BPV40V + BPVRCM + BPCOPTV + BPCOSAV + BPCOSAC + PEA + GAINABDET + BPV18V + ABIMPPV + BPV18C + BPCOPTC + BPV40C + BPVSJ + BPVSK + GAINPEA + PVSURSI + PVIMPOS + PVIMMO + ABDETPLUS + PVEXOSEC + PVREPORT + PVTITRESOC + COD3SG + COD3SL + COD3UA + RFMIC + RFORDI + FEXV + FEXC + FEXP + BAFPVV + BAFPVC + BAFPVP + BAF1AV + BAF1AC + BAF1AP + BAEXV + BAEXC + BAEXP + BACREV + BACREC + BACREP + BA1AV + BA1AC + BA1AP + BAHEXV + BAHEXC + BAHEXP + BAHREV + BAHREC + BAHREP + BAFV + BAFC + BAFP + BAFORESTV + BAFORESTC + BAFORESTP + BAPERPV + BANOCGAV + BAPERPC + BANOCGAC + BAPERPP + BANOCGAP + MIBEXV + MIBEXC + MIBEXP + MIBVENV + MIBVENC + MIBVENP + MIBPRESV + MIBPRESC + MIBPRESP + MIBPVV + MIBPVC + MIBPVP + MIB1AV + MIB1AC + MIB1AP + BICEXV + BICEXC + BICEXP + BICNOV + BICNOC + BICNOP + BI1AV + BI1AC + BI1AP + BIHEXV + BIHEXC + BIHEXP + BIHNOV + BIHNOC + BIHNOP + MIBNPEXV + MIBNPEXC + MIBNPEXP + MIBNPVENV + MIBNPVENC + MIBNPVENP + MIBNPPRESV + MIBNPPRESC + MIBNPPRESP + MIBNPPVV + MIBNPPVC + MIBNPPVP + MIBNP1AV + MIBNP1AC + MIBNP1AP + BICNPEXV + BICNPEXC + BICNPEXP + BICREV + BICREC + BICREP + BI2AV + BI2AC + BI2AP + BICNPHEXV + BICNPHEXC + BICNPHEXP + BICHREV + BICHREC + BICHREP + LOCNPCGAV + LOCNPV + LOCNPCGAC + LOCNPC + LOCNPCGAPAC + LOCNPPAC + LOCPROCGAV + LOCPROV + LOCPROCGAC + LOCPROC + LOCPROCGAP + LOCPROP + MIBMEUV + MIBMEUC + MIBMEUP + MIBGITEV + MIBGITEC + MIBGITEP + LOCGITCV + LOCGITHCV + LOCGITCC + LOCGITHCC + LOCGITCP + LOCGITHCP + LOCGITV + LOCGITC + LOCGITP + AUTOBICVV + AUTOBICPV + AUTOBICVC + AUTOBICPC + AUTOBICVP + AUTOBICPP + BIPERPV + BIPERPC + BIPERPP + BNCPROEXV + BNCPROEXC + BNCPROC + BNCPROP + BNCPROPVV + BNCPROPVC + BNCPROPVP + BNCPRO1AV + BNCPRO1AC + BNCPRO1AP + BNCEXV + BNCEXC + BNCEXP + BNCREV + BNCREC + BNCREP + BN1AV + BN1AC + BN1AP + BNHEXV + BNHEXC + BNHEXP + BNHREV + BNHREC + BNHREP + BNCCRV + BNCCRC + BNCCRP + BNCNPV + BNCNPC + BNCNPP + BNCNPPVV + BNCNPPVC + BNCNPPVP + BNCNP1AV + BNCNP1AC + BNCNP1AP + ANOCEP + PVINVE + BNCCRFV + ANOVEP + PVINCE + BNCCRFC + ANOPEP + PVINPE + BNCCRFP + BNCAABV + BNCAABC + BNCAABP + BNCNPREXAAV + BNCNPREXV + BNCNPREXAAC + BNCNPREXC + BNCNPREXAAP + BNCNPREXP + BNCPROEXP + BNCPROV + XHONOAAV + XHONOV + XHONOAAC + XHONOC + XHONOAAP + XHONOP + CESSASSV + CESSASSC + INVENTV + INVENTC + INVENTP + AUTOBNCV + AUTOBNCC + AUTOBNCP + XSPENPV + XSPENPC + XSPENPP + REPSOF
PRQPC = CARPEP1 + PEBF1 + CARPEP2 + PEBF2 + CARPEP3 + PEBF3 + CARPEP4 + PEBF4
V_CNR = (V_REGCO + 0) in [{'values': [2, 4], 'type': 'enumeration_values'}]
CVNAC = CVNSALC
LIG52 = is_positive(present(CHENF1) + present(CHENF2) + present(CHENF3) + present(CHENF4) + present(NCHENF1) + present(NCHENF2) + present(NCHENF3) + present(NCHENF4)) * LIG1 * LIG2
ZIPQPALIM2TOT = sum([ZIPQPALIMV2, ZIPQPALIMC2, ZIPQPALIM12, ZIPQPALIM22, ZIPQPALIM32, ZIPQPALIM42])
MLOCDECC = MIBGITEC + LOCGITC + MIBMEUC
APLAFREPME4 = COD7CY * is_positive(COD7CY) * 1 - V_CNR
TXPFICAP = 40 if (V_CODPFICAP == 3 or V_CODPFICAP == 30 or V_CODPFICAP == 55) else (80 if (V_CODPFICAP == 4 or V_CODPFICAP == 5) else (100 if (V_CODPFICAP == 6) else 0))
TMIB_TVENC = MIBVENC + AUTOBICVC + MIBNPVENC + MIBGITEC + LOCGITC
AGC = V_ANREV - V_0DB * min(1, V_0DB)
DILMJI = LOCMEUBJI
RBAP = BAHREP + _4BAHREP + BACREP + _4BACREP + BAFORESTP + BAFP + BAFPVP - BACDEP - BAHDEP
LIGCELHW = is_positive(DCELREPHW) * LIG1 * LIG2
TXMOYIMPDEN5 = RCMLIB
CUMPENEXTEF = sum([TPRRV, TPRRC, TPRR1, TPRR2, TPRR3, TPRR4])
BPCAPTAXV = PCAPTAXV - arr(PCAPTAXV * TX_DEDPER / 100)
# TODO MAJOIR17_2TARDIF_R
SOMMEA879 = present(BACREV) + present(_4BACREV) + present(BA1AV) + present(BACDEV) + present(BACREC) + present(_4BACREC) + present(BA1AC) + present(BACDEC) + present(BACREP) + present(_4BACREP) + present(BA1AP) + present(BACDEP) + present(BAHREV) + present(_4BAHREV) + present(BAHDEV) + present(BAHREC) + present(_4BAHREC) + present(BAHDEC) + present(BAHREP) + present(_4BAHREP) + present(BAHDEP) + present(BICNOV) + present(BI1AV) + present(BICDNV) + present(BICNOC) + present(BI1AC) + present(BICDNC) + present(BICNOP) + present(BI1AP) + present(BICDNP) + present(BIHNOV) + present(BIHDNV) + present(BIHNOC) + present(BIHDNC) + present(BIHNOP) + present(BIHDNP) + present(BICREV) + present(BI2AV) + present(BICDEV) + present(BICREC) + present(BI2AC) + present(BICDEC) + present(BICREP) + present(BI2AP) + present(BICDEP) + present(BICHREV) + present(BICHDEV) + present(BICHREC) + present(BICHDEC) + present(BICHREP) + present(BICHDEP) + present(LOCPROCGAV) + present(LOCDEFPROCGAV) + present(LOCPROCGAC) + present(LOCDEFPROCGAC) + present(LOCPROCGAP) + present(LOCDEFPROCGAP) + present(LOCPROV) + present(LOCDEFPROV) + present(LOCPROC) + present(LOCDEFPROC) + present(LOCPROP) + present(LOCDEFPROP) + present(LOCNPCGAV) + present(LOCGITCV) + present(LOCDEFNPCGAV) + present(LOCNPCGAC) + present(LOCGITCC) + present(LOCDEFNPCGAC) + present(LOCNPCGAPAC) + present(LOCGITCP) + present(LOCDEFNPCGAPAC) + present(LOCNPV) + present(LOCGITHCV) + present(LOCDEFNPV) + present(LOCNPC) + present(LOCGITHCC) + present(LOCDEFNPC) + present(LOCNPPAC) + present(LOCGITHCP) + present(LOCDEFNPPAC) + present(BNCREV) + present(BN1AV) + present(BNCDEV) + present(BNCREC) + present(BN1AC) + present(BNCDEC) + present(BNCREP) + present(BN1AP) + present(BNCDEP) + present(BNHREV) + present(BNHDEV) + present(BNHREC) + present(BNHDEC) + present(BNHREP) + present(BNHDEP) + present(BNCAABV) + present(ANOCEP) + present(INVENTV) + present(PVINVE) + present(BNCAADV) + present(DNOCEP) + present(BNCAABC) + present(ANOVEP) + present(INVENTC) + present(PVINCE) + present(BNCAADC) + present(DNOCEPC) + present(BNCAABP) + present(ANOPEP) + present(INVENTP) + present(PVINPE) + present(BNCAADP) + present(DNOCEPP)
ZIPQRF5TOT = sum([ZIPQRF15, ZIPQRF25])
ACELRREDLA = CELRREDLA * 1 - ART1731BIS + min(CELRREDLA, max(ACELRREDLA_P + ACELRREDLAP2, ACELRREDLA1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DCELREPYG = CELREPYG
LIGIHAUT = is_positive(CHRAVANT) * 1 - is_positive(TEFFHRC + COD8YJ) * 1 - is_positive(ANNUL2042) * LIG1
ACOTFOR_R = min(DCOTFOR, PLAF_FOREST1 * 1 + BOOL_0AM) * 1 - V_CNR
ZIGREVXA = is_positive(REVCSXA) * TYPE2
ZIGREVXD = is_positive(REVCSXD) * TYPE2
SOMMELOC = MIBMEUV + MIBMEUC + MIBMEUP + MIBGITEV + MIBGITEC + MIBGITEP + LOCGITV + LOCGITC + LOCGITP + LOCNPCGAV + LOCNPV + LOCNPCGAC + LOCNPC + LOCNPCGAPAC + LOCNPPAC + LOCGITCV + LOCGITHCV + LOCGITCC + LOCGITHCC + LOCGITCP + LOCGITHCP + 0
DRESIMEUB = VIEUMEUB
LIGVERSLIB = is_positive(AUTOVERSLIB) * LIG1 * LIG2
BCEL_JOQR = arr(min(CELLIERJO + CELLIERJQ + CELLIERJR + 0, LIMCELLIER) / 5)
LIGCELYF = is_positive(DCELREPYF) * LIG1 * LIG2
LIG062P = sum([CARPEP1 + CARPENBAP1, CARPEP2 + CARPENBAP2, CARPEP3 + CARPENBAP3, CARPEP4 + CARPENBAP4]) + sum([PENSALP1 + PENSALNBP1, PENSALP2 + PENSALNBP2, PENSALP3 + PENSALNBP3, PENSALP4 + PENSALNBP4]) + CODRCZ + CODRDZ + CODREZ + CODRFZ
ZIGINT = is_positive(RETCDIS) * LIG2
BCDIS = GSALV + GSALC * 1 - V_CNR * 1 - is_positive(present(TAX1649) + present(RE168))
TPL_PB = arr(PLAF_DEDPRFOYER - sum([TAPBV * TIND_APBV, TAPBC * TIND_APBC, TAPB1 * TIND_APB1, TAPB2 * TIND_APB2, TAPB3 * TIND_APB3, TAPB4 * TIND_APB4]))
PLOCV = min(0, LOCPROV - LOCDEFPROV * 1 - is_positive(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFPROV * 1 - is_positive(ART1731BIS * PREM8_11) - LOCPROV) + arr(max(0, LOCPROV - LOCDEFPROV * 1 - is_positive(ART1731BIS * PREM8_11)) * MAJREV) * is_positive(LOCPROV - LOCDEFPROV * 1 - is_positive(ART1731BIS * PREM8_11))
MIBNETPF = sum([MIB_NETPV, MIB_NETPC, MIB_NETPP])
# TODO RIVL5RES
LIGCOD3SM = is_positive(COD3SM) * LIG1 * LIG2
DCOMP = RDCOM
INTMSISF = inf(MOISAN_ISF / 10000)
ALOYIMP = DLOYIMP
NBQAR3 = positif_ou_nul(V_0CF + V_0CR + V_0DJ - 2) * 1 / 2 * V_0CH
ZIGPSANT = is_positive(V_PSANT) * TYPE2 * 1 - APPLI_OCEANS
LIGCREBIO = is_positive(CREAGRIBIO) * LIG1 * LIG2
AREPA = BAA * 1 - ART1731BIS + min(BAA, max(AREPA_P + AREPAP2, AREPA1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
CS_REVETRANG = 0
DCELNBGL = CELLIERNB + CELLIERNG + CELLIERNL
ACELCOM_R = positif_ou_nul(CELLIERNP + CELLIERNR + CELLIERNS + CELLIERNT) * BCELCOM2011 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
MAJTXGLOA = COPETO
PDEDMINC = DEDMINC
AISFPMED = arr(ISFPMEDI * TX50 / 100)
BASEDONB = REPDON03 + REPDON04 + REPDON05 + REPDON06 + REPDON07 + RDDOUP + COD7UH + DONAUTRE
LIGMOBNR = is_positive(PVMOBNR) * LIG1 * LIG2
PPETX3 = PPE_TX3
PPE_SALAVDEFV = TSHALLOV + BPCOSAV + GLD1V + GLD2V + GLD3V + TSASSUV + CARTSV * is_positive(CARTSNBAV) + CODDAJ + CODEAJ + SALEXTV + GLDGRATV
BADCRE = min(CREAIDE, min(LIM_AIDOMI * 1 - is_positive(PREMAIDE) + LIM_PREMAIDE * is_positive(PREMAIDE) + MAJSALDOM * positif_ou_nul(V_ANREV - V_0DA - 65) + positif_ou_nul(V_ANREV - V_0DB - 65) * BOOL_0AM + V_0CF + V_0DJ + V_0DN + V_0CH + V_0DP / 2, LIM_AIDOMI3 * 1 - is_positive(PREMAIDE) + LIM_PREMAIDE2 * is_positive(PREMAIDE)) * 1 - is_positive(INAIDE + 0) + LIM_AIDOMI2 * is_positive(INAIDE + 0))
RSEPROVTOT = CSPROVYD + CSPROVYE + CSPROVYF + CSPROVYN + CSPROVYG + CSPROVYH + CSPROVYP
DILMJV = LOCMEUBJV
DILMPD = COD7PD
RCMPRIV = REGPRIV + RESTUC
_2RAO = max(0, _2REGPRIVM)
INTAN = MOISAN / 10000 - INTMS * 10000 * present(MOISAN)
AMEUBLE = DMEUBLE * 1 - ART1731BIS + min(DMEUBLE, max(AMEUBLE_P + AMEUBLEP2, AMEUBLE1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
BTPVT = GAINPEA * 1 - is_positive(IPVLOC)
REPCIFADSIN = positif_ou_nul(COD7UA - PLAF_FOREST1 * 1 + BOOL_0AM) * COD7UB + 1 - positif_ou_nul(COD7UA - PLAF_FOREST1 * 1 + BOOL_0AM) * max(0, COD7UB - PLAF_FOREST1 * 1 + BOOL_0AM - COD7UA) * 1 - V_CNR
BA1C = BA1AC + BAF1AC
AVPLAF13A = max(0, AUBAINE13A - LIM10000) * is_positive(V_DIFTEOREEL)
AGRI = sum([AGRIV, AGRIC, AGRIP])
DILMIH = LOCMEUBIH
XBINPC = BICNPHEXC + BICNPEXC
NATMAJRSE3 = 1
ALLOP = ALLO1 + ALLO2 + ALLO3 + ALLO4
NATMAJP = 1
BNCCREAC = BNCCRC + BNCCRFC
REPRCM = DEFRCM + DEFRCM2 + DEFRCM3 + DEFRCM4 + DEFRCM5 + DEFRCM6
ZIPQTS5TOT = sum([ZIPQTSV5, ZIPQTSC5, ZIPQTS15, ZIPQTS25, ZIPQTS35, ZIPQTS45])
TPMIB_APV = min(MIBPRESV + AUTOBICPV, max(MIN_MBIC, arr(MIBPRESV + AUTOBICPV * TX_MIBPRES / 100)))
SOMMEA090 = sum([TSHALLOV + ALLOV + DETSV + FRNV + PRBRV + PALIV, TSHALLOC + ALLOC + DETSC + FRNC + PRBRC + PALIC, TSHALLO1 + ALLO1 + DETS1 + FRN1 + PRBR1 + PALI1, TSHALLO2 + ALLO2 + DETS2 + FRN2 + PRBR2 + PALI2, TSHALLO3 + ALLO3 + DETS3 + FRN3 + PRBR3 + PALI3, TSHALLO4 + ALLO4 + DETS4 + FRN4 + PRBR4 + PALI4]) + sum([CARTSV + REMPLAV + PEBFV + CARPEV + PENSALV, CARTSC + REMPLAC + PEBFC + CARPEC + PENSALC]) + sum([CARTSP1 + REMPLAP1 + PEBF1 + CARPEP1 + PENSALP1 + RVB1, CARTSP2 + REMPLAP2 + PEBF2 + CARPEP2 + PENSALP2 + RVB2, CARTSP3 + REMPLAP3 + PEBF3 + CARPEP3 + PENSALP3 + RVB3, CARTSP4 + REMPLAP4 + PEBF4 + CARPEP4 + PENSALP4 + RVB4]) + sum([GLD1V + GLD1C, GLD2V + GLD2C, GLD3V + GLD3C]) + RENTAX + RENTAX5 + RENTAX6 + RENTAX7 + BPCOSAV + BPCOSAC + GLDGRATV + GLDGRATC
TSPETOTC = BNCPROC + AUTOBNCC + BNCNPC
REVTSQHT = sum([TSNN2TSV, TSNN2TSC, TSNN2TS1, TSNN2TS2, TSNN2TS3, TSNN2TS4])
IPCAPTAXTOT = sum([IPCAPTAXV, IPCAPTAXC])
DCELREPHU = CELREPHU
DILMIY = LOCMEUBIY
LIGILMPC = is_positive(DILMPC) * LIG1 * LIG2
BSURV = min(RDRESU, PLAF_RSURV + PLAF_COMPSURV * EAC + V_0DN + PLAF_COMPSURVQAR * V_0CH + V_0DP)
_2RCMRTNC = arr(REVPEA * 40 / 100)
MIB_APC = min(MIB_TPRESC, max(MIN_MBIC, arr(MIB_TPRESC * TX_MIBPRES / 100)))
BCEL_NBGL = arr(min(CELLIERNB + CELLIERNG + CELLIERNL + 0, LIMCELLIER) / 9)
TOTDEFLOCNP = LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1
DMOND_1 = DMOND
TMIB_TVENV = MIBVENV + AUTOBICVV + MIBNPVENV + MIBGITEV + LOCGITV
SOMMEA031 = is_positive(TSHALLOC) + is_positive(ALLOC) + is_positive(PRBRC) + is_positive(PALIC) + is_positive(GSALC) + is_positive(TSASSUC) + is_positive(XETRANC) + is_positive(EXOCETC) + is_positive(FRNC) + is_positive(PPETPC) + is_positive(PPENHC) + is_positive(PCAPTAXC) + is_positive(CARTSC) + is_positive(PENSALC) + is_positive(REMPLAC) + is_positive(CARPEC) + is_positive(GLDGRATC) + is_positive(GLD1C) + is_positive(GLD2C) + is_positive(GLD3C) + is_positive(BPV18C) + is_positive(BPCOPTC) + is_positive(BPV40C) + is_positive(BPCOSAC) + is_positive(CVNSALAC) + is_positive(FEXC) + is_positive(BAFC) + is_positive(BAFORESTC) + is_positive(BAFPVC) + is_positive(BAF1AC) + is_positive(BAEXC) + is_positive(BACREC) + is_positive(_4BACREC) + is_positive(BA1AC) + is_positive(BACDEC * 1 - is_positive(ART1731BIS)) + is_positive(BAHEXC) + is_positive(BAHREC) + is_positive(_4BAHREC) + is_positive(BAHDEC * 1 - is_positive(ART1731BIS)) + is_positive(BAPERPC) + is_positive(BANOCGAC) + is_positive(AUTOBICVC) + is_positive(AUTOBICPC) + is_positive(AUTOBNCC) + is_positive(MIBEXC) + is_positive(MIBVENC) + is_positive(MIBPRESC) + is_positive(MIBPVC) + is_positive(MIB1AC) + is_positive(MIBDEC) + is_positive(BICPMVCTC) + is_positive(BICEXC) + is_positive(BICNOC) + is_positive(LOCPROCGAC) + is_positive(BI1AC) + is_positive(BICDNC * 1 - is_positive(ART1731BIS)) + is_positive(LOCDEFPROCGAC * 1 - is_positive(ART1731BIS)) + is_positive(BIHEXC) + is_positive(BIHNOC) + is_positive(LOCPROC) + is_positive(BIHDNC * 1 - is_positive(ART1731BIS)) + is_positive(LOCDEFPROC * 1 - is_positive(ART1731BIS)) + is_positive(BIPERPC) + is_positive(MIBNPEXC) + is_positive(MIBNPVENC) + is_positive(MIBNPPRESC) + is_positive(MIBNPPVC) + is_positive(MIBNP1AC) + is_positive(MIBNPDEC) + is_positive(BICNPEXC) + is_positive(BICREC) + is_positive(LOCNPCGAC) + is_positive(BI2AC) + is_positive(min(BICDEC, BICDEC1731 + 0) * is_positive(ART1731BIS) + BICDEC * 1 - ART1731BIS) + is_positive(min(LOCDEFNPCGAC, LOCDEFNPCGAC1731 + 0) * is_positive(ART1731BIS) + LOCDEFNPCGAC * 1 - ART1731BIS) + is_positive(MIBMEUC) + is_positive(MIBGITEC) + is_positive(LOCGITC) + is_positive(LOCGITCC) + is_positive(LOCGITHCC) + is_positive(BICNPHEXC) + is_positive(BICHREC) + is_positive(LOCNPC) + is_positive(min(BICHDEC, BICHDEC1731 + 0) * is_positive(ART1731BIS) + BICHDEC * 1 - ART1731BIS) + is_positive(min(LOCDEFNPC, LOCDEFNPC1731 + 0) * is_positive(ART1731BIS) + LOCDEFNPC * 1 - ART1731BIS) + is_positive(BNCPROEXC) + is_positive(BNCPROC) + is_positive(BNCPROPVC) + is_positive(BNCPRO1AC) + is_positive(BNCPRODEC) + is_positive(BNCPMVCTC) + is_positive(BNCEXC) + is_positive(BNCREC) + is_positive(BN1AC) + is_positive(BNCDEC * 1 - is_positive(ART1731BIS)) + is_positive(BNHEXC) + is_positive(BNHREC) + is_positive(BNHDEC * 1 - is_positive(ART1731BIS)) + is_positive(BNCCRC) + is_positive(CESSASSC) + is_positive(XHONOAAC) + is_positive(XHONOC) + is_positive(XSPENPC) + is_positive(BNCNPC) + is_positive(BNCNPPVC) + is_positive(BNCNP1AC) + is_positive(BNCNPDEC) + is_positive(BNCNPREXAAC) + is_positive(BNCAABC) + is_positive(min(BNCAADC, BNCAADC1731 + 0) * is_positive(ART1731BIS) + BNCAADC * 1 - ART1731BIS) + is_positive(BNCNPREXC) + is_positive(ANOVEP) + is_positive(PVINCE) + is_positive(INVENTC) + is_positive(min(DNOCEPC, DNOCEPC1731 + 0) * is_positive(ART1731BIS) + DNOCEPC * 1 - ART1731BIS) + is_positive(BNCCRFC) + is_positive(RCSC) + is_positive(PVSOCC) + is_positive(PPEACC) + is_positive(PPENJC) + is_positive(PEBFC) + is_positive(PERPC) + is_positive(PERP_COTC) + is_positive(RACCOTC) + is_positive(PLAF_PERPC) + is_positive(PERPPLAFCC) + is_positive(PERPPLAFNUC1) + is_positive(PERPPLAFNUC2) + is_positive(PERPPLAFNUC3) + is_positive(ELURASC) + is_positive(CODDBJ) + is_positive(CODEBJ) + is_positive(SALEXTC) + is_positive(COD1BD) + is_positive(COD1BE) + is_positive(PPEXTC) + is_positive(COD1BH) + is_positive(RDSYCJ) + is_positive(PENINC) + is_positive(CODRBZ) + 0
RFCEPS = max(0, RFCD - RFDORD) * 1 - is_positive(ART1731BIS) + max(0, RFCD - DEFRF4BB) * is_positive(ART1731BIS)
TXPF1728RSE4 = 10 if (V_CODPF1728RSE4 == 7 or V_CODPF1728RSE4 == 10 or V_CODPF1728RSE4 == 17 or V_CODPF1728RSE4 == 18) else (40 if (V_CODPF1728RSE4 == 8 or V_CODPF1728RSE4 == 11) else (80 if (V_CODPF1728RSE4 == 31) else 0))
ACELFABC = BCEL_FABC * 1 - ART1731BIS + min(BCEL_FABC, max(ACELFABC_P + ACELFABCP2, ACELFABC1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(DCELFABC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ABTMA = V_0DN * ABAT_ENF_MARIES + arr(V_0DP * ABAT_ENF_MARIES / 2)
BARREVAV = BACREV + _4BACREV
PERPPLAFNUC2ANT = present(PERPPLAFNUC2) * PERPPLAFNUC2 + 1 - present(PERPPLAFNUC2) * V_BTPERPNUC2
MAJTXLOY4 = is_positive(is_positive(is_positive(MAJOLOY03) + is_positive(MAJOLOY55)) * is_positive(is_positive(MAJOLOY04) + is_positive(MAJOLOY05)) + is_positive(is_positive(MAJOLOY03) + is_positive(MAJOLOY55)) * is_positive(MAJOLOY06) + is_positive(is_positive(MAJOLOY04) + is_positive(MAJOLOY05)) * is_positive(MAJOLOY06)) * -1 + is_positive(is_positive(MAJOLOY03) + is_positive(MAJOLOY55)) * 1 - is_positive(is_positive(MAJOLOY04) + is_positive(MAJOLOY05) + is_positive(MAJOLOY06)) * 40 + is_positive(is_positive(MAJOLOY04) + is_positive(MAJOLOY05)) * 1 - is_positive(is_positive(MAJOLOY03) + is_positive(MAJOLOY55) + is_positive(MAJOLOY06)) * 80 + is_positive(MAJOLOY06) * 1 - is_positive(is_positive(MAJOLOY03) + is_positive(MAJOLOY04) + is_positive(MAJOLOY05) + is_positive(MAJOLOY55)) * 100
SOMMEA802 = present(AUTOBICVV) + present(AUTOBICPV) + present(AUTOBICVC) + present(AUTOBICPC) + present(AUTOBICVP) + present(AUTOBICPP) + present(AUTOBNCV) + present(AUTOBNCC) + present(AUTOBNCP) + present(XHONOAAV) + present(XHONOV) + present(XHONOAAC) + present(XHONOC) + present(XHONOAAP) + present(XHONOP) + present(SALEXTV) + present(SALEXTC) + present(SALEXT1) + present(SALEXT2) + present(SALEXT3) + present(SALEXT4) + present(COD1AE) + present(COD1BE) + present(COD1CE) + present(COD1DE) + present(COD1EE) + present(COD1FE) + present(COD1AH) + present(COD1BH) + present(COD1CH) + present(COD1DH) + present(COD1EH) + present(COD1FH)
TPRB3 = PRBR3 + PALI3 + PENIN3
IPCAPTAXC = arr(BPCAPTAXC * T_PCAPTAX / 100)
SPEBASABP = SPETOTP
RD_R1649 = R1649
LIGCELLC = is_positive(DCELRREDLC) * LIG1 * LIG2
V_CNR2 = (V_REGCO + 0) in [{'values': [2, 3, 4], 'type': 'enumeration_values'}]
_4BAQLP = is_positive(_4BACREP + _4BAHREP)
ZIPQTSANT1TOT = sum([ZIPQTSANTV1, ZIPQTSANTC1, ZIPQTSANT11, ZIPQTSANT21, ZIPQTSANT31, ZIPQTSANT41])
LIGPVIMMO = is_positive(PVIMMO) * LIG1 * LIG2
PERP_INDV = is_positive(0 + is_positive(TSHALLOV) + is_positive(ALLOV) + is_positive(GLD1V) + is_positive(GLD2V) + is_positive(GLD3V) + is_positive(GLDGRATV) + is_positive(BPCOSAV) + is_positive(TSASSUV) + is_positive(CARTSV) + is_positive(FEXV) + is_positive(BAFV) + is_positive(BAFPVV) + is_positive(BAEXV) + is_positive(BACREV) + is_positive(_4BACREV) + is_positive(BACDEV * 1 - is_positive(ART1731BIS)) + is_positive(BAHEXV) + is_positive(BAHREV) + is_positive(_4BAHREV) + is_positive(BAHDEV * 1 - is_positive(ART1731BIS)) + is_positive(BAPERPV) + is_positive(MIBEXV) + is_positive(MIBVENV) + is_positive(MIBPRESV) + is_positive(MIBPVV) + is_positive(AUTOBICVV) + is_positive(AUTOBICPV) + is_positive(BICEXV) + is_positive(BICNOV) + is_positive(BICDNV * 1 - is_positive(ART1731BIS)) + is_positive(BIHEXV) + is_positive(BIHNOV) + is_positive(BIHDNV * 1 - is_positive(ART1731BIS)) + is_positive(BIPERPV) + is_positive(LOCPROCGAV) - is_positive(LOCDEFPROCGAV * 1 - is_positive(ART1731BIS)) + is_positive(LOCPROV) - is_positive(LOCDEFPROV * 1 - is_positive(ART1731BIS)) + is_positive(BNCPROEXV) + is_positive(BNCPROV) + is_positive(BNCPROPVV) + is_positive(AUTOBNCV) + is_positive(BNCEXV) + is_positive(BNCREV) + is_positive(BNCDEV * 1 - is_positive(ART1731BIS)) + is_positive(BNHEXV) + is_positive(BNHREV) + is_positive(BNHDEV * 1 - is_positive(ART1731BIS)) + is_positive(BNCCRV))
BNNSV = is_positive(BNHREV - BNHDEV * 1 - is_positive(ART1731BIS * PREM8_11)) * arr(BNHREV - BNHDEV * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV) + 1 - positif_ou_nul(BNHREV - BNHDEV * 1 - is_positive(ART1731BIS * PREM8_11)) * BNHREV - BNHDEV * 1 - is_positive(ART1731BIS * PREM8_11)
AISFPMEI = arr(ISFPMEIN * TX50 / 100)
LIGILMIY = is_positive(DILMIY) * LIG1 * LIG2
DILMIB = LOCMEUBIB
# TODO IND_COLS
RECUMBIS = (V_ANTRE + RECUM_A) if (V_NIMPA + 0 == 1) else (V_ANTRE + RECUM_A * positif_ou_nul(V_ANTRE + RECUM_A - SEUIL_8))
ZIGINT3 = is_positive(RETRSE3) * LIG2
RIVDUEKL8 = max(0, arr(min(DUFLOEL + 0, LIMDUFLO) * TX29 / 100) + arr(min(DUFLOEK + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + 0, LIMDUFLO)) * TX18 / 100) - 8 * RIVDUEKL) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
NATMAJCVN = 1
PVBAR3SB = PVTAXSB + COD3UV + COD3VE
ZIPQPRRANT1TOT = sum([ZIPQPRRANTV1, ZIPQPRRANTC1, ZIPQPRRANT11, ZIPQPRRANT21, ZIPQPRRANT31, ZIPQPRRANT41])
LIGIREXITS = is_positive(IREXITS) * 1 - is_positive(IREXITI) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
REVDECTAX = TSHALLOV + ALLOV + TSHALLOC + ALLOC + TSHALLO1 + ALLO1 + TSHALLO2 + ALLO2 + TSHALLO3 + ALLO3 + TSHALLO4 + ALLO4 + PALIV + PALIC + PALI1 + PALI2 + PALI3 + PALI4 + PRBRV + PRBRC + PRBR1 + PRBR2 + PRBR3 + PRBR4 + RVB1 + RVB2 + RVB3 + RVB4 + GLDGRATV + GLDGRATC + REGPRIV + BICREP + RCMABD + RCMTNC + RCMAV + RCMHAD + RCMHAB + PPLIB + RCMLIB + BPV40V + BPVRCM - DPVRCM + BPCOPTV + BPCOSAV + BPCOSAC + PEA + GLD1V + GLD1C + GLD2V + GLD2C + GLD3V + GLD3C + RFORDI - min(RFDORD, RFDORD1731 + 0) * is_positive(ART1731BIS) + RFDORD * 1 - ART1731BIS - RFDHIS * 1 - is_positive(ART1731BIS) - min(RFDANT, RFDANT1731 + 0) * is_positive(ART1731BIS) + RFDANT * 1 - ART1731BIS + RFMIC + BNCPRO1AV + BNCPRO1AC + BNCPRO1AP + BACREV + BACREC + BACREP + BAHREV + BAHREC + BAHREP + BAFV + BAFC + BAFP - BACDEV * 1 - is_positive(ART1731BIS) - BACDEC * 1 - is_positive(ART1731BIS) - BACDEP * 1 - is_positive(ART1731BIS) - BAHDEV * 1 - is_positive(ART1731BIS) - BAHDEC * 1 - is_positive(ART1731BIS) - BAHDEP * 1 - is_positive(ART1731BIS) - min(DAGRI6, DAGRI61731 + 0) * is_positive(ART1731BIS) + DAGRI6 * 1 - ART1731BIS - min(DAGRI5, DAGRI51731 + 0) * is_positive(ART1731BIS) + DAGRI5 * 1 - ART1731BIS - min(DAGRI4, DAGRI41731 + 0) * is_positive(ART1731BIS) + DAGRI4 * 1 - ART1731BIS - min(DAGRI3, DAGRI31731 + 0) * is_positive(ART1731BIS) + DAGRI3 * 1 - ART1731BIS - min(DAGRI2, DAGRI21731 + 0) * is_positive(ART1731BIS) + DAGRI2 * 1 - ART1731BIS - min(DAGRI1, DAGRI11731 + 0) * is_positive(ART1731BIS) + DAGRI1 * 1 - ART1731BIS + BICNOV + BICNOC + BICNOP + BIHNOV + BIHNOC + BIHNOP - BICDNV * 1 - is_positive(ART1731BIS) - BICDNC * 1 - is_positive(ART1731BIS) - BICDNP * 1 - is_positive(ART1731BIS) - BIHDNV * 1 - is_positive(ART1731BIS) - BIHDNC * 1 - is_positive(ART1731BIS) - BIHDNP * 1 - is_positive(ART1731BIS) + BICREV + BICREC + BICHREV + BICHREC + BICHREP - min(BICDEV, BICDEV1731 + 0) * is_positive(ART1731BIS) + BICDEV * 1 - ART1731BIS - min(BICDEC, BICDEC1731 + 0) * is_positive(ART1731BIS) + BICDEC * 1 - ART1731BIS - min(BICDEP, BICDEP1731 + 0) * is_positive(ART1731BIS) + BICDEP * 1 - ART1731BIS - min(BICHDEV, BICHDEV1731 + 0) * is_positive(ART1731BIS) + BICHDEV * 1 - ART1731BIS - min(BICHDEC, BICHDEC1731 + 0) * is_positive(ART1731BIS) + BICHDEC * 1 - ART1731BIS - min(BICHDEP, BICHDEP1731 + 0) * is_positive(ART1731BIS) + BICHDEP * 1 - ART1731BIS + BNCREV + BNCREC + BNCREP + BNHREV + BNHREC + BNHREP - BNCDEV * 1 - is_positive(ART1731BIS) - BNCDEC * 1 - is_positive(ART1731BIS) - BNCDEP * 1 - is_positive(ART1731BIS) - BNHDEV * 1 - is_positive(ART1731BIS) - BNHDEC * 1 - is_positive(ART1731BIS) - BNHDEP * 1 - is_positive(ART1731BIS) + ANOCEP - min(DNOCEP, DNOCEP1731 + 0) * is_positive(ART1731BIS) + DNOCEP * 1 - ART1731BIS + BAFPVV + BAFPVC + BAFPVP + BAF1AV + BAF1AC + BAF1AP + MIBVENV + MIBVENC + MIBVENP + MIBPRESV + MIBPRESC + MIBPRESP + MIBPVV + MIBPVC + MIBPVP - BICPMVCTV - BICPMVCTC - BICPMVCTP + MIBNPVENV + MIBNPVENC + MIBNPVENP + MIBNPPRESV + MIBNPPRESC + MIBNPPRESP + MIBNPPVV + MIBNPPVC + MIBNPPVP - MIBNPDCT - min(DEFBIC6, DEFBIC61731 + 0) * is_positive(ART1731BIS) + DEFBIC6 * 1 - ART1731BIS - min(DEFBIC5, DEFBIC51731 + 0) * is_positive(ART1731BIS) + DEFBIC5 * 1 - ART1731BIS - min(DEFBIC4, DEFBIC41731 + 0) * is_positive(ART1731BIS) + DEFBIC4 * 1 - ART1731BIS - min(DEFBIC3, DEFBIC31731 + 0) * is_positive(ART1731BIS) + DEFBIC3 * 1 - ART1731BIS - min(DEFBIC2, DEFBIC21731 + 0) * is_positive(ART1731BIS) + DEFBIC2 * 1 - ART1731BIS - min(DEFBIC1, DEFBIC11731 + 0) * is_positive(ART1731BIS) + DEFBIC1 * 1 - ART1731BIS + BNCPROV + BNCPROC + BNCPROP + BNCPROPVV + BNCPROPVC + BNCPROPVP - BNCPMVCTV + BNCNPV + BNCNPC + BNCNPP + BNCNPPVV + BNCNPPVC + BNCNPPVP + PVINVE - BNCNPDCT + BA1AV + BA1AC + BA1AP + BI1AV + BI1AC + BI1AP + MIB1AV + MIB1AC + MIB1AP - MIBDEV - MIBDEC - MIBDEP + BI2AV + BI2AC + BI2AP + MIBNP1AV + MIBNP1AC + MIBNP1AP - MIBNPDEV - MIBNPDEC - MIBNPDEP - BNCPRODEV - BNCPRODEC - BNCPRODEP + BN1AV + BN1AC + BN1AP + BNCNP1AV + BNCNP1AC + BNCNP1AP - BNCNPDEV - BNCNPDEC - BNCNPDEP * 1 - is_positive(APPLI_COLBERT + APPLI_OCEANS)
TXPFICHR = 40 if (V_CODPFICHR == 3 or V_CODPFICHR == 30 or V_CODPFICHR == 55) else (80 if (V_CODPFICHR == 4 or V_CODPFICHR == 5 or V_CODPFICHR == 32) else (100 if (V_CODPFICHR == 6) else 0))
PPE_SALAVDEF1 = TSHALLO1 + CARTSP1 * is_positive(CARTSNBAP1) + SALEXT1
RCELREP_HS_R = is_positive(CELREPHS) * arr(CELREPHS * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
AILMIH_R = DILMIH * 1 - V_CNR
# TODO TXINRISF
BNCP = BNHREP + BNCREP - BNHDEP - BNCDEP
NPLOCPAC = min(0, LOCNPPAC + LOCGITHCP - LOCDEFNPPAC * 1 - is_positive(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFNPPAC * 1 - is_positive(ART1731BIS * PREM8_11) - LOCNPPAC - LOCGITHCP) + arr(max(0, LOCNPPAC + LOCGITHCP - LOCDEFNPPAC * 1 - is_positive(ART1731BIS * PREM8_11)) * MAJREV) * is_positive(LOCNPPAC + LOCGITHCP - LOCDEFNPPAC * 1 - is_positive(ART1731BIS * PREM8_11))
ZIPQF2TOT = sum([ZIPQFV2, ZIPQFC2, ZIPQF12, ZIPQF22, ZIPQF32, ZIPQF42])
ADUFREPFI = DUFLOFI * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DISFDONF = ISFDONF
NPLOCCGAPAC = LOCNPCGAPAC + LOCGITCP - LOCDEFNPCGAPAC * 1 - is_positive(ART1731BIS * PREM8_11)
LIGDUFI = is_positive(DUFLOFI) * LIG1 * LIG2
DCELREPYJ = CELREPYJ
BSOUFIP = min(FFIP, LIM_SOUFIP * 1 + BOOL_0AM)
LIGTXMOYPOS = is_positive(present(RMOND) + is_positive(VARRMOND) * present(DEFZU)) * 1 - is_positive(DEFRIMOND) * LIG1 * LIG2
INDV = positif_ou_nul(is_positive(ALLOV) + is_positive(REMPLAV) + is_positive(REMPLANBV) + is_positive(BACDEV) + is_positive(BACREV) + is_positive(_4BACREV) + is_positive(_4BAHREV) + is_positive(BAFPVV) + is_positive(BAFV) + is_positive(BAHDEV) + is_positive(BAHREV) + is_positive(BICDEV) + is_positive(BICDNV) + is_positive(BICHDEV) + is_positive(BICHREV) + is_positive(BICNOV) + is_positive(BICREV) + is_positive(BIHDNV) + is_positive(BIHNOV) + is_positive(BNCAADV) + is_positive(BNCAABV) + is_positive(BNCDEV) + is_positive(BNCNPPVV) + is_positive(BNCNPV) + is_positive(BNCPROPVV) + is_positive(BNCPROV) + is_positive(BNCREV) + is_positive(BNHDEV) + is_positive(BNHREV) + is_positive(BPCOSAV) + is_positive(CARPENBAV) + is_positive(CARPEV) + is_positive(CARTSNBAV) + is_positive(CARTSV) + is_positive(COTFV) + is_positive(DETSV) + is_positive(FRNV) + is_positive(GLD1V) + is_positive(GLDGRATV) + is_positive(GLD2V) + is_positive(GLD3V) + is_positive(ANOCEP) + is_positive(MIBNPPRESV) + is_positive(MIBNPPVV) + is_positive(MIBNPVENV) + is_positive(MIBPRESV) + is_positive(MIBPVV) + is_positive(MIBVENV) + is_positive(PALIV) + is_positive(PENSALV) + is_positive(PENSALNBV) + is_positive(PEBFV) + is_positive(PRBRV) + is_positive(TSHALLOV) + is_positive(DNOCEP) + is_positive(BAFORESTV) + is_positive(LOCPROCGAV) + is_positive(LOCPROV) + is_positive(LOCNPCGAV) + is_positive(LOCNPV) + is_positive(LOCDEFNPCGAV) + is_positive(LOCDEFNPV) + is_positive(MIBMEUV) + is_positive(MIBGITEV) + is_positive(BICPMVCTV) + is_positive(BNCPMVCTV) + is_positive(LOCGITV) + is_positive(PENINV) + is_positive(CODRAZ) + is_positive(CODDAJ) + is_positive(CODEAJ))
LIGANNUL = is_positive(ANNUL2042)
DEFBACREP = is_positive(_4BACREP) * arr(BACDEP * 1 - is_positive(ART1731BIS * PREM8_11) * BACREP / BARREVAP) + 1 - is_positive(_4BACREP) * BACDEP * 1 - is_positive(ART1731BIS * PREM8_11)
ACELREPYE = CELREPYE * 1 - ART1731BIS + min(CELREPYE, max(ACELREPYE_P + ACELREPYEP2, ACELREPYE1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PS_TAX1649 = TAX1649
BTP40 = BPV40V + BPV40C * 1 - is_positive(IPVLOC)
BASSURC1 = max(0, CESSASSC - BASSURC3 - BASSURC2 - LIM_ASSUR1)
RFG = arr(BRFG * TX_REDGARD / 100) * 1 - V_CNR
ACELRREDMG = CELRREDMG * 1 - ART1731BIS + min(CELRREDMG, max(ACELRREDMG_P + ACELRREDMGP2, ACELRREDMG1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DCELREPGP = CELREPGP
DCELREPHR = CELREPHR
# TODO RTOURES
ACELHL_R = positif_ou_nul(CELLIERHL) * BCEL_HL * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TGATASAV = BPCOSAV + GLDGRATV
RENOV = arr(BRENOV * TX_RENOV / 100) * 1 - V_CNR
DSYND = RDSYVO + RDSYCJ + RDSYPP
# TODO MAJOTAXATARDIF_R
# TODO IN57
LIGCIGE = is_positive(RDTECH + RDEQPAHA) * LIG1 * LIG2
TDEDMINV = is_positive(DETSV) * MIN_DEMEMPLOI + 1 - is_positive(DETSV) * MIN_DEDSFORFTS
ZIG_INF8 = is_positive(CS_DEG) * is_positive(SEUIL_8 - CS_DEG) * LIG2
LIGCELLD = is_positive(DCELRREDLD) * LIG1 * LIG2
LIGDFLOCNPF = is_positive(DEFLOCNPF) * is_positive(DEFRILOC) * 1 - PREM8_11
# TODO PALIQC
SOMMEA893 = SOMMEA881
BRSE8TX = PENECS * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
APPLI_GP = 0
ZIGBASESAL1 = is_positive(BCVNSAL + V_CVNANT) * is_positive(INDCTX)
AINVRED = DINVRED * 1 - ART1731BIS + min(DINVRED, max(AINVRED_P + AINVREDP2, AINVRED1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
BCEL_JP = arr(min(CELLIERJP + 0, LIMCELLIER) / 5)
DPA = sum([min(NCHENF1, LIMDPAE) + min(arr(CHENF1 * MAJREV), LIMDPAE), min(NCHENF2, LIMDPAE) + min(arr(CHENF2 * MAJREV), LIMDPAE), min(NCHENF3, LIMDPAE) + min(arr(CHENF3 * MAJREV), LIMDPAE), min(NCHENF4, LIMDPAE) + min(arr(CHENF4 * MAJREV), LIMDPAE)]) + TOTPA * 1 - V_CNR * 1 - is_positive(RE168 + TAX1649)
LIGMXBIP = is_positive(MIBEXV + MIBEXC + MIBEXP) * LIG1 * LIG2
PLAFCDPART = is_positive(V_0AL) * PLAF_CDPART
DTEC = RISKTEC
BINHTAV = max(0, arr(BICHREV - BICHDEV * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV)) + min(0, BICHREV - BICHDEV * 1 - is_positive(ART1731BIS * PREM8_11))
LIGMBDREPNPC = is_positive(MIBDREPNPC) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
APATNAT3 = PATNAT3 * 1 - ART1731BIS + min(PATNAT3, max(APATNAT3_P + APATNAT3P2, APATNAT31731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RV4 = arr(RVB4 * TXRVT4 / 100)
# TODO RIVL3RES
INTANISF = MOISAN_ISF / 10000 - INTMSISF * 10000 * present(MOISAN_ISF)
BTPSB = PVTAXSB * 1 - is_positive(IPVLOC)
DCELFD = CELLIERFD
DUFREPFI = DUFLOFI
DENPLOCP = LOCNPCGAPAC + LOCGITCP - LOCDEFNPCGAPAC + LOCNPPAC + LOCGITHCP - LOCDEFNPPAC
AILMIY = DILMIY * 1 - ART1731BIS + min(DILMIY, max(AILMIY_P + AILMIYP2, AILMIY1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
DCREATHANDI = CONVHAND
REPCIF = positif_ou_nul(COD7UA + COD7UB - PLAF_FOREST1 * 1 + BOOL_0AM) * RDFORESTRA + 1 - positif_ou_nul(COD7UA + COD7UB - PLAF_FOREST1 * 1 + BOOL_0AM) * max(0, RDFORESTRA - PLAF_FOREST1 * 1 + BOOL_0AM - COD7UA - COD7UB) * 1 - V_CNR
DSOCREPR = RSOCREPRISE
LIG023 = sum([_3TSN1, _3TSN2, _3TSN3, _3TSN4])
TXSPEHC = max(0, arr(BNHREC + XHONOC - BNHDEC * 1 - is_positive(ART1731BIS) * MAJREV)) + min(0, BNHREC + XHONOC - BNHDEC * 1 - is_positive(ART1731BIS))
DILMJX = LOCMEUBJX
XBAP = BAHEXP + BAEXP
DENPLOCAFFC = is_positive(present(LOCNPCGAC) + present(LOCGITCC) + present(LOCDEFNPCGAC) + present(LOCNPC) + present(LOCGITHCC) + present(LOCDEFNPC))
NB0BT2MIQAR = null(1 - VAR0BT) * null(V_0CF + V_0DJ + V_0CR + 0) * is_positive(V_0CH + 0) + is_positive(V_0CH - 1)
DEDMINV = is_positive(DETSV) * MIN_DEMEMPLOI + 1 - is_positive(DETSV) * MIN_DEDSFORFTS
BNNSC = is_positive(BNHREC - BNHDEC * 1 - is_positive(ART1731BIS * PREM8_11)) * arr(BNHREC - BNHDEC * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV) + 1 - positif_ou_nul(BNHREC - BNHDEC * 1 - is_positive(ART1731BIS * PREM8_11)) * BNHREC - BNHDEC * 1 - is_positive(ART1731BIS * PREM8_11)
BPTP18 = BTP18 * 1 - is_positive(present(TAX1649) + present(RE168))
DILMJY = LOCMEUBJY
# TODO MAJOHRTARDIF_D
ACELRREDLB = CELRREDLB * 1 - ART1731BIS + min(CELRREDLB, max(ACELRREDLB_P + ACELRREDLBP2, ACELRREDLB1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TGLPRRTOT = sum([TGLPRRV + TGLPRRZV, TGLPRRC + TGLPRRZC, TGLPRR1 + TGLPRRZ1, TGLPRR2 + TGLPRRZ2, TGLPRR3 + TGLPRRZ3, TGLPRR4 + TGLPRRZ4])
T2TSN3 = CARTSP3 + REMPLAP3
BARSREVP = BAHREP + _4BAHREP
DILMJW = LOCMEUBJW
XBNP = BNHEXP + BNCEXP
DCELRREDLX = CELRREDLX
BCICAPAVIS = max(0, PRELIBXT - arr(PRELIBXT * TX10 / 100))
ACELREPHR = CELREPHR * 1 - ART1731BIS + min(CELREPHR, max(ACELREPHR_P + ACELREPHRP2, ACELREPHR1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TSBP = sum([TSB1, TSB2, TSB3, TSB4])
RD_REVETRANG = SALECS + SALECSG + ALLECS + INDECS + PENECS + COD8SA + COD8SB
LIGCREFORM = is_positive(CREFORMCHENT) * LIG1 * LIG2
BPTP2 = BTP2 * 1 - is_positive(present(TAX1649) + present(RE168))
TXPF1728ISF = 10 if (V_CODPF1728ISF == 7 or V_CODPF1728ISF == 17 or V_CODPF1728ISF == 18) else (40 if (V_CODPF1728ISF == 8 or V_CODPF1728ISF == 34) else 0)
LIG80 = is_positive(present(RDREP) + present(DONETRAN)) * LIG1 * LIG2
LIG_MIBP = is_positive(sum([MIBVENV, MIBVENC, MIBVENP]) + sum([MIBPRESV, MIBPRESC, MIBPRESP]) + abs(MIB_NETCT) + 0) * 1 - null(4 - V_REGCO)
# TODO MAJOCSTARDIF_P
LIGLOYIMP = is_positive(LOYIMP) * LIG1 * LIG2
BICPF = sum([BIPTAV + BIHTAV + MIB_NETVV + MIB_NETPV, BIPTAC + BIHTAC + MIB_NETVC + MIB_NETPC, BIPTAP + BIHTAP + MIB_NETVP + MIB_NETPP]) + MIB_NETCT
TBICPF = TMIBNETVF + TMIBNETPF + MIB_NETCT
LIGCELHF = is_positive(DCELREPHF) * LIG1 * LIG2
PMIB_NETPC = MIBPRESC - PMIB_APC
LIGCELLT = is_positive(DCELRREDLT) * LIG1 * LIG2
NATMAJRSE1 = 1
BRSE1 = SALECS * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
DILMOE = COD7OE
NATMAJ = 1
LIGCELYI = is_positive(DCELREPYI) * LIG1 * LIG2
MAJOHRTARDIF_D1 = MAJOHRTARDIF_D - MAJOHR17_2TARDIF_D
BASSURV1 = max(0, CESSASSV - BASSURV3 - BASSURV2 - LIM_ASSUR1)
MAJTXRSE3 = COPETO
PMIB_NETVP = MIBVENP - PMIB_AVP
ABNCPDECV = AUTOBNCV
NBPOTE = V_0CF + V_0CH + V_0CR + V_0DJ + V_0DN + V_0DP
ZIGINT2 = is_positive(RETRSE2) * LIG2
PERPBNCPNC = BNCEXC + BNCREC - BNCDEC * 1 - is_positive(ART1731BIS) + BNHEXC + BNHREC - BNHDEC * 1 - is_positive(ART1731BIS) + BNCCRC
ACELCOM = BCELCOM2011 * 1 - ART1731BIS + min(BCELCOM2011, max(ACELCOM_P + ACELCOMP2, ACELCOM1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELLIERNP + CELLIERNR + CELLIERNS + CELLIERNT) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
# TODO ISFDEG
INDP = positif_ou_nul(is_positive(ALLO1) + is_positive(ALLO2) + is_positive(ALLO3) + is_positive(ALLO4) + is_positive(CARTSP1) + is_positive(CARTSP2) + is_positive(CARTSP3) + is_positive(CARTSP4) + is_positive(CARTSNBAP1) + is_positive(CARTSNBAP2) + is_positive(CARTSNBAP3) + is_positive(CARTSNBAP4) + is_positive(REMPLAP1) + is_positive(REMPLAP2) + is_positive(REMPLAP3) + is_positive(REMPLAP4) + is_positive(REMPLANBP1) + is_positive(REMPLANBP2) + is_positive(REMPLANBP3) + is_positive(REMPLANBP4) + is_positive(BACDEP) + is_positive(BACREP) + is_positive(_4BACREP) + is_positive(_4BAHREP) + is_positive(BAFP) + is_positive(ANOPEP) + is_positive(DNOCEPP) + is_positive(BAFPVP) + is_positive(BAHDEP) + is_positive(BAHREP) + is_positive(BICDEP) + is_positive(BICDNP) + is_positive(BICHDEP) + is_positive(BICHREP) + is_positive(BICNOP) + is_positive(BICREP) + is_positive(BIHDNP) + is_positive(BIHNOP) + is_positive(BNCAADP) + is_positive(BNCAABP) + is_positive(BNCDEP) + is_positive(BNCNPP) + is_positive(BNCNPPVP) + is_positive(BNCPROP) + is_positive(BNCPROPVP) + is_positive(BNCREP) + is_positive(BNHDEP) + is_positive(BNHREP) + is_positive(COTF1) + is_positive(COTF2) + is_positive(COTF3) + is_positive(COTF4) + is_positive(DETS1) + is_positive(DETS2) + is_positive(DETS3) + is_positive(DETS4) + is_positive(FRN1) + is_positive(FRN2) + is_positive(FRN3) + is_positive(FRN4) + is_positive(MIBNPPRESP) + is_positive(MIBNPPVP) + is_positive(MIBNPVENP) + is_positive(MIBPRESP) + is_positive(MIBPVP) + is_positive(MIBVENP) + is_positive(PALI1) + is_positive(PALI2) + is_positive(PALI3) + is_positive(PALI4) + is_positive(PENSALP1) + is_positive(PENSALP2) + is_positive(PENSALP3) + is_positive(PENSALP4) + is_positive(PENSALNBP1) + is_positive(PENSALNBP2) + is_positive(PENSALNBP3) + is_positive(PENSALNBP4) + is_positive(PEBF1) + is_positive(PEBF2) + is_positive(PEBF3) + is_positive(PEBF4) + is_positive(PRBR1) + is_positive(PRBR2) + is_positive(PRBR3) + is_positive(PRBR4) + is_positive(CARPEP1) + is_positive(CARPEP2) + is_positive(CARPEP3) + is_positive(CARPEP4) + is_positive(CARPENBAP1) + is_positive(CARPENBAP2) + is_positive(CARPENBAP3) + is_positive(CARPENBAP4) + is_positive(TSHALLO1) + is_positive(TSHALLO2) + is_positive(TSHALLO3) + is_positive(TSHALLO4) + is_positive(BAFORESTP) + is_positive(LOCPROCGAP) + is_positive(LOCPROP) + is_positive(LOCNPCGAPAC) + is_positive(LOCNPPAC) + is_positive(LOCDEFNPCGAPAC) + is_positive(LOCDEFNPPAC) + is_positive(LOCDEFPROCGAP) + is_positive(LOCDEFPROP) + is_positive(MIBMEUP) + is_positive(MIBGITEP) + is_positive(BICPMVCTP) + is_positive(BNCPMVCTP) + is_positive(LOCGITP) + is_positive(PENIN1) + is_positive(PENIN2) + is_positive(PENIN3) + is_positive(PENIN4) + is_positive(CODRCZ) + is_positive(CODRDZ) + is_positive(CODREZ) + is_positive(CODRFZ))
RB06 = RE168 + TAX1649
DREDMEUB = REDMEUBLE
MIB_AVC = min(MIB_TVENC, max(MIN_MBIC, arr(MIB_TVENC * TX_MIBVEN / 100)))
PPENBH1 = PPENHP1 + PPEXT1
NPLOCCGASSV = LOCNPCGAV + LOCGITCV - LOCDEFNPCGAV
# TODO PROQDEFBAT
SOMMEA538PB = present(BAFORESTP) + present(BAFPVP) + present(BACREP) + present(_4BACREP) + present(BAHREP) + present(_4BAHREP) + present(MIBVENP) + present(MIBPRESP) + present(MIBPVP) + present(BICNOP) + present(LOCPROCGAP) + present(BIHNOP) + present(LOCPROP) + present(MIBNPVENP) + present(MIBNPPRESP) + present(MIBNPPVP) + present(BICREP) + present(LOCNPCGAPAC) + present(LOCGITCP) + present(BICHREP) + present(LOCNPPAC) + present(LOCGITHCP) + present(BNCPROP) + present(BNCPROPVP) + present(BNCREP) + present(BNHREP) + present(BNCNPP) + present(BNCNPPVP) + present(ANOPEP) + present(BNCAABP) + present(MIBMEUP) + present(MIBGITEP) + present(LOCGITP) + present(INVENTP)
NPLOCC = min(0, LOCNPC + LOCGITHCC - LOCDEFNPC * 1 - is_positive(ART1731BIS * PREM8_11)) * positif_ou_nul(LOCDEFNPC * 1 - is_positive(ART1731BIS * PREM8_11) - LOCNPC - LOCGITHCC) + arr(max(0, LOCNPC + LOCGITHCC - LOCDEFNPC * 1 - is_positive(ART1731BIS * PREM8_11)) * MAJREV) * is_positive(LOCNPC + LOCGITHCC - LOCDEFNPC * 1 - is_positive(ART1731BIS * PREM8_11))
DCELCOM = CELLIERNP + CELLIERNR + CELLIERNS + CELLIERNT
XBNCMPRO = sum([BNCPROEXV, BNCPROEXC, BNCPROEXP])
SOMMEA700 = present(BAEXV) + present(BACREV) + present(_4BACREV) + present(BA1AV) + present(BACDEV) + present(BAEXC) + present(BACREC) + present(_4BACREC) + present(BA1AC) + present(BACDEC) + present(BAEXP) + present(BACREP) + present(_4BACREP) + present(BA1AP) + present(BACDEP) + present(BAPERPV) + present(BAPERPC) + present(BAPERPP) + present(BANOCGAV) + present(BANOCGAC) + present(BANOCGAP) + present(BAHEXV) + present(BAHREV) + present(_4BAHREV) + present(BAHEXC) + present(BAHREC) + present(_4BAHREC) + present(BAHEXP) + present(BAHREP) + present(_4BAHREP) + present(BICEXV) + present(BICNOV) + present(LOCPROCGAV) + present(BI1AV) + present(BICDNV) + present(LOCDEFPROCGAV) + present(BICEXC) + present(BICNOC) + present(LOCPROCGAC) + present(BI1AC) + present(BICDNC) + present(LOCDEFPROCGAC) + present(BICEXP) + present(BICNOP) + present(LOCPROCGAP) + present(BI1AP) + present(BICDNP) + present(LOCDEFPROCGAP) + present(BICNPEXV) + present(BICREV) + present(LOCNPCGAV) + present(LOCGITCV) + present(BI2AV) + present(BICDEV) + present(LOCDEFNPCGAV) + present(BICNPEXC) + present(BICREC) + present(LOCNPCGAC) + present(LOCGITCC) + present(BI2AC) + present(BICDEC) + present(LOCDEFNPCGAC) + present(BICNPEXP) + present(BICREP) + present(LOCNPCGAPAC) + present(LOCGITCP) + present(BI2AP) + present(BICDEP) + present(LOCDEFNPCGAPAC) + present(BNCEXV) + present(BNCREV) + present(BN1AV) + present(BNCDEV) + present(BNCEXC) + present(BNCREC) + present(BN1AC) + present(BNCDEC) + present(BNCEXP) + present(BNCREP) + present(BN1AP) + present(BNCDEP) + present(BNHEXV) + present(BNHREV) + present(BNHEXC) + present(BNHREC) + present(BNHEXP) + present(BNHREP) + present(XHONOAAV) + present(XHONOAAC) + present(XHONOAAP) + present(BNCNPREXAAV) + present(BNCNPREXV) + present(BNCNPREXAAC) + present(BNCNPREXC) + present(BNCNPREXAAP) + present(BNCNPREXP) + present(BNCAABV) + present(BNCAADV) + present(ANOCEP) + present(PVINVE) + present(INVENTV) + present(BNCAABC) + present(BNCAADC) + present(DNOCEP) + present(ANOVEP) + present(PVINCE) + present(INVENTC) + present(BNCAABP) + present(BNCAADP) + present(DNOCEPC) + present(ANOPEP) + present(PVINPE) + present(INVENTP) + present(DNOCEPP)
EXPR1 = PRB1 + _2PRB1 + PEBF1
ACELREPYI = CELREPYI * 1 - ART1731BIS + min(CELREPYI, max(ACELREPYI_P + ACELREPYIP2, ACELREPYI1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DILMIA = LOCMEUBIA
APPLI_ILIAD = 0
PERPSALC = TSHALLOC + ALLOC + GLD1C + GLD2C + GLD3C + GLDGRATC + BPCOSAC + TSASSUC + CARTSC + REMPLAC + CODDBJ + CODEBJ + max(0, SALEXTC - COD1BD)
ZIPQTSREMP1TOT = sum([ZIPQTSREMPV1, ZIPQTSREMPC1, ZIPQTSREMP11, ZIPQTSREMP21, ZIPQTSREMP31, ZIPQTSREMP41])
ACELREPGJ = CELREPGJ * 1 - ART1731BIS + min(CELREPGJ, max(ACELREPGJ_P + ACELREPGJP2, ACELREPGJ1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PERP_INDP = is_positive(0 + is_positive(TSHALLO1) + is_positive(ALLO1) + is_positive(FEXP) + is_positive(BAFP) + is_positive(BAFPVP) + is_positive(BAEXP) + is_positive(BACREP) + is_positive(_4BACREP) + is_positive(BACDEP * 1 - is_positive(ART1731BIS)) + is_positive(BAHEXP) + is_positive(BAHREP) + is_positive(_4BAHREP) + is_positive(BAHDEP * 1 - is_positive(ART1731BIS)) + is_positive(BAPERPP) + is_positive(MIBEXP) + is_positive(MIBVENP) + is_positive(MIBPRESP) + is_positive(MIBPVP) + is_positive(AUTOBICVP) + is_positive(AUTOBICPP) + is_positive(BICEXP) + is_positive(BICNOP) + is_positive(BICDNP * 1 - is_positive(ART1731BIS)) + is_positive(BIHEXP) + is_positive(BIHNOP) + is_positive(BIHDNP * 1 - is_positive(ART1731BIS)) + is_positive(BIPERPP) + is_positive(LOCPROCGAP) - is_positive(LOCDEFPROCGAP * 1 - is_positive(ART1731BIS)) + is_positive(LOCPROP) - is_positive(LOCDEFPROP * 1 - is_positive(ART1731BIS)) + is_positive(BNCPROEXP) + is_positive(BNCPROP) + is_positive(BNCPROPVP) + is_positive(AUTOBNCP) + is_positive(BNCEXP) + is_positive(BNCREP) + is_positive(BNCDEP * 1 - is_positive(ART1731BIS)) + is_positive(BNHEXP) + is_positive(BNHREP) + is_positive(BNHDEP * 1 - is_positive(ART1731BIS)) + is_positive(BNCCRP))
RFIP = arr(BSOUFIP * TX_REDFIP / 100) * 1 - V_CNR
ZIGREVXC = is_positive(REVCSXC + COD8XI) * TYPE2
RCEL_FABC = is_positive(CELLIERFA) * arr(ACELFABC * TX13 / 100) + is_positive(CELLIERFB) * arr(ACELFABC * TX6 / 100) + is_positive(CELLIERFC) * arr(ACELFABC * TX24 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PRP = PRBR1 + PRBR2 + PRBR3 + PRBR4
LIGCICA = is_positive(BAILOC98) * LIG1 * LIG2
GLTSTOTM = sum([GLTSVM, GLTSCM, GLTS1M, GLTS2M, GLTS3M, GLTS4M])
DNOUV = REPSNO3 + REPSNO2 + REPSNO1 + REPSNON + COD7CQ + COD7CR + PETIPRISE + RDSNO
RGPAR = is_positive(is_positive(PRODOM) + is_positive(CODDAJ) + is_positive(CODDBJ)) * 1 + is_positive(is_positive(PROGUY) + is_positive(CODEAJ) + is_positive(CODEBJ)) * 2 + is_positive(is_positive(PROGUY) + is_positive(CODEAJ) + is_positive(CODEBJ)) * is_positive(is_positive(PRODOM) + is_positive(CODDAJ) + is_positive(CODDBJ))
MIBNETVF = sum([MIB_NETVV, MIB_NETVC, MIB_NETVP])
RCMRNTNC = RCMTNC - RCMRTNC
DEPMOB = DEPMOBIL + RDEQPAHA + RDTECH + COD7WD * is_positive(V_NOTRAIT - 10)
ZIGPROVYD = is_positive(CSPROVYD) * TYPE2
TAUX2 = TX_BAR2 - TX_BAR1 * 1 - V_ANC_BAR + TX_BAR1A * V_ANC_BAR
DSURV = RDRESU
ZIGREVXB = is_positive(REVCSXB) * TYPE2
ZIGANNUL = is_positive(INDCTX) * is_positive(ANNUL2042)
PLOCCGAV = LOCPROCGAV - LOCDEFPROCGAV * 1 - is_positive(ART1731BIS * PREM8_11)
LIGINRLOY = is_positive(RETLOY)
XBNC = BNHEXC + BNCEXC
PPEPEXO2 = is_positive(PPE_AVRPRO1P + 0) + is_positive(SALEXT2 + 0) + 4 * is_positive(PPEXT2 + PPETPP2 + 0)
LIMDPAE = LIM_PENSALENF
PPE_BOOL_SIFM = BOOL_0AM + is_positive(V_0AV) * is_positive(V_0AZ)
PPENEXO3 = null(PPETPP3 + 0) + is_positive(TSHALLO3 + 0) + is_positive(SALEXT3 + 0) + 4 * is_positive(PPENHP3 + 0) + 8 * is_positive(PPEXT3 + 0)
BINC = BICREC - BICDEC + BICHREC - BICHDEC
RESTIMOD = min(RIMOSAUVANT, LIM_RESTIMO)
MIBR = sum([MIBRV, MIBRP, MIBRC])
BDRSE1 = max(0, SALECS - REVCSXA - arr(CSPROVYD / TX075 / 100)) * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
GLTSREMPTOTM = sum([GLTSREMPVM, GLTSREMPCM, GLTSREMP1M, GLTSREMP2M, GLTSREMP3M, GLTSREMP4M])
XBNCPRO = sum([XBNV, XBNC, XBNP])
# TODO MAJOCSTARDIF_R
IREP = REI
TXPFIRSE1 = 40 if (V_CODPFIRSE1 == 3 or V_CODPFIRSE1 == 30 or V_CODPFIRSE1 == 55) else (80 if (V_CODPFIRSE1 == 4 or V_CODPFIRSE1 == 5) else (100 if (V_CODPFIRSE1 == 6) else 0))
PTPS10C = arr(PERPSALC * TX_DEDFORFTS / 100)
PPE_SALAVDEF4 = TSHALLO4 + CARTSP4 * is_positive(CARTSNBAP4) + SALEXT4
RESIMEUB5 = arr(arr(min(DRESIMEUB, PLAF_RESINEUV) / 9) * TX25 / 100)
TMIB_AVP = min(TMIB_TVENP, max(MIN_MBIC, arr(TMIB_TVENP * TX_MIBVEN / 100)))
LIGNANTREIR = is_positive(V_ANTREIR + 0) * is_positive(V_ANTCR + 0) * 1 - APPLI_OCEANS
LIGILMIB = is_positive(DILMIB) * LIG1 * LIG2
DREDREP = REDREPNPRO
DCELREPHB = CELREPHB
RDUFLO_GIH = arr(arr(min(DUFLOGI + 0, LIMDUFLO) / 9) * TX29 / 100) + arr(arr(min(DUFLOGH + 0, LIMDUFLO - min(DUFLOGI + 0, LIMDUFLO)) / 9) * TX18 / 100) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
PPE_SALAVDEFC = TSHALLOC + BPCOSAC + GLD1C + GLD2C + GLD3C + TSASSUC + CARTSC * is_positive(CARTSNBAC) + CODDBJ + CODEBJ + SALEXTC + GLDGRATC
INDRSE1X = is_positive(CS_DEG) * is_positive(BRSE1) * is_positive(INDCTX)
# TODO BIH2P
BRSE4 = PENECS + COD8SB * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
BI1C = BI1AC
REPDUEKL = RIVDUEKL * 7 + RIVDUEKL8
TSPETOTP = BNCPROP + AUTOBNCP + BNCNPP
RCELREP_HS = is_positive(CELREPHS) * arr(ACELREPHS * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGRESTAU = is_positive(CRERESTAU) * LIG1 * LIG2
TPMIB_NETPP = MIBPRESP + AUTOBICPP - TPMIB_APP
PPEPRIMEPT = sum([PPEPRIME1, PPEPRIME2, PPEPRIME3, PPEPRIME4, PPEPRIMEU, PPEPRIMEN]) * 1 - V_CNR
RCEL_HNO = is_positive(CELLIERHN) * arr(ACELHNO * TX25 / 100) + is_positive(CELLIERHO) * arr(ACELHNO * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGREPTOUR = is_positive(RINVLOCINV + REPINVTOU + INVLOCXN + COD7UY) * LIG1
INDRNSC = is_positive(present(ANOCEP) + present(BA1AC) + present(BACDEC) + present(BACREC) + present(BAEXC) + present(BAF1AC) + present(BAFC) + present(BAFPVC) + present(BAHDEC) + present(BAHEXC) + present(BAHREC) + present(BAPERPC) + present(BI1AC) + present(BI2AC) + present(BICDEC) + present(BICDNC) + present(BICEXC) + present(BICHDEC) + present(BICNOC) + present(BIHDNC) + present(BIHEXC) + present(BIHNOC) + present(BIPERPC) + present(BN1AC) + present(BNCDEC) + present(BNCEXC) + present(BNCPRO1AC) + present(BNCPROC) + present(BNCPMVCTV) + present(BNCPRODEC) + present(BNCPROEXC) + present(BNCPROPVC) + present(BNCREC) + present(BNHDEC) + present(BNHEXC) + present(BNHREC) + present(DAGRI6) + present(DAGRI5) + present(DAGRI4) + present(DAGRI3) + present(DAGRI2) + present(DAGRI1) + present(DEFBIC1) + present(DEFBIC2) + present(DEFBIC3) + present(DEFBIC4) + present(DEFBIC5) + present(DEFBIC6) + present(DNOCEP) + present(FEXC) + present(MIB1AC) + present(BICPMVCTV) + present(BICPMVCTC) + present(BICPMVCTP) + present(MIBDEC) + present(MIBEXC) + present(MIBPRESC) + present(MIBPVC) + present(MIBVENC) + present(PVINVE) + present(RCSC) + 0)
BTPSK = BPVSK * 1 - is_positive(IPVLOC)
DILMOC = COD7OC
RESIMEUB4 = arr(arr(min(DRESIMEUB, PLAF_RESINEUV) / 9) * TX25 / 100)
TXSPEAAV = BNCREV + XHONOAAV - BNCDEV * 1 - is_positive(ART1731BIS)
LIGDEFBNCNPF = is_positive(DEFBNCNPF) * is_positive(DEFRIBNC) * null(PREM8_11)
NPLOCSSC = min(0, LOCNPC + LOCGITHCC - LOCDEFNPC) * positif_ou_nul(LOCDEFNPC - LOCNPC - LOCGITHCC) + arr(max(0, LOCNPC + LOCGITHCC - LOCDEFNPC) * MAJREV) * is_positive(LOCNPC + LOCGITHCC - LOCDEFNPC)
DBACT = 0 if (APPLI_COLBERT == 0 and present(RDCOM) == 1 and present(NBACT) == 0) else NBACT
PRBV = PRBRV + PALIV + PENINV
SOMMEBA = BAFV + BAFC + BAFP + BAFORESTV + BAFORESTC + BAFORESTP + BAFPVV + BAFPVC + BAFPVP + BACREV + BAHREV + BACREC + BAHREC + BACREP + BAHREP + 0
INDCTX23 = 1 if (V_NOTRAIT + 0 == 23 or V_NOTRAIT + 0 == 33 or V_NOTRAIT + 0 == 43 or V_NOTRAIT + 0 == 53 or V_NOTRAIT + 0 == 63) else 0
GLTSREMPTOT = sum([GLTSREMPV, GLTSREMPC, GLTSREMP1, GLTSREMP2, GLTSREMP3, GLTSREMP4])
LIGHABPRIN = is_positive(present(PREHABT) + present(PREHABT1) + present(PREHABT2) + present(PREHABTN) + present(PREHABTN1) + present(PREHABTN2) + present(PREHABTVT)) * LIG1 * LIG2
LIGROBOR = is_positive(RFROBOR) * LIG1 * LIG2
DFANT = DEFAA5 + DEFAA4 + DEFAA3 + DEFAA2 + DEFAA1 + DEFAA0 * 1 - is_positive(ART1731BIS * PREM8_11) * 1 - is_positive(IPVLOC)
LIGLOCNEUF5 = is_positive(RIVL5) * LIG1
DCELREPGS = CELREPGS
DCELREPHH = CELREPHH
DPERPC = PERP_COTC + RACCOTC
NBQAR2 = null(V_0CF + V_0CR + V_0DJ - 1) * 1 / 2 * V_0CH - 1 * is_positive(V_0CH - 1) + 1 / 4 * is_positive(V_0CH + 0)
PRBC = PRBRC + PALIC + PENINC
SPEABC = arr(max(MIN_SPEBNC, SPEBASABC * SPETXAB / 100) * positif_ou_nul(SPETOTC - MIN_SPEBNC)) + arr(min(MIN_SPEBNC, SPEBASABC) * is_positive(MIN_SPEBNC - SPETOTC))
TMIB_TTV = TMIB_TVENV + TMIB_TPRESV
PPE_AVRPRO1V = present(FEXV) + present(BAFV) + present(BAEXV) + present(BACREV) + present(_4BACREV) + present(BACDEV) + present(BAHEXV) + present(BAHREV) + present(_4BAHREV) + present(BAHDEV) + present(BICEXV) + present(BICNOV) + present(BICDNV) + present(BIHEXV) + present(BIHNOV) + present(BIHDNV) + present(BNCEXV) + present(BNCREV) + present(BNCDEV) + present(BNHEXV) + present(BNHREV) + present(BNHDEV) + present(MIBEXV) + present(BNCPROEXV) + present(MIBVENV) + present(MIBPRESV) + present(BNCPROV) + present(BAFPVV) + present(MIBPVV) + present(BNCPROPVV) + present(BAFORESTV) + present(AUTOBICVV) + present(AUTOBICPV) + present(AUTOBNCV) + present(LOCPROV) + present(LOCPROCGAV) + present(LOCDEFPROCGAV) + present(LOCDEFPROV) + present(XHONOAAV) + present(XHONOV)
TTSPRP = sum([TTSPR1, TTSPR2, TTSPR3, TTSPR4])
XBICMPRO = sum([MIBEXV, MIBEXC, MIBEXP])
AILMJY = DILMJY * 1 - ART1731BIS + min(DILMJY, max(AILMJY_P + AILMJYP2, AILMJY1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
DPAE = sum([min(CHENF1, LIMDPAE), min(CHENF2, LIMDPAE), min(CHENF3, LIMDPAE), min(CHENF4, LIMDPAE)]) * 1 - V_CNR
PVBAR3VE = COD3VE + COD3UV
_2RV3 = arr(RENTAX6 * TXRVT3 / 100)
LIGSPDREPNPV = is_positive(SPEDREPNPV) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
ACELJBGL_R = positif_ou_nul(CELLIERJB + CELLIERJG + CELLIERJL) * BCEL_JBGL * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BARSV = BAHREV + _4BAHREV - BAHDEV * 1 - is_positive(ART1731BIS * PREM8_11)
REPSOC = INVSOCNRET + INVOMSOCKH + INVOMSOCKI + INVSOC2010 + INVOMSOCQU + INVLOGSOC + INVOMSOCQJ + INVOMSOCQS + INVOMSOCQW + INVOMSOCQX + CODHRA + CODHRB + CODHRC + CODHRD + CODHXA + CODHXB + CODHXC + CODHXE
IND_ZIGRCM = is_positive(present(RCMABD) + present(RCMAV) + present(RCMHAD) + present(RCMHAB) + present(RCMTNC) + present(RCMAVFT) + present(REGPRIV)) * is_positive(V_NOTRAIT - 20)
PECHEM = sum([BIPERPV, BIPERPC, BIPERPP])
FORTRA = REPFOR + REPSINFOR + REPFOR1 + REPSINFOR1 + REPFOR2 + REPSINFOR2 + REPFOR3 + REPSINFOR3 + REPSINFOR4
ACELRREDLZ = CELRREDLZ * 1 - ART1731BIS + min(CELRREDLZ, max(ACELRREDLZ_P + ACELRREDLZP2, ACELRREDLZ1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGILMJW = is_positive(DILMJW) * LIG1 * LIG2
TSPENET = sum([TSPENETV, TSPENETC, TSPENETP])
REPENT3 = INVOMQV + INVENDEB2009 + INVRETRO2 + INVDOMRET60 + INVOMRETPB + INVOMRETPF + INVOMRETPJ + INVRETRO1 + INVDOMRET50 + INVOMRETPA + INVOMRETPE + INVOMRETPI + INVIMP + INVDIR2009 + INVOMRETPD + INVOMRETPH + INVOMRETPL
DAIDE = RVAIDE + RVAIDAS
_2TSN2 = CARTSP2 + REMPLAP2
NPLOCCGAC = LOCNPCGAC + LOCGITCC - LOCDEFNPCGAC * 1 - is_positive(ART1731BIS * PREM8_11)
ZIGCSANT = is_positive(V_CSANT) * TYPE2 * 1 - APPLI_OCEANS
LIGCELJP = is_positive(DCELJP) * LIG1 * LIG2
LIGIPCAP = is_positive(present(PCAPTAXV) + present(PCAPTAXC)) * 1 - is_positive(ANNUL2042 + 0) * LIG1
TEXPRC = TPRBC + COD1BH + T2PRBC + PEBFC
LIGDRCVM = is_positive(DPVRCM) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
IND_BTANC = null(V_IND_TRAIT - 4) * is_positive(APPLI_OCEANS) * 1 + is_positive(APPLI_COLBERT) + is_positive(APPLI_BATCH) * V_BTANC + is_positive(APPLI_ILIAD) * is_positive(V_CALCULIR) * 1 + 1 - is_positive(V_CALCULIR) * V_BTANC + null(V_IND_TRAIT - 5) * 1
TSBN1 = TSHALLO1 + ALLO1
R2FA = max(0, COD2FA)
TAXASSURC = arr(BASSURC1 * TX_ASSUR1 / 100 + BASSURC2 * TX_ASSUR2 / 100 + BASSURC3 * TX_ASSUR3 / 100) * 1 - is_positive(RE168 + TAX1649)
ZIGCOD8YT = is_positive(COD8YT) * TYPE2
ZIPQPRRZ2TOT = sum([ZIPQPRRZV2, ZIPQPRRZC2, ZIPQPRRZ12, ZIPQPRRZ22, ZIPQPRRZ32, ZIPQPRRZ42])
TXSPEHP = max(0, arr(BNHREP + XHONOP - BNHDEP * 1 - is_positive(ART1731BIS) * MAJREV)) + min(0, BNHREP + XHONOP - BNHDEP * 1 - is_positive(ART1731BIS))
XEXTSV = XTSBV + CARTSV + REMPLAV
SOMMEA71701 = is_positive(CELLIERJA) + is_positive(CELLIERJB) + is_positive(CELLIERJD) + is_positive(CELLIERJE) + is_positive(CELLIERJF) + is_positive(CELLIERJG) + is_positive(CELLIERJH) + is_positive(CELLIERJJ) + is_positive(CELLIERJK) + is_positive(CELLIERJL) + is_positive(CELLIERJM) + is_positive(CELLIERJN) + is_positive(CELLIERJO) + is_positive(CELLIERJP) + is_positive(CELLIERJQ) + is_positive(CELLIERJR) + 0
RCELREP_HR = is_positive(CELREPHR) * arr(ACELREPHR * TX25 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BGLOACNR = GLDGRATV + GLDGRATC * V_CNR * 1 - is_positive(present(TAX1649) + present(RE168))
BQRESS = is_positive(CIBOIBAIL + CINRJBAIL + CRENRJ + CINRJ + CIDEP15 + MATISOSI + MATISOSJ + VOLISO + PORENT + CHAUBOISN + POMPESP + POMPESR + CHAUFSOL + POMPESQ + ENERGIEST + DIAGPERF + RESCHAL + TRAMURWC + TRATOIVG + TRAVITWT) * 1 + 0
LIGCELYE = is_positive(DCELREPYE) * LIG1 * LIG2
LIGMEUBLE = is_positive(DMEUBLE) * LIG1 * LIG2
RIVPIQBD = arr(arr(min(PINELQD + 0, LIMDUFLO - min(DUFLOEL + 0, LIMDUFLO)) / 9) * TX29 / 100) + arr(arr(min(PINELQB + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + DUFLOEK + 0, LIMDUFLO)) / 9) * TX18 / 100) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
LIG4271 = is_positive(is_positive(V_0AB) * LIG1) * 1 - is_positive(ANNUL2042 + 0)
DMOND_2 = DMOND * null(SOMMEMOND_2 + 0) + 0 * 1 - PREM8_11
DPATNAT1 = PATNAT1
TOTDEFLOCNPBIS = null(4 - V_IND_TRAIT) * LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1 * 1 - is_positive(ART1731BIS * PREM8_11) + null(5 - V_IND_TRAIT) * max(0, min(LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1, TOTDEFLOCNP1731 * ART1731BIS * 1 - PREM8_11 + LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1 * 1 - is_positive(ART1731BIS * PREM8_11)))
XELU = ELURASC + ELURASV
PMIB_NETPP = MIBPRESP - PMIB_APP
RPREC = is_positive(CHRFAC) * max(1, CHNFAC) + null(CHRFAC) * max(0, CHNFAC)
ANCNAP = V_ANC_NAP * 1 - 2 * V_IND_NAP
TTSBN2 = TSHALLO2 + ALLO2 + max(0, SALEXT2 - COD1DD)
RCEL_JBGL = is_positive(CELLIERJB) * arr(ACELJBGL * TX22 / 100) + is_positive(CELLIERJG) * arr(ACELJBGL * TX13 / 100) + is_positive(CELLIERJL) * arr(ACELJBGL * TX36 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BPTPVT = BTPVT * 1 - is_positive(present(TAX1649) + present(RE168))
TSPEBASABC = TSPETOTC
TSPRDP = sum([TSPRD1, TSPRD2, TSPRD3, TSPRD4])
LIGCI8XV = present(COD8XV) * LIG1 * LIG2
# TODO MAJOISF17TARDIF_R
_2PRB4 = CARPEP4 + PENSALP4 + CODRFZ
SOMMEANOEXP = is_positive(PEBFV) + is_positive(COTFV) + is_positive(PEBFC) + is_positive(COTFC) + is_positive(PEBF1) + is_positive(COTF1) + is_positive(PEBF2) + is_positive(COTF2) + is_positive(PEBF3) + is_positive(COTF3) + is_positive(PEBF4) + is_positive(COTF4) + is_positive(PENSALV) + is_positive(PENSALNBV) + is_positive(PENSALC) + is_positive(PENSALNBC) + is_positive(PENSALP1) + is_positive(PENSALNBP1) + is_positive(PENSALP2) + is_positive(PENSALNBP2) + is_positive(PENSALP3) + is_positive(PENSALNBP3) + is_positive(PENSALP4) + is_positive(PENSALNBP4) + is_positive(CARPEV) + is_positive(CARPENBAV) + is_positive(CARPEC) + is_positive(CARPENBAC) + is_positive(CARPEP1) + is_positive(CARPENBAP1) + is_positive(CARPEP2) + is_positive(CARPENBAP2) + is_positive(CARPEP3) + is_positive(CARPENBAP3) + is_positive(CARPEP4) + is_positive(CARPENBAP4) + is_positive(CARTSP1) + is_positive(CARTSNBAP1) + is_positive(CARTSP2) + is_positive(CARTSNBAP2) + is_positive(CARTSP3) + is_positive(CARTSNBAP3) + is_positive(CARTSP4) + is_positive(CARTSNBAP4) + is_positive(REMPLAV) + is_positive(REMPLANBV) + is_positive(REMPLAC) + is_positive(REMPLANBC) + is_positive(REMPLAP1) + is_positive(REMPLANBP1) + is_positive(REMPLAP2) + is_positive(REMPLANBP2) + is_positive(REMPLAP3) + is_positive(REMPLANBP3) + is_positive(REMPLAP4) + is_positive(REMPLANBP4) + is_positive(RENTAX) + is_positive(RENTAX5) + is_positive(RENTAX6) + is_positive(RENTAX7) + is_positive(RENTAXNB) + is_positive(RENTAXNB5) + is_positive(RENTAXNB6) + is_positive(RENTAXNB7) + is_positive(FONCI) + is_positive(FONCINB) + is_positive(REAMOR) + is_positive(REAMORNB) + is_positive(REVACT) + is_positive(REVACTNB) + is_positive(REVPEA) + is_positive(REVPEANB) + is_positive(PROVIE) + is_positive(PROVIENB) + is_positive(DISQUO) + is_positive(DISQUONB) + is_positive(RESTUC) + is_positive(RESTUCNB) + is_positive(INTERE) + is_positive(INTERENB) + is_positive(_4BACREV) + is_positive(_4BAHREV) + is_positive(_4BACREC) + is_positive(_4BAHREC) + is_positive(_4BACREP) + is_positive(_4BAHREP) + is_positive(CODRAZ) + is_positive(CODRBZ) + is_positive(CODRCZ) + is_positive(CODRDZ) + is_positive(CODREZ) + is_positive(CODRFZ) + is_positive(CODNAZ) + is_positive(CODNBZ) + is_positive(CODNCZ) + is_positive(CODNDZ) + is_positive(CODNEZ) + is_positive(CODNFZ) + is_positive(CODRVG) + is_positive(CODNVG) + 0
EXPR2 = PRB2 + _2PRB2 + PEBF2
RESIMEUB3 = arr(arr(min(DRESIMEUB, PLAF_RESINEUV) / 9) * TX25 / 100)
REVALIMQHT = sum([PENALIMV, PENALIMC, PENALIM1, PENALIM2, PENALIM3, PENALIM4])
DTOUHOTR = INVLOCHOTR + INVLOGHOT
SOMMEA861 = SOMMEA881
BTANTGECUM = V_BTGECUM * 1 - present(DEPMOBIL) + DEPMOBIL
ZIPQRF1TOT = sum([ZIPQRF11, ZIPQRF21])
T2RV = _2RV1 + _2RV2 + _2RV3 + _2RV4
# TODO MAJOTA17_2TARDIF_R
AILMPE = DILMPE * 1 - V_CNR
# TODO FLAG_TRTARDIF_F
MIB_TPRESP = MIBPRESP + MIBNPPRESP + MIBMEUP
_2TSN1 = CARTSP1 + REMPLAP1
PPE_SALAVDEFU = sum([PPE_SALAVDEF1, PPE_SALAVDEF2, PPE_SALAVDEF3, PPE_SALAVDEF4]) * PPE_BOOL_SEULPAC
CELSOMJ = CELLIERJA + CELLIERJD + CELLIERJE + CELLIERJF + CELLIERJH + CELLIERJJ + CELLIERJK + CELLIERJM + CELLIERJN
ZIGGAINLEV = is_positive(CVNSALC) * is_positive(CVNSALAV + CVNSALAC) * LIG1 * LIG2
DCELREPGL = CELREPGL
TXPFIRSE2 = 40 if (V_CODPFIRSE2 == 3 or V_CODPFIRSE2 == 30 or V_CODPFIRSE2 == 55) else (80 if (V_CODPFIRSE2 == 4 or V_CODPFIRSE2 == 5) else (100 if (V_CODPFIRSE2 == 6) else 0))
RFQ = FONCI + REAMOR
RFCEAPS = max(0, RFORDI - RFDORD) * 1 - is_positive(ART1731BIS) + max(0, RFORDI - DEFRF4BB) * is_positive(ART1731BIS)
TEXTS1 = TTSBN1 + T2TSN1
LIGCELHD = is_positive(DCELREPHD) * LIG1 * LIG2
BOOL_0AZ = null(V_0AZ - inf(V_0AZ / 10000) * 10000 - V_ANREV)
SOMMERF = RFORDI + RFMIC + FONCI + REAMOR + 0
LIGCREAT = is_positive(DCREAT + DCREATHANDI) * LIG1 * LIG2
TMIB_AVV = min(TMIB_TVENV, max(MIN_MBIC, arr(TMIB_TVENV * TX_MIBVEN / 100)))
ZIGRSE3ANT = is_positive(V_RSE3ANT) * TYPE2 * 1 - APPLI_OCEANS
TXPF1728GLO = 10 if (V_CODPF1728GLO == 7 or V_CODPF1728GLO == 10 or V_CODPF1728GLO == 17 or V_CODPF1728GLO == 18) else (40 if (V_CODPF1728GLO == 8 or V_CODPF1728GLO == 11) else (80 if (V_CODPF1728GLO == 31) else 0))
XBICMNPRO = sum([MIBNPEXV, MIBNPEXC, MIBNPEXP])
ZONIPTEFP = VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS
DEPLOCP = LOCPROCGAP - LOCDEFPROCGAP + LOCPROP - LOCDEFPROP
BA1AF = BAF1AP + BAF1AC + BAF1AV
BINTTAC = BINTAC + BI2AC
LIGCELGP = is_positive(DCELREPGP) * LIG1 * LIG2
DCODJTJU = LOCMEUBJT + LOCMEUBJU
AAIDC = BADCRE * 1 - V_CNR
BNNAC = BNCREC - BNCDEC * 1 - is_positive(ART1731BIS * PREM8_11)
DILMIC = LOCMEUBIC
MLOCDECP = MIBGITEP + LOCGITP + MIBMEUP
DCINE = CINE1 + CINE2
DCELREPYL = CELREPYL
XBICNPHDC = BICNPEXC + BICREC
BIPP = BICNOP - BICDNP + BIHNOP - BIHDNP
LIGMECENAT = present(RDMECENAT) * LIG1 * LIG2
LIGLOCHOTR = is_positive(INVLOCHOTR + INVLOGHOT) * LIG1
TRCMABD = RCMABD + REVACT
CRICH = IPRECH * 1 - is_positive(RE168 + TAX1649)
BDRSE2 = max(0, ALLECS - REVCSXC - arr(CSPROVYF / TX066 / 100)) * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
NOCEPV = ANOCEP - DNOCEP + BNCAABV - BNCAADV
MICFR = present(RFMIC) * arr(RFMIC * TX_MICFON / 100)
SOMMEA538VB = present(BAFORESTV) + present(BAFPVV) + present(BACREV) + present(_4BACREV) + present(BAHREV) + present(_4BAHREV) + present(MIBVENV) + present(MIBPRESV) + present(MIBPVV) + present(BICNOV) + present(LOCPROCGAV) + present(BIHNOV) + present(LOCPROV) + present(MIBNPVENV) + present(MIBNPPRESV) + present(MIBNPPVV) + present(BICREV) + present(LOCNPCGAV) + present(LOCGITCV) + present(BICHREV) + present(LOCNPV) + present(LOCGITHCV) + present(BNCPROV) + present(BNCPROPVV) + present(BNCREV) + present(BNHREV) + present(BNCNPV) + present(BNCNPPVV) + present(ANOCEP) + present(BNCAABV) + present(MIBMEUV) + present(MIBGITEV) + present(LOCGITV) + present(INVENTV)
NPLOCSSV = min(0, LOCNPV + LOCGITHCV - LOCDEFNPV) * positif_ou_nul(LOCDEFNPV - LOCNPV - LOCGITHCV) + arr(max(0, LOCNPV + LOCGITHCV - LOCDEFNPV) * MAJREV) * is_positive(LOCNPV + LOCGITHCV - LOCDEFNPC)
BIPV = BICNOV - BICDNV + BIHNOV - BIHDNV
AILMJX = DILMJX * 1 - ART1731BIS + min(DILMJX, max(AILMJX_P + AILMJXP2, AILMJX1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
DCELREPHT = CELREPHT
GLPRRTOT = sum([GLPRRV + GLPRRZV, GLPRRC + GLPRRZC, GLPRR1 + GLPRRZ1, GLPRR2 + GLPRRZ2, GLPRR3 + GLPRRZ3, GLPRR4 + GLPRRZ4])
PPE_SALAVDEF2 = TSHALLO2 + CARTSP2 * is_positive(CARTSNBAP2) + SALEXT2
DCELREPHZ = CELREPHZ
TMIBNETNPPF = sum([TMIB_NETNPPV, TMIB_NETNPPC, TMIB_NETNPPP])
BDRSE4 = max(0, PENECS - REVCSXE - arr(CSPROVYH / TX038 / 100)) * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
CRESINTER = PRESINTER
PLOCNETV = PLOCCGAV + PLOCV
ZIGR1649 = is_positive(R1649) * 1 - V_CNR * LIG1 * LIG2
# TODO IND_CTXS
BCIDONENTR = RDMECENAT * 1 - V_CNR
NMAJTAXA4 = sum([MAJOTAXA55, MAJOTAXA3, MAJOTAXA4, MAJOTAXA5, MAJOTAXA6])
# TODO RIVL2RES
T2PRBV = CARPEV + PENSALV + CODRAZ
XEXOCET = sum([XEXOCETV, XEXOCETC])
RFCE = max(0, RFCD - RFDORD) * 1 - is_positive(ART1731BIS) + max(0, RFCD - DEFRF4BB) * is_positive(ART1731BIS)
BIPTAP = BICNOP - BICDNP * 1 - is_positive(ART1731BIS * PREM8_11)
BCEL_2011 = arr(min(CELLIERNA + CELLIERNC + CELLIERND + CELLIERNE + CELLIERNF + CELLIERNH + CELLIERNI + CELLIERNJ + CELLIERNK + CELLIERNM + CELLIERNN + CELLIERNO + 0, LIMCELLIER) / 9)
LIGCREFAM = is_positive(CREFAM) * LIG1 * LIG2
PPE_DATE_DEB = is_positive(V_0AV + 0) * is_positive(V_0AZ + 0) * V_0AZ + 0 + is_positive(DATRETETR + 0) * DATRETETR + 0 * null(V_0AZ + 0)
RCEL_HNO_R = is_positive(CELLIERHN) * arr(ACELHNO_R * TX25 / 100) + is_positive(CELLIERHO) * arr(ACELHNO_R * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TMIB_VENTAC = min(MIBVENC + MIBNPVENC, max(MIN_MBIC, arr(MIBVENC + MIBNPVENC * TX_MIBVEN / 100)))
TPMIB_NETPV = MIBPRESV + AUTOBICPV - TPMIB_APV
ZIPQPRRANTZ1TOT = sum([ZIPQPRRANTZV1, ZIPQPRRANTZC1, ZIPQPRRANTZ11, ZIPQPRRANTZ21, ZIPQPRRANTZ31, ZIPQPRRANTZ41])
BARSREVV = BAHREV + _4BAHREV
BITAV = BIPTAV + BINTAV
MIB_P1AP = MIB1AP - MIBDEP
LIGCELFABC = is_positive(DCELFABC) * LIG1 * LIG2
LIGILMOC = is_positive(DILMOC) * LIG1 * LIG2
T2PRB4 = CARPEP4 + PENSALP4 + CODRFZ
ZONIPTEFN = VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS
ACELNBGL_R = positif_ou_nul(CELLIERNB + CELLIERNG + CELLIERNL) * BCEL_NBGL * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ACELHM_R = positif_ou_nul(CELLIERHM) * BCEL_HM * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPPLU = CREDPVREP + V_BTPVREP * 1 - present(CREDPVREP)
LIGINRHAUT = is_positive(RETHAUTREV)
LIGCOLENT = is_positive(DCOLENT) * LIG1 * LIG2
ABNCPDECC = AUTOBNCC
DCELREPYA = CELREPYA
PLOCCGAC = LOCPROCGAC - LOCDEFPROCGAC * 1 - is_positive(ART1731BIS * PREM8_11)
REPRCMB = max(0, BRCM + BRCMQ - RCMFR)
XBICSP = XBICNETP + BA1AP
AFIPC_1 = max(min(DFIPC, LIM_FIPCORSE * 1 + BOOL_0AM), 0) * 1 - V_CNR
LIGCELGT = is_positive(DCELREPGT) * LIG1 * LIG2
RCELREP_HV = is_positive(CELREPHV) * arr(ACELREPHV * TX25 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ACEL2012_R = positif_ou_nul(CELSOMJ) * BCEL_2012 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ZIGINTREGV22 = is_positive(RETREGV22) * LIG2
LIGDUFLOEKL = is_positive(DDUFLOEKL) * LIG1 * LIG2
DPALE = sum([CHENF1 + NCHENF1, CHENF2 + NCHENF2, CHENF3 + NCHENF3, CHENF4 + NCHENF4])
BNNAP = BNCREP - BNCDEP * 1 - is_positive(ART1731BIS * PREM8_11)
LIGCELLE = is_positive(DCELRREDLE) * LIG1 * LIG2
RBAV = BAHREV + _4BAHREV + BACREV + _4BACREV + BAFORESTV + BAFV + BAFPVV - BACDEV - BAHDEV
MCDV = 1 * is_positive(V_0AM + 0) + 2 * is_positive(V_0AC + 0) + 3 * is_positive(V_0AD + 0) + 4 * is_positive(V_0AV + 0) + 5 * is_positive(V_0AO + 0)
BRSE3 = INDECS * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
RVBCSG = arr(RVB1 + RENTAX * TXRVT1 / 100) + arr(RVB2 + RENTAX5 * TXRVT2 / 100) + arr(RVB3 + RENTAX6 * TXRVT3 / 100) + arr(RVB4 + RENTAX7 * TXRVT4 / 100)
PERPPLAFNUC3ANT = present(PERPPLAFNUC3) * PERPPLAFNUC3 + 1 - present(PERPPLAFNUC3) * V_BTPERPNUC3
TXPFIGLO = 40 if (V_CODPFIGLO == 3 or V_CODPFIGLO == 30 or V_CODPFIGLO == 55) else (80 if (V_CODPFIGLO == 4 or V_CODPFIGLO == 5) else (100 if (V_CODPFIGLO == 6) else 0))
RMOND_1 = RMOND
LIGLOGDOM = is_positive(DLOGDOM) * LIG1 * LIG2
PLAF_ISFRED = 50000 * 1 - is_positive(ISFPMEDI + ISFPMEIN + ISFFIP + ISFFCPI) + 45000 * is_positive(ISFPMEDI + ISFPMEIN + ISFFIP + ISFFCPI)
_4BAQLC = is_positive(_4BACREC + _4BAHREC)
LIGILMIX = is_positive(DILMIX) * LIG1 * LIG2
AILMOE = DILMOE * 1 - V_CNR
RCELREP_HZ_R = is_positive(CELREPHZ) * arr(CELREPHZ * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NPLOCCGASP = arr(NPLOCCGAPAC * LOCNPCGAPAC / LOCNPCGAPAC + LOCGITCP) * present(LOCNPCGAPAC) + min(0, NPLOCCGAPAC) * 1 - present(LOCNPCGAPAC)
SOMMEA894 = SOMMEA881
RCELREP_HW = is_positive(CELREPHW) * arr(ACELREPHW * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ACELNQ_R = positif_ou_nul(CELLIERNQ) * BCEL_NQ * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
VARDMOND = max(0, DMOND * 1 - is_positive(SOMMEMOND_2) * 1 - PREM8_11 - DEFZU * is_positive(SOMMEMOND_2) * 1 - PREM8_11 - DEFZU * PREM8_11) * present(DMOND)
_2TSNC = CARTSC + REMPLAC
TMIB_TPRESP = MIBPRESP + AUTOBICPP + MIBNPPRESP + MIBMEUP
LIGCELLZ = is_positive(DCELRREDLZ) * LIG1 * LIG2
RCEL_HM_R = is_positive(CELLIERHM) * arr(ACELHM_R * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BPTPDIV = BTP5 * 1 - is_positive(present(TAX1649) + present(RE168))
LIGVERSUP = is_positive(AUTOVERSSUP)
ACODIE = min(PLAF_RESINEUV, LOCMEUBIE) * 1 - V_CNR
# TODO DEFRF4BC
BADPLAF2 = min(LIM_AIDOMI * 1 - is_positive(PREMAIDE) + LIM_PREMAIDE * is_positive(PREMAIDE) + MAJSALDOM * positif_ou_nul(V_ANREV - V_0DA - 65) + positif_ou_nul(V_ANREV - V_0DB - 65) * BOOL_0AM + ASCAPA + V_0CF + V_0DJ + V_0DN + V_0CH + V_0DP / 2, LIM_AIDOMI3 * 1 - is_positive(PREMAIDE) + LIM_PREMAIDE2 * is_positive(PREMAIDE)) * 1 - is_positive(INAIDE + 0) + LIM_AIDOMI2 * is_positive(INAIDE + 0) * is_positive(RVAIDAS)
# TODO RILTRA
_2TSNV = CARTSV + REMPLAV
# TODO NAPCRTEMP
PPENEXO1 = null(PPETPP1 + 0) + is_positive(TSHALLO1 + 0) + is_positive(SALEXT1 + 0) + 4 * is_positive(PPENHP1 + 0) + 8 * is_positive(PPEXT1 + 0)
BNRC = BNNSC + BNNAC
ACELREPYB = CELREPYB * 1 - ART1731BIS + min(CELREPYB, max(ACELREPYB_P + ACELREPYBP2, ACELREPYB1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REGPRIVM = arr(REGPRIV * MAJREV)
MIB_APV = min(MIB_TPRESV, max(MIN_MBIC, arr(MIB_TPRESV * TX_MIBPRES / 100)))
PRQNP = sum([_2PRB1, _2PRB2, _2PRB3, _2PRB4])
BIHTAC = max(0, arr(BIHNOC - BIHDNC * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV)) + min(0, BIHNOC - BIHDNC * 1 - is_positive(ART1731BIS * PREM8_11))
NB0BTMIQAR = null(1 - VAR0BT) * null(V_0CF + V_0DJ + V_0CR + 0) * 2 * V_0CH - 2 * is_positive(V_0CH - 2)
_4DEFBACREP = is_positive(_4BACREP) * BACDEP * 1 - is_positive(ART1731BIS * PREM8_11) - DEFBACREP
DCELREPYH = CELREPYH
ZIG_INT22 = is_positive(RETCS22 + RETPS22 + RETRD22 + RETCVN22)
ACELNBGL = BCEL_NBGL * 1 - ART1731BIS + min(BCEL_NBGL, max(ACELNBGL_P + ACELNBGLP2, ACELNBGL1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELLIERNB + CELLIERNG + CELLIERNL) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ZIG_REVETR = is_positive(SALECS + SALECSG + ALLECS + INDECS + PENECS + COD8SA + COD8SB) * 1 - V_CNR * LIG1 * LIG2
BN1 = sum([BN1V, BN1C, BN1P])
BIHTAV = max(0, arr(BIHNOV - BIHDNV * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV)) + min(0, BIHNOV - BIHDNV * 1 - is_positive(ART1731BIS * PREM8_11))
CIEXCEDENT = arr(COD3VE * TX45 / 100 + COD3UV * TX30 / 100) * 1 - is_positive(RE168 + TAX1649)
BPTP24 = RCM2FA * 1 - is_positive(present(TAX1649) + present(RE168)) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
SOMMEA538CB = present(BAFORESTC) + present(BAFPVC) + present(BACREC) + present(_4BACREC) + present(BAHREC) + present(_4BAHREC) + present(MIBVENC) + present(MIBPRESC) + present(MIBPVC) + present(BICNOC) + present(LOCPROCGAC) + present(BIHNOC) + present(LOCPROC) + present(MIBNPVENC) + present(MIBNPPRESC) + present(MIBNPPVC) + present(BICREC) + present(LOCNPCGAC) + present(LOCGITCC) + present(BICHREC) + present(LOCNPC) + present(LOCGITHCC) + present(BNCPROC) + present(BNCPROPVC) + present(BNCREC) + present(BNHREC) + present(BNCNPC) + present(BNCNPPVC) + present(ANOVEP) + present(BNCAABC) + present(MIBMEUC) + present(MIBGITEC) + present(LOCGITC) + present(INVENTC)
LIGLOCNEUF3 = is_positive(RIVL3) * LIG1
LIGDEFNPLOC = is_positive(TOTDEFLOCNP) * 1 - null(4 - V_REGCO)
PPENBH2 = PPENHP2 + PPEXT2
NPLOCSV = arr(NPLOCV * LOCNPV / LOCNPV + LOCGITHCV) * is_positive(LOCNPV) + min(0, NPLOCV) * 1 - is_positive(LOCNPV)
BIPTAC = BICNOC - BICDNC * 1 - is_positive(ART1731BIS * PREM8_11)
LIGSXBN = is_positive(BNCPROEXV + BNCPROEXC + BNCPROEXP) * LIG1 * LIG2
HRBTRFR2 = V_BTRFRHR2 * 1 - positif_ou_nul(RFRH2) + RFRH2
ACELJP = BCEL_JP * 1 - ART1731BIS + min(BCEL_JP, max(ACELJP_P + ACELJPP2, ACELJP1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELLIERJP) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIG_BNCNF = is_positive(present(BNCV) + present(BNCC) + present(BNCP))
PDEVDUR = max(PLAF_DEVDUR * 1 + BOOL_0AM + PLAF_GE2_PACQAR * V_0CH + V_0DP + PLAF_GE2_PAC * V_0CR + V_0CF + V_0DJ + V_0DN - V_BTDEVDUR * 1 - present(DEPCHOBAS) + DEPCHOBAS, 0)
DCELHM = CELLIERHM
# TODO BIH1V
DCELRREDMH = CELRREDMH
SOMMEBIC = MIBNPVENV + MIBNPVENC + MIBNPVENP + MIBNPPRESV + MIBNPPRESC + MIBNPPRESP + MIBNPPVV + MIBNPPVC + MIBNPPVP + BICREV + BICHREV + BICREC + BICHREC + BICREP + BICHREP + 0
BI1 = sum([BI1V, BI1C, BI1P])
LIG062V = CARPEV + CARPENBAV + PENSALV + PENSALNBV + CODRAZ
LIGNONREC = is_positive(V_NONMERANT + 0) * 1 - APPLI_OCEANS
MIB_TVENV = MIBVENV + MIBNPVENV + MIBGITEV + LOCGITV
TAUX3 = TX_BAR3 - TX_BAR2
CICA = arr(BAILOC98 * TX_BAIL / 100) * 1 - is_positive(RE168 + TAX1649)
RASAR = arr(BRAS * TX_RASAR / 100)
IND_ZIGRVT = 0
RSE8TX = arr(BRSE8TX * TXTX / 100) * 1 - is_positive(ANNUL2042)
SPEPV = sum([max(0, SPEPVPV + SPEPVNPV), max(0, SPEPVPC + SPEPVNPC), max(0, SPEPVPP + SPEPVNPP)])
LIGTAXASSURC = present(CESSASSC) * 1 - is_positive(ANNUL2042) * LIG1
XTSB4 = TSBN4
AGREI = REI
LIGCULTURE = present(CIAQCUL) * LIG1 * LIG2
MLOCNET = sum([MLOCNETV, MLOCNETC, MLOCNETP])
CIDIREPARGNE = DIREPARGNE * 1 - is_positive(RE168 + TAX1649) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
BPTPSJ = BTPSJ * 1 - is_positive(present(TAX1649) + present(RE168))
NATPENA = 1 if (APPLI_COLBERT + APPLI_ILIAD + APPLI_COLBERT == 1 and CMAJ == 7 or CMAJ == 8 or CMAJ == 9 or CMAJ == 10 or CMAJ == 11 or CMAJ == 12 or CMAJ == 17 or CMAJ == 18) else (2 if (CMAJ == 2) else (4 if (CMAJ == 3 or CMAJ == 4 or CMAJ == 5 or CMAJ == 6) else 0))
SOMMEA874 = sum([present(TSHALLO1) + present(ALLO1) + present(PRBR1) + present(PALI1) + present(PENIN1), present(TSHALLO2) + present(ALLO2) + present(PRBR2) + present(PALI2) + present(PENIN2), present(TSHALLO3) + present(ALLO3) + present(PRBR3) + present(PALI3) + present(PENIN3), present(TSHALLO4) + present(ALLO4) + present(PRBR4) + present(PALI4) + present(PENIN4), present(TSHALLOV) + present(ALLOV) + present(PRBRV) + present(PALIV) + present(PENINV), present(TSHALLOC) + present(ALLOC) + present(PRBRC) + present(PALIC) + present(PENINC)]) + present(CARTSV) + present(CARTSC) + present(CARTSP1) + present(CARTSP2) + present(CARTSP3) + present(CARTSP4) + present(CARTSNBAV) + present(CARTSNBAC) + present(CARTSNBAP1) + present(CARTSNBAP2) + present(CARTSNBAP3) + present(CARTSNBAP4) + present(REMPLAV) + present(REMPLAC) + present(REMPLAP1) + present(REMPLAP2) + present(REMPLAP3) + present(REMPLAP4) + present(REMPLANBV) + present(REMPLANBC) + present(REMPLANBP1) + present(REMPLANBP2) + present(REMPLANBP3) + present(REMPLANBP4) + present(CARPEV) + present(CARPEC) + present(CARPEP1) + present(CARPEP2) + present(CARPEP3) + present(CARPEP4) + present(CARPENBAV) + present(CARPENBAC) + present(CARPENBAP1) + present(CARPENBAP2) + present(CARPENBAP3) + present(CARPENBAP4) + present(PENSALV) + present(PENSALC) + present(PENSALP1) + present(PENSALP2) + present(PENSALP3) + present(PENSALP4) + present(PENSALNBV) + present(PENSALNBC) + present(PENSALNBP1) + present(PENSALNBP2) + present(PENSALNBP3) + present(PENSALNBP4) + sum([sum([present(BICNOV) + sum([present(BICDNV)]), present(BIHNOV) + sum([present(BIHDNV)])]) + sum([present(BI1AV)]), sum([present(BICNOC) + sum([present(BICDNC)]), present(BIHNOC) + sum([present(BIHDNC)])]) + sum([present(BI1AC)]), sum([present(BICNOP) + sum([present(BICDNP)]), present(BIHNOP) + sum([present(BIHDNP)])]) + sum([present(BI1AP)])]) + present(CODRAZ) + present(CODRBZ) + present(CODRCZ) + present(CODRDZ) + present(CODREZ) + present(CODRFZ) + present(RVB1) + present(RVB2) + present(RVB3) + present(RVB4) + present(RENTAX) + present(RENTAX5) + present(RENTAX6) + present(RENTAX7) + present(RENTAXNB) + present(RENTAXNB5) + present(RENTAXNB6) + present(RENTAXNB7) + present(RCMABD) + present(RCMHAD) + present(REGPRIV) + present(RCMIMPAT) + present(REVACT) + present(DISQUO) + present(RESTUC) + present(REVACTNB) + present(DISQUONB) + present(RESTUCNB) + present(COD2FA) + present(RCMHAB) + present(INTERE) + present(MIBVENV) + present(MIBPRESV) + present(MIB1AV) + present(MIBDEV) + present(MIBVENC) + present(MIBPRESC) + present(MIB1AC) + present(MIBDEC) + present(MIBVENP) + present(MIBPRESP) + present(MIB1AP) + present(MIBDEP) + present(LOCPROCGAV) + present(LOCDEFPROCGAV) + present(LOCPROCGAC) + present(LOCDEFPROCGAC) + present(LOCPROCGAP) + present(LOCDEFPROCGAP) + present(LOCPROV) + present(LOCDEFPROV) + present(LOCPROC) + present(LOCDEFPROC) + present(LOCPROP) + present(LOCDEFPROP) + present(BICREV) + present(LOCNPCGAV) + present(LOCGITCV) + present(BI2AV) + present(BICDEV) + present(LOCDEFNPCGAV) + present(BICREC) + present(LOCNPCGAC) + present(LOCGITCC) + present(BI2AC) + present(BICDEC) + present(LOCDEFNPCGAC) + present(BICREP) + present(LOCNPCGAPAC) + present(LOCGITCP) + present(BI2AP) + present(BICDEP) + present(LOCDEFNPCGAPAC) + present(BICHREV) + present(LOCNPV) + present(LOCGITHCV) + present(BICHDEV) + present(LOCDEFNPV) + present(BICHREC) + present(LOCNPC) + present(LOCGITHCC) + present(BICHDEC) + present(LOCDEFNPC) + present(BICHREP) + present(LOCNPPAC) + present(LOCGITHCP) + present(BICHDEP) + present(LOCDEFNPPAC) + present(MIBMEUV) + present(MIBGITEV) + present(LOCGITV) + present(MIBNPVENV) + present(MIBNPPRESV) + present(MIBNP1AV) + present(MIBNPDEV) + present(MIBMEUC) + present(MIBGITEC) + present(LOCGITC) + present(MIBNPVENC) + present(MIBNPPRESC) + present(MIBNP1AC) + present(MIBNPDEC) + present(MIBMEUP) + present(MIBGITEP) + present(LOCGITP) + present(MIBNPVENP) + present(MIBNPPRESP) + present(MIBNP1AP) + present(MIBNPDEP) + present(BNCREV) + present(BN1AV) + present(BNCDEV) + present(BNCREC) + present(BN1AC) + present(BNCDEC) + present(BNCREP) + present(BN1AP) + present(BNCDEP) + present(BNHREV) + present(BNHDEV) + present(BNHREC) + present(BNHDEC) + present(BNHREP) + present(BNHDEP) + present(BNCPROV) + present(BNCPRO1AV) + present(BNCPRODEV) + present(BNCPROC) + present(BNCPRO1AC) + present(BNCPRODEC) + present(BNCPROP) + present(BNCPRO1AP) + present(BNCPRODEP) + present(BNCNPV) + present(BNCNP1AV) + present(BNCNPDEV) + present(BNCNPC) + present(BNCNP1AC) + present(BNCNPDEC) + present(BNCNPP) + present(BNCNP1AP) + present(BNCNPDEP) + present(BNCAABV) + present(ANOCEP) + present(INVENTV) + present(PVINVE) + present(BNCAADV) + present(DNOCEP) + present(BNCAABC) + present(ANOVEP) + present(INVENTC) + present(PVINCE) + present(BNCAADC) + present(DNOCEPC) + present(BNCAABP) + present(ANOPEP) + present(INVENTP) + present(PVINPE) + present(BNCAADP) + present(DNOCEPP)
T2TSNC = CARTSC + REMPLAC
TAUX5 = TX_BAR5 - TX_BAR4
BIDON = 1
TSQCJ = _2TSNC + CODDBJ + CODEBJ
NATMAJGLOA = 1
LIGEXOCET = is_positive(EXOCET) * LIG1 * LIG2
XBIPP = BIHEXP + BICEXP
# TODO MAJOCSTARDIF_D
ACODIM = min(PLAF_RESINEUV, RESIVIEU) * 1 - V_CNR
RIVDUGIH8 = max(0, arr(min(DUFLOGI + 0, LIMDUFLO) * TX29 / 100) + arr(min(DUFLOGH + 0, LIMDUFLO - min(DUFLOGI + 0, LIMDUFLO)) * TX18 / 100) - 8 * RIVDUGIH) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
ZIGRSE3 = is_positive(BRSE3) * LIG2
SPEPVPC = BNCPRO1AC - BNCPRODEC
DDOMSOC1 = INVSOCNRET + INVOMSOCKH + INVOMSOCKI + INVSOC2010 + INVOMSOCQU + INVLOGSOC + INVOMSOCQJ + INVOMSOCQS + INVOMSOCQW + INVOMSOCQX + CODHRA + CODHRB + CODHRC + CODHRD
LIGPATNAT3 = LIG1 * LIG2 * is_positive(PATNAT3) + null(PATNAT3) * is_positive(V_NOTRAIT - 20)
_2RCMRNABD = REVACT - _2RCMRABD
AGRIC = BAPERPC + BANOCGAC * 1 - is_positive(APPLI_OCEANS)
RDRCM1APS = RCMABD + RCMTNC + RCMAV + RCMHAD + RCMHAB + REGPRIVM + RCMIMPAT - RCMSOC - is_positive(RCMRDS) * min(RCMRDS, RCMABD + RCMAV + RCMHAD + RCMHAB + RCMTNC + COD2FA)
DISFPMED = ISFPMEDI
DISFFIP = ISFFIP
TAXLOY = LOYELEV
GLTSTOT = sum([GLTSV, GLTSC, GLTS1, GLTS2, GLTS3, GLTS4])
# TODO RIVL4
# TODO INDCTXS
ACODJT = min(PLAF_RESINEUV, LOCMEUBJT) * 1 - V_CNR
NB0BTQAR = null(1 - VAR0BT) * null(V_0CF + V_0DJ + V_0CR - 1) * 2 * V_0CH - 1 * is_positive(V_0CH - 1) + 1 * is_positive(V_0CH + 0) + positif_ou_nul(V_0CF + V_0DJ + V_0CR - 2) * 2 * V_0CH
LIGPATNAT1 = LIG1 * LIG2 * is_positive(PATNAT1) + null(PATNAT1) * is_positive(V_NOTRAIT - 20)
BPTP19 = BPVSJ + GAINPEA * 1 - is_positive(IPVLOC) * 1 - is_positive(present(TAX1649) + present(RE168))
PRZV = PENINV
DCELRREDLA = CELRREDLA
NDA = min(max(AGV + 1 - LIM_AGE_ABVIEUX, V_0AP), 1) + min(max(AGC * BOOL_0AM + 1 - LIM_AGE_ABVIEUX, V_0AF * BOOL_0AM), 1)
BI1V = BI1AV
# TODO BIH2V
ACELRREDLN = CELRREDLN * 1 - ART1731BIS + min(CELRREDLN, max(ACELRREDLN_P + ACELRREDLNP2, ACELRREDLN1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
# TODO RIDOMPROE3_1
LIGHRTEFF = is_positive(CHRTEFF) * is_positive(TEFFHRC + COD8YJ) * 1 - is_positive(ANNUL2042) * LIG1
ACELJOQR = BCEL_JOQR * 1 - ART1731BIS + min(BCEL_JOQR, max(ACELJOQR_P + ACELJOQRP2, ACELJOQR1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELLIERJO + CELLIERJQ + CELLIERJR) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PPE_NB_PAC_QAR = V_0CH + V_0DP
CS_TAX1649 = TAX1649
LIGMIBNPNEG = is_positive(MIBNPRV + MIBNPRC + MIBNPRP + MIB_NETNPCT * -1) * LIG2
DRESIVIEU = RESIVIEU + RESIVIANT
XBICNETV = XBICHDV - BICDNV * 1 - is_positive(ART1731BIS)
LIGBIPERP = is_positive(BIPERPV + BIPERPC + BIPERPP) * LIG1 * LIG2
BGEDECL = RDTECH + RDEQPAHA
DILMIZ = LOCMEUBIZ
LIGPV3WBI = is_positive(PVIMPOS + CODRWB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
GLPALIMTOTM = sum([GLPALIMVM, GLPALIMCM, GLPALIM1M, GLPALIM2M, GLPALIM3M, GLPALIM4M])
RIVCELHNO1 = RCEL_HNO_R * is_positive(ACELHNO_R)
EXCEDANTA = max(0, RDREP + DONETRAN - PLAF_REDREPAS)
LIGITAXLOY = present(LOYELEV) * 1 - is_positive(ANNUL2042) * LIG1
DCELREPGJ = CELREPGJ
PPE_BOOL_NADAV = min(1, is_positive(TSHALLOV + 0) * null(PPETPV + 0) * null(PPENHV + 0) + is_positive(SALEXTV + 0) * null(PPETPV + 0) * null(PPEXTV + 0))
SOMMEA898 = SOMMEA895
PPE_KIKEKU = 1 * is_positive(PPE_SALAVDEF1) + 2 * is_positive(PPE_SALAVDEF2) + 3 * is_positive(PPE_SALAVDEF3) + 4 * is_positive(PPE_SALAVDEF4)
ZIGPROVYG = is_positive(CSPROVYG) * TYPE2
TMIB_TTP = TMIB_TVENP + TMIB_TPRESP
LIGABDET = is_positive(GAINABDET) * LIG1 * LIG2
LIGRIDOMPRO = is_positive(RIDOMPRO) * LIG1
# TODO BIH2C
MIB_P1AV = MIB1AV - MIBDEV
ZIGREVXE = is_positive(REVCSXE + COD8XJ) * TYPE2
TEXPR1 = TPRB1 + COD1CH + T2PRB1 + PEBF1
DPRETUD = PRETUD + PRETUDANT
DCELRREDLM = CELRREDLM
DISFPMEI = ISFPMEIN
PRZC = PENINC
LIG022 = sum([TSNN21AFF, TSNN22AFF, TSNN23AFF, TSNN24AFF])
NOCEPC = ANOVEP - DNOCEPC + BNCAABC - BNCAADC
MIBDREPP = MIBDEP - MIB1AP * is_positive(MIBDEP - MIB1AP) - MIBNP1AP - MIBNPDEP * is_positive(MIBNP1AP - MIBNPDEP) * is_positive(MIBDEP - MIB1AP * is_positive(MIBDEP - MIB1AP) - MIBNP1AP - MIBNPDEP * is_positive(MIBNP1AP - MIBNPDEP))
LIG10622 = is_positive(RETIR22)
DREPMEU = INVREPMEU
_2PRB3 = CARPEP3 + PENSALP3 + CODREZ
DPROREP = INVNPROREP
PPE_BOOL_NADAU = min(1, is_positive(TSHALLO1 + TSHALLO2 + TSHALLO3 + TSHALLO4 + 0) * null(PPETPP1 + PPETPP2 + PPETPP3 + PPETPP4 + 0) * null(PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + 0) + is_positive(SALEXT1 + SALEXT2 + SALEXT3 + SALEXT4 + 0) * null(PPETPP1 + PPETPP2 + PPETPP3 + PPETPP4 + 0) * null(PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 + 0))
RV3 = arr(RVB3 * TXRVT3 / 100)
PAC = EAC + V_0CR
RIVCELHNO5 = RIVCELHNO1
BINV = BICREV - BICDEV + BICHREV - BICHDEV
ATOUREPA = DTOUREPA * 1 - ART1731BIS + min(DTOUREPA, max(ATOUREPA_P + ATOUREPAP2, ATOUREPA1731 + 0) * 1 - PREM8_11) * ART1731BIS
NATMAJR = 1
DEFTS = 1 - is_positive(sum([TSNTV + PRNNV, TSNTC + PRNNC, TSNT1 + PRNN1, TSNT2 + PRNN2, TSNT3 + PRNN3, TSNT4 + PRNN4]) - sum([GLN1, GLN2, GLN3])) * abs(sum([TSNTV + PRNNV, TSNTC + PRNNC, TSNT1 + PRNN1, TSNT2 + PRNN2, TSNT3 + PRNN3, TSNT4 + PRNN4]) - sum([GLN1, GLN2, GLN3])) * 1 - is_positive(APPLI_COLBERT)
LIGILMOA = is_positive(DILMOA) * LIG1 * LIG2
DPALP = PAAV + PAAP
LIGPROREP = is_positive(DPROREP) * LIG1 * LIG2
BI12AV = BI1AV + BI2AV
RMF = max(0, RFMIC - MICFR)
DENPLOCAFFV = is_positive(present(LOCNPCGAV) + present(LOCGITCV) + present(LOCDEFNPCGAV) + present(LOCNPV) + present(LOCGITHCV) + present(LOCDEFNPV))
AFIPDOM_1 = max(min(DFIPDOM, LIMFIPDOM * 1 + BOOL_0AM), 0) * 1 - V_CNR
NMAJPCAP4 = sum([MAJOCAP55, MAJOCAP3, MAJOCAP4, MAJOCAP5, MAJOCAP6])
REVRVO = T2RV
BARSREVC = BAHREC + _4BAHREC
LIGCOD3SL = is_positive(COD3SL) * LIG1 * LIG2
LIGCELHH = is_positive(DCELREPHH) * LIG1 * LIG2
DCELREPHE = CELREPHE
BNNAAC = BNCAABC - BNCAADC * 1 - is_positive(ART1731BIS * PREM8_11)
RV2 = arr(RVB2 * TXRVT2 / 100)
_4BAQTOT = sum([_4BAQV, _4BAQC, _4BAQP])
ZIPQPRR5TOT = sum([ZIPQPRRV5, ZIPQPRRC5, ZIPQPRR15, ZIPQPRR25, ZIPQPRR35, ZIPQPRR45])
DILMJS = LOCMEUBJS
BIPC = BICNOC - BICDNC + BIHNOC - BIHDNC
TTSB4 = TEXTS4
MAJTXRSE2 = COPETO
LIGSPDREPNPC = is_positive(SPEDREPNPC) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
TOTDEFLOCNPPS = LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1
LIGRPIQAC = is_positive(RIVPIQAC) * LIG1 * LIG2
DEDMIN2 = is_positive(DETS2) * MIN_DEMEMPLOI + 1 - is_positive(DETS2) * MIN_DEDSFORFTS
ACELFABC_R = positif_ou_nul(DCELFABC) * BCEL_FABC * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DPERPP = PERP_COTP + RACCOTP
ACODIF = min(PLAF_RESINEUV - ACODIE, LOCMEUBIF) * 1 - V_CNR
XBI = sum([XBIPV + XBINPV, XBIPC + XBINPC, XBIPP + XBINPP])
MIBDREPNPP = MIBNPDEP - MIBNP1AP * is_positive(MIBNPDEP - MIBNP1AP) - MIB1AP - MIBDEP * is_positive(MIB1AP - MIBDEP) * is_positive(MIBNPDEP - MIBNP1AP * is_positive(MIBNPDEP - MIBNP1AP) - MIB1AP - MIBDEP * is_positive(MIB1AP - MIBDEP))
V_CR2 = (V_REGCO + 0) in [{'values': [2], 'type': 'enumeration_values'}]
SOMMEA538CP = present(BAF1AC) + present(BA1AC) + present(MIB1AC) + present(BI1AC) + present(MIBNP1AC) + present(BI2AC) + present(BNCPRO1AC) + present(BN1AC) + present(BNCNP1AC) + present(PVINCE)
MIB_NP1AP = MIBNP1AP - MIBNPDEP
IND_ZIGRTF = is_positive(V_NOTRAIT - 20) * is_positive(present(PEA) + present(BPCOPTV) + present(BPVRCM))
ACELRREDLF = CELRREDLF * 1 - ART1731BIS + min(CELRREDLF, max(ACELRREDLF_P + ACELRREDLFP2, ACELRREDLF1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGCELLM = is_positive(DCELRREDLM) * LIG1 * LIG2
ZIPQRFANT1TOT = sum([ZIPQRFANT11, ZIPQRFANT21])
BPTP4I = BPCOPTV + BPCOPTC * 1 - is_positive(IPVLOC) * 1 - is_positive(present(TAX1649) + present(RE168))
LIGILMOB = is_positive(DILMOB) * LIG1 * LIG2
PERP_MUT = is_positive(PERPMUTU) * is_positive(V_0AM + V_0AO) * 1 - is_positive(V_0AC + V_0AD + V_0AV)
BSN1 = min(REPSNO3 + REPSNO2 + REPSNO1 + REPSNON + PETIPRISE, LIM_SOCNOUV2 * 1 + BOOL_0AM)
MIB_1AC = max(0, MIB_P1AC + MIB_NP1AC)
DREPNPRO = INVREPNPRO
ACELHJK = BCEL_HJK * 1 - ART1731BIS + min(BCEL_HJK, max(ACELHJK_P + ACELHJKP2, ACELHJK1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELLIERHJ + CELLIERHK) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PRB4 = PRBR4 + PALI4 + PENIN4
PMIB_AVC = min(MIBVENC, max(MIN_MBIC, arr(MIBVENC * TX_MIBVEN / 100)))
# TODO RIVL1RES
DLOCIDEFG = LOCMEUBID + LOCMEUBIE + LOCMEUBIF + LOCMEUBIG
DIEMPLOI = COD8UW + COD8TL * 1 - is_positive(RE168 + TAX1649)
RIVPIQBD8 = max(0, arr(min(PINELQD + 0, LIMDUFLO - min(DUFLOEL + 0, LIMDUFLO)) * TX29 / 100) + arr(min(PINELQB + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + DUFLOEK + 0, LIMDUFLO)) * TX18 / 100) - 8 * RIVPIQBD) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
MIBNETPTOT = MIBNETVF + MIBNETPF + MIB_NETCT
# TODO TAXADEG
LIGCVNSAL = is_positive(CVNSALC) * LIG1 * LIG2
LIGILMPE = is_positive(DILMPE) * LIG1 * LIG2
LIGCELLS = is_positive(DCELRREDLS) * LIG1 * LIG2
ACELREPGX = CELREPGX * 1 - ART1731BIS + min(CELREPGX, max(ACELREPGX_P + ACELREPGXP2, ACELREPGX1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NMAJCHR4 = sum([MAJOHR30, MAJOHR32, MAJOHR55, MAJOHR3, MAJOHR4, MAJOHR5, MAJOHR6])
CSRTF = RDPTP + PVINVE + PVINCE + PVINPE + sum([BN1AV + BI1AV + BI2AV + BA1AV, BN1AC + BI1AC + BI2AC + BA1AC, BN1AP + BI1AP + BI2AP + BA1AP]) * 1 - is_positive(IPVLOC)
LIGNONREST = is_positive(V_NONRESTANT + 0) * 1 - APPLI_OCEANS
ADUFLOEKL = ADUFLOEKL_1 * 1 - ART1731BIS
LIGRDCSG = is_positive(is_positive(V_BTCSGDED) + present(DCSG) + present(RCMSOC)) * LIG1 * LIG2
INDREV1A8IR = is_positive(is_positive(_4BACREC) + is_positive(_4BACREP) + is_positive(_4BACREV) + is_positive(_4BAHREC) + is_positive(_4BAHREP) + is_positive(_4BAHREV) + is_positive(ABDETPLUS) + is_positive(ABDETMOINS) + is_positive(ALLO1) + is_positive(ALLO2) + is_positive(ALLO3) + is_positive(ALLO4) + is_positive(ALLOC) + is_positive(ALLOV) + is_positive(ANOCEP) + is_positive(ANOPEP) + is_positive(ANOVEP) + is_positive(AUTOBICPC) + is_positive(AUTOBICPP) + is_positive(AUTOBICPV) + is_positive(AUTOBICVC) + is_positive(AUTOBICVP) + is_positive(AUTOBICVV) + is_positive(AUTOBNCC) + is_positive(AUTOBNCP) + is_positive(AUTOBNCV) + is_positive(BA1AC) + is_positive(BA1AP) + is_positive(BA1AV) + is_positive(BACDEC) + is_positive(BACDEP) + is_positive(BACDEV) + is_positive(BACREC) + is_positive(BACREP) + is_positive(BACREV) + is_positive(BAEXC) + is_positive(BAEXP) + is_positive(BAEXV) + is_positive(BAF1AC) + is_positive(BAF1AP) + is_positive(BAF1AV) + is_positive(BAFC) + is_positive(BAFORESTC) + is_positive(BAFORESTP) + is_positive(BAFORESTV) + is_positive(BAFP) + is_positive(BAFPVC) + is_positive(BAFPVP) + is_positive(BAFPVV) + is_positive(BAFV) + is_positive(BAHDEC) + is_positive(BAHDEP) + is_positive(BAHDEV) + is_positive(BAHEXC) + is_positive(BAHEXP) + is_positive(BAHEXV) + is_positive(BAHREC) + is_positive(BAHREP) + is_positive(BAHREV) + is_positive(BAILOC98) + is_positive(BAPERPC) + is_positive(BAPERPP) + is_positive(BAPERPV) + is_positive(BI1AC) + is_positive(BI1AP) + is_positive(BI1AV) + is_positive(BI2AC) + is_positive(BI2AP) + is_positive(BI2AV) + is_positive(BICDEC) + is_positive(BICDEP) + is_positive(BICDEV) + is_positive(BICDNC) + is_positive(BICDNP) + is_positive(BICDNV) + is_positive(BICEXC) + is_positive(BICEXP) + is_positive(BICEXV) + is_positive(BICHDEC) + is_positive(BICHDEP) + is_positive(BICHDEV) + is_positive(BICHREC) + is_positive(BICHREP) + is_positive(BICHREV) + is_positive(BICNOC) + is_positive(BICNOP) + is_positive(BICNOV) + is_positive(BICNPEXC) + is_positive(BICNPEXP) + is_positive(BICNPEXV) + is_positive(BICNPHEXC) + is_positive(BICNPHEXP) + is_positive(BICNPHEXV) + is_positive(BICREC) + is_positive(BICREP) + is_positive(BICREV) + is_positive(BIHDNC) + is_positive(BIHDNP) + is_positive(BIHDNV) + is_positive(BIHEXC) + is_positive(BIHEXP) + is_positive(BIHEXV) + is_positive(BIHNOC) + is_positive(BIHNOP) + is_positive(BIHNOV) + is_positive(BIPERPC) + is_positive(BIPERPP) + is_positive(BIPERPV) + is_positive(BN1AC) + is_positive(BN1AP) + is_positive(BN1AV) + is_positive(BNCAABC) + is_positive(BNCAABP) + is_positive(BNCAABV) + is_positive(BNCAADC) + is_positive(BNCAADP) + is_positive(BNCAADV) + is_positive(BNCCRC) + is_positive(BNCCRFC) + is_positive(BNCCRFP) + is_positive(BNCCRFV) + is_positive(BNCCRP) + is_positive(BNCCRV) + is_positive(BNCDEC) + is_positive(BNCDEP) + is_positive(BNCDEV) + is_positive(BNCEXC) + is_positive(BNCEXP) + is_positive(BNCEXV) + is_positive(BNCNP1AC) + is_positive(BNCNP1AP) + is_positive(BNCNP1AV) + is_positive(BNCNPC) + is_positive(BNCNPDCT) + is_positive(BNCNPDEC) + is_positive(BNCNPDEP) + is_positive(BNCNPDEV) + is_positive(BNCNPP) + is_positive(BNCNPPVC) + is_positive(BNCNPPVP) + is_positive(BNCNPPVV) + is_positive(BNCNPREXAAC) + is_positive(BNCNPREXAAP) + is_positive(BNCNPREXAAV) + is_positive(BNCNPREXC) + is_positive(BNCNPREXP) + is_positive(BNCNPREXV) + is_positive(BNCNPV) + is_positive(BNCPRO1AC) + is_positive(BNCPRO1AP) + is_positive(BNCPRO1AV) + is_positive(BNCPROC) + is_positive(BNCPMVCTV) + is_positive(BNCPMVCTC) + is_positive(BNCPMVCTP) + is_positive(BNCPRODEC) + is_positive(BNCPRODEP) + is_positive(BNCPRODEV) + is_positive(BNCPROEXC) + is_positive(BNCPROEXP) + is_positive(BNCPROEXV) + is_positive(BNCPROP) + is_positive(BNCPROPVC) + is_positive(BNCPROPVP) + is_positive(BNCPROPVV) + is_positive(BNCPROV) + is_positive(BNCREC) + is_positive(BNCREP) + is_positive(BNCREV) + is_positive(BNHDEC) + is_positive(BNHDEP) + is_positive(BNHDEV) + is_positive(BNHEXC) + is_positive(BNHEXP) + is_positive(BNHEXV) + is_positive(BNHREC) + is_positive(BNHREP) + is_positive(BNHREV) + is_positive(BPCOPTV) + is_positive(BPCOSAC) + is_positive(BPCOSAV) + is_positive(BPV18V) + is_positive(BPV40V) + is_positive(BPVRCM) + is_positive(CARPEC) + is_positive(CARPENBAC) + is_positive(CARPENBAV) + is_positive(CARPEV) + is_positive(CARPEP1) + is_positive(CARPEP2) + is_positive(CARPEP3) + is_positive(CARPEP4) + is_positive(CARPENBAP1) + is_positive(CARPENBAP2) + is_positive(CARPENBAP3) + is_positive(CARPENBAP4) + is_positive(CARTSC) + is_positive(CARTSNBAC) + is_positive(CARTSNBAV) + is_positive(CARTSV) + is_positive(CARTSP1) + is_positive(CARTSP2) + is_positive(CARTSP3) + is_positive(CARTSP4) + is_positive(CARTSNBAP1) + is_positive(CARTSNBAP2) + is_positive(CARTSNBAP3) + is_positive(CARTSNBAP4) + is_positive(REMPLAV) + is_positive(REMPLAC) + is_positive(REMPLAP1) + is_positive(REMPLAP2) + is_positive(REMPLAP3) + is_positive(REMPLAP4) + is_positive(REMPLANBV) + is_positive(REMPLANBC) + is_positive(REMPLANBP1) + is_positive(REMPLANBP2) + is_positive(REMPLANBP3) + is_positive(REMPLANBP4) + is_positive(PENSALV) + is_positive(PENSALC) + is_positive(PENSALP1) + is_positive(PENSALP2) + is_positive(PENSALP3) + is_positive(PENSALP4) + is_positive(PENSALNBV) + is_positive(PENSALNBC) + is_positive(PENSALNBP1) + is_positive(PENSALNBP2) + is_positive(PENSALNBP3) + is_positive(PENSALNBP4) + is_positive(RENTAX) + is_positive(RENTAX5) + is_positive(RENTAX6) + is_positive(RENTAX7) + is_positive(RENTAXNB) + is_positive(RENTAXNB5) + is_positive(RENTAXNB6) + is_positive(RENTAXNB7) + is_positive(REVACT) + is_positive(REVPEA) + is_positive(PROVIE) + is_positive(DISQUO) + is_positive(RESTUC) + is_positive(INTERE) + is_positive(REVACTNB) + is_positive(REVPEANB) + is_positive(PROVIENB) + is_positive(DISQUONB) + is_positive(RESTUCNB) + is_positive(INTERENB) + is_positive(CESSASSC) + is_positive(CESSASSV) + is_positive(COTF1) + is_positive(COTF2) + is_positive(COTF3) + is_positive(COTF4) + is_positive(COTFC) + is_positive(COTFV) + is_positive(DABNCNP1) + is_positive(DABNCNP2) + is_positive(DABNCNP3) + is_positive(DABNCNP4) + is_positive(DABNCNP5) + is_positive(DABNCNP6) + is_positive(DAGRI1) + is_positive(DAGRI2) + is_positive(DAGRI3) + is_positive(DAGRI4) + is_positive(DAGRI5) + is_positive(DAGRI6) + is_positive(DEFBIC1) + is_positive(DEFBIC2) + is_positive(DEFBIC3) + is_positive(DEFBIC4) + is_positive(DEFBIC5) + is_positive(DEFBIC6) + is_positive(DETS1) + is_positive(DETS2) + is_positive(DETS3) + is_positive(DETS4) + is_positive(DETSC) + is_positive(DETSV) + is_positive(DIREPARGNE) + is_positive(DNOCEP) + is_positive(DNOCEPC) + is_positive(DNOCEPP) + is_positive(DPVRCM) + is_positive(FEXC) + is_positive(FEXP) + is_positive(FEXV) + is_positive(FRN1) + is_positive(FRN2) + is_positive(FRN3) + is_positive(FRN4) + is_positive(FRNC) + is_positive(FRNV) + is_positive(GAINABDET) + is_positive(GLDGRATV) + is_positive(GLDGRATC) + is_positive(GLD1C) + is_positive(GLD1V) + is_positive(GLD2C) + is_positive(GLD2V) + is_positive(GLD3C) + is_positive(GLD3V) + is_positive(LOCDEFNPC) + is_positive(LOCDEFNPCGAC) + is_positive(LOCDEFNPCGAPAC) + is_positive(LOCDEFNPCGAV) + is_positive(LOCDEFNPPAC) + is_positive(LOCDEFNPV) + is_positive(LOCDEFPROC) + is_positive(LOCDEFPROCGAC) + is_positive(LOCDEFPROCGAP) + is_positive(LOCDEFPROCGAV) + is_positive(LOCDEFPROP) + is_positive(LOCDEFPROV) + is_positive(LOCNPC) + is_positive(LOCNPCGAC) + is_positive(LOCNPCGAPAC) + is_positive(LOCNPCGAV) + is_positive(LOCNPPAC) + is_positive(LOCNPV) + is_positive(LOCPROC) + is_positive(LOCPROCGAC) + is_positive(LOCPROCGAP) + is_positive(LOCPROCGAV) + is_positive(LOCPROP) + is_positive(LOCPROV) + is_positive(LOYIMP) + is_positive(MIB1AC) + is_positive(MIB1AP) + is_positive(MIB1AV) + is_positive(BICPMVCTV) + is_positive(BICPMVCTC) + is_positive(BICPMVCTP) + is_positive(MIBDEC) + is_positive(MIBDEP) + is_positive(MIBDEV) + is_positive(MIBEXC) + is_positive(MIBEXP) + is_positive(MIBEXV) + is_positive(MIBNP1AC) + is_positive(MIBNP1AP) + is_positive(MIBNP1AV) + is_positive(MIBNPDCT) + is_positive(MIBNPDEC) + is_positive(MIBNPDEP) + is_positive(MIBNPDEV) + is_positive(MIBNPEXC) + is_positive(MIBNPEXP) + is_positive(MIBNPEXV) + is_positive(MIBNPPRESC) + is_positive(MIBNPPRESP) + is_positive(MIBNPPRESV) + is_positive(MIBNPPVC) + is_positive(MIBNPPVP) + is_positive(MIBNPPVV) + is_positive(MIBNPVENC) + is_positive(MIBNPVENP) + is_positive(MIBNPVENV) + is_positive(MIBPRESC) + is_positive(MIBPRESP) + is_positive(MIBPRESV) + is_positive(MIBPVC) + is_positive(MIBPVP) + is_positive(MIBPVV) + is_positive(MIBVENC) + is_positive(MIBVENP) + is_positive(MIBVENV) + is_positive(PALI1) + is_positive(PALI2) + is_positive(PALI3) + is_positive(PALI4) + is_positive(PALIC) + is_positive(PALIV) + is_positive(PEA) + is_positive(PEBF1) + is_positive(PEBF2) + is_positive(PEBF3) + is_positive(PEBF4) + is_positive(PEBFC) + is_positive(PEBFV) + is_positive(PPEACC) + is_positive(PPEACP) + is_positive(PPEACV) + is_positive(PPENHC) + is_positive(PPENHP1) + is_positive(PPENHP2) + is_positive(PPENHP3) + is_positive(PPENHP4) + is_positive(PPENHV) + is_positive(PPENJC) + is_positive(PPENJP) + is_positive(PPENJV) + is_positive(PPETPC) + is_positive(PPETPP1) + is_positive(PPETPP2) + is_positive(PPETPP3) + is_positive(PPETPP4) + is_positive(PPETPV) + is_positive(PPLIB) + is_positive(PRBR1) + is_positive(PRBR2) + is_positive(PRBR3) + is_positive(PRBR4) + is_positive(PRBRC) + is_positive(PRBRV) + is_positive(PVINCE) + is_positive(PVINPE) + is_positive(PVINVE) + is_positive(PVREP8) + is_positive(PVSOCC) + is_positive(PVSOCV) + is_positive(RCMABD) + is_positive(RCMAV) + is_positive(RCMAVFT) + is_positive(RCMFR) + is_positive(RCMHAB) + is_positive(RCMHAD) + is_positive(RCMLIB) + is_positive(RCMRDS) + is_positive(RCMSOC) + is_positive(RCMTNC) + is_positive(RCSC) + is_positive(RCSP) + is_positive(RCSV) + is_positive(REGPRIV) + is_positive(RFDANT) + is_positive(RFDHIS) + is_positive(RFDORD) + is_positive(RFMIC) + is_positive(RFORDI) + is_positive(RFROBOR) + is_positive(RSAFOYER) + is_positive(RSAPAC1) + is_positive(RSAPAC2) + is_positive(RVB1) + is_positive(RVB2) + is_positive(RVB3) + is_positive(RVB4) + is_positive(TSASSUC) + is_positive(TSASSUV) + is_positive(TSHALLO1) + is_positive(TSHALLO2) + is_positive(TSHALLO3) + is_positive(TSHALLO4) + is_positive(TSHALLOC) + is_positive(TSHALLOV) + is_positive(XETRANC) + is_positive(XETRANV) + is_positive(XHONOAAC) + is_positive(XHONOAAP) + is_positive(XHONOAAV) + is_positive(XHONOC) + is_positive(XHONOP) + is_positive(XHONOV) + is_positive(XSPENPC) + is_positive(XSPENPP) + is_positive(XSPENPV) + is_positive(GSALV) + is_positive(GSALC) + is_positive(LNPRODEF1) + is_positive(LNPRODEF2) + is_positive(LNPRODEF3) + is_positive(LNPRODEF4) + is_positive(LNPRODEF5) + is_positive(LNPRODEF6) + is_positive(LNPRODEF7) + is_positive(LNPRODEF8) + is_positive(LNPRODEF9) + is_positive(LNPRODEF10) + is_positive(FONCI) + is_positive(REAMOR) + is_positive(FONCINB) + is_positive(REAMORNB) + is_positive(MIBMEUV) + is_positive(MIBMEUC) + is_positive(MIBMEUP) + is_positive(MIBGITEV) + is_positive(MIBGITEC) + is_positive(MIBGITEP) + is_positive(PCAPTAXV) + is_positive(PCAPTAXC) + is_positive(PVIMMO) + is_positive(PVSURSI) + is_positive(PVIMPOS) + is_positive(BANOCGAV) + is_positive(BANOCGAC) + is_positive(BANOCGAP) + is_positive(INVENTV) + is_positive(INVENTC) + is_positive(INVENTP) + is_positive(LOCGITV) + is_positive(LOCGITC) + is_positive(LOCGITP) + is_positive(LOCGITCV) + is_positive(LOCGITCC) + is_positive(LOCGITCP) + is_positive(LOCGITHCV) + is_positive(LOCGITHCC) + is_positive(LOCGITHCP) + is_positive(PVTAXSB) + is_positive(BPV18C) + is_positive(PVMOBNR) + is_positive(BPV40C) + is_positive(BPCOPTC) + is_positive(BPVSJ) + is_positive(BPVSK) + is_positive(CVNSALAC) + is_positive(CVNSALAV) + is_positive(GAINPEA) + is_positive(PVEXOSEC) + is_positive(ABPVNOSURSIS) + is_positive(PVREPORT) + is_positive(LOYELEV) + is_positive(SALEXTV) + is_positive(SALEXTC) + is_positive(SALEXT1) + is_positive(SALEXT2) + is_positive(SALEXT3) + is_positive(SALEXT4) + is_positive(CODDAJ) + is_positive(CODEAJ) + is_positive(CODDBJ) + is_positive(CODEBJ) + is_positive(COD1AD) + is_positive(COD1BD) + is_positive(COD1CD) + is_positive(COD1DD) + is_positive(COD1ED) + is_positive(COD1FD) + is_positive(COD1AE) + is_positive(COD1BE) + is_positive(COD1CE) + is_positive(COD1DE) + is_positive(COD1EE) + is_positive(COD1FE) + is_positive(PPEXTV) + is_positive(PPEXTC) + is_positive(PPEXT1) + is_positive(PPEXT2) + is_positive(PPEXT3) + is_positive(PPEXT4) + is_positive(COD1AH) + is_positive(COD1BH) + is_positive(COD1CH) + is_positive(COD1DH) + is_positive(COD1EH) + is_positive(COD1FH) + is_positive(COD2CK) + is_positive(COD2FA) + is_positive(COD3SG) + is_positive(COD3SH) + is_positive(COD3SL) + is_positive(COD3SM) + is_positive(COD3VE) + is_positive(PVTITRESOC) + is_positive(PENIN1) + is_positive(PENIN2) + is_positive(PENIN3) + is_positive(PENIN4) + is_positive(PENINC) + is_positive(PENINV) + is_positive(CODNAZ) + is_positive(CODNBZ) + is_positive(CODNCZ) + is_positive(CODNDZ) + is_positive(CODNEZ) + is_positive(CODNFZ) + is_positive(CODRAZ) + is_positive(CODRBZ) + is_positive(CODRCZ) + is_positive(CODRDZ) + is_positive(CODREZ) + is_positive(CODRFZ) + is_positive(COD2LA) + is_positive(COD2LB) + is_positive(COD3UA) + is_positive(COD3UL) + is_positive(COD3UV) + is_positive(COD3WM) + is_positive(CODNVG) + is_positive(CODRVG) + present(ANNUL2042) + present(ASCAPA) + present(AUTOVERSLIB) + present(BRAS) + present(BULLRET) + present(CASEPRETUD) + present(CELLIERHK) + present(CELLIERHJ) + present(CELLIERHL) + present(CELLIERHM) + present(CELLIERHN) + present(CELLIERHO) + present(CELLIERNA) + present(CELLIERNB) + present(CELLIERNC) + present(CELLIERND) + present(CELLIERNE) + present(CELLIERNF) + present(CELLIERNG) + present(CELLIERNH) + present(CELLIERNI) + present(CELLIERNJ) + present(CELLIERNK) + present(CELLIERNL) + present(CELLIERNM) + present(CELLIERNN) + present(CELLIERNO) + present(CELLIERNP) + present(CELLIERNQ) + present(CELLIERNR) + present(CELLIERNS) + present(CELLIERNT) + present(CELLIERJA) + present(CELLIERJB) + present(CELLIERJD) + present(CELLIERJE) + present(CELLIERJF) + present(CELLIERJG) + present(CELLIERJH) + present(CELLIERJJ) + present(CELLIERJK) + present(CELLIERJL) + present(CELLIERJM) + present(CELLIERJN) + present(CELLIERJO) + present(CELLIERJP) + present(CELLIERJQ) + present(CELLIERJR) + present(CELLIERFA) + present(CELLIERFB) + present(CELLIERFC) + present(CELLIERFD) + present(DUFLOGH) + present(DUFLOGI) + present(CELREPGJ) + present(CELREPGK) + present(CELREPGL) + present(CELREPGP) + present(CELREPGS) + present(CELREPGT) + present(CELREPGU) + present(CELREPGV) + present(CELREPGW) + present(CELREPGX) + present(CELREPHR) + present(CELREPHS) + present(CHENF1) + present(CELREPHT) + present(CELREPHU) + present(CELREPHV) + present(CELREPHW) + present(CELREPHX) + present(CELREPHZ) + present(CELREPHA) + present(CELREPHB) + present(CELREPHD) + present(CELREPHE) + present(CELREPHF) + present(CELREPHG) + present(CELREPHH) + present(INVNPROF1) + present(VIEUMEUB) + present(INVREPMEU) + present(INVREPNPRO) + present(INVNPROREP) + present(INVREDMEU) + present(REDREPNPRO) + present(INVNPROF2) + present(RESIVIANT) + present(CHENF2) + present(CHENF3) + present(CHENF4) + present(CHNFAC) + present(CHRDED) + present(CHRFAC) + present(CIAQCUL) + present(CIBOIBAIL) + present(CIIMPPRO) + present(CIIMPPRO2) + present(CIINVCORSE) + present(CINE1) + present(CINE2) + present(CINRJBAIL) + present(CIDEP15) + present(CO35) + present(RISKTEC) + present(CINRJ) + present(CRDSIM) + present(CREAGRIBIO) + present(CREAIDE) + present(CREAPP) + present(CREARTS) + present(CRECHOBOI) + present(CRECONGAGRI) + present(CREDPVREP) + present(CREFAM) + present(CREFORMCHENT) + present(CREINTERESSE) + present(CREPROSP) + present(CRERESTAU) + present(CRIGA) + present(CRENRJ) + present(COD8YT) + present(CDISPROV) + present(CSGIM) + present(COD8YL) + present(DCSG) + present(DCSGIM) + present(DEFAA0) + present(DEFAA1) + present(DEFAA2) + present(DEFAA3) + present(DEFAA4) + present(DEFAA5) + present(DEPCHOBAS) + present(DEPMOBIL) + present(DMOND) + present(ELURASC) + present(ELURASV) + present(ESFP) + present(FCPI) + present(FFIP) + present(FIPCORSE) + present(FORET) + present(INAIDE) + present(INTDIFAGRI) + present(INVDIR2009) + present(INVDOMRET50) + present(INVDOMRET60) + present(INVLGDEB2009) + present(INVLOCHOTR) + present(INVLOCXN) + present(INVLOCXV) + present(COD7UY) + present(COD7UZ) + present(INVLOG2008) + present(INVLOG2009) + present(INVLOGSOC) + present(INVLGAUTRE) + present(INVLGDEB2010) + present(INVSOC2010) + present(INVRETRO1) + present(INVRETRO2) + present(INVIMP) + present(INVLGDEB) + present(INVENDEB2009) + present(PATNAT1) + present(PATNAT2) + present(PATNAT3) + present(INVSOCNRET) + present(INVENDI) + present(CELRREDLA) + present(CELRREDLB) + present(CELRREDLC) + present(CELRREDLD) + present(CELRREDLE) + present(CELRREDLF) + present(CELRREDLM) + present(CELRREDLS) + present(CELRREDLZ) + present(CELRREDMG) + present(NRETROC50) + present(NRETROC40) + present(INVOMREP) + present(RETROCOMMB) + present(RETROCOMMC) + present(RETROCOMLH) + present(RETROCOMLI) + present(INVOMSOCQU) + present(INVOMQV) + present(INVOMSOCKH) + present(INVOMSOCKI) + present(INVOMSOCQJ) + present(INVOMSOCQS) + present(INVOMSOCQW) + present(INVOMSOCQX) + present(INVOMENTRG) + present(INVOMENTRI) + present(INVOMENTRJ) + present(INVOMENTRK) + present(INVOMENTRL) + present(INVOMENTRM) + present(INVOMENTRO) + present(INVOMENTRP) + present(INVOMENTRQ) + present(INVOMENTRR) + present(INVOMENTRT) + present(INVOMENTRU) + present(INVOMENTRV) + present(INVOMENTRW) + present(INVOMENTRY) + present(INVOMENTKT) + present(INVOMENTKU) + present(INVOMENTMN) + present(INVOMENTNU) + present(INVOMENTNV) + present(INVOMENTNW) + present(INVOMENTNY) + present(INVOMRETPA) + present(INVOMRETPB) + present(INVOMRETPD) + present(INVOMRETPE) + present(INVOMRETPF) + present(INVOMRETPH) + present(INVOMRETPI) + present(INVOMRETPJ) + present(INVOMRETPL) + present(INVOMRETPM) + present(INVOMRETPN) + present(INVOMRETPO) + present(INVOMRETPP) + present(INVOMRETPR) + present(INVOMRETPS) + present(INVOMRETPT) + present(INVOMRETPU) + present(INVOMRETPW) + present(INVOMRETPX) + present(INVOMRETPY) + present(INVOMLOGOA) + present(INVOMLOGOB) + present(INVOMLOGOC) + present(INVOMLOGOH) + present(INVOMLOGOI) + present(INVOMLOGOJ) + present(INVOMLOGOK) + present(INVOMLOGOL) + present(INVOMLOGOM) + present(INVOMLOGON) + present(INVOMLOGOO) + present(INVOMLOGOP) + present(INVOMLOGOQ) + present(INVOMLOGOR) + present(INVOMLOGOS) + present(INVOMLOGOT) + present(INVOMLOGOU) + present(INVOMLOGOV) + present(INVOMLOGOW) + present(CODHOD) + present(CODHOE) + present(CODHOF) + present(CODHOG) + present(CODHOX) + present(CODHOY) + present(CODHOZ) + present(CODHRA) + present(CODHRB) + present(CODHRC) + present(CODHRD) + present(CODHSA) + present(CODHSB) + present(CODHSC) + present(CODHSE) + present(CODHSF) + present(CODHSG) + present(CODHSH) + present(CODHSJ) + present(CODHSK) + present(CODHSL) + present(CODHSM) + present(CODHSO) + present(CODHSP) + present(CODHSQ) + present(CODHSR) + present(CODHST) + present(CODHSU) + present(CODHSV) + present(CODHSW) + present(CODHSY) + present(CODHSZ) + present(CODHTA) + present(CODHTB) + present(CODHTD) + present(LOCMEUBIA) + present(LOCMEUBIB) + present(LOCMEUBIC) + present(LOCMEUBID) + present(LOCMEUBIE) + present(LOCMEUBIF) + present(LOCMEUBIG) + present(LOCMEUBIH) + present(LOCMEUBII) + present(LOCMEUBIX) + present(LOCMEUBIY) + present(LOCMEUBIZ) + present(LOCMEUBJC) + present(LOCMEUBJI) + present(LOCMEUBJS) + present(LOCMEUBJT) + present(LOCMEUBJU) + present(LOCMEUBJV) + present(LOCMEUBJW) + present(LOCMEUBJX) + present(LOCMEUBJY) + present(IPBOCH) + present(IPELUS) + present(IPMOND) + present(SALECS) + present(SALECSG) + present(CICORSENOW) + present(PRESINTER) + present(IPPNCS) + present(IPPRICORSE) + present(IPRECH) + present(IPCHER) + present(IPREP) + present(IPREPCORSE) + present(IPSOUR) + present(IPSUIS) + present(IPSUISC) + present(IPSURSI) + present(IPSURV) + present(IPTEFN) + present(IPTEFP) + present(IPTXMO) + present(IPVLOC) + present(IRANT) + present(LOCRESINEUV) + present(REPMEUBLE) + present(MEUBLENP) + present(RESIVIEU) + present(REDMEUBLE) + present(NBACT) + present(CONVCREA) + present(CONVHAND) + present(NCHENF1) + present(NCHENF2) + present(NCHENF3) + present(NCHENF4) + present(NRBASE) + present(NRINET) + present(IMPRET) + present(BASRET) + present(NUPROP) + present(REPGROREP1) + present(REPGROREP2) + present(REPGROREP11) + present(REPGROREP12) + present(OPTPLAF15) + present(PAAP) + present(PAAV) + present(PERPC) + present(PERPP) + present(PERPV) + present(PERP_COTC) + present(PERP_COTP) + present(PERP_COTV) + present(PLAF_PERPC) + present(PLAF_PERPP) + present(PLAF_PERPV) + present(PREHABT) + present(PREHABTN1) + present(PREHABTN2) + present(PREHABTVT) + present(PREHABT2) + present(PREHABTN) + present(PREMAIDE) + present(PRESCOMP2000) + present(PRESCOMPJUGE) + present(PRETUD) + present(PRETUDANT) + present(PRODOM) + present(PROGUY) + present(PRSPROV) + present(PTZDEVDUR) + present(R1649) + present(PTZDEVDURN) + present(PREREV) + present(RACCOTC) + present(RACCOTP) + present(RACCOTV) + present(RCCURE) + present(RDCOM) + present(RDDOUP) + present(RDENL) + present(RDENLQAR) + present(RDENS) + present(RDENSQAR) + present(RDENU) + present(RDENUQAR) + present(RDEQPAHA) + present(RDDOUP) + present(RDFOREST) + present(RDFORESTGES) + present(RDFORESTRA) + present(RDREP) + present(COTFORET) + present(REPFOR) + present(REPSINFOR) + present(REPSINFOR1) + present(REPSINFOR2) + present(REPSINFOR3) + present(REPFOR1) + present(REPFOR2) + present(REPFOR3) + present(RDGARD1) + present(RDGARD1QAR) + present(RDGARD2) + present(RDGARD2QAR) + present(RDGARD3) + present(RDGARD3QAR) + present(RDGARD4) + present(RDGARD4QAR) + present(RDTECH) + present(RDMECENAT) + present(RDPRESREPORT) + present(RDREP) + present(RDRESU) + present(RDSNO) + present(RDSYCJ) + present(RDSYPP) + present(RDSYVO) + present(RE168) + present(TAX1649) + present(REGCI) + present(REPDON03) + present(REPDON04) + present(REPDON05) + present(REPDON06) + present(REPDON07) + present(RINVLOCINV) + present(RINVLOCREA) + present(REPSNO1) + present(REPSNO2) + present(REPINVTOU) + present(INVLOGREHA) + present(INVLOGHOT) + present(REPSNO3) + present(REPSNON) + present(REPSOF) + present(RESTIMOPPAU) + present(RIMOPPAUANT) + present(RIMOSAUVANT) + present(RESTIMOSAUV) + present(RIMOPPAURE) + present(RIMOSAUVRF) + present(COD7SY) + present(COD7SX) + present(COD7UH) + present(COD7WD) + present(REVMAR1) + present(REVMAR2) + present(REVMAR3) + present(PETIPRISE) + present(RMOND) + present(RSOCREPRISE) + present(RVAIDE) + present(RVAIDAS) + present(RVCURE) + present(SINISFORET) + present(SUBSTITRENTE) + present(FIPDOMCOM) + present(ALLECS) + present(INDECS) + present(PENECS) + present(DONETRAN) + present(DONAUTRE) + present(MATISOSI) + present(MATISOSJ) + present(VOLISO) + present(PORENT) + present(CHAUBOISN) + present(POMPESP) + present(POMPESQ) + present(POMPESR) + present(CHAUFSOL) + present(ENERGIEST) + present(DIAGPERF) + present(RESCHAL) + present(TRATOIVG) + present(TRAMURWC) + present(TRAVITWT) + present(RFRN2) + present(RFRN3) + present(RFRH1) + present(RFRH2) + present(COD8TL) + present(COD8UW) + present(V_8ZT) + present(CELREPYA) + present(CELREPYB) + present(CELREPYC) + present(CELREPYD) + present(CELREPYE) + present(CELREPYF) + present(CELREPYG) + present(CELREPYH) + present(CELREPYI) + present(CELREPYJ) + present(CELREPYK) + present(CELREPYL) + present(CELRREDLN) + present(CELRREDLX) + present(CELRREDLZ) + present(CELRREDMH) + present(COD7CR) + present(COD7CY) + present(COD7OA) + present(COD7OB) + present(COD7OC) + present(COD7OD) + present(COD7OE) + present(COD7OU) + present(COD7PA) + present(COD7PB) + present(COD7PC) + present(COD7PD) + present(COD7PE) + present(COD7RG) + present(COD7RH) + present(COD7RI) + present(COD7RJ) + present(COD7RK) + present(COD7RL) + present(COD7RN) + present(COD7RP) + present(COD7RQ) + present(COD7RR) + present(COD7RS) + present(COD7RT) + present(COD7RV) + present(COD7RW) + present(COD7RX) + present(COD7RZ) + present(COD7SA) + present(COD7SB) + present(COD7SC) + present(COD7TV) + present(COD7TW) + present(COD7UA) + present(COD7UB) + present(COD7UI) + present(COD7VH) + present(COD7WB) + present(COD7WU) + present(COD7WX) + present(COD8XY) + present(COD8YM) + present(CSPROVYN) + present(CSPROVYP) + present(CODHAA) + present(CODHAB) + present(CODHAC) + present(CODHAD) + present(CODHAE) + present(CODHAF) + present(CODHAG) + present(CODHAH) + present(CODHAI) + present(CODHAJ) + present(CODHAK) + present(CODHAL) + present(CODHAM) + present(CODHAN) + present(CODHAO) + present(CODHAP) + present(CODHAQ) + present(CODHAR) + present(CODHAS) + present(CODHAT) + present(CODHAU) + present(CODHAV) + present(CODHAW) + present(CODHAX) + present(CODHAY) + present(CODHBA) + present(CODHBB) + present(CODHBE) + present(CODHBF) + present(CODHBG) + present(CODHUA) + present(CODHUB) + present(CODHUC) + present(CODHUD) + present(CODHUE) + present(CODHUF) + present(CODHUG) + present(CODHXA) + present(CODHXB) + present(CODHXC) + present(CODHXE) + present(COD8SA) + present(COD8SB) + present(COD8XI) + present(COD8XJ) + present(DUFLOFI) + present(DUFLOGH) + present(DUFLOGI) + present(PATNAT4) + present(PINELQA) + present(PINELQB) + present(PINELQC) + present(PINELQD) + present(REPGROREP13) + present(REPSINFOR4) + present(RFRN3))
BFCPI_1 = is_positive(BOOL_0AM) * min(FCPI, PLAF_FCPI * 2) + is_positive(1 - BOOL_0AM) * min(FCPI, PLAF_FCPI) * 1 - V_CNR
NUPROPT = REPGROREP2 + REPGROREP1 + REPGROREP11 + REPGROREP12 + REPGROREP13 + NUPROP
DNBE = RDENS + RDENL + RDENU + RDENSQAR + RDENLQAR + RDENUQAR
ACELREPYL = CELREPYL * 1 - ART1731BIS + min(CELREPYL, max(ACELREPYL_P + ACELREPYLP2, ACELREPYL1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DILMPA = COD7PA
DCELHJK = CELLIERHJ + CELLIERHK
TSBNC = TSHALLOC + ALLOC
BOOL_0BT = is_positive(V_0BT + 0) * is_positive(V_0AC + V_0AD + 0)
VARRFDORD = min(RFCD, RFDORD)
BASSURC = CESSASSC
ACELREPGT = CELREPGT * 1 - ART1731BIS + min(CELREPGT, max(ACELREPGT_P + ACELREPGTP2, ACELREPGT1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
SOMMEA892 = SOMMEA881
HRMOYBTRFR = arr(HRBTRFR1 + HRBTRFR2 / 2)
BARAC = BACREC + _4BACREC - BACDEC * 1 - is_positive(ART1731BIS * PREM8_11)
PERPBANC = FEXC + BAFC + BAFPVC + BAEXC + BACREC - BACDEC * 1 - is_positive(ART1731BIS) + BAHEXC + BAHREC - BAHDEC * 1 - is_positive(ART1731BIS) + BAPERPC + _4BACREC + _4BAHREC + BAFORESTC + BANOCGAC
MIBDREPC = MIBDEC - MIB1AC * is_positive(MIBDEC - MIB1AC) - MIBNP1AC - MIBNPDEC * is_positive(MIBNP1AC - MIBNPDEC) * is_positive(MIBDEC - MIB1AC * is_positive(MIBDEC - MIB1AC) - MIBNP1AC - MIBNPDEC * is_positive(MIBNP1AC - MIBNPDEC))
TSBN3 = TSHALLO3 + ALLO3
SOMMEA859 = present(BICEXV) + present(BICNOV) + present(BI1AV) + present(BICDNV) + present(BICEXC) + present(BICNOC) + present(BI1AC) + present(BICDNC) + present(BICEXP) + present(BICNOP) + present(BI1AP) + present(BICDNP) + present(BIHEXV) + present(BIHNOV) + present(BIHDNV) + present(BIHEXC) + present(BIHNOC) + present(BIHDNC) + present(BIHEXP) + present(BIHNOP) + present(BIHDNP)
# TODO MAJOCP17_2TARDIF_D
# TODO MAJOTAXATARDIF_D
TAUX4 = TX_BAR4 - TX_BAR3
IND_ZIGREVORIGIND = present(ESFP)
DLOGSOC = CODHXA + CODHXB + CODHXC + CODHXE
PERPBANV = FEXV + BAFV + BAFPVV + BAEXV + BACREV - BACDEV * 1 - is_positive(ART1731BIS) + BAHEXV + BAHREV - BAHDEV * 1 - is_positive(ART1731BIS) + BAPERPV + _4BACREV + _4BAHREV + BAFORESTV + BANOCGAV
DRCF = min(0, RFCE - RFDHIS * 1 - is_positive(PREM8_11))
IPCAPTAXV = arr(BPCAPTAXV * T_PCAPTAX / 100)
T2PRB3 = CARPEP3 + PENSALP3 + CODREZ
TSQPC = sum([_2TSN1, _2TSN2, _2TSN3, _2TSN4])
SOMMEA897 = SOMMEA881
XTSNN = sum([XTSNNV, XTSNNC])
DEFNP = sum([min(DEFBIC1, DEFBIC11731 + 0) * is_positive(ART1731BIS * PREM8_11) + DEFBIC1 * 1 - is_positive(ART1731BIS * PREM8_11), min(DEFBIC2, DEFBIC21731 + 0) * is_positive(ART1731BIS * PREM8_11) + DEFBIC2 * 1 - is_positive(ART1731BIS * PREM8_11), min(DEFBIC3, DEFBIC31731 + 0) * is_positive(ART1731BIS * PREM8_11) + DEFBIC3 * 1 - is_positive(ART1731BIS * PREM8_11), min(DEFBIC4, DEFBIC41731 + 0) * is_positive(ART1731BIS * PREM8_11) + DEFBIC4 * 1 - is_positive(ART1731BIS * PREM8_11), min(DEFBIC5, DEFBIC51731 + 0) * is_positive(ART1731BIS * PREM8_11) + DEFBIC5 * 1 - is_positive(ART1731BIS * PREM8_11), min(DEFBIC6, DEFBIC61731 + 0) * is_positive(ART1731BIS * PREM8_11) + DEFBIC6 * 1 - is_positive(ART1731BIS * PREM8_11)])
LIGPRESINT = is_positive(PRESINTER) * LIG1 * LIG2
AFIPC = max(0, AFIPC_1 * 1 - ART1731BIS + min(AFIPC_1, max(AFIPC_P + AFIPCP2, AFIPC1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - V_CNR
LIGLOCRES4 = is_positive(RIVL4RES) * LIG1
LIGILMJI = is_positive(DILMJI) * LIG1 * LIG2
ZIGRE168 = is_positive(RE168) * 1 - V_CNR * LIG2
DILMOD = COD7OD
AGRIP = BAPERPP + BANOCGAP * 1 - is_positive(APPLI_OCEANS)
LIGDPREC = present(CHRFAC) * 1 - is_positive(ANNUL2042) * LIG1
TXPF1728 = 10 if (V_CODPF1728 == 7 or V_CODPF1728 == 10 or V_CODPF1728 == 17 or V_CODPF1728 == 18) else (40 if (V_CODPF1728 == 8 or V_CODPF1728 == 11) else (80 if (V_CODPF1728 == 31) else 0))
ACELREPGP = CELREPGP * 1 - ART1731BIS + min(CELREPGP, max(ACELREPGP_P + ACELREPGPP2, ACELREPGP1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BARSP = BAHREP + _4BAHREP - BAHDEP * 1 - is_positive(ART1731BIS * PREM8_11)
ABICPDECV = AUTOBICVV + AUTOBICPV
LIGRCMIMPAT = is_positive(RCMIMPAT) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INDTEFF = 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) * 1 - is_positive(is_positive(VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS) + is_positive(VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS)) * is_positive(is_positive(AUTOBICVV) + is_positive(AUTOBICPV) + is_positive(AUTOBICVC) + is_positive(AUTOBICPC) + is_positive(AUTOBICVP) + is_positive(AUTOBICPP) + is_positive(AUTOBNCV) + is_positive(AUTOBNCC) + is_positive(AUTOBNCP) + is_positive(XHONOAAV) + is_positive(XHONOV) + is_positive(XHONOAAC) + is_positive(XHONOC) + is_positive(XHONOAAP) + is_positive(XHONOP) + is_positive(SALEXTV) + is_positive(COD1AD) + is_positive(COD1AE) + is_positive(COD1AH) + is_positive(SALEXTC) + is_positive(COD1BD) + is_positive(COD1BE) + is_positive(COD1BH) + is_positive(SALEXT1) + is_positive(COD1CD) + is_positive(COD1CE) + is_positive(COD1CH) + is_positive(SALEXT2) + is_positive(COD1DD) + is_positive(COD1DE) + is_positive(COD1DH) + is_positive(SALEXT3) + is_positive(COD1ED) + is_positive(COD1EE) + is_positive(COD1EH) + is_positive(SALEXT4) + is_positive(COD1FD) + is_positive(COD1FE) + is_positive(COD1FH))
# TODO MAJOLO17_2TARDIF_D
NPLOCCGASV = arr(NPLOCCGAV * LOCNPCGAV / LOCNPCGAV + LOCGITCV) * present(LOCNPCGAV) + min(0, NPLOCCGAV) * 1 - present(LOCNPCGAV)
PERP_BOOL = is_positive(null(1 - V_0CF + V_0CH + V_0CR + V_0DJ + V_0DN + V_0DP) * null(present(TSHALLO2) + present(ALLO2) + present(TSHALLO3) + present(ALLO3) + present(TSHALLO4) + present(ALLO4) + present(FRN2) + present(FRN3) + present(FRN4) + present(CARTSP2) + present(CARTSP3) + present(CARTSP4) + present(REMPLAP2) + present(REMPLAP3) + present(REMPLAP4)))
DTOURREP = RINVLOCINV + REPINVTOU + INVLOCXN + COD7UY
ACELREPHG = CELREPHG * 1 - ART1731BIS + min(CELREPHG, max(ACELREPHG_P + ACELREPHGP2, ACELREPHG1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ACELHM = BCEL_HM * 1 - ART1731BIS + min(BCEL_HM, max(ACELHM_P + ACELHMP2, ACELHM1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELLIERHM) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DABNCNP = DABNCNP1 + DABNCNP2 + DABNCNP3 + DABNCNP4 + DABNCNP5 + DABNCNP6
GLFTOT = sum([GLFV, GLFC, GLF1, GLF2, GLF3, GLF4])
SOMMEA538 = SOMMEA538VB + SOMMEA538CB + SOMMEA538PB + SOMMEA538VP + SOMMEA538CP + SOMMEA538PP
MAJOCAPTARDIF_D1 = MAJOCAPTARDIF_D - MAJOCP17_2TARDIF_D
BPTPSB = BTPSB * 1 - is_positive(present(TAX1649) + present(RE168))
RFIPCORSE = arr(AFIPC_1 * TX_FIPCORSE / 100) * 1 - V_CNR
BAFORC = arr(BAFC * MAJREV) + BAFORESTC + BAFPVC
RCELREP_HW_R = is_positive(CELREPHW) * arr(CELREPHW * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TPRB2 = PRBR2 + PALI2 + PENIN2
LIGINVRED = is_positive(DINVRED) * LIG1 * LIG2
RIVCELHNO8 = arr(min(CELLIERHN + CELLIERHO + 0, LIMCELLIER) * is_positive(CELLIERHN) * TX25 / 100 + min(CELLIERHN + CELLIERHO + 0, LIMCELLIER) * is_positive(CELLIERHO) * TX40 / 100) - 8 * RIVCELHNO1 * 1 - V_CNR
DISFBASE = ISFBASE
# TODO TAXLOYDEG
TGLPALIMTOT = sum([TGLPALIMV, TGLPALIMC, TGLPALIM1, TGLPALIM2, TGLPALIM3, TGLPALIM4])
PS_RVORIGND = ESFP
BPTP5 = BTP5 * 1 - is_positive(present(TAX1649) + present(RE168))
DCELREPGU = CELREPGU
ACODOU = arr(min(PLAF_RESINEUV, COD7OU) / 9) * 1 - V_CNR
XBICNPHDV = BICNPEXV + BICREV
RDUFLO_EKL = arr(arr(min(DUFLOEL + 0, LIMDUFLO) / 9) * TX29 / 100) + arr(arr(min(DUFLOEK + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + 0, LIMDUFLO)) / 9) * TX18 / 100) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
BSOCREP = min(RSOCREPRISE, LIM_SOCREPR * 1 + BOOL_0AM)
# TODO MAJOIR17_2TARDIF_D
PERPBNCPNV = BNCEXV + BNCREV - BNCDEV * 1 - is_positive(ART1731BIS) + BNHEXV + BNHREV - BNHDEV * 1 - is_positive(ART1731BIS) + BNCCRV
ACELRREDLM = CELRREDLM * 1 - ART1731BIS + min(CELRREDLM, max(ACELRREDLM_P + ACELRREDLMP2, ACELRREDLM1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIG066 = sum([PEBF1, PEBF2, PEBF3, PEBF4])
EXOPAC = present(FEXP) + is_positive(MIBEXP) + is_positive(MIBNPEXP) + is_positive(BNCPROEXP) + is_positive(XSPENPP) + is_positive(XBAP) + is_positive(XBIPP) + is_positive(XBINPP) + is_positive(XBNP) + is_positive(XBNNPP) + is_positive(ABICPDECP) * 1 - V_CNR + is_positive(ABNCPDECP) * 1 - V_CNR + is_positive(HONODECP) * 1 - V_CNR + is_positive(AGRIP) + is_positive(BIPERPP) + is_positive(BNCCREAP)
LIGCELHU = is_positive(DCELREPHU) * LIG1 * LIG2
NPLOCCGASSC = LOCNPCGAC + LOCGITCC - LOCDEFNPCGAC
# TODO MAJOIRTARDIF_D
XBIPV = BIHEXV + BICEXV
TSNN2PAFF = sum([TSNN21AFF, TSNN22AFF, TSNN23AFF, TSNN24AFF])
LIGCELGX = is_positive(DCELREPGX) * LIG1 * LIG2
SPEDREPV = BNCPRODEV - BNCPRO1AV * is_positive(BNCPRODEV - BNCPRO1AV) - BNCNP1AV - BNCNPDEV * is_positive(BNCNP1AV - BNCNPDEV) * is_positive(BNCPRODEV - BNCPRO1AV * is_positive(BNCPRODEV - BNCPRO1AV) - BNCNP1AV - BNCNPDEV * is_positive(BNCNP1AV - BNCNPDEV))
SPENETPF = sum([SPENETPV, SPENETPC, SPENETPP]) + SPENETCT
ACODID = min(PLAF_RESINEUV - ACODIE - ACODIF, LOCMEUBID) * 1 - V_CNR
BI12AC = BI1AC + BI2AC
INDTS = is_positive(INDCOLS + INDCTXS) * INDTRAIT
LIGDEVDUR = is_positive(DDEVDUR) * LIG1 * LIG2
DLMRN1TXM = min(0, MIB_NETCT * 1 - is_positive(MIBNETPTOT) + SPENETCT * 1 - is_positive(SPENETPF))
LIGXBIP = is_positive(XBIPV + XBIPC + XBIPP) * LIG1 * LIG2
LIGCELHL = is_positive(DCELHL) * LIG1 * LIG2
TXINT = is_positive(2006 - arr(INTAN)) * max(0, INTAN - V_ANREV + 1 * 12 + INTMS - 6) * TXMOISRETARD + positif_ou_nul(V_ANREV - 2006) * max(0, INTAN - V_ANREV + 1 * 12 + INTMS - 6) * TXMOISRETARD2 + 1 - is_positive(2006 - arr(INTAN)) * 1 - positif_ou_nul(V_ANREV - 2006) * 2006 - V_ANREV + 1 * 12 - 6 * TXMOISRETARD * is_positive(2006 - V_ANREV + 1) + TXMOISRETARD2 * null(2006 - V_ANREV + 1) + INTAN - 2006 * 12 + INTMS * TXMOISRETARD2 * present(MOISAN)
AILMJV = DILMJV * 1 - ART1731BIS + min(DILMJV, max(AILMJV_P + AILMJVP2, AILMJV1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
LIGIREXS19 = is_positive(IREXITS19) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
TXSPENETP = TXSPEAAP + TXSPEHP
APIQABCD = APIQABCD_1 * 1 - ART1731BIS
BITAC = BIPTAC + BINTAC
BINTTAV = BINTAV + BI2AV
LIGCELLX = is_positive(DCELRREDLX) * LIG1 * LIG2
RETUD = 1 - V_CNR * arr(RDENS * MTRC + RDENL * MTRL + RDENU * MTRS + RDENSQAR * MTRC / 2 + RDENLQAR * MTRL / 2 + RDENUQAR * MTRS / 2)
PPE_DATE_FIN = is_positive(BOOL_0AM) * is_positive(V_0AZ + 0) * V_0AZ + 0 + is_positive(DATDEPETR + 0) * DATDEPETR + 0 * null(V_0AZ + 0)
ACELNQ = BCEL_NQ * 1 - ART1731BIS + min(BCEL_NQ, max(ACELNQ_P + ACELNQP2, ACELNQ1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELLIERNQ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIG_R8ZT = is_positive(V_8ZT) * LIG1 * LIG2
SPENETNPF = sum([SPENETNPV, SPENETNPC, SPENETNPP]) + SPENETNPCT
TTSBV = TEXTSV + sum([GLD1V, GLD2V, GLD3V]) + CODDAJ + CODEAJ
TXRSE1 = COPETO + TXINT
RRS = arr(BSURV * TX_REDSURV / 100) * 1 - V_CNR
ZIGINT522 = is_positive(RETRSE522) * LIG2
PPESAL2 = PPE_SALAVDEF2 * 1 - PPE_BOOL_SEULPAC
RESIVIEU6 = arr(arr(ACODIM / 9) * TX25 / 100)
PDFNC = min(PLAF_DEDFORFTS, PTPS10C)
PRQNC = _2PRBC
LIGNRBASE = is_positive(present(NRINET) + present(NRBASE)) * LIG1 * LIG2
LIG1510YT = is_positive(null(max(0, RMOND + DEFZU - DMOND)) + null(max(0, IPTEFP + DEFZU - IPTEFN))) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * is_positive(DEFRIMOND) * LIG1 * LIG2
RETPROREP = arr(DPROREP * TX25 / 100) * 1 - V_CNR
LIGCELMH = is_positive(DCELRREDMH) * LIG1 * LIG2
BCIHP = max(PLAFHABPRIN * 1 + BOOL_0AM * 1 + is_positive(V_0AP + V_0AF + V_0CG + V_0CI + V_0CR) + PLAFHABPRINENF / 2 * V_0CH + V_0DP + PLAFHABPRINENF * V_0CR + V_0CF + V_0DJ + V_0DN, 0)
LIGCELLF = is_positive(DCELRREDLF) * LIG1 * LIG2
ARIRENOV = BRENOV * 1 - ART1731BIS + min(BRENOV, max(ARIRENOV_P + ARIRENOVP2, ARIRENOV1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
ACELREPGK = CELREPGK * 1 - ART1731BIS + min(DCELREPGK, max(ACELREPGK_P + ACELREPGKP2, ACELREPGK1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ACODIL = min(PLAF_RESINEUV, MEUBLENP) * 1 - V_CNR
IND_CTXD = is_positive(CS_DEG) * is_positive(BCDIS) * is_positive(INDCTX)
LIGPATNAT2 = LIG1 * LIG2 * is_positive(PATNAT2) + null(PATNAT2) * is_positive(V_NOTRAIT - 20)
LIGPIQABCD = is_positive(DPIQABCD) * LIG1 * LIG2
LIGCELNBGL = is_positive(DCELNBGL) * LIG1 * LIG2
P2GE = max(PLAF_GE2 * 1 + BOOL_0AM + PLAF_GE2_PACQAR * V_0CH + V_0DP + PLAF_GE2_PAC * V_0CR + V_0CF + V_0DJ + V_0DN - BTANTGECUM, 0)
NBMIQAR = null(VAR0BT) * null(V_0CF + V_0DJ + V_0CR + 0) * 2 * V_0CH - 2 * is_positive(V_0CH - 2) + 1 * is_positive(V_0CH + 0) + 1 * is_positive(V_0CH - 1) + null(V_0CF + V_0DJ + V_0CR - 1) * 2 * V_0CH - 1 * is_positive(V_0CH - 1) + 1 * is_positive(V_0CH + 0) + positif_ou_nul(V_0CF + V_0DJ + V_0CR - 2) * 2 * V_0CH
AILMIA_R = DILMIA * 1 - V_CNR
ACELHJK_R = positif_ou_nul(CELLIERHJ + CELLIERHK) * BCEL_HJK * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ACELHL = BCEL_HL * 1 - ART1731BIS + min(BCEL_HL, max(ACELHL_P + ACELHLP2, ACELHL1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELLIERHL) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NCC = V_0AS * BOOL_0AM * 1 - is_positive(V_0AP + V_0AF) * 0.5 * is_positive(max(AGV + 1 - LIM_AGE_LET_S, AGC + 1 - LIM_AGE_LET_S))
REPLOCIE2 = arr(arr(ACODIE / 9) * TX18 / 100)
REPLOCIE5 = arr(arr(ACODIE / 9) * TX18 / 100)
ZIGINT422 = is_positive(RETRSE422) * LIG2
LIGRESIVIEU = is_positive(DRESIVIEU) * LIG1 * LIG2
LIGCELGK = is_positive(DCELREPGK) * LIG1 * LIG2
TEXPRV = TPRBV + COD1AH + T2PRBV + PEBFV
TRCMRTNC = RCMRTNC + _2RCMRTNC
LIGPRETUD = is_positive(PRETUD + PRETUDANT) * LIG1 * LIG2
MIB_TTP = MIB_TVENP + MIB_TPRESP
TSBNP = TSHALLOP + ALLOP
LIGDEFRFNONI = is_positive(DEFRFNONI) * DEFRIRF * 1 - PREM8_11
ZIGINT5 = is_positive(RETRSE5) * LIG2
TXRSE5 = COPETO + TXINT
MAJTXTAXA4 = 1 - is_positive(V_NBCODITAXA) * 1 - is_positive(CMAJ) * is_positive(NMAJTAXA4) * TXPFITAXA + is_positive(CMAJ) * COPETO + is_positive(V_NBCODITAXA) * -1
LIGTAXANET = is_positive(present(CESSASSV) + present(CESSASSC) * INDREV1A8IR + TAXANTAFF) * 1 - is_positive(ANNUL2042 + 0) * LIG1
ZIGINT222 = is_positive(RETRSE222) * LIG2
RISFDONF_1 = min(PLAF_ISFRED, AISFDONF)
RESTIMOB = min(RESTIMOSAUV, LIM_RESTIMO - RESTIMOD)
AILMIA = DILMIA * 1 - ART1731BIS + min(DILMIA, max(AILMIA_P + AILMIAP2, AILMIA1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
LIGPV3SB = is_positive(PVBAR3SB) * LIG1 * LIG2 * 1 - null(4 - V_REGCO)
AILMIB = DILMIB * 1 - ART1731BIS + min(DILMIB, max(AILMIB_P + AILMIBP2, AILMIB1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
MAJOHRTARDIF_R1 = MAJOHRTARDIF_R - MAJOHR17_2TARDIF_R
LIGFORET = is_positive(DFORET) * LIG1 * LIG2
LIGRDUGIH = is_positive(RIVDUGIH) * LIG1 * LIG2
RCMRNABD = RCMABD - RCMRABD
LIGCELYJ = is_positive(DCELREPYJ) * LIG1 * LIG2
RETREPMEU = arr(DREPMEU * TX25 / 100) * 1 - V_CNR
REPDUGIH = RIVDUGIH * 7 + RIVDUGIH8
LIGRPIQBD = is_positive(RIVPIQBD) * LIG1 * LIG2
LIGCELCOM = is_positive(DCELCOM) * LIG1 * LIG2
LIGCIFORET = is_positive(BDCIFORET) * LIG1 * LIG2
ACELFD_R = positif_ou_nul(DCELFD) * BCEL_FD * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGLOCENT = is_positive(DLOCENT) * LIG1 * LIG2
HRLIMBTRFR1 = positif_ou_nul(LIMHR1 * 1 + BOOL_0AM - HRBTRFR1)
RRESINEUV4 = arr(arr(ACODIL / 9) * TX20 / 100)
SOMMEA891 = SOMMEA881
RCMAB = RCMRNABD + _2RCMRNABD
LIGCIGARD = is_positive(DGARD) * LIG1 * LIG2
PRQNV = _2PRBV
TXMOYIMPDEN6 = CESSASSV + CESSASSC + BPCAPTAXV + BPCAPTAXC
LIGCICAP = present(PRELIBXT) * LIG1 * LIG2
AREDREP = DREDREP * 1 - ART1731BIS + min(DREDREP, max(AREDREP_P + AREDREPP2, AREDREP1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
AFORET_1 = max(min(DFORET, LIM_FORET), 0) * 1 - V_CNR
LIGCELHA = is_positive(DCELREPHA) * LIG1 * LIG2
BPTPSK = BTPSK * 1 - is_positive(present(TAX1649) + present(RE168))
REPINVPME2 = max(0, REPSNO1 - max(0, LIM_SOCNOUV2 * 1 + BOOL_0AM - min(REPSNO3, LIM_SOCNOUV2 * 1 + BOOL_0AM) + REPSNO2)) * 1 - V_CNR
AUBAINE13B = max(0, min(V_A13REELB, V_DIFTEOREEL - AUBAINE13A))
LIGILMJY = is_positive(DILMJY) * LIG1 * LIG2
TXSPENETC = TXSPEAAC + TXSPEHC
ZIG_CTRIPROV = is_positive(COD8YT + PRSPROV + CSGIM + CRDSIM) * LIG2
ZIGINTREGV = is_positive(RETREGV) * LIG2
DEFBACREC = is_positive(_4BACREC) * arr(BACDEC * 1 - is_positive(ART1731BIS * PREM8_11) * BACREC / BARREVAC) + 1 - is_positive(_4BACREC) * BACDEC * 1 - is_positive(ART1731BIS * PREM8_11)
CICONGAGRI = CRECONGAGRI * 1 - V_CNR
LIGXSPEN = is_positive(XSPENPV + XSPENPC + XSPENPP) * LIG1 * LIG2
PERPBANP = PERP_BOOL * FEXP + BAFP + BAFPVP + BAEXP + BACREP - BACDEP * 1 - is_positive(ART1731BIS) + BAHEXP + BAHREP - BAHDEP * 1 - is_positive(ART1731BIS) + BAPERPP + _4BACREP + _4BAHREP + BAFORESTP + BANOCGAP
AILMOD = DILMOD * 1 - V_CNR
LIGTAXASSURV = present(CESSASSV) * 1 - is_positive(ANNUL2042) * LIG1
RFIPDOMCOM = arr(AFIPDOM_1 * TXFIPDOM / 100)
LIGXIMPA = is_positive(XETRANV + XETRANC) * LIG1 * LIG2
LIGRSOCREPR = is_positive(present(RSOCREPRISE)) * LIG1 * LIG2
LIGABIMPMV = is_positive(ABIMPMV) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIG_NMAJ4 = TYPE2 * is_positive(NMAJ4)
NBQART = BOOL_0BT * null(V_0CF + V_0CR + V_0DJ + 0) * 1 / 4 * null(V_0CH - 1) + 1 / 2 * positif_ou_nul(V_0CH - 2)
LIGCELHX = is_positive(DCELREPHX) * LIG1 * LIG2
BFCPI = BFCPI_1 * 1 - ART1731BIS + min(BFCPI_1, max(BFCPI_P + BFCPIP2, BFCPI1731 + 0) * 1 - PREM8_11) * ART1731BIS
LIGCI2CK = is_positive(COD2CK) * LIG1 * LIG2
LIGREPNPRO = is_positive(DREPNPRO) * LIG1 * LIG2
CIADCRE = arr(BADCRE * TX_AIDOMI / 100) * 1 - is_positive(RE168 + TAX1649) * 1 - V_CNR
TXMOYIMPDEN3 = sum([BN1AV + BIH1V + BI1AV + BI2AV + BA1AV, BN1AC + BIH1C + BI1AC + BI2AC + BA1AC, BN1AP + BIH1P + BI1AP + BI2AP + BA1AP]) + MIB_1AF + BA1AF + SPEPV + PVINVE + PVINCE + PVINPE + INVENTV + INVENTC + INVENTP + BPTPVT + BPTPSJ * 1 - is_positive(IPVLOC) * 1 - is_positive(present(TAX1649) + present(RE168)) + BTP2 + BPTP4 + BTP40 + BTP18 * 1 - is_positive(IPVLOC) * 1 - is_positive(present(TAX1649) + present(RE168)) + RCM2FA * 1 - is_positive(IPVLOC)
MAJOIRTARDIF_R1 = MAJOIRTARDIF_R - MAJOIR17_2TARDIF_R
RESIVIEU7 = arr(arr(ACODIM / 9) * TX25 / 100)
VARD = max(0, min(REPFOR, max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R) - REPSINFOR))
BPRESCOMP = RDPRESREPORT + 1 - is_positive(RDPRESREPORT + 0) * arr(1 - present(SUBSTITRENTE) * arr(null(PRESCOMP2000 - PRESCOMPJUGE) * min(PLAFPRESCOMP, PRESCOMP2000) + is_positive(PRESCOMPJUGE - PRESCOMP2000) * positif_ou_nul(PLAFPRESCOMP - PRESCOMPJUGE) * PRESCOMP2000 + is_positive(PRESCOMPJUGE - PRESCOMP2000) * 1 - positif_ou_nul(PLAFPRESCOMP - PRESCOMPJUGE) * PLAFPRESCOMP * PRESCOMP2000 / PRESCOMPJUGE) + present(SUBSTITRENTE) * arr(null(PRESCOMP2000 - SUBSTITRENTE) * positif_ou_nul(PLAFPRESCOMP - PRESCOMPJUGE) * SUBSTITRENTE + is_positive(PRESCOMPJUGE - PLAFPRESCOMP) * arr(PLAFPRESCOMP * SUBSTITRENTE / PRESCOMPJUGE) + is_positive(SUBSTITRENTE - PRESCOMP2000) * positif_ou_nul(PLAFPRESCOMP - PRESCOMPJUGE) * PRESCOMP2000 + is_positive(PRESCOMPJUGE - PLAFPRESCOMP) * arr(PLAFPRESCOMP * SUBSTITRENTE / PRESCOMPJUGE * PRESCOMP2000 / SUBSTITRENTE))) * 1 - V_CNR
LIGMETART = is_positive(CREARTS) * LIG1 * LIG2
RESIVIEU4 = arr(arr(ACODIM / 9) * TX25 / 100)
LIG1546 = is_positive(PRODOM + PROGUY) * 1 - is_positive(V_EAD + V_EAG) * LIG2
REPCELHNO = sum([RIVCELHNO1, RIVCELHNO2, RIVCELHNO3, RIVCELHNO4, RIVCELHNO5, RIVCELHNO6, RIVCELHNO7]) + RIVCELHNO8
XTPS10V = arr(XEXTSV * TX_DEDFORFTS / 100)
EXTS3 = TSBN3 + _2TSN3
LIG2LB = is_positive(COD2LB) * LIG1 * LIG2 * 1 - V_CNR
LIGRIRENOV = is_positive(DRIRENOV) * LIG1 * LIG2
TSPEABC = arr(max(MIN_SPEBNC, TSPEBASABC * SPETXAB / 100) * positif_ou_nul(TSPETOTC - MIN_SPEBNC)) + arr(min(MIN_SPEBNC, TSPEBASABC) * is_positive(MIN_SPEBNC - TSPETOTC))
LIGABDETP = is_positive(ABDETPLUS) * LIG1 * LIG2
ACELFD = BCEL_FD * 1 - ART1731BIS + min(BCEL_FD, max(ACELFD_P + ACELFDP2, ACELFD1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(DCELFD) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGILMIZ = is_positive(DILMIZ) * LIG1 * LIG2
LIGTTPVQ = is_positive(is_positive(CARTSV) + is_positive(CARTSC) + is_positive(CARTSP1) + is_positive(CARTSP2) + is_positive(CARTSP3) + is_positive(CARTSP4) + is_positive(REMPLAV) + is_positive(REMPLAC) + is_positive(REMPLAP1) + is_positive(REMPLAP2) + is_positive(REMPLAP3) + is_positive(REMPLAP4) + is_positive(PEBFV) + is_positive(PEBFC) + is_positive(PEBF1) + is_positive(PEBF2) + is_positive(PEBF3) + is_positive(PEBF4) + is_positive(CARPEV) + is_positive(CARPEC) + is_positive(CARPEP1) + is_positive(CARPEP2) + is_positive(CARPEP3) + is_positive(CARPEP4) + is_positive(CODRAZ) + is_positive(CODRBZ) + is_positive(CODRCZ) + is_positive(CODRDZ) + is_positive(CODREZ) + is_positive(CODRFZ) + is_positive(PENSALV) + is_positive(PENSALC) + is_positive(PENSALP1) + is_positive(PENSALP2) + is_positive(PENSALP3) + is_positive(PENSALP4) + is_positive(RENTAX) + is_positive(RENTAX5) + is_positive(RENTAX6) + is_positive(RENTAX7) + is_positive(REVACT) + is_positive(REVPEA) + is_positive(PROVIE) + is_positive(DISQUO) + is_positive(RESTUC) + is_positive(INTERE) + is_positive(FONCI) + is_positive(REAMOR) + is_positive(_4BACREV) + is_positive(_4BACREC) + is_positive(_4BACREP) + is_positive(_4BAHREV) + is_positive(_4BAHREC) + is_positive(_4BAHREP) + is_positive(GLD1V) + is_positive(GLD1C) + is_positive(GLD2V) + is_positive(GLD2C) + is_positive(GLD3V) + is_positive(GLD3C) + is_positive(CODDAJ) + is_positive(CODEAJ) + is_positive(CODDBJ) + is_positive(CODEBJ) + is_positive(CODRVG)) * LIG1 * LIG2 * 1 - null(4 - V_REGCO)
XBICNETC = XBICHDC - BICDNC * 1 - is_positive(ART1731BIS)
XTSBC = sum([GLD1C, GLD2C, GLD3C]) + TSBNC + BPCOSAC + TSASSUC + XETRANC + EXOCETC + GLDGRATC
RISFDONCEE_1 = max(0, min(PLAF_ISFRED - RISFDONF_1, AISFDONCEE))
PVTXEFF = PVTAXSB + BPVRCM - PVTXEFF2 * is_positive(present(IPTEFN) + present(IPTEFP))
BCIHABPRIN1 = min(BCIHP, PREHABT) * 1 - V_CNR
LIGILMOE = is_positive(DILMOE) * LIG1 * LIG2
ITPRCM = arr(BPTP24 * TX24 / 100)
RISFDONF_2 = min(PLAF_ISFRED, RISFDONF_1)
AGARD = BRFG * 1 - V_CNR
RSE3 = arr(BRSE3 * TXTW / 100) * 1 - is_positive(ANNUL2042)
LIGCELGV = is_positive(DCELREPGV) * LIG1 * LIG2
LIGCELYH = is_positive(DCELREPYH) * LIG1 * LIG2
LIGCREPROSP = is_positive(CREPROSP) * LIG1 * LIG2
RRESINEUV1 = arr(arr(ACODIL / 9) * TX20 / 100)
LIG13 = is_positive(present(BACDEV) + present(BACREV) + present(BAHDEV) + present(BAHREV) + present(BACDEC) + present(BACREC) + present(BAHDEC) + present(BAHREC) + present(BACDEP) + present(BACREP) + present(BAHDEP) + present(BAHREP) + present(_4BAHREV) + present(_4BAHREC) + present(_4BAHREP) + present(_4BACREV) + present(_4BACREC) + present(_4BACREP) + present(BAFV) + present(BAFC) + present(BAFP) + present(BAFORESTV) + present(BAFORESTC) + present(BAFORESTP) + present(BAFPVV) + present(BAFPVC) + present(BAFPVP)) * 1 - is_positive(IPVLOC) * 1 - is_positive(ANNUL2042) * LIG1
LIG58 = present(PAAV) + present(PAAP) * is_positive(LIG52) * LIG1 * LIG2
BADPLAF = min(LIM_AIDOMI * 1 - is_positive(PREMAIDE) + LIM_PREMAIDE * is_positive(PREMAIDE) + MAJSALDOM * positif_ou_nul(V_ANREV - V_0DA - 65) + positif_ou_nul(V_ANREV - V_0DB - 65) * BOOL_0AM + V_0CF + V_0DJ + V_0DN + V_0CH + V_0DP / 2, LIM_AIDOMI3 * 1 - is_positive(PREMAIDE) + LIM_PREMAIDE2 * is_positive(PREMAIDE)) * 1 - is_positive(INAIDE + 0) + LIM_AIDOMI2 * is_positive(INAIDE + 0) * is_positive(RVAIDE)
AREDMEUB = DREDMEUB * 1 - ART1731BIS + min(DREDMEUB, max(AREDMEUB_P + AREDMEUBP2, AREDMEUB1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
RRESINEUV2 = arr(arr(ACODIL / 9) * TX20 / 100)
RIVCELFABC1 = is_positive(CELLIERFA) * arr(BCEL_FABC * TX13 / 100) + is_positive(CELLIERFB) * arr(BCEL_FABC * TX6 / 100) + is_positive(CELLIERFC) * arr(BCEL_FABC * TX24 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BAD1 = min(RVAIDE, max(0, BADPLAF - BADCRE))
ZIGTAX1649 = is_positive(TAX1649) * 1 - V_CNR * LIG2
AILMPA = DILMPA * 1 - V_CNR
RCEL_NQ_R = is_positive(CELLIERNQ) * arr(ACELNQ_R * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RIVPIQAC5 = max(0, arr(min(PINELQC + 0, LIMDUFLO - min(DUFLOEL + PINELQD + 0, LIMDUFLO)) * TX23 / 100) + arr(min(PINELQA + 0, LIMDUFLO - min(DUFLOEL + PINELQD + PINELQC + DUFLOEK + PINELQB + 0, LIMDUFLO)) * TX12 / 100) - 5 * RIVPIQAC) * 1 - null(4 - V_REGCO) * 1 - null(2 - V_REGCO)
DCEL2012 = CELSOMJ
LIGLOCNEUF6 = is_positive(RIVL6) * LIG1
EXFR = max(0, RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P), BRCMTOT1731 + 0)) * ART1731BIS - RCMAB - RTCAR - RCMNAB)
LIGABDETM = is_positive(ABDETMOINS) * LIG1 * LIG2
PPESALPTOT = PPE_SALAVDEF1 + PPE_SALAVDEF2 + PPE_SALAVDEF3 + PPE_SALAVDEF4
ABTAV = PLAF_RCMAV1 * 1 + BOOL_0AM
LIGILMIA = is_positive(DILMIA) * LIG1 * LIG2
_1RAO = max(0, REGPRIVM)
BDRSE5 = max(0, SALECSG - REVCSXB - arr(CSPROVYE / TX075 / 100)) * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
EXOCJT = present(TSASSUC) + is_positive(XETRANC) + is_positive(EXOCETC) + present(FEXC) + is_positive(MIBEXC) + is_positive(MIBNPEXC) + is_positive(BNCPROEXC) + is_positive(XSPENPC) + is_positive(XBAC) + is_positive(XBIPC) + is_positive(XBINPC) + is_positive(XBNC) + is_positive(XBNNPC) + is_positive(ABICPDECC) * 1 - V_CNR + is_positive(ABNCPDECC) * 1 - V_CNR + is_positive(HONODECC) * 1 - V_CNR + is_positive(AGRIC) + is_positive(BIPERPC) + is_positive(BNCCREAC)
RESIMEUB7 = arr(arr(min(DRESIMEUB, PLAF_RESINEUV) / 9) * TX25 / 100)
TMIB_APV = min(TMIB_TPRESV, max(MIN_MBIC, arr(TMIB_TPRESV * TX_MIBPRES / 100)))
AILMIH = DILMIH * 1 - ART1731BIS + min(DILMIH, max(AILMIH_P + AILMIHP2, AILMIH1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
LIGRESINEUV = is_positive(DRESINEUV) * LIG1 * LIG2
TOTDEFNP = null(4 - V_IND_TRAIT) * DEFNP + null(5 - V_IND_TRAIT) * ART1731BIS * min(DEFNP, DEFNPI1731) * 1 - PREM8_11 + 0 * PREM8_11 + min(DEFNP, DEFNPI1731) * 1 - ART1731BIS
RITOUR = RILNEUF + RILTRA + RILRES + arr(RINVLOCINV + REPINVTOU + INVLOCXN + COD7UY * TX_REDIL25 / 100) + arr(RINVLOCREA + INVLOGREHA + INVLOCXV + COD7UZ * TX_REDIL20 / 100)
HRLIMBTRFR2 = positif_ou_nul(LIMHR1 * 1 + BOOL_0AM - HRBTRFR2)
LIGEMPLOI = is_positive(COD8UW + COD8TL) * LIG1 * LIG2
LIGRCODOU = is_positive(COD7OU + 0) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
MAJOIRTARDIF_P1 = MAJOIRTARDIF_P - MAJOIR17_2TARDIF_P
RESIMEUB2 = arr(arr(min(DRESIMEUB, PLAF_RESINEUV) / 9) * TX25 / 100)
TAXASSURV = arr(BASSURV1 * TX_ASSUR1 / 100 + BASSURV2 * TX_ASSUR2 / 100 + BASSURV3 * TX_ASSUR3 / 100) * 1 - is_positive(RE168 + TAX1649)
BGLOA = GLDGRATV + GLDGRATC * 1 - V_CNR * 1 - is_positive(present(TAX1649) + present(RE168))
LIGSPEDREPC = is_positive(SPEDREPC) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
LIGILMJC = is_positive(DILMJC) * LIG1 * LIG2
BANP = BACREP - DEFBACREP * positif_ou_nul(BARAP) + BARAP * 1 - is_positive(BARAP)
BPTP40 = BTP40 * 1 - is_positive(present(TAX1649) + present(RE168))
SOMMEA804 = SOMMEANOEXP + is_positive(GLD1V) + is_positive(GLD2V) + is_positive(GLD3V) + is_positive(GLD1C) + is_positive(GLD2C) + is_positive(GLD3C)
RETREPNPRO = arr(DREPNPRO * TX25 / 100) * 1 - V_CNR
LIGCELHV = is_positive(DCELREPHV) * LIG1 * LIG2
BI12F = sum([REVIBI12V, REVIBI12C, REVIBI12P]) + MIB_1AF
ASOUFIP = BSOUFIP * 1 - ART1731BIS + min(BSOUFIP, max(ASOUFIP_P + ASOUFIPP2, ASOUFIP1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
BCIFORETUI = max(0, min(COD7UI, max(0, PLAF_FOREST2 * 1 + BOOL_0AM))) * 1 - V_CNR
CGLOA = arr(BGLOA * TX075 / 100) * 1 - is_positive(ANNUL2042)
LIG3710 = is_positive(20 - V_NOTRAIT) * is_positive(BOOL_0AZ) * LIG1
LIGCELMG = is_positive(DCELRREDMG) * LIG1 * LIG2
SFV2 = ((1 if (V_0AF + 0 == 1) else 2) if (V_0AP + 0 == 1) else (3 if (V_0AF + 0 == 1) else (7 if (V_0AW + 0 == 1) else 0))) if (V_0AV + 0 == 1 and BOOL_0AZ == 1) else 0
TTSB1 = TEXTS1
RIVCELFD4 = arr(min(CELLIERFD, LIMCELLIER) * is_positive(CELLIERFD) * TX24 / 100) - 4 * RIVCELFD1 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ACEL_R = positif_ou_nul(CELSOMN) * BCEL_2011 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
SOMMEA805 = SOMMEANOEXP + is_positive(CODDAJ) + is_positive(CODEAJ) + is_positive(CODDBJ) + is_positive(CODEBJ) + is_positive(CARTSV) + is_positive(CARTSNBAV) + is_positive(CARTSC) + is_positive(CARTSNBAC)
RCEL_NBGL = is_positive(CELLIERNB) * arr(ACELNBGL * TX25 / 100) + is_positive(CELLIERNG) * arr(ACELNBGL * TX15 / 100) + is_positive(CELLIERNL) * arr(ACELNBGL * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCEL_2012_R = is_positive(CELLIERJA + CELLIERJE + CELLIERJH) * arr(ACEL2012_R * TX13 / 100) + is_positive(CELLIERJD) * arr(ACEL2012_R * TX22 / 100) + is_positive(CELLIERJF + CELLIERJJ) * arr(ACEL2012_R * TX6 / 100) + is_positive(CELLIERJK + CELLIERJN) * arr(ACEL2012_R * TX24 / 100) + is_positive(CELLIERJM) * arr(ACEL2012_R * TX36 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TPMIB_NETVV = MIBVENV + AUTOBICVV - TPMIB_AVV
RDOMSOC1_1 = 1 - V_CNR * 1 - V_INDTEO * sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27, RSOC28, RSOC29, RSOC30, RSOC31, RSOC32, RSOC33, RSOC34, RSOC35, RSOC36, RSOC37, RSOC38]) + V_INDTEO * arr(V_RSOC11 + V_RSOC12 + V_RSOC13 + V_RSOC15 + V_RSOC17 + V_RSOC20 + V_RSOC23 + V_RSOC27 + V_RSOC14 + V_RSOC16 + V_RSOC18 + V_RSOC21 + V_RSOC24 + V_RSOC28 + V_RSOC31 + V_RSOC35 + V_RSOC19 + V_RSOC22 + V_RSOC25 + V_RSOC29 + V_RSOC32 + V_RSOC36 + V_RSOC26 + V_RSOC30 + V_RSOC33 + V_RSOC37 + V_RSOC34 + V_RSOC38 * TX65 / 100)
PLOCNETPAC = PLOCCGAPAC + PLOCPAC
LIGCIGLO = is_positive(present(COD8XF) + present(COD8XG) + present(COD8XH)) * LIG1 * LIG2
RIVCELHNO2 = RIVCELHNO1
SPEBASABV = SPETOTV
LIGCELLA = is_positive(DCELRREDLA) * LIG1 * LIG2
NOCEPIMPV = is_positive(ANOCEP - DNOCEP * 1 - is_positive(ART1731BIS * PREM8_11)) * arr(ANOCEP - DNOCEP * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV) + positif_ou_nul(DNOCEP * 1 - is_positive(ART1731BIS * PREM8_11) - ANOCEP) * ANOCEP - DNOCEP * 1 - is_positive(ART1731BIS * PREM8_11) + BNNAAV
EXPR3 = PRB3 + _2PRB3 + PEBF3
LIGCINE = is_positive(DCINE) * LIG1 * LIG2
ZIGRSE1 = is_positive(BRSE1) * LIG2
ZIGRFRET = is_positive(COD8YK) * 1 - is_positive(COD8XK) * LIG2
REPCIFSIN = positif_ou_nul(COD7UA + COD7UB + RDFORESTRA - PLAF_FOREST1 * 1 + BOOL_0AM) * SINISFORET + 1 - positif_ou_nul(COD7UA + COD7UB + RDFORESTRA - PLAF_FOREST1 * 1 + BOOL_0AM) * max(0, SINISFORET - PLAF_FOREST1 * 1 + BOOL_0AM - COD7UA - COD7UB - RDFORESTRA) * 1 - V_CNR
NCOMP = max(1, NBACT) * present(RDCOM) * 1 - ART1731BIS + min(max(1, NBACT) * present(RDCOM), NCOMP1731 + 0) * ART1731BIS * 1 - V_CNR
RCEL_NQ = is_positive(CELLIERNQ) * arr(ACELNQ * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGCELHS = is_positive(DCELREPHS) * LIG1 * LIG2
CDISC = arr(BCDIS * TCDIS / 100) * 1 - is_positive(ANNUL2042)
BITAP = BIPTAP + BINTAP
LIGRESTIMO = present(RIMOPPAUANT) + present(RIMOSAUVANT) + present(RESTIMOPPAU) + present(RESTIMOSAUV) + present(RIMOPPAURE) + present(RIMOSAUVRF) + present(COD7SY) + present(COD7SX) * LIG1 * LIG2
XTSB2 = TSBN2
PPENHPTOT = PPENBH1 + PPENBH2 + PPENBH3 + PPENBH4
LIGFIPC = is_positive(DFIPC) * LIG1 * LIG2
REPINVPME3 = max(0, REPSNO2 - max(0, LIM_SOCNOUV2 * 1 + BOOL_0AM - min(REPSNO3, LIM_SOCNOUV2 * 1 + BOOL_0AM))) * 1 - V_CNR
BPRESCOMP01 = max(0, 1 - present(SUBSTITRENTE) * positif_ou_nul(PLAFPRESCOMP - PRESCOMPJUGE) * PRESCOMPJUGE - BPRESCOMP + is_positive(PRESCOMPJUGE - PLAFPRESCOMP) * PLAFPRESCOMP - BPRESCOMP + present(SUBSTITRENTE) * positif_ou_nul(PLAFPRESCOMP - PRESCOMPJUGE) * SUBSTITRENTE - PRESCOMP2000 + is_positive(PRESCOMPJUGE - PLAFPRESCOMP) * arr(PLAFPRESCOMP * SUBSTITRENTE / PRESCOMPJUGE * SUBSTITRENTE - PRESCOMP2000 / SUBSTITRENTE) * 1 - V_CNR)
BASE7UN = min(RDFOREST, PLAF_FOREST * 1 + BOOL_0AM) * 1 - V_CNR
LIGREP7UB = is_positive(REPCIFADSIN) * LIG1 * LIG2
MAJOTAXATARDIF_D1 = MAJOTAXATARDIF_D - MAJOTA17_2TARDIF_D
XBICNPNETP = XBICNPHDP - min(BICDEP, BICDEP1731 + 0) * is_positive(ART1731BIS) + BICDEP * 1 - ART1731BIS
ZIGINT1 = is_positive(RETRSE1) * LIG2
LIGLOGSOC = is_positive(DLOGSOC) * LIG1 * LIG2
RMFN = max(0, RFMIC - MICFR - RFDANT) * 1 - is_positive(ART1731BIS) + max(0, RFMIC - MICFR - DEFRF4BD) * is_positive(ART1731BIS)
RCEL_COM_R = is_positive(CELLIERNP + CELLIERNT) * arr(ACELCOM_R * TX36 / 100) + is_positive(CELLIERNR + CELLIERNS) * arr(ACELCOM_R * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGCELYA = is_positive(DCELREPYA) * LIG1 * LIG2
LIGNMAJLOY4 = TYPE2 * is_positive(NMAJLOY4)
PERP_NONV = is_positive(1 - is_positive(PERP_INDV) * 1 - is_positive(PRBRV + PALIV) * 1 - is_positive(PERP_COTV) * 1 - is_positive(PERP_INDC) * is_positive(PRBRC + PALIC))
LIGCONGA = is_positive(CRECONGAGRI) * LIG1 * LIG2
EXTS2 = TSBN2 + _2TSN2
LIG30 = is_positive(RFMIC) * 1 - is_positive(IPVLOC) * LIG1 * LIG2
PLOCNETC = PLOCCGAC + PLOCC
LIGHONO = is_positive(HONODECV + HONODECC + HONODECP) * LIG1 * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) * LIG2
HONONET = HONONETV + HONONETC + HONONETP
PPE_RTA2 = PPESAL2
TPLRC = min(MIN_DEDPR, TEXPRC)
LIGREPDOMOUT = is_positive(REPOMENTR3) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
ZIG_REMPLACE = is_positive(1 - is_positive(20 - V_NOTRAIT) * is_positive(V_ANREV - V_0AX) * is_positive(V_ANREV - V_0AZ) * is_positive(V_ANREV - V_0AY) + is_positive(V_NOTRAIT - 20)) * LIG2
LIGRVG = is_positive(CODRVG) * LIG1 * LIG2
LIGREGCI = is_positive(present(REGCI) + present(COD8XY)) * is_positive(CICHR) * LIG1 * LIG2
PPEPEXOV = is_positive(PPE_AVRPRO1V + 0) + is_positive(SALEXTV + 0) + 4 * is_positive(PPENJV + PPEACV + 0) + 8 * is_positive(PPEXTV + PPETPV + 0)
BSN2 = min(COD7CQ + COD7CR + RDSNO, LIM_TITPRISE * 1 + BOOL_0AM - BSN1)
RDRCM1NEGPLAFAPS = min(COD2FA, abs(RDRCM1APS))
RCEL_HL_R = is_positive(CELLIERHL) * arr(ACELHL_R * TX25 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RESIMEUB6 = arr(arr(min(DRESIMEUB, PLAF_RESINEUV) / 9) * TX25 / 100)
ASOCREPR = BSOCREP * 1 - ART1731BIS + min(BSOCREP, max(ASOCREPR_P + ASOCREPRP2, ASOCREPR1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
LIGDUFLOGIH = is_positive(DDUFLOGIH) * LIG1 * LIG2
RESIVIEU2 = arr(arr(ACODIM / 9) * TX25 / 100)
LIGCELNQ = is_positive(DCELNQ) * LIG1 * LIG2
_2RCMRNTNC = REVPEA - _2RCMRTNC
LIGPATNAT4 = LIG1 * LIG2 * is_positive(PATNAT4) + null(PATNAT4) * is_positive(V_NOTRAIT - 20)
LIGPVIMPOS = is_positive(PVIMPOS) * LIG1 * LIG2
BINNC = BINTAC + BINHTAC
LIGPINEL = LIGPIQABCD
BSNCL = min(REPSNO3, LIM_SOCNOUV2 * 1 + BOOL_0AM)
BRSE8SB = COD8SB * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
LIGLOCRES3 = is_positive(RIVL3RES) * LIG1
ASURV = BSURV * 1 - ART1731BIS + min(BSURV, max(ASURV_P + ASURVP2, ASURV1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
PPE_DEBJJMMMM = PPE_DATE_DEB + 1010000 + V_ANREV * null(PPE_DATE_DEB + 0)
LIGBNCCREA = is_positive(BNCCREAV + BNCCREAC + BNCCREAP) * LIG1 * LIG2
RESIMEUB1 = arr(arr(min(DRESIMEUB, PLAF_RESINEUV) / 9) * TX25 / 100)
MEUBLERET = arr(DMEUBLE * TX25 / 100) * 1 - V_CNR
RIV2012CEL1 = RCEL_2012_R * is_positive(ACEL2012_R)
P10MINSC = max(min(PERPSALC, PDEDMINC), PDFNC)
MAJOISFTARDIF_D1 = MAJOISFTARDIF_D - MAJOISF17TARDIF_D
LIGPCAPNET = is_positive(present(PCAPTAXV) + present(PCAPTAXC) * INDREV1A8IR + PCAPANTAFF) * 1 - is_positive(ANNUL2042 + 0) * LIG1
LIGDFACC = is_positive(20 - V_NOTRAIT + 0) * is_positive(DFACC) + 1 - is_positive(20 - V_NOTRAIT + 0) * present(DFACC) * 1 - is_positive(ANNUL2042) * LIG1
TMIB_AUTOAVP = TMIB_AVP - TMIB_VENTAP
PPESALCTOT = PPE_SALAVDEFC
LIGIREXIT = is_positive(PVIMPOS + CODRWB) * is_positive(PVSURSI + CODRWA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
XBICNPNETV = XBICNPHDV - min(BICDEV, BICDEV1731 + 0) * is_positive(ART1731BIS) + BICDEV * 1 - ART1731BIS
RDSNAC = RDSCAC - CIRDSAC
ACODJU = min(PLAF_RESINEUV - ACODJT, LOCMEUBJU) * 1 - V_CNR
PDEDMINV = DEDMINV
LIGCELFD = is_positive(DCELFD) * LIG1 * LIG2
TMIB_ABPV = max(0, arr(TMIB_APV * MIBPRESV + AUTOBICPV / TMIB_TPRESV))
TSPEBASABP = TSPETOTP
LIGCELHZ = is_positive(DCELREPHZ) * LIG1 * LIG2
DFCE = min(0, RFCD - RFDORD) * 1 - is_positive(ART1731BIS) + min(0, RFCD - DEFRF4BB) * is_positive(ART1731BIS)
MAJOTAXATARDIF_R1 = MAJOTAXATARDIF_R - MAJOTA17_2TARDIF_R
AILMIB_R = DILMIB * 1 - V_CNR
LIG1780 = is_positive(RDCOM + NBACT) * LIG1 * LIG2
LIGCELJBGL = is_positive(DCELJBGL) * LIG1 * LIG2
RLOCENT_1 = 1 - V_INDTEO * sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25, RENT26, RENT27, RENT28, RENT29, RENT30, RENT31, RENT32, RENT33, RENT34, RENT35, RENT36]) + V_INDTEO * arr(V_RENT07 + V_RENT31 * 5263 / 10000) + arr(V_RENT01 + V_RENT25 * 625 / 1000) + arr(V_RENT09 + V_RENT33 * 5263 / 10000) + arr(V_RENT03 + V_RENT27 * 625 / 1000) + arr(V_RENT08 + V_RENT32 * 5263 / 10000) + arr(V_RENT02 + V_RENT26 * 625 / 1000) + arr(V_RENT10 + V_RENT34 * 5263 / 10000) + arr(V_RENT04 + V_RENT28 * 625 / 1000) + arr(V_RENT11 + V_RENT35 * 5263 / 10000) + arr(V_RENT05 + V_RENT29 * 625 / 1000) + arr(V_RENT12 + V_RENT36 * 5263 / 10000) + arr(V_RENT06 + V_RENT30 * 625 / 1000) * 1 - V_CNR
TEXTSC = TTSBNC + BPCOSAC + GLDGRATC + T2TSNC
LIGMXBINP = is_positive(MIBNPEXV + MIBNPEXC + MIBNPEXP) * LIG1 * LIG2
TMIB_APC = min(TMIB_TPRESC, max(MIN_MBIC, arr(TMIB_TPRESC * TX_MIBPRES / 100)))
PLAQAR = arr(PLAF_DEMIPART / 2 * NBMIQAR + NB0BTMIQAR + NB0BTQAR + V_0CI + PLAF_COMPPART / 2 * NB0BT2MIQAR)
LIGRDUEKL = is_positive(RIVDUEKL) * LIG1 * LIG2
CSGDEDAUTRE = is_positive(ABDETPLUS + 0) * arr(PVBARPS - ABDETPLUS - COD3UA + 0 * TX051 / 100)
TPMIB_NETPC = MIBPRESC + AUTOBICPC - TPMIB_APC
LIGCELLN = is_positive(DCELRREDLN) * LIG1 * LIG2
TSPEBASABV = TSPETOTV
REPINVRES = RIVL1RES + RIVL2RES + RIVL3RES + RIVL4RES + RIVL5RES
ZIGPREREV = is_positive(PREREV) * 1 - V_CNR * LIG1 * LIG2
RCODOU1 = arr(ACODOU * TX11 / 100)
ZIGRFDEP = is_positive(COD8XK) * 1 - is_positive(COD8YK) * LIG2
TPMIB_NETVP = MIBVENP + AUTOBICVP - TPMIB_AVP
REPLOCIE3 = arr(arr(ACODIE / 9) * TX18 / 100)
LIGCELYK = is_positive(DCELREPYK) * LIG1 * LIG2
REPCELFD = 3 * RIVCELFD1 + RIVCELFD4
LIGCOD3SG = is_positive(COD3SG) * LIG1 * LIG2
TTPS104 = arr(TTSB4 * TX_DEDFORFTS / 100)
RISFFCPI_1 = max(0, min(18000 - RISFFIP_1, AISFFCPI))
_4DEFBACREC = is_positive(_4BACREC) * BACDEC * 1 - is_positive(ART1731BIS * PREM8_11) - DEFBACREC
TXCVN = COPETO + TXINT
REPIQBD = RIVPIQBD * 7 + RIVPIQBD8
MIB_AVP = min(MIB_TVENP, max(MIN_MBIC, arr(MIB_TVENP * TX_MIBVEN / 100)))
NPLOCNETPAC = NPLOCCGAPAC + NPLOCPAC
LIGINTER = is_positive(CREINTERESSE) * LIG1 * LIG2
RCEL_JBGL_R = is_positive(CELLIERJB) * arr(ACELJBGL_R * TX22 / 100) + is_positive(CELLIERJG) * arr(ACELJBGL_R * TX13 / 100) + is_positive(CELLIERJL) * arr(ACELJBGL_R * TX36 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPINVPMECU = max(0, PETIPRISE - max(0, LIM_SOCNOUV2 * 1 + BOOL_0AM - min(REPSNO3, LIM_SOCNOUV2 * 1 + BOOL_0AM) + REPSNO2 + REPSNO1 + REPSNON)) * 1 - V_CNR
REPFOREST2 = positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * REPFOR1 + 1 - positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * max(0, REPFOR1 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R - REPSINFOR - VARD - REPSINFOR1)) * 1 - V_CNR
LIGCODOU = is_positive(DCODOU) * LIG1 * LIG2
LIGIREXI19 = is_positive(IREXITI19) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
TR6_ISF = arr(max(0, DISFBASE - LIM_TR5_ISF) * TX_TR6_ISF / 1000)
NPLOCNETC = NPLOCCGAC + NPLOCC
SPEABP = arr(max(MIN_SPEBNC, SPEBASABP * SPETXAB / 100) * positif_ou_nul(SPETOTP - MIN_SPEBNC)) + arr(min(MIN_SPEBNC, SPEBASABP) * is_positive(MIN_SPEBNC - SPETOTP))
RDRCM1BISAPS = 1 - is_positive(RDRCM1APS) * RDRCM1NEGPLAFAPS * -1 + positif_ou_nul(RDRCM1APS) * RDRCM1APS
LIGABIMPPV = is_positive(ABIMPPV) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
MIB_TTC = MIB_TVENC + MIB_TPRESC
SFM = ((1 if (V_0AF + 0 == 1) else 2) if (V_0AP + 0 == 1) else (3 if (V_0AF + 0 == 1) else (4 if (V_0AS + 0 == 1 and AGV >= LIM_AGE_LET_S or AGC >= LIM_AGE_LET_S) else 0))) if (BOOL_0AM == 1) else 0
NPLOCSP = arr(NPLOCPAC * LOCNPPAC / LOCNPPAC + LOCGITHCP) * is_positive(LOCNPPAC) + min(0, NPLOCPAC) * 1 - is_positive(LOCNPPAC)
LIGREDAGRI = is_positive(DDIFAGRI) * LIG1 * LIG2
LIGXBP = is_positive(XBNV + XBNC + XBNP) * LIG1 * LIG2
AILMOB = DILMOB * 1 - V_CNR
DFOREST = FORTRA + RDFOREST
TMIB_AUTOAVV = TMIB_AVV - TMIB_VENTAV
RRESINEUV3 = arr(arr(ACODIL / 9) * TX20 / 100)
LIGTXPOSYT = is_positive(RMOND + DEFZU - DMOND) * is_positive(IPTXMO) * is_positive(DEFRIMOND) * LIG1 * LIG2
RISFPMED_1 = min(45000, AISFPMED)
PPE_RTA3 = PPESAL3
LIGXTSA = is_positive(present(TSASSUV) + present(TSASSUC)) * LIG1 * LIG2
LIGCOMP01 = is_positive(BPRESCOMP01) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BAH = min(RVCURE, LIM_CURE) + min(RCCURE, LIM_CURE) * 1 - V_CNR
ACODIG = min(PLAF_RESINEUV - ACODIE - ACODIF - ACODID, LOCMEUBIG) * 1 - V_CNR
LIGDEPCHO = DIFF7WY * is_positive(DEPCHO) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCMEXCREF = max(0, TRCMRABD + TRCMRTNC) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
RIV2012CEL2 = RIV2012CEL1
TMIB_ABVV = max(0, arr(TMIB_AVV * MIBVENV + AUTOBICVV / TMIB_TVENV))
NPLOCCGASC = arr(NPLOCCGAC * LOCNPCGAC / LOCNPCGAC + LOCGITCC) * present(LOCNPCGAC) + min(0, NPLOCCGAC) * 1 - present(LOCNPCGAC)
TMIB_APP = min(TMIB_TPRESP, max(MIN_MBIC, arr(TMIB_TPRESP * TX_MIBPRES / 100)))
LIGCDIS = is_positive(GSALV + GSALC) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
GLOBASE = CGLOA - COD8YL
TXREGV = COPETO + TXINT
LIGCELJOQR = is_positive(DCELJOQR) * LIG1 * LIG2
TMIB_ABNPPV = max(0, arr(TMIB_APV * MIBNPPRESV / TMIB_TPRESV)) * present(MIBMEUV) + TMIB_APV - TMIB_ABPV * 1 - present(MIBMEUV)
LIGXBINP = is_positive(XBINPV + XBINPC + XBINPP) * LIG1 * LIG2
REVTS = sum([TSNN2TSV, TSNN2TSC, TSNN2TS1, TSNN2TS2, TSNN2TS3, TSNN2TS4]) * 1 - INDTEFF + sum([TTSNN2TSV, TTSNN2TSC, TTSNN2TS1, TTSNN2TS2, TTSNN2TS3, TTSNN2TS4]) * INDTEFF
TAPBC = max(TPLRC, TEXPRC * TX_DEDPER / 100)
DIDOMPRO = RIDOMPRO * 1 - ART1731BIS + min(RIDOMPRO, max(DIDOMPRO_P + DIDOMPROP2, DIDOMPRO1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
LIGSALDOM = present(CREAIDE) * LIG1 * LIG2
PPE_BOOL_SIFC = 1 - BOOL_0AM * 1 - is_positive(V_0AV) * is_positive(V_0AZ)
XTSB1 = TSBN1
NSM = 1 + BOOL_0AM + V_0AV * min(BOOL_0AZ + EAC + V_0CH + V_0CR, 1) + V_0AV * BOOL_0AZ * V_0AW * 1 - V_0AP * 1 - V_0AF / 2
DEFBACREV = is_positive(_4BACREV) * arr(BACDEV * 1 - is_positive(ART1731BIS * PREM8_11) * BACREV / BARREVAV) + 1 - is_positive(_4BACREV) * BACDEV * 1 - is_positive(ART1731BIS * PREM8_11)
RESIMEUB8 = arr(min(DRESIMEUB, PLAF_RESINEUV) * TX25 / 100) - RESIMEUB1 - RESIMEUB2 - RESIMEUB3 - RESIMEUB4 - RESIMEUB5 - RESIMEUB6 - RESIMEUB7 - RESIMEUB7
LIGELURAS = is_positive(ELURASV) * LIG1 * LIG2
TSALP = TSBN1 + TSBN2 + TSBN3 + TSBN4
LIGTXMOYNEG = is_positive(DMOND) * 1 - is_positive(DEFRIMOND) * LIG1 * LIG2
BCIFORETUA = max(0, min(COD7UA, max(0, PLAF_FOREST1 * 1 + BOOL_0AM))) * 1 - V_CNR
TXC = COPETO + TXINT
TTPS10V = arr(TTSBV * TX_DEDFORFTS / 100)
LIGCEL2012 = is_positive(DCEL2012) * LIG1 * LIG2
TDFNV = min(PLAF_DEDFORFTS, TTPS10V)
XBICIMPC = XBICHDC + XBICNPHDC
LIGLOCRES1 = is_positive(RIVL1RES) * LIG1
LIGPV3VG = is_positive(PVBAR3VG) * 1 - is_positive(IPVLOC) * LIG1 * LIG2 * is_positive(INDREV1A8IR)
LIGLOCNEUF2 = is_positive(RIVL2) * LIG1
INDRSE3X = is_positive(CS_DEG) * is_positive(BRSE3) * is_positive(INDCTX)
EXTS4 = TSBN4 + _2TSN4
PPE_FINJJMMMM = PPE_DATE_FIN + 30120000 + V_ANREV * null(PPE_DATE_FIN + 0)
RETCODJT = arr(arr(ACODJT / 9) * TX11 / 100)
RFCF = max(0, RFCE - RFDHIS * 1 - is_positive(PREM8_11))
LIGRCMABT = is_positive(present(RCMABD) + present(RCMTNC) + present(RCMHAD) + present(RCMHAB) + present(RCMAV) + present(REGPRIV) + present(RCMFR) + present(DEFRCM) + present(DEFRCM2) + present(DEFRCM3) + present(DEFRCM4) + present(DEFRCM5) + present(DEFRCM6)) * 1 - is_positive(IPVLOC) * LIG1 * LIG2 * is_positive(INDREV1A8IR)
LIGCELGJ = is_positive(DCELREPGJ) * LIG1 * LIG2
LIGBAPERP = is_positive(BAPERPV + BAPERPC + BAPERPP + BANOCGAV + BANOCGAC + BANOCGAP) * LIG1 * LIG2
LIGRDUFLOTOT = LIGRDUEKL + LIGRDUGIH
RIDOMPROE3 = RIDOMPROE3_1 * 1 - ART1731BIS + min(RIDOMPROE3_1, max(RIDOMPROE3_P + RIDOMPROE3P2, RIDOMPROE31731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
RESIVIEU3 = arr(arr(ACODIM / 9) * TX25 / 100)
LIGXBA = is_positive(XBAV + XBAC + XBAP) * LIG1 * LIG2
AREPMEU = DREPMEU * 1 - ART1731BIS + min(DREPMEU, max(AREPMEU_P + AREPMEUP2, AREPMEU1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
LIGSPDREPNPP = is_positive(SPEDREPNPP) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
BGEPAHA = min(RDEQPAHA, P2GE) * 1 - V_CNR
NPLOCNETV = NPLOCCGAV + NPLOCV
LIGCELYB = is_positive(DCELREPYB) * LIG1 * LIG2
ACREATHANDI = DCREATHANDI * 1 - ART1731BIS + min(DCREATHANDI, max(ACREATHANDI_P + ACREATHANDIP2, ACREATHANDI1731) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
RCREATEURHANDI = CONVHAND / 2 * PLAF_CRENTRH * 1 - V_CNR
CDIS = CDISC
LIGCODJTJU = is_positive(DCODJTJU) * LIG1 * LIG2
APRETUD = max(min(PRETUD, LIM_PRETUD) + min(PRETUDANT, LIM_PRETUD * CASEPRETUD), 0) * 1 - V_CNR
LIGPV3VE = is_positive(PVBAR3VE) * 1 - is_positive(IPVLOC) * LIG1 * LIG2 * is_positive(INDREV1A8IR)
LIGCOTFOR = is_positive(DCOTFOR) * LIG1 * LIG2
AGREPAPER = PALIV + PALIC + PALIP + PENSALV + PENSALC + PENSALP
TEXSPBC = TEXTSC + TEXPRC
NOCEPIMPC = is_positive(ANOVEP - DNOCEPC * 1 - is_positive(ART1731BIS * PREM8_11)) * arr(ANOVEP - DNOCEPC * 1 - is_positive(ART1731BIS * PREM8_11) * MAJREV) + positif_ou_nul(DNOCEPC * 1 - is_positive(ART1731BIS * PREM8_11) - ANOVEP) * ANOVEP - DNOCEPC * 1 - is_positive(ART1731BIS * PREM8_11) + BNNAAC
TXINTISF = max(0, INTANISF - V_ANREV + 1 * 12 + INTMSISF - 6) * TXMOISRETARD2 * present(MOISAN_ISF)
ACODIW = min(PLAF_RESINEUV - ACODIM, RESIVIANT) * 1 - V_CNR
PLR3 = min(MIN_DEDPR, EXPR3)
MAJOLOYTARDIF_D1 = MAJOLOYTARDIF_D - MAJOLO17_2TARDIF_D
PTPS10V = arr(PERPSALV * TX_DEDFORFTS / 100)
LIGSURIMP = is_positive(SURIMP) * LIG1 * LIG2
LIGRCMSOC = is_positive(RCMSOC) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RLOCIDFG7 = arr(arr(ACODID / 9) * TX11 / 100) + arr(arr(ACODIF / 9) * TX18 / 100) + arr(arr(ACODIG / 9) * TX11 / 100)
RSE8SB = arr(BRSE8SB * TXTX / 100) * 1 - is_positive(ANNUL2042)
MIB_1AV = max(0, MIB_P1AV + MIB_NP1AV)
RIVCELCOM1 = RCEL_COM_R * is_positive(ACELCOM_R)
PLOCNETF = PLOCNETV + PLOCNETC + PLOCNETPAC
TMIB_NETVV = MIBVENV + AUTOBICVV - TMIB_ABVV
ZIGCDIS = is_positive(BCDIS + V_CDISANT) * LIG2
BAEP = _4BACREP - _4DEFBACREP * positif_ou_nul(BARAP) + 0
REVIBI12P = BIH1P + BIH2P + BI1AP + BI2AP
AILMJI = DILMJI * 1 - ART1731BIS + min(DILMJI, max(AILMJI_P + AILMJIP2, AILMJI1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
TSPEABV = arr(max(MIN_SPEBNC, TSPEBASABV * SPETXAB / 100) * positif_ou_nul(TSPETOTV - MIN_SPEBNC)) + arr(min(MIN_SPEBNC, TSPEBASABV) * is_positive(MIN_SPEBNC - TSPETOTV))
LIGILMIC = is_positive(DILMIC) * LIG1 * LIG2
LIGRCEL2012 = is_positive(RIV2012CEL1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
IND9HI0 = INDCTX23 * null(5 - V_IND_TRAIT) * present(ISFBASE)
LIGLOCRES5 = is_positive(RIVL5RES) * LIG1
BIPNC = BIPTAC + BIHTAC
RCELREP_HZ = is_positive(CELREPHZ) * arr(ACELREPHZ * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RETX = TXINT
XTSB3 = TSBN3
NPLOCSC = arr(NPLOCC * LOCNPC / LOCNPC + LOCGITHCC) * present(LOCNPC) + min(0, NPLOCC) * 1 - is_positive(LOCNPC)
LIGCELYG = is_positive(DCELREPYG) * LIG1 * LIG2
AILMIX = DILMIX * 1 - ART1731BIS + min(DILMIX, max(AILMIX_P + AILMIXP2, AILMIX1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
NPLOCNSV = NPLOCV - NPLOCSV
AREPNPRO = DREPNPRO * 1 - ART1731BIS + min(DREPNPRO, max(APROREP_P + APROREPP2, AREPNPRO1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
ACEL = BCEL_2011 * 1 - ART1731BIS + min(BCEL_2011, max(ACEL_P + ACELP2, ACEL1731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELSOMN) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PPESALVTOT = PPE_SALAVDEFV
BSNCQ = max(0, min(COD7CQ, LIM_TITPRISE * 1 + BOOL_0AM - BSN1))
RCELREP_HT = is_positive(CELREPHT) * arr(ACELREPHT * TX25 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REVALIM = sum([PENALIMV, PENALIMC, PENALIM1, PENALIM2, PENALIM3, PENALIM4]) * 1 - INDTEFF + sum([TPENALIMV, TPENALIMC, TPENALIM1, TPENALIM2, TPENALIM3, TPENALIM4]) * INDTEFF
RDNCP = PVBARPS + PVTAUXPS * 1 - is_positive(IPVLOC)
TBNCTOTABC = arr(TSPEABC * AUTOBNCC / TSPETOTC)
REPSIN = max(0, REPSINFOR - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * 1 - V_CNR
ACOTFOR = ACOTFOR_R * 1 - ART1731BIS + min(ACOTFOR_R, max(ACOTFOR_P + ACOTFORP2, ACOTFOR1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
RINVTPME12 = max(0, COD7CQ - max(0, LIM_TITPRISE * 1 + BOOL_0AM - min(BSNCL + REPSNO2 + REPSNO1 + REPSNON + PETIPRISE, LIM_SOCNOUV2 * 1 + BOOL_0AM))) * 1 - V_CNR
RCODJU2 = arr(arr(ACODJU / 9) * TX11 / 100)
XBICIMPV = XBICHDV + XBICNPHDV
CGLOAAC = CGLOA
TEXTS2 = TTSBN2 + T2TSN2
LIGMIBDREPV = is_positive(MIBDREPV) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
CIGARD = RFG * 1 - is_positive(RE168 + TAX1649)
EXPR4 = PRB4 + _2PRB4 + PEBF4
TMIB_TTC = TMIB_TVENC + TMIB_TPRESC
LIGSPENPNEG = is_positive(SPENETNPF * -1) * 1 - is_positive(present(BNCAABV) + present(BNCAADV) + present(BNCAABC) + present(BNCAADC) + present(BNCAABP) + present(BNCAADP) + present(DNOCEP) + present(ANOVEP) + present(DNOCEPC) + present(ANOPEP) + present(DNOCEPP) + present(ANOCEP) + present(DABNCNP6) + present(DABNCNP5) + present(DABNCNP4) + present(DABNCNP3) + present(DABNCNP2) + present(DABNCNP1)) * LIG2
SPEABPP = arr(SPEABP * BNCPROP / SPETOTP)
RIVCELHLM1 = RCEL_HL_R * is_positive(ACELHL_R) + RCEL_HM_R * is_positive(ACELHM_R)
TMIB_ABNPPLV = TMIB_APV - TMIB_ABPV - TMIB_ABNPPV * present(MIBMEUV)
RCREATEUR = CONVCREA / 2 * PLAF_CRENTR * 1 - V_CNR
AILMPD = DILMPD * 1 - V_CNR
LIGNMAJTAXA4 = TYPE2 * is_positive(NMAJTAXA4)
TMIB_ABPC = max(0, arr(TMIB_APC * MIBPRESC + AUTOBICPC / TMIB_TPRESC))
LIGREPFOR2 = is_positive(REPFOREST2) * LIG1 * LIG2 * 1 - V_CNR
SPEABV = arr(max(MIN_SPEBNC, SPEBASABV * SPETXAB / 100) * positif_ou_nul(SPETOTV - MIN_SPEBNC)) + arr(min(MIN_SPEBNC, SPEBASABV) * is_positive(MIN_SPEBNC - SPETOTV))
MIBNETNPTOT = MIBNETNPVF + MIBNETNPPF + MIB_NETNPCT
RESIVIAN3 = arr(arr(ACODIW / 9) * TX25 / 100)
RCODJT1 = arr(arr(ACODJT / 9) * TX11 / 100)
SPEABPC = arr(SPEABC * BNCPROC / SPETOTC)
LIGCELHR = is_positive(DCELREPHR) * LIG1 * LIG2
BIPNV = BIPTAV + BIHTAV
NPS = is_positive(PAC) * V_0BT * is_positive(2 - NSM) * 0.5
PPESAL1 = PPE_SALAVDEF1 * 1 - PPE_BOOL_SEULPAC
ZIGGLOANR = is_positive(BGLOACNR) * LIG2
MIB_ABVC = max(0, arr(MIB_AVC * MIBVENC / MIB_TVENC))
LIGREDREP = is_positive(DREDREP) * LIG1 * LIG2
ZIGRSE4 = is_positive(BRSE4) * LIG2
REPCIFAD = max(0, COD7UA - PLAF_FOREST1 * 1 + BOOL_0AM) * 1 - V_CNR
BREGV = COD2LA * 1 - V_CNR * 1 - is_positive(present(TAX1649) + present(RE168))
LIGMIBDREPP = is_positive(MIBDREPP) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
PERPBNCMNP = PERP_BOOL * BNCPROEXP + max(0, BNCPROP + AUTOBNCP - max(arr(BNCPROP + AUTOBNCP * SPETXAB / 100), MIN_SPEBNC)) + BNCPROPVP - BNCPMVCTP
IQUOTOT7 = IN57 - IN07
DEFBAHREC = is_positive(_4BAHREC) * arr(BAHDEC * 1 - is_positive(ART1731BIS * PREM8_11) * BAHREC / BARSREVC) + 1 - is_positive(_4BAHREC) * BAHDEC * 1 - is_positive(ART1731BIS * PREM8_11)
MIB_AVV = min(MIB_TVENV, max(MIN_MBIC, arr(MIB_TVENV * TX_MIBVEN / 100)))
LIGILMOD = is_positive(DILMOD) * LIG1 * LIG2
NB2 = 1 + BOOL_0AM + BOOL_0AZ * V_0AV
ZIGGLOA = is_positive(BGLOA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG2
LIG585 = present(PAAP) + present(PAAV) * 1 - is_positive(LIG58) * LIG1 * LIG2
RCODJU4 = arr(arr(ACODJU / 9) * TX11 / 100)
TMIB_AVC = min(TMIB_TVENC, max(MIN_MBIC, arr(TMIB_TVENC * TX_MIBVEN / 100)))
RCMPRIVM = REGPRIVM + _2REGPRIVM
AILMIC = DILMIC * 1 - ART1731BIS + min(DILMIC, max(AILMIC_P + AILMICP2, AILMIC1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
RCEL_NBGL_R = is_positive(CELLIERNB) * arr(ACELNBGL_R * TX25 / 100) + is_positive(CELLIERNG) * arr(ACELNBGL_R * TX15 / 100) + is_positive(CELLIERNL) * arr(ACELNBGL_R * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
CDISAC = CDISC
_1RNC = RCMRNTNC
TEXPR4 = TPRB4 + COD1FH + T2PRB4 + PEBF4
LIGTXNEGYT = 1 - is_positive(LIGTXPOSYT) * positif_ou_nul(DMOND - RMOND - DEFZU) * is_positive(IPTXMO) * is_positive(DEFRIMOND) * LIG1 * LIG2
LIGDUFLOT = LIGDUFI + LIGDUFLOGIH + LIGDUFLOEKL
LIGCELHB = is_positive(DCELREPHB) * LIG1 * LIG2
PERPSALP = PERP_BOOL * TSHALLO1 + ALLO1 + CARTSP1 + REMPLAP1 + max(0, SALEXT1 - COD1CD)
_2RNC = _2RCMRNTNC
AILMOA = DILMOA * 1 - V_CNR
TEXSPBV = TEXTSV + TEXPRV
MIB_ABPC = max(0, arr(MIB_APC * MIBPRESC / MIB_TPRESC))
BRSE8TV = ALLECS * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
EXSPB3 = EXTS3 + EXPR3
LIGCELHJK = is_positive(DCELHJK) * LIG1 * LIG2
RFC = min(RDCOM, PLAF_FRCOMPTA * max(1, NBACT)) * present(RDCOM) * 1 - V_CNR
TMIB_ABPP = max(0, arr(TMIB_APP * MIBPRESP + AUTOBICPP / TMIB_TPRESP))
ACELJOQR_R = positif_ou_nul(CELLIERJO + CELLIERJQ + CELLIERJR) * BCEL_JOQR * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGPV3WB = is_positive(PVBAR3WB) * 1 - is_positive(IPVLOC) * LIG1 * LIG2 * is_positive(INDREV1A8IR)
BRSE8SA = COD8SA * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
REPLOCIE4 = arr(arr(ACODIE / 9) * TX18 / 100)
RESIVIAN5 = arr(arr(ACODIW / 9) * TX25 / 100)
ZIG_RVORIGND = is_positive(CS_RVORIGND + RD_RVORIGND + PS_RVORIGND + IND_ZIGREVORIGIND) * 1 - V_CNR * LIG1 * LIG2
LIGILMJV = is_positive(DILMJV) * LIG1 * LIG2
RDRV = RVBCSG
RIVCELHLM4 = RIVCELHLM1
CS_BPCOS = RDNCP
RETCODIE = arr(arr(ACODIE / 9) * TX18 / 100)
RETCODIF = arr(arr(ACODIF / 9) * TX18 / 100)
RIDOMPROTOT = RIDOMPROE3
BAD2 = min(RVAIDAS, max(0, BADPLAF2 - BADCRE - BAD1))
RDRCM1NEGAPS = min(0, RDRCM1APS)
PLR2 = min(MIN_DEDPR, EXPR2)
BCICAP = min(IPCAPTAXTOT, arr(PRELIBXT - arr(PRELIBXT * TX10 / 100) * T_PCAPTAX / 100))
RINVTPME14 = max(0, RDSNO - max(0, LIM_TITPRISE * 1 + BOOL_0AM - max(0, min(BSNCL + REPSNO2 + REPSNO1 + REPSNON + PETIPRISE, LIM_SOCNOUV2 * 1 + BOOL_0AM) + COD7CQ + COD7CR))) * 1 - V_CNR
XBISP = is_positive(max(0, XBICNETP + max(0, XBICNPNETP))) * BI2AP + BI1AP
AILMOC = DILMOC * 1 - V_CNR
AILMPB = DILMPB * 1 - V_CNR
LIGCELHT = is_positive(DCELREPHT) * LIG1 * LIG2
TIND_10MIN_0V = is_positive(TDEDMINV - TDFNV) * is_positive(TTSBV)
TXGLOA = COPETO + TXINT
TTSBNP = TTSHALLOP + TALLOP
NBFOTH = 1 + BOOL_0AM + V_0CF + V_0CH / 2 + V_0CR + V_0DJ + V_0DN
AILMJW = DILMJW * 1 - ART1731BIS + min(DILMJW, max(AILMJW_P + AILMJWP2, AILMJW1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
RIDOMPROTOT_1 = RIDOMPROE3_1
BDRSE3 = max(0, INDECS - REVCSXD - arr(CSPROVYG / TX062 / 100)) * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
LIGREPPLU = is_positive(REPPLU) * LIG1 * LIG2
RCODJT6 = RCODJT1
PTPS10P = arr(PERPSALP * TX_DEDFORFTS / 100)
LIGCELYL = is_positive(DCELREPYL) * LIG1 * LIG2
TPLRV = min(MIN_DEDPR, TEXPRV)
TEXPR3 = TPRB3 + COD1EH + T2PRB3 + PEBF3
LIGBICAP = is_positive(ABICPDECV + ABICPDECC + ABICPDECP) * LIG1 * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) * LIG2
TEFFBENEFTOT = TSPENET + TXSPENET + TMIBNETVF + TMIBNETNPVF + TMIBNETPF + TMIBNETNPPF * 1 - is_positive(VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS + VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS + IPMOND)
BOOL_V = is_positive(V_0AV + 0) * is_positive(1 - BOOL_0AZ) * 1 - is_positive(PAC + V_0CH + 0) + is_positive(PAC + V_0CH + 0) * 3 - null(EAC + V_0CH + 0)
TMIB_ABVP = max(0, arr(TMIB_AVP * MIBVENP + AUTOBICVP / TMIB_TVENP))
LIGRCELFD = is_positive(RIVCELFD1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RIV2012CEL8 = arr(min(CELSOMJ, LIMCELLIER) * is_positive(CELLIERJM) * TX36 / 100 + min(CELSOMJ, LIMCELLIER) * is_positive(CELLIERJK + CELLIERJN) * TX24 / 100 + min(CELSOMJ, LIMCELLIER) * is_positive(CELLIERJD) * TX22 / 100 + min(CELSOMJ, LIMCELLIER) * is_positive(CELLIERJA + CELLIERJE + CELLIERJH) * TX13 / 100 + min(CELSOMJ, LIMCELLIER) * is_positive(CELLIERJF + CELLIERJJ) * TX6 / 100) - 8 * RIV2012CEL1 * 1 - V_CNR
REVIBI12C = BIH1C + BIH2C + BI1AC + BI2AC
RLOCIDFG6 = arr(arr(ACODID / 9) * TX11 / 100) + arr(arr(ACODIF / 9) * TX18 / 100) + arr(arr(ACODIG / 9) * TX11 / 100)
XBICNPSV = XBICNPNETV + BI2AV
BOOL_PACSFL = 1 - is_positive(PAC + V_0CH + 0)
MIB_ABVV = max(0, arr(MIB_AVV * MIBVENV / MIB_TVENV))
TPLR1 = min(MIN_DEDPR, TEXPR1)
LIGILMJS = is_positive(DILMJS) * LIG1 * LIG2
RIV2012CEL4 = RIV2012CEL1
BINNV = BINTAV + BINHTAV
PIND_10MIN_0C = is_positive(PDEDMINC - PDFNC) * is_positive(PERPSALC)
RCODJU3 = arr(arr(ACODJU / 9) * TX11 / 100)
RFCG = max(0, RFCF - RFDANT) * 1 - is_positive(ART1731BIS) + max(0, RFCF - DEFRF4BD) * is_positive(ART1731BIS)
RDOMSOC1 = RDOMSOC1_1 * 1 - ART1731BIS + min(RDOMSOC1_1, max(RDOMSOC1_P + RDOMSOC1P2, RDOMSOC11731 + 0) * 1 - PREM8_11) * ART1731BIS
NPLOCNSP = NPLOCPAC - NPLOCSP
RIVCELCOM4 = arr(min(CELLIERNP + CELLIERNR + CELLIERNS + CELLIERNT, LIMCELLIER) * is_positive(CELLIERNP + CELLIERNT) * TX36 / 100 + min(CELLIERNP + CELLIERNR + CELLIERNS + CELLIERNT, LIMCELLIER) * is_positive(CELLIERNR + CELLIERNS) * TX40 / 100) - 4 * RIVCELCOM1 * 1 - V_CNR
REPINVPME1 = max(0, REPSNON - max(0, LIM_SOCNOUV2 * 1 + BOOL_0AM - min(REPSNO3, LIM_SOCNOUV2 * 1 + BOOL_0AM) + REPSNO2 + REPSNO1)) * 1 - V_CNR
AILMPC = DILMPC * 1 - V_CNR
BRSE2 = ALLECS + COD8SA * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
BIPNP = BIPTAP + BIHTAP
DEFBAHREP = is_positive(_4BAHREP) * arr(BAHDEP * 1 - is_positive(ART1731BIS * PREM8_11) * BAHREP / BARSREVP) + 1 - is_positive(_4BAHREP) * BAHDEP * 1 - is_positive(ART1731BIS * PREM8_11)
RCEL_HJK = is_positive(CELLIERHJ) * arr(ACELHJK * TX25 / 100) + is_positive(CELLIERHK) * arr(ACELHJK * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BA1 = BA1V + BA1C + BA1P
PERPBNCPNP = PERP_BOOL * BNCEXP + BNCREP - BNCDEP * 1 - is_positive(ART1731BIS) + BNHEXP + BNHREP - BNHDEP * 1 - is_positive(ART1731BIS) + BNCCRP
LIGRSN0 = is_positive(RINVTPME14) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
MREGV = BREGV
RCEL_2011_R = is_positive(CELLIERNA + CELLIERNE) * arr(ACEL_R * TX22 / 100) + is_positive(CELLIERNC + CELLIERND + CELLIERNH) * arr(ACEL_R * TX25 / 100) + is_positive(CELLIERNF + CELLIERNJ) * arr(ACEL_R * TX13 / 100) + is_positive(CELLIERNI) * arr(ACEL_R * TX15 / 100) + is_positive(CELLIERNM + CELLIERNN) * arr(ACEL_R * TX40 / 100) + is_positive(CELLIERNK + CELLIERNO) * arr(ACEL_R * TX36 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
AILMIX_R = DILMIX * 1 - V_CNR
MIBRABC = MIB_ABVC + MIB_ABPC
LIGDEPMOB = is_positive(DIFF7WZ + DIFF7WD) * is_positive(DEPMOB) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NBQAR = NBQAR1 + NBQAR2 + NBQAR3 + NBQAR4 + NBQART
LIGRCELHLM = is_positive(RIVCELHLM1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
ZIGREGV = is_positive(BREGV) * LIG2
AILMJS = DILMJS * 1 - ART1731BIS + min(DILMJS, max(AILMJS_P + AILMJSP2, AILMJS1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
ACEL2012 = BCEL_2012 * 1 - ART1731BIS + min(BCEL_2012, max(ACEL2012_P + ACEL2012P2, ACEL20121731 + 0) * 1 - PREM8_11) * ART1731BIS * positif_ou_nul(CELSOMJ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
CILOYIMP = arr(ALOYIMP * TX_LOYIMP / 100) * 1 - is_positive(RE168 + TAX1649)
LIGILMJX = is_positive(DILMJX) * LIG1 * LIG2
PPE_NBELIGI = PPE_NB_PAC + PPE_NB_PAC_QAR - PPE_NBNONELI
ATEC = is_positive(DTEC) * DTEC
LIGLOCRES2 = is_positive(RIVL2RES) * LIG1
SEUILEXO = SEUIL_EXO1 + SEUIL_EXO2 - SEUIL_EXO1 * positif_ou_nul(max(AGV, AGC) - LIM_AGE_EXO)
XBICNPSP = XBICNPNETP + BI2AP
CITEC = arr(ATEC * TX40 / 100)
TMIB_NETPC = MIBPRESC + AUTOBICPC - TMIB_ABPC
LIGCELGL = is_positive(DCELREPGL) * LIG1 * LIG2
LIGCELHM = is_positive(DCELHM) * LIG1 * LIG2
ACREAT = DCREAT * 1 - ART1731BIS + min(DCREAT, max(ACREAT_P + ACREATP2, ACREAT1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
TEXTS3 = TTSBN3 + T2TSN3
BRSE5 = SALECSG * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - V_CNR
LIGILMPD = is_positive(DILMPD) * LIG1 * LIG2
CIRSE8SB = min(RSE8SB, arr(COD8XJ * TX038 / 100))
RCODJT4 = RCODJT1
BDIFAGRI = min(INTDIFAGRI, LIM_DIFAGRI * 1 + BOOL_0AM) * 1 - V_CNR
ARESIMEUB_1 = arr(min(PLAF_RESINEUV, VIEUMEUB) / 9) * 1 - V_CNR
RCEL_JOQR = is_positive(CELLIERJQ) * arr(ACELJOQR * TX36 / 100) + is_positive(CELLIERJO + CELLIERJR) * arr(ACELJOQR * TX24 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PDFNV = min(PLAF_DEDFORFTS, PTPS10V)
REPLOCIE6 = arr(arr(ACODIE / 9) * TX18 / 100)
BNCNPTOT = SPENETPF + SPENETNPF
AILMJC = DILMJC * 1 - ART1731BIS + min(DILMJC, max(AILMJC_P + AILMJCP2, AILMJC1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
TR4_ISF = arr(max(0, min(DISFBASE, LIM_TR4_ISF) - LIM_TR3_ISF) * TX_TR4_ISF / 100)
EXSPB2 = EXTS2 + EXPR2
LIG_SURSIS = is_positive(LIGPVSURSI + LIGBPTPGJ + LIGIREXITI + LIGIREXI19 + LIGIREXITS + LIGIREXS19 + LIGIREXIT + LIGEXITAX3 + LIGSURIMP) * LIG1 * LIG2
_4DEFBACREV = is_positive(_4BACREV) * BACDEV * 1 - is_positive(ART1731BIS * PREM8_11) - DEFBACREV
RPRESCOMP = arr(BPRESCOMP * TX_PRESCOMP / 100) * 1 - V_CNR
LIGRESIMEUB = is_positive(DRESIMEUB) * LIG1 * LIG2
RCEL_FD_R = is_positive(CELLIERFD) * arr(ACELFD_R * TX24 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DOMAVTD = arr(BN1 + SPEPV + BI12F + BA1 * TX05 / 100) * is_positive(V_EAD)
LIGILMIH = is_positive(DILMIH) * LIG1 * LIG2
DEFBAHREV = is_positive(_4BAHREV) * arr(BAHDEV * 1 - is_positive(ART1731BIS * PREM8_11) * BAHREV / BARSREVV) + 1 - is_positive(_4BAHREV) * BAHDEV * 1 - is_positive(ART1731BIS * PREM8_11)
LIG2051 = 1 - is_positive(20 - V_NOTRAIT) * is_positive(RECUMBIS)
EXPRV = PRBV + _2PRBV + PEBFV
PDFNP = min(PLAF_DEDFORFTS, PTPS10P)
RDRTF = CSRTF
ATOUHOTR = DTOUHOTR * 1 - ART1731BIS + min(DTOUHOTR, max(ATOUHOTR_P + ATOUHOTRP2, ATOUHOTR1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
LIGLOCIDEFG = is_positive(DLOCIDEFG) * LIG1 * LIG2
RRESINEUV7 = arr(arr(ACODIL / 9) * TX20 / 100)
TEXSPB3 = TEXTS3 + TEXPR3
QF026 = arr(RB06) / NB2
APROREP = DPROREP * 1 - ART1731BIS + min(DPROREP, max(APROREP_P + APROREPP2, APROREP1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
RCODJT5 = RCODJT1
ANOUV = BSN1 + BSN2 * 1 - ART1731BIS + min(BSN1 + BSN2, max(ANOUV_P + ANOUVP2, ANOUV1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
REPLOCIE7 = arr(arr(ACODIE / 9) * TX18 / 100)
PPESAL4 = PPE_SALAVDEF4 * 1 - PPE_BOOL_SEULPAC
RDRF = max(0, RFCF + RFMIC - MICFR - RFDANT) * 1 - is_positive(ART1731BIS) + max(0, RFCF + RFMIC - MICFR + DEFRF4BC) * is_positive(ART1731BIS)
BITTAP = BITAP + BI12AP
LIG1100 = is_positive(T2RV) * 1 - is_positive(IPVLOC)
RESIVIEU1 = arr(arr(ACODIM / 9) * TX25 / 100)
RETCODID = arr(arr(ACODID / 9) * TX11 / 100)
TBICPABV = arr(TMIB_ABVV * AUTOBICVV / MIBVENV + AUTOBICVV + TMIB_ABPV * AUTOBICPV / MIBPRESV + AUTOBICPV)
LIGCELGS = is_positive(DCELREPGS) * LIG1 * LIG2
DFA = min(CHRFAC, RPREC * LIM_FRACC) * 1 - V_CNR * 1 - is_positive(RE168 + TAX1649)
LIGCITEC = is_positive(DTEC) * LIG1 * LIG2
RETCODIG = arr(arr(ACODIG / 9) * TX11 / 100)
NPA = PAC - 0.5 * min(PAC, 2)
RIVCELHLM3 = RIVCELHLM1
BAMC = arr(BAHREC - DEFBAHREC * MAJREV) * positif_ou_nul(BARSC) + BARSC * 1 - is_positive(BARSC)
TOTPAC = PPE_NB_PAC + PPE_NB_PAC_QAR
XEXTSC = XTSBC + CARTSC + REMPLAC
AVPLAF13B = max(0, min(AUBAINE13A, LIM10000) + AUBAINE13B - LIM18000) * is_positive(V_DIFTEOREEL)
PRN = 1 - is_positive(DEFTS) * sum([PRNV, PRNC, PRN1, PRN2, PRN3, PRN4]) + min(0, sum([TSNV, TSNC, TSN1, TSN2, TSN3, TSN4])) * 1 - is_positive(APPLI_COLBERT)
TSPEABPC = arr(TSPEABC * BNCPROC + AUTOBNCC / TSPETOTC)
EXTS1 = TSBN1 + _2TSN1
ATOURREP = DTOURREP * 1 - ART1731BIS + min(DTOURREP, max(ATOURREP_P + ATOURREPP2, ATOURREP1731 + 0) * 1 - PREM8_11) * ART1731BIS
RESIVIAN6 = arr(arr(ACODIW / 9) * TX25 / 100)
TXTO = COPETO + TXINT
TBNCPABC = arr(TSPEABPC * AUTOBNCC / BNCPROC + AUTOBNCC)
RFCFPS = RFCEPS - RFDHIS * 1 - is_positive(PREM8_11)
RCEL_FABC_R = is_positive(CELLIERFA) * arr(ACELFABC_R * TX13 / 100) + is_positive(CELLIERFB) * arr(ACELFABC_R * TX6 / 100) + is_positive(CELLIERFC) * arr(ACELFABC_R * TX24 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RESIVIAN1 = arr(arr(ACODIW / 9) * TX25 / 100)
BNRV = BNNSV + BNNAV
PERP_NONC = BOOL_0AM * is_positive(1 - is_positive(PERP_INDC) * 1 - is_positive(PRBRC + PALIC) * 1 - is_positive(PERP_COTC) * 1 - is_positive(PERP_INDV) * is_positive(PRBRV + PALIV))
ABNCPNETC = AUTOBNCC - TBNCPABC
RIVCELHNO6 = RIVCELHNO1
MIB_APP = min(MIB_TPRESP, max(MIN_MBIC, arr(MIB_TPRESP * TX_MIBPRES / 100)))
LIG81 = is_positive(present(RDDOUP) + present(DONAUTRE) + present(REPDON03) + present(REPDON04) + present(REPDON05) + present(REPDON06) + present(REPDON07) + present(COD7UH) + is_positive(EXCEDANTA)) * LIG1 * LIG2
ARESIVIEU_1 = arr(ACODIM / 9) + arr(ACODIW / 9)
PPE_BOOL_MIN3 = positif_ou_nul(PPE_RTA3 - PPELIMRPB) * 1 - PPE_BOOL_NADA3
XBICSV = XBICNETV + BA1AV
QF025 = arr(RB05) / NB2
RSE4 = arr(BRSE8TX * TXTX / 100) * 1 - is_positive(ANNUL2042) + arr(BRSE8SB * TXTX / 100) * 1 - is_positive(ANNUL2042)
REPFORSIN3 = positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 + REPFOR1 + REPSINFOR2 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * REPSINFOR3 + 1 - positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 + REPFOR1 + REPSINFOR2 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * max(0, REPSINFOR3 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R - REPSINFOR - VARD - REPSINFOR1 - REPFOR1 - REPSINFOR2)) * 1 - V_CNR
ARESIMEUB = ARESIMEUB_1 * 1 - ART1731BIS + min(ARESIMEUB_1, max(ARESIMEUB_P + ARESIMEUBP2, ARESIMEUB1731 + 0) * 1 - PREM8_11) * ART1731BIS
MAJOISFTARDIF_R1 = MAJOISFTARDIF_R - MAJOISF17TARDIF_R
NPLOCCGANSP = NPLOCCGAPAC - NPLOCCGASP
TEXSPB1 = TEXTS1 + TEXPR1
INDRSE4X = is_positive(CS_DEG) * is_positive(BRSE4) * is_positive(INDCTX)
MIB_1AP = max(0, MIB_P1AP + MIB_NP1AP)
LIGMIBDREPC = is_positive(MIBDREPC) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
LIGREP7UP = is_positive(REPCIF) * LIG1 * LIG2
PPE_NBMAJO = positif_ou_nul(PPE_NB_PAC - PPE_NBELIGI) * PPE_NBELIGI + 1 - positif_ou_nul(PPE_NB_PAC - PPE_NBELIGI) * PPE_NB_PAC
AILMIZ_R = DILMIZ * 1 - V_CNR
PERP_NONP = PERP_BOOL * is_positive(PERP_NONC + PERP_NONV)
RRESINEUV6 = arr(arr(ACODIL / 9) * TX20 / 100)
TR5_ISF = arr(max(0, min(DISFBASE, LIM_TR5_ISF) - LIM_TR4_ISF) * TX_TR5_ISF / 10000)
CIRSE8TX = min(RSE8TX, arr(REVCSXE * TX038 / 100))
TSQVO = _2TSNV + CODDAJ + CODEAJ
RSE1 = arr(BRSE1 * TXTQ / 100) * 1 - is_positive(ANNUL2042)
RLOCENT = RLOCENT_1 * 1 - ART1731BIS + min(RLOCENT_1, max(RLOCENT_P + RLOCENTP2, RLOCENT1731 + 0) * 1 - PREM8_11) * ART1731BIS
RIV2012CEL6 = RIV2012CEL1
LIGSINFOR3 = is_positive(REPFORSIN3) * LIG1 * LIG2
RTNC = RCMRNTNC + _2RCMRNTNC
BAD = BAD1 + BAD2
ACELJP_R = positif_ou_nul(CELLIERJP) * BCEL_JP * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TBICPROVP = max(0, arr(TMIB_ABVP * AUTOBICVP / MIBVENP + AUTOBICVP + TMIB_ABPP * AUTOBICPP / MIBPRESP + AUTOBICPP))
XBICNPNETC = XBICNPHDC - min(BICDEC, BICDEC1731 + 0) * is_positive(ART1731BIS) + BICDEC * 1 - ART1731BIS
LIGRCELFABC = is_positive(RIVCELFABC1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RSE8TV = arr(BRSE8TV * TXTV / 100) * 1 - is_positive(ANNUL2042)
RFCFAPS = max(0, RFCEAPS - RFDHIS * 1 - is_positive(PREM8_11))
LIGSPEDREPV = is_positive(SPEDREPV) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
DOMITPG = arr(BN1 + SPEPV + BI12F + BA1) * TX09 / 100 * is_positive(V_EAG)
MIB_ABPV = max(0, arr(MIB_APV * MIBPRESV / MIB_TPRESV))
TIND_APBC = positif_ou_nul(TPLRC - TEXPRC * TX_DEDPER / 100)
BIPTTAP = BIPTAP + BI1AP
RIVCELCOM3 = RIVCELCOM1
REVIBI12V = BIH1V + BIH2V + BI1AV + BI2AV
REVTSREMP = sum([TSNN2REMPV, TSNN2REMPC, TSNN2REMP1, TSNN2REMP2, TSNN2REMP3, TSNN2REMP4]) * 1 - INDTEFF + sum([TTSNN2REMPV, TTSNN2REMPC, TTSNN2REMP1, TTSNN2REMP2, TTSNN2REMP3, TTSNN2REMP4]) * INDTEFF
REPLOCIE1 = arr(arr(ACODIE / 9) * TX18 / 100)
RCEL_FD = is_positive(CELLIERFD) * arr(ACELFD * TX24 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PLR1 = min(MIN_DEDPR, EXPR1)
RIVCELHNO7 = RIVCELHNO1
RIVCELNQ1 = RCEL_NQ_R * is_positive(ACELNQ_R)
MIB_TTV = MIB_TVENV + MIB_TPRESV
RCEL_COM = is_positive(CELLIERNP + CELLIERNT) * arr(ACELCOM * TX36 / 100) + is_positive(CELLIERNR + CELLIERNS) * arr(ACELCOM * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
BPLIB = min(RCMLIB, max(0, ABTAV - RAVC)) * 1 - V_CNR
LIGREDMEUB = is_positive(DREDMEUB) * LIG1 * LIG2
TMIB_AUTOAPV = TMIB_APV - TMIB_PRESAV
REPINV = RIVL1 + RIVL2 + RIVL3 + RIVL4 + RIVL5 + RIVL6
LIGPME1 = is_positive(REPINVPME1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RIVCELHLM8 = arr(min(CELLIERHL + CELLIERHM + 0, LIMCELLIER) * is_positive(CELLIERHL) * TX25 / 100 + min(CELLIERHL + CELLIERHM + 0, LIMCELLIER) * is_positive(CELLIERHM) * TX40 / 100) - 8 * RIVCELHLM1 * 1 - V_CNR
EXTSC = TSBNC + BPCOSAC + GLDGRATC + _2TSNC
LIGCELGU = is_positive(DCELREPGU) * LIG1 * LIG2
RCEL_HL = is_positive(CELLIERHL) * arr(ACELHL * TX25 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGRPINELTOT = LIGRPIQBD + LIGRPIQAC
REPNIS = positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 + REPFOR1 + REPSINFOR2 + REPFOR2 + REPSINFOR3 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * REPSINFOR4 + 1 - positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 + REPFOR1 + REPSINFOR2 + REPFOR2 + REPSINFOR3 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * max(0, REPSINFOR4 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R - REPSINFOR - VARD - REPSINFOR1 - REPFOR1 - REPSINFOR2 - REPFOR2 - REPSINFOR3)) * 1 - V_CNR
TSPEABNPC = TSPEABC - TSPEABPC
SFCD2 = is_positive(PAC + V_0CH) * is_positive(V_0AC + V_0AD + null(2 - BOOL_V)) * is_positive(V_0AP + 0) * 10 * is_positive(V_0BT + 0) * 1 - is_positive(V_0AV) + 2 * is_positive(V_0AV) + 2 * 1 - is_positive(V_0AV) * 1 - is_positive(V_0BT + 0) + 1 - is_positive(V_0AP + 0) * 11 * is_positive(V_0BT + 0) * 1 - is_positive(V_0AV + 0)
MAJOIRTARDIF_D1 = MAJOIRTARDIF_D - MAJOIR17_2TARDIF_D
RIVCELFABC8 = arr(min(CELLIERFA + CELLIERFB + CELLIERFC, LIMCELLIER) * is_positive(CELLIERFA) * TX13 / 100 + min(CELLIERFA + CELLIERFB + CELLIERFC, LIMCELLIER) * is_positive(CELLIERFB) * TX6 / 100 + min(CELLIERFA + CELLIERFB + CELLIERFC, LIMCELLIER) * is_positive(CELLIERFC) * TX24 / 100) - 8 * RIVCELFABC1 * 1 - V_CNR
AHEBE = BAH * 1 - ART1731BIS + min(BAH, max(AHEBE_P + AHEBEP2, AHEBE1731 + 0) * 1 - PREM8_11) * ART1731BIS
RFON = arr(RFCG * RFORDI / RFCD)
RISFPMED_2 = max(0, min(PLAF_ISFRED - RISFDONF_1 - RISFDONCEE_1, RISFPMED_1))
MIB_NETVV = MIBVENV - MIB_ABVV
BITTAC = BITAC + BI12AC
LIG2RCMABT = is_positive(present(REVACT) + present(REVPEA) + present(PROVIE) + present(DISQUO) + present(RESTUC) + present(INTERE)) * 1 - is_positive(IPVLOC) * LIG1 * LIG2 * is_positive(INDREV1A8IR)
ACODJTJU_1 = arr(ACODJT / 9) + arr(ACODJU / 9)
ICI8XFH = min(arr(BPTP18 * TX18 / 100), arr(COD8XF * TX18 / 100)) + min(arr(BPTP4I * TX30 / 100), arr(COD8XG * TX30 / 100)) + min(arr(BPTP40 * TX41 / 100), arr(COD8XH * TX41 / 100))
RCEL_HJK_R = is_positive(CELLIERHJ) * arr(ACELHJK_R * TX25 / 100) + is_positive(CELLIERHK) * arr(ACELHJK_R * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RLOCIDFG5 = arr(arr(ACODID / 9) * TX11 / 100) + arr(arr(ACODIF / 9) * TX18 / 100) + arr(arr(ACODIG / 9) * TX11 / 100)
RVTOT = RV1 + RV2 + RV3 + RV4
LIGRCELHNO = is_positive(RIVCELHNO1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
MAJTXPCAP4 = 1 - is_positive(V_NBCODICAP) * 1 - is_positive(CMAJ) * is_positive(NMAJPCAP4) * TXPFICAP + is_positive(CMAJ) * COPETO + is_positive(V_NBCODICAP) * -1
_4DEFBAHREV = is_positive(_4BAHREV) * BAHDEV * 1 - is_positive(ART1731BIS * PREM8_11) - DEFBAHREV
XTPS10C = arr(XEXTSC * TX_DEDFORFTS / 100)
EXPRC = PRBC + _2PRBC + PEBFC
EXSPBC = EXTSC + EXPRC
PPE_RTA4 = PPESAL4
LIG3730 = 1 - is_positive(20 - V_NOTRAIT) * is_positive(BOOL_0AZ) * LIG1
TXSPENETV = TXSPEAAV + TXSPEHV
TTSB2 = TEXTS2
REPFORSIN = positif_ou_nul(REPSINFOR + VARD - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * REPSINFOR1 + 1 - positif_ou_nul(REPSINFOR + VARD - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * max(0, REPSINFOR1 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R - REPSINFOR - VARD)) * 1 - V_CNR
DS025 = max(QF025 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF025 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF025 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF025 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF025 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
ZIGGLOALL = is_positive(ZIGGLOA + ZIGGLOANR) * LIG2
MIB_ABVP = max(0, arr(MIB_AVP * MIBVENP / MIB_TVENP))
BNRP = BNNSP + BNNAP
VARIR12 = RASAR + NRINET + IMPRET + 0
RCODJU6 = arr(arr(ACODJU / 9) * TX11 / 100)
RETRESIVIEU = arr(arr(ACODIM / 9) * TX25 / 100) + arr(arr(ACODIW / 9) * TX25 / 100) * 1 - ART1731BIS + min(ARESIVIEU_1, ARESIVIEU1731 + 0) * ART1731BIS
TMIB_AUTOAPP = TMIB_APP - TMIB_PRESAP
APB2 = max(PLR2, EXPR2 * TX_DEDPER / 100)
AILMIZ = DILMIZ * 1 - ART1731BIS + min(DILMIZ, max(AILMIZ_P + AILMIZP2, AILMIZ1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
TPLR4 = min(MIN_DEDPR, TEXPR4)
TDFN4 = min(PLAF_DEDFORFTS, TTPS104)
CIRSE8TV = min(RSE8TV, arr(REVCSXC * TX066 / 100))
DOMITPD = arr(BN1 + SPEPV + BI12F + BA1) * TX11 / 100 * is_positive(V_EAD)
TR3_ISF = arr(max(0, min(DISFBASE, LIM_TR3_ISF) - LIM_TR2_ISF) * TX_TR3_ISF / 10000)
RESIVIAN2 = arr(arr(ACODIW / 9) * TX25 / 100)
LIGLOYNET = present(LOYELEV) * INDREV1A8IR + TAXLOYANTAFF * 1 - is_positive(ANNUL2042 + 0) * LIG1
PERPBICPNP = PERP_BOOL * BICEXP + BICNOP - BICDNP * 1 - is_positive(ART1731BIS) + BIHEXP + BIHNOP - BIHDNP * 1 - is_positive(ART1731BIS) + BIPERPP + LOCPROCGAP - LOCDEFPROCGAP * 1 - is_positive(ART1731BIS) + LOCPROP - LOCDEFPROP * 1 - is_positive(ART1731BIS)
TXRSE2 = COPETO + TXINT
LIGNMAJCHR4 = TYPE2 * is_positive(NMAJCHR4)
LIGLOCNEUF = is_positive(REPINV) * LIG1
EXSPB4 = EXTS4 + EXPR4
LIGMBDREPNPP = is_positive(MIBDREPNPP) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
AFORET = max(0, AFORET_1 * 1 - ART1731BIS + min(AFORET_1, max(AFORET_P + AFORETP2, AFORET1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - V_CNR
RETCODOU = arr(ACODOU * TX11 / 100)
BAMP = arr(BAHREP - DEFBAHREP * MAJREV) * positif_ou_nul(BARSP) + BARSP * 1 - is_positive(BARSP)
BANV = BACREV - DEFBACREV * positif_ou_nul(BARAV) + BARAV * 1 - is_positive(BARAV)
TBICNPF = max(0, sum([BINTAV + BINHTAV, BINTAC + BINHTAC, BINTAP + BINHTAP]) + TMIBNETNPVF + TMIBNETNPPF + MIB_NETNPCT - DEFNP)
TSPEABPV = arr(TSPEABV * BNCPROV + AUTOBNCV / TSPETOTV)
BITTAV = BITAV + BI12AV
LIGLOCRES = is_positive(REPINVRES) * LIG1
DS026 = max(QF026 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF026 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF026 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF026 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF026 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
XEXTS3 = XTSB3 + CARTSP3 + REMPLAP3
XEXTS4 = XTSB4 + CARTSP4 + REMPLAP4
TXRSE4 = COPETO + TXINT
RESIVIEU5 = arr(arr(ACODIM / 9) * TX25 / 100)
RIVCELHNO4 = RIVCELHNO1
PMIB_NETVC = MIBVENC - PMIB_AVC
TXP = COPETO + TXINT
LIGISF = 1 - is_positive(ISF_LIMINF + ISF_LIMSUP) * present(ISFBASE) * is_positive(DISFBASE)
RCEL_HM = is_positive(CELLIERHM) * arr(ACELHM * TX40 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RAH = arr(BAH * TX_CURE / 100)
TAPB4 = max(TPLR4, TEXPR4 * TX_DEDPER / 100)
INDRSE5X = is_positive(CS_DEG) * is_positive(BRSE5) * is_positive(INDCTX)
LIGDOMSOC1 = is_positive(DDOMSOC1) * LIG1 * LIG2
RRESINEUV5 = arr(arr(ACODIL / 9) * TX20 / 100)
BIPTTAC = BIPTAC + BI1AC
TXCDIS = COPETO + TXINT
LIGREPAR = is_positive(NUPROPT) * LIG1 * LIG2
AILMIC_R = DILMIC * 1 - V_CNR
BANC = BACREC - DEFBACREC * positif_ou_nul(BARAC) + BARAC * 1 - is_positive(BARAC)
RCODJU1 = arr(arr(ACODJU / 9) * TX11 / 100)
CS_RVT = RDRV
TEXSPB4 = TEXTS4 + TEXPR4
LIGBNCAP = is_positive(ABNCPDECV + ABNCPDECC + ABNCPDECP) * LIG1 * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) * LIG2
RNTNC = RTNC
REPFOREST3 = positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 + REPFOR1 + REPSINFOR2 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * REPFOR2 + 1 - positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 + REPFOR1 + REPSINFOR2 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * max(0, REPFOR2 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R - REPSINFOR - VARD - REPSINFOR1 - REPFOR1 - REPSINFOR2)) * 1 - V_CNR
RDRCMAPS = RDRCM1BISAPS + COD2FA
RAGRI = arr(BDIFAGRI * TX_DIFAGRI / 100)
RETCODIM = arr(arr(ACODIM / 9) * TX25 / 100)
LIGILMPA = is_positive(DILMPA) * LIG1 * LIG2
LIGCELHE = is_positive(DCELREPHE) * LIG1 * LIG2
TXRSE3 = COPETO + TXINT
PPE_NBMAJOQAR = positif_ou_nul(PPE_NB_PAC - PPE_NBELIGI) * 0 + 1 - positif_ou_nul(PPE_NB_PAC - PPE_NBELIGI) * PPE_NBELIGI - PPE_NB_PAC
XBICSC = XBICNETC + BA1AC
LIGRSN2 = is_positive(RINVTPME12) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGMEUREP = is_positive(DREPMEU) * LIG1 * LIG2
RIVCELHJK1 = RCEL_HJK_R * is_positive(ACELHJK_R)
RAFORET = arr(AFORET_1 * TX_FORET / 100)
_4BAQV = max(0, _4BACREV - _4DEFBACREV) * positif_ou_nul(BARAV) + arr(max(0, _4BAHREV - _4DEFBAHREV) * MAJREV) * positif_ou_nul(BARSV)
BASEDONP = RDDOUP + BDON7UH + DONAUTRE + EXCEDANTA
XDFNC = min(PLAF_DEDFORFTS, XTPS10C)
RETRESIVIEU_1 = arr(arr(ACODIM / 9) * TX25 / 100) + arr(arr(ACODIW / 9) * TX25 / 100)
VARRFDANT = min(RFCF + RFMIC - MICFR, RFDANT)
NPLOCCGANSC = NPLOCCGAC - NPLOCCGASC
EXTSV = TSBNV + BPCOSAV + GLDGRATV + _2TSNV
ACOMP = RFC * 1 - ART1731BIS + min(RFC, max(ACOMP_P + ACOMPP2, ACOMP1731 + 0) * 1 - PREM8_11) * ART1731BIS
RETCODIW = arr(arr(ACODIW / 9) * TX25 / 100)
RCEL_JP = is_positive(CELLIERJP) * arr(ACELJP * TX36 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RIVCELNBGL1 = RCEL_NBGL_R * is_positive(ACELNBGL_R)
TXR = COPETO + TXINT
CIRSE3 = min(RSE3, arr(REVCSXD * TX062 / 100))
TSN = 1 - is_positive(DEFTS) * sum([TPRV, TPRC, TPR1, TPR2, TPR3, TPR4]) - PRN * 1 - is_positive(APPLI_COLBERT)
RIVCELHNO3 = RIVCELHNO1
BAEV = _4BACREV - _4DEFBACREV * positif_ou_nul(BARAV) + 0
RD_RVT = CS_RVT
NPLOCCGANSV = NPLOCCGAV - NPLOCCGASV
RSOCREP = arr(TX_SOCREPR / 100 * BSOCREP) * 1 - V_CNR
P10MINSP = max(min(PERPSALP, PDEDMINP), PDFNP)
LIGNMAJPCAP4 = TYPE2 * is_positive(NMAJPCAP4)
RIVCELJBGL1 = RCEL_JBGL_R * is_positive(ACELJBGL_R)
RD_BPCOS = CS_BPCOS
LIGISFCPI = is_positive(ISFFCPI) * 1 - is_positive(ANNUL2042) * 1 - null(5 - V_IND_TRAIT) * LIGISF + present(ISFFCPI) * is_positive(DISFBASE) * 1 - is_positive(ANNUL2042) * null(5 - V_IND_TRAIT)
RIVCELJBGL7 = RIVCELJBGL1
PIND_MINC = 1 - is_positive(PIND_10MIN_0C)
RIV2012CEL3 = RIV2012CEL1
BIPN = BIPNV + BIPNC + BIPNP
RIVCEL1 = RCEL_2011_R * is_positive(ACEL_R)
RISFDONCEE_2 = max(0, min(PLAF_ISFRED - RISFDONF_1, RISFDONCEE_1))
BOOL_CDV = is_positive(BOOL_V + V_0AC + V_0AD + 0)
TEXPR2 = TPRB2 + COD1DH + T2PRB2 + PEBF2
LIGLOCNEUF4 = is_positive(RIVL4) * LIG1
EXOVOUS = present(TSASSUV) + is_positive(XETRANV) + is_positive(EXOCETV) + present(FEXV) + is_positive(MIBEXV) + is_positive(MIBNPEXV) + is_positive(BNCPROEXV) + is_positive(XSPENPV) + is_positive(XBAV) + is_positive(XBIPV) + is_positive(XBINPV) + is_positive(XBNV) + is_positive(XBNNPV) + is_positive(ABICPDECV) * 1 - V_CNR + is_positive(ABNCPDECV) * 1 - V_CNR + is_positive(HONODECV) * 1 - V_CNR + is_positive(AGRIV) + is_positive(BIPERPV) + is_positive(BNCCREAV)
RLOCIDFG2 = arr(arr(ACODID / 9) * TX11 / 100) + arr(arr(ACODIF / 9) * TX18 / 100) + arr(arr(ACODIG / 9) * TX11 / 100)
SPENETPP = max(0, BNCPROP - SPEABPP)
REPLOCIE8 = arr(ACODIE * TX18 / 100) - REPLOCIE1 - REPLOCIE2 - REPLOCIE3 - REPLOCIE4 - REPLOCIE5 - REPLOCIE6 - REPLOCIE7 - REPLOCIE7
RIVCELNQ4 = arr(min(CELLIERNQ, LIMCELLIER) * is_positive(CELLIERNQ) * TX40 / 100) - 4 * RIVCELNQ1 * 1 - V_CNR
CDISBASE = CDIS - CDISPROV
BCIHABPRIN2 = min(max(0, BCIHP - BCIHABPRIN1), PREHABT1) * 1 - V_CNR
RLOCIDFG4 = arr(arr(ACODID / 9) * TX11 / 100) + arr(arr(ACODIF / 9) * TX18 / 100) + arr(arr(ACODIG / 9) * TX11 / 100)
LIGSPENPPOS = is_positive(SPENETNPF) + is_positive(BNCNPV + BNCNPC + BNCNPP) * null(SPENETNPF) * positif_ou_nul(ANOCEP - DNOCEP + DABNCNP6 + DABNCNP5 + DABNCNP4 + DABNCNP3 + DABNCNP2 + DABNCNP1 + 0) * 1 - is_positive(present(BNCAABV) + present(BNCAADV) + present(BNCAABC) + present(BNCAADC) + present(BNCAABP) + present(BNCAADP) + present(DNOCEP) + present(ANOVEP) + present(DNOCEPC) + present(ANOPEP) + present(DNOCEPP) + present(ANOCEP) + present(DABNCNP6) + present(DABNCNP5) + present(DABNCNP4) + present(DABNCNP3) + present(DABNCNP2) + present(DABNCNP1)) * LIG2
MIB_NETPC = MIBPRESC - MIB_ABPC
TTPS101 = arr(TTSB1 * TX_DEDFORFTS / 100)
AFIPDOM = max(0, AFIPDOM_1 * 1 - ART1731BIS + min(AFIPDOM_1, max(AFIPDOM_P + AFIPDOMP2, AFIPDOM1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - V_CNR
CIRSE1 = min(RSE1, arr(REVCSXA * TX075 / 100))
RIVCELNBGL4 = RIVCELNBGL1
RCODJT8 = arr(ACODJT * TX11 / 100) - 8 * RCODJT1
TIND_APB1 = positif_ou_nul(TPLR1 - TEXPR1 * TX_DEDPER / 100)
BRSETOT = BRSE1 + BRSE2 + BRSE3 + BRSE4 + BRSE5
TMIB_NETPV = MIBPRESV + AUTOBICPV - TMIB_ABPV
TSB3 = EXTS3
LIG3720 = 1 - is_positive(20 - V_NOTRAIT) * 1 - is_positive(LIG3730) * LIG1 * LIG2
INDREV1A8 = is_positive(INDREV1A8IR)
RFCPI = arr(BFCPI_1 * TX_FCPI / 100)
EPAV = arr(BPLIB * TX_PREVLIB / 100)
RETCODIL = arr(arr(ACODIL / 9) * TX20 / 100)
TR2_ISF = arr(max(0, min(DISFBASE, LIM_TR2_ISF) - LIM_TR1_ISF) * TX_TR2_ISF / 10000)
MIB_ABNPVP = max(0, arr(MIB_AVP * MIBNPVENP / MIB_TVENP)) * is_positive(present(MIBGITEP) + present(LOCGITP)) + MIB_AVP - MIB_ABVP * 1 - is_positive(present(MIBGITEP) + present(LOCGITP))
CSGDED = max(0, CSGDED3UA + CSGDEDAUTRE)
BSNCM = max(0, min(REPSNO2, LIM_SOCNOUV2 * 1 + BOOL_0AM - BSNCL))
PSRTF = CSRTF
AVPLAF13 = AVPLAF13A + AVPLAF13B
XBITV = max(0, XBICNETV + max(0, XBICNPNETV))
BRCMTOT = RCMAB + RTNC + RAVC + RCMNAB + RTCAR + RCMPRIVM
RCEL_2012 = is_positive(CELLIERJA + CELLIERJE + CELLIERJH) * arr(ACEL2012 * TX13 / 100) + is_positive(CELLIERJD) * arr(ACEL2012 * TX22 / 100) + is_positive(CELLIERJF + CELLIERJJ) * arr(ACEL2012 * TX6 / 100) + is_positive(CELLIERJK + CELLIERJN) * arr(ACEL2012 * TX24 / 100) + is_positive(CELLIERJM) * arr(ACEL2012 * TX36 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
MIB_ABNPVV = max(0, arr(MIB_AVV * MIBNPVENV / MIB_TVENV)) * is_positive(present(MIBGITEV) + present(LOCGITV)) + MIB_AVV - MIB_ABVV * 1 - is_positive(present(MIBGITEV) + present(LOCGITV))
RIVCELHJK7 = RIVCELHJK1
RINVTPME13 = max(0, COD7CR - max(0, LIM_TITPRISE * 1 + BOOL_0AM - max(0, min(BSNCL + REPSNO2 + REPSNO1 + REPSNON + PETIPRISE, LIM_SOCNOUV2 * 1 + BOOL_0AM) + COD7CQ))) * 1 - V_CNR
REPFORSIN2 = positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * REPSINFOR2 + 1 - positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * max(0, REPSINFOR2 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R - REPSINFOR - VARD - REPSINFOR1 - REPFOR1)) * 1 - V_CNR
LIGPME3 = is_positive(REPINVPME3) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
ABRCM2 = min(ABTAV, RAVC)
RSE3AC = max(0, RSE3 - CIRSE3)
REVPRR = sum([PRR2V + PRR2ZV, PRR2C + PRR2ZC, PRR21 + PRR2Z1, PRR22 + PRR2Z2, PRR23 + PRR2Z3, PRR24 + PRR2Z4]) * 1 - INDTEFF + sum([TPRR2V + TPRR2ZV, TPRR2C + TPRR2ZC, TPRR21 + TPRR2Z1, TPRR22 + TPRR2Z2, TPRR23 + TPRR2Z3, TPRR24 + TPRR2Z4]) * INDTEFF
TMIB_AUTOAPC = TMIB_APC - TMIB_PRESAC
RIVCELHJK6 = RIVCELHJK1
LIGPME2 = is_positive(REPINVPME2) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
TMIB_AUTOAVC = TMIB_AVC - TMIB_VENTAC
TTSBC = TEXTSC + sum([GLD1C, GLD2C, GLD3C]) + CODDBJ + CODEBJ
TSB2 = EXTS2
RCODJT3 = RCODJT1
REPIQAC = RIVPIQAC * 4 + RIVPIQAC5
APRESCOMP = BPRESCOMP * 1 - ART1731BIS + min(BPRESCOMP, max(APRESCOMP_P + APRESCOMPP2, APRESCOMP1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
RCODJU5 = arr(arr(ACODJU / 9) * TX11 / 100)
ACODIN = min(PLAF_RESINEUV - ACODIL, INVNPROF1) * 1 - V_CNR
LIGISFCEE = is_positive(ISFDONEURO) * 1 - is_positive(ANNUL2042) * 1 - null(5 - V_IND_TRAIT) * LIGISF + present(ISFDONEURO) * is_positive(DISFBASE) * 1 - is_positive(ANNUL2042) * null(5 - V_IND_TRAIT)
RIVCELHLM2 = RIVCELHLM1
AUBAINE12 = max(0, min(V_A12REEL, V_DIFTEOREEL - AUBAINE13A - AUBAINE13B))
XBISC = is_positive(max(0, XBICNETC + max(0, XBICNPNETC))) * BI2AC + BI1AC
RLOCIDFG1 = arr(arr(ACODID / 9) * TX11 / 100) + arr(arr(ACODIF / 9) * TX18 / 100) + arr(arr(ACODIG / 9) * TX11 / 100)
IS026 = arr(DS026 * NB2)
RIV2012CEL5 = RIV2012CEL1
TMIB_NETPP = MIBPRESP + AUTOBICPP - TMIB_ABPP
RIVCELNBGL7 = RIVCELNBGL1
LIGISFPLAF = is_positive(ISFPLAF) * 1 - null(5 - V_IND_TRAIT) * LIGISF * 1 - is_positive(ANNUL2042) + present(ISFPLAF) * is_positive(DISFBASE) * 1 - is_positive(ANNUL2042) * null(5 - V_IND_TRAIT)
TIND_APBV = positif_ou_nul(TPLRV - TEXPRV * TX_DEDPER / 100)
LIGISFRAN = is_positive(ISFDONF) * 1 - is_positive(ANNUL2042) * 1 - null(5 - V_IND_TRAIT) * LIGISF + present(ISFDONF) * is_positive(DISFBASE) * 1 - is_positive(ANNUL2042) * null(5 - V_IND_TRAIT)
RIV2012CEL7 = RIV2012CEL1
REPCELCOM = sum([RIVCELCOM1, RIVCELCOM2, RIVCELCOM3]) + RIVCELCOM4
REPINVTOT = REPINV + REPINVRES
REPCELHLM = sum([RIVCELHLM1, RIVCELHLM2, RIVCELHLM3, RIVCELHLM4, RIVCELHLM5, RIVCELHLM6, RIVCELHLM7]) + RIVCELHLM8
BCIFORETUB = max(0, min(COD7UB, max(0, PLAF_FOREST1 * 1 + BOOL_0AM - BCIFORETUA))) * 1 - V_CNR
TMIB_ABNPVP = max(0, arr(TMIB_AVP * MIBNPVENP / TMIB_TVENP)) * is_positive(present(MIBGITEP) + present(LOCGITP)) + TMIB_AVP - TMIB_ABVP * 1 - is_positive(present(MIBGITEP) + present(LOCGITP))
REPEST = positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 + REPFOR1 + REPSINFOR2 + REPFOR2 + REPSINFOR3 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * REPFOR3 + 1 - positif_ou_nul(REPSINFOR + VARD + REPSINFOR1 + REPFOR1 + REPSINFOR2 + REPFOR2 + REPSINFOR3 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R)) * max(0, REPFOR3 - max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR_R - REPSINFOR - VARD - REPSINFOR1 - REPFOR1 - REPSINFOR2 - REPFOR2 - REPSINFOR3)) * 1 - V_CNR
LIGFOREST = is_positive(REPFOREST2 + REPFOREST3 + REPEST) * LIG1 * LIG2 * 1 - V_CNR
RCODJT2 = RCODJT1
LIGPME = is_positive(REPINVPME3 + REPINVPME2 + REPINVPME1 + REPINVPMECU) * LIG1 * LIG2 * 1 - is_positive(V_CNR) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PPE_DEBJJMM = arr(PPE_DEBJJMMMM - V_ANREV / 10000)
MIB_ABPP = max(0, arr(MIB_APP * MIBPRESP / MIB_TPRESP))
RESTIMOC = min(RIMOPPAUANT, LIM_RESTIMO - RESTIMOD - RESTIMOB)
TEXSPB2 = TEXTS2 + TEXPR2
LIGREPEST = is_positive(REPEST) * LIG1 * LIG2 * 1 - V_CNR
PIND_10MIN_0V = is_positive(PDEDMINV - PDFNV) * is_positive(PERPSALV)
TSPEABP = arr(max(MIN_SPEBNC, TSPEBASABP * SPETXAB / 100) * positif_ou_nul(TSPETOTP - MIN_SPEBNC)) + arr(min(MIN_SPEBNC, TSPEBASABP) * is_positive(MIN_SPEBNC - TSPETOTP))
BAEC = _4BACREC - _4DEFBACREC * positif_ou_nul(BARAC) + 0
RSN_CQ = BSNCQ * TX18 / 100
MIB_NETNPVV = MIBNPVENV - MIB_ABNPVV
LIGPMECU = is_positive(REPINVPMECU) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
TSPENETNPC = max(0, BNCNPC - TSPEABNPC)
APB3 = max(PLR3, EXPR3 * TX_DEDPER / 100)
RETXISF = is_positive(CMAJ_ISF) * TXINTISF + TXINRISF * 1 - is_positive(TXINRISF_A) + -1 * is_positive(TXINRISF_A) * is_positive(TXINRISF) * is_positive(is_positive(TXINRISF - TXINRISF_A) + is_positive(TXINRISF_A - TXINRISF)) + TXINRISF * is_positive(TXINRISF_A) * null(TXINRISF - TXINRISF_A)
IND_APB3 = positif_ou_nul(PLR3 - EXPR3 * TX_DEDPER / 100)
RCEL_JP_R = is_positive(CELLIERJP) * arr(ACELJP_R * TX36 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TAXASSUR = TAXASSURV + TAXASSURC
TSB1 = EXTS1
RESIVIEU8 = arr(ACODIM * TX25 / 100) - RESIVIEU1 - RESIVIEU2 - RESIVIEU3 - RESIVIEU4 - RESIVIEU5 - RESIVIEU6 - RESIVIEU7 - RESIVIEU7
RCEL_2011 = is_positive(CELLIERNA + CELLIERNE) * arr(ACEL * TX22 / 100) + is_positive(CELLIERNC + CELLIERND + CELLIERNH) * arr(ACEL * TX25 / 100) + is_positive(CELLIERNF + CELLIERNJ) * arr(ACEL * TX13 / 100) + is_positive(CELLIERNI) * arr(ACEL * TX15 / 100) + is_positive(CELLIERNM + CELLIERNN) * arr(ACEL * TX40 / 100) + is_positive(CELLIERNK + CELLIERNO) * arr(ACEL * TX36 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RIVCELNBGL3 = RIVCELNBGL1
RSE5 = arr(BRSE5 * TX075 / 100) * 1 - is_positive(ANNUL2042)
RIVCELJBGL2 = RIVCELJBGL1
LIGNFOREST = is_positive(REPSIN + REPFORSIN + REPFORSIN2 + REPFORSIN3 + REPNIS) * LIG1 * LIG2
BSNCR = max(0, min(COD7CR, LIM_TITPRISE * 1 + BOOL_0AM - BSN1 - BSNCQ))
XDFNV = min(PLAF_DEDFORFTS, XTPS10V)
ABAVC = is_positive(RCMAV) * arr(ABRCM2 * RCMAV / RAVC)
RDRCM1 = TRCMABD + DRTNC + RAVC + RCMNAB + RTCAR + RCMPRIVM + RCMIMPAT - RCMSOC - is_positive(RCMRDS) * min(RCMRDS, RCMABD + REVACT + RCMAV + PROVIE + RCMHAD + DISQUO + RCMHAB + INTERE + RCMTNC + REVPEA + COD2FA)
IS025 = arr(DS025 * NB2)
LIGRSN1 = is_positive(RINVTPME13) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
XBICNPSC = XBICNPNETC + BI2AC
RCODOU8 = arr(min(PLAF_RESINEUV, COD7OU) * TX11 / 100) - 8 * RCODOU1
RCODJU7 = arr(arr(ACODJU / 9) * TX11 / 100)
TMIB_ABNPVV = max(0, arr(TMIB_AVV * MIBNPVENV / TMIB_TVENV)) * is_positive(present(MIBGITEV) + present(LOCGITV)) + TMIB_AVV - TMIB_ABVV * 1 - is_positive(present(MIBGITEV) + present(LOCGITV))
RIDOMENT = RLOCENT
TAPBV = max(TPLRV, TEXPRV * TX_DEDPER / 100)
RSE1AC = max(0, RSE1 - CIRSE1)
LIGREP7UT = is_positive(REPCIFSIN) * LIG1 * LIG2
TMIB_NETNPVV = MIBNPVENV - TMIB_ABNPVV
I2DH = EPAV
RISFPMEI_1 = max(0, min(45000 - RISFPMED_1, AISFPMEI))
RFOREST1 = min(REPFOR + REPSINFOR + REPSINFOR1, max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR))
NSA = 1 - is_positive(PAC + V_0CH) * min(V_0AG + V_0AL * 1 - is_positive(V_0AN) * 1 - is_positive(is_positive(V_0AW) * positif_ou_nul(AGV - LIM_AGE_LET_S)) + V_0AW * is_positive(max(AGV + 1 - LIM_AGE_LET_S, AGC + 1 - LIM_AGE_LET_S)), 1) * 1 - V_0AP * is_positive(2 - NSM) * 0.5
LIGRCELCOM = is_positive(RIVCELCOM1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RIVCEL5 = RIVCEL1
RCAV = max(0, RCMAV - ABAVC)
RINVEST = RIDOMPROE3
RIVCELHLM6 = RIVCELHLM1
CIPRETUD = arr(APRETUD * TX_PRETUD / 100) * 1 - is_positive(RE168 + TAX1649) * 1 - V_CNR
TSPENETPV = max(0, BNCPROV + AUTOBNCV - TSPEABPV)
MIB_ABNPPV = max(0, arr(MIB_APV * MIBNPPRESV / MIB_TPRESV)) * present(MIBMEUV) + MIB_APV - MIB_ABPV * 1 - present(MIBMEUV)
T10MINSV = max(min(TTSBV, TDEDMINV), TDFNV)
PLR4 = min(MIN_DEDPR, EXPR4)
RIVCELJBGL6 = RIVCELJBGL1
RIVCELCOM2 = RIVCELCOM1
TSPENETPC = max(0, BNCPROC + AUTOBNCC - TSPEABPC)
RDRCM1NEG = min(0, RDRCM1)
SFV1 = 2 * is_positive(V_0AP + 0) * null(BOOL_V - 3)
XEXTS2 = XTSB2 + CARTSP2 + REMPLAP2
ICIGLO = min(arr(BPTP18 * TX18 / 100), arr(COD8XF * TX18 / 100)) + min(arr(RCM2FA * TX24 / 100), arr(COD8XV * TX24 / 100)) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) + min(arr(BPTP4I * TX30 / 100), arr(COD8XG * TX30 / 100)) + min(arr(BPTP40 * TX41 / 100), arr(COD8XH * TX41 / 100))
BAEMV = arr(_4BAHREV - _4DEFBAHREV * MAJREV) * positif_ou_nul(BARSV) + 0
TMIB_NETNPPV = MIBNPPRESV - TMIB_ABNPPV
BSNCN = max(0, min(REPSNO1, LIM_SOCNOUV2 * 1 + BOOL_0AM - BSNCL - BSNCM))
RIVCEL3 = RIVCEL1
TTSB3 = TEXTS3
P2GEWL = max(0, P2GE + PLAF_GE2 * 1 + BOOL_0AM - BGEPAHA - BTANTGECUMWL)
DCTMIB = BICPMVCTV + BICPMVCTC + BICPMVCTP * positif_ou_nul(BIPN + MIB_NETCT) + 1 - positif_ou_nul(BIPN + MIB_NETCT) * BICPMVCTV + BICPMVCTC + BICPMVCTP - abs(BIPN + MIB_NETCT) + 1 - positif_ou_nul(BIPN + MIB_NETCT) * null(BICPMVCTV + BICPMVCTC + BICPMVCTP - abs(BIPN + MIB_NETCT)) * BICPMVCTV + BICPMVCTC + BICPMVCTP
PERPBICMNV = TPMIB_NETPV + TPMIB_NETVV + MIBEXV + MIBPVV - BICPMVCTV
TBICPABP = min(TBICPROVP, arr(TMIB_ABVP * AUTOBICVP / MIBVENP + AUTOBICVP + TMIB_ABPP * AUTOBICPP / MIBPRESP + AUTOBICPP))
_4DEFBAHREC = is_positive(_4BAHREC) * BAHDEC * 1 - is_positive(ART1731BIS * PREM8_11) - DEFBAHREC
RSN_CL = BSNCL * TX25 / 100
ADIFAGRI = BDIFAGRI * 1 - ART1731BIS + min(BDIFAGRI, max(ADIFAGRI_P + ADIFAGRIP2, ADIFAGRI1731 + 0) * 1 - PREM8_11) * ART1731BIS
PPE_RTA1 = PPESAL1
BCIFORETUQ = max(0, min(RDFORESTGES, PLAF_FOREST2 * 1 + BOOL_0AM - BCIFORETUI)) * 1 - V_CNR
APB1 = max(PLR1, EXPR1 * TX_DEDPER / 100)
RIVCEL7 = RIVCEL1
RESIVIAN4 = arr(arr(ACODIW / 9) * TX25 / 100)
LIGSINFOR2 = is_positive(REPFORSIN2) * LIG1 * LIG2
MIB_NETVC = MIBVENC - MIB_ABVC
TIND_MINV = 1 - is_positive(TIND_10MIN_0V)
RIVCELHLM5 = RIVCELHLM1
RRESINEUV8 = arr(ACODIL * TX20 / 100) - RRESINEUV1 - RRESINEUV2 - RRESINEUV3 - RRESINEUV4 - RRESINEUV5 - RRESINEUV6 - RRESINEUV7 - RRESINEUV7
XBISV = is_positive(max(0, XBICNETV + max(0, XBICNPNETV))) * BI2AV + BI1AV
RETCODJU = arr(arr(ACODJU / 9) * TX11 / 100)
LIG3525 = 1 - V_CNR * is_positive(RTNC) * LIG1 * LIG2
IND_REV8FV = is_positive(INDREV1A8)
BA14UN = arr(BASE7UN * TX18 / 100)
NPLOCNSC = NPLOCC - NPLOCSC
INDRSE2X = is_positive(CS_DEG) * is_positive(BRSE2) * is_positive(INDCTX)
PPE_BOOL_MIN2 = positif_ou_nul(PPE_RTA2 - PPELIMRPB) * 1 - PPE_BOOL_NADA2
XBITP = max(0, XBICNETP + max(0, XBICNPNETP))
BTP3A = BN1 + SPEPV + BI12F + BA1 * 1 - is_positive(IPVLOC)
MIB_ABNPPC = max(0, arr(MIB_APC * MIBNPPRESC / MIB_TPRESC)) * present(MIBMEUC) + MIB_APC - MIB_ABPC * 1 - present(MIBMEUC)
TSPENETC = TSPENETPC + TSPENETNPC
MIB_NETPV = MIBPRESV - MIB_ABPV
TTPS10C = arr(TTSBC * TX_DEDFORFTS / 100)
PS_BPCOS = CS_BPCOS
QF024 = arr(RB04) / NB2
PERPBICMNP = TPMIB_NETPP + TPMIB_NETVP + MIBEXP + MIBPVP - BICPMVCTP * PERP_BOOL
RIVCELNQ3 = RIVCELNQ1
PIND_10MIN_0P = is_positive(PDEDMINP - PDFNP) * is_positive(PERPSALP)
PLAFRED_FORTRA = max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR)
RIVCELHLM7 = RIVCELHLM1
RIVCELHJK4 = RIVCELHJK1
MIBRNETC = max(0, MIBRC - MIBRABC)
REGVBASE = BREGV
TMIB_NETVP = MIBVENP + AUTOBICVP - TMIB_ABVP
DFCG = min(0, RFCF - RFDANT) * 1 - is_positive(ART1731BIS) + min(0, RFCF - DEFRF4BD) * is_positive(ART1731BIS)
PPE_RPRO1V = FEXV + BAFV + BAEXV + BACREV + _4BACREV - BACDEV * 1 - is_positive(ART1731BIS) + BAHEXV + BAHREV + _4BAHREV - BAHDEV * 1 - is_positive(ART1731BIS) + BICEXV + BICNOV - BICDNV * 1 - is_positive(ART1731BIS) + BIHEXV + BIHNOV - BIHDNV * 1 - is_positive(ART1731BIS) + BNCEXV + BNCREV - BNCDEV * 1 - is_positive(ART1731BIS) + BNHEXV + BNHREV - BNHDEV * 1 - is_positive(ART1731BIS) + MIBEXV + BNCPROEXV + TMIB_NETVV + TMIB_NETPV + TSPENETPV + BAFPVV + MIBPVV + BNCPROPVV + BAFORESTV + LOCPROV + LOCPROCGAV - LOCDEFPROCGAV * 1 - is_positive(ART1731BIS) - LOCDEFPROV * 1 - is_positive(ART1731BIS) + XHONOAAV + XHONOV
ZIGRSE2 = is_positive(BRSE2) * LIG2
TFRDV = 1 - is_positive(PREM8_11) * FRNV + COD1AE * is_positive(FRNV + COD1AE - T10MINSV) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNV + COD1AE, TFRDPROVV) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNV + COD1AE, min(TFRDPROVV, max(TFRDPROVVP2, TFRDPROVV1731)))
RETLOCIDEFG_1 = arr(arr(ACODIE / 9) * TX18 / 100) + arr(arr(ACODIF / 9) * TX18 / 100) + arr(arr(ACODID / 9) * TX11 / 100) + arr(arr(ACODIG / 9) * TX11 / 100)
PERPBICMNC = TPMIB_NETPC + TPMIB_NETVC + MIBEXC + MIBPVC - BICPMVCTC
XTPS102 = arr(XEXTS2 * TX_DEDFORFTS / 100)
BICIMPC = BIHTAC + BIPTAC + MIB_NETVC + MIB_NETPC
BSNCF = max(0, min(RDSNO, LIM_TITPRISE * 1 + BOOL_0AM - BSN1 - BSNCQ - BSNCR))
LIGMEUB = is_positive(VIEUMEUB) * is_positive(RESIMEUB1 + RESIMEUB2 + RESIMEUB3 + RESIMEUB4 + RESIMEUB5 + RESIMEUB6 + RESIMEUB7 + RESIMEUB8) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RSE4BASE = max(0, RSE8TX - CIRSE8TX - CSPROVYH) + max(0, RSE8SB - CIRSE8SB - CSPROVYP)
RIVCELNQ2 = RIVCELNQ1
LIGREP7UA = is_positive(REPCIFAD) * LIG1 * LIG2
AFOREST_1 = min(FORTRA, max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR)) * 1 - V_CNR + min(RDFOREST, PLAF_FOREST * 1 + BOOL_0AM)
BAMV = arr(BAHREV - DEFBAHREV * MAJREV) * positif_ou_nul(BARSV) + BARSV * 1 - is_positive(BARSV)
REPMEUB = RESIMEUB1 + RESIMEUB2 + RESIMEUB3 + RESIMEUB4 + RESIMEUB5 + RESIMEUB6 + RESIMEUB7 + RESIMEUB8 * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
TMIB_ABNPPC = max(0, arr(TMIB_APC * MIBNPPRESC / TMIB_TPRESC)) * present(MIBMEUC) + TMIB_APC - TMIB_ABPC * 1 - present(MIBMEUC)
LIGREPNIS = is_positive(REPNIS) * LIG1 * LIG2
ALOCIDEFG_1 = arr(ACODIE / 9) + arr(ACODIF / 9) + arr(ACODID / 9) + arr(ACODIG / 9)
XEXTS1 = XTSB1 + CARTSP1 + REMPLAP1
RGEPAHA = BGEPAHA * TX25 / 100 * 1 - V_CNR
TSB4 = EXTS4
TBNCTOTABV = arr(TSPEABV * AUTOBNCV / TSPETOTV)
LIGRNEUV = is_positive(MEUBLENP) * is_positive(RRESINEUV1 + RRESINEUV2 + RRESINEUV3 + RRESINEUV4 + RRESINEUV5 + RRESINEUV6 + RRESINEUV7 + RRESINEUV8) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PLRC = min(MIN_DEDPR, EXPRC)
PPE_FINJJMM = arr(PPE_FINJJMMMM - V_ANREV / 10000)
SPEABPV = arr(SPEABV * BNCPROV / SPETOTV)
SPEABNPP = SPEABP - SPEABPP
RESIVIAN7 = arr(arr(ACODIW / 9) * TX25 / 100)
SFCD1 = 15 * is_positive(V_0AN + 0) * 1 - is_positive(V_0AP + 0) * 1 - is_positive(V_0AG + 0) * 1 - BOOL_W + 2 * is_positive(V_0AP + 0) * 1 - is_positive(V_0AL + 0) + 14 * is_positive(V_0AG + 0) * 1 - is_positive(V_0AP + 0) * 1 - BOOL_W + 7 * BOOL_W * 1 - is_positive(V_0AP + 0) * 1 - is_positive(V_0AL + 0) * BOOL_CDV * BOOL_PACSFL
LIGSINFOR = is_positive(REPFORSIN) * LIG1 * LIG2
ACODIJ = min(PLAF_RESINEUV - ACODIL - ACODIN, LOCRESINEUV) * 1 - V_CNR
BNRTOT = BNRV + BNRC + BNRP
PERPINDP = is_positive(is_positive(is_positive(PERP_INDP) + 1 - is_positive(PERP_INDP) * 1 - is_positive(PRBR1 + PALIP)) * is_positive(INDREV1A8) + 1 - is_positive(PERP_INDP) * is_positive(PRBR1 + PALIP) * is_positive(PERP_COTP)) * PERP_BOOL * 1 - V_CNR
RLOCIDFG3 = arr(arr(ACODID / 9) * TX11 / 100) + arr(arr(ACODIF / 9) * TX18 / 100) + arr(arr(ACODIG / 9) * TX11 / 100)
RIVCELHJK5 = RIVCELHJK1
XTPS103 = arr(XEXTS3 * TX_DEDFORFTS / 100)
XDFN2 = min(PLAF_DEDFORFTS, XTPS102)
LIGRCELNQ = is_positive(RIVCELNQ1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCODJT7 = RCODJT1
IND_REV = is_positive(IND_REV8FV + is_positive(REVFONC))
TMIB_ABVC = max(0, arr(TMIB_AVC * MIBVENC + AUTOBICVC / TMIB_TVENC))
CS_RTF = RDPTP + RDNCP
TPLR3 = min(MIN_DEDPR, TEXPR3)
TMIB_ABNPPP = max(0, arr(TMIB_APP * MIBNPPRESP / TMIB_TPRESP)) * present(MIBMEUP) + TMIB_APP - TMIB_ABPP * 1 - present(MIBMEUP)
SPENETPC = max(0, BNCPROC - SPEABPC)
IND_APB4 = positif_ou_nul(PLR4 - EXPR4 * TX_DEDPER / 100)
RSE8SA = arr(BRSE8SA * TXTV / 100) * 1 - is_positive(ANNUL2042)
RETRESIMEUB = arr(ARESIMEUB * TX25 / 100)
NOCEPIMP = NOCEPIMPV + NOCEPIMPC + NOCEPIMPP
T10MINS4 = max(min(TTSB4, TDEDMIN4), TDFN4)
SPEABNPC = SPEABC - SPEABPC
LIG0 = 1 - is_positive(IPVLOC) * 1 - is_positive(RE168 + TAX1649) * IND_REV
TBNCNPABC = TBNCTOTABC - TBNCPABC
BGTECH = min(RDTECH, P2GEWL) * 1 - V_CNR
ISF1 = TR2_ISF + TR3_ISF + TR4_ISF + TR5_ISF + TR6_ISF
DCTMIBNP = MIBNPDCT * positif_ou_nul(BINNV + BINNC + BINNP + MIB_NETNPCT) + 1 - positif_ou_nul(BINNV + BINNC + BINNP + MIB_NETNPCT) * MIBNPDCT - abs(BINNV + BINNC + BINNP + MIB_NETNPCT) + 1 - positif_ou_nul(BINNV + BINNC + BINNP + MIB_NETNPCT) * null(MIBNPDCT - abs(BINNV + BINNC + BINNP + MIB_NETNPCT)) * MIBNPDCT
TBNN = sum([TSPENETPV, TSPENETPC, TSPENETPP]) + TXSPENET + max(0, sum([TSPENETNPV, TSPENETNPC, TSPENETNPP]) + NOCEPIMP - min(DABNCNP6, DABNCNP61731 + 0) * is_positive(ART1731BIS) + DABNCNP6 * 1 - ART1731BIS - min(DABNCNP5, DABNCNP51731 + 0) * is_positive(ART1731BIS) + DABNCNP5 * 1 - ART1731BIS - min(DABNCNP4, DABNCNP41731 + 0) * is_positive(ART1731BIS) + DABNCNP4 * 1 - ART1731BIS - min(DABNCNP3, DABNCNP31731 + 0) * is_positive(ART1731BIS) + DABNCNP3 * 1 - ART1731BIS - min(DABNCNP2, DABNCNP21731 + 0) * is_positive(ART1731BIS) + DABNCNP2 * 1 - ART1731BIS - min(DABNCNP1, DABNCNP11731 + 0) * is_positive(ART1731BIS) + DABNCNP1 * 1 - ART1731BIS) + SPENETCT + SPENETNPCT
RFOREST2 = min(REPFOR1 + REPSINFOR2, max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR - RFOREST1))
LIG3700 = is_positive(LIG4271 + LIG3710 + LIG3720 + LIG3730) * LIG1 * TYPE4
TPS103 = arr(TSB3 * TX_DEDFORFTS / 100)
LIGISFPMED = is_positive(ISFPMEDI) * 1 - is_positive(ANNUL2042) * 1 - null(5 - V_IND_TRAIT) * LIGISF + present(ISFPMEDI) * is_positive(DISFBASE) * 1 - is_positive(ANNUL2042) * null(5 - V_IND_TRAIT)
ZIGRSE5 = is_positive(BRSE5) * LIG2
RESIVIAN8 = arr(ACODIW * TX25 / 100) - RESIVIAN1 - RESIVIAN2 - RESIVIAN3 - RESIVIAN4 - RESIVIAN5 - RESIVIAN6 - RESIVIAN7 - RESIVIAN7
LIG60YT = INDV * INDP * 1 - INDC * ART1731BIS * LIG0 * LIG2
REPFORTOT = REPFOREST2 + REPFOREST3 + REPEST
TMIB_NETNPPC = MIBNPPRESC - TMIB_ABNPPC
TD10MV = TIND_MINV * TDFNV + 1 - TIND_MINV * T10MINSV
P10MINSV = max(min(PERPSALV, PDEDMINV), PDFNV)
LIGREPSIN = is_positive(REPSIN) * LIG1 * LIG2
RDRFAPS = max(0, RFCFAPS + RFMIC - MICFR - RFDANT) * 1 - is_positive(ART1731BIS) + max(0, RFCFAPS + RFMIC - MICFR + DEFRF4BD + DEFRF4BC) * is_positive(ART1731BIS)
LIGISFBASE = LIGISF * 1 - is_positive(ANNUL2042)
BAHQC = BANC + BAMC + BAFORC
TPS102 = arr(TSB2 * TX_DEDFORFTS / 100)
DCTSPENP = positif_ou_nul(NOCEPIMP + SPENETNPF) * BNCNPDCT + 1 - positif_ou_nul(NOCEPIMP + SPENETNPF) * BNCNPDCT - abs(NOCEPIMP + SPENETNPF) + 1 - positif_ou_nul(NOCEPIMP + SPENETNPF) * null(BNCNPDCT - abs(NOCEPIMP + SPENETNPF)) * BNCNPDCT
DIDABNCNP = min(DABNCNP1 + DABNCNP2 + DABNCNP3 + DABNCNP4 + DABNCNP5 + DABNCNP6, max(DIDABNCNP11731, max(DIDABNCNP1_P, DIDABNCNP1P2))) * is_positive(DEFRIBNC) * 1 - PREM8_11 + max(0, min(NOCEPIMP + SPENETNPF, DABNCNP1 + DABNCNP2 + DABNCNP3 + DABNCNP4 + DABNCNP5 + DABNCNP6)) * 1 - is_positive(DEFRIBNC) + 0 * PREM8_11
RIVCELJBGL4 = RIVCELJBGL1
RCEL_JOQR_R = is_positive(CELLIERJQ) * arr(ACELJOQR_R * TX36 / 100) + is_positive(CELLIERJO + CELLIERJR) * arr(ACELJOQR_R * TX24 / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RIVCEL6 = RIVCEL1
EXSPB1 = EXTS1 + EXPR1
RIVCELNBGL5 = RIVCELNBGL1
_2REVF = min(arr(RFCG * FONCI / RFCD), RFCG - RFON)
TMIB_NETVC = MIBVENC + AUTOBICVC - TMIB_ABVC
LIGTXF30 = positif_ou_nul(BPCOPTV + BPCOPTC + BPVSK) * LIG0 * LIG2
LIG0020 = INDV * 1 - INDC * 1 - INDP * 1 - ART1731BIS * LIG0 * LIG2
RETRESIMEUB_1 = arr(ARESIMEUB_1 * TX25 / 100)
X10MINSV = max(min(XTSBV, DEDMINV), XDFNV)
LIG10YT = INDV * INDC * INDP * ART1731BIS * LIG0 * LIG2
RETCODIN = arr(arr(ACODIN / 9) * TX20 / 100)
LIGRCELNBGL = is_positive(RIVCELNBGL1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RIVCELJBGL3 = RIVCELJBGL1
RIVCEL8 = arr(min(CELSOMN, LIMCELLIER) * is_positive(CELLIERNM + CELLIERNN) * TX40 / 100 + min(CELSOMN, LIMCELLIER) * is_positive(CELLIERNK + CELLIERNO) * TX36 / 100 + min(CELSOMN, LIMCELLIER) * is_positive(CELLIERNC + CELLIERND + CELLIERNH) * TX25 / 100 + min(CELSOMN, LIMCELLIER) * is_positive(CELLIERNA + CELLIERNE) * TX22 / 100 + min(CELSOMN, LIMCELLIER) * is_positive(CELLIERNI) * TX15 / 100 + min(CELSOMN, LIMCELLIER) * is_positive(CELLIERNF + CELLIERNJ) * TX13 / 100) - 8 * RIVCEL1 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RSE2 = arr(BRSE8TV * TXTV / 100) * 1 - is_positive(ANNUL2042) + arr(BRSE8SA * TXTV / 100) * 1 - is_positive(ANNUL2042)
NMAJREGV1 = max(0, MAJO1728REGV + arr(BREGV * COPETO / 100)) * 1 - V_CNR
TAPB1 = max(TPLR1, TEXPR1 * TX_DEDPER / 100)
RETLOCIDEFG = arr(arr(ACODIE / 9) * TX18 / 100) + arr(arr(ACODIF / 9) * TX18 / 100) + arr(arr(ACODID / 9) * TX11 / 100) + arr(arr(ACODIG / 9) * TX11 / 100) * 1 - ART1731BIS + min(ALOCIDEFG_1, ALOCIDEFG1731 + 0) * ART1731BIS
PERPNONSALV = PERPBANV + PERPBICMNV + PERPBICPNV + PERPBNCMNV + PERPBNCPNV
PVBAR3VA = is_positive(CSGDED) * arr(CSGDED * 100 / TX051)
RISFFIP_2 = max(0, min(PLAF_ISFRED - RISFDONF_1 - RISFDONCEE_1 - RISFPMED_1 - RISFPMEI_1, RISFFIP_1))
ABPR3 = arr(1 - IND_APB3 * min(APB3, PL_PB * APB3 / sum([APBV * 1 - IND_APBV, APBC * 1 - IND_APBC, APB1 * 1 - IND_APB1, APB2 * 1 - IND_APB2, APB3 * 1 - IND_APB3, APB4 * 1 - IND_APB4])) + IND_APB3 * APB3)
XIND_10V = positif_ou_nul(X10MINSV - FRNV)
RSN_CR = BSNCR * TX18 / 100
LIGISFE = is_positive(DISFBASE) * is_positive(ISFETRANG) * 1 - is_positive(ANNUL2042) * 1 - null(5 - V_IND_TRAIT) * LIGISF + is_positive(DISFBASE) * present(ISFETRANG) * 1 - is_positive(ANNUL2042) * null(5 - V_IND_TRAIT)
_4DEFBAHREP = is_positive(_4BAHREP) * BAHDEP * 1 - is_positive(ART1731BIS * PREM8_11) - DEFBAHREP
REPCEL = sum([RIVCEL1, RIVCEL2, RIVCEL3, RIVCEL4, RIVCEL5, RIVCEL6, RIVCEL7]) + RIVCEL8
LIGREPFOR3 = is_positive(REPFOREST3) * LIG1 * LIG2 * 1 - V_CNR
TIND_10MIN_04 = is_positive(TDEDMIN4 - TDFN4) * is_positive(TTSB4)
TMIB_ABNPVLV = TMIB_AVV - TMIB_ABVV - TMIB_ABNPVV * is_positive(present(MIBGITEV) + present(LOCGITV))
MIB_ABNPVC = max(0, arr(MIB_AVC * MIBNPVENC / MIB_TVENC)) * is_positive(present(MIBGITEC) + present(LOCGITC)) + MIB_AVC - MIB_ABVC * 1 - is_positive(present(MIBGITEC) + present(LOCGITC))
IND_APB2 = positif_ou_nul(PLR2 - EXPR2 * TX_DEDPER / 100)
MIB_ABNPVLP = MIB_AVP - MIB_ABVP - MIB_ABNPVP * is_positive(present(MIBGITEP) + present(LOCGITP))
TPS101 = arr(TSB1 * TX_DEDFORFTS / 100)
REPCEL2012 = sum([RIV2012CEL1, RIV2012CEL2, RIV2012CEL3, RIV2012CEL4, RIV2012CEL5, RIV2012CEL6, RIV2012CEL7]) + RIV2012CEL8
DOMAVTG = arr(BN1 + SPEPV + BI12F + BA1 * TX07 / 100) * is_positive(V_EAG)
PLRV = min(MIN_DEDPR, EXPRV)
RRFI = RFON + DRCF + max(0, RFMIC - MICFR - RFDANT) * 1 - is_positive(ART1731BIS) + RFON + DRCF + max(0, RFMIC - MICFR - DEFRF4BD) * is_positive(ART1731BIS)
LIG65 = is_positive(LIG52 + LIG58 + LIG585 + present(CHRFAC) + present(CHNFAC) + present(CHRDED) + present(DPERPV) + present(DPERPC) + present(DPERPP) + LIGREPAR) * LIG1 * LIG2
MIBRABV = MIB_ABVV + MIB_ABPV
RSETOT = RSE1 + RSE2 + RSE3 + RSE4 + RSE5
GECUM = min(P2GE, BGEPAHA + BGTECH) + BTANTGECUM
PIND_MINV = 1 - is_positive(PIND_10MIN_0V)
PS_RTF = CS_RTF
PERPINDC = is_positive(is_positive(is_positive(PERP_INDC) + 1 - is_positive(PERP_INDC) * 1 - is_positive(PRBRC + PALIC)) * is_positive(INDREV1A8) + 1 - is_positive(PERP_INDC) * is_positive(PRBRC + PALIC) * is_positive(PERP_COTC) + PERPMUTU * 1 - is_positive(PERP_INDC + PERP_COTC)) * 1 - PERP_NONC * BOOL_0AM * 1 - V_CNR
LIG50YT = INDV * INDC * 1 - INDP * ART1731BIS * LIG0 * LIG2
LIG910 = is_positive(present(RCMABD) + present(RCMTNC) + present(RCMAV) + present(RCMHAD) + present(RCMHAB) + present(REGPRIV) + 1 - present(BRCMQ) * present(RCMFR)) * LIG0 * LIG2
XTPS104 = arr(XEXTS4 * TX_DEDFORFTS / 100)
MIB_NETVP = MIBVENP - MIB_ABVP
RSN_CM = BSNCM * TX22 / 100
TDFN1 = min(PLAF_DEDFORFTS, TTPS101)
PPE_BOOL_MIN4 = positif_ou_nul(PPE_RTA4 - PPELIMRPB) * 1 - PPE_BOOL_NADA4
TSBC = EXTSC + sum([GLD1C, GLD2C, GLD3C]) + CODDBJ + CODEBJ
RETCODIJ = arr(arr(ACODIJ / 9) * TX18 / 100)
MIB_NETNPPV = MIBNPPRESV - MIB_ABNPPV
APBC = max(PLRC, EXPRC * TX_DEDPER / 100)
TMIB_ABNPPLP = TMIB_APP - TMIB_ABPP - TMIB_ABNPPP * present(MIBMEUP)
TBICNPABV = arr(TMIB_ABNPVV / MIBNPVENV + TMIB_ABNPPV / MIBNPPRESV)
MIBRNETV = max(0, MIBRV - MIBRABV)
APBV = max(PLRV, EXPRV * TX_DEDPER / 100)
X10MINS2 = max(min(XTSB2, DEDMIN2), XDFN2)
PD10MC = PIND_MINC * PDFNC + 1 - PIND_MINC * P10MINSC
MIB_NETNPVP = MIBNPVENP - MIB_ABNPVP
MIB_ABNPPLV = MIB_APV - MIB_ABPV - MIB_ABNPPV * present(MIBMEUV)
PIND_MINP = 1 - is_positive(PIND_10MIN_0P)
RGTECH = BGTECH * TX40 / 100 * 1 - V_CNR
RIVCELJBGL8 = arr(min(CELLIERJB + CELLIERJG + CELLIERJL, LIMCELLIER) * is_positive(CELLIERJB) * TX22 / 100 + min(CELLIERJB + CELLIERJG + CELLIERJL, LIMCELLIER) * is_positive(CELLIERJG) * TX13 / 100 + min(CELLIERJB + CELLIERJG + CELLIERJL, LIMCELLIER) * is_positive(CELLIERJL) * TX36 / 100) - 8 * RIVCELJBGL1 * 1 - V_CNR
LIG2501 = 1 - is_positive(IND_REV) * 1 - null(2 - V_REGCO) * LIG2
TIND_APB4 = positif_ou_nul(TPLR4 - TEXPR4 * TX_DEDPER / 100)
TPS10C = arr(TSBC * TX_DEDFORFTS / 100)
LIGTITREXCP = 1 - is_positive(EXOVOUS) * is_positive(EXOCJT) * is_positive(EXOPAC) * 1 - is_positive(LIG2501) * LIG1 * LIG2
REPCELNQ = sum([RIVCELNQ1, RIVCELNQ2, RIVCELNQ3]) + RIVCELNQ4
LIG1432 = is_positive(BPTP19) * LIG0 * LIG2
RIVCEL2 = RIVCEL1
LIGISFDON = is_positive(LIGISFRAN + LIGISFCEE) * LIGISF
LIGREPLOCIE = is_positive(LOCMEUBIE) * is_positive(REPLOCIE1 + REPLOCIE2 + REPLOCIE3 + REPLOCIE4 + REPLOCIE5 + REPLOCIE6 + REPLOCIE7 + REPLOCIE8) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGTXF225 = is_positive(PEA + 0) * LIG0 * LIG2
RSE3N = max(0, RSE3 - CIRSE3)
ARESIVIEU = ARESIVIEU_1 * 1 - ART1731BIS + min(ARESIVIEU_1, max(ARESIVIEU_P + ARESIVIEUP2, ARESIVIEU1731 + 0) * 1 - PREM8_11) * ART1731BIS
EXSPBV = EXTSV + EXPRV
PPE_DEBJJ = inf(PPE_DEBJJMM / 100)
LIGTXF24 = is_positive(BPTP24) * LIG0 * LIG2
X10MINSC = max(min(XTSBC, DEDMINC), XDFNC)
PPE_DEBMM = PPE_DEBJJMM - PPE_DEBJJ * 100
RIVCELJBGL5 = RIVCELJBGL1
DS024 = max(QF024 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF024 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF024 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF024 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF024 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
LIGRSN = is_positive(RINVTPME12 + RINVTPME13 + RINVTPME14) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
SPENETNPC = max(0, BNCNPC - SPEABNPC)
LIG30YT = INDC * 1 - INDV * 1 - INDP * ART1731BIS * LIG0 * LIG2
AAIDE = BAD * 1 - ART1731BIS + min(BAD, max(AAIDE_P + AAIDEP2, AAIDE1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
TXTOISF = RETXISF + COPETOISF
REPLOCIE = REPLOCIE1 + REPLOCIE2 + REPLOCIE3 + REPLOCIE4 + REPLOCIE5 + REPLOCIE6 + REPLOCIE7 + REPLOCIE8
REDTL = ASURV + ACOMP
DRFRP = 1 - is_positive(IPVLOC) * abs(DFCE + DFCG) * 1 - is_positive(RFMIC) + is_positive(RFMIC) * abs(min(0, RFMIC - MICFR - RFDANT)) * 1 - is_positive(ART1731BIS) + ART1731BIS * DEFRFNONI
LIG4403 = is_positive(V_FORPA) * 1 - positif_ou_nul(BAFP) * LIG0
IND_APBV = positif_ou_nul(PLRV - EXPRV * TX_DEDPER / 100)
BCIFORETUP = max(0, min(RDFORESTRA, PLAF_FOREST1 * 1 + BOOL_0AM - BCIFORETUA - BCIFORETUB)) * 1 - V_CNR
TSBV = EXTSV + sum([GLD1V, GLD2V, GLD3V]) + CODDAJ + CODEAJ
BAHQP = BANP + BAMP + BAFORP
MIB_ABNPVLV = MIB_AVV - MIB_ABVV - MIB_ABNPVV * is_positive(present(MIBGITEV) + present(LOCGITV))
RIVCEL4 = RIVCEL1
TTPS103 = arr(TTSB3 * TX_DEDFORFTS / 100)
TTPS102 = arr(TTSB2 * TX_DEDFORFTS / 100)
TPLR2 = min(MIN_DEDPR, TEXPR2)
TMIB_ABNPVC = max(0, arr(TMIB_AVC * MIBNPVENC / TMIB_TVENC)) * is_positive(present(MIBGITEC) + present(LOCGITC)) + TMIB_AVC - TMIB_ABVC * 1 - is_positive(present(MIBGITEC) + present(LOCGITC))
TABPRV = arr(1 - TIND_APBV * min(TAPBV, TPL_PB * TAPBV / sum([TAPBV * 1 - TIND_APBV, TAPBC * 1 - TIND_APBC, TAPB1 * 1 - TIND_APB1, TAPB2 * 1 - TIND_APB2, TAPB3 * 1 - TIND_APB3, TAPB4 * 1 - TIND_APB4])) + TIND_APBV * TAPBV)
TDFN2 = min(PLAF_DEDFORFTS, TTPS102)
T10MINS2 = max(min(TTSB2, TDEDMIN2), TDFN2)
TBICNPPROVP = max(0, arr(TMIB_ABNPVP / MIBNPVENP + TMIB_ABNPPP / MIBNPPRESP))
LIG0050 = INDV * INDC * 1 - INDP * 1 - ART1731BIS * LIG0 * LIG2
DFN2 = min(PLAF_DEDFORFTS, TPS102)
_2ABAVC = is_positive(PROVIE) * min(arr(ABRCM2 * PROVIE / RAVC), ABRCM2 - ABAVC)
CIRSE8SA = min(RSE8SA, arr(COD8XI * TX066 / 100))
CIRSE4 = CIRSE8TX + CIRSE8SB
MIB_NETNPPC = MIBNPPRESC - MIB_ABNPPC
ALOCIDEFG = ALOCIDEFG_1 * 1 - ART1731BIS + min(ALOCIDEFG_1, max(ALOCIDEFG_P + ALOCIDEFGP2, ALOCIDEFG1731 + 0) * 1 - PREM8_11) * ART1731BIS
LIG_GATASA = positif_ou_nul(BPCOSAV + BPCOSAC + GLDGRATV + GLDGRATC) * LIG0 * LIG2
PS_RVT = CS_RVT
TDFNC = min(PLAF_DEDFORFTS, TTPS10C)
LIGDAB = is_positive(present(DABNCNP6) + present(DABNCNP5) + present(DABNCNP4) + present(DABNCNP3) + present(DABNCNP2) + present(DABNCNP1)) * LIG0 * LIG2
PD10MV = PIND_MINV * PDFNV + 1 - PIND_MINV * P10MINSV
IND_APB1 = positif_ou_nul(PLR1 - EXPR1 * TX_DEDPER / 100)
REPFORESTA = REPSIN + REPFORSIN + REPFORSIN2 + REPFORSIN3 + REPNIS
TBNCTOTABP = arr(TSPEABP * AUTOBNCP / TSPETOTP)
RIVCELHJK2 = RIVCELHJK1
TBNCPABV = arr(TSPEABPV * AUTOBNCV / BNCPROV + AUTOBNCV)
LIGPLOC = is_positive(LOCPROCGAV + LOCPROCGAC + LOCPROCGAP + LOCDEFPROCGAV + LOCDEFPROCGAC + LOCDEFPROCGAP + LOCPROV + LOCPROC + LOCPROP + LOCDEFPROV + LOCDEFPROC + LOCDEFPROP) * 1 - null(4 - V_REGCO) * LIG0
LIGNPLOC = is_positive(LOCNPCGAV + LOCNPCGAC + LOCNPCGAPAC + LOCDEFNPCGAV + LOCDEFNPCGAC + LOCDEFNPCGAPAC + LOCNPV + LOCNPC + LOCNPPAC + LOCDEFNPV + LOCDEFNPC + LOCDEFNPPAC + LOCGITCV + LOCGITCC + LOCGITCP + LOCGITHCV + LOCGITHCC + LOCGITHCP) * 1 - null(4 - V_REGCO) * LIG0
REPCELFABC = 7 * RIVCELFABC1 + RIVCELFABC8
CIRSE5 = min(RSE5, arr(REVCSXB * TX075 / 100))
PPE_BOOL_MIN1 = positif_ou_nul(PPE_RTA1 - PPELIMRPB) * 1 - PPE_BOOL_NADA1
TRCM1 = _1RNC + RCAV + _1RAO
XBITC = max(0, XBICNETC + max(0, XBICNPNETC))
RAD = arr(BAD * TX_AIDOMI / 100) * 1 - V_CNR
FRAN = is_positive(RCMABD) * null(4 - V_IND_TRAIT) * is_positive(REVACT + RTCAR + RCMNAB) * arr(RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, BRCMTOT + 0) * ART1731BIS * RCMABD / max(1, TRCMABD + RTCAR + RCMNAB)) + 1 - is_positive(REVACT + RTCAR + RCMNAB) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, BRCMTOT + 0) * ART1731BIS + null(5 - V_IND_TRAIT) * is_positive(REVACT + RTCAR + RCMNAB) * arr(RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P), BRCMTOT1731 + 0)) * ART1731BIS * RCMABD / max(1, TRCMABD + RTCAR + RCMNAB)) + 1 - is_positive(REVACT + RTCAR + RCMNAB) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P), BRCMTOT1731 + 0)) * ART1731BIS
LIGISFPMEI = is_positive(ISFPMEIN) * 1 - is_positive(ANNUL2042) * 1 - null(5 - V_IND_TRAIT) * LIGISF + present(ISFPMEIN) * is_positive(DISFBASE) * 1 - is_positive(ANNUL2042) * null(5 - V_IND_TRAIT) * LIGISF
REPCELJBGL = sum([RIVCELJBGL1, RIVCELJBGL2, RIVCELJBGL3, RIVCELJBGL4, RIVCELJBGL5, RIVCELJBGL6, RIVCELJBGL7]) + RIVCELJBGL8
TOTBGE = BGTECH + BGEPAHA
LIG70YT = INDC * INDP * 1 - INDV * ART1731BIS * LIG0 * LIG2
ABPRV = arr(1 - IND_APBV * min(APBV, PL_PB * APBV / sum([APBV * 1 - IND_APBV, APBC * 1 - IND_APBC, APB1 * 1 - IND_APB1, APB2 * 1 - IND_APB2, APB3 * 1 - IND_APB3, APB4 * 1 - IND_APB4])) + IND_APBV * APBV)
LIGISFIP = is_positive(ISFFIP) * 1 - is_positive(ANNUL2042) * 1 - null(5 - V_IND_TRAIT) * LIGISF + present(ISFFIP) * is_positive(DISFBASE) * 1 - is_positive(ANNUL2042) * null(5 - V_IND_TRAIT)
MIBRABP = MIB_ABVP + MIB_ABPP
XDF2 = X10MINS2
ACODJTJU = ACODJTJU_1 * 1 - ART1731BIS + min(ACODJTJU_1, max(ACODJTJU_P + ACODJTJUP2, ACODJTJU1731 + 0) * 1 - PREM8_11) * ART1731BIS
PERPNONSALP = PERPBANP + PERPBICMNP + PERPBICPNP + PERPBNCMNP + PERPBNCPNP
XIND_10C = positif_ou_nul(X10MINSC - FRNC)
TIND_10MIN_02 = is_positive(TDEDMIN2 - TDFN2) * is_positive(TTSB2)
_2RCAV = max(0, PROVIE - _2ABAVC)
REPINVIEU = RESIVIEU1 + RESIVIEU2 + RESIVIEU3 + RESIVIEU4 + RESIVIEU5 + RESIVIEU6 + RESIVIEU7 + RESIVIEU8
TAPB3 = max(TPLR3, TEXPR3 * TX_DEDPER / 100)
RSE1N = max(0, RSE1 - CIRSE1)
AFOREST = AFOREST_1 * 1 - ART1731BIS + min(AFOREST_1, max(AFOREST_P + AFORESTP2, AFOREST1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
LIGTITREXVP = is_positive(EXOVOUS) * 1 - is_positive(EXOCJT) * is_positive(EXOPAC) * 1 - is_positive(LIG2501) * LIG1 * LIG2
LIG4402 = is_positive(V_FORCA) * 1 - positif_ou_nul(BAFC) * LIG0
XDFV = X10MINSV
T10MINSC = max(min(TTSBC, TDEDMINC), TDFNC)
LIGTITREXC = 1 - is_positive(EXOVOUS) * is_positive(EXOCJT) * 1 - is_positive(EXOPAC) * 1 - is_positive(LIG2501) * LIG1 * LIG2
MIBNPRABC = MIB_ABNPVC + MIB_ABNPPC
LIGF10P = is_positive(F10AP + F10BP) * LIG0 * LIG2
TSPEABPP = arr(TSPEABP * BNCPROP + AUTOBNCP / TSPETOTP)
LIGRCELJBGL = is_positive(RIVCELJBGL1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
LIG40YT = INDP * 1 - INDV * 1 - INDC * ART1731BIS * LIG0 * LIG2
RIVCELNBGL8 = arr(min(CELLIERNB + CELLIERNG + CELLIERNL, LIMCELLIER) * is_positive(CELLIERNB) * TX25 / 100 + min(CELLIERNB + CELLIERNG + CELLIERNL, LIMCELLIER) * is_positive(CELLIERNG) * TX15 / 100 + min(CELLIERNB + CELLIERNG + CELLIERNL, LIMCELLIER) * is_positive(CELLIERNL) * TX40 / 100) - 8 * RIVCELNBGL1 * 1 - V_CNR
TBICNPABP = min(TBICNPPROVP, arr(TMIB_ABNPVP / MIBNPVENP + TMIB_ABNPPP / MIBNPPRESP))
LIGBPLIB = present(RCMLIB) * LIG0 * 1 - null(4 - V_REGCO) * LIG2
TSPEABNPV = TSPEABV - TSPEABPV
RDRCM1NEGPLAF = min(COD2FA, abs(RDRCM1))
XDFN4 = min(PLAF_DEDFORFTS, XTPS104)
LIGPRELIB = is_positive(present(PPLIB) + present(RCMLIB)) * LIG0 * LIG2
LIG_REVASS = positif_ou_nul(ALLOV + ALLOC + ALLOP) * positif_ou_nul(TSHALLOV + TSHALLOC + TSHALLOP) * LIG0 * LIG2
RSE1BASE = RSE1N - CSPROVYD
ABNCPNETV = AUTOBNCV - TBNCPABV
LIGVIEU = is_positive(RESIVIEU) * is_positive(RESIVIEU1 + RESIVIEU2 + RESIVIEU3 + RESIVIEU4 + RESIVIEU5 + RESIVIEU6 + RESIVIEU7 + RESIVIEU8) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIG_DEFNPI = is_positive(present(DEFBIC6) + present(DEFBIC5) + present(DEFBIC4) + present(DEFBIC3) + present(DEFBIC2) + present(DEFBIC1)) * LIG0 * LIG2
RESTIMOF = min(RIMOSAUVRF, LIM_RESTIMO - RESTIMOD - RESTIMOB - RESTIMOC)
RIVCELHJK8 = arr(min(CELLIERHK + CELLIERHJ + 0, LIMCELLIER) * is_positive(CELLIERHJ) * TX25 / 100 + min(CELLIERHK + CELLIERHJ + 0, LIMCELLIER) * is_positive(CELLIERHK) * TX40 / 100) - 8 * RIVCELHJK1 * 1 - V_CNR
LIGMIBMV = is_positive(BICPMVCTV + BICPMVCTC + BICPMVCTP) * 1 - null(4 - V_REGCO) * LIG0
BNCDF2 = 1 - positif_ou_nul(NOCEPIMP + SPENETNPF) * DABNCNP1 + positif_ou_nul(NOCEPIMP + SPENETNPF) * min(max(NOCEPIMP + SPENETNPF - DABNCNP6 - DABNCNP5 - DABNCNP4 - DABNCNP3 - DABNCNP2, 0) - DABNCNP1, DABNCNP1) * -1 * positif_ou_nul(DABNCNP1 - max(NOCEPIMP + SPENETNPF - DABNCNP6 - DABNCNP5 - DABNCNP4 - DABNCNP3 - DABNCNP2, 0)) * 1 - is_positive(ART1731BIS) + min(DABNCNP1, DABNCNP - DIDABNCNP) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + DABNCNP1 * is_positive(is_positive(ART1731BIS * PREM8_11) + null(8 - CMAJ) + null(11 - CMAJ))
BCIHABPRIN3 = min(max(0, BCIHP - BCIHABPRIN1 - BCIHABPRIN2), PREHABTN) * 1 - V_CNR
IS024 = arr(DS024 * NB2)
LIGRCEL = is_positive(RIVCEL1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
TDFN3 = min(PLAF_DEDFORFTS, TTPS103)
RIVCELHJK3 = RIVCELHJK1
LIGTITREXVCP = is_positive(EXOVOUS) * is_positive(EXOCJT) * is_positive(EXOPAC) * 1 - is_positive(LIG2501) * LIG1 * LIG2
LIG8FV = is_positive(REVFONC) * 1 - IND_REV8FV
BAEMC = arr(_4BAHREC - _4DEFBAHREC * MAJREV) * positif_ou_nul(BARSC) + 0
LIG0040 = INDP * 1 - INDV * 1 - INDC * 1 - ART1731BIS * LIG0 * LIG2
PERPINDV = is_positive(is_positive(is_positive(PERP_INDV) + 1 - is_positive(PERP_INDV) * 1 - is_positive(PRBRV + PALIV)) * is_positive(INDREV1A8) + 1 - is_positive(PERP_INDV) * is_positive(PRBRV + PALIV) * is_positive(PERP_COTV) + PERPMUTU * 1 - is_positive(PERP_INDV + PERP_COTV)) * 1 - PERP_NONV * 1 - V_CNR
LIGTITREXVC = is_positive(EXOVOUS) * is_positive(EXOCJT) * 1 - is_positive(EXOPAC) * 1 - is_positive(LIG2501) * LIG1 * LIG2
DFN1 = min(PLAF_DEDFORFTS, TPS101)
DOMAVTO = DOMAVTD + DOMAVTG
SFL = is_positive(V_0AL + 0) * BOOL_CDV * BOOL_PACSFL * 2 * is_positive(V_0AP + 0) + 9 * 1 - BOOL_W * is_positive(1 - V_0AP + 0) * is_positive(1 - V_0AG + 0) * is_positive(1 - V_0AN + 0) + 7 * BOOL_W * is_positive(1 - V_0AP + 0) + 15 * is_positive(V_0AN + 0) * 1 - BOOL_W * is_positive(1 - V_0AG + 0) * is_positive(1 - V_0AP + 0) + 14 * is_positive(V_0AG + 0) * 1 - BOOL_W * is_positive(1 - V_0AP + 0)
LIGRCELHJK = is_positive(RIVCELHJK1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
SPENETNPP = max(0, BNCNPP - SPEABNPP)
SFUTILE = SFM + SFCD1 + SFCD2 + SFV1 + SFV2 + SFL
RIVCELNBGL6 = RIVCELNBGL1
LIG1130 = is_positive(present(REPSOF)) * LIG0 * LIG2
TPS10V = arr(TSBV * TX_DEDFORFTS / 100)
LIGNOCEPIMP = present(NOCEPIMPV) + present(NOCEPIMPC) + present(NOCEPIMPP) * LIG0 * LIG2
LIG0030 = INDC * 1 - INDV * 1 - INDP * 1 - ART1731BIS * LIG0 * LIG2
BICNPV = BINTAV + BINHTAV + MIB_NETNPVV + MIB_NETNPPV
SPENETC = SPENETPC + SPENETNPC
RIVCELJP1 = RCEL_JP_R * is_positive(ACELJP_R)
MIB_ABNPPP = max(0, arr(MIB_APP * MIBNPPRESP / MIB_TPRESP)) * present(MIBMEUP) + MIB_APP - MIB_ABPP * 1 - present(MIBMEUP)
AUBAINE11 = max(0, min(V_A11REEL, V_DIFTEOREEL - AUBAINE13A - AUBAINE13B - AUBAINE12))
PPE_FINJJ = inf(PPE_FINJJMM / 100)
RIVCELNBGL2 = RIVCELNBGL1
TIND_10MIN_01 = is_positive(TDEDMIN1 - TDFN1) * is_positive(TTSB1)
REVTP = BPTP2 + BPTPVT + BPTP4 + BTP3A + BPTP40 + BPTP24 + BPTP18 + BPTPSJ
TAPRV = TIND_APBV * TABPRV + 1 - TIND_APBV * min(TABPRV, TPL_PB)
LIGBNCDF2 = is_positive(BNCDF2) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
BPTPD = BTP3A * is_positive(V_EAD) * 1 - is_positive(present(TAX1649) + present(RE168))
PPE_RPROV = is_positive(PPE_RPRO1V) * arr(1 + PPETXRPRO / 100 * PPE_RPRO1V) + 1 - is_positive(PPE_RPRO1V) * arr(PPE_RPRO1V * 1 - PPETXRPRO / 100)
RSE2BASE = max(0, RSE8TV - CIRSE8TV - CSPROVYF) + max(0, RSE8SA - CIRSE8SA - CSPROVYN)
BASE7UVG = max(0, min(REPFOR + REPSINFOR + REPFOR1 + REPSINFOR1 + REPSINFOR2, PLAFRED_FORTRA) - REPFOR + REPSINFOR + REPSINFOR1) * 1 - V_CNR
RRFIPS = RRFI
LIG0010 = INDV * INDC * INDP * 1 - ART1731BIS * LIG0 * LIG2
MIB_NETPP = MIBPRESP - MIB_ABPP
ZIG_BPCOS = is_positive(CS_BPCOS + RD_BPCOS + PS_BPCOS) * 1 - V_CNR * LIG1 * LIG2
TRCM = TRCM1 + _2RNC + _2RCAV + _2RAO
ABPR2 = arr(1 - IND_APB2 * min(APB2, PL_PB * APB2 / sum([APBV * 1 - IND_APBV, APBC * 1 - IND_APBC, APB1 * 1 - IND_APB1, APB2 * 1 - IND_APB2, APB3 * 1 - IND_APB3, APB4 * 1 - IND_APB4])) + IND_APB2 * APB2)
LIG1431 = is_positive(BPTP18) * LIG0 * LIG2
MLOCABV = MIB_ABNPVLV + MIB_ABNPPLV
MIB_NETNPVC = MIBNPVENC - MIB_ABNPVC
RSE3BASE = RSE3N - CSPROVYG
NSP = NPS + NSA + NCC
MIB_NETNPPLV = MIBMEUV - MIB_ABNPPLV
TMIB_ABNPVLP = TMIB_AVP - TMIB_ABVP - TMIB_ABNPVP * is_positive(present(MIBGITEP) + present(LOCGITP))
REPINVIAN = RESIVIAN1 + RESIVIAN2 + RESIVIAN3 + RESIVIAN4 + RESIVIAN5 + RESIVIAN6 + RESIVIAN7 + RESIVIAN8
BSNCC = max(0, min(REPSNON, LIM_SOCNOUV2 * 1 + BOOL_0AM - BSNCL - BSNCM - BSNCN))
BNCIF = 1 - is_positive(ART1731BIS) * max(0, NOCEPIMP + SPENETNPF - DABNCNP6 - DABNCNP5 - DABNCNP4 - DABNCNP3 - DABNCNP2 - DABNCNP1) + is_positive(ART1731BIS) * 1 - is_positive(DEFRIBNC) * 1 - PREM8_11 * max(0, NOCEPIMP + SPENETNPF - DIDABNCNP) + is_positive(DEFRIBNC) * 1 - PREM8_11 * max(0, NOCEPIMP + SPENETNPF - DIDABNCNP + DEFBNCNP)
LIGAMEETREV = is_positive(INDREV1A8) * LIG1 * LIG2
PPE_RPRO1C = FEXC + BAFC + BAEXC + BACREC + _4BACREC - BACDEC * 1 - is_positive(ART1731BIS) + BAHEXC + BAHREC + _4BAHREC - BAHDEC * 1 - is_positive(ART1731BIS) + BICEXC + BICNOC - BICDNC * 1 - is_positive(ART1731BIS) + BIHEXC + BIHNOC - BIHDNC * 1 - is_positive(ART1731BIS) + BNCEXC + BNCREC - BNCDEC * 1 - is_positive(ART1731BIS) + BNHEXC + BNHREC - BNHDEC * 1 - is_positive(ART1731BIS) + MIBEXC + BNCPROEXC + TMIB_NETVC + TMIB_NETPC + TSPENETPC + BAFPVC + MIBPVC + BNCPROPVC + BAFORESTC + LOCPROC + LOCPROCGAC - LOCDEFPROCGAC * 1 - is_positive(ART1731BIS) - LOCDEFPROC * 1 - is_positive(ART1731BIS) + XHONOAAC + XHONOC
RCODJU8 = arr(ACODJU * TX11 / 100) - RCODJU1 - RCODJU2 - RCODJU3 - RCODJU4 - RCODJU5 - RCODJU6 - RCODJU7 - RCODJU7
LIGTXF40 = is_positive(BPV40V + BPV40C + 0) * LIG0 * LIG2
LIGANNUL2042 = LIG2 * LIG0
BPTP3 = BTP3A * 1 - is_positive(V_EAD + V_EAG) * 1 - is_positive(present(TAX1649) + present(RE168))
LIGBNCMV = is_positive(BNCPMVCTV + BNCPMVCTC + BNCPMVCTP) * 1 - null(4 - V_REGCO) * LIG0
REPINVMEUBLE = RRESINEUV1 + RRESINEUV2 + RRESINEUV3 + RRESINEUV4 + RRESINEUV5 + RRESINEUV6 + RRESINEUV7 + RRESINEUV8
PERPNONSALC = PERPBANC + PERPBICMNC + PERPBICPNC + PERPBNCMNC + PERPBNCPNC
TIND_APB3 = positif_ou_nul(TPLR3 - TEXPR3 * TX_DEDPER / 100)
SPEABNPV = SPEABV - SPEABPV
BAEMP = arr(_4BAHREP - _4DEFBAHREP * MAJREV) * positif_ou_nul(BARSP) + 0
TMIB_NETNPVC = MIBNPVENC - TMIB_ABNPVC
RSE5AC = max(0, RSE5 - CIRSE5)
BASE7UXI = max(0, min(REPSINFOR + REPFOR + REPSINFOR1 + REPFOR1 + REPSINFOR2 + REPFOR2 + REPSINFOR2 + REPFOR3 + REPSINFOR4, PLAFRED_FORTRA) - REPSINFOR + REPFOR + REPSINFOR1 + REPFOR1 + REPSINFOR2 + REPFOR2 + REPSINFOR2) * 1 - V_CNR
LIGMLOC = is_positive(present(MIBMEUV) + present(MIBMEUC) + present(MIBMEUP) + present(MIBGITEV) + present(MIBGITEC) + present(MIBGITEP) + present(LOCGITV) + present(LOCGITC) + present(LOCGITP)) * LIG0 * LIG2
BNNC = BNRC + SPENETC
RISFFCPI_2 = max(0, min(PLAF_ISFRED - RISFDONF_1 - RISFDONCEE_1 - RISFPMED_1 - RISFPMEI_1 - RISFFIP_1, RISFFCPI_1))
DFN3 = min(PLAF_DEDFORFTS, TPS103)
CIGE = arr(RGTECH + RGEPAHA) * 1 - is_positive(RE168 + TAX1649) * 1 - V_CNR
APRV = IND_APBV * ABPRV + 1 - IND_APBV * min(ABPRV, PL_PB)
TMIB_NETNPVP = MIBNPVENP - TMIB_ABNPVP
BA9RFOR = arr(min(REPSINFOR, PLAFRED_FORTRA) * TX25 / 100) * 1 - V_CNR
LIG4401 = is_positive(V_FORVA) * 1 - positif_ou_nul(BAFV) * LIG0
MIB_NETNPVLV = MIBGITEV + LOCGITV - MIB_ABNPVLV
LIG20YT = INDV * 1 - INDC * 1 - INDP * ART1731BIS * LIG0 * LIG2
TSPENETPP = max(0, BNCPROP + AUTOBNCP - TSPEABPP)
RSN_CN = BSNCN * TX18 / 100
BNN = sum([BNRV, BNRC, BNRP]) + SPENETPF + max(0, SPENETNPF + NOCEPIMP - TOTDABNCNP) * 1 - ART1731BIS + sum([BNRV, BNRC, BNRP]) + SPENETPF + max(0, SPENETNPF + NOCEPIMP - DIDABNCNP + DEFBNCNPF) * ART1731BIS * 1 - PREM8_11 + sum([BNRV, BNRC, BNRP]) + SPENETPF + max(0, SPENETNPF + NOCEPIMP) * ART1731BIS * PREM8_11
_4BAQP = max(0, _4BACREP - _4DEFBACREP) * positif_ou_nul(BARAP) + arr(max(0, _4BAHREP - _4DEFBAHREP) * MAJREV) * positif_ou_nul(BARSP)
XTPS101 = arr(XEXTS1 * TX_DEDFORFTS / 100)
TIND_MIN4 = 1 - is_positive(TIND_10MIN_04)
RD_RTF = CS_RTF
TFPTV = max(TFRDV, T10MINSV)
RISFPMEI_2 = max(0, min(PLAF_ISFRED - RISFDONF_1 - RISFDONCEE_1 - RISFPMED_1, RISFPMEI_1))
TPRNNV = TEXPRV - TAPRV
RSN_CF = BSNCF * TX18 / 100
TMIB_ABNPVLC = TMIB_AVC - TMIB_ABVC - TMIB_ABNPVC * is_positive(present(MIBGITEC) + present(LOCGITC))
TSPEABNPP = TSPEABP - TSPEABPP
XIND_102 = positif_ou_nul(X10MINS2 - FRN2)
BASE7UTF = max(0, min(REPFOR + REPSINFOR + REPSINFOR1, PLAFRED_FORTRA) - REPSINFOR) * 1 - V_CNR
BAHQV = BANV + BAMV + BAFORV
BICIMPV = BIHTAV + BIPTAV + MIB_NETVV + MIB_NETPV
LIGCESDOM = is_positive(BPTPDIV) * is_positive(PVTAXSB) * is_positive(V_EAD + 0) * LIG0 * LIG2
MIB_ABNPPLC = MIB_APC - MIB_ABPC - MIB_ABNPPC * present(MIBMEUC)
ACODIV = min(PLAF_RESINEUV - ACODIL - ACODIN - ACODIJ, INVNPROF2) * 1 - V_CNR
TIND_APB2 = positif_ou_nul(TPLR2 - TEXPR2 * TX_DEDPER / 100)
BAQV = BAEV + BAEMV
LIG25012 = 1 - is_positive(IND_REV) * null(2 - V_REGCO) * LIG2
RSN_CC = BSNCC * TX18 / 100
LIGNPLOCF = is_positive(LOCNPCGAV + LOCNPCGAC + LOCNPCGAPAC + LOCDEFNPCGAV + LOCDEFNPCGAC + LOCDEFNPCGAPAC + LOCNPV + LOCNPC + LOCNPPAC + LOCDEFNPV + LOCDEFNPC + LOCDEFNPPAC + LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1 + LOCGITCV + LOCGITCC + LOCGITCP + LOCGITHCV + LOCGITHCC + LOCGITHCP) * 1 - null(4 - V_REGCO) * LIG0
_1RAN = 1 - is_positive(EXFR) * RCMRNABD - FRAN + is_positive(EXFR) * 0
LIG1430 = is_positive(BPTP3) * LIG0 * LIG2
LIG0070 = INDC * INDP * 1 - INDV * 1 - ART1731BIS * LIG0 * LIG2
REPLNOU = RCODOU8 + RCODOU1 * 7 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
_2FRAN = is_positive(REVACT) * null(4 - V_IND_TRAIT) * is_positive(RTCAR + RCMNAB) * arr(RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, BRCMTOT + 0) * ART1731BIS * REVACT / max(1, TRCMABD + RTCAR + RCMNAB)) + 1 - is_positive(RTCAR + RCMNAB) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, BRCMTOT + 0) * ART1731BIS - FRAN + null(5 - V_IND_TRAIT) * is_positive(RTCAR + RCMNAB) * arr(RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P + 0), BRCMTOT1731 + 0)) * ART1731BIS * REVACT / max(1, TRCMABD + RTCAR + RCMNAB)) + 1 - is_positive(RTCAR + RCMNAB) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P + 0), BRCMTOT1731 + 0)) * ART1731BIS - FRAN
RESINEUV1 = arr(arr(ACODIN / 9) * TX20 / 100) + arr(arr(ACODIJ / 9) * TX18 / 100) + arr(arr(ACODIV / 9) * TX18 / 100)
TBICPROVC = max(0, arr(TMIB_ABVC * AUTOBICVC / MIBVENC + AUTOBICVC + TMIB_ABPC * AUTOBICPC / MIBPRESC + AUTOBICPC))
TIND_10V = positif_ou_nul(T10MINSV - TFRDV + COD1AE)
IND_APBC = positif_ou_nul(PLRC - EXPRC * TX_DEDPER / 100)
BA13UXI = arr(BASE7UXI * TX18 / 100)
VARREVKIRE = BPCAPTAXV + BPCAPTAXC + sum([XBAV + XBIPV + XBINPV + XBNV + XBNNPV, XBAC + XBIPC + XBINPC + XBNC + XBNNPC, XBAP + XBIPP + XBINPP + XBNP + XBNNPP]) + sum([MIBEXV + MIBNPEXV + BNCPROEXV + XSPENPV, MIBEXC + MIBNPEXC + BNCPROEXC + XSPENPC, MIBEXP + MIBNPEXP + BNCPROEXP + XSPENPP]) + sum([BNCCRV, BNCCRC, BNCCRP]) + sum([BNCCRFV, BNCCRFC, BNCCRFP]) + sum([XETSNNV, XETSNNC]) + sum([XEXOCETV, XEXOCETC]) + sum([XTSNNV, XTSNNC]) + sum([XTSNNTYV, XTSNNTYC]) + sum([XHSUPTSNN1, XHSUPTSNN2, XHSUPTSNN3, XHSUPTSNN4, XHSUPTSNNV, XHSUPTSNNC]) + XFORFAIT + XACCESS + RCMLIB + PPLIB + GAINABDET + RCMEXCREF + RCM2FA + XELU + RCMIMPAT + PVIMMO + PVMOBNR + PVTITRESOC + BTP3A + 1 - is_positive(IPVLOC) * 1 - is_positive(present(TAX1649) + present(RE168)) * PVTAUX
LIG_SAL = positif_ou_nul(TSHALLOV + TSHALLOC + TSHALLOP) * positif_ou_nul(ALLOV + ALLOC + ALLOP) * LIG0 * LIG2
LIGTITREXP = 1 - is_positive(EXOVOUS) * 1 - is_positive(EXOCJT) * is_positive(EXOPAC) * 1 - is_positive(LIG2501) * LIG1 * LIG2
LIG_BICPP = present(BICNOP) + present(BICDNP) + present(BIHNOP) + present(BIHDNP) * 1 - is_positive(ANNUL2042) * LIG0
BASE7UWH = max(0, min(REPFOR + REPSINFOR + REPFOR1 + REPSINFOR1 + REPFOR2 + REPSINFOR2 + REPSINFOR3, PLAFRED_FORTRA) - REPFOR + REPSINFOR + REPFOR1 + REPSINFOR1 + REPSINFOR2) * 1 - V_CNR
LIGRCODJT = is_positive(LOCMEUBJT + 0) * is_positive(RCODJT1 + RCODJT2 + RCODJT3 + RCODJT4 + RCODJT5 + RCODJT6 + RCODJT7 + RCODJT8) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIG2503 = 1 - is_positive(IND_REV) * 1 - positif_ou_nul(IND_TDR) * LIG2 * 1 - null(2 - V_REGCO)
RFOREST3 = min(REPFOR2 + REPSINFOR3 + REPFOR3 + REPSINFOR4, max(0, PLAF_FOREST1 * 1 + BOOL_0AM - ACOTFOR - RFOREST1 - RFOREST2))
APB4 = max(PLR4, EXPR4 * TX_DEDPER / 100)
SPENETPV = max(0, BNCPROV - SPEABPV)
MIBNPRABV = MIB_ABNPVV + MIB_ABNPPV
LIGDIDAB = positif_ou_nul(DIDABNCNP) * is_positive(LIGDAB) * LIG0 * LIG2
LIGTITREXV = is_positive(EXOVOUS) * 1 - is_positive(EXOCJT) * 1 - is_positive(EXOPAC) * 1 - is_positive(LIG2501) * LIG1 * LIG2
BSNCU = max(0, min(PETIPRISE, LIM_SOCNOUV2 * 1 + BOOL_0AM - BSNCL - BSNCM - BSNCN - BSNCC))
LIG121 = is_positive(DEFRITS) * LIGANNUL2042
TYPEPPE = 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG0 * LIG2
_4BAQC = max(0, _4BACREC - _4DEFBACREC) * positif_ou_nul(BARAC) + arr(max(0, _4BAHREC - _4DEFBAHREC) * MAJREV) * positif_ou_nul(BARSC)
BNCDF3 = 1 - positif_ou_nul(NOCEPIMP + SPENETNPF) * DABNCNP2 + positif_ou_nul(NOCEPIMP + SPENETNPF) * min(max(NOCEPIMP + SPENETNPF - DABNCNP6 - DABNCNP5 - DABNCNP4 - DABNCNP3, 0) - DABNCNP2, DABNCNP2) * -1 * positif_ou_nul(DABNCNP2 - max(NOCEPIMP + SPENETNPF - DABNCNP6 - DABNCNP5 - DABNCNP4 - DABNCNP3, 0)) * 1 - is_positive(ART1731BIS) + min(DABNCNP2, DABNCNP - DIDABNCNP - BNCDF2) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + DABNCNP2 * is_positive(is_positive(ART1731BIS * PREM8_11) + null(8 - CMAJ) + null(11 - CMAJ))
LIGNOCEP = present(NOCEPV) + present(NOCEPC) + present(NOCEPP) * LIG0 * LIG2
BPTPG = BTP3A * is_positive(V_EAG) * 1 - is_positive(present(TAX1649) + present(RE168))
DCTSPE = positif_ou_nul(BNRTOT + SPENETPF) * BNCPMVCTV + 1 - positif_ou_nul(BNRTOT + SPENETPF) * BNCPMVCTV - abs(BNRTOT + SPENETPF) + 1 - positif_ou_nul(BNRTOT + SPENETPF) * null(BNCPMVCTV - abs(BNRTOT + SPENETPF)) * BNCPMVCTV
LIG_BICPV = present(BICNOV) + present(BICDNV) + present(BIHNOV) + present(BIHDNV) * 1 - is_positive(ANNUL2042) * LIG0
RIVCELJOQR1 = RCEL_JOQR_R * is_positive(ACELJOQR_R)
REPLOCOU = REPLNOU
TMIB_NETNPPP = MIBNPPRESP - TMIB_ABNPPP
RFNTEO = RFORDI + RFROBOR - min(min(RFDORD, RFDORD1731 + 0) * is_positive(ART1731BIS) + RFDORD * 1 - ART1731BIS + min(RFDANT, RFDANT1731 + 0) * is_positive(ART1731BIS) + RFDANT * 1 - ART1731BIS, RFORDI + RFROBOR) - RFDHIS * 1 - ART1731BIS * present(RFROBOR) + RRFI * 1 - present(RFROBOR)
BA11RFOR = arr(BASE7UVG * TX22 / 100)
XDFN3 = min(PLAF_DEDFORFTS, XTPS103)
LIG29 = is_positive(present(RFORDI) + present(RFDHIS) + present(RFDANT) + present(RFDORD)) * 1 - is_positive(IPVLOC) * 1 - is_positive(LIG30) * LIG1 * LIG2 * IND_REV
LIGVIAN = is_positive(RESIVIANT) * is_positive(RESIVIAN1 + RESIVIAN2 + RESIVIAN3 + RESIVIAN4 + RESIVIAN5 + RESIVIAN6 + RESIVIAN7 + RESIVIAN8) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DFNC = min(PLAF_DEDFORFTS, TPS10C)
_2RAN = 1 - is_positive(EXFR) * _2RCMRNABD - _2FRAN + is_positive(EXFR) * 0
RESINEUV2 = arr(arr(ACODIN / 9) * TX20 / 100) + arr(arr(ACODIJ / 9) * TX18 / 100) + arr(arr(ACODIV / 9) * TX18 / 100)
RIVCELJOQR3 = RIVCELJOQR1
TBICPABC = min(TBICPROVC, arr(TMIB_ABVC * AUTOBICVC / MIBVENC + AUTOBICVC + TMIB_ABPC * AUTOBICPC / MIBPRESC + AUTOBICPC))
BCIHABPRIN4 = min(max(0, BCIHP - BCIHABPRIN1 - BCIHABPRIN2 - BCIHABPRIN3), PREHABTN1) * 1 - V_CNR
MIBRNETP = max(0, MIBRP - MIBRABP)
RLOCIDFG8 = arr(ACODID * TX11 / 100) + arr(ACODIF * TX18 / 100) + arr(ACODIG * TX11 / 100) - RLOCIDFG1 - RLOCIDFG2 - RLOCIDFG3 - RLOCIDFG4 - RLOCIDFG5 - RLOCIDFG6 - RLOCIDFG7 - RLOCIDFG7
LIG01 = 1 - is_positive(RE168 + TAX1649) * 1 - is_positive(ANNUL2042) * IND_REV
REPLNPU = RCODJU1 + RCODJU2 + RCODJU3 + RCODJU4 + RCODJU5 + RCODJU6 + RCODJU7 + RCODJU8
LIG0060 = INDV * INDP * 1 - INDC * 1 - ART1731BIS * LIG0 * LIG2
PPE_FINMM = PPE_FINJJMM - PPE_FINJJ * 100
LIG931 = is_positive(DEFRIRCM) * is_positive(RCMFR) * LIGANNUL2042
MIB_NETNPVLP = MIBGITEP + LOCGITP - MIB_ABNPVLP
TPS104 = arr(TSB4 * TX_DEDFORFTS / 100)
PPE_FINRANG = PPE_FINJJ + PPE_FINMM - 1 * 30 - 1 * is_positive(PPE_DATE_FIN)
TMIB_ABNPPLC = TMIB_APC - TMIB_ABPC - TMIB_ABNPPC * present(MIBMEUC)
TABPRC = arr(1 - TIND_APBC * min(TAPBC, is_positive(TEXPR1 + TEXPR2 + TEXPR3 + TEXPR4) * TPL_PB * TAPBC / sum([TAPBV * 1 - TIND_APBV, TAPBC * 1 - TIND_APBC, TAPB1 * 1 - TIND_APB1, TAPB2 * 1 - TIND_APB2, TAPB3 * 1 - TIND_APB3, TAPB4 * 1 - TIND_APB4]) + 1 - is_positive(TEXPR1 + TEXPR2 + TEXPR3 + TEXPR4) * max(0, TPL_PB - TABPRV)) + TIND_APBC * TAPBC)
XDFC = X10MINSC
_10MINSC = max(min(TSBC, DEDMINC), DFNC)
TIND_MIN1 = 1 - is_positive(TIND_10MIN_01)
LIGCESDOMG = is_positive(BPTPDIV) * is_positive(PVTAXSB) * is_positive(V_EAG + 0) * LIG0 * LIG2
PPE_DEBRANG = PPE_DEBJJ + PPE_DEBMM - 1 * 30
REPLNPT = RCODJT1 + RCODJT2 + RCODJT3 + RCODJT4 + RCODJT5 + RCODJT6 + RCODJT7 + RCODJT8
RDRCM1BIS = 1 - is_positive(RDRCM1) * RDRCM1NEGPLAF * -1 + positif_ou_nul(RDRCM1) * RDRCM1
BA10RFOR = arr(BASE7UTF * TX25 / 100)
BALNP = max(0, NOCEPIMP)
LIG_BICPC = present(BICNOC) + present(BICDNC) + present(BIHNOC) + present(BIHDNC) * 1 - is_positive(ANNUL2042) * LIG0
TREP10V = TIND_10V * TD10MV + 1 - TIND_10V * TFPTV
ISFDEC = arr(17500 - TX_TR5_ISF / 10000 * ISFBASE * is_positive(ISFBASE - LIM_ISFINF) * is_positive(LIM_ISFDEC - ISFBASE)) * is_positive(ISF1)
FRDC = 1 - is_positive(PREM8_11) * FRNC * is_positive(FRNC - _10MINSC) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNC, FRDPROVC) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNC, min(FRDPROVC, max(FRDPROVCP2, FRDPROVC1731)))
TAPB2 = max(TPLR2, TEXPR2 * TX_DEDPER / 100)
NSA2 = min(1 - is_positive(PAC + V_0CH) * null(SFUTILE - 14) + null(SFUTILE - 7) + null(SFUTILE - 15) * 1 - is_positive(NIN) + null(SFUTILE - 7) * BOOL_0AZ * V_0AV, 1) * 0.5
GECUMWL = max(0, BGTECH + BGEPAHA - min(P2GE, BGEPAHA + BGTECH) + BTANTGECUMWL)
T10MINS3 = max(min(TTSB3, TDEDMIN3), TDFN3)
RIVCELJP2 = RIVCELJP1
ABICPNETV = AUTOBICVV + AUTOBICPV - max(0, TMIB_AUTOAVV - TMIB_ABNPVLV) - max(0, TMIB_AUTOAPV - TMIB_ABNPPLV)
MIB_NETNPPLC = MIBMEUC - MIB_ABNPPLC
PLACOMP = PLAFIMP * is_positive(V_0AV * V_0CF + V_0DJ + V_0CH + V_0CR + V_9XX * 1 - is_positive(V_0AZ)) + 2 * PLAF_PLACOMP * max(0, NIN + NSA2 + NCC) + arr(PLAF_PLACOMP / 2 * V_0CI)
LIGRCELJOQR = is_positive(RIVCELJOQR1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
LIGLOCSEUL = 1 - is_positive(LIGNPLOC + LIGDEFNPLOC + LIGNPLOCF)
TIND_10MIN_0C = is_positive(TDEDMINC - TDFNC) * is_positive(TTSBC)
DIDABNCNP1 = min(NOCEPIMP + SPENETNPF, DABNCNP1 + DABNCNP2 + DABNCNP3 + DABNCNP4 + DABNCNP5 + DABNCNP6)
LIG_BICNPF = is_positive(present(BICDEC) + present(BICDEP) + present(BICDEV) + present(BICHDEC) + present(BICHDEP) + present(BICHDEV) + present(BICHREC) + present(BICHREP) + present(BICHREV) + present(BICREC) + present(BICREP) + present(BICREV) + present(DEFBIC6) + present(DEFBIC5) + present(DEFBIC4) + present(DEFBIC3) + present(DEFBIC2) + present(DEFBIC1)) * LIG0 * LIG2
MLOCNETV = max(0, MLOCDECV - MLOCABV)
MAJTXREGV1 = 1 - is_positive(V_NBCOD1728REGV) * 1 - is_positive(CMAJ) * is_positive(NMAJREGV1) * TXPF1728REGV + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728REGV) * -1
PPE_DEBUT = PPE_DEBRANG
TBNCNPABV = TBNCTOTABV - TBNCPABV
_3REVF = min(arr(RFCG * REAMOR / RFCD), RFCG - RFON - _2REVF)
LIG899YT = is_positive(RVTOT + LIG1100 + LIG910 + BRCMQ + RCMFR + REPRCM + LIGRCMABT + LIG2RCMABT + LIGPV3VG + LIGPV3WB + LIGPV3VE + RCMLIB + LIG29 + LIG30 + RFQ + _2REVF + _3REVF + LIG1130 + VLHAB + DFANT + ESFP + RE168 + TAX1649 + R1649 + PREREV) * 1 - is_positive(LIG10YT + LIG20YT + LIG30YT + LIG40YT + LIG50YT + LIG60YT + LIG70YT) * ART1731BIS
BICNPC = BINTAC + BINHTAC + MIB_NETNPVC + MIB_NETNPPC
_2RIA = _2RAN
RSE4N = max(0, RSE4 - CIRSE4)
MIB_ABNPVLC = MIB_AVC - MIB_ABVC - MIB_ABNPVC * is_positive(present(MIBGITEC) + present(LOCGITC))
TBNCPABP = arr(TSPEABPP * AUTOBNCP / BNCPROP + AUTOBNCP)
_10MINS3 = max(min(TSB3, DEDMIN3), DFN3)
LIGRCELJP = is_positive(RIVCELJP1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
TBICNPPROVC = max(0, arr(TMIB_ABNPVC / MIBNPVENC + TMIB_ABNPPC / MIBNPPRESC))
LIG900 = is_positive(RVTOT + LIG1100 + LIG910 + BRCMQ + RCMFR + REPRCM + LIGRCMABT + LIG2RCMABT + LIGPV3VG + LIGPV3WB + LIGPV3VE + RCMLIB + LIG29 + LIG30 + RFQ + _2REVF + _3REVF + LIG1130 + VLHAB + DFANT + ESFP + RE168 + TAX1649 + R1649 + PREREV) * is_positive(LIG0010 + LIG0020 + LIG0030 + LIG0040 + LIG0050 + LIG0060 + LIG0070) * 1 - ART1731BIS
MIB_NETNPPP = MIBNPPRESP - MIB_ABNPPP
TIND_MIN2 = 1 - is_positive(TIND_10MIN_02)
ABICPNETP = AUTOBICVP + AUTOBICPP - max(0, TMIB_AUTOAVP - TMIB_ABNPVLP) - max(0, TMIB_AUTOAPP - TMIB_ABNPPLP)
REPCELNBGL = sum([RIVCELNBGL1, RIVCELNBGL2, RIVCELNBGL3, RIVCELNBGL4, RIVCELNBGL5, RIVCELNBGL6, RIVCELNBGL7]) + RIVCELNBGL8
ABICPNETC = AUTOBICVC + AUTOBICPC - max(0, TMIB_AUTOAVC - TMIB_ABNPVLC) - max(0, TMIB_AUTOAPC - TMIB_ABNPPLC)
BAQP = BAEP + BAEMP
TSPENETNPV = max(0, BNCNPV - TSPEABNPV)
TABTS1AJ = is_positive(SALEXTV + ALLOV + BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * TSHALLOV / TTSBV) + 1 - is_positive(SALEXTV + ALLOV + BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * TREP10V
SPENETP = SPENETPP + SPENETNPP
RETRESINEUV_1 = arr(arr(ACODIL / 9) * TX20 / 100) + arr(arr(ACODIN / 9) * TX20 / 100) + arr(arr(ACODIJ / 9) * TX18 / 100) + arr(arr(ACODIV / 9) * TX18 / 100)
RESINEUV3 = arr(arr(ACODIN / 9) * TX20 / 100) + arr(arr(ACODIJ / 9) * TX18 / 100) + arr(arr(ACODIV / 9) * TX18 / 100)
IND_10MIN_03 = is_positive(DEDMIN3 - DFN3) * is_positive(TSB3)
PRNNV = EXPRV - APRV
T10MINS1 = max(min(TTSB1, TDEDMIN1), TDFN1)
BCIFORETUT = max(0, min(SINISFORET, max(0, PLAF_FOREST1 * 1 + BOOL_0AM - BCIFORETUA - BCIFORETUB - BCIFORETUP))) * 1 - V_CNR
RSE4AC = max(0, RSE4 - CIRSE4)
PD10MP = PIND_MINP * PDFNP + 1 - PIND_MINP * P10MINSP
IND_10C = positif_ou_nul(_10MINSC - FRDC)
TD10M1 = TIND_MIN1 * TDFN1 + 1 - TIND_MIN1 * T10MINS1
RETCODIV = arr(arr(ACODIV / 9) * TX18 / 100)
BAQC = BAEC + BAEMC
ABPR4 = arr(1 - IND_APB4 * min(APB4, PL_PB * APB4 / sum([APBV * 1 - IND_APBV, APBC * 1 - IND_APBC, APB1 * 1 - IND_APB1, APB2 * 1 - IND_APB2, APB3 * 1 - IND_APB3, APB4 * 1 - IND_APB4])) + IND_APB4 * APB4)
IND_10MIN_02 = is_positive(DEDMIN2 - DFN2) * is_positive(TSB2)
MIBNPRNETV = max(0, MIBNPRV - MIBNPRABV)
TFRDVREP = is_positive(ART1731BIS) * max(0, FRNV - TFRDV) * null(TIND_10V)
LIGBNCDF3 = is_positive(BNCDF3) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
TABTS1AC = is_positive(ALLOV + BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * max(0, SALEXTV - COD1AD) / TTSBV) + 1 - is_positive(ALLOV + BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ)
RSE5N = max(0, RSE5 - CIRSE5)
CIRSE2 = CIRSE8TV + CIRSE8SA
IND_10MIN_01 = is_positive(DEDMIN1 - DFN1) * is_positive(TSB1)
FRG1 = is_positive(EXFR) * arr(EXFR * TRCM1 / TRCM) + 1 - is_positive(EXFR) * 0
RSE2N = max(0, RSE2 - CIRSE2)
RRFTEO = RFNTEO
PPE_FIN = PPE_FINRANG
LIG936 = is_positive(DEFRIRCM) * is_positive(REPRCM) * LIGANNUL2042
LIG899 = is_positive(RVTOT + LIG1100 + LIG910 + BRCMQ + RCMFR + REPRCM + LIGRCMABT + LIG2RCMABT + LIGPV3VG + LIGPV3WB + LIGPV3VE + RCMLIB + LIG29 + LIG30 + RFQ + _2REVF + _3REVF + LIG1130 + VLHAB + DFANT + ESFP + RE168 + TAX1649 + R1649 + PREREV) * 1 - is_positive(LIG0010 + LIG0020 + LIG0030 + LIG0040 + LIG0050 + LIG0060 + LIG0070) * 1 - ART1731BIS
FPTC = max(FRDC, _10MINSC)
DISFDEC = ISFDEC
_10MINS1 = max(min(TSB1, DEDMIN1), DFN1)
ISFBRUT = arr(ISF1 - ISFDEC * is_positive(LIM_ISFDEC - 1 - ISFBASE) + ISF1 * 1 - is_positive(LIM_ISFDEC - 1 - ISFBASE))
LIGDRFRP = is_positive(DRFRP) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
PIND_10C = positif_ou_nul(P10MINSC - FRDC + COD1BE)
BNCDF4 = 1 - positif_ou_nul(NOCEPIMP + SPENETNPF) * DABNCNP3 + positif_ou_nul(NOCEPIMP + SPENETNPF) * min(max(NOCEPIMP + SPENETNPF - DABNCNP6 - DABNCNP5 - DABNCNP4, 0) - DABNCNP3, DABNCNP3) * -1 * positif_ou_nul(DABNCNP3 - max(NOCEPIMP + SPENETNPF - DABNCNP6 - DABNCNP5 - DABNCNP4, 0)) * 1 - is_positive(ART1731BIS) + min(DABNCNP3, DABNCNP - DIDABNCNP - BNCDF2 - BNCDF3) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + DABNCNP3 * is_positive(is_positive(ART1731BIS * PREM8_11) + null(8 - CMAJ) + null(11 - CMAJ))
TABAVC = ABAVC + _2ABAVC
RIVCELJP4 = arr(min(CELLIERJP, LIMCELLIER) * is_positive(CELLIERJP) * TX36 / 100) - 4 * RIVCELJP1 * 1 - V_CNR
FRAR = is_positive(RCMHAB) * null(4 - V_IND_TRAIT) * is_positive(INTERE + RCMNAB) * arr(RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, BRCMTOT + 0) * ART1731BIS * RCMHAB / max(1, TRCMABD + RTCAR + RCMNAB)) + 1 - is_positive(INTERE + RCMNAB) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, BRCMTOT + 0) * ART1731BIS - FRAN - _2FRAN + null(5 - V_IND_TRAIT) * is_positive(INTERE + RCMNAB) * arr(RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P), BRCMTOT1731 + 0)) * ART1731BIS * RCMHAB / max(1, TRCMABD + RTCAR + RCMNAB)) + 1 - is_positive(INTERE + RCMNAB) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P), BRCMTOT1731 + 0)) * ART1731BIS - FRAN - _2FRAN
REPCELHJK = sum([RIVCELHJK1, RIVCELHJK2, RIVCELHJK3, RIVCELHJK4, RIVCELHJK5, RIVCELHJK6, RIVCELHJK7]) + RIVCELHJK8
_10MINS2 = max(min(TSB2, DEDMIN2), DFN2)
NBPT = NSM + NPA + NIN + NSP + NBQAR * 10 / 10
REPCELJP = sum([RIVCELJP1, RIVCELJP2, RIVCELJP3]) + RIVCELJP4
RISFDONF = max(min(RISFDONF_2, ISFBRUT), 0) * is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) + max(min(RISFDONF_2, ISFBRUT), 0) * 1 - is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) * COD9ZA
LIGISFINV = is_positive(LIGISFPMED + LIGISFPMEI + LIGISFIP + LIGISFCPI) * LIGISF
ABPR1 = arr(1 - IND_APB1 * min(APB1, PL_PB * APB1 / sum([APBV * 1 - IND_APBV, APBC * 1 - IND_APBC, APB1 * 1 - IND_APB1, APB2 * 1 - IND_APB2, APB3 * 1 - IND_APB3, APB4 * 1 - IND_APB4])) + IND_APB1 * APB1)
XFPTC = XDFC * XIND_10C + FRDC * 1 - XIND_10C
LIGISFREDPEN8 = is_positive(LIGISFINV + LIGISFDON) * LIGISF * is_positive(null(CODE_2042 + CMAJ_ISF - 8) + null(CMAJ_ISF - 34)) * 1 - COD9ZA
DFN4 = min(PLAF_DEDFORFTS, TPS104)
AB10V = APRV
TD10M4 = TIND_MIN4 * TDFN4 + 1 - TIND_MIN4 * T10MINS4
_1RIA = _1RAN
MIBNETNPVLSP = arr(MIB_NETNPVLP * MIBGITEP / MIBGITEP + LOCGITP)
RSN_CU = BSNCU * TX18 / 100
PPESEUILKIR = PPE_BOOL_SIFC * PPELIMC + PPE_BOOL_SIFM * PPELIMM + NBPT - 1 - PPE_BOOL_SIFM - NBQAR * 2 * PPELIMPAC + NBQAR * PPELIMPAC * 2
NPLOCNETTV = NPLOCCGAV + NPLOCV + MIB_NETNPVLV + MIB_NETNPPLV
RESINEUV6 = arr(arr(ACODIN / 9) * TX20 / 100) + arr(arr(ACODIJ / 9) * TX18 / 100) + arr(arr(ACODIV / 9) * TX18 / 100)
LIGRLOCIDFG = is_positive(LOCMEUBID + LOCMEUBIF + LOCMEUBIG) * is_positive(RLOCIDFG1 + RLOCIDFG2 + RLOCIDFG3 + RLOCIDFG4 + RLOCIDFG5 + RLOCIDFG6 + RLOCIDFG7 + RLOCIDFG8) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIG_MEMO = is_positive(LIGPRELIB + LIG_SURSIS + LIGREPPLU + LIGELURAS + LIGELURASC + LIGABDET + LIGABDETP + LIGABDETM + LIGROBOR + LIGPVIMMO + LIGPVTISOC + LIGMOBNR + LIGDEPCHO + LIGDEPMOB + LIGCOD3SG + LIGCOD3SH + LIGCOD3SL + LIGCOD3SM) + is_positive(LIG3525 + LIGRCMSOC + LIGRCMIMPAT + LIGABIMPPV + LIGABIMPMV + LIGPV3SB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
TIND_MINC = 1 - is_positive(TIND_10MIN_0C)
TFRDC = 1 - is_positive(ART1731BIS) * FRNC + COD1BE * is_positive(FRNC + COD1BE - T10MINSC) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNC + COD1BE, TFRDPROVC) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNC + COD1BE, min(TFRDPROVC, max(TFRDPROVCP2, TFRDPROVC1731)))
MIBNPRABP = MIB_ABNPVP + MIB_ABNPPP
X10MINS4 = max(min(XTSB4, DEDMIN4), XDFN4)
TIND_10C = positif_ou_nul(T10MINSC - TFRDC + COD1BE)
LIGLOCNSEUL = is_positive(LIGNPLOC + LIGDEFNPLOC + LIGNPLOCF)
MIBNPRNETC = max(0, MIBNPRC - MIBNPRABC)
AUBAINE10 = max(0, min(V_A10REEL, V_DIFTEOREEL - AUBAINE13A - AUBAINE13B - AUBAINE12 - AUBAINE11))
MIB_NETNPVLC = MIBGITEC + LOCGITC - MIB_ABNPVLC
PPE_RPRO1P = FEXP + BAFP + BAEXP + BACREP + _4BACREP - BACDEP * 1 - is_positive(ART1731BIS) + BAHEXP + BAHREP + _4BAHREP - BAHDEP * 1 - is_positive(ART1731BIS) + BICEXP + BICNOP - BICDNP * 1 - is_positive(ART1731BIS) + BIHEXP + BIHNOP - BIHDNP * 1 - is_positive(ART1731BIS) + BNCEXP + BNCREP - BNCDEP * 1 - is_positive(ART1731BIS) + BNHEXP + BNHREP - BNHDEP * 1 - is_positive(ART1731BIS) + MIBEXP + BNCPROEXP + TMIB_NETVP + TMIB_NETPP + TSPENETPP + BAFPVP + MIBPVP + BNCPROPVP + BAFORESTP + LOCPROP + LOCPROCGAP - LOCDEFPROCGAP * 1 - is_positive(ART1731BIS) - LOCDEFPROP * 1 - is_positive(ART1731BIS) + XHONOAAP + XHONOP
TIND_10MIN_03 = is_positive(TDEDMIN3 - TDFN3) * is_positive(TTSB3)
XDFN1 = min(PLAF_DEDFORFTS, XTPS101)
ARESINEUV_1 = arr(ACODIL / 9) + arr(ACODIN / 9) + arr(ACODIJ / 9) + arr(ACODIV / 9)
TAPRC = TIND_APBC * TABPRC + 1 - TIND_APBC * min(TABPRC, TPL_PB - 1 - TIND_APBV * TAPRV)
PPE_RPROC = is_positive(PPE_RPRO1C) * arr(1 + PPETXRPRO / 100 * PPE_RPRO1C) + 1 - is_positive(PPE_RPRO1C) * arr(PPE_RPRO1C * 1 - PPETXRPRO / 100)
DFNV = min(PLAF_DEDFORFTS, TPS10V)
FRDAC = FRNC * is_positive(FRNC - _10MINSC)
ABNCPNETP = AUTOBNCP - TBNCPABP
AGREVTP = REVTP
MIB_ABNPPLP = MIB_APP - MIB_ABPP - MIB_ABNPPP * present(MIBMEUP)
LIGRCODJU = is_positive(LOCMEUBJU + 0) * is_positive(RCODJU1 + RCODJU2 + RCODJU3 + RCODJU4 + RCODJU5 + RCODJU6 + RCODJU7 + RCODJU8) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
FRDA1 = FRN1 * is_positive(FRN1 - _10MINS1)
RESTIMOY = min(COD7SY, LIM_RESTIMO - RESTIMOD - RESTIMOB - RESTIMOC - RESTIMOF)
REPLOCIDFG = RLOCIDFG1 + RLOCIDFG2 + RLOCIDFG3 + RLOCIDFG4 + RLOCIDFG5 + RLOCIDFG6 + RLOCIDFG7 + RLOCIDFG8
RIVCELJP3 = RIVCELJP1
CREREVET = min(arr(BPTP3 + BPTPD + BPTPG * TX16 / 100), arr(CIIMPPRO * TX_CREREVET / 100)) + min(arr(BPTP19 * TX19 / 100), arr(CIIMPPRO2 * TX19 / 100))
FRDA2 = FRN2 * is_positive(FRN2 - _10MINS2)
FRDCREP = is_positive(ART1731BIS) * max(0, FRNC - FRDC) * null(IND_10C) + max(0, FRNC1731 - _10MINSC) * IND_10C * is_positive(FRNC1731)
LIG816 = V_EAG * is_positive(BPTPG) * LIG0 * LIG2
AUTOBICPNET = ABICPNETV + ABICPNETC + ABICPNETP
INDEFTSC = positif_ou_nul(TSBC - FRDC)
SPENETNPV = max(0, BNCNPV - SPEABNPV)
XIND_104 = positif_ou_nul(X10MINS4 - FRN4)
BICIMPP = BIHTAP + BIPTAP + MIB_NETVP + MIB_NETPP
PPESALV = PPE_SALAVDEFV + PPE_RPROV * 1 - is_positive(PPE_RPROV)
RESINEUV7 = arr(arr(ACODIN / 9) * TX20 / 100) + arr(arr(ACODIJ / 9) * TX18 / 100) + arr(arr(ACODIV / 9) * TX18 / 100)
LIGISFBRUT = is_positive(ISFBRUT) * 1 - is_positive(ANNUL2042) * LIGISF * 1 - null(5 - V_IND_TRAIT) * is_positive(ISFDONF + ISFDONEURO + ISFPMEDI + ISFPMEIN + ISFFIP + ISFFCPI) + is_positive(ISFBRUT) * 1 - is_positive(ANNUL2042) * null(5 - V_IND_TRAIT) * is_positive(present(ISFDONF) + present(ISFDONEURO) + present(ISFPMEDI) + present(ISFPMEIN) + present(ISFFIP) + present(ISFFCPI))
NB1 = NBPT
LIG815 = V_EAD * is_positive(BPTPD) * LIG0 * LIG2
LIGISFDEC = is_positive(ISF1) * is_positive(ISFDEC) * LIGISF * 1 - is_positive(ANNUL2042)
PPENBJ = max(1, arr(min(PPENBJAN, PPE_FIN - PPE_DEBUT + 1)))
RESINEUV4 = arr(arr(ACODIN / 9) * TX20 / 100) + arr(arr(ACODIJ / 9) * TX18 / 100) + arr(arr(ACODIV / 9) * TX18 / 100)
BNCDF5 = 1 - positif_ou_nul(NOCEPIMP + SPENETNPF) * DABNCNP4 + positif_ou_nul(NOCEPIMP + SPENETNPF) * min(max(NOCEPIMP + SPENETNPF - DABNCNP6 - DABNCNP5, 0) - DABNCNP4, DABNCNP4) * -1 * positif_ou_nul(DABNCNP4 - max(NOCEPIMP + SPENETNPF - DABNCNP6 - DABNCNP5, 0)) * 1 - is_positive(ART1731BIS) + min(DABNCNP4, DABNCNP - DIDABNCNP - BNCDF2 - BNCDF3 - BNCDF4) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + DABNCNP4 * is_positive(is_positive(ART1731BIS * PREM8_11) + null(8 - CMAJ) + null(11 - CMAJ))
BAQT = BAQV + BAQC + BAQP
ARESINEUV = ARESINEUV_1 * 1 - ART1731BIS + min(ARESINEUV_1, max(ARESINEUV_P + ARESINEUVP2, ARESINEUV1731 + 0) * 1 - PREM8_11) * ART1731BIS
AUBAINE9 = max(0, V_DIFTEOREEL - AUBAINE13A - AUBAINE13B - AUBAINE12 - AUBAINE11 - AUBAINE10)
RETRESINEUV = arr(arr(ACODIL / 9) * TX20 / 100) + arr(arr(ACODIN / 9) * TX20 / 100) + arr(arr(ACODIJ / 9) * TX18 / 100) + arr(arr(ACODIV / 9) * TX18 / 100) * 1 - ART1731BIS + min(ARESINEUV_1, ARESINEUV1731 + 0) * ART1731BIS
MIBNETNPVLSV = arr(MIB_NETNPVLV * MIBGITEV / MIBGITEV + LOCGITV)
RFOREST = arr(RFOREST1 * TX25 / 100) + arr(RFOREST2 * TX22 / 100) + arr(RFOREST3 * TX18 / 100) + arr(max(0, AFOREST - RFOREST1 - RFOREST2 - RFOREST3) * TX18 / 100) * 1 - V_CNR
XTSNTC = XEXTSC - XFPTC
RIVCELJOQR2 = RIVCELJOQR1
MLOCABC = MIB_ABNPVLC + MIB_ABNPPLC
BAHQT = BAHQV + BAHQC + BAHQP
SEUILCIIMSI = arr(13956 + 3726 * NBPT - 1 * 2 * 1 - null(V_REGCO - 5) * 1 - null(V_REGCO - 6) * 1 - null(V_REGCO - 7) + 15268 + 4098 * min(NBPT, 1.5) - 1 * 2 + 3726 * max(0, NBPT - 1.5) * 2 * null(V_REGCO - 5) + 15994 + 4285 * min(NBPT, 1.5) - 1 * 2 + 3726 * max(0, NBPT - 1.5) * 2 * is_positive(null(V_REGCO - 6) + null(V_REGCO - 7)))
_1RAR = 1 - is_positive(EXFR) * RCMHAB - FRAR + is_positive(EXFR) * 0
ABPRC = arr(1 - IND_APBC * min(APBC, PL_PB * APBC / sum([APBV * 1 - IND_APBV, APBC * 1 - IND_APBC, APB1 * 1 - IND_APB1, APB2 * 1 - IND_APB2, APB3 * 1 - IND_APB3, APB4 * 1 - IND_APB4])) + IND_APBC * APBC)
IND_MIN3 = 1 - is_positive(IND_10MIN_03)
D10M3 = IND_MIN3 * DFN3 + 1 - IND_MIN3 * _10MINS3
X10MINS1 = max(min(XTSB1, DEDMIN1), XDFN1)
T10MINSP = T10MINS1 + T10MINS2 + T10MINS3 + T10MINS4
BNNP = BNRP + SPENETP
DFRCMNBIS = is_positive(RCMAB + RTCAR + RCMNAB) * 1 - is_positive(RTNC + RAVC + RCMPRIVM) * max(0, RCMFR - RCMAB - RTCAR - RCMNAB) + 1 - is_positive(RCMAB + RTCAR + RCMNAB) * is_positive(RTNC + RAVC + RCMPRIVM) * max(0, RCMFR - RTNC - RAVC - TABAVC - RCMPRIVM) + is_positive(RCMAB + RTCAR + RCMNAB) * is_positive(RTNC + RAVC + RCMPRIVM) * max(0, RCMFR - RCMAB - RCMNAB - RTNC - RAVC - TABAVC - RTCAR - RCMPRIVM) + 1 - is_positive(RCMAB + RTCAR + RCMNAB) * 1 - is_positive(RTNC + RAVC + RCMPRIVM) * max(0, RCMFR)
CDEVDUR_NBJ = PPENBJ
TRAN = _1RAN + _2RAN
_2FRAR = is_positive(INTERE) * null(4 - V_IND_TRAIT) * is_positive(RCMNAB) * arr(RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, BRCMTOT + 0) * ART1731BIS * INTERE / max(1, TRCMABD + RTCAR + RCMNAB)) + 1 - is_positive(RCMNAB) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, BRCMTOT + 0) * ART1731BIS - FRAN - _2FRAN - FRAR + null(5 - V_IND_TRAIT) * is_positive(RCMNAB) * arr(RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P), BRCMTOT1731 + 0)) * ART1731BIS * INTERE / max(1, TRCMABD + RTCAR + RCMNAB)) + 1 - is_positive(RCMNAB) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P), BRCMTOT1731 + 0)) * ART1731BIS - FRAN - _2FRAN - FRAR
QUOHPV = sum([TSQVO + PRQVO, TSQCJ + PRQCJ, TSQPC + PRQPC]) + PALIQV + PALIQC + PALIQP + BAQV + BAQC + BAQP + BRCMQ + RFQ + sum([GLD1V, GLD1C, GLD2V, GLD2C, GLD3V, GLD3C])
RSE2AC = max(0, RSE2 - CIRSE2)
REVRF = _2REVF + _3REVF
FRG2 = is_positive(EXFR) * min(arr(EXFR * _2RNC / TRCM), EXFR - FRG1) + 1 - is_positive(EXFR) * 0
XDF4 = X10MINS4
DAGRIIMP = max(0, min(BAHQV + BAHQC + BAHQP + BAQV + BAQC + BAQP, DAGRI6 + DAGRI5 + DAGRI4 + DAGRI3 + DAGRI2 + DAGRI1))
LIG900YT = is_positive(RVTOT + LIG1100 + LIG910 + BRCMQ + RCMFR + REPRCM + LIGRCMABT + LIG2RCMABT + LIGPV3VG + LIGPV3WB + LIGPV3VE + RCMLIB + LIG29 + LIG30 + RFQ + _2REVF + _3REVF + LIG1130 + VLHAB + DFANT + ESFP + RE168 + TAX1649 + R1649 + PREREV) * is_positive(LIG10YT + LIG20YT + LIG30YT + LIG40YT + LIG50YT + LIG60YT + LIG70YT) * ART1731BIS
RESINEUV5 = arr(arr(ACODIN / 9) * TX20 / 100) + arr(arr(ACODIJ / 9) * TX18 / 100) + arr(arr(ACODIV / 9) * TX18 / 100)
PLAF2GM = is_positive(null(6 - V_REGCO) + null(7 - V_REGCO)) * arr(33117 + 3205.5 * min(NBPT - 1 * 4, 4) * is_positive(NBPT - 1) + 2729.5 * min(NBPT - 2 * 4, 2) * is_positive(NBPT - 2) + 2299 * NBPT - 2.5 * 4 * is_positive(NBPT - 2.5))
TSPENETNPP = max(0, BNCNPP - TSPEABNPP)
BNCDF6 = 1 - positif_ou_nul(NOCEPIMP + SPENETNPF) * DABNCNP5 + positif_ou_nul(NOCEPIMP + SPENETNPF) * min(max(NOCEPIMP + SPENETNPF - DABNCNP6, 0) - DABNCNP5, DABNCNP5) * -1 * positif_ou_nul(DABNCNP5 - max(NOCEPIMP + SPENETNPF - DABNCNP6, 0)) * 1 - is_positive(ART1731BIS) + min(DABNCNP5, DABNCNP - DIDABNCNP - BNCDF2 - BNCDF3 - BNCDF4 - BNCDF5) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + DABNCNP5 * is_positive(is_positive(ART1731BIS * PREM8_11) + null(8 - CMAJ) + null(11 - CMAJ))
LIG136 = is_positive(_4BAQV + _4BAQC + _4BAQP) * 1 - is_positive(IPVLOC) * 1 - is_positive(ANNUL2042) * LIG1
TD10M2 = TIND_MIN2 * TDFN2 + 1 - TIND_MIN2 * T10MINS2
BICNPP = BINTAP + BINHTAP + MIB_NETNPVP + MIB_NETNPPP
TTSN1AJ = TSHALLOV - TABTS1AJ
X10MINS3 = max(min(XTSB3, DEDMIN3), XDFN3)
BA12RFOR = arr(BASE7UWH * TX18 / 100)
PLAF2M = null(1 - V_REGCO) * arr(25005 + 2921 * min(NBPT - 1 * 4, 2) * is_positive(NBPT - 1) + 2299 * NBPT - 1.5 * 4 * is_positive(NBPT - 1.5))
RNIBAR13 = 13465 * is_positive(is_positive(V_ANREV - V_0DA - 65) + is_positive(V_0AP + 0)) + 12353 * 1 - is_positive(is_positive(V_ANREV - V_0DA - 65) + is_positive(V_0AP + 0)) * null(NBPT - 1) + 14414 * null(NBPT - 1.25) + 15917 * null(NBPT - 1.5) + 17420 * null(NBPT - 1.75) + 18922 * null(NBPT - 2) + 20425 * null(NBPT - 2.25) + 21928 * null(NBPT - 2.5) + 23581 * is_positive(is_positive(V_ANREV - V_0DA - 65) + is_positive(V_0AP + 0)) * 1 - BOOL_0AM + 23431 * 1 - is_positive(is_positive(V_ANREV - V_0DA - 65) + is_positive(V_0AP + 0)) * null(NBPT - 2.75) + 24933 * null(NBPT - 3) + 26436 * null(NBPT - 3.25) + 27939 * null(NBPT - 3.5) + 29442 * null(NBPT - 3.75) + 30944 * null(NBPT - 4) + 32447 * null(NBPT - 4.25) + 33950 * null(NBPT - 4.5) + 35453 * null(NBPT - 4.75) + 36955 * null(NBPT - 5) + 38458 * null(NBPT - 5.25) + 39961 * null(NBPT - 5.5) + 41464 * null(NBPT - 5.75) + 42966 * null(NBPT - 6) + 44470 * null(NBPT - 6.25) + 45980 * null(NBPT - 6.5) + 47476 * null(NBPT - 6.75) + 48980 * null(NBPT - 7) + 50480 * null(NBPT - 7.25) + 51985 * null(NBPT - 7.5) + 53487 * null(NBPT - 7.75) + 54990 * null(NBPT - 8) + 56493 * null(NBPT - 8.25) + 57995 * null(NBPT - 8.5) + 59497 * null(NBPT - 8.75) + 61000 * null(NBPT - 9) + 62504 * null(NBPT - 9.25) + 64005 * null(NBPT - 9.5) + 65515 * null(NBPT - 9.75) + 67010 * null(NBPT - 10)
TFRDCREP = is_positive(ART1731BIS) * max(0, FRNC - TFRDC) * null(TIND_10C)
RIVCELJOQR4 = arr(min(CELLIERJO + CELLIERJQ + CELLIERJR, LIMCELLIER) * is_positive(CELLIERJQ) * TX36 / 100 + min(CELLIERJO + CELLIERJQ + CELLIERJR, LIMCELLIER) * is_positive(CELLIERJO + CELLIERJR) * TX24 / 100) - 4 * RIVCELJOQR1 * 1 - V_CNR
PLAF1GM = is_positive(null(6 - V_REGCO) + null(7 - V_REGCO)) * arr(31843 + 3082 * min(NBPT - 1 * 4, 4) * is_positive(NBPT - 1) + 2624.5 * min(NBPT - 2 * 4, 2) * is_positive(NBPT - 2) + 2210.5 * NBPT - 2.5 * 4 * is_positive(NBPT - 2.5))
TD10MC = TIND_MINC * TDFNC + 1 - TIND_MINC * T10MINSC
IND_10MIN_0C = is_positive(DEDMINC - DFNC) * is_positive(TSBC)
PLAF1MGR = null(5 - V_REGCO) * arr(29058 + 3082 * min(NBPT - 1 * 4, 2) * is_positive(NBPT - 1) + 2938.5 * min(NBPT - 1.5 * 4, 2) * is_positive(NBPT - 1.5) + 2210.5 * NBPT - 2 * 4 * is_positive(NBPT - 2))
RNAVC = RAVC - TABAVC
CIRSETOT = CIRSE1 + CIRSE2 + CIRSE3 + CIRSE4 + CIRSE5
_10MINS4 = max(min(TSB4, DEDMIN4), DFN4)
TBNCNPABP = TBNCTOTABP - TBNCPABP
LIGBNCDF4 = is_positive(BNCDF4) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
RDRCM = RDRCM1BIS + COD2FA
PFRDC = FRDC + COD1BE * is_positive(FRDC + COD1BE - P10MINSC)
PPE_RTAV = max(0, PPESALV + PPE_RPROV * is_positive(PPE_RPROV))
BCIHABPRIN5 = min(max(0, BCIHP - BCIHABPRIN1 - BCIHABPRIN2 - BCIHABPRIN3 - BCIHABPRIN4), PREHABT2) * 1 - V_CNR
TABTS1AP = is_positive(BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * ALLOV / TTSBV) + 1 - is_positive(BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ - TABTS1AC)
MIBNETNPVLNSP = MIB_NETNPVLP - MIBNETNPVLSP
PPE_BOOL_TPC = is_positive(is_positive(PPETPC + 0) * is_positive(PPE_SALAVDEFC + 0) + null(PPENHC + PPEXTC + 0) * null(PPETPC + 0) * is_positive(PPE_SALAVDEFC) + is_positive(360 / PPENBJ * PPENHC + PPEXTC * is_positive(PPE_SALAVDEFC + 0) / 1820 + PPENJC * is_positive(PPE_AVRPRO1C + 0) / 360 - 1) + positif_ou_nul(PPENHC + PPEXTC * is_positive(PPE_SALAVDEFC + 0) - 1820) + positif_ou_nul(PPENJC * is_positive(PPE_AVRPRO1C + 0) - 360) + is_positive(PPEACC * is_positive(PPE_AVRPRO1C + 0) + 0) + 1 - is_positive(PPENJC * is_positive(PPE_AVRPRO1C + 0)) * is_positive(PPE_AVRPRO1C + 0))
RSE5BASE = RSE5N - CSPROVYE
TABPR1 = arr(1 - TIND_APB1 * min(TAPB1, is_positive(TEXPR2 + TEXPR3 + TEXPR4) * TPL_PB * TAPB1 / sum([TAPBV * 1 - TIND_APBV, TAPBC * 1 - TIND_APBC, TAPB1 * 1 - TIND_APB1, TAPB2 * 1 - TIND_APB2, TAPB3 * 1 - TIND_APB3, TAPB4 * 1 - TIND_APB4]) + 1 - is_positive(TEXPR2 + TEXPR3 + TEXPR4) * max(0, TPL_PB - TABPRV - TABPRC)) + TIND_APB1 * TAPB1)
MLOCABP = MIB_ABNPVLP + MIB_ABNPPLP
PPE_BOOL_TP4 = is_positive(is_positive(PPETPP4) * is_positive(PPE_SALAVDEF4 + 0) + null(PPENHP4 + PPEXT4 + 0) * null(PPETPP4 + 0) * is_positive(PPE_SALAVDEF4) + positif_ou_nul(360 / PPENBJ * PPENHP4 + PPEXT4 * is_positive(PPE_SALAVDEF4 + 0) - 1820))
LIG_BICP = LIG_BICPV + LIG_BICPC + LIG_BICPP
IND_MIN1 = 1 - is_positive(IND_10MIN_01)
TFRDP = 1 - is_positive(PREM8_11) * FRNP + COD1CE + COD1DE + COD1EE + COD1FE * is_positive(FRNP + COD1CE + COD1DE + COD1EE + COD1FE - T10MINSP) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNP + COD1CE + COD1DE + COD1EE + COD1FE, TFRDPROVP) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNP + COD1CE + COD1DE + COD1EE + COD1FE, max(TFRDPROVPP2, TFRDPROVP1731))
_2RAR = 1 - is_positive(EXFR) * INTERE - _2FRAR + is_positive(EXFR) * 0
XDF3 = X10MINS3
CIFORET = arr(BCIFORETUP * TX18 / 100 + BCIFORETUT * TX18 / 100 + BCIFORETUA * TX25 / 100 + BCIFORETUB * TX25 / 100 + BCIFORETUQ * TX18 / 100 + BCIFORETUI * TX25 / 100)
TABPR2 = arr(1 - TIND_APB2 * min(TAPB2, is_positive(TEXPR3 + TEXPR4) * TPL_PB * TAPB2 / sum([TAPBV * 1 - TIND_APBV, TAPBC * 1 - TIND_APBC, TAPB1 * 1 - TIND_APB1, TAPB2 * 1 - TIND_APB2, TAPB3 * 1 - TIND_APB3, TAPB4 * 1 - TIND_APB4]) + 1 - is_positive(TEXPR3 + TEXPR4) * max(0, TPL_PB - TABPRV - TABPRC - TABPR1)) + TIND_APB2 * TAPB2)
TTSN1AP = ALLOV - TABTS1AP
NPLOCNETTSV = NPLOCCGASV + NPLOCSV + MIBNETNPVLSV + MIB_NETNPPLV
IND_MINC = 1 - is_positive(IND_10MIN_0C)
D10M1 = IND_MIN1 * DFN1 + 1 - IND_MIN1 * _10MINS1
IND_MIN2 = 1 - is_positive(IND_10MIN_02)
QF014 = arr(RB04) / NB1
D10M2 = IND_MIN2 * DFN2 + 1 - IND_MIN2 * _10MINS2
PPE_BOOL_TPU = is_positive(is_positive(PPETPP1 + PPETPP2 + PPETPP3 + PPETPP4) * is_positive(PPE_SALAVDEF1 + PPE_SALAVDEF2 + PPE_SALAVDEF3 + PPE_SALAVDEF4) + null(PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 + 0) * null(PPETPP1 + PPETPP2 + PPETPP3 + PPETPP4 + 0) * is_positive(PPE_SALAVDEF1 + PPE_SALAVDEF2 + PPE_SALAVDEF3 + PPE_SALAVDEF4) + is_positive(360 / PPENBJ * PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 * is_positive(PPE_SALAVDEF1 + PPE_SALAVDEF2 + PPE_SALAVDEF3 + PPE_SALAVDEF4) / 1820 + PPENJP * is_positive(PPE_AVRPRO1P + 0) / 360 - 1) + positif_ou_nul(PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 * is_positive(PPE_SALAVDEF1 + PPE_SALAVDEF2 + PPE_SALAVDEF3 + PPE_SALAVDEF4) - 1820) + positif_ou_nul(PPENJP * is_positive(PPE_AVRPRO1P + 0) - 360) + is_positive(PPEACP * is_positive(PPE_AVRPRO1P + 0)) + 1 - is_positive(PPENJP * is_positive(PPE_AVRPRO1P + 0)) * is_positive(PPE_AVRPRO1P + 0) * PPE_BOOL_SEULPAC)
LIGMIBNPPOS = is_positive(MIBNPRV + MIBNPRC + MIBNPRP + MIB_NETNPCT) * 1 - is_positive(LIG_BICNPF) * LIG2
PPESALC = PPE_SALAVDEFC + PPE_RPROC * 1 - is_positive(PPE_RPROC)
BCIFORET = BCIFORETUP + BCIFORETUT + BCIFORETUA + BCIFORETUB + BCIFORETUQ + BCIFORETUI
BAHQTOTMIN = is_positive(BAHQT) * BAHQT
FRDA4 = FRN4 * is_positive(FRN4 - _10MINS4)
BCIHABPRIN6 = min(max(0, BCIHP - BCIHABPRIN1 - BCIHABPRIN2 - BCIHABPRIN3 - BCIHABPRIN4 - BCIHABPRIN5), PREHABTN2) * 1 - V_CNR
MLOCNETC = max(0, MLOCDECC - MLOCABC)
RSN = arr(RSN_CL + RSN_CM + RSN_CN + RSN_CC + RSN_CU + RSN_CQ + RSN_CR + RSN_CF) * 1 - V_CNR
PLAF2MGR = null(5 - V_REGCO) * arr(30220 + 3205.5 * min(NBPT - 1 * 4, 2) * is_positive(NBPT - 1) + 3056 * min(NBPT - 1.5 * 4, 2) * is_positive(NBPT - 1.5) + 2299 * NBPT - 2 * 4 * is_positive(NBPT - 2))
FRDA3 = FRN3 * is_positive(FRN3 - _10MINS3)
AUTOBNCPNET = ABNCPNETV + ABNCPNETC + ABNCPNETP
FRG3 = is_positive(EXFR) * min(arr(EXFR * _2RCAV / TRCM), EXFR - FRG1 - FRG2) + 1 - is_positive(EXFR) * 0
TBICNPABC = min(TBICNPPROVC, arr(TMIB_ABNPVC / MIBNPVENC + TMIB_ABNPPC / MIBNPPRESC))
TRAR = _1RAR + _2RAR
PPE_BOOL_MINV = positif_ou_nul(PPE_RTAV - PPELIMRPB) * 1 - PPE_BOOL_NADAV
TPRNNC = TEXPRC - TAPRC
IND_10MIN_0V = is_positive(DEDMINV - DFNV) * is_positive(TSBV)
TSPENETV = TSPENETPV + TSPENETNPV
PLANT = PLAQAR + PLAF_DEMIPART * 2 * NBPT - NBQAR - 1 - BOOL_0AM - BOOL_0AZ * V_0AV - 2 * PLAF_DEMIPART - PLAF_COMPPART * 2 * NPS * V_0AC + V_0AD + V_0AV * 1 - is_positive(V_0BT) * min(1, EAC) - PLAF_DEMIPART - PLAFCDPART * 1 - BOOL_0AM * 2 * NSA * 1 - is_positive(V_0AW) * positif_ou_nul(AGV - LIM_AGE_LET_S) * 1 - V_0AG
RDRFPS = max(0, RFCFPS + RFMIC - MICFR - RFDANT) * 1 - is_positive(ART1731BIS) + max(0, RRFI + REVRF + DEFRF4BC) * is_positive(ART1731BIS)
TOTDAGRI = min(DAGRI6 + DAGRI5 + DAGRI4 + DAGRI3 + DAGRI2 + DAGRI1, max(DAGRIIMP1731, max(DAGRIIMP_P, DAGRIIMPP2))) * is_positive(ART1731BIS * 1 - PREM8_11) + DAGRIIMP * 1 - is_positive(ART1731BIS) + 0 * is_positive(ART1731BIS * PREM8_11)
PPE_BOOL_TP3 = is_positive(is_positive(PPETPP3) * is_positive(PPE_SALAVDEF3 + 0) + null(PPENHP3 + PPEXT3 + 0) * null(PPETPP3 + 0) * is_positive(PPE_SALAVDEF3) + positif_ou_nul(360 / PPENBJ * PPENHP3 + PPEXT3 * is_positive(PPE_SALAVDEF3 + 0) - 1820))
SPENETV = SPENETPV + SPENETNPV
LIGISFRED = is_positive(LIGISFINV + LIGISFDON) * LIGISF * 1 - is_positive(null(CODE_2042 + CMAJ_ISF - 8) + null(CMAJ_ISF - 34)) * 1 - COD9ZA
TTSN1AC = max(0, SALEXTV - COD1AD) - TABTS1AC
RESTIMOA = min(RESTIMOPPAU, LIM_RESTIMO - RESTIMOD - RESTIMOB - RESTIMOC - RESTIMOF - RESTIMOY)
DS014 = max(QF014 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF014 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF014 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF014 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF014 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
TABPR3 = arr(1 - TIND_APB3 * min(TAPB3, is_positive(TEXPR4) * TPL_PB * TAPB3 / sum([TAPBV * 1 - TIND_APBV, TAPBC * 1 - TIND_APBC, TAPB1 * 1 - TIND_APB1, TAPB2 * 1 - TIND_APB2, TAPB3 * 1 - TIND_APB3, TAPB4 * 1 - TIND_APB4]) + 1 - is_positive(TEXPR4) * max(0, TPL_PB - TABPRV - TABPRC - TABPR1 - TABPR2)) + TIND_APB3 * TAPB3)
XDF1 = X10MINS1
PPE_BOOL_TP2 = is_positive(is_positive(PPETPP2) * is_positive(PPE_SALAVDEF2 + 0) + null(PPENHP2 + PPEXT2 + 0) * null(PPETPP2 + 0) * is_positive(PPE_SALAVDEF2) + positif_ou_nul(360 / PPENBJ * PPENHP2 + PPEXT2 * is_positive(PPE_SALAVDEF2 + 0) - 1820))
RISFDONCEE = max(min(RISFDONCEE_2, ISFBRUT - RISFDONF), 0) * is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) + max(min(RISFDONCEE_2, ISFBRUT - RISFDONF), 0) * 1 - is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) * COD9ZA
MIB_NETNPPLP = MIBMEUP - MIB_ABNPPLP
_10MINSV = max(min(TSBV, DEDMINV), DFNV)
TIND_MIN3 = 1 - is_positive(TIND_10MIN_03)
LIGMLOCAB = is_positive(MLOCABV + MLOCABC + MLOCABP) * LIG0 * LIG2
APRC = IND_APBC * ABPRC + 1 - IND_APBC * min(ABPRC, PL_PB - 1 - IND_APBV * APRV)
PPE_RPROP = is_positive(PPE_RPRO1P) * arr(1 + PPETXRPRO / 100 * PPE_RPRO1P) + 1 - is_positive(PPE_RPRO1P) * arr(PPE_RPRO1P * 1 - PPETXRPRO / 100)
MIBNPRNETP = max(0, MIBNPRP - MIBNPRABP)
QF015 = arr(RB05) / NB1
TFPTC = max(TFRDC, T10MINSC)
PLAF1M = null(1 - V_REGCO) * arr(24043 + 2808.5 * min(NBPT - 1 * 4, 2) * is_positive(NBPT - 1) + 2210.5 * NBPT - 1.5 * 4 * is_positive(NBPT - 1.5))
RESINEUV8 = arr(ACODIN * TX20 / 100) + arr(ACODIJ * TX18 / 100) + arr(ACODIV * TX18 / 100) - RESINEUV1 - RESINEUV2 - RESINEUV3 - RESINEUV4 - RESINEUV5 - RESINEUV6 - RESINEUV7 - RESINEUV7
LIGBNCDF5 = is_positive(BNCDF5) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
PFPTC = max(PFRDC, P10MINSC)
IND_10MIN_04 = is_positive(DEDMIN4 - DFN4) * is_positive(TSB4)
RISFPMED = max(min(RISFPMED_2, ISFBRUT - RISFDONF - RISFDONCEE), 0) * is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) + max(min(RISFPMED_2, ISFBRUT - RISFDONF - RISFDONCEE), 0) * 1 - is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) * COD9ZA
PPE_RTAC = max(0, PPESALC + PPE_RPROC * is_positive(PPE_RPROC))
SEUILCIRIRF = arr(10676 + 2850 * NBPT - 1 * 2 * 1 - null(V_REGCO - 5) * 1 - null(V_REGCO - 6) * 1 - null(V_REGCO - 7) + 12632 + 3135 * min(NBPT, 1.5) - 1 * 2 + 2850 * max(0, NBPT - 1.5) * 2 * null(V_REGCO - 5) + 13209 + 3278 * min(NBPT, 1.5) - 1 * 2 + 2850 * max(0, NBPT - 1.5) * 2 * is_positive(null(V_REGCO - 6) + null(V_REGCO - 7)))
FRG5 = is_positive(EXFR) * max(0, EXFR - FRG1 - FRG2 - FRG3) + 1 - is_positive(EXFR) * 0
NPLOCNETTC = NPLOCCGAC + NPLOCC + MIB_NETNPVLC + MIB_NETNPPLC
BAHQTOTMAXN = positif_ou_nul(BAHQT) * min(0, BAHQV + BAHQC + BAHQP - TOTDAGRI * 1 - ART1731BIS)
TAPR1 = TIND_APB1 * TABPR1 + 1 - TIND_APB1 * min(TABPR1, TPL_PB - 1 - TIND_APBV * TAPRV - 1 - TIND_APBC * TAPRC)
REPCELJOQR = sum([RIVCELJOQR1, RIVCELJOQR2, RIVCELJOQR3]) + RIVCELJOQR4
TABTS3VJ = is_positive(GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * BPCOSAV / TTSBV) + 1 - is_positive(GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ - TABTS1AC - TABTS1AP)
PPE_COEFFU = PPE_BOOL_TPU * 360 / PPENBJ + 1 - PPE_BOOL_TPU / PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 / 1820 + PPENJP * is_positive(PPE_AVRPRO1P + 0) / 360 * PPE_BOOL_SEULPAC
TREP10C = TIND_10C * TD10MC + 1 - TIND_10C * TFPTC
IND_MINV = 1 - is_positive(IND_10MIN_0V)
PRNNC = EXPRC - APRC
MIBNETNPVLSC = arr(MIB_NETNPVLC * MIBGITEC / MIBGITEC + LOCGITC)
DS015 = max(QF015 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF015 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF015 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF015 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF015 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
BCIHABPRIN7 = min(max(0, BCIHP - BCIHABPRIN1 - BCIHABPRIN2 - BCIHABPRIN3 - BCIHABPRIN4 - BCIHABPRIN5 - BCIHABPRIN6), PREHABTVT) * 1 - V_CNR
BAHQTOT = BAHQV + BAHQC + BAHQP - TOTDAGRI * 1 - ART1731BIS
PPE_BOOL_TPN = is_positive(positif_ou_nul(360 / PPENBJ * PPENJP * is_positive(PPE_AVRPRO1P + 0) - 360) + is_positive(PPEACP * is_positive(PPE_AVRPRO1P + 0)) + 1 - is_positive(PPENJP * is_positive(PPE_AVRPRO1P + 0)) * is_positive(PPE_AVRPRO1P + 0))
MIBNETNPVLNSV = MIB_NETNPVLV - MIBNETNPVLSV
DFRCMN = DFRCMNBIS * 1 - is_positive(ART1731BIS) + RCMFR - RCMFRART1731 * is_positive(ART1731BIS)
SOMDEFTS = FRNV * is_positive(FRNV - _10MINSV) + FRNC * is_positive(FRNC - _10MINSC) + FRN1 * is_positive(FRN1 - _10MINS1) + FRN2 * is_positive(FRN2 - _10MINS2) + FRN3 * is_positive(FRN3 - _10MINS3) + FRN4 * is_positive(FRN4 - _10MINS4)
BCIHABPRIN = BCIHABPRIN1 + BCIHABPRIN2 + BCIHABPRIN3 + BCIHABPRIN4 + BCIHABPRIN5 + BCIHABPRIN6 + BCIHABPRIN7
TFRD1 = 1 - is_positive(PREM8_11) * FRN1 + COD1CE * is_positive(FRN1 + COD1CE - T10MINS1) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN1 + COD1CE, TFRDPROV1) * is_positive(FRN2 + FRN3 + FRN4 + COD1DE + COD1EE + COD1FE) + is_positive(PREM8_11) * max(0, TFRDP) * 1 - is_positive(FRN2 + FRN3 + FRN4 + COD1DE + COD1EE + COD1FE) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN1 + COD1CE, min(TFRDPROV1, max(TFRDPROV1P2, TFRDPROV11731))) * is_positive(FRN2 + FRN3 + FRN4 + COD1DE + COD1EE + COD1FE) + is_positive(PREM8_11) * max(0, TFRDP) * 1 - is_positive(FRN2 + FRN3 + FRN4 + COD1DE + COD1EE + COD1FE)
PPE_COEFF2 = PPE_BOOL_TP2 * 360 / PPENBJ + 1 - PPE_BOOL_TP2 / PPENHP2 + PPEXT2 * is_positive(PPE_SALAVDEF2 + 0) / 1820
PLAFQFT = PLANT
IS015 = arr(DS015 * NB1)
PPE_BOOL_TPV = is_positive(is_positive(PPETPV + 0) * is_positive(PPE_SALAVDEFV + 0) + null(PPENHV + PPEXTV + 0) * null(PPETPV + 0) * is_positive(PPE_SALAVDEFV) + is_positive(360 / PPENBJ * PPENHV + PPEXTV * is_positive(PPE_SALAVDEFV + 0) / 1820 + PPENJV * is_positive(PPE_AVRPRO1V + 0) / 360 - 1) + positif_ou_nul(PPENHV + PPEXTV * is_positive(PPE_SALAVDEFV + 0) - 1820) + positif_ou_nul(PPENJV * is_positive(PPE_AVRPRO1V + 0) - 360) + is_positive(PPEACV * is_positive(PPE_AVRPRO1V + 0) + 0) + 1 - is_positive(PPENJV * is_positive(PPE_AVRPRO1V + 0)) * is_positive(PPE_AVRPRO1V + 0))
XTSNC = is_positive(XTSNTC) * min(0, XTSNTC) + positif_ou_nul(XTSNTC) * XTSNTC
QF016 = arr(RB06) / NB1
XTSC = XTSNC - sum([max(0, GLD1C - ABGL1C), max(0, GLD2C - ABGL2C), max(0, GLD3C - ABGL3C)])
INDMONO = BOOL_0AM * positif_ou_nul(PPE_RTAV - PPELIMRPB) * is_positive(PPELIMRPB - PPE_RTAC) + positif_ou_nul(PPE_RTAC - PPELIMRPB) * is_positive(PPELIMRPB - PPE_RTAV)
D10MC = IND_MINC * DFNC + 1 - IND_MINC * _10MINSC
PPE_BOOL_TP1 = is_positive(is_positive(PPETPP1) * is_positive(PPE_SALAVDEF1 + 0) + null(PPENHP1 + PPEXT1 + 0) * null(PPETPP1 + 0) * is_positive(PPE_SALAVDEF1) + positif_ou_nul(360 / PPENBJ * PPENHP1 + PPEXT1 * is_positive(PPE_SALAVDEF1 + 0) - 1820))
NPLOCNETTPAC = NPLOCCGAPAC + NPLOCPAC + MIB_NETNPVLP + MIB_NETNPPLP
LIGBNCDF6 = is_positive(BNCDF6) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
NPLOCNETFHDEFANT = max(0, NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC)
TSPENETP = TSPENETPP + TSPENETNPP
F10AC = max(FRDAC, DFNC) if (IND_10C == 0 or IND_10C == 1 and IND_10MIN_0C == 0) else 0
XIND_101 = positif_ou_nul(X10MINS1 - FRN1)
DEFNPI = abs(min(DEFNP, sum([BICNPV * is_positive(BICNPV), BICNPC * is_positive(BICNPC), BICNPP * is_positive(BICNPP)]) + MIB_NETNPCT)) * is_positive(BICNPV + BICNPC + BICNPP + MIB_NETNPCT) * 1 - is_positive(ART1731BIS) + ART1731BIS * 1 - PREM8_11 * min(DEFBIC6 + DEFBIC5 + DEFBIC4 + DEFBIC3 + DEFBIC2 + DEFBIC1, max(DEFNPI1731, max(DEFNPI_P, DEFNPIP2)))
FRAU = is_positive(RCMHAD) * null(4 - V_IND_TRAIT) * is_positive(DISQUO) * arr(RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, BRCMTOT + 0) * ART1731BIS * RCMHAD / max(1, TRCMABD + RTCAR + RCMNAB)) + 1 - is_positive(DISQUO) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, BRCMTOT + 0) * ART1731BIS - FRAN - _2FRAN - FRAR - _2FRAR + null(5 - V_IND_TRAIT) * is_positive(DISQUO) * arr(RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P), BRCMTOT1731 + 0)) * ART1731BIS * RCMHAD / max(1, TRCMABD + RTCAR + RCMNAB)) + 1 - is_positive(DISQUO) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P), BRCMTOT1731 + 0)) * ART1731BIS - FRAN - _2FRAN - FRAR - _2FRAR
NPLOCNETF5 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF5, LNPRODEF51731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF5 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF4, LNPRODEF41731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF4 * 1 - is_positive(ART1731BIS * PREM8_11)
NPLOCNETF7 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - is_positive(ART1731BIS * PREM8_11)
_3RCM_I = (1 - is_positive(DFRCMN) * _2RNC - FRG2 * 1 - is_positive(ART1731BIS) + _2RNC - FRG2 * is_positive(ART1731BIS)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
CS_RFG = RDRFPS
XETSNNC = arr(is_positive(XTSNC) * XTSNC * XETRANC / XEXTSC) * XIND_10C + 1 - XIND_10C * XETRANC
PPE_COEFF4 = PPE_BOOL_TP4 * 360 / PPENBJ + 1 - PPE_BOOL_TP4 / PPENHP4 + PPEXT4 * is_positive(PPE_SALAVDEF4 + 0) / 1820
CS_RCM = RDRCM
NPLOCNETF6 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF5, LNPRODEF51731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF5 * 1 - is_positive(ART1731BIS * PREM8_11)
DNPLOCIMPU = 1 - DEFRILOC * 1 - PREM8_11 * max(0, min(TOTDEFLOCNP, NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC)) + is_positive(DEFRILOC) * 1 - PREM8_11 * min(LNPRODEF10 + LNPRODEF9 + LNPRODEF8 + LNPRODEF7 + LNPRODEF6 + LNPRODEF5 + LNPRODEF4 + LNPRODEF3 + LNPRODEF2 + LNPRODEF1, max(DNPLOCIMPU1731, max(DNPLOCIMPU_P, DNPLOCIMPUP2)))
NPLOCNETTSP = NPLOCCGASP + NPLOCSP + MIBNETNPVLSP + MIB_NETNPPLP
PPE_COEFFCOND4 = 1 - PPE_BOOL_TP4 * null(PPENBJ - 360) * PPE_COEFF4 + 1 - null(PPENBJ - 360) * PPENBJ * 1820 / 360 / PPENHP4 + PPEXT4 * is_positive(PPE_SALAVDEF4 + 0) + PPENJP * is_positive(PPE_AVRPRO1P + 0) * 1820 / 360
MLOCNETP = max(0, MLOCDECP - MLOCABP)
PPECOEFF4 = arr(PPE_COEFFCOND4 * 100)
PPE_COEFFC = PPE_BOOL_TPC * 360 / PPENBJ + 1 - PPE_BOOL_TPC / PPENHC + PPEXTC * is_positive(PPE_SALAVDEFC + 0) / 1820 + PPENJC * is_positive(PPE_AVRPRO1C + 0) / 360
F10BC = _10MINSC if (IND_10C == 1 and IND_10MIN_0C == 1) else 0
PPETEMPS2 = arr(1 / PPE_COEFF2 * 100)
TAPR2 = TIND_APB2 * TABPR2 + 1 - TIND_APB2 * min(TABPR2, TPL_PB - 1 - TIND_APBV * TAPRV - 1 - TIND_APBC * TAPRC - 1 - TIND_APB1 * TAPR1)
PPE_RCONTPC = arr(PPE_RTAC * PPE_COEFFC)
_2FRAU = null(4 - V_IND_TRAIT) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, BRCMTOT + 0) * ART1731BIS - FRAN - _2FRAN - FRAR - _2FRAR - FRAU * is_positive(DISQUO) + null(5 - V_IND_TRAIT) * RCMFR * 1 - is_positive(ART1731BIS) + min(RCMFR, max(max(BRCMTOTP2, BRCMTOT_P), BRCMTOT1731 + 0)) * ART1731BIS - FRAN - _2FRAN - FRAR - _2FRAR - FRAU * is_positive(DISQUO)
BNCDF1 = 1 - positif_ou_nul(NOCEPIMP + SPENETNPF) * abs(NOCEPIMP + SPENETNPF) + positif_ou_nul(NOCEPIMP + SPENETNPF) * positif_ou_nul(DABNCNP5 + DABNCNP4 + DABNCNP3 + DABNCNP2 + DABNCNP1 - NOCEPIMP - SPENETNPF) * DABNCNP5 + DABNCNP4 + DABNCNP3 + DABNCNP2 + DABNCNP1 - NOCEPIMP - SPENETNPF * null(BNCDF6 + BNCDF5 + BNCDF4 + BNCDF3 + BNCDF2) * 1 - is_positive(ART1731BIS) + DEFBNCNPF * is_positive(ART1731BIS * 1 - PREM8_11) + DNOCEP + DNOCEPC + DNOCEPP + BNCAADV + BNCAADC + BNCAADP * is_positive(ART1731BIS * PREM8_11)
BAQTOTMIN = min(0, BAQV + BAQC + BAQP + BAHQTOTMIN)
NPLOCNETF9 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - is_positive(ART1731BIS * PREM8_11)
XTSNNC = arr(is_positive(XTSNC) * XTSNC * TSASSUC / XEXTSC) * XIND_10C + 1 - XIND_10C * TSASSUC
PPESALU = PPE_SALAVDEFU + PPE_RPROP * 1 - is_positive(PPE_RPROP) * PPE_BOOL_SEULPAC
BNNV = BNRV + SPENETV
AB10C = APRC
LIGF10C = is_positive(F10AC + F10BC) * LIG0 * LIG2
XIND_103 = positif_ou_nul(X10MINS3 - FRN3)
NPLOCNETF = is_positive(1 - is_positive(DEFRILOC) + PREM8_11) * max(0, NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - DNPLOCIMPU) + is_positive(DEFRILOC) * 1 - PREM8_11 * max(0, NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - DNPLOCIMPU + DEFLOCNPF)
_4BAQTOTNET = is_positive(_4BAQTOT) * max(0, _4BAQTOT + BAHQTOTMIN + BAHQTOTMAXN) * is_positive(1 - ART1731BIS + 1 - is_positive(DEFRIBASUP + DEFRIGLOBSUP) * 1 - PREM8_11) + max(0, min(_4BAQV + _4BAQC + _4BAQP + arr(DEFBANIF * PROQDEFBAT), _4BACREV + _4BACREC + _4BACREP + _4BAHREV + _4BAHREC + _4BAHREP * MAJREV)) * is_positive(DEFRIBASUP + DEFRIGLOBSUP) * 1 - PREM8_11
NPLOCNETF3 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF5, LNPRODEF51731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF5 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF4, LNPRODEF41731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF4 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF3, LNPRODEF31731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF3 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF2, LNPRODEF21731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF2 * 1 - is_positive(ART1731BIS * PREM8_11)
TPRNN1 = TEXPR1 - TAPR1
PLAF2 = PLAF2M + PLAF2MGR + PLAF2GM
_10MINSP = _10MINS1 + _10MINS2 + _10MINS3 + _10MINS4
DS016 = max(QF016 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF016 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF016 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF016 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF016 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
TIND_101 = positif_ou_nul(T10MINS1 - TFRD1 + COD1CE)
PPE_RCONTP2 = arr(PPE_RTA2 * PPE_COEFF2)
FRDV = 1 - is_positive(PREM8_11) * FRNV * is_positive(FRNV - _10MINSV) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNV, FRDPROVV) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNV, min(FRDPROVV, max(FRDPROVVP2, FRDPROVV1731)))
NPLOCNETTSC = NPLOCCGASC + NPLOCSC + MIBNETNPVLSC + MIB_NETNPPLC
REP10C = IND_10C * D10MC + 1 - IND_10C * FPTC
PPE_COEFF3 = PPE_BOOL_TP3 * 360 / PPENBJ + 1 - PPE_BOOL_TP3 / PPENHP3 + PPEXT3 * is_positive(PPE_SALAVDEF3 + 0) / 1820
PPE_RTAN = max(0, PPE_RPROP) * 1 - PPE_BOOL_SEULPAC
DBAIP = TOTDAGRI
RISFPMEI = max(min(RISFPMEI_2, ISFBRUT - RISFDONF - RISFDONCEE - RISFPMED), 0) * is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) + max(min(RISFPMEI_2, ISFBRUT - RISFDONF - RISFDONCEE - RISFPMED), 0) * 1 - is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) * COD9ZA
IS016 = arr(DS016 * NB1)
NPLOCNETSF = max(0, NPLOCNETTSV + NPLOCNETTSC + NPLOCNETTSP - TOTDEFLOCNPBIS)
PS_RFG = CS_RFG
PPETEMPSC = arr(1 / PPE_COEFFC * 100)
FRDAV = FRNV * is_positive(FRNV - _10MINSV)
TFPT1 = max(TFRD1, T10MINS1)
PIND_10V = positif_ou_nul(P10MINSV - FRDV + COD1AE)
RESTIMOE = min(RIMOPPAURE, LIM_RESTIMO - RESTIMOD - RESTIMOB - RESTIMOC - RESTIMOF - RESTIMOY - RESTIMOA)
_7RCM_I = (1 - is_positive(DFRCMN) * _2RAR * 1 - is_positive(ART1731BIS) + _2RAR * is_positive(ART1731BIS)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
DEFBA2 = 1 - is_positive(BAHQT + BAQT) * DAGRI1 + is_positive(BAHQT + BAQT) * abs(min(max(BAHQT + BAQT - DAGRI6 - DAGRI5 - DAGRI4 - DAGRI3 - DAGRI2, 0) - DAGRI1, DAGRI1)) * positif_ou_nul(DAGRI1 - max(BAHQT + BAQT - DAGRI6 - DAGRI5 - DAGRI4 - DAGRI3 - DAGRI2, 0)) * 1 - is_positive(IPVLOC) * 1 - is_positive(ART1731BIS) + min(DAGRI1, DAGRI - DBAIP) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + DAGRI1 * is_positive(is_positive(ART1731BIS * PREM8_11) + null(8 - CMAJ) + null(11 - CMAJ))
_4RCM_I = (1 - is_positive(DFRCMN) * _2RCAV - FRG3 * 1 - is_positive(ART1731BIS) + _2RCAV - FRG3 * is_positive(ART1731BIS)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
BAQTOT = max(0, BAQV + BAQC + BAQP + BAHQTOTMAXN)
PREP10C = PIND_10C * PD10MC + 1 - PIND_10C * PFPTC
PLAF1 = PLAF1M + PLAF1MGR + PLAF1GM
_2RAU = 1 - is_positive(EXFR) * DISQUO - _2FRAU + is_positive(EXFR) * 0
DEFNPLOCF = min(0, NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - TOTDEFLOCNPBIS - LNPRODEF10)
REPINVLOCNP = RESINEUV1 + RESINEUV2 + RESINEUV3 + RESINEUV4 + RESINEUV5 + RESINEUV6 + RESINEUV7 + RESINEUV8
LIGISFIMPU = is_positive(DISFBASE) * is_positive(ISFETRANG + ISFPLAF) * 1 - is_positive(ISFDONF + ISFDONEURO + ISFPMEDI + ISFPMEIN + ISFFIP + ISFFCPI) * LIGISF * 1 - is_positive(ANNUL2042) * 1 - null(5 - V_IND_TRAIT) + is_positive(DISFBASE) * is_positive(present(ISFETRANG) + present(ISFPLAF)) * 1 - is_positive(ISFDONF + ISFDONEURO + ISFPMEDI + ISFPMEIN + ISFFIP + ISFFCPI) * LIGISF * 1 - is_positive(ANNUL2042) * null(5 - V_IND_TRAIT) * 1 - is_positive(LIGISFRED + LIGISFREDPEN8)
BAQTOTN = min(0, BAQV + BAQC + BAQP + BAHQTOTMAXN)
_2RCM_I = (1 - is_positive(DFRCMN) * _2RIA * 1 - is_positive(ART1731BIS) + _2RIA * is_positive(ART1731BIS)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
PLA = PLANT + PLACOMP
TTSN3VJ = BPCOSAV - TABTS3VJ
PPE_COEFFCONDU = 1 - PPE_BOOL_TPU * null(PPENBJ - 360) * PPE_COEFFU + 1 - null(PPENBJ - 360) * PPENBJ * 1820 / 360 / PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 + PPENJP * is_positive(PPE_AVRPRO1P + 0) * 1820 / 360
TD10M3 = TIND_MIN3 * TDFN3 + 1 - TIND_MIN3 * T10MINS3
BAHQTOTMAXP = positif_ou_nul(BAHQT) * max(0, BAHQV + BAHQC + BAHQP - TOTDAGRI)
PPECOEFFU = arr(PPE_COEFFCONDU * 100)
LIGNEUV = is_positive(LOCRESINEUV + INVNPROF1 + INVNPROF2) * is_positive(RESINEUV1 + RESINEUV2 + RESINEUV3 + RESINEUV4 + RESINEUV5 + RESINEUV6 + RESINEUV7 + RESINEUV8) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PPETEMPSU = arr(1 / PPE_COEFFU * 100)
PERPSALDC = PREP10C
PPE_COEFFN = PPE_BOOL_TPN * 360 / PPENBJ + 1 - PPE_BOOL_TPN / PPENJP * is_positive(PPE_AVRPRO1P + 0) / 360
IS014 = arr(DS014 * NB1)
DEDSC = _10MINSC - DFNC * 1 - is_positive(F10BC) * IND_10C
INDPL = null(PLA - PLAF_CDPART)
IND_MIN4 = 1 - is_positive(IND_10MIN_04)
NPLOCNETF10 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - is_positive(ART1731BIS * PREM8_11)
PPE_COEFFCOND2 = 1 - PPE_BOOL_TP2 * null(PPENBJ - 360) * PPE_COEFF2 + 1 - null(PPENBJ - 360) * PPENBJ * 1820 / 360 / PPENHP2 + PPEXT2 * is_positive(PPE_SALAVDEF2 + 0) + PPENJP * is_positive(PPE_AVRPRO1P + 0) * 1820 / 360
CIHABPRIN = arr(BCIHABPRIN1 * TX40 / 100 + BCIHABPRIN2 * TX40 / 100 + BCIHABPRIN3 * TX30 / 100 + BCIHABPRIN4 * TX25 / 100 + BCIHABPRIN5 * TX20 / 100 + BCIHABPRIN6 * TX15 / 100 + BCIHABPRIN7 * TX10 / 100) * 1 - is_positive(RE168 + TAX1649) * 1 - V_CNR
TABPR4 = arr(1 - TIND_APB4 * min(TAPB4, max(0, TPL_PB - TABPRV - TABPRC - TABPR1 - TABPR2 - TABPR3)) + TIND_APB4 * TAPB4)
BAQTOTAVIS = _4BAQTOTNET
FRDP = 1 - is_positive(PREM8_11) * FRNP * is_positive(FRNP - _10MINSP) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNP, FRDPROVP) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRNP, max(FRDPROVPP2, FRDPROVP1731))
PERPSALNC = PERPSALC - PERPSALDC + ELURASC
APR1 = IND_APB1 * ABPR1 + 1 - IND_APB1 * min(ABPR1, PL_PB - 1 - IND_APBV * APRV - 1 - IND_APBC * APRC)
DFBICNPF = sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT + DEFNPI + BICDEV + BICDEC + BICDEP + BICHDEV + BICHDEC + BICHDEP
PPE_COEFFV = PPE_BOOL_TPV * 360 / PPENBJ + 1 - PPE_BOOL_TPV / PPENHV + PPEXTV * is_positive(PPE_SALAVDEFV + 0) / 1820 + PPENJV * is_positive(PPE_AVRPRO1V + 0) / 360
_6RCM_I = (1 - is_positive(DFRCMN) * _2RAO - FRG5 * 1 - is_positive(ART1731BIS) + _2RAO - FRG5 * is_positive(ART1731BIS)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
DALNP = 1 - is_positive(IPVLOC) * BNCDF1 + BNCDF2 + BNCDF3 + BNCDF4 + BNCDF5 + BNCDF6
PPE_RCONTPV = arr(PPE_RTAV * PPE_COEFFV)
LIGDFRCMN = is_positive(DFRCMN) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
FRD1 = 1 - is_positive(PREM8_11) * FRN1 * is_positive(FRN1 - _10MINS1) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN1, FRDPROV1) * is_positive(FRN2 + FRN3 + FRN4) + is_positive(PREM8_11) * max(0, FRDP) * 1 - is_positive(FRN2 + FRN3 + FRN4) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN1, min(FRDPROV1, max(FRDPROV1P2, FRDPROV11731))) * is_positive(FRN2 + FRN3 + FRN4) + is_positive(PREM8_11) * max(0, FRDP) * 1 - is_positive(FRN2 + FRN3 + FRN4)
PPE_COEFFCONDC = 1 - PPE_BOOL_TPC * null(PPENBJ - 360) * PPE_COEFFC + 1 - null(PPENBJ - 360) * PPENBJ * 1820 / 360 / PPENHC + PPEXTC * is_positive(PPE_SALAVDEFC + 0) + PPENJC * is_positive(PPE_AVRPRO1C + 0) * 1820 / 360
PPETEMPS4 = arr(1 / PPE_COEFF4 * 100)
TABTS1TT = is_positive(CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * GLDGRATV / TTSBV) + 1 - is_positive(CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ - TABTS1AC - TABTS1AP - TABTS3VJ)
IND_10V = positif_ou_nul(_10MINSV - FRDV)
XFPTV = XDFV * XIND_10V + FRDV * 1 - XIND_10V
DEFIBAANT = positif_ou_nul(BAQT + BAHQTOT - min(DAGRI1, DAGRI11731 + 0) * is_positive(ART1731BIS) + DAGRI1 * 1 - ART1731BIS - min(DAGRI2, DAGRI21731 + 0) * is_positive(ART1731BIS) + DAGRI2 * 1 - ART1731BIS - min(DAGRI3, DAGRI31731 + 0) * is_positive(ART1731BIS) + DAGRI3 * 1 - ART1731BIS - min(DAGRI4, DAGRI41731 + 0) * is_positive(ART1731BIS) + DAGRI4 * 1 - ART1731BIS - min(DAGRI5, DAGRI51731 + 0) * is_positive(ART1731BIS) + DAGRI5 * 1 - ART1731BIS - min(DAGRI6, DAGRI61731 + 0) * is_positive(ART1731BIS) + DAGRI6 * 1 - ART1731BIS) * min(DAGRI1, DAGRI11731 + 0) * is_positive(ART1731BIS) + DAGRI1 * 1 - ART1731BIS - min(DAGRI2, DAGRI21731 + 0) * is_positive(ART1731BIS) + DAGRI2 * 1 - ART1731BIS - min(DAGRI3, DAGRI31731 + 0) * is_positive(ART1731BIS) + DAGRI3 * 1 - ART1731BIS - min(DAGRI4, DAGRI41731 + 0) * is_positive(ART1731BIS) + DAGRI4 * 1 - ART1731BIS - min(DAGRI5, DAGRI51731 + 0) * is_positive(ART1731BIS) + DAGRI5 * 1 - ART1731BIS - min(DAGRI6, DAGRI61731 + 0) * is_positive(ART1731BIS) + DAGRI6 * 1 - ART1731BIS + positif_ou_nul(min(DAGRI1, DAGRI11731 + 0) * is_positive(ART1731BIS) + DAGRI1 * 1 - ART1731BIS + min(DAGRI2, DAGRI21731 + 0) * is_positive(ART1731BIS) + DAGRI2 * 1 - ART1731BIS + min(DAGRI3, DAGRI31731 + 0) * is_positive(ART1731BIS) + DAGRI3 * 1 - ART1731BIS + min(DAGRI4, DAGRI41731 + 0) * is_positive(ART1731BIS) + DAGRI4 * 1 - ART1731BIS + min(DAGRI5, DAGRI51731 + 0) * is_positive(ART1731BIS) + DAGRI5 * 1 - ART1731BIS + min(DAGRI6, DAGRI61731 + 0) * is_positive(ART1731BIS) + DAGRI6 * 1 - ART1731BIS - BAQT - BAHQTOT) * BAQT + BAHQTOT
PPE_BOOL_MAJO = 1 - PPE_BOOL_BT * is_positive(positif_ou_nul(PPELIMRPH - PPE_RCONTPV) * positif_ou_nul(PPE_RTAV - PPELIMRPB) * 1 - is_positive(PPE_BOOL_NADAV) + positif_ou_nul(PPELIMRPH - PPE_RCONTPC) * positif_ou_nul(PPE_RTAC - PPELIMRPB) * 1 - is_positive(PPE_BOOL_NADAC))
PPE_RCONTPN = arr(PPE_RTAN * PPE_COEFFN)
NPLOCNETF2 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF5, LNPRODEF51731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF5 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF4, LNPRODEF41731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF4 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF3, LNPRODEF31731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF3 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF2, LNPRODEF21731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF2 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF1, LNPRODEF11731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF1 * 1 - is_positive(ART1731BIS * PREM8_11)
LIGBNCDF1 = is_positive(BNCDF1) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
LIGDEFBA2 = is_positive(DEFBA2) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
BAQTOTAV = positif_ou_nul(BAQT + BAHQT) * BAQTOT + 1 - is_positive(BAQT + BAHQT) * 0
PPE_BOOL_MINC = positif_ou_nul(PPE_RTAC - PPELIMRPB) * 1 - PPE_BOOL_NADAC
PPECOEFFC = arr(PPE_COEFFCONDC * 100)
XEXOCETC = arr(is_positive(XTSNC) * XTSNC * EXOCETC / XEXTSC) * XIND_10C + 1 - XIND_10C * EXOCETC
PIND_10P = positif_ou_nul(P10MINSP - FRD1 + COD1CE)
DLMRN2 = is_positive(DEFBIC1) * 1 - positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * DEFBIC1 + positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * min(max(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFBIC6 - DEFBIC5 - DEFBIC4 - DEFBIC3 - DEFBIC2, 0) - DEFBIC1, DEFBIC1) * -1 * positif_ou_nul(DEFBIC1 - max(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFBIC6 - DEFBIC5 - DEFBIC4 - DEFBIC3 - DEFBIC2, 0)) * 1 - is_positive(ART1731BIS) + min(DEFBIC1, DEFNP - DEFNPI) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFBIC1 * is_positive(ART1731BIS * PREM8_11)
NPLOCNETF8 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - is_positive(ART1731BIS * PREM8_11)
D10MV = IND_MINV * DFNV + 1 - IND_MINV * _10MINSV
TABTS1BJ = is_positive(SALEXTC + ALLOC + BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * TSHALLOC / TTSBC) + 1 - is_positive(SALEXTC + ALLOC + BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * TREP10C
PPE_HAUTE = PPELIMRPH * 1 - BOOL_0AM + PPELIMRPH * BOOL_0AM * null(INDMONO) * positif_ou_nul(PPE_RCONTPV - PPELIMRPB) * positif_ou_nul(PPE_RCONTPC - PPELIMRPB) + PPELIMRPH2 * INDMONO
BICNPF = 1 - is_positive(DEFRIBIC) * 1 - PREM8_11 * max(0, sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFNPI) + is_positive(DEFRIBIC) * 1 - PREM8_11 * max(0, sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFNPI + DEFBICNPF)
FPTV = max(FRDV, _10MINSV)
TFRD2 = 1 - is_positive(PREM8_11) * FRN2 + COD1DE * is_positive(FRN2 + COD1DE - T10MINS2) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN2 + COD1DE, TFRDPROV2) * is_positive(FRN3 + FRN4 + COD1EE + COD1FE) + is_positive(PREM8_11) * max(0, TFRDP - TFRD1) * 1 - is_positive(FRN3 + FRN4 + COD1EE + COD1FE) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN2 + COD1DE, min(TFRDPROV2, max(TFRDPROV2P2, TFRDPROV21731))) * is_positive(FRN3 + FRN4 + COD1EE + COD1FE) + is_positive(PREM8_11) * max(0, TFRDP - TFRD1) * 1 - is_positive(FRN3 + FRN4 + COD1EE + COD1FE)
PPETEMPS3 = arr(1 / PPE_COEFF3 * 100)
PPECOEFF2 = arr(PPE_COEFFCOND2 * 100)
TPRNN2 = TEXPR2 - TAPR2
PPE_BOOL_MAXC = positif_ou_nul(PPE_HAUTE - PPE_RCONTPC)
DEFLOCNP = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - DNPLOCIMPU + LOCDEFNPV + LOCDEFNPC + LOCDEFNPPAC + LOCDEFNPCGAV + LOCDEFNPCGAC + LOCDEFNPCGAPAC
MIBNETNPVLNSC = MIB_NETNPVLC - MIBNETNPVLSC
ABTS1BJ = arr(REP10C * TSHALLOC / TSBC)
LIG10C = positif_ou_nul(TSBNC + PRBC + BPCOSAC + GLDGRATC + is_positive(F10AC * null(TSBNC + PRBC + BPCOSAC + GLDGRATC)))
DEFBANI = BAHQV + BAHQC + BAHQP - TOTDAGRI + _4BAQV + _4BAQC + _4BAQP + DBAIP + SOMDEFBANI
INDEFTSV = positif_ou_nul(TSBV - FRDV)
F10BV = _10MINSV if (IND_10V == 1 and IND_10MIN_0V == 1) else 0
_1RAU = 1 - is_positive(EXFR) * RCMHAD - FRAU + is_positive(EXFR) * 0
PPE_COEFF1 = PPE_BOOL_TP1 * 360 / PPENBJ + 1 - PPE_BOOL_TP1 / PPENHP1 + PPEXT1 * is_positive(PPE_SALAVDEF1 + 0) / 1820
TREP101 = TIND_101 * TD10M1 + 1 - TIND_101 * TFPT1
PS_RCM = CS_RCM
PPE_COEFFCONDV = 1 - PPE_BOOL_TPV * null(PPENBJ - 360) * PPE_COEFFV + 1 - null(PPENBJ - 360) * PPENBJ * 1820 / 360 / PPENHV + PPEXTV * is_positive(PPE_SALAVDEFV + 0) + PPENJV * is_positive(PPE_AVRPRO1V + 0) * 1820 / 360
TABTS1CJ = arr(TREP101 * TSHALLO1 / TTSB1)
PPE_COEFFCONDN = 1 - PPE_BOOL_TPN * null(PPENBJ - 360) * PPE_COEFFN + 1 - null(PPENBJ - 360) * PPENBJ * 1820 / 360 / PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 + PPENJP * is_positive(PPE_AVRPRO1P + 0) * 1820 / 360
XFPT1 = XDF1 * XIND_101 + FRD1 * 1 - XIND_101
PPE_RCONTP4 = arr(PPE_RTA4 * PPE_COEFF4)
RD_RCM = CS_RCM
PFRDP = FRD1 + COD1CE * is_positive(FRD1 + COD1CE - P10MINSP)
PPE_RCONTP3 = arr(PPE_RTA3 * PPE_COEFF3)
F10AV = max(FRDAV, DFNV) if (IND_10V == 0 or IND_10V == 1 and IND_10MIN_0V == 0) else 0
IND_101 = positif_ou_nul(_10MINS1 - FRD1)
IN05 = max(IS015, IS025 - PLA)
PPE_COEFFCOND3 = 1 - PPE_BOOL_TP3 * null(PPENBJ - 360) * PPE_COEFF3 + 1 - null(PPENBJ - 360) * PPENBJ * 1820 / 360 / PPENHP3 + PPEXT3 * is_positive(PPE_SALAVDEF3 + 0) + PPENJP * is_positive(PPE_AVRPRO1P + 0) * 1820 / 360
NPLOCNETF4 = NPLOCNETTV + NPLOCNETTC + NPLOCNETTPAC - min(LNPRODEF10, LNPRODEF101731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF10 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF9, LNPRODEF91731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF9 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF8, LNPRODEF81731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF8 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF7, LNPRODEF71731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF7 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF6, LNPRODEF61731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF6 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF5, LNPRODEF51731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF5 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF4, LNPRODEF41731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF4 * 1 - is_positive(ART1731BIS * PREM8_11) + min(LNPRODEF3, LNPRODEF31731 + 0) * is_positive(ART1731BIS * PREM8_11) + LNPRODEF3 * 1 - is_positive(ART1731BIS * PREM8_11)
RISFFIP = max(min(RISFFIP_2, ISFBRUT - RISFDONF - RISFDONCEE - RISFPMED - RISFPMEI), 0) * is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) + max(min(RISFFIP_2, ISFBRUT - RISFDONF - RISFDONCEE - RISFPMED - RISFPMEI), 0) * 1 - is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) * COD9ZA
BIN = BICPF + BICNPF
RESTIMOX = min(COD7SX, LIM_RESTIMO - RESTIMOD - RESTIMOB - RESTIMOC - RESTIMOF - RESTIMOY - RESTIMOA - RESTIMOE)
FRDVREP = is_positive(ART1731BIS) * max(0, FRNV - FRDV) * null(IND_10V) + max(0, FRNV1731 - _10MINSV) * IND_10V * is_positive(FRNV1731)
PPE_MAJO = PPE_BOOL_MAJO * is_positive(PPE_NBELIGI) * PPE_NBMAJO * PPEMONMAJO + PPE_NBMAJOQAR * PPEMONMAJO / 2
TRAU = _1RAU + _2RAU
PPETEMPS1 = arr(1 / PPE_COEFF1 * 100)
IN04 = max(IS014, IS024 - PLA)
PPE_BOOL_MAX2 = positif_ou_nul(PPELIMRPH - PPE_RCONTP2)
LIG3250 = is_positive(DALNP) * LIG1 * LIG2
IPQ05 = IN05
LIGBNCDF = is_positive(BNCDF1 + BNCDF2 + BNCDF3 + BNCDF4 + BNCDF5 + BNCDF6) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
PPE_BOOL_MINN = positif_ou_nul(PPE_RTAN - PPELIMRPB) * 1 - PPE_BOOL_NADAN
RD_RFG = CS_RFG
PFRDV = FRDV + COD1AE * is_positive(FRDV + COD1AE - P10MINSV)
ARESTIMO_1 = RESTIMOD + RESTIMOB + RESTIMOC + RESTIMOF + RESTIMOA + RESTIMOE + RESTIMOY + RESTIMOX * 1 - V_CNR
XTSNT1 = XEXTS1 - XFPT1
TTSN1BJ = TSHALLOC - TABTS1BJ
TAPR3 = TIND_APB3 * TABPR3 + 1 - TIND_APB3 * min(TABPR3, TPL_PB - 1 - TIND_APBV * TAPRV - 1 - TIND_APBC * TAPRC - 1 - TIND_APB1 * TAPR1 - 1 - TIND_APB2 * TAPR2)
PPE_RCONTP1 = arr(PPE_RTA1 * PPE_COEFF1)
TABTSRAJ = is_positive(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * CARTSV / TTSBV) + 1 - is_positive(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ - TABTS1AC - TABTS1AP - TABTS3VJ - TABTS1TT)
INDEFTS1 = positif_ou_nul(TSB1 - FRD1)
APR2 = IND_APB2 * ABPR2 + 1 - IND_APB2 * min(ABPR2, PL_PB - 1 - IND_APBV * APRV - 1 - IND_APBC * APRC - 1 - IND_APB1 * APR1)
PPE_RTAU = max(0, PPESALU + PPE_RPROP * is_positive(PPE_RPROP)) * PPE_BOOL_SEULPAC
DEFBA3 = 1 - is_positive(BAHQT + BAQT) * DAGRI2 + is_positive(BAHQT + BAQT) * abs(min(max(BAHQT + BAQT - DAGRI6 - DAGRI5 - DAGRI4 - DAGRI3, 0) - DAGRI2, DAGRI2)) * positif_ou_nul(DAGRI2 - max(BAHQT + BAQT - DAGRI6 - DAGRI5 - DAGRI4 - DAGRI3, 0)) * 1 - is_positive(IPVLOC) * 1 - is_positive(ART1731BIS) + min(DAGRI2, DAGRI - DBAIP - DEFBA2) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + DAGRI2 * is_positive(is_positive(ART1731BIS * PREM8_11) + null(8 - CMAJ) + null(11 - CMAJ))
ABTS1BP = is_positive(ALLOC) * is_positive(BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * ALLOC / TSBC) + 1 - is_positive(BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTS1BJ)
PPECOEFF3 = arr(PPE_COEFFCOND3 * 100)
RDNP = RCSV + RCSC + RCSP + max(0, NPLOCNETSF) * 1 - null(V_REGCO - 2) * 1 - null(V_REGCO - 4)
RESS = is_positive(positif_ou_nul(PLAF1 - V_BTRFRN2 + 0 * 1 - present(RFRN2) + RFRN2) + 1 - positif_ou_nul(PLAF1 - V_BTRFRN2 + 0 * 1 - present(RFRN2) + RFRN2) * positif_ou_nul(PLAF2 - V_BTRFRN1 + 0 * 1 - present(RFRN1) + RFRN1) + present(COD7WX))
TFPT2 = max(TFRD2, T10MINS2)
LIG10V = positif_ou_nul(TSBNV + PRBV + BPCOSAV + GLDGRATV + is_positive(F10AV * null(TSBNV + PRBV + BPCOSAV + GLDGRATV)))
REP10V = IND_10V * D10MV + 1 - IND_10V * FPTV
ABTS3VK = is_positive(BPCOSAC) * is_positive(GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * BPCOSAC / TSBC) + 1 - is_positive(GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTS1BJ - ABTS1BP)
TIND_102 = positif_ou_nul(T10MINS2 - TFRD2 + COD1DE)
XTSNTV = XEXTSV - XFPTV
BANOR = BAHQTOTMAXP + BAQTOTMIN * 1 - ART1731BIS + BAHQTOTMAXP + BAQTOTMIN + arr(DEFBANIF * 1 - PROQDEFBAT) * ART1731BIS * 1 - PREM8_11 + BAHQTOTMAXP + BAQTOTMIN * ART1731BIS * PREM8_11
LIG_SALASS = is_positive(TSBNV + TSBNC + TSBNP + F10AV + F10AC + F10AP + null(ALLOV + ALLOC + ALLOP) * null(TSHALLOV + TSHALLOC + TSHALLOP)) * LIG0 * LIG2
PRNN2 = EXPR2 - APR2
APR3 = IND_APB3 * ABPR3 + 1 - IND_APB3 * min(ABPR3, PL_PB - 1 - IND_APBV * APRV - 1 - IND_APBC * APRC - 1 - IND_APB1 * APR1 - 1 - IND_APB2 * APR2)
TSN1BJ = TSHALLOC - ABTS1BJ
_5RCM_I = (1 - is_positive(DFRCMN) * _2RAU * 1 - is_positive(ART1731BIS) + _2RAU * is_positive(ART1731BIS)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
PRNN3 = EXPR3 - APR3
PPE_RCONTPU = arr(PPE_RTAU * PPE_COEFFU)
LIG10 = is_positive(LIG10V + LIG10C + LIG10P)
LIGDBAIP = positif_ou_nul(DBAIP) * is_positive(DAGRI1 + DAGRI2 + DAGRI3 + DAGRI4 + DAGRI5 + DAGRI6) * 1 - is_positive(IPVLOC) * is_positive(abs(abs(BAHQTOT) + abs(BAQTOT) - DAGRI6 + DAGRI5 + DAGRI4 + DAGRI3 + DAGRI2 + DAGRI1)) * LIG1
F10B1 = _10MINS1 if (IND_101 == 1 and IND_10MIN_01 == 1) else 0
IN06 = max(IS016, IS026 - PLA)
PFPTP = max(PFRDP, P10MINSP)
D10M4 = IND_MIN4 * DFN4 + 1 - IND_MIN4 * _10MINS4
APR4 = IND_APB4 * ABPR4 + 1 - IND_APB4 * min(ABPR4, PL_PB - 1 - IND_APBV * APRV - 1 - IND_APBC * APRC - 1 - IND_APB1 * APR1 - 1 - IND_APB2 * APR2 - 1 - IND_APB3 * APR3)
ID16 = IN06
BRDS = arr(RDRFPS * 1 - null(4 - V_REGCO) + COD8XK + COD8YK + RDRV + RDRCM + RDNP + RDNCP + RDPTP + RGLOA + SALECS + SALECSG + ALLECS + INDECS + PENECS + COD8SA + COD8SB + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - is_positive(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR
BCSG = arr(RDRFPS * 1 - null(4 - V_REGCO) + COD8XK + COD8YK + RDRV + RDRCM + RDNP + RDNCP + RDPTP + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - is_positive(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR
ZIGBASECS1 = is_positive(BCSG + V_CSANT) * is_positive(INDCTX)
TTSN1CJ = TSHALLO1 - TABTS1CJ
PPE_BOOL_MAJOBT = is_positive(positif_ou_nul(PPELIMRPH - PPE_RCONTPV) * positif_ou_nul(PPE_RTAV - PPELIMRPB) * 1 - is_positive(PPE_BOOL_NADAV)) * PPE_BOOL_BT
TTSN1TT = GLDGRATV - TABTS1TT
TFRD3 = 1 - is_positive(PREM8_11) * FRN3 + COD1EE * is_positive(FRN3 + COD1EE - T10MINS3) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN3 + COD1EE, TFRDPROV3) * is_positive(FRN4 + COD1FE) + is_positive(PREM8_11) * max(0, TFRDP - TFRD1 - TFRD2) * 1 - is_positive(FRN4 + COD1FE) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN3 + COD1EE, min(TFRDPROV3, max(TFRDPROV3P2, TFRDPROV31731))) * is_positive(FRN4 + COD1FE) + is_positive(PREM8_11) * max(0, TFRDP - TFRD1 - TFRD2) * 1 - is_positive(FRN4 + COD1FE)
BCOS = max(0, min(RDSYVO + 0, arr(TX_BASECOTSYN / 100 * TSBV * IND_10V - BPCOSAV + EXPRV))) + max(0, min(RDSYCJ + 0, arr(TX_BASECOTSYN / 100 * TSBC * IND_10C - BPCOSAC + EXPRC))) + min(RDSYPP + 0, arr(TX_BASECOTSYN / 100 * sum([TSB1 * IND_101 + EXPR1, TSB2 * IND_102 + EXPR2, TSB3 * IND_103 + EXPR3, TSB4 * IND_104 + EXPR4])))
TABTS1CC = is_positive(ALLO1 + CARTSP1 + REMPLAP1) * arr(TREP101 * max(0, SALEXT1 - COD1CD) / TTSB1) + 1 - is_positive(ALLO1 + CARTSP1 + REMPLAP1) * max(0, TREP101 - TABTS1CJ)
DEDS1 = _10MINS1 - DFN1 * 1 - is_positive(F10B1) * IND_101
PPE_BOOL_MONO = 1 - PPE_BOOL_MAJO * 1 - PPE_BOOL_MAJOBT * is_positive(PPE_NB_PAC + PPE_NB_PAC_QAR - PPE_NBNONELI) * INDMONO * is_positive(PPE_BOOL_BT + BOOL_0AM) * positif_ou_nul(PPE_RTAV - PPELIMRPB) * positif_ou_nul(PPELIMRPH2 - PPE_RCONTPV) * 1 - is_positive(PPE_BOOL_NADAV) + is_positive(BOOL_0AM) * positif_ou_nul(PPE_RTAC - PPELIMRPB) * positif_ou_nul(PPELIMRPH2 - PPE_RCONTPC) * 1 - is_positive(PPE_BOOL_NADAC)
PPECOEFFN = arr(PPE_COEFFCONDN * 100)
PERPREVTOTC = max(0, PERPSALNC + PERPNONSALC)
PPE_BOOL_MAXV = positif_ou_nul(PPE_HAUTE - PPE_RCONTPV)
_1RCM_I = (1 - is_positive(DFRCMN) * _1RIA + _1RNC + _1RAR + _1RAU + _1RAO + RCAV - FRG1 - is_positive(DFRCMN) * 0 * 1 - is_positive(ART1731BIS) + is_positive(ART1731BIS) * _1RIA + _1RNC + _1RAR + _1RAU + _1RAO + RCAV - FRG1 - is_positive(DFRCMN) * 0) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
PPECOEFFV = arr(PPE_COEFFCONDV * 100)
RBAT = max(0, BANOR)
PRNN1 = EXPR1 - APR1
TAPR4 = TIND_APB4 * TABPR4 + 1 - TIND_APB4 * min(TABPR4, TPL_PB - 1 - TIND_APBV * TAPRV - 1 - TIND_APBC * TAPRC - 1 - TIND_APB1 * TAPR1 - 1 - TIND_APB2 * TAPR2 - 1 - TIND_APB3 * TAPR3)
ARESTIMO = ARESTIMO_1 * 1 - ART1731BIS + min(ARESTIMO_1, max(ARESTIMO_P + ARESTIMOP2, ARESTIMO1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
DEFNONPLOC = abs(DEFNPLOCF)
PPETEMPSN = arr(1 / PPE_COEFFN * 100)
ZIGBASERD = is_positive(BRDS + V_RDANT)
BPRS = arr(RDRFPS * 1 - null(4 - V_REGCO) + COD8XK + COD8YK + RDRV + RDRCM + RDNP + RDNCP + RDPTP + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - is_positive(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR
RETRESTIMO = arr(RESTIMOD * TX40 / 100 + RESTIMOB * TX36 / 100 + RESTIMOC * TX30 / 100 + RESTIMOA * TX_RESTIMO1 / 100 + RESTIMOE * TX22 / 100 + RESTIMOF * TX30 / 100 + RESTIMOY * TX30 / 100 + RESTIMOX * TX22 / 100) * 1 - V_CNR
ZIG_TITREC = is_positive(BCSG + V_CSANT) * 1 - is_positive(BRDS + V_RDANT) * 1 - is_positive(BPRS + V_PSANT) * 1 - is_positive(BCVNSAL + V_CVNANT) * 1 - V_CNR * LIG2
ZIGMONTCS = is_positive(BCSG + V_CSANT)
F10A1 = max(FRDA1, DFN1) if (IND_101 == 0 or IND_101 == 1 and IND_10MIN_01 == 0) else 0
LIGDLMRN2 = is_positive(DLMRN2) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
ZIGMONTRD = is_positive(BRDS + V_RDANT)
PPE_BOOL_MAXN = positif_ou_nul(PPELIMRPH - PPE_RCONTPN)
BRDSAPS = arr(RDRFAPS * 1 - null(4 - V_REGCO) + RDRVAPS + RDRCMAPS + RDNP + SALECS + SALECSG + ALLECS + INDECS + PENECS + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - is_positive(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR
LIGDEFBA3 = is_positive(DEFBA3) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
TPRNN4 = TEXPR4 - TAPR4
TABTSRAP = is_positive(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * REMPLAV / TTSBV) + 1 - is_positive(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTS1AJ - TABTS1AC - TABTS1AP - TABTS3VJ - TABTS1TT - TABTSRAJ)
FPT1 = max(FRD1, _10MINS1)
PPE_COEFFCOND1 = 1 - PPE_BOOL_TP1 * null(PPENBJ - 360) * PPE_COEFF1 + 1 - null(PPENBJ - 360) * PPENBJ * 1820 / 360 / PPENHP1 + PPEXT1 * is_positive(PPE_SALAVDEF1 + 0) + PPENJP * is_positive(PPE_AVRPRO1P + 0) * 1820 / 360
FRD2 = 1 - is_positive(PREM8_11) * FRN2 * is_positive(FRN2 - _10MINS2) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN2, FRDPROV2) * is_positive(FRN3 + FRN4) + is_positive(PREM8_11) * max(0, FRDP - FRD1) * 1 - is_positive(FRN3 + FRN4) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN2, min(FRDPROV2, max(FRDPROV2P2, FRDPROV21731))) * is_positive(FRN3 + FRN4) + is_positive(PREM8_11) * max(0, FRDP - FRD1) * 1 - is_positive(FRN3 + FRN4)
ZIGBASEPS = is_positive(BPRS + V_PSANT)
PERPPLAFC = is_positive(PERPINDC) * BOOL_0AM * max(0, is_positive(PERPREVTOTC) * max(min(arr(PERPREVTOTC * TX_PERPPLAF / 100), LIM_PERPMAX), LIM_PERPMIN) - PERPC + 1 - is_positive(PERPREVTOTC) * LIM_PERPMIN - PERPC) * 1 - V_CNR
ASYND = BCOS * 1 - V_CNR
IND_102 = positif_ou_nul(_10MINS2 - FRD2)
PPE_BOOL_MAX3 = positif_ou_nul(PPELIMRPH - PPE_RCONTP3)
TSN1BP = ALLOC - ABTS1BP
XTSN1 = is_positive(XTSNT1) * min(0, XTSNT1) + positif_ou_nul(XTSNT1) * XTSNT1
IND_CTXP = is_positive(CS_DEG) * is_positive(BPRS) * is_positive(INDCTX)
ABTS1UT = is_positive(GLDGRATC) * is_positive(CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * GLDGRATC / TSBC) + 1 - is_positive(CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTS1BJ - ABTS1BP - ABTS3VK)
ZIG_BASE = is_positive(BCSG + BRDS + BPRS + BCVNSAL + V_CSANT + V_RDANT + V_PSANT + V_CVNANT) * LIG2
DLMRN3 = is_positive(DEFBIC2) * 1 - positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * DEFBIC2 + positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * min(max(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFBIC6 - DEFBIC5 - DEFBIC4 - DEFBIC3, 0) - DEFBIC2, DEFBIC2) * -1 * positif_ou_nul(DEFBIC2 - max(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFBIC6 - DEFBIC5 - DEFBIC4 - DEFBIC3, 0)) * 1 - is_positive(ART1731BIS) + min(DEFBIC2, DEFNP - DEFNPI - DLMRN2) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFBIC2 * is_positive(ART1731BIS * PREM8_11)
TSN1UT = GLDGRATC - ABTS1UT
BDCSG3VA = is_positive(ABDETPLUS) * max(0, RDRV + max(0, RDRCM1) + RDRFPS + RDNP + PVBAR3VA - IPPNCS) * 1 - V_CNR * 1 - is_positive(present(RE168) + present(TAX1649))
XTSNV = is_positive(XTSNTV) * min(0, XTSNTV) + positif_ou_nul(XTSNTV) * XTSNTV
TTSNRAJ = CARTSV - TABTSRAJ
BDEV30 = min(PDEVDUR, COD7SA + COD7SB + COD7SC + COD7WB + COD7RG + COD7VH + COD7RH + COD7RI + COD7WU + COD7RJ + COD7RK + COD7RL + COD7RN + COD7RP + COD7RR + COD7RS + COD7RQ + COD7RT + COD7TV + COD7TW + COD7RV + COD7RW + COD7RZ) * is_positive(is_positive(BQRESS) * is_positive(BQTRAV) + is_positive(BQRESS) * null(BQTRAV) * null(RESS) + is_positive(BQRESS) * null(BQTRAV) * is_positive(RESS) + is_positive(BQRESS) * null(BQTRAV) * is_positive(RESS) * present(CRECHOBOI) + null(BQRESS))
PFPTV = max(PFRDV, P10MINSV)
PREP10V = PIND_10V * PD10MV + 1 - PIND_10V * PFPTV
LIGF10V = is_positive(F10AV + F10BV) * LIG0 * LIG2
RDSC = arr(BRDS * T_RDS / 100) * 1 - is_positive(ANNUL2042)
PPETEMPSV = arr(1 / PPE_COEFFV * 100)
XETSNNV = arr(is_positive(XTSNV) * XTSNV * XETRANV / XEXTSV) * XIND_10V + 1 - XIND_10V * XETRANV
PRNN4 = EXPR4 - APR4
DEFBA4 = 1 - is_positive(BAHQT + BAQT) * DAGRI3 + is_positive(BAHQT + BAQT) * abs(min(max(BAHQT + BAQT - DAGRI6 - DAGRI5 - DAGRI4, 0) - DAGRI3, DAGRI3)) * positif_ou_nul(DAGRI3 - max(BAHQT + BAQT - DAGRI6 - DAGRI5 - DAGRI4, 0)) * 1 - is_positive(IPVLOC) * 1 - is_positive(ART1731BIS) + min(DAGRI3, DAGRI - DBAIP - DEFBA2 - DEFBA3) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + DAGRI3 * is_positive(is_positive(ART1731BIS * PREM8_11) + null(8 - CMAJ) + null(11 - CMAJ))
DEFLOC2 = 1 - is_positive(NPLOCNETF2) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4 - LNPRODEF3 - LNPRODEF2, 0) - LNPRODEF1, LNPRODEF1)) * positif_ou_nul(LNPRODEF1 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4 - LNPRODEF3 - LNPRODEF2, 0)) * 1 - is_positive(ART1731BIS) + min(LNPRODEF1, TOTDEFLOCNP - DNPLOCIMPU) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF1 * ART1731BIS * is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))
LIGDEFBA4 = is_positive(DEFBA4) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
IND_CTXR = is_positive(CS_DEG) * is_positive(BRDS) * is_positive(INDCTX)
TABTSV = TABTS1AJ + TABTS1AC + TABTS1AP + TABTS3VJ + TABTS1TT + TABTSRAJ + TABTSRAP
PPE_BOOL_MAX4 = positif_ou_nul(PPELIMRPH - PPE_RCONTP4)
RISFFCPI = max(min(RISFFCPI_2, ISFBRUT - RISFDONF - RISFDONCEE - RISFPMED - RISFPMEI - RISFFIP), 0) * is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) + max(min(RISFFCPI_2, ISFBRUT - RISFDONF - RISFDONCEE - RISFPMED - RISFPMEI - RISFFIP), 0) * 1 - is_positive(1 - null(CODE_2042 - 8) * 1 - null(CMAJ_ISF - 8) * 1 - null(CMAJ_ISF - 34)) * COD9ZA
FRD3 = 1 - is_positive(PREM8_11) * FRN3 * is_positive(FRN3 - _10MINS3) + null(4 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN3, FRDPROV3) * is_positive(FRN4) + is_positive(PREM8_11) * max(0, FRDP - FRD1 - FRD2) * 1 - is_positive(FRN4) + null(5 - V_IND_TRAIT) * is_positive(PREM8_11) * min(FRN3, min(FRDPROV3, max(FRDPROV3P2, FRDPROV31731))) * is_positive(FRN4) + is_positive(PREM8_11) * max(0, FRDP - FRD1 - FRD2) * 1 - is_positive(FRN4)
ISFNETRED = max(0, ISFBRUT - RISFDONF - RISFDONCEE - RISFPMED - RISFPMEI - RISFFIP - RISFFCPI)
ZIG_TITRER = is_positive(BRDS + V_RDANT) * 1 - is_positive(BCSG + V_CSANT) * 1 - is_positive(BPRS + V_PSANT) * 1 - is_positive(BCVNSAL + V_CVNANT) * 1 - V_CNR * LIG2
AB10P = APR1 + APR2 + APR3 + APR4
TABTS1BC = is_positive(ALLOC + BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * max(0, SALEXTC - COD1BD) / TTSBC) + 1 - is_positive(ALLOC + BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ)
XTSV = XTSNV - sum([max(0, GLD1V - ABGL1V), max(0, GLD2V - ABGL2V), max(0, GLD3V - ABGL3V)])
TPRNN3 = TEXPR3 - TAPR3
LIGPS = is_positive(BCSG + BRDS + BPRS + BCVNSAL + BREGV + BCDIS + BGLOA + BRSE1 + BRSE2 + BRSE3 + BRSE4 + BRSE5 + 0) * 1 - is_positive(ANNUL2042)
ZIGBASEPS1 = is_positive(BPRS + V_PSANT) * is_positive(INDCTX)
TREP102 = TIND_102 * TD10M2 + 1 - TIND_102 * TFPT2
TIND_103 = positif_ou_nul(T10MINS3 - TFRD3 + COD1EE)
PPE_BOOL_MAX1 = positif_ou_nul(PPELIMRPH - PPE_RCONTP1)
DEDSV = _10MINSV - DFNV * 1 - is_positive(F10BV) * IND_10V
TSN3VK = BPCOSAC - ABTS3VK
FRD4 = max(0, FRDP - FRD1 - FRD2 - FRD3)
PS_BASE = BPRS
IND_CTXC = is_positive(CS_DEG) * is_positive(BCSG) * is_positive(INDCTX)
CS_BASE = BCSG
PPE_BOOL_MAXU = positif_ou_nul(PPELIMRPH - PPE_RCONTPU)
PRSC = arr(BPRS * T_PREL_SOC / 100) * 1 - is_positive(ANNUL2042)
REP101 = IND_101 * D10M1 + 1 - IND_101 * FPT1
XTSNNV = arr(is_positive(XTSNV) * XTSNV * TSASSUV / XEXTSV) * XIND_10V + 1 - XIND_10V * TSASSUV
TTSN1BC = max(0, SALEXTC - COD1BD) - TABTS1BC
ID14 = IN04
PERPSALDV = PREP10V
BPRSAPS = arr(RDRFAPS * 1 - null(4 - V_REGCO) + RDRVAPS + RDRCMAPS + RDNP + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - is_positive(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR
TFRD4 = max(0, TFRDP - TFRD1 - TFRD2 - TFRD3)
RD_BASE = BRDS
PERPPLAFCOMC = is_positive(PERPIMPATRIE) * PERPPLAFC * 3 + 1 - is_positive(PERPIMPATRIE) * 0
TIND_104 = positif_ou_nul(T10MINS4 - TFRD4 + COD1FE)
CS_REVCS = RDNP
TABTS1CP = is_positive(CARTSP1 + REMPLAP1) * arr(TREP101 * ALLO1 / TTSB1) + 1 - is_positive(CARTSP1 + REMPLAP1) * max(0, TREP101 - TABTS1CJ - TABTS1CC)
ABTS1CJ = arr(REP101 * TSHALLO1 / TSB1)
ZIGTITRERS = 1 - is_positive(BCSG + V_CSANT) * is_positive(BRDS + V_RDANT) * 1 - is_positive(BPRS + V_PSANT) * is_positive(BCVNSAL + V_CVNANT) * 1 - V_CNR * LIG2
ZIGTITRECRS = is_positive(BCSG + V_CSANT) * is_positive(BRDS + V_RDANT) * is_positive(BCVNSAL + V_CVNANT) * 1 - is_positive(BPRS + V_PSANT) * 1 - V_CNR * LIG2
ZIGBASECS = is_positive(BCSG + V_CSANT)
LIG2200 = is_positive(IDEGR) * positif_ou_nul(IDEGR - SEUIL_8) * 1 - LIGPS * TYPE2
XEXOCETV = arr(is_positive(XTSNV) * XTSNV * EXOCETV / XEXTSV) * XIND_10V + 1 - XIND_10V * EXOCETV
INDEFTS2 = positif_ou_nul(TSB2 - FRD2)
PPE_BOOL_MINU = positif_ou_nul(PPE_RTAU - PPELIMRPB) * 1 - PPE_BOOL_NADAU
CSGC = arr(BCSG * T_CSG / 100) * 1 - is_positive(ANNUL2042)
XFPT4 = XDF4 * XIND_104 + FRD4 * 1 - XIND_104
LIGBNCIF = is_positive(LIGNOCEP) * 1 - is_positive(LIG3250) + null(BNCIF) + null(BNCIF) * is_positive(LIGBNCDF) + null(BNCIF) * 1 - positif_ou_nul(NOCEPIMP + SPENETNPF - DABNCNP6 - DABNCNP5 - DABNCNP4 - DABNCNP3 - DABNCNP2 - DABNCNP1) + is_positive(LIGDEFBNCNPF) + is_positive(present(DABNCNP6) + present(DABNCNP5) + present(DABNCNP4) + present(DABNCNP3) + present(DABNCNP2) + present(DABNCNP1) + present(BNCAADV) + present(DNOCEPC) + present(DNOCEPP) + present(BNCAADC) + present(BNCAADP) + present(DNOCEP) + present(BNCNPV) + present(BNCNPC) + present(BNCNPP) + present(BNCNPPVV) + present(BNCNPPVC) + present(BNCNPPVP) + present(BNCAABV) + present(ANOCEP) + present(BNCAABC) + present(ANOVEP) + present(BNCAABP) + present(ANOPEP)) * 1 - is_positive(LIGSPENPNEG + LIGSPENPPOS) * LIG0 * LIG2
TABTS1BP = is_positive(BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * ALLOC / TTSBC) + 1 - is_positive(BPCOSAC + GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ - TABTS1BC)
DEFLOC3 = 1 - is_positive(NPLOCNETF3) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4 - LNPRODEF3, 0) - LNPRODEF2, LNPRODEF2)) * positif_ou_nul(LNPRODEF2 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4 - LNPRODEF3, 0)) * 1 - is_positive(ART1731BIS) + min(LNPRODEF2, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF2 * ART1731BIS * is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))
ABTS1AJ = is_positive(TSHALLOV) * arr(REP10V * TSHALLOV / TSBV)
PPECOEFF1 = arr(PPE_COEFFCOND1 * 100)
XETRAN = XETSNNV + XETSNNC
BDCSG = min(BCSG * 1 - V_CNR, max(0, RDRFPS + RDRV + RDNP + max(0, RDRCM1) + PVBARPS - IPPNCS * 1 - V_CNR)) * 1 - is_positive(present(RE168) + present(TAX1649)) * 1 - is_positive(ABDETPLUS) + min(BCSG * 1 - V_CNR, BDCSG3VA)
BCSGAPS = arr(RDRFAPS * 1 - null(4 - V_REGCO) + RDRVAPS + RDRCMAPS + RDNP + ESFP + R1649 + PREREV * 1 - V_CNR) * 1 - is_positive(present(RE168) + present(TAX1649)) + RE168 + TAX1649 * 1 - V_CNR
TABTS3VK = is_positive(GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * BPCOSAC / TTSBC) + 1 - is_positive(GLDGRATC + CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ - TABTS1BC - TABTS1BP)
ZIGMONTPS = is_positive(BPRS + V_PSANT)
ZIGTAUX3 = ZIGTITRECRS
PRNNP = PRNN1 + PRNN2 + PRNN3 + PRNN4
TABTS1DJ = arr(TREP102 * TSHALLO2 / TTSB2)
BDEV25 = min(max(0, PDEVDUR - BDEV30), CIBOIBAIL + CINRJBAIL + TRAMURWC + TRATOIVG + TRAVITWT + CHAUBOISN + POMPESP + POMPESR + CHAUFSOL + POMPESQ + ENERGIEST) * is_positive(is_positive(BQRESS) * is_positive(BQTRAV))
PPE_MABT = PPE_BOOL_MAJOBT * is_positive(PPE_NBMAJO) * PPE_NBMAJO + 1 * PPEMONMAJO + PPE_NBMAJOQAR * PPEMONMAJO / 2 + PPE_BOOL_MAJOBT * null(PPE_NBMAJO + 0) * is_positive(PPE_NBMAJOQAR) * is_positive(PPE_NBMAJOQAR - 1) * PPE_NBMAJOQAR * PPEMONMAJO / 2 + PPEMONMAJO + positif_ou_nul(PPELIMRPH2 - PPE_RCONTPV) * positif_ou_nul(PPE_RTAV - PPELIMRPB) * 1 - PPE_BOOL_MAJOBT * 1 - is_positive(PPE_BOOL_NADAV) * PPE_BOOL_BT * is_positive(PPE_NB_PAC) * 2 * PPEMONMAJO + is_positive(PPE_NB_PAC_QAR) * null(PPE_NB_PAC + 0) * PPEMONMAJO
TABTS1UT = is_positive(CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * GLDGRATC / TTSBC) + 1 - is_positive(CARTSC + REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ - TABTS1BC - TABTS1BP - TABTS3VK)
IND_104 = positif_ou_nul(_10MINS4 - FRD4)
LIGPSP = 1 - null(LIGPS) * null(V_ANTCR)
TTSN1CC = max(0, SALEXT1 - COD1CD) - TABTS1CC
RCM_I = _1RCM_I + _2RCM_I + _3RCM_I + _4RCM_I + _5RCM_I + _6RCM_I + _7RCM_I
LIGPLOC3 = is_positive(DEFLOC3) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
ZIGTITRES = is_positive(BCVNSAL + V_CVNANT) * 1 - is_positive(BRDS + V_RDANT) * 1 - is_positive(BCSG + V_CSANT) * 1 - is_positive(BPRS + V_PSANT) * LIG2
LIG2205 = is_positive(IDEGR) * 1 - positif_ou_nul(IDEGR - SEUIL_8) * 1 - LIGPS * LIG2
ZIG_MONTANT = is_positive(BCSG + BRDS + BPRS + BCVNSAL + V_CSANT + V_RDANT + V_PSANT + V_CVNANT) * 1 - is_positive(ANNUL2042)
TTSNRAP = REMPLAV - TABTSRAP
ZIG_TITRERP = 1 - is_positive(BCSG + V_CSANT) * is_positive(BRDS + V_RDANT) * is_positive(BPRS + V_PSANT) * 1 - is_positive(BCVNSAL + V_CVNANT) * 1 - V_CNR * LIG2
ZIG_NETAP = is_positive(BCSG + BRDS + BPRS + BCVNSAL + BREGV + BCDIS + BGLOA + BRSE1 + BRSE2 + BRSE3 + BRSE4 + BRSE5) * LIG2
LIGDLMRN3 = is_positive(DLMRN3) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
TFPT3 = max(TFRD3, T10MINS3)
PREP10P = PIND_10P * PD10MP + 1 - PIND_10P * PFPTP
CIRDS = min(RDSC, arr(IPPNCS + REVCSXA + REVCSXB + REVCSXC + REVCSXD + REVCSXE + COD8XI + COD8XJ * T_RDS / 100))
PPE_MONO = PPE_BOOL_MONO * 1 + PPE_BOOL_BT * is_positive(PPE_NBMAJO) * PPEMONMAJO + null(PPE_NBMAJO) * is_positive(PPE_NBMAJOQAR) * PPEMONMAJO / 2
FPT3 = max(FRD3, _10MINS3)
RD_REVCS = CS_REVCS
ZIGBASERD1 = is_positive(BRDS + V_RDANT) * is_positive(INDCTX)
ZIG_TITRECP = is_positive(BCSG + V_CSANT) * 1 - is_positive(BRDS + V_RDANT) * is_positive(BPRS + V_PSANT) * 1 - is_positive(BCVNSAL + V_CVNANT) * 1 - V_CNR * LIG2
XFPT3 = XDF3 * XIND_103 + FRD3 * 1 - XIND_103
INDEFTS3 = positif_ou_nul(TSB3 - FRD3)
FPT4 = max(FRD4, _10MINS4)
F10A2 = max(FRDA2, DFN2) if (IND_102 == 0 or IND_102 == 1 and IND_10MIN_02 == 0) else 0
BDEV15 = min(max(0, PDEVDUR - BDEV30 - BDEV25), CRENRJ + CINRJ + CIDEP15 + MATISOSI + MATISOSJ + VOLISO + PORENT + DIAGPERF + RESCHAL) * is_positive(is_positive(BQRESS) * is_positive(BQTRAV)) + min(max(0, PDEVDUR - BDEV30), CIBOIBAIL + CINRJBAIL + CRENRJ + TRAMURWC + CINRJ + TRATOIVG + CIDEP15 + MATISOSI + TRAVITWT + MATISOSJ + VOLISO + PORENT + CHAUBOISN + POMPESP + POMPESR + CHAUFSOL + POMPESQ + ENERGIEST + DIAGPERF + RESCHAL * 1 - present(COD7WX) + present(COD7WX) * COD7WX) * is_positive(is_positive(BQRESS) * null(BQTRAV) * is_positive(RESS) * 1 - present(CRECHOBOI)) + min(max(0, PDEVDUR - BDEV30), CIBOIBAIL + CINRJBAIL + CRENRJ + TRAMURWC + CINRJ + TRATOIVG + CIDEP15 + MATISOSI + CHAUBOISN + POMPESP + POMPESR + CHAUFSOL + POMPESQ + ENERGIEST + DIAGPERF + RESCHAL * 1 - present(COD7WX) + present(COD7WX) * COD7WX) * is_positive(is_positive(BQRESS) * null(BQTRAV) * is_positive(RESS) * present(CRECHOBOI))
TSN1AJ = TSHALLOV - ABTS1AJ
CISYND = arr(TX_REDCOTSYN / 100 * BCOS) * 1 - V_CNR
PERPPLAFIMPC = is_positive(PERPIMPATRIE) * PERPPLAFCOMC + PERPPLAFC + 1 - is_positive(PERPIMPATRIE) * 0
LIGPLOC2 = is_positive(DEFLOC2) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
ZIG_TAUXR = ZIG_TITRER
F10B2 = _10MINS2 if (IND_102 == 1 and IND_10MIN_02 == 1) else 0
ZIG_TITREPN = is_positive(BPRS + V_PSANT) * 1 - V_CNR * LIG2
FRDREPTOT = is_positive(ART1731BIS) * FRDAV - FRDV + FRDAC - FRDC + FRDA1 - FRD1 + FRDA2 - FRD2 + FRDA3 - FRD3 + FRDA4 - FRD4
REDISF = RISFDONF + RISFDONCEE + RISFPMED + RISFPMEI + RISFFIP + RISFFCPI
ZIG_TITRECR = is_positive(BCSG + V_CSANT) * is_positive(BRDS + V_RDANT) * 1 - is_positive(BPRS + V_PSANT) * 1 - is_positive(BCVNSAL + V_CVNANT) * 1 - V_CNR * LIG2
RISFPLAF = max(0, ISFNETRED * is_positive(ISFPLAF - ISFNETRED) + ISFPLAF * 1 - is_positive(ISFPLAF - ISFNETRED))
IND_103 = positif_ou_nul(_10MINS3 - FRD3)
RDSCAPS = arr(BRDSAPS * T_RDS / 100) * 1 - is_positive(ANNUL2042)
XFPT2 = XDF2 * XIND_102 + FRD2 * 1 - XIND_102
INDEFTS4 = positif_ou_nul(TSB4 - FRD4)
TABDOMDAJ = is_positive(CODDAJ) * is_positive(CODEAJ + GLD1V + GLD2V + GLD3V) * arr(TREP10V * CODDAJ / TTSBV) + 1 - is_positive(CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTSV) + 0
XTSNT4 = XEXTS4 - XFPT4
TFPT4 = max(TFRD4, T10MINS4)
ABTS1AP = is_positive(ALLOV) * is_positive(BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * ALLOV / TSBV) + 1 - is_positive(BPCOSAV + GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTS1AJ)
DEFBA5 = 1 - is_positive(BAHQT + BAQT) * DAGRI4 + is_positive(BAHQT + BAQT) * abs(min(max(BAHQT + BAQT - DAGRI6 - DAGRI5, 0) - DAGRI4, DAGRI4)) * positif_ou_nul(DAGRI4 - max(BAHQT + BAQT - DAGRI6 - DAGRI5, 0)) * 1 - is_positive(IPVLOC) * 1 - is_positive(ART1731BIS) + min(DAGRI4, DAGRI - DBAIP - DEFBA2 - DEFBA3 - DEFBA4) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + DAGRI4 * is_positive(is_positive(ART1731BIS * PREM8_11) + null(8 - CMAJ) + null(11 - CMAJ))
LIG2205S = is_positive(IDEGR) * 1 - positif_ou_nul(IDEGR - SEUIL_8) * LIGPS * LIG2
ZIG_TAUXRP = ZIG_TITRERP
FPT2 = max(FRD2, _10MINS2)
ZIG_TAUXCR = ZIG_TITRECR
ZIGTAUX4 = ZIG_TITRECR
PERPSALDP = PREP10P * PERP_BOOL
ISFPOSTPLAF = max(0, ISFNETRED - RISFPLAF)
ABTSRBJ = is_positive(CARTSC) * is_positive(REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * CARTSC / TSBC) + 1 - is_positive(REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTS1BJ - ABTS1BP - ABTS3VK - ABTS1UT)
XTSNT2 = XEXTS2 - XFPT2
DLMRN4 = is_positive(DEFBIC3) * 1 - positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * DEFBIC3 + positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * min(max(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFBIC6 - DEFBIC5 - DEFBIC4, 0) - DEFBIC3, DEFBIC3) * -1 * positif_ou_nul(DEFBIC3 - max(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFBIC6 - DEFBIC5 - DEFBIC4, 0)) * 1 - is_positive(ART1731BIS) + min(DEFBIC3, DEFNP - DEFNPI - DLMRN2 - DLMRN3) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFBIC3 * is_positive(ART1731BIS * PREM8_11)
INDIRPS = 1 * 1 - LIGPS * is_positive(3 - ANTINDIRPS) + 3 * 1 - is_positive(1 - LIGPS * is_positive(3 - ANTINDIRPS))
TTSNDAJ = CODDAJ - TABDOMDAJ
ZIG_TAUXCP = ZIG_TITRECP
TTSN1UT = GLDGRATC - TABTS1UT
ABTS3VJ = is_positive(BPCOSAV) * is_positive(GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * BPCOSAV / TSBV) + 1 - is_positive(GLDGRATV + CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTS1AJ - ABTS1AP)
REP102 = IND_102 * D10M2 + 1 - IND_102 * FPT2
PRSCAPS = arr(BPRSAPS * T_PREL_SOC / 100) * 1 - is_positive(ANNUL2042)
XTSN4 = is_positive(XTSNT4) * min(0, XTSNT4) + positif_ou_nul(XTSNT4) * XTSNT4
TABTSRCJ = is_positive(REMPLAP1) * arr(TREP101 * CARTSP1 / TTSB1) + 1 - is_positive(REMPLAP1) * max(0, TREP101 - TABTS1CJ - TABTS1CC - TABTS1CP)
ZIG_RVTO = is_positive(CS_RVT + RD_RVT + PS_RVT + IND_ZIGRVT) * 1 - V_CNR * 1 - is_positive(ANNUL2042) * LIG1 * LIG2 * null(3 - INDIRPS)
LIGDEFBA5 = is_positive(DEFBA5) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
LIG2200S = is_positive(IDEGR) * positif_ou_nul(IDEGR - SEUIL_8) * LIGPS * TYPE2
XTSN2 = is_positive(XTSNT2) * min(0, XTSNT2) + positif_ou_nul(XTSNT2) * XTSNT2
TTSN1BP = ALLOC - TABTS1BP
RDSAC = max(0, RDSC - CIRDS)
TSNRBJ = CARTSC - ABTSRBJ
NONLIGPS = is_positive(is_positive(1 - LIGPS) + is_positive(null(V_NOTRAIT - 23) + null(V_NOTRAIT - 33) + null(V_NOTRAIT - 43) + null(V_NOTRAIT - 53) + null(V_NOTRAIT - 63)))
ABTS1CP = is_positive(ALLO1) * is_positive(CARTSP1 + REMPLAP1) * arr(REP101 * ALLO1 / TSB1) + 1 - is_positive(CARTSP1 + REMPLAP1) * max(0, REP101 - ABTS1CJ)
TSN3VJ = BPCOSAV - ABTS3VJ
TSN1CJ = TSHALLO1 - ABTS1CJ
PERPSALNP = PERPSALP - PERPSALDP
PERPSALNV = PERPSALV - PERPSALDV + ELURASV
CIPRS = min(PRSC, arr(IPPNCS * T_PREL_SOC / 100))
CSGCAPS = arr(BCSGAPS * T_CSG / 100) * 1 - is_positive(ANNUL2042)
ABTSRCJ = is_positive(CARTSP1) * is_positive(REMPLAP1) * arr(REP101 * CARTSP1 / TSB1) + 1 - is_positive(REMPLAP1) * max(0, REP101 - ABTS1CJ - ABTS1CP)
DEDS2 = _10MINS2 - DFN2 * 1 - is_positive(F10B2) * IND_102
DEFLOC4 = 1 - is_positive(NPLOCNETF4) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4, 0) - LNPRODEF3, LNPRODEF3)) * positif_ou_nul(LNPRODEF3 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5 - LNPRODEF4, 0)) * 1 - is_positive(ART1731BIS) + min(LNPRODEF3, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF3 * ART1731BIS * is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))
PS_REVCS = CS_REVCS
REPRCM1 = is_positive(REPRCMBIS) * arr(REPRCMBIS * _1RCM_I / RCM_I) + 1 - is_positive(REPRCMBIS) * 0
TABTSRCP = max(0, TREP101 - TABTS1CJ - TABTS1CC - TABTS1CP - TABTSRCJ)
TTSN3VK = BPCOSAC - TABTS3VK
F10A4 = max(FRDA4, DFN4) if (IND_104 == 0 or IND_104 == 1 and IND_10MIN_04 == 0) else 0
DFRCM5 = DEFRCM6 * is_positive(DFRCMN) + DEFRCM6 * is_positive(DEFRCM + DEFRCM2 + DEFRCM3 + DEFRCM4 + DEFRCM5 - RCM_I) * 1 - is_positive(DFRCMN) + max(0, DEFRCM6 - RCM_I - DEFRCM - DEFRCM2 - DEFRCM3 - DEFRCM4 - DEFRCM5) * positif_ou_nul(RCM_I - DEFRCM - DEFRCM2 - DEFRCM3 - DEFRCM4 - DEFRCM5) * 1 - is_positive(DFRCMN) * 1 - is_positive(ART1731BIS) + min(DEFRCM6, REPRCM - REPRCMBIS) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFRCM6 * is_positive(ART1731BIS * PREM8_11)
ABTS1TT = is_positive(GLDGRATV) * is_positive(CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * GLDGRATV / TSBV) + 1 - is_positive(CARTSV + REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTS1AJ - ABTS1AP - ABTS3VJ)
ZIG_RTF = is_positive(CS_RTF + RD_RTF + PS_RTF + IND_ZIGRTF) * 1 - V_CNR * 1 - is_positive(ANNUL2042) * LIG1 * LIG2 * null(3 - INDIRPS)
PERPREVTOTV = max(0, PERPSALNV + PERPNONSALV)
ABTSRCP = max(0, REP101 - ABTS1CJ + ABTS1CP + ABTSRCJ) + 0
TTSN1CP = ALLO1 - TABTS1CP
CICSG = min(CSGC, arr(IPPNCS * T_CSG / 100))
RISFE = is_positive(DISFBASE) * is_positive(ISFETRANG) * min(ISFPOSTPLAF, ISFETRANG)
ZIG_RCM = is_positive(CS_RCM + RD_RCM + PS_RCM + IND_ZIGRCM) * 1 - V_CNR * 1 - is_positive(ANNUL2042) * LIG1 * LIG2 * null(3 - INDIRPS)
TTSN1DJ = TSHALLO2 - TABTS1DJ
CIDEVDUR = arr(BDEV30 * TX30 / 100 + BDEV25 * TX25 / 100 + BDEV15 * TX15 / 100) * 1 - is_positive(RE168 + TAX1649) * 1 - V_CNR
REPRCM2 = is_positive(REPRCMBIS) * min(arr(REPRCMBIS * _2RCM_I / RCM_I), REPRCMBIS - REPRCM1) + 1 - is_positive(REPRCMBIS) * 0
TABTSRBJ = is_positive(REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * CARTSC / TTSBC) + 1 - is_positive(REMPLAC + CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ - TABTS1BC - TABTS1BP - TABTS3VK - TABTS1UT)
F10A3 = max(FRDA3, DFN3) if (IND_103 == 0 or IND_103 == 1 and IND_10MIN_03 == 0) else 0
PERPPLAFV = is_positive(PERPINDV) * max(0, is_positive(PERPREVTOTV) * max(min(arr(PERPREVTOTV * TX_PERPPLAF / 100), LIM_PERPMAX), LIM_PERPMIN) - PERPV + 1 - is_positive(PERPREVTOTV) * LIM_PERPMIN - PERPV) * 1 - V_CNR
TSN1AP = ALLOV - ABTS1AP
TTSNRCP = REMPLAP1 - TABTSRCP
RDSN = RDSC - CIRDS
TABTS1DC = is_positive(ALLO2 + CARTSP2 + REMPLAP2) * arr(TREP102 * max(0, SALEXT2 - COD1DD) / TTSB2) + 1 - is_positive(ALLO2 + CARTSP2 + REMPLAP2) * max(0, TREP102 - TABTS1DJ)
XTSNT3 = XEXTS3 - XFPT3
REP104 = IND_104 * D10M4 + 1 - IND_104 * FPT4
F10B4 = _10MINS4 if (IND_104 == 1 and IND_10MIN_04 == 1) else 0
RDBASE = RDSN - CRDSIM
TREP103 = TIND_103 * TD10M3 + 1 - TIND_103 * TFPT3
CIPRSAPS = min(PRSCAPS, arr(IPPNCS * T_PREL_SOC / 100))
ABTSRBP = is_positive(REMPLAC) * is_positive(CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * REMPLAC / TSBC) + 1 - is_positive(CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTS1BJ - ABTS1BP - ABTS3VK - ABTS1UT - ABTSRBJ)
LIGDLMRN4 = is_positive(DLMRN4) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
REV4RBJC = max(CARTSC - ABTSRBJ, 0)
ABTS1DJ = arr(REP102 * TSHALLO2 / TSB2)
CIRDSAPS = min(RDSCAPS, arr(IPPNCS + REVCSXA + REVCSXB + REVCSXC + REVCSXD + REVCSXE * T_RDS / 100))
PRS = max(0, PRSC - CIPRS)
LIGPLOC4 = is_positive(DEFLOC4) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
ADEVDUR = BDEV30 + BDEV25 + BDEV15
DEVDURCUM = ADEVDUR + V_BTDEVDUR * 1 - present(DEPCHOBAS) + DEPCHOBAS
ABTS1FJ = arr(REP104 * TSHALLO4 / TSB4)
TGLDOMAVDAJV = max(CODDAJ - TABDOMDAJ, 0)
TSN1TT = GLDGRATV - ABTS1TT
PRSAPS = PRSCAPS - CIPRSAPS
REP103 = IND_103 * D10M3 + 1 - IND_103 * FPT3
ZIG_PROF = is_positive(CS_REVCS + RD_REVCS + PS_REVCS + IND_ZIGPROF) * 1 - is_positive(ANNUL2042) * LIG1 * null(3 - INDIRPS)
DEFBA6 = 1 - is_positive(BAHQT + BAQT) * DAGRI5 + is_positive(BAHQT + BAQT) * abs(min(max(BAHQT + BAQT - DAGRI6, 0) - DAGRI5, DAGRI5)) * positif_ou_nul(DAGRI5 - max(BAHQT + BAQT - DAGRI6, 0)) * 1 - is_positive(IPVLOC) * 1 - is_positive(ART1731BIS) + min(DAGRI5, DAGRI - DBAIP - DEFBA2 - DEFBA3 - DEFBA4 - DEFBA5) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + DAGRI5 * is_positive(is_positive(ART1731BIS * PREM8_11) + null(8 - CMAJ) + null(11 - CMAJ))
LIGDFRCM5 = is_positive(DFRCM5) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DFRCM4 = DEFRCM5 * is_positive(DFRCMN) + DEFRCM5 * is_positive(DEFRCM + DEFRCM2 + DEFRCM3 + DEFRCM4 - RCM_I) * 1 - is_positive(DFRCMN) + max(0, DEFRCM5 - RCM_I - DEFRCM - DEFRCM2 - DEFRCM3 - DEFRCM4) * positif_ou_nul(RCM_I - DEFRCM - DEFRCM2 - DEFRCM3 - DEFRCM4) * 1 - is_positive(DFRCMN) * 1 - is_positive(ART1731BIS) + min(DEFRCM5, REPRCM - REPRCMBIS - DFRCM5) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFRCM5 * is_positive(ART1731BIS * PREM8_11)
ZIG_CRDETR = is_positive(CICSG + CIRDS + CIPRS) * LIG2
TABTSRBP = is_positive(CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * REMPLAC / TTSBC) + 1 - is_positive(CODDBJ + CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTS1BJ - TABTS1BC - TABTS1BP - TABTS3VK - TABTS1UT - TABTSRBJ)
TABDOMEAJ = is_positive(CODEAJ) * is_positive(GLD1V + GLD2V + GLD3V) * arr(TREP10V * CODEAJ / TTSBV) + 1 - is_positive(GLD1V + GLD2V + GLD3V) * max(0, TREP10V - TABTSV - TABDOMDAJ) + 0
TTSN1DC = max(0, SALEXT2 - COD1DD) - TABTS1DC
DLMRN5 = is_positive(DEFBIC4) * 1 - positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * DEFBIC4 + positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * min(max(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFBIC6 - DEFBIC5, 0) - DEFBIC4, DEFBIC4) * -1 * positif_ou_nul(DEFBIC4 - max(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFBIC6 - DEFBIC5, 0)) * 1 - is_positive(ART1731BIS) + min(DEFBIC4, DEFNP - DEFNPI - DLMRN2 - DLMRN3 - DLMRN4) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFBIC4 * is_positive(ART1731BIS * PREM8_11)
F10B3 = _10MINS3 if (IND_103 == 1 and IND_10MIN_03 == 1) else 0
CICSGAPS = min(CSGCAPS, arr(IPPNCS * T_CSG / 100))
TSNRCJ = CARTSP1 - ABTSRCJ
REPRCM3 = is_positive(REPRCMBIS) * min(arr(REPRCMBIS * _3RCM_I / RCM_I), REPRCMBIS - REPRCM1 - REPRCM2) + 1 - is_positive(REPRCMBIS) * 0
ABTS1FP = is_positive(ALLO4) * is_positive(CARTSP4 + REMPLAP4) * arr(REP104 * ALLO4 / TSB4) + 1 - is_positive(CARTSP4 + REMPLAP4) * max(0, REP104 - ABTS1FJ)
ZIG_RF = is_positive(CS_RFG + RD_RFG + PS_RFG + IND_ZIGRFG) * 1 - null(4 - V_REGCO) * 1 - is_positive(ANNUL2042) * LIG1 * LIG2 * null(3 - INDIRPS)
TREP104 = TIND_104 * TD10M4 + 1 - TIND_104 * TFPT4
TTSNRBP = REMPLAC - TABTSRBP
TSNRCP = REMPLAP1 - ABTSRCP
TTSNRBJ = CARTSC - TABTSRBJ
CSG = max(0, CSGC - CICSG)
REPRCM4 = is_positive(REPRCMBIS) * min(arr(REPRCMBIS * _4RCM_I / RCM_I), REPRCMBIS - REPRCM1 - REPRCM2 - REPRCM3) + 1 - is_positive(REPRCMBIS) * 0
ABTSC = ABTS1BJ + ABTS1BP + ABTS3VK + ABTS1UT + ABTSRBJ + ABTSRBP
ISFTRED = RISFDONF + RISFDONCEE + RISFPMED + RISFPMEI + RISFFIP + RISFFCPI + RISFE
TSN1CP = ALLO1 - ABTS1CP
TABGLTV = sum([TABGL1V, TABGL2V, TABGL3V]) + TABDOMDAJ + TABDOMEAJ
DEDS3 = _10MINS3 - DFN3 * 1 - is_positive(F10B3) * IND_103
TSN1FP = ALLO4 - ABTS1FP
TTSNRCJ = CARTSP1 - TABTSRCJ
ABTSRAJ = is_positive(CARTSV) * is_positive(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * CARTSV / TSBV) + 1 - is_positive(REMPLAV + CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTS1AJ - ABTS1AP - ABTS3VJ - ABTS1TT)
LIGDLMRN5 = is_positive(DLMRN5) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
CSTOTSSPENA = max(0, CSG + RDSN + PRS + BREGV + CVNSALC + CDIS + CGLOA + RSE1N + RSE2N + RSE3N + RSE4N + RSE5N)
XTSN3 = is_positive(XTSNT3) * min(0, XTSNT3) + positif_ou_nul(XTSNT3) * XTSNT3
NMAJP1 = max(0, MAJO1728PS + arr(PRS - PRSPROV * COPETO / 100) + FLAG_TRTARDIF * MAJOPSTARDIF_D + FLAG_TRTARDIF_F * is_positive(PROPPS_A) * MAJOPSTARDIF_P + 1 - is_positive(PROPPS_A) * MAJOPSTARDIF_D - FLAG_TRTARDIF_F * 1 - is_positive(PROPPS_A) * is_positive(FLAG_RECTIF) * MAJOPSTARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJOPSTARDIF_A) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
DLMRN6 = is_positive(DEFBIC5) * 1 - positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * DEFBIC5 + positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * min(max(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFBIC6, 0) - DEFBIC5, DEFBIC5) * -1 * positif_ou_nul(DEFBIC5 - max(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT - DEFBIC6, 0)) * 1 - is_positive(ART1731BIS) + min(DEFBIC5, DEFNP - DEFNPI - DLMRN2 - DLMRN3 - DLMRN4 - DLMRN5) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFBIC5 * is_positive(ART1731BIS * PREM8_11)
BINRPS = max(0, CSG - CSGIM) + max(0, RDSN - CRDSIM) + max(0, PRS - PRSPROV) + max(0, CVNSALC - COD8YT) + max(0, CDIS - CDISPROV) + max(0, CGLOA - COD8YL) + max(0, RSE1 - CSPROVYD) + max(0, RSE2 - CSPROVRSE2) + max(0, RSE3 - CSPROVYG) + max(0, RSE4 - CSPROVRSE4) + max(0, RSE5 - CSPROVYE) + BREGV
TABTS1DP = is_positive(CARTSP2 + REMPLAP2) * arr(TREP102 * ALLO2 / TTSB2) + 1 - is_positive(CARTSP2 + REMPLAP2) * max(0, TREP102 - TABTS1DJ - TABTS1DC)
ISF5 = max(0, ISFPOSTPLAF - RISFE)
TABTS1EJ = arr(TREP103 * TSHALLO3 / TTSB3)
NMAJP4 = sum([MAJOPS30, MAJOPS32, MAJOPS55, MAJOPS3, MAJOPS4, MAJOPS5, MAJOPS6]) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
TSN1FJ = TSHALLO4 - ABTS1FJ
NMAJRSE21 = max(0, MAJO1728RSE2 + arr(max(0, RSE8TV - CIRSE8TV - CSPROVYF) + max(0, RSE8SA - CIRSE8SA - CSPROVYN) * COPETO / 100) * 1 - V_CNR + FLAG_TRTARDIF * MAJORSE2TARDIF_D + FLAG_TRTARDIF_F * MAJORSE2TARDIF_D - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJORSE2TARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJORSE2TARDIF_A) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
PERPREVTOTP = max(0, PERPSALNP + PERPNONSALP)
CSBASE = CSG - CSGIM
TABGL1V = is_positive(GLD1V) * is_positive(GLD2V + GLD3V) * arr(TREP10V * GLD1V / TTSBV) + 1 - is_positive(GLD2V + GLD3V) * max(0, TREP10V - TABTSV - TABDOMDAJ - TABDOMEAJ) + 0
ZIGTITRE = is_positive(is_positive(BCSG + V_CSANT + BRDS + V_RDANT + BPRS + V_PSANT) * 1 - V_CNR * 1 - is_positive(ZIG_RF + max(0, NPLOCNETSF)) + is_positive(BCVNSAL + V_CVNANT + BCDIS + V_CDISANT) * TYPE4) * 1 - is_positive(ANNUL2042)
NAPCRPIAMD1 = PRS + CSG + RDSN + CVNSALC + CDIS + CGLOA + RSE1N + RSE2N + RSE3N + RSE4N + RSE5N
LIGISFZERO = null(ISF5) * 1 - is_positive(ANNUL2042) * is_positive(20 - V_NOTRAIT) * LIGISF
TABTSRDJ = is_positive(REMPLAP2) * arr(TREP102 * CARTSP2 / TTSB2) + 1 - is_positive(REMPLAP2) * max(0, TREP102 - TABTS1DJ - TABTS1DC - TABTS1DP)
PERPPLAFCOMV = is_positive(PERPIMPATRIE) * PERPPLAFV * 3 + 1 - is_positive(PERPIMPATRIE) * 0
ZIGTITRECRPS = is_positive(BCSG + V_CSANT) * is_positive(BRDS + V_RDANT) * is_positive(BPRS + V_PSANT) * is_positive(BCVNSAL + V_CVNANT) * 1 - V_CNR * 1 - is_positive(ZIG_RF + max(0, NPLOCNETSF)) * LIG2
NMAJGLO1 = max(0, MAJO1728GLO + arr(CGLOA - COD8YL * COPETO / 100) + FLAG_TRTARDIF * MAJOGLOTARDIF_D + FLAG_TRTARDIF_F * MAJOGLOTARDIF_D - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJOGLOTARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJOGLOTARDIF_A) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
TGLN4V = max(CODDAJ - TABDOMDAJ, 0) + max(CODEAJ - TABDOMEAJ, 0)
NMAJRSE51 = max(0, MAJO1728RSE5 + arr(RSE5N - CSPROVYE * COPETO / 100) + FLAG_TRTARDIF * MAJORSE5TARDIF_D + FLAG_TRTARDIF_F * MAJORSE5TARDIF_D - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJORSE5TARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJORSE5TARDIF_A) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
NMAJRSE31 = max(0, MAJO1728RSE3 + arr(RSE3N - CSPROVYG * COPETO / 100) + FLAG_TRTARDIF * MAJORSE3TARDIF_D + FLAG_TRTARDIF_F * MAJORSE3TARDIF_D - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJORSE3TARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJORSE3TARDIF_A) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
TTSN1EJ = TSHALLO3 - TABTS1EJ
NMAJCDIS1 = max(0, MAJO1728CDIS + arr(CDIS - CDISPROV * COPETO / 100) * 1 - V_CNR + FLAG_TRTARDIF * MAJOCDISTARDIF_D + FLAG_TRTARDIF_F * MAJOCDISTARDIF_D - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJOCDISTARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJOCDISTARDIF_A) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
DEFLOC5 = 1 - is_positive(NPLOCNETF5) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5, 0) - LNPRODEF4, LNPRODEF4)) * positif_ou_nul(LNPRODEF4 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6 - LNPRODEF5, 0)) * 1 - is_positive(ART1731BIS) + min(LNPRODEF4, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF4 * ART1731BIS * is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))
CIMPTL = ATEC + ADEVDUR + TOTBGE
ABTS1EJ = arr(REP103 * TSHALLO3 / TSB3)
LIGDEFBA6 = is_positive(DEFBA6) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
TTSNT1 = TTSN1CJ + TTSN1CC + TTSN1CP + TTSNRCJ + TTSNRCP
PERPPLAFIMPV = is_positive(PERPIMPATRIE) * PERPPLAFCOMV + PERPPLAFV + 1 - is_positive(PERPIMPATRIE) * 0
NMAJISF1 = max(0, MAJO1728ISF + arr(ISF5 * COPETOISF / 100) * positif_ou_nul(ISF5 - SEUIL_12) + FLAG_TRTARDIF * MAJOISFTARDIF_D + FLAG_TRTARDIF_F * MAJOISFTARDIF_D - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJOISFTARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJOISFTARDIF_A)
DFRCM3 = DEFRCM4 * is_positive(DFRCMN) + DEFRCM4 * is_positive(DEFRCM + DEFRCM2 + DEFRCM3 - RCM_I) * 1 - is_positive(DFRCMN) + max(0, DEFRCM4 - RCM_I - DEFRCM) * positif_ou_nul(RCM_I - DEFRCM - DEFRCM2 - DEFRCM3) * 1 - is_positive(DFRCMN) * 1 - is_positive(ART1731BIS) + min(DEFRCM4, REPRCM - REPRCMBIS - DFRCM5 - DFRCM4) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFRCM4 * is_positive(ART1731BIS * PREM8_11)
NMAJR1 = max(0, MAJO1728RD + arr(RDSN - CRDSIM * COPETO / 100) + FLAG_TRTARDIF * MAJORDTARDIF_D + FLAG_TRTARDIF_F * is_positive(PROPRD_A) * MAJORDTARDIF_P + 1 - is_positive(PROPRD_A) * MAJORDTARDIF_D - FLAG_TRTARDIF_F * 1 - is_positive(PROPCS_A) * is_positive(FLAG_RECTIF) * MAJORDTARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJORDTARDIF_A) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
NATMAJISF = is_positive(is_positive(RETISF) * is_positive(NMAJISF1) + is_positive(NMAJISF1)) + 2 * is_positive(RETISF) * 1 - is_positive(NMAJISF1)
ABTS1DP = is_positive(ALLO2) * is_positive(CARTSP2 + REMPLAP2) * arr(REP102 * ALLO2 / TSB2) + 1 - is_positive(CARTSP2 + REMPLAP2) * max(0, REP102 - ABTS1DJ)
CSGAC = max(0, CSGC - CICSG)
ABDOMDBJ = is_positive(CODDBJ) * is_positive(CODEBJ + GLD1C + GLD2C + GLD3C) * arr(REP10C * CODDBJ / TSBC) + 1 - is_positive(CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTSC) + 0
DEDS4 = _10MINS4 - DFN4 * 1 - is_positive(F10B4) * IND_104
PERPPLAFP = is_positive(PERPINDP) * max(0, is_positive(PERPREVTOTP) * max(min(arr(PERPREVTOTP * TX_PERPPLAF / 100), LIM_PERPMAX), LIM_PERPMIN) - PERPP + 1 - is_positive(PERPREVTOTP) * LIM_PERPMIN - PERPP) * 1 - V_CNR
PTOISF = arr(ISF5 * COPETOISF / 100) + arr(ISF5 * TXINTISF / 100)
TTSN1DP = ALLO2 - TABTS1DP
PSBASE = PRS - PRSPROV
NMAJCVN1 = max(0, MAJO1728CVN + arr(CVNSALC - COD8YT * COPETO / 100) + FLAG_TRTARDIF * MAJOCVNTARDIF_D + FLAG_TRTARDIF_F * MAJOCVNTARDIF_D - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJOCVNTARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJOCVNTARDIF_A) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
TGLDOMAVEAJV = max(CODEAJ - TABDOMEAJ, 0)
TSNRBP = REMPLAC - ABTSRBP
REV4RAJV = max(CARTSV - ABTSRAJ, 0)
NMAJCVN4 = sum([MAJOCVN55, MAJOCVN3, MAJOCVN4, MAJOCVN5, MAJOCVN6]) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
CSGAPS = max(0, CSGCAPS - CICSGAPS)
TTSNGL1V = GLD1V - TABGL1V
NMAJRSE24 = sum([MAJORSE255, MAJORSE23, MAJORSE24, MAJORSE25, MAJORSE26]) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
NMAJC1 = max(0, MAJO1728CS + arr(CSG - CSGIM * COPETO / 100) + FLAG_TRTARDIF * MAJOCSTARDIF_D + FLAG_TRTARDIF_F * is_positive(PROPCS_A) * MAJOCSTARDIF_P + 1 - is_positive(PROPCS_A) * MAJOCSTARDIF_D - FLAG_TRTARDIF_F * 1 - is_positive(PROPCS_A) * is_positive(FLAG_RECTIF) * MAJOCSTARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJOCSTARDIF_A) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
TSN1DJ = TSHALLO2 - ABTS1DJ
REPRCM5 = is_positive(REPRCMBIS) * min(arr(REPRCMBIS * _5RCM_I / RCM_I), REPRCMBIS - REPRCM1 - REPRCM2 - REPRCM3 - REPRCM4) + 1 - is_positive(REPRCMBIS) * 0
RDSNAPS = RDSCAPS - CIRDSAPS
TABTS1FJ = arr(TREP104 * TSHALLO4 / TTSB4)
ZIGTAUX1 = ZIGTITRECRPS
TTSNRDJ = CARTSP2 - TABTSRDJ
MAJTXRSE21 = 1 - is_positive(V_NBCOD1728RSE2) * 1 - is_positive(CMAJ) * is_positive(NMAJRSE21) * TXPF1728RSE2 + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728RSE2) * -1
TGLNAV1V = max(GLD1V - TABGL1V, 0)
ABTSRFJ = is_positive(CARTSP4) * is_positive(REMPLAP4) * arr(REP104 * CARTSP4 / TSB4) + 1 - is_positive(REMPLAP4) * max(0, REP104 - ABTS1FJ - ABTS1FP)
MAJTXRSE51 = 1 - is_positive(V_NBCOD1728RSE5) * 1 - is_positive(CMAJ) * is_positive(NMAJRSE51) * TXPF1728RSE5 + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728RSE5) * -1
NMAJRSE44 = sum([MAJORSE455, MAJORSE43, MAJORSE44, MAJORSE45, MAJORSE46]) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
TTSNEAJ = CODEAJ - TABDOMEAJ
MAJTXC1 = 1 - is_positive(V_NBCOD1728CRP) * 1 - is_positive(CMAJ) * is_positive(NMAJC1 + NMAJR1 + NMAJP1) * TXPF1728CRP + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728CRP) * -1
MAJTXISF1 = 1 - is_positive(V_NBCOD1728ISF) * 1 - is_positive(CMAJ_ISF) * is_positive(NMAJISF1) * TXPF1728ISF + is_positive(CMAJ_ISF) * COPETOISF + is_positive(V_NBCOD1728ISF) * -1
TABTS1EC = is_positive(ALLO3 + CARTSP3 + REMPLAP3) * arr(TREP103 * max(0, SALEXT3 - COD1ED) / TTSB3) + 1 - is_positive(ALLO3 + CARTSP3 + REMPLAP3) * max(0, TREP103 - TABTS1EJ)
NMAJR4 = sum([MAJORD30, MAJORD32, MAJORD55, MAJORD3, MAJORD4, MAJORD5, MAJORD6]) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
MAJTXGLO1 = 1 - is_positive(V_NBCOD1728GLO) * 1 - is_positive(CMAJ) * is_positive(NMAJGLO1) * TXPF1728GLO + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728GLO) * -1
NMAJRSE14 = sum([MAJORSE155, MAJORSE13, MAJORSE14, MAJORSE15, MAJORSE16]) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
TTSN1EC = max(0, SALEXT3 - COD1ED) - TABTS1EC
DEFLOC6 = 1 - is_positive(NPLOCNETF6) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6, 0) - LNPRODEF5, LNPRODEF5)) * positif_ou_nul(LNPRODEF5 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7 - LNPRODEF6, 0)) * 1 - is_positive(ART1731BIS) + min(LNPRODEF5, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF5 * ART1731BIS * is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))
NMAJGLO4 = sum([MAJOGLO55, MAJOGLO3, MAJOGLO4, MAJOGLO5, MAJOGLO6]) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
LIGDFRCM4 = is_positive(DFRCM4) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ISF4BIS = max(0, ISF5)
ABDOMEBJ = is_positive(CODEBJ) * is_positive(GLD1C + GLD2C + GLD3C) * arr(REP10C * CODEBJ / TSBC) + 1 - is_positive(GLD1C + GLD2C + GLD3C) * max(0, REP10C - ABTSC - ABDOMDBJ) + 0
ABGLTC = sum([ABGL1C, ABGL2C, ABGL3C]) + ABDOMDBJ + ABDOMEBJ
TABTSC = TABTS1BJ + TABTS1BC + TABTS1BP + TABTS3VK + TABTS1UT + TABTSRBJ + TABTSRBP
MAJTXCDIS1 = 1 - is_positive(V_NBCOD1728CDIS) * 1 - is_positive(CMAJ) * is_positive(NMAJCDIS1) * TXPF1728CDIS + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728CDIS) * -1
GLDOMAVEBJC = max(CODEBJ - ABDOMEBJ, 0) * INDEFTSC
PERP_COND1 = is_positive(PERP_MUT) * 1 - is_positive(PERPIMPATRIE) * is_positive(PERP_COTV - PERPPLATVANT) * is_positive(PERPPLATCANT - PERP_COTC) + is_positive(PERPIMPATRIE) * is_positive(PERP_COTV - PERPPLAFIMPV) * is_positive(PERPPLAFIMPC - PERP_COTC)
TSNT1 = TSN1CJ + TSN1CP + TSNRCJ + TSNRCP
MAJTXRSE24 = 1 - is_positive(V_NBCODIRSE2) * 1 - is_positive(CMAJ) * is_positive(NMAJRSE24) * TXPFIRSE2 + is_positive(CMAJ) * COPETO + is_positive(V_NBCODIRSE2) * -1
ILI_SYNT_ISF = 1 - positif_ou_nul(ISF4BIS - SEUIL_12) * null(V_ANTISF + 0) * ISF4BIS + positif_ou_nul(ISF4BIS - SEUIL_12) * ISF4BIS
TPRN1 = is_positive(TTSNT1) * is_positive(TTSNT1 + TPRNN1) * TTSNT1 + TPRNN1 + positif_ou_nul(TTSNT1) * TPRNN1
TABGL2V = is_positive(GLD2V) * is_positive(GLD3V) * arr(TREP10V * GLD2V / TTSBV) + 1 - is_positive(GLD3V) * max(0, TREP10V - TABTSV - TABDOMDAJ - TABDOMEAJ - TABGL1V) + 0
GLN4C = max(CODDBJ - ABDOMDBJ, 0) + max(CODEBJ - ABDOMEBJ, 0) * INDEFTSC
LIGDFRCM3 = is_positive(DFRCM3) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TSN1EJ = TSHALLO3 - ABTS1EJ
TSNRAJ = CARTSV - ABTSRAJ
LIGPLOC5 = is_positive(DEFLOC5) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
TGLN1V = max(GLD1V - TABGL1V, 0)
TTSNGL2V = GLD2V - TABGL2V
LIGISF17285 = is_positive(NMAJISF1) * 1 - is_positive(ANNUL2042) * LIGISF * 1 - is_positive(SEUIL_12 - ISF4BIS) * 1 - null(ISF5) * is_positive(V_FLAGR34 + null(CMAJ_ISF - 34))
MAJTXRSE31 = 1 - is_positive(V_NBCOD1728RSE3) * 1 - is_positive(CMAJ) * is_positive(NMAJRSE31) * TXPF1728RSE3 + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728RSE3) * -1
LIGISFDEGR = null(2 - is_positive(SEUIL_8 - ISFDEGR) + positif_ou_nul(ISF5 - SEUIL_12)) + null(V_ANTISF) * INDCTX23 * null(5 - V_IND_TRAIT) * 1 - is_positive(ANNUL2042)
ZIG_TITRECRP = is_positive(BCSG + V_CSANT) * is_positive(BRDS + V_RDANT) * is_positive(BPRS + V_PSANT) * 1 - is_positive(BCVNSAL + V_CVNANT) * 1 - V_CNR * 1 - is_positive(ZIG_RF + max(0, NPLOCNETSF)) * LIG2
NMAJRSE54 = sum([MAJORSE555, MAJORSE53, MAJORSE54, MAJORSE55, MAJORSE56]) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
DLMRN1 = 1 - positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * abs(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) + positif_ou_nul(sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * positif_ou_nul(DEFBIC5 + DEFBIC4 + DEFBIC3 + DEFBIC2 + DEFBIC1 - sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT) * DEFBIC5 + DEFBIC4 + DEFBIC3 + DEFBIC2 + DEFBIC1 - sum([BICNPV, BICNPC, BICNPP]) + MIB_NETNPCT * null(DLMRN6 + DLMRN5 + DLMRN4 + DLMRN3 + DLMRN2) * 1 - is_positive(ART1731BIS) + DEFBICNPF * is_positive(ART1731BIS * 1 - PREM8_11) + BICHDEV + BICHDEC + BICHDEP + BICDEV + BICDEC + BICDEP * is_positive(ART1731BIS * PREM8_11)
PISF = INCISF_NET + NMAJISF1 + arr(ISF5 * TXINTISF / 100) * 1 - is_positive(FLAG_PRIM + FLAG_RETARD + FLAG_DEFAUT)
TSN1 = is_positive(TSNT1) * min(0, TSNT1 + PRNN1) + positif_ou_nul(TSNT1) * TSNT1
ABTSRDJ = is_positive(CARTSP2) * is_positive(REMPLAP2) * arr(REP102 * CARTSP2 / TSB2) + 1 - is_positive(REMPLAP2) * max(0, REP102 - ABTS1DJ - ABTS1DP)
TPRR1 = arr(TPRN1 * PRB1 / TEXPR1) + arr(TPRN1 * COD1CH / TEXPR1)
LIGDLMRN6 = is_positive(DLMRN6) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
ABTSRAP = is_positive(REMPLAV) * is_positive(CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * REMPLAV / TSBV) + 1 - is_positive(CODDAJ + CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTS1AJ - ABTS1AP - ABTS1TT - ABTS3VJ - ABTSRAJ)
NMAJCDIS4 = sum([MAJOCDIS55, MAJOCDIS3, MAJOCDIS4, MAJOCDIS5, MAJOCDIS6]) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
PERPPLAFMUTV = is_positive(PERP_COND1) * 1 - is_positive(PERPIMPATRIE) * PERPPLATVANT + max(0, PERPPLATCANT - PERP_COTC) + is_positive(PERPIMPATRIE) * PERPPLAFIMPV + max(0, PERPPLAFIMPC - PERP_COTC)
NMAJRSE41 = max(0, MAJO1728RSE4 + arr(max(0, RSE8TX - CIRSE8TX - CSPROVYH) + max(0, RSE8SB - CIRSE8SB - CSPROVYP) * COPETO / 100) + FLAG_TRTARDIF * MAJORSE4TARDIF_D + FLAG_TRTARDIF_F * MAJORSE4TARDIF_D - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJORSE4TARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJORSE4TARDIF_A) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
NMAJRSE11 = max(0, MAJO1728RSE1 + arr(RSE1N - CSPROVYD * COPETO / 100) + FLAG_TRTARDIF * MAJORSE1TARDIF_D + FLAG_TRTARDIF_F * MAJORSE1TARDIF_D - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJORSE1TARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJORSE1TARDIF_A) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
NMAJRSE34 = sum([MAJORSE355, MAJORSE33, MAJORSE34, MAJORSE35, MAJORSE36]) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
TSNRAP = REMPLAV - ABTSRAP
TTSN1 = is_positive(TTSNT1) * min(0, TTSNT1 + TPRNN1) + positif_ou_nul(TTSNT1) * TTSNT1
LIGISFNMR = is_positive(SEUIL_12 - ISF5) * 1 - null(ISF5) * 1 - is_positive(INDCTX23) * is_positive(20 - V_NOTRAIT) * LIGISF * 1 - is_positive(ANNUL2042)
PERP_COND2 = is_positive(PERP_MUT) * 1 - is_positive(PERPIMPATRIE) * is_positive(PERP_COTC - PERPPLATCANT) * is_positive(PERPPLATVANT - PERP_COTV) + is_positive(PERPIMPATRIE) * is_positive(PERP_COTC - PERPPLAFIMPC) * is_positive(PERPPLAFIMPV - PERP_COTV)
MAJTXRSE44 = 1 - is_positive(V_NBCODIRSE4) * 1 - is_positive(CMAJ) * is_positive(NMAJRSE44) * TXPFIRSE4 + is_positive(CMAJ) * COPETO + is_positive(V_NBCODIRSE4) * -1
NMAJC4 = sum([MAJOCS30, MAJOCS32, MAJOCS55, MAJOCS3, MAJOCS4, MAJOCS5, MAJOCS6]) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
LIGDLMRN = is_positive(DLMRN6 + DLMRN5 + DLMRN4 + DLMRN3 + DLMRN2 + DLMRN1) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
LIGISFNMRDEG = 1 - is_positive(LIGISFDEGR) * 1 - null(ISF5) * is_positive(SEUIL_12 - ISF4BIS) * is_positive(DISFBASE) * INDCTX23 * null(5 - V_IND_TRAIT) * 1 - is_positive(ANNUL2042)
LIGNMAJISF1 = is_positive(NMAJISF1) * 1 - is_positive(ANNUL2042) * LIGISF * 1 - is_positive(SEUIL_12 - ISF4BIS) * 1 - null(ISF5)
ABTS1EP = is_positive(ALLO3) * is_positive(CARTSP3 + REMPLAP3) * arr(REP103 * ALLO3 / TSB3) + 1 - is_positive(CARTSP3 + REMPLAP3) * max(0, REP103 - ABTS1EJ)
TSNRDJ = CARTSP2 - ABTSRDJ
LIGISFRET = is_positive(RETISF) * 1 - is_positive(ANNUL2042) * LIGISF * 1 - is_positive(SEUIL_12 - ISF4BIS) * 1 - null(ISF5)
ABTSV = ABTS1AJ + ABTS1AP + ABTS3VJ + ABTS1TT + ABTSRAJ + ABTSRAP
TABTSRDP = max(0, TREP102 - TABTS1DJ - TABTS1DC - TABTS1DP - TABTSRDJ)
DLMRN = max(0, DEFNP - BICNPV * is_positive(BICNPV) - BICNPC * is_positive(BICNPC) - BICNPP * is_positive(BICNPP) + abs(BICNPV) * 1 - is_positive(BICNPV) * null(DLMRN1) + abs(BICNPC) * 1 - is_positive(BICNPC) * null(DLMRN1) + abs(BICNPP) * 1 - is_positive(BICNPP) * null(DLMRN1)) + DLMRN1
TSN1DP = ALLO2 - ABTS1DP
GLDOMAVDBJC = max(CODDBJ - ABDOMDBJ, 0) * INDEFTSC
DLMRNTXM = max(0, DEFNP - BICNPV * is_positive(BICNPV) - BICNPC * is_positive(BICNPC) - BICNPP * is_positive(BICNPP) + MIB_NETCT + MIB_NETNPCT + SPENETCT + SPENETNPCT + DLMRN1)
LIGISFCOR = present(ISF4BIS) * is_positive(DISFBASE) * is_positive(PISF) * 1 - is_positive(SEUIL_12 - ISF4BIS) * 1 - null(ISF4BIS) * 1 - is_positive(ANNUL2042) * LIGISF * 1 - is_positive(V_NOTRAIT - 20) + is_positive(V_NOTRAIT - 20) * LIGISF * 1 - is_positive(ANNUL2042)
TABTS1EP = is_positive(CARTSP3 + REMPLAP3) * arr(TREP103 * ALLO3 / TTSB3) + 1 - is_positive(CARTSP3 + REMPLAP3) * max(0, TREP103 - TABTS1EJ - TABTS1EC)
LIGPLOC6 = is_positive(DEFLOC6) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
MAJTXRSE14 = 1 - is_positive(V_NBCODIRSE1) * 1 - is_positive(CMAJ) * is_positive(NMAJRSE14) * TXPFIRSE1 + is_positive(CMAJ) * COPETO + is_positive(V_NBCODIRSE1) * -1
NMAJRSE1TOT = NMAJRSE11 + NMAJRSE21 + NMAJRSE31 + NMAJRSE41 + NMAJRSE51
REPCT = min(0, MIB_NETNPCT) * is_positive(MIBNPDCT) * is_positive(DLMRN1) + min(0, SPENETNPCT) * is_positive(BNCNPDCT) * is_positive(BNCDF1) * -1
ABTSREJ = is_positive(CARTSP3) * is_positive(REMPLAP3) * arr(REP103 * CARTSP3 / TSB3) + 1 - is_positive(REMPLAP3) * max(0, REP103 - ABTS1EJ - ABTS1EP)
TSNDBJ = CODDBJ - ABDOMDBJ
NMAJRSE4TOT = NMAJRSE14 + NMAJRSE24 + NMAJRSE34 + NMAJRSE44 + NMAJRSE54
REPRCM6 = is_positive(REPRCMBIS) * min(arr(REPRCMBIS * _6RCM_I / RCM_I), REPRCMBIS - REPRCM1 - REPRCM2 - REPRCM3 - REPRCM4 - REPRCM5) + 1 - is_positive(REPRCMBIS) * 0
NAPCRAC = PRSAC + CSGAC + RDSNAC + CDIS + RSE1N + RSE2N + RSE3N + RSE4N + RSE5N
TGLNAV2V = max(GLD2V - TABGL2V, 0)
DFRCM2 = DEFRCM3 * is_positive(DFRCMN) + DEFRCM3 * is_positive(DEFRCM + DEFRCM2 - RCM_I) * 1 - is_positive(DFRCMN) + max(0, DEFRCM3 - RCM_I - DEFRCM) * positif_ou_nul(RCM_I - DEFRCM - DEFRCM2) * 1 - is_positive(DFRCMN) * 1 - is_positive(ART1731BIS) + min(DEFRCM3, REPRCM - REPRCMBIS - DFRCM5 - DFRCM4 - DFRCM3) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFRCM3 * is_positive(ART1731BIS * PREM8_11)
LIGISFNOPEN = present(ISF5) * is_positive(DISFBASE) * 1 - is_positive(PISF) * 1 - is_positive(LIGISFCOR) * LIGISF * 1 - is_positive(ANNUL2042)
RPERPMUTV = is_positive(PERP_COND1) * 1 - is_positive(PERPIMPATRIE) * max(0, min(PERP_COTV - PERPPLATVANT, PERPPLATCANT - PERP_COTC)) + is_positive(PERPIMPATRIE) * max(0, min(PERP_COTV - PERPPLAFIMPV, PERPPLAFIMPC - PERP_COTC))
ABTSRFP = max(0, REP104 - ABTS1FJ + ABTS1FP + ABTSRFJ) + 0
TSNRFJ = CARTSP4 - ABTSRFJ
TABTS1FC = is_positive(ALLO4 + CARTSP4 + REMPLAP4) * arr(TREP104 * max(0, SALEXT4 - COD1FD) / TTSB4) + 1 - is_positive(ALLO4 + CARTSP4 + REMPLAP4) * max(0, TREP104 - TABTS1FJ)
MAJTXRSE41 = 1 - is_positive(V_NBCOD1728RSE4) * 1 - is_positive(CMAJ) * is_positive(NMAJRSE41) * TXPF1728RSE4 + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728RSE4) * -1
RPERPV = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE) * max(0, min(PERP_COTV, PERPPLATVANT) + RACCOTV) + is_positive(PERPIMPATRIE) * max(0, min(PERP_COTV, PERPPLAFIMPV) + RACCOTV) + is_positive(PERP_COND1) * min(PERP_COTV, PERPPLAFMUTV) + RACCOTV + is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE) * max(0, min(PERP_COTV, PERPPLATVANT) + RACCOTV) + is_positive(PERPIMPATRIE) * max(0, min(PERP_COTV, PERPPLAFIMPV) + RACCOTV)
PERPPLAFCOMP = is_positive(PERPIMPATRIE) * PERPPLAFP * 3 + 1 - is_positive(PERPIMPATRIE) * 0
TGLN2V = max(GLD2V - TABGL2V, 0)
MAJTXCVN1 = 1 - is_positive(V_NBCOD1728CVN) * 1 - is_positive(CMAJ) * is_positive(NMAJCVN1) * TXPF1728CVN + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728CVN) * -1
GLN4DBJC = max(CODDBJ - ABDOMDBJ, 0) * INDEFTSC
TPRR21 = is_positive(PEBF1 + PENSALP1 + CODRCZ) * arr(TPRN1 * CARPEP1 / TEXPR1) + 1 - is_positive(PEBF1 + PENSALP1 + CODRCZ) * TPRN1 - TPRR1
ABGL1C = is_positive(GLD1C) * is_positive(GLD2C + GLD3C) * arr(REP10C * GLD1C / TSBC) + 1 - is_positive(GLD2C + GLD3C) * max(0, REP10C - ABTSC - ABDOMDBJ - ABDOMEBJ) + 0
ISFCUM = null(4 - V_IND_TRAIT) * ISFNET * positif_ou_nul(ISFNET - SEUIL_12) + min(0, ISFNET) * is_positive(SEUIL_12 - ISFNET) + null(5 - V_IND_TRAIT) * is_positive(SEUIL_12 - ISF4BIS) * 0 + 1 - is_positive(SEUIL_12 - ISF4BIS) * is_positive(positif_ou_nul(ISFNET + V_ANTISF - SEUIL_8) + positif_ou_nul(ISFNET - V_ANTISF - SEUIL_12)) * ISFNET + 1 - is_positive(positif_ou_nul(ISFNET + V_ANTISF - SEUIL_8) + positif_ou_nul(ISFNET - V_ANTISF - SEUIL_12)) * V_ANTISF * 1 - is_positive(APPLI_OCEANS)
ABTSREP = max(0, REP103 - ABTS1EJ + ABTS1EP + ABTSREJ) + 0
PRN1 = is_positive(TSNT1) * is_positive(TSNT1 + PRNN1) * TSNT1 + PRNN1 + positif_ou_nul(TSNT1) * PRNN1
ISF4BASE = ISF4BIS * positif_ou_nul(ISF4BIS - SEUIL_12)
TSNEBJ = CODEBJ - ABDOMEBJ
TABTSREJ = is_positive(REMPLAP3) * arr(TREP103 * CARTSP3 / TTSB3) + 1 - is_positive(REMPLAP3) * max(0, TREP103 - TABTS1EJ - TABTS1EC - TABTS1EP)
TPRR2Z1 = is_positive(PEBF1 + PENSALP1) * arr(TPRN1 * CODRCZ / TEXPR1) + 1 - is_positive(PEBF1 + PENSALP1) * TPRN1 - TPRR1 - TPRR21
PRR1 = arr(PRN1 * PRB1 / EXPR1)
ISFNAP = ISFCUM - V_ANTISF
MAJTXR1 = MAJTXC1
ABTSRDP = max(0, REP102 - ABTS1DJ + ABTS1DP + ABTSRDJ) + 0
MAJTXCDIS4 = 1 - is_positive(V_NBCODICDIS) * 1 - is_positive(CMAJ) * is_positive(NMAJCDIS4) * TXPFICDIS + is_positive(CMAJ) * COPETO + is_positive(V_NBCODICDIS) * -1
LIGISFNET = is_positive(PISF) * is_positive(DISFBASE) * 1 - null(5 - V_IND_TRAIT) * 1 - is_positive(SEUIL_12 - ISF4BIS) * 1 - null(ISF5) * 1 - is_positive(ANNUL2042) * LIGISF + null(5 - V_IND_TRAIT) * is_positive(LIGISFRET + LIGNMAJISF1) * is_positive(ISFNAP) * 1 - is_positive(SEUIL_12 - ISFNAP) * 1 - is_positive(INDCTX23)
MAJTXP1 = MAJTXC1
ZIG_TAUXCRP = ZIG_TITRECRP
LIGISFINF8 = IND9HI0 * is_positive(LIGISFDEGR) * 1 - is_positive(ANNUL2042)
TTSN1FJ = TSHALLO4 - TABTS1FJ
TTS1 = TTSN1
LIGISF17281 = is_positive(NMAJISF1) * 1 - is_positive(ANNUL2042) * LIGISF * 1 - is_positive(SEUIL_12 - ISF4BIS) * 1 - null(ISF5) * 1 - is_positive(V_FLAGR34 + null(CMAJ_ISF - 34))
TABGL3V = is_positive(GLD3V) * max(0, TREP10V - TABTSV - TABDOMDAJ - TABDOMEAJ - TABGL1V - TABGL2V) + 0
TTSNREJ = CARTSP3 - TABTSREJ
GLN1C = max(GLD1C - ABGL1C, 0) * INDEFTSC
DEFLOC7 = 1 - is_positive(NPLOCNETF7) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7, 0) - LNPRODEF6, LNPRODEF6)) * positif_ou_nul(LNPRODEF6 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8 - LNPRODEF7, 0)) * 1 - is_positive(ART1731BIS) + min(LNPRODEF6, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF6 * ART1731BIS * is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))
LIGISF0DEG = IND9HI0 * null(ISF4BIS) * 1 - is_positive(ANNUL2042)
TABDOMDBJ = is_positive(CODDBJ) * is_positive(CODEBJ + GLD1C + GLD2C + GLD3C) * arr(TREP10C * CODDBJ / TTSBC) + 1 - is_positive(CODEBJ + GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTSC) + 0
MAJTXRSE11 = 1 - is_positive(V_NBCOD1728RSE1) * 1 - is_positive(CMAJ) * is_positive(NMAJRSE11) * TXPF1728RSE1 + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728RSE1) * -1
TTSN1FC = max(0, SALEXT4 - COD1FD) - TABTS1FC
NAPISFTOT = ISF5 + PISF
MAJTXC4 = 1 - is_positive(V_NBCODICRP) * 1 - is_positive(CMAJ) * is_positive(NMAJC4 + NMAJR4 + NMAJP4) * TXPFICRP + is_positive(CMAJ) * COPETO + is_positive(V_NBCODICRP) * -1
PRR21 = is_positive(PEBF1 + PENSALP1 + CODRCZ) * arr(PRN1 * CARPEP1 / EXPR1) + 1 - is_positive(PEBF1 + PENSALP1 + CODRCZ) * PRN1 - PRR1
TSNRFP = REMPLAP4 - ABTSRFP
LIGDLMRN1 = is_positive(DLMRN1) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
REPRCM7 = is_positive(REPRCMBIS) * max(0, REPRCMBIS - REPRCM1 - REPRCM2 - REPRCM3 - REPRCM4 - REPRCM5 - REPRCM6) + 1 - is_positive(REPRCMBIS) * 0
MAJTXP4 = MAJTXC4
ABGL2C = is_positive(GLD2C) * is_positive(GLD3C) * arr(REP10C * GLD2C / TSBC) + 1 - is_positive(GLD3C) * max(0, REP10C - ABTSC - ABDOMDBJ - ABDOMEBJ - ABGL1C) + 0
LIGISF9749 = is_positive(LIGNMAJISF1) * 1 - is_positive(LIGISFRET)
TSN1EP = ALLO3 - ABTS1EP
PERPPLAFMUTC = is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE) * PERPPLATCANT + max(0, PERPPLATVANT - PERP_COTV) + is_positive(PERPIMPATRIE) * PERPPLAFIMPC + max(0, PERPPLAFIMPV - PERP_COTV)
REV4C = GLN4DBJC
TTSNRDP = REMPLAP2 - TABTSRDP
TTSNN1 = is_positive(TTS1) * arr(TTS1 * TTSBN1 / TEXTS1) + 1 - is_positive(TTS1) * TTS1
RPERPMUTC = is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE) * max(0, min(PERP_COTC - PERPPLATCANT, PERPPLATVANT - PERP_COTV)) + is_positive(PERPIMPATRIE) * max(0, min(PERP_COTC - PERPPLAFIMPC, PERPPLAFIMPV - PERP_COTV))
ABDOMDAJ = is_positive(CODDAJ) * is_positive(CODEAJ + GLD1V + GLD2V + GLD3V) * arr(REP10V * CODDAJ / TSBV) + 1 - is_positive(CODEAJ + GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTSV) + 0
TABTSREP = max(0, TREP103 - TABTS1EJ - TABTS1EC - TABTS1EP - TABTSREJ)
LIGISF9269 = 1 - is_positive(LIGISFRET + LIGNMAJISF1) * 1 - is_positive(SEUIL_12 - ISFNAP) * INDIS26
TS1 = TSN1
PERPPLAFMU1C = is_positive(PERP_COND1) * 1 - is_positive(PERPIMPATRIE) * PERPPLATCANT - RPERPMUTV + is_positive(PERPIMPATRIE) * PERPPLAFIMPC - RPERPMUTV + is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE) * PERPPLATCANT + RPERPMUTC + is_positive(PERPIMPATRIE) * PERPPLAFIMPC + RPERPMUTC
LIGISFDEG = 1 - is_positive(LIGISFDEGR) * IND9HI0 * is_positive(ISFDEG)
GLNAV2C = max(GLD2C - ABGL2C, 0) * INDEFTSC
TSNREJ = CARTSP3 - ABTSREJ
MAJTXRSE34 = 1 - is_positive(V_NBCODIRSE3) * 1 - is_positive(CMAJ) * is_positive(NMAJRSE34) * TXPFIRSE3 + is_positive(CMAJ) * COPETO + is_positive(V_NBCODIRSE3) * -1
DEFLOC8 = 1 - is_positive(NPLOCNETF8) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8, 0) - LNPRODEF7, LNPRODEF7)) * positif_ou_nul(LNPRODEF7 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9 - LNPRODEF8, 0)) * 1 - is_positive(ART1731BIS) + min(LNPRODEF7, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6 - DEFLOC7) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF7 * ART1731BIS * is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))
TPENF1 = is_positive(PENSALP1) * arr(TPRN1 * PEBF1 / TEXPR1) + 1 - is_positive(PENSALP1) * TPRN1 - TPRR1 - TPRR21 - TPRR2Z1
NMAJISF1BIS = max(0, MAJO1728ISF + arr(ISF4BASE * COPETO / 100) + FLAG_TRTARDIF * MAJOISFTARDIF_D + FLAG_TRTARDIF_F * MAJOISFTARDIF_D - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJOISFTARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJOISFTARDIF_A)
PERPPLAFNUTV = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * max(PERPPLATVANT - RPERPV, 0) + is_positive(PERP_COND1) * 0 + is_positive(PERP_COND2) * max(0, PERPPLATVANT - RPERPV - RPERPMUTC - RACCOTC)
NATIMPISF = max(0, 1 * is_positive(ISFCUM) + 2 * 1 - is_positive(ISFCUM) * 1 - null(ISFNET) + 3 * null(ISFNET) * is_positive(ISFBASE) + 0 * null(INDCTX23) * null(5 - V_IND_TRAIT) * null(ISFBASE) + positif_ou_nul(ISF_LIMINF + ISF_LIMSUP) * null(4 - V_IND_TRAIT))
TTPR1 = TTSN1 + TPRN1
RPERPC = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE) * max(0, min(PERP_COTC, PERPPLATCANT) + RACCOTC) + is_positive(PERPIMPATRIE) * max(0, min(PERP_COTC, PERPPLAFIMPC) + RACCOTC) + is_positive(PERP_COND1) * 1 - is_positive(PERPIMPATRIE) * max(0, min(PERP_COTC, PERPPLATCANT) + RACCOTC) + is_positive(PERPIMPATRIE) * max(0, min(PERP_COTC, PERPPLAFIMPC) + RACCOTC) + is_positive(PERP_COND2) * min(PERP_COTC, PERPPLAFMUTC) + RACCOTC
TSNREP = REMPLAP3 - ABTSREP
MAJTXR4 = MAJTXC4
TSNT4 = TSN1FJ + TSN1FP + TSNRFJ + TSNRFP
LIGISFNMRIS = is_positive(SEUIL_12 - ISFNAP) * INDIS26 * is_positive(V_NOTRAIT - 20) * 1 - is_positive(ANNUL2042)
TSNGL1C = GLD1C - ABGL1C
TGLNAV3V = max(GLD3V - TABGL3V, 0)
ISFIN = ISF4BASE
TGLN3V = max(GLD3V - TABGL3V, 0)
PERPPLAFMU1V = is_positive(PERP_COND1) * 1 - is_positive(PERPIMPATRIE) * PERPPLATVANT + RPERPMUTV + is_positive(PERPIMPATRIE) * PERPPLAFIMPV + RPERPMUTV + is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE) * PERPPLATVANT - RPERPMUTC + is_positive(PERPIMPATRIE) * PERPPLAFIMPV - RPERPMUTC
TTSN1EP = ALLO3 - TABTS1EP
PERPPLAFNU2C = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE + 0) * is_positive(PERPPLAFCANT + PERPPLAFNUC3ANT - RPERPC) * PERPPLAFNUC2ANT + 1 - is_positive(PERPPLAFCANT + PERPPLAFNUC3ANT - RPERPC) * max(0, PERPPLAFNUC2ANT - RPERPC - PERPPLAFCANT - PERPPLAFNUC3ANT) + is_positive(PERPIMPATRIE + 0) * 0 + is_positive(PERP_COND1) * 1 - is_positive(PERPIMPATRIE + 0) * is_positive(PERPPLAFCANT + PERPPLAFNUC3ANT - RPERPC - RPERPMUTV - RACCOTV) * PERPPLAFNUC2ANT + 1 - is_positive(PERPPLAFCANT + PERPPLAFNUC3ANT - RPERPC - RPERPMUTV - RACCOTV) * max(0, PERPPLAFNUC2ANT - RPERPC + RPERPMUTV + RACCOTV - PERPPLAFCANT + PERPPLAFNUC3ANT) + is_positive(PERPIMPATRIE + 0) * 0 + is_positive(PERP_COND2) * 0
TTSNDBJ = CODDBJ - TABDOMDBJ
PERPPLAFNUTC = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * max(PERPPLATCANT - RPERPC, 0) + is_positive(PERP_COND1) * max(0, PERPPLATCANT - RPERPC - RPERPMUTV - RACCOTV) + is_positive(PERP_COND2) * 0
PERPPLAFIMPP = is_positive(PERPIMPATRIE) * PERPPLAFCOMP + PERPPLAFP + 1 - is_positive(PERPIMPATRIE) * 0
TTSNN2TS1 = is_positive(TTS1) * is_positive(REMPLAP1) * arr(TTS1 * CARTSP1 / TEXTS1) + 1 - is_positive(REMPLAP1) * TTS1 - TTSNN1
TPR1 = TSN1 + PRN1
LIGPLOC7 = is_positive(DEFLOC7) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
GLNAV1C = max(GLD1C - ABGL1C, 0) * INDEFTSC
DFRCM1 = DEFRCM2 * is_positive(DFRCMN) + DEFRCM2 * is_positive(DEFRCM - RCM_I) * 1 - is_positive(DFRCMN) + max(0, DEFRCM2 - RCM_I - DEFRCM) * positif_ou_nul(RCM_I - DEFRCM) * 1 - is_positive(DFRCMN) * 1 - is_positive(ART1731BIS) + min(DEFRCM2, REPRCM - REPRCMBIS - DFRCM5 - DFRCM4 - DFRCM3 - DFRCM2) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFRCM2 * is_positive(ART1731BIS * PREM8_11)
PERPPLAFNUC = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE + 0) * max(0, PERPPLAFCANT - RPERPC) + is_positive(PERPIMPATRIE + 0) * max(0, PERPPLAFC - RPERPC) + is_positive(PERP_COND1) * 1 - is_positive(PERPIMPATRIE) * max(0, PERPPLAFCANT - RPERPC - RPERPMUTV - RACCOTV) + is_positive(PERPIMPATRIE) * max(0, PERPPLAFC - RPERPC - RPERPMUTV - RACCOTV) + is_positive(PERP_COND2) * 0
TABTS1FP = is_positive(CARTSP4 + REMPLAP4) * arr(TREP104 * ALLO4 / TTSB4) + 1 - is_positive(CARTSP4 + REMPLAP4) * max(0, TREP104 - TABTS1FJ - TABTS1FC)
GLN2C = max(GLD2C - ABGL2C, 0) * INDEFTSC
LIGDFRCM2 = is_positive(DFRCM2) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
PERPPLAFNUNC = max(0, PERPPLAFNUC)
TSNT3 = TSN1EJ + TSN1EP + TSNREJ + TSNREP
CUMSALEXTEF = TTSN1AC + TTSN1BC + TTSN1CC + TTSN1DC + TTSN1EC + TTSN1FC
TABTSRFJ = is_positive(REMPLAP4) * arr(TREP104 * CARTSP4 / TTSB4) + 1 - is_positive(REMPLAP4) * max(0, TREP104 - TABTS1FJ - TABTS1FC - TABTS1FP)
TTSPR1 = TTSNN1 + TPRR1 * 1 - PREM8_11 + max(0, TTSNN1 + TPRR1) * PREM8_11
GLDOMAVDAJV = max(CODDAJ - ABDOMDAJ, 0) * INDEFTSV
DFRCM = DFRCMN + DFRCM1 + DFRCM2 + DFRCM3 + DFRCM4 + DFRCM5 * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
TTSNRFJ = CARTSP4 - TABTSRFJ
TTSNT2 = TTSN1DJ + TTSN1DC + TTSN1DP + TTSNRDJ + TTSNRDP
TTSNN2REMP1 = is_positive(TTS1) * TTS1 - TTSNN1 - TTSNN2TS1
PRR2Z1 = is_positive(PEBF1 + PENSALP1) * arr(PRN1 * CODRCZ / EXPR1) + 1 - is_positive(PEBF1 + PENSALP1) * PRN1 - PRR1 - PRR21
TSNGL2C = GLD2C - ABGL2C
TTSPRD1 = min(0, TTSNN1 + TPRR1) * ART1731BIS
ABDOMEAJ = is_positive(CODEAJ) * is_positive(GLD1V + GLD2V + GLD3V) * arr(REP10V * CODEAJ / TSBV) + 1 - is_positive(GLD1V + GLD2V + GLD3V) * max(0, REP10V - ABTSV - ABDOMDAJ) + 0
TTSN1FP = ALLO4 - TABTS1FP
PERPINDCC = BOOL_0AM * is_positive(V_BTPERPTOTC + PERPPLAFCC + PERPPLAFNUC1 + PERPPLAFNUC2 + PERPPLAFNUNC + PERP_COTC + RACCOTC) * PERPINDC * 1 - V_CNR
DEFLOC9 = 1 - is_positive(NPLOCNETF9) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9, 0) - LNPRODEF8, LNPRODEF8)) * positif_ou_nul(LNPRODEF8 - max(NPLOCNETFHDEFANT - LNPRODEF10 - LNPRODEF9, 0)) * 1 - is_positive(ART1731BIS) + min(LNPRODEF8, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6 - DEFLOC7 - DEFLOC8) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF8 * ART1731BIS * is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))
TABDOMEBJ = is_positive(CODEBJ) * is_positive(GLD1C + GLD2C + GLD3C) * arr(TREP10C * CODEBJ / TTSBC) + 1 - is_positive(GLD1C + GLD2C + GLD3C) * max(0, TREP10C - TABTSC - TABDOMDBJ) + 0
TSNRDP = REMPLAP2 - ABTSRDP
LIGDFRCM1 = is_positive(DFRCM1) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
TSNDAJ = CODDAJ - ABDOMDAJ
TPRN2 = is_positive(TTSNT2) * is_positive(TTSNT2 + TPRNN2) * TTSNT2 + TPRNN2 + positif_ou_nul(TTSNT2) * TPRNN2
ABGL3C = max(0, REP10C - ABTSC - ABDOMDBJ - ABDOMEBJ - ABGL1C - ABGL2C) + 0
TSNN1 = is_positive(TS1) * arr(TS1 * TSBN1 / EXTS1) + 1 - is_positive(TS1) * TS1
RCM = (1 - is_positive(DFRCM1 + DFRCM2 + DFRCM3 + DFRCM4 + DFRCM5) * max(0, _1RCM_I - REPRCM1) - is_positive(DFRCM1 + DFRCM2 + DFRCM3 + DFRCM4 + DFRCM5) * 0 * 1 - is_positive(ART1731BIS) + is_positive(ART1731BIS) * max(0, _1RCM_I - REPRCM1)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
TGLDOMAVDBJC = max(CODDBJ - TABDOMDBJ, 0)
TABGLTC = sum([TABGL1C, TABGL2C, TABGL3C]) + TABDOMDBJ + TABDOMEBJ
TSN4 = is_positive(TSNT4) * min(0, TSNT4 + PRNN4) + positif_ou_nul(TSNT4) * TSNT4
TSNT2 = TSN1DJ + TSN1DP + TSNRDJ + TSNRDP
TSN3 = is_positive(TSNT3) * min(0, TSNT3 + PRNN3) + positif_ou_nul(TSNT3) * TSNT3
PERPPLAFNU2V = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE + 0) * is_positive(PERPPLAFVANT + PERPPLAFNUV3ANT - RPERPV) * PERPPLAFNUV2ANT + 1 - is_positive(PERPPLAFVANT + PERPPLAFNUV3ANT - RPERPV) * max(0, PERPPLAFNUV2ANT - RPERPV - PERPPLAFVANT - PERPPLAFNUV3ANT) + is_positive(PERPIMPATRIE + 0) * 0 + is_positive(PERP_COND1) * 0 + is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE + 0) * is_positive(PERPPLAFVANT + PERPPLAFNUV3ANT - RPERPV - RPERPMUTC - RACCOTC) * PERPPLAFNUV2ANT + 1 - is_positive(PERPPLAFVANT + PERPPLAFNUV3ANT - RPERPV - RPERPMUTC - RACCOTC) * max(0, PERPPLAFNUV2ANT - RPERPV + RPERPMUTC + RACCOTC - PERPPLAFVANT + PERPPLAFNUV3ANT) + is_positive(PERPIMPATRIE + 0) * 0
TTSNREP = REMPLAP3 - TABTSREP
RRCM = max(0, RCM)
TTSNGL3V = GLD3V - TABGL3V
_3RCM = (1 - is_positive(DFRCM1 + DFRCM2 + DFRCM3 + DFRCM4 + DFRCM5) * max(0, _3RCM_I - REPRCM3) * 1 - is_positive(ART1731BIS) + is_positive(ART1731BIS) * max(0, _3RCM_I - REPRCM3)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
TABTSRFP = max(0, TREP104 - TABTS1FJ - TABTS1FC - TABTS1FP - TABTSRFJ)
DEFLOC10 = 1 - is_positive(NPLOCNETF10) * abs(min(max(NPLOCNETFHDEFANT - LNPRODEF10, 0) - LNPRODEF9, LNPRODEF9)) * positif_ou_nul(LNPRODEF9 - max(NPLOCNETFHDEFANT - LNPRODEF10, 0)) * 1 - is_positive(ART1731BIS) + min(LNPRODEF9, TOTDEFLOCNP - DNPLOCIMPU - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6 - DEFLOC7 - DEFLOC8 - DEFLOC9) * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + LNPRODEF9 * ART1731BIS * is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))
TPENALIM1 = is_positive(TEXPR1) * TPRN1 - TPRR1 - TPRR21 - TPRR2Z1 - TPENF1
_7RCM = (1 - is_positive(DFRCM1 + DFRCM2 + DFRCM3 + DFRCM4 + DFRCM5) * max(0, _7RCM_I - REPRCM7) * 1 - is_positive(ART1731BIS) + is_positive(ART1731BIS) * max(0, _7RCM_I - REPRCM7)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
PRN4 = is_positive(TSNT4) * is_positive(TSNT4 + PRNN4) * TSNT4 + PRNN4 + positif_ou_nul(TSNT4) * PRNN4
PERPDCOTC = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE) * min(PERP_COTC, PERPPLATCANT) + is_positive(PERPIMPATRIE) * min(PERP_COTC, PERPPLAFIMPC) + is_positive(PERP_COND1) * 1 - is_positive(PERPIMPATRIE) * min(PERP_COTC, PERPPLATCANT) + is_positive(PERPIMPATRIE) * min(PERP_COTC, PERPPLAFIMPC) + is_positive(PERP_COND2) * min(PERP_COTC, PERPPLAFMU1C)
TSNGL3C = GLD3C - ABGL3C
TPRR2 = arr(TPRN2 * PRB2 / TEXPR2) + arr(TPRN2 * COD1DH / TEXPR2)
PERPPLAFNU3C = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE + 0) * is_positive(PERPPLAFNUC) * PERPPLAFNUC3ANT + 1 - is_positive(PERPPLAFNUC) * max(0, PERPPLAFNUC3ANT - RPERPC - PERPPLAFCANT) + is_positive(PERPIMPATRIE + 0) * 0 + is_positive(PERP_COND1) * is_positive(PERPPLAFNUC) * PERPPLAFNUC3ANT + 1 - is_positive(PERPPLAFNUC) * max(0, PERPPLAFNUC3ANT - RPERPC + RPERPMUTV + RACCOTV - PERPPLAFCANT) + is_positive(PERP_COND2) * 0
LIGDFRCM = is_positive(DFRCMN + DFRCM1 + DFRCM2 + DFRCM3 + DFRCM4 + DFRCM5) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
DEFNPLOCFAV = max(0, abs(DEFNPLOCF) - DEFLOC2 - DEFLOC3 - DEFLOC4 - DEFLOC5 - DEFLOC6 - DEFLOC7 - DEFLOC8 - DEFLOC9 - DEFLOC10)
GLDOMAVEAJV = max(CODEAJ - ABDOMEAJ, 0) * INDEFTSV
GLN4DAJV = max(CODDAJ - ABDOMDAJ, 0) * INDEFTSV
_2RCM = (1 - is_positive(DFRCM1 + DFRCM2 + DFRCM3 + DFRCM4 + DFRCM5) * max(0, _2RCM_I - REPRCM2) * 1 - is_positive(ART1731BIS) + is_positive(ART1731BIS) * max(0, _2RCM_I - REPRCM2)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
GLNAV3C = max(GLD3C - ABGL3C, 0) * INDEFTSC
LIGPLOC8 = is_positive(DEFLOC8) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
PERPPLAFNUV = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE + 0) * max(0, PERPPLAFVANT - RPERPV) + is_positive(PERPIMPATRIE + 0) * max(0, PERPPLAFV - RPERPV) + is_positive(PERP_COND1) * 0 + is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE) * max(0, PERPPLAFVANT - RPERPV - RPERPMUTC - RACCOTC) + is_positive(PERPIMPATRIE) * max(0, PERPPLAFV - RPERPV - RPERPMUTC - RACCOTC)
RPERPP = 1 - is_positive(PERPIMPATRIE) * max(0, min(PERP_COTP, PERPPLATPANT) + RACCOTP) + is_positive(PERPIMPATRIE) * max(0, min(PERP_COTP, PERPPLAFIMPP) + RACCOTP)
_6RCM = (1 - is_positive(DFRCM1 + DFRCM2 + DFRCM3 + DFRCM4 + DFRCM5) * max(0, _6RCM_I - REPRCM6) * 1 - is_positive(ART1731BIS) + is_positive(ART1731BIS) * max(0, _6RCM_I - REPRCM6)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
NBLIGNESISF = is_positive(LIGISFBASE) * 3 + is_positive(LIGISFDEC) * 3 + is_positive(LIGISFBRUT) * 6 + is_positive(LIGISFRED) * 2 + is_positive(LIGISFREDPEN8) * 2 + is_positive(LIGISFDON) * 2 + is_positive(LIGISFRAN) + is_positive(LIGISFCEE) + is_positive(LIGISFINV) * 2 + is_positive(LIGISFPMED) + is_positive(LIGISFPMEI) + is_positive(LIGISFIP) + is_positive(LIGISFCPI) + is_positive(LIGISFIMPU) * 3 + is_positive(LIGISFPLAF) * 5 + is_positive(LIGISFE) * 3 + is_positive(LIGISFNOPEN) * 1 + is_positive(LIGISFCOR) * 1 + is_positive(LIGISFRET) * 2 + is_positive(LIGISF9749) + is_positive(LIGNMAJISF1) * 2 + is_positive(LIGISFANT) * 2 + is_positive(LIGISFNET) * 3 + is_positive(LIGISF9269) * 3 + is_positive(LIGISFANNUL) * 3 + is_positive(LIGISFDEG) * 2 + is_positive(LIGISFDEGR) * 2 + is_positive(LIGISFZERO) * 3 + is_positive(LIGISFNMR) * 4 + is_positive(LIGISFNMRIS) * 3 + is_positive(LIGISF0DEG) * 2 + is_positive(LIGISFNMRDEG) * 3 + is_positive(LIGISFNMRDEG) * 3 + is_positive(LIGISFINF8) * 3 + is_positive(LIGISFNEW) * 2 + is_positive(LIGISFTRCT) + 0
PERPDCOTV = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE) * min(PERP_COTV, PERPPLATVANT) + is_positive(PERPIMPATRIE) * min(PERP_COTV, PERPPLAFIMPV) + is_positive(PERP_COND1) * min(PERP_COTV, PERPPLAFMU1V) + is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE) * min(PERP_COTV, PERPPLATVANT) + is_positive(PERPIMPATRIE) * min(PERP_COTV, PERPPLAFIMPV)
TPRR22 = is_positive(PEBF2 + PENSALP2 + CODRDZ) * arr(TPRN2 * CARPEP2 / TEXPR2) + 1 - is_positive(PEBF2 + PENSALP2 + CODRDZ) * TPRN2 - TPRR2
TSN2 = is_positive(TSNT2) * min(0, TSNT2 + PRNN2) + positif_ou_nul(TSNT2) * TSNT2
TTSNN21 = is_positive(TTS1) * is_positive(CARTSP1 + REMPLAP1) * arr(TTS1 * T2TSN1 / TEXTS1) + 1 - is_positive(CARTSP1 + REMPLAP1) * TTS1 - TTSNN1
TTSNT3 = TTSN1EJ + TTSN1EC + TTSN1EP + TTSNREJ + TTSNREP
REV4VC = GLN4DAJV + GLN4DBJC
PERPDCOTP = 1 - is_positive(PERPIMPATRIE) * min(PERP_COTP, PERPPLATPANT) + is_positive(PERPIMPATRIE) * min(PERP_COTP, PERPPLAFIMPP)
TTSNEBJ = CODEBJ - TABDOMEBJ
TSPRD1 = min(0, TSNN1 + PRR1) * ART1731BIS
PERPINDAFFC = is_positive(PERPINDC * 1 - V_CNR * 1 - is_positive(ANNUL2042) * null(IND_BTANC - 1) * is_positive(PERPIMPATRIE + 0) * is_positive(PERPPLAFNUNC + PERPPLAFC + positif_ou_nul(PERPC) * is_positive(PERPREVTOTC)) + 1 - is_positive(PERPIMPATRIE + 0) * present(PERPPLAFCC) + present(V_BTPERPC) * present(PERPPLAFNUC1) + present(V_BTPERPNUC1) * present(PERPPLAFNUC2) + present(V_BTPERPNUC2) * present(PERPPLAFNUC3) + present(V_BTPERPNUC3) + null(IND_BTANC - 2) * is_positive(V_BTPERPC + V_BTPERPNUC1 + V_BTPERPNUC2 + V_BTPERPNUC3 + PERPPLAFCC + PERPPLAFNUC1 + PERPPLAFNUC2 + PERPPLAFNUC3))
TSNN21 = is_positive(TS1) * is_positive(CARTSP1 + REMPLAP1) * arr(TS1 * _2TSN1 / EXTS1) + 1 - is_positive(CARTSP1 + REMPLAP1) * TS1 - TSNN1
_4RCM = (1 - is_positive(DFRCM1 + DFRCM2 + DFRCM3 + DFRCM4 + DFRCM5) * max(0, _4RCM_I - REPRCM4) * 1 - is_positive(ART1731BIS) + is_positive(ART1731BIS) * max(0, _4RCM_I - REPRCM4)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
TTSN2 = is_positive(TTSNT2) * min(0, TTSNT2 + TPRNN2) + positif_ou_nul(TTSNT2) * TTSNT2
TABGL1C = is_positive(GLD1C) * is_positive(GLD2C + GLD3C) * arr(TREP10C * GLD1C / TTSBC) + 1 - is_positive(GLD2C + GLD3C) * max(0, TREP10C - TABTSC - TABDOMDBJ - TABDOMEBJ) + 0
PERPPLAFNUTP = max(PERPPLATPANT - RPERPP, 0)
PRR4 = arr(PRN4 * PRB4 / EXPR4)
GLN4V = max(CODDAJ - ABDOMDAJ, 0) + max(CODEAJ - ABDOMEAJ, 0) * INDEFTSV
TS2 = TSN2
TPRN3 = is_positive(TTSNT3) * is_positive(TTSNT3 + TPRNN3) * TTSNT3 + TPRNN3 + positif_ou_nul(TTSNT3) * TPRNN3
TS4 = TSN4
TTSNTV = TTSN1AJ + TTSN1AC + TTSN1AP + TTSN3VJ + TTSN1TT + TTSNRAJ + TTSNRAP + TTSNDAJ + TTSNEAJ + TTSNGL1V + TTSNGL2V + TTSNGL3V
PERPPLAFNU1C = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE + 0) * max(PERPPLAFNUTC - PERPPLAFNUNC - PERPPLAFNU3C - PERPPLAFNU2C, 0) + is_positive(PERPIMPATRIE + 0) * 0 + is_positive(PERP_COND1) * 1 - is_positive(PERPIMPATRIE + 0) * max(PERPPLAFNUTC - PERPPLAFNUNC - PERPPLAFNU3C - PERPPLAFNU2C, 0) + is_positive(PERPIMPATRIE + 0) * 0 + is_positive(PERP_COND2) * 0
PRN3 = is_positive(TSNT3) * is_positive(TSNT3 + PRNN3) * TSNT3 + PRNN3 + positif_ou_nul(TSNT3) * PRNN3
TTS2 = TTSN2
LIGPLOC9 = is_positive(DEFLOC9) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
PERPPLAFTC = PERPINDC * max(0, PERPPLAFC + PERPPLAFNUNC + PERPPLAFNU1C + PERPPLAFNU2C) * 1 - V_CNR
TSPR1 = TSNN1 + PRR1 * 1 - PREM8_11 + max(0, TSNN1 + PRR1) * PREM8_11
TPR3 = TSN3 + PRN3
TTSNRFP = REMPLAP4 - TABTSRFP
TSNEAJ = CODEAJ - ABDOMEAJ
PRN2 = is_positive(TSNT2) * is_positive(TSNT2 + PRNN2) * TSNT2 + PRNN2 + positif_ou_nul(TSNT2) * PRNN2
PENF1 = is_positive(PENSALP1) * arr(PRN1 * PEBF1 / EXPR1) + 1 - is_positive(PENSALP1) * PRN1 - PRR1 - PRR21 - PRR2Z1
TSNN21AFF = is_positive(TS1) * is_positive(CARTSP1 + REMPLAP1) * arr(TS1 * _2TSN1 / EXTS1) + 1 - is_positive(CARTSP1 + REMPLAP1) * TS1 - TSNN1
_5RCM = (1 - is_positive(DFRCM1 + DFRCM2 + DFRCM3 + DFRCM4 + DFRCM5) * max(0, _5RCM_I - REPRCM5) * 1 - is_positive(ART1731BIS) + is_positive(ART1731BIS) * max(0, _5RCM_I - REPRCM5)) if ((V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]) else 0
ABGL1V = is_positive(GLD1V) * is_positive(GLD2V + GLD3V) * arr(REP10V * GLD1V / TSBV) + 1 - is_positive(GLD2V + GLD3V) * max(0, REP10V - ABTSV - ABDOMDAJ - ABDOMEAJ) + 0
PERPPLAFNU2P = 1 - is_positive(PERPIMPATRIE + 0) * max(0, is_positive(PERPPLAFPANT + PERPPLAFNUP3ANT - RPERPP) * PERPPLAFNUP2ANT + 1 - is_positive(PERPPLAFPANT + PERPPLAFNUP3ANT - RPERPP) * max(0, PERPPLAFNUP2ANT - RPERPP - PERPPLAFPANT - PERPPLAFNUP3ANT)) + is_positive(PERPIMPATRIE + 0) * 0
TSNN2TS1 = is_positive(TS1) * is_positive(REMPLAP1) * arr(TS1 * CARTSP1 / EXTS1) + 1 - is_positive(REMPLAP1) * TS1 - TSNN1
TGLN4C = max(CODDBJ - TABDOMDBJ, 0) + max(CODEBJ - TABDOMEBJ, 0)
GLN3C = max(GLD3C - ABGL3C, 0) * INDEFTSC
ABGLTV = sum([ABGL1V, ABGL2V, ABGL3V]) + ABDOMDAJ + ABDOMEAJ
TSNN2 = is_positive(TS2) * arr(TS2 * TSBN2 / EXTS2) + 1 - is_positive(TS2) * TS2
TTPR2 = TTSN2 + TPRN2
TGLDOMAVEBJC = max(CODEBJ - TABDOMEBJ, 0)
TTSN3 = is_positive(TTSNT3) * min(0, TTSNT3 + TPRNN3) + positif_ou_nul(TTSNT3) * TTSNT3
TSNTC = TSN1BJ + TSN1BP + TSN3VK + TSN1UT + TSNRBJ + TSNRBP + TSNDBJ + TSNEBJ + TSNGL1C + TSNGL2C + TSNGL3C
REVRCM = _2RCM + _3RCM + _4RCM + _5RCM + _6RCM + _7RCM
TS3 = TSN3
TPRR2Z2 = is_positive(PEBF2 + PENSALP2) * arr(TPRN2 * CODRDZ / TEXPR2) + 1 - is_positive(PEBF2 + PENSALP2) * TPRN2 - TPRR2 - TPRR22
PRR3 = arr(PRN3 * PRB3 / EXPR3)
GLNAV1V = max(GLD1V - ABGL1V, 0) * INDEFTSV
FRD1REP = is_positive(ART1731BIS) * max(0, max(0, FRN1 - FRD1) - PRN1 * 1 - is_positive(FRN1 - FRD1) * null(IND_101) + max(0, FRN2 - FRD2) - PRN2 * 1 - is_positive(FRN2 - FRD2) * null(IND_102) + max(0, FRN3 - FRD3) - PRN3 * 1 - is_positive(FRN3 - FRD3) * null(IND_103) + max(0, FRN4 - FRD4) - PRN4 * 1 - is_positive(FRN4 - FRD4) * null(IND_104) + max(0, FRN11731 - _10MINS1) * IND_101 * is_positive(FRN11731) + max(0, FRN21731 - _10MINS2) * IND_102 * is_positive(FRN21731) + max(0, FRN31731 - _10MINS3) * IND_103 * is_positive(FRN31731) + max(0, FRN41731 - _10MINS4) * IND_104 * is_positive(FRN41731))
PRNC = is_positive(TSNTC) * is_positive(TSNTC + PRNNC) * TSNTC + PRNNC + positif_ou_nul(TSNTC) * PRNNC
LIGNBPAGESISF = is_positive(NBLIGNESISF - 41 + 0)
LIGPLOC10 = is_positive(DEFLOC10) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
DEFLOC1 = is_positive(DEFNONPLOC) * DEFNPLOCFAV * 1 - is_positive(ART1731BIS) + DEFLOCNPF * is_positive(ART1731BIS * 1 - PREM8_11) + LOCDEFNPCGAV + LOCDEFNPV + LOCDEFNPCGAC + LOCDEFNPC + LOCDEFNPCGAPAC + LOCDEFNPPAC * ART1731BIS * is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))
REV4V = GLN4DAJV
TPR4 = TSN4 + PRN4
TTSNV = is_positive(TTSNTV) * min(0, TTSNTV + TPRNNV) + positif_ou_nul(TTSNTV) * TTSNTV
TTSNT4 = TTSN1FJ + TTSN1FC + TTSN1FP + TTSNRFJ + TTSNRFP
PRR2 = arr(PRN2 * PRB2 / EXPR2)
PERPPLAFNUP = 1 - is_positive(PERPIMPATRIE + 0) * max(0, PERPPLAFPANT - RPERPP) + is_positive(PERPIMPATRIE + 0) * max(0, PERPPLAFP - RPERPP)
PENALIM1 = is_positive(EXPR1) * PRN1 - PRR1 - PRR21 - PRR2Z1 - PENF1
TGLNAV1C = max(GLD1C - TABGL1C, 0)
TPRNV = is_positive(TTSNTV) * is_positive(TTSNTV + TPRNNV) * TTSNTV + TPRNNV + positif_ou_nul(TTSNTV) * TPRNNV
TTSNN2 = is_positive(TTS2) * arr(TTS2 * TTSBN2 / TEXTS2) + 1 - is_positive(TTS2) * TTS2
PERPPLAFNU3V = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE + 0) * is_positive(PERPPLAFNUV) * PERPPLAFNUV3ANT + 1 - is_positive(PERPPLAFNUV) * max(0, PERPPLAFNUV3ANT - RPERPV - PERPPLAFVANT) + is_positive(PERPIMPATRIE + 0) * 0 + is_positive(PERP_COND1) * 0 + is_positive(PERP_COND2) * is_positive(PERPPLAFNUV) * PERPPLAFNUV3ANT + 1 - is_positive(PERPPLAFNUV) * max(0, PERPPLAFNUV3ANT - RPERPV + RPERPMUTC + RACCOTC - PERPPLAFVANT)
TSNN22 = is_positive(TS2) * is_positive(CARTSP2 + REMPLAP2) * arr(TS2 * _2TSN2 / EXTS2) + 1 - is_positive(CARTSP2 + REMPLAP2) * TS2 - TSNN2
TSNN4 = is_positive(TS4) * arr(TS4 * TSBN4 / EXTS4) + 1 - is_positive(TS4) * TS4
TTSPR2 = TTSNN2 + TPRR2 * 1 - PREM8_11 + max(0, TTSNN2 + TPRR2) * PREM8_11
PERPPLAFNUNV = max(0, PERPPLAFNUV)
REV4TVC = GLN4V + GLN4C
TSPRD2 = min(0, TSNN2 + PRR2) * ART1731BIS
TTSNGL1C = GLD1C - TABGL1C
TTPR3 = TTSN3 + TPRN3
TPRN4 = is_positive(TTSNT4) * is_positive(TTSNT4 + TPRNN4) * TTSNT4 + TPRNN4 + positif_ou_nul(TTSNT4) * TPRNN4
TFRD1REP = is_positive(ART1731BIS) * max(0, max(0, FRN1 - TFRD1) - TPRN1 * 1 - is_positive(FRN1 - TFRD1) * null(TIND_101) + max(0, FRN2 - TFRD2) - TPRN2 * 1 - is_positive(FRN2 - TFRD2) * null(TIND_102) + max(0, FRN3 - TFRD3) - TPRN3 * 1 - is_positive(FRN3 - TFRD3) * null(TIND_103) + max(0, FRN4 - TFRD4) - TPRN4 * 1 - is_positive(FRN4 - TFRD4) * null(TIND_104))
PERPPLAFNUNP = max(0, PERPPLAFNUP)
TPR2 = TSN2 + PRN2
REV4 = _4BAQTOTNET + GLN4V + GLN4C
TPRR3 = arr(TPRN3 * PRB3 / TEXPR3) + arr(TPRN3 * COD1EH / TEXPR3)
TABGL2C = is_positive(GLD2C) * is_positive(GLD3C) * arr(TREP10C * GLD2C / TTSBC) + 1 - is_positive(GLD3C) * max(0, TREP10C - TABTSC - TABDOMDBJ - TABDOMEBJ - TABGL1C) + 0
LIGPLOC1 = is_positive(DEFLOC1) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
PERPPLAFNU1V = 1 - is_positive(PERP_COND1) * 1 - is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE + 0) * max(PERPPLAFNUTV - PERPPLAFNUNV - PERPPLAFNU3V - PERPPLAFNU2V, 0) + is_positive(PERPIMPATRIE + 0) * 0 + is_positive(PERP_COND1) * 0 + is_positive(PERP_COND2) * 1 - is_positive(PERPIMPATRIE + 0) * max(PERPPLAFNUTV - PERPPLAFNUNV - PERPPLAFNU3V - PERPPLAFNU2V, 0) + is_positive(PERP_COND2) * 0
TSNGL1V = GLD1V - ABGL1V
TSNN22AFF = is_positive(TS2) * is_positive(CARTSP2 + REMPLAP2) * arr(TS2 * _2TSN2 / EXTS2) + 1 - is_positive(CARTSP2 + REMPLAP2) * TS2 - TSNN2
TGLN1C = max(GLD1C - TABGL1C, 0)
PERPINDCV = is_positive(V_BTPERPTOTV + PERPPLAFCV + PERPPLAFNUV1 + PERPPLAFNUV2 + PERPPLAFNUNV + PERP_COTV + RACCOTV) * PERPINDV * 1 - V_CNR
PRR24 = is_positive(PEBF4 + PENSALP4 + CODRFZ) * arr(PRN4 * CARPEP4 / EXPR4) + 1 - is_positive(PEBF4 + PENSALP4 + CODRFZ) * PRN4 - PRR4
TTSNN22 = is_positive(TTS2) * is_positive(CARTSP2 + REMPLAP2) * arr(TTS2 * T2TSN2 / TEXTS2) + 1 - is_positive(CARTSP2 + REMPLAP2) * TTS2 - TTSNN2
PERPPLAFNU3P = 1 - is_positive(PERPIMPATRIE + 0) * max(0, is_positive(PERPPLAFNUP) * PERPPLAFNUP3ANT + 1 - is_positive(PERPPLAFNUP + 0) * PERPPLAFNUP3ANT - RPERPP - PERPPLAFPANT) + is_positive(PERPIMPATRIE + 0) * 0
TSPR2 = TSNN2 + PRR2 * 1 - PREM8_11 + max(0, TSNN2 + PRR2) * PREM8_11
TSNN2TS4 = is_positive(TS4) * is_positive(REMPLAP4) * arr(TS4 * CARTSP4 / EXTS4) + 1 - is_positive(REMPLAP4) * TS4 - TSNN4
TSNN3 = is_positive(TS3) * arr(TS3 * TSBN3 / EXTS3) + 1 - is_positive(TS3) * TS3
TSPR3 = TSNN3 + PRR3 * 1 - PREM8_11 + max(0, TSNN3 + PRR3) * PREM8_11
TSNN24AFF = is_positive(TS4) * is_positive(CARTSP4 + REMPLAP4) * arr(TS4 * _2TSN4 / EXTS4) + 1 - is_positive(CARTSP4 + REMPLAP4) * TS4 - TSNN4
TSNN2REMP1 = is_positive(TS1) * TS1 - TSNN1 - TSNN2TS1
ABGL2V = is_positive(GLD2V) * is_positive(GLD3V) * arr(REP10V * GLD2V / TSBV) + 1 - is_positive(GLD3V) * max(0, REP10V - ABTSV - ABDOMDAJ - ABDOMEAJ - ABGL1V) + 0
TTSNN2TS2 = is_positive(TTS2) * is_positive(REMPLAP2) * arr(TTS2 * CARTSP2 / TEXTS2) + 1 - is_positive(REMPLAP2) * TTS2 - TTSNN2
TSNC = is_positive(TSNTC) * min(0, TSNTC + PRNNC) + positif_ou_nul(TSNTC) * TSNTC
TSNN2REMP4 = is_positive(TS4) * TS4 - TSNN4 - TSNN2TS4
GLN1V = max(GLD1V - ABGL1V, 0) * INDEFTSV
PERPINDAFFP = is_positive(PERPINDP * 1 - V_CNR * 1 - is_positive(ANNUL2042) * null(IND_BTANC - 1) * is_positive(PERPIMPATRIE + 0) * is_positive(PERPPLAFNUNP + PERPPLAFP + positif_ou_nul(PERPP) * is_positive(PERPREVTOTP)) + 1 - is_positive(PERPIMPATRIE + 0) * present(PERPPLAFCP) + present(V_BTPERPP) * present(PERPPLAFNUP1) + present(V_BTPERPNUP1) * present(PERPPLAFNUP2) + present(V_BTPERPNUP2) * present(PERPPLAFNUP3) + present(V_BTPERPNUP3) + null(IND_BTANC - 2) * is_positive(V_BTPERPP + V_BTPERPNUP1 + V_BTPERPNUP2 + V_BTPERPNUP3 + PERPPLAFCP + PERPPLAFNUP1 + PERPPLAFNUP2 + PERPPLAFNUP3))
TSNN2TS2 = is_positive(TS2) * is_positive(REMPLAP2) * arr(TS2 * CARTSP2 / EXTS2) + 1 - is_positive(REMPLAP2) * TS2 - TSNN2
B1FIS = max(RCM + _2RCM + _3RCM + _4RCM + _5RCM + _6RCM + _7RCM, 0)
TSPR4 = TSNN4 + PRR4 * 1 - PREM8_11 + max(0, TSNN4 + PRR4) * PREM8_11
TPRRV = arr(TPRNV * PRBV / TEXPRV) + arr(TPRNV * COD1AH / TEXPRV)
TSNN24 = is_positive(TS4) * is_positive(CARTSP4 + REMPLAP4) * arr(TS4 * _2TSN4 / EXTS4) + 1 - is_positive(CARTSP4 + REMPLAP4) * TS4 - TSNN4
TSPRD4 = min(0, TSNN4 + PRR4) * ART1731BIS
GLN1 = GLN1V + GLN1C
LIGDEFPLOC = is_positive(DEFLOC1 + DEFLOC2 + DEFLOC3 + DEFLOC4 + DEFLOC5 + DEFLOC6 + DEFLOC7 + DEFLOC8 + DEFLOC9 + DEFLOC10) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
TTSV = TTSNV - sum([max(0, GLD1V - TABGL1V), max(0, GLD2V - TABGL2V), max(0, GLD3V - TABGL3V)]) - max(CODDAJ - TABDOMDAJ, 0) - max(CODEAJ - TABDOMEAJ, 0)
REVQTOT = CODRWB * null(1 - FLAG_EXIT) + CODRWB + CODRWA * null(2 - FLAG_EXIT) + CODRVG + sum([REV1, REV2, REV3, REV4]) + REVALIM + REVF + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF
TTS3 = TTSN3
TTSNGL2C = GLD2C - TABGL2C
TGLNAV2C = max(GLD2C - TABGL2C, 0)
TSNN2REMP2 = is_positive(TS2) * TS2 - TSNN2 - TSNN2TS2
TPENF2 = is_positive(PENSALP2) * arr(TPRN2 * PEBF2 / TEXPR2) + 1 - is_positive(PENSALP2) * TPRN2 - TPRR2 - TPRR22 - TPRR2Z2
PRR22 = is_positive(PEBF2 + PENSALP2 + CODRDZ) * arr(PRN2 * CARPEP2 / EXPR2) + 1 - is_positive(PEBF2 + PENSALP2 + CODRDZ) * PRN2 - PRR2
PRRC = arr(PRNC * PRBC / EXPRC)
TTSNN2REMP2 = is_positive(TTS2) * TTS2 - TTSNN2 - TTSNN2TS2
TABGL3C = is_positive(GLD3C) * max(0, TREP10C - TABTSC - TABDOMDBJ - TABDOMEBJ - TABGL1C - TABGL2C) + 0
TGLN1 = TGLN1V + TGLN1C
TTSNN3 = is_positive(TTS3) * arr(TTS3 * TTSBN3 / TEXTS3) + 1 - is_positive(TTS3) * TTS3
TFRDREPTOT = is_positive(ART1731BIS) * TFRDVREP + TFRDCREP + TFRD1REP
PERPPLAFNU1P = 1 - is_positive(PERPIMPATRIE + 0) * max(PERPPLAFNUTP - PERPPLAFNUNP - PERPPLAFNU3P - PERPPLAFNU2P, 0) + is_positive(PERPIMPATRIE + 0) * 0
TGLNAV3C = max(GLD3C - TABGL3C, 0)
PRR23 = is_positive(PEBF3 + PENSALP3 + CODREZ) * arr(PRN3 * CARPEP3 / EXPR3) + 1 - is_positive(PEBF3 + PENSALP3 + CODREZ) * PRN3 - PRR3
TOTALQUO = 1 - is_positive(IPVLOC) * REVQTOT
TGLN3C = max(GLD3C - TABGL3C, 0)
PERPINDAFFV = is_positive(PERPINDV * 1 - V_CNR * 1 - is_positive(ANNUL2042) * null(IND_BTANC - 1) * is_positive(PERPIMPATRIE + 0) * is_positive(PERPPLAFNUNV + PERPPLAFV + positif_ou_nul(PERPV) * is_positive(PERPREVTOTV)) + 1 - is_positive(PERPIMPATRIE + 0) * present(PERPPLAFCV) + present(V_BTPERPV) * present(PERPPLAFNUV1) + present(V_BTPERPNUV1) * present(PERPPLAFNUV2) + present(V_BTPERPNUV2) * present(PERPPLAFNUV3) + present(V_BTPERPNUV3) + null(IND_BTANC - 2) * is_positive(V_BTPERPV + V_BTPERPNUV1 + V_BTPERPNUV2 + V_BTPERPNUV3 + PERPPLAFCV + PERPPLAFNUV1 + PERPPLAFNUV2 + PERPPLAFNUV3))
TPRR4 = arr(TPRN4 * PRB4 / TEXPR4) + arr(TPRN4 * COD1FH / TEXPR4)
TTSNNV = is_positive(TTSV) * arr(TTSV * TTSBNV + BPCOSAV + GLDGRATV / TEXTSV) + 1 - is_positive(TTSV) * TTSV
TTSPRD2 = min(0, TTSNN2 + TPRR2) * ART1731BIS
GLN2V = max(GLD2V - ABGL2V, 0) * INDEFTSV
PERPPLAFTV = PERPINDV * max(0, PERPPLAFV + PERPPLAFNUNV + PERPPLAFNU1V + PERPPLAFNU2V) * 1 - V_CNR
TSC = TSNC - sum([max(0, GLD1C - ABGL1C), max(0, GLD2C - ABGL2C), max(0, GLD3C - ABGL3C)]) - max(CODDBJ - ABDOMDBJ, 0) - max(CODEBJ - ABDOMEBJ, 0)
TTPRV = TTSNV + TPRNV - sum([TGLN1V, TGLN2V, TGLN3V])
TTSN4 = is_positive(TTSNT4) * min(0, TTSNT4 + TPRNN4) + positif_ou_nul(TTSNT4) * TTSNT4
PERPINDCP = PERP_BOOL * is_positive(V_BTPERPTOTP + PERPPLAFCP + PERPPLAFNUP1 + PERPPLAFNUP2 + PERPPLAFNUNP + PERP_COTP + RACCOTP) + 0 * 1 - V_CNR
PRR2Z2 = is_positive(PEBF2 + PENSALP2) * arr(PRN2 * CODRDZ / EXPR2) + 1 - is_positive(PEBF2 + PENSALP2) * PRN2 - PRR2 - PRR22
TPRR23 = is_positive(PEBF3 + PENSALP3 + CODREZ) * arr(TPRN3 * CARPEP3 / TEXPR3) + 1 - is_positive(PEBF3 + PENSALP3 + CODREZ) * TPRN3 - TPRR3
TSNN2TS3 = is_positive(TS3) * is_positive(REMPLAP3) * arr(TS3 * CARTSP3 / EXTS3) + 1 - is_positive(REMPLAP3) * TS3 - TSNN3
TGLN2C = max(GLD2C - TABGL2C, 0)
TTSPRV = TTSNNV + TPRRV * 1 - PREM8_11 + max(0, TTSNNV + TPRRV) * PREM8_11
ABGL3V = max(0, REP10V - ABTSV - ABDOMDAJ - ABDOMEAJ - ABGL1V - ABGL2V) + 0
TTPR4 = TTSN4 + TPRN4
TTSNN2V = is_positive(TTSV) * is_positive(CARTSV + REMPLAV) * arr(TTSV * T2TSNV / TEXTSV) + 1 - is_positive(CARTSV + REMPLAV) * TTSV - TTSNNV
REVQTOTQHT = CODRWB * null(1 - FLAG_EXIT) + CODRWB + CODRWA * null(2 - FLAG_EXIT) + CODRVG + sum([GLN1, GLN2, GLN3]) + REV4 + REVALIMQHT + REVF + REVTSQHT + REVTSREMPQHT + REVPRRQHT + REVRVO + REVRCM + REVRF
TPRC = TSNC + PRNC - sum([GLN1C, GLN2C, GLN3C])
TSNN23 = is_positive(TS3) * is_positive(CARTSP3 + REMPLAP3) * arr(TS3 * _2TSN3 / EXTS3) + 1 - is_positive(CARTSP3 + REMPLAP3) * TS3 - TSNN3
TPRR2V = is_positive(PEBFV + PENSALV + CODRAZ) * arr(TPRNV * CARPEV / TEXPRV) + 1 - is_positive(PEBFV + PENSALV + CODRAZ) * TPRNV - TPRRV
TSNGL3V = GLD3V - ABGL3V
GLNAV2V = max(GLD2V - ABGL2V, 0) * INDEFTSV
TSNN2REMP3 = is_positive(TS3) * TS3 - TSNN3 - TSNN2TS3
PRR2Z4 = is_positive(PEBF4 + PENSALP4) * arr(PRN4 * CODRFZ / EXPR4) + 1 - is_positive(PEBF4 + PENSALP4) * PRN4 - PRR4 - PRR24
TSPRP = sum([TSPR1, TSPR2, TSPR3, TSPR4]) * 1 - PREM8_11 + max(0, TSNN1 + PRR1 + TSNN2 + PRR2 + TSNN3 + PRR3 + TSNN4 + PRR4) * PREM8_11
TTS4 = TTSN4
PRR2C = is_positive(PEBFC + PENSALC + CODRBZ) * arr(PRNC * CARPEC / EXPRC) + 1 - is_positive(PEBFC + PENSALC + CODRBZ) * PRNC - PRRC
TSNNC = is_positive(TSC) * arr(TSC * TSBNC + BPCOSAC + GLDGRATC / EXTSC) + 1 - is_positive(TSC) * TSC
TSNGL2V = GLD2V - ABGL2V
TSNN2TSC = is_positive(TSC) * is_positive(REMPLAC) * arr(TSC * CARTSC / EXTSC) + 1 - is_positive(REMPLAC) * TSC - TSNNC
TSPRD3 = min(0, TSNN3 + PRR3) * ART1731BIS
TTSPRD3 = min(0, TTSNN3 + TPRR3) * ART1731BIS
TSNN2REMPC = is_positive(TSC) * TSC - TSNNC - TSNN2TSC
TPRR2ZV = is_positive(PEBFV + PENSALV) * arr(TPRNV * CODRAZ / TEXPRV) + 1 - is_positive(PEBFV + PENSALV) * TPRNV - TPRRV - TPRR2V
TPENALIM2 = is_positive(TEXPR2) * TPRN2 - TPRR2 - TPRR22 - TPRR2Z2 - TPENF2
TTSNGL3C = GLD3C - TABGL3C
TSNN23AFF = is_positive(TS3) * is_positive(CARTSP3 + REMPLAP3) * arr(TS3 * _2TSN3 / EXTS3) + 1 - is_positive(CARTSP3 + REMPLAP3) * TS3 - TSNN3
TOTALQUORET = min(TOTALQUO, max(TOTALQUO1731, max(TOTALQUO_P, TOTALQUOP2)))
TSPRC = TSNNC + PRRC * 1 - PREM8_11 + max(0, TSNNC + PRRC) * PREM8_11
TOTALQUOHT = 1 - is_positive(IPVLOC) * REVQTOTQHT
TTSNN2TS3 = is_positive(TTS3) * is_positive(REMPLAP3) * arr(TTS3 * CARTSP3 / TEXTS3) + 1 - is_positive(REMPLAP3) * TTS3 - TTSNN3
TTSNN23 = is_positive(TTS3) * is_positive(CARTSP3 + REMPLAP3) * arr(TTS3 * T2TSN3 / TEXTS3) + 1 - is_positive(CARTSP3 + REMPLAP3) * TTS3 - TTSNN3
GLN2 = GLN2V + GLN2C
PERPPLAFTP = PERPINDP * max(0, PERPPLAFP + PERPPLAFNUNP + PERPPLAFNU1P + PERPPLAFNU2P) * 1 - V_CNR
PRR2Z3 = is_positive(PEBF3 + PENSALP3) * arr(PRN3 * CODREZ / EXPR3) + 1 - is_positive(PEBF3 + PENSALP3) * PRN3 - PRR3 - PRR23
REV1 = GLN1 * 1 - INDTEFF + TGLN1 * INDTEFF
TTSPR3 = TTSNN3 + TPRR3 * 1 - PREM8_11 + max(0, TTSNN3 + TPRR3) * PREM8_11
PENF4 = is_positive(PENSALP4) * arr(PRN4 * PEBF4 / EXPR4) + 1 - is_positive(PENSALP4) * PRN4 - PRR4 - PRR24 - PRR2Z4
TTSPRDV = min(0, TTSNNV + TPRRV) * ART1731BIS
TONEQUOM = max(0, TOTALQUO - VARDMOND * is_positive(ART1731BIS) + DMOND * 1 - ART1731BIS)
TTSNN2TSV = is_positive(TTSV) * is_positive(REMPLAV) * arr(TTSV * CARTSV / TEXTSV) + 1 - is_positive(REMPLAV) * TTSV - TTSNNV
TSPRDC = min(0, TSNNC + PRRC) * ART1731BIS
TPENFV = is_positive(PENSALV) * arr(TPRNV * PEBFV / TEXPRV) + 1 - is_positive(PENSALV) * max(0, TPRNV - TPRRV - TPRR2V - TPRR2ZV)
TGLN2 = TGLN2V + TGLN2C
TPRR2Z3 = is_positive(PEBF3 + PENSALP3) * arr(TPRN3 * CODREZ / TEXPR3) + 1 - is_positive(PEBF3 + PENSALP3) * TPRN3 - TPRR3 - TPRR23
TPRR24 = is_positive(PEBF4 + PENSALP4 + CODRFZ) * arr(TPRN4 * CARPEP4 / TEXPR4) + 1 - is_positive(PEBF4 + PENSALP4 + CODRFZ) * TPRN4 - TPRR4
TGLN3 = TGLN3V + TGLN3C
GLNAV3V = max(GLD3V - ABGL3V, 0) * INDEFTSV
PENALIM4 = is_positive(EXPR4) * PRN4 - PRR4 - PRR24 - PRR2Z4 - PENF4
TGL4TVCM = arr(TONEQUOM * REV4TVC / TOTALQUO)
REV2 = GLN2 * 1 - INDTEFF + TGLN2 * INDTEFF
PENF2 = is_positive(PENSALP2) * arr(PRN2 * PEBF2 / EXPR2) + 1 - is_positive(PENSALP2) * PRN2 - PRR2 - PRR22 - PRR2Z2
TSNN2C = is_positive(TSC) * is_positive(CARTSC + REMPLAC) * arr(TSC * _2TSNC / EXTSC) + 1 - is_positive(CARTSC + REMPLAC) * TSC - TSNNC
TSNN2CAFF = is_positive(TSC) * is_positive(CARTSC + REMPLAC) * arr(TSC * _2TSNC / EXTSC) + 1 - is_positive(CARTSC + REMPLAC) * TSC - TSNNC + is_positive(CODDBJ + CODEBJ) * max(CODDBJ - ABDOMDBJ, 0) + max(CODEBJ - ABDOMEBJ, 0)
GLN3V = max(GLD3V - ABGL3V, 0) * INDEFTSV
TONEQUOMHT = max(0, TOTALQUOHT - VARDMOND * is_positive(ART1731BIS) + DMOND * 1 - ART1731BIS)
TSNTV = TSN1AJ + TSN1AP + TSN3VJ + TSN1TT + TSNRAJ + TSNRAP + TSNDAJ + TSNEAJ + TSNGL1V + TSNGL2V + TSNGL3V
TGL4CM = arr(TONEQUOM * REV4C / TOTALQUO)
TTSNN4 = is_positive(TTS4) * arr(TTS4 * TTSBN4 / TEXTS4) + 1 - is_positive(TTS4) * TTS4
TTSNN2REMP3 = is_positive(TTS3) * TTS3 - TTSNN3 - TTSNN2TS3
PRR2ZC = is_positive(PEBFC + PENSALC) * arr(PRNC * CODRBZ / EXPRC) + 1 - is_positive(PEBFC + PENSALC) * PRNC - PRRC - PRR2C
TPENF3 = is_positive(PENSALP3) * arr(TPRN3 * PEBF3 / TEXPR3) + 1 - is_positive(PENSALP3) * TPRN3 - TPRR3 - TPRR23 - TPRR2Z3
TGL4VCM = arr(TONEQUOM * REV4VC / TOTALQUO)
TTSNTC = TTSN1BJ + TTSN1BC + TTSN1BP + TTSN3VK + TTSN1UT + TTSNRBJ + TTSNRBP + TTSNDBJ + TTSNEBJ + TTSNGL1C + TTSNGL2C + TTSNGL3C
PENF3 = is_positive(PENSALP3) * arr(PRN3 * PEBF3 / EXPR3) + 1 - is_positive(PENSALP3) * PRN3 - PRR3 - PRR23 - PRR2Z3
TPRNC = is_positive(TTSNTC) * is_positive(TTSNTC + TPRNNC) * TTSNTC + TPRNNC + positif_ou_nul(TTSNTC) * TPRNNC
TTSPRD4 = min(0, TTSNN4 + TPRR4) * ART1731BIS
TTSNN24 = is_positive(TTS4) * is_positive(CARTSP4 + REMPLAP4) * arr(TTS4 * T2TSN4 / TEXTS4) + 1 - is_positive(CARTSP4 + REMPLAP4) * TTS4 - TTSNN4
TTSPR4 = TTSNN4 + TPRR4 * 1 - PREM8_11 + max(0, TTSNN4 + TPRR4) * PREM8_11
TRPQ4TVCM = arr(TGL4TVCM / DIVGL4) + 0
TTSNN2REMPV = is_positive(TTSV) * TTSV - TTSNNV - TTSNN2TSV
PENALIM2 = is_positive(EXPR2) * PRN2 - PRR2 - PRR22 - PRR2Z2 - PENF2
TTSNN2TS4 = is_positive(TTS4) * is_positive(REMPLAP4) * arr(TTS4 * CARTSP4 / TEXTS4) + 1 - is_positive(REMPLAP4) * TTS4 - TTSNN4
TPENALIMV = is_positive(TEXPRV) * TPRNV - TPRRV - TPRR2V - TPRR2ZV - TPENFV
PRR2ZP = PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4
TGL4VM = arr(TONEQUOM * REV4V / TOTALQUO)
TRPQ4VCM = arr(TGL4VCM / DIVGL4) + 0
TPRR2Z4 = is_positive(PEBF4 + PENSALP4) * arr(TPRN4 * CODRFZ / TEXPR4) + 1 - is_positive(PEBF4 + PENSALP4) * TPRN4 - TPRR4 - TPRR24
TPENALIM3 = is_positive(TEXPR3) * TPRN3 - TPRR3 - TPRR23 - TPRR2Z3 - TPENF3
TSNV = is_positive(TSNTV) * min(0, TSNTV + PRNNV) + positif_ou_nul(TSNTV) * TSNTV
PENFP = PENF1 + PENF2 + PENF3 + PENF4
GLN3 = GLN3V + GLN3C
TPENF4 = is_positive(PENSALP4) * arr(TPRN4 * PEBF4 / TEXPR4) + 1 - is_positive(PENSALP4) * TPRN4 - TPRR4 - TPRR24 - TPRR2Z4
PENFC = is_positive(PENSALC) * arr(PRNC * PEBFC / EXPRC) + 1 - is_positive(PENSALC) * max(0, PRNC - PRRC - PRR2C - PRR2ZC)
TPENALIM4 = is_positive(TEXPR4) * TPRN4 - TPRR4 - TPRR24 - TPRR2Z4 - TPENF4
TTSNC = is_positive(TTSNTC) * min(0, TTSNTC + TPRNNC) + positif_ou_nul(TTSNTC) * TTSNTC
GL4CM = arr(TONEQUOMHT * REV4C / TOTALQUOHT)
PRNV = is_positive(TSNTV) * is_positive(TSNTV + PRNNV) * TSNTV + PRNNV + positif_ou_nul(TSNTV) * PRNNV
TEGL4CM = GL4CM * 1 - is_positive(INDTEFF) + TGL4CM * is_positive(INDTEFF)
PENALIM3 = is_positive(EXPR3) * PRN3 - PRR3 - PRR23 - PRR2Z3 - PENF3
GL4VM = arr(TONEQUOMHT * REV4V / TOTALQUOHT)
TRPQ4CM = arr(TGL4CM / DIVGL4) + 0
GL4TVCM = arr(TONEQUOMHT * REV4TVC / TOTALQUOHT)
GL4VCM = arr(TONEQUOMHT * REV4VC / TOTALQUOHT)
TPRRC = arr(TPRNC * PRBC / TEXPRC) + arr(TPRNC * COD1BH / TEXPRC)
REV3 = GLN3 * 1 - INDTEFF + TGLN3 * INDTEFF
TTPRC = TTSNC + TPRNC - sum([TGLN1C, TGLN2C, TGLN3C])
RPQ4VCM = arr(GL4VCM / DIVGL4)
PRRV = arr(PRNV * PRBV / EXPRV)
TSV = TSNV - sum([max(0, GLD1V - ABGL1V), max(0, GLD2V - ABGL2V), max(0, GLD3V - ABGL3V)]) - max(CODDAJ - ABDOMDAJ, 0) - max(CODEAJ - ABDOMEAJ, 0)
RPQ4TVCM = arr(GL4TVCM / DIVGL4)
PRR2V = is_positive(PEBFV + PENSALV + CODRAZ) * arr(PRNV * CARPEV / EXPRV) + 1 - is_positive(PEBFV + PENSALV + CODRAZ) * PRNV - PRRV
TRPQ4VM = arr(TGL4VM / DIVGL4) + 0
TTSNN2REMP4 = is_positive(TTS4) * TTS4 - TTSNN4 - TTSNN2TS4
TPRR2C = is_positive(PEBFC + PENSALC + CODRBZ) * arr(TPRNC * CARPEC / TEXPRC) + 1 - is_positive(PEBFC + PENSALC + CODRBZ) * TPRNC - TPRRC
TPRR2ZC = is_positive(PEBFC + PENSALC) * arr(TPRNC * CODRBZ / TEXPRC) + 1 - is_positive(PEBFC + PENSALC) * TPRNC - TPRRC - TPRR2C
PRR2ZV = is_positive(PEBFV + PENSALV) * arr(PRNV * CODRAZ / EXPRV) + 1 - is_positive(PEBFV + PENSALV) * PRNV - PRRV - PRR2V
TEGL4VCM = GL4VCM * 1 - is_positive(INDTEFF) + TGL4VCM * is_positive(INDTEFF)
TEGL4VM = GL4VM * 1 - is_positive(INDTEFF) + TGL4VM * is_positive(INDTEFF)
TEGL4TVCM = GL4TVCM * 1 - is_positive(INDTEFF) + TGL4TVCM * is_positive(INDTEFF)
RPQ4CM = arr(GL4CM / DIVGL4)
PENALIMP = PENALIM1 + PENALIM2 + PENALIM3 + PENALIM4
TPRV = TSNV + PRNV - sum([GLN1V, GLN2V, GLN3V])
PENALIMC = is_positive(EXPRC) * PRNC - PRRC - PRR2C - PRR2ZC - PENFC
TERPQ4TVCM = RPQ4TVCM * 1 - is_positive(INDTEFF) + TRPQ4TVCM * is_positive(INDTEFF)
TSNNV = is_positive(TSV) * arr(TSV * TSBNV + BPCOSAV + GLDGRATV / EXTSV) + 1 - is_positive(TSV) * TSV
PENFV = is_positive(PENSALV) * arr(PRNV * PEBFV / EXPRV) + 1 - is_positive(PENSALV) * max(0, PRNV - PRRV - PRR2V - PRR2ZV)
RPQ4VM = arr(GL4VM / DIVGL4)
GLRWBM = is_positive(CODRWA + CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * CODRWB / TOTALQUOHT) + 1 - is_positive(CODRWA + CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT * is_positive(null(1 - FLAG_EXIT) + null(2 - FLAG_EXIT))
TTSC = TTSNC - sum([max(0, GLD1C - TABGL1C), max(0, GLD2C - TABGL2C), max(0, GLD3C - TABGL3C)]) - max(CODDBJ - TABDOMDBJ, 0) - max(CODEBJ - TABDOMEBJ, 0)
PENSTOTP = PRR2P + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + PENALIMP
TSPRDV = min(0, TSNNV + PRRV) * ART1731BIS
TERPQ4VCM = RPQ4VCM * 1 - is_positive(INDTEFF) + TRPQ4VCM * is_positive(INDTEFF)
TSPRTOT = sum([TSPRV, TSPRC, TSPR1, TSPR2, TSPR3, TSPR4]) * 1 - ART1731BIS + max(0, TSNNV + PRRV + TSNNC + PRRC + TSNN1 + PRR1 + TSNN2 + PRR2 + TSNN3 + PRR3 + TSNN4 + PRR4) * ART1731BIS
TSNNT = abs(TSNNV + PRRV + TSNNC + PRRC + TSNN1 + PRR1 + TSNN2 + PRR2 + TSNN3 + PRR3 + TSNN4 + PRR4) * 1 - is_positive(TSNNV + PRRV + TSNNC + PRRC + TSNN1 + PRR1 + TSNN2 + PRR2 + TSNN3 + PRR3 + TSNN4 + PRR4)
TSNN2V = is_positive(TSV) * is_positive(CARTSV + REMPLAV) * arr(TSV * _2TSNV / EXTSV) + 1 - is_positive(CARTSV + REMPLAV) * TSV - TSNNV
TGLRWBM = is_positive(CODRWA + CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * CODRWB / TOTALQUO) + 1 - is_positive(CODRWA + CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM * is_positive(null(1 - FLAG_EXIT) + null(2 - FLAG_EXIT))
GLRWAM = is_positive(CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * CODRWA / TOTALQUOHT) + 1 - is_positive(CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLRWBM * null(2 - FLAG_EXIT)
TSPRV = TSNNV + PRRV * 1 - PREM8_11 + max(0, TSNNV + PRRV) * PREM8_11
PENALIMV = is_positive(EXPRV) * PRNV - PRRV - PRR2V - PRR2ZV - PENFV
TPENFC = is_positive(PENSALC) * arr(TPRNC * PEBFC / TEXPRC) + 1 - is_positive(PENSALC) * max(0, TPRNC - TPRRC - TPRR2C - TPRR2ZC)
LIGPRR2 = is_positive(PRR2V + PRR2C + PRR2P + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + PENALIMV + PENALIMC + PENALIMP + 0)
RPQRWBM = inf(GLRWBM / CODNWB)
TEGLRWBM = GLRWBM * 1 - is_positive(INDTEFF) + TGLRWBM * is_positive(INDTEFF)
TSNN2VAFF = is_positive(TSV) * is_positive(CARTSV + REMPLAV) * arr(TSV * _2TSNV / EXTSV) + 1 - is_positive(CARTSV + REMPLAV) * TSV - TSNNV + is_positive(CODDAJ + CODEAJ) * max(CODDAJ - ABDOMDAJ, 0) + max(CODEAJ - ABDOMEAJ, 0)
TERPQ4VM = RPQ4VM * 1 - is_positive(INDTEFF) + TRPQ4VM * is_positive(INDTEFF)
TERPQ4CM = RPQ4CM * 1 - is_positive(INDTEFF) + TRPQ4CM * is_positive(INDTEFF)
TPENALIMC = is_positive(TEXPRC) * TPRNC - TPRRC - TPRR2C - TPRR2ZC - TPENFC
RPQRWAM = inf(GLRWAM / CODNWA)
TSNN2TSV = is_positive(TSV) * is_positive(REMPLAV) * arr(TSV * CARTSV / EXTSV) + 1 - is_positive(REMPLAV) * TSV - TSNNV
TGLRWAM = is_positive(CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * CODRWA / TOTALQUO) + 1 - is_positive(CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLRWBM * null(2 - FLAG_EXIT)
PENSTOTC = PRR2C + PRR2ZC + PENALIMC
TSPRT = TSNNV + PRRV + TSNNC + PRRC + TSNN1 + PRR1 + TSNN2 + PRR2 + TSNN3 + PRR3 + TSNN4 + PRR4
TSNN2REMPV = is_positive(TSV) * TSV - TSNNV - TSNN2TSV
TTSNNC = is_positive(TTSC) * arr(TTSC * TTSBNC + BPCOSAC + GLDGRATC / TEXTSC) + 1 - is_positive(TTSC) * TTSC
TRPQRWBM = inf(TGLRWBM / CODNWB)
TTSNN2C = is_positive(TTSC) * is_positive(CARTSC + REMPLAC) * arr(TTSC * T2TSNC / TEXTSC) + 1 - is_positive(CARTSC + REMPLAC) * TTSC - TTSNNC
GLRVGM = is_positive(REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * CODRVG / TOTALQUOHT) + 1 - is_positive(REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLRWBM - GLRWAM
TRPQRWAM = inf(TGLRWAM / CODNWA)
PENSTOTV = PRR2V + PRR2ZV + PENALIMV
RPQRVGM = inf(GLRVGM / CODNVG)
TEGLRWAM = GLRWAM * 1 - is_positive(INDTEFF) + TGLRWAM * is_positive(INDTEFF)
TSPR = TSPRT + RVTOT
SHBARFR = ESFP + TSPR + RCM + BIN + BNN + PLOCNETF + NPLOCNETF + PVBAR + RRFI + 0 * 1 - V_INDTEO + RRFTEO + 0 * V_INDTEO
RGRFR = 1 - is_positive(IPVLOC) * SHBARFR + max(BANOR, 0) + REB + min(BANOR, 0) * is_positive(SEUIL_IMPDEFBA + 1 - SHBARFR - REVTP - BA1 - REVQTOTQHT) + is_positive(IPVLOC) * IPVLOC
TTSNN2TSC = is_positive(TTSC) * is_positive(REMPLAC) * arr(TTSC * CARTSC / TEXTSC) + 1 - is_positive(REMPLAC) * TTSC - TTSNNC
TGLRVGM = is_positive(REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * CODRVG / TOTALQUO) + 1 - is_positive(REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLRWBM - TGLRWAM
TERPQRWAM = RPQRWAM * 1 - is_positive(INDTEFF) + TRPQRWAM * is_positive(INDTEFF)
TERPQRWBM = RPQRWBM * 1 - is_positive(INDTEFF) + TRPQRWBM * is_positive(INDTEFF)
GLTOTM = sum([GL1M, GL2M, GL3M, GL4M]) + GLRVGM + GLRWBM + GLRWAM
GL1M = is_positive(REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * GLN1 / TOTALQUOHT) + 1 - is_positive(REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLRWBM - GLRWAM - GLRVGM
GL2M = is_positive(REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * GLN2 / TOTALQUOHT) + 1 - is_positive(REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLRWBM - GLRWAM - GLRVGM - GL1M
TTSPRT = TTSNNV + TPRRV + TTSNNC + TPRRC + TTSNN1 + TPRR1 + TTSNN2 + TPRR2 + TTSNN3 + TPRR3 + TTSNN4 + TPRR4
TEGLRVGM = GLRVGM * 1 - is_positive(INDTEFF) + TGLRVGM * is_positive(INDTEFF)
TTSPRDC = min(0, TTSNNC + TPRRC) * ART1731BIS
GLTSREMPVM = is_positive(TSNN2REMPC + TSNN2REMP1 + TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2REMPV / TOTALQUOHT) + 1 - is_positive(TSNN2REMPC + TSNN2REMP1 + TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM
GLPRRVM = is_positive(PRR2C + PRR21 + PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR2V / TOTALQUOHT) + 1 - is_positive(PRR2C + PRR21 + PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM
SHBA = ESFP + TSPR + RCM + BIN + BNN + PLOCNETF + NPLOCNETF + COD3UV + BPVRCM + PVTAXSB + PVIMPOS * null(1 - FLAG_EXIT) + COD3VE + PVIMPOS + PVSURSI * null(2 - FLAG_EXIT) + RRFI + 0 * 1 - V_INDTEO + RRFTEO + 0 * V_INDTEO * 1 - ART1731BIS + ESFP + TSPR + RCM + BIN + BNN + PLOCNETF + NPLOCNETF + COD3UV + BPVRCM + PVTAXSB + PVIMPOS * null(1 - FLAG_EXIT) + COD3VE + PVIMPOS + PVSURSI * null(2 - FLAG_EXIT) + RRFI + 0 * 1 - V_INDTEO + RRFTEO + 0 * V_INDTEO * ART1731BIS
TTSPRC = TTSNNC + TPRRC * 1 - PREM8_11 + max(0, TTSNNC + TPRRC) * PREM8_11
TTSNN2REMPC = is_positive(TTSC) * TTSC - TTSNNC - TTSNN2TSC
TRPQRVGM = inf(TGLRVGM / CODNVG)
SHBARFRHR = ESFP + TSPR + RCM + BIN + BNN + PLOCNETF + NPLOCNETF + PVBARHR + RRFI
SOMDEFBASUP = BACDEV + BAHDEV + BACDEC + BAHDEC + BACDEP + BAHDEP * is_positive(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - sum([GLN1, GLN2, GLN3]) + max(0, _4BAQV + _4BAQC + _4BAQP + BAHQTOTMIN + BAHQTOTMAXN) + GLN4V + GLN4C + sum([PENALIMV, PENALIMC, PENALIM1, PENALIM2, PENALIM3, PENALIM4]) + sum([PENFV, PENFC, PENF1, PENF2, PENF3, PENF4]) + sum([TSNN2TSV, TSNN2TSC, TSNN2TS1, TSNN2TS2, TSNN2TS3, TSNN2TS4]) + sum([TSNN2REMPV, TSNN2REMPC, TSNN2REMP1, TSNN2REMP2, TSNN2REMP3, TSNN2REMP4]) + sum([PRR2V, PRR2C, PRR21, PRR22, PRR23, PRR24]) + T2RV + _2RCM + _3RCM + _4RCM + _5RCM + _6RCM + _7RCM + _2REVF + _3REVF) + 0 + BACDEV + BAHDEV + BACDEC + BAHDEC + BACDEP + BAHDEP - DEFBANIF * 1 - is_positive(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - sum([GLN1, GLN2, GLN3]) + max(0, _4BAQV + _4BAQC + _4BAQP + BAHQTOTMIN + BAHQTOTMAXN) + GLN4V + GLN4C + sum([PENALIMV, PENALIMC, PENALIM1, PENALIM2, PENALIM3, PENALIM4]) + sum([PENFV, PENFC, PENF1, PENF2, PENF3, PENF4]) + sum([TSNN2TSV, TSNN2TSC, TSNN2TS1, TSNN2TS2, TSNN2TS3, TSNN2TS4]) + sum([TSNN2REMPV, TSNN2REMPC, TSNN2REMP1, TSNN2REMP2, TSNN2REMP3, TSNN2REMP4]) + sum([PRR2V, PRR2C, PRR21, PRR22, PRR23, PRR24]) + T2RV + _2RCM + _3RCM + _4RCM + _5RCM + _6RCM + _7RCM + _2REVF + _3REVF) + 0
SOMDEFICIT = SOMDEFANT + SOMDEFLOC + SOMDEFBNC + SOMDEFBASUP + SOMDEFTS + SOMDEFBIC + RFDHIS
TGL1M = is_positive(REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TGLN1 / TOTALQUO) + 1 - is_positive(REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLRWBM - TGLRWAM - TGLRVGM
GLPRRCM = is_positive(PRR21 + PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR2C / TOTALQUOHT) + 1 - is_positive(PRR21 + PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRVM
GLRVOM = is_positive(_2RV2 + _2RV3 + _2RV4 + REVRCM + REVRF) * arr(TONEQUOMHT * _2RV1 / TOTALQUOHT) + 1 - is_positive(_2RV2 + _2RV3 + _2RV4 + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM
RGRFRHR = 1 - is_positive(IPVLOC) * SHBARFRHR + max(BANOR, 0) + REB + min(BANOR, 0) * is_positive(SEUIL_IMPDEFBA + 1 - SHBARFRHR - REVTP - BA1 - REVQTOTQHT) + is_positive(IPVLOC) * IPVLOC
RPQTSREMPVM = inf(GLTSREMPVM / REMPLANBV)
GLPRR1M = is_positive(PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR21 / TOTALQUOHT) + 1 - is_positive(PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRVM - GLPRRCM
TTSPR = TTSPRT * 1 - ART1731BIS + TTSPRT1731 * ART1731BIS + RVTOT
RP = sum([TSNNV + TSNN2V + BICIMPV + BICNPV + BNNV + max(0, BANV) + BAEV, TSNNC + TSNN2C + BICIMPC + BICNPC + BNNC + max(0, BANC) + BAEC]) + min(0, BANV) + min(0, BANC) * 1 - is_positive(1 + SEUIL_IMPDEFBA - SHBA - REVQTOTQHT - REVTP - BA1) + max(0, ANOCEP - min(DNOCEP, DNOCEP1731 + 0) * is_positive(ART1731BIS) + DNOCEP * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP6, DABNCNP61731 + 0) * is_positive(ART1731BIS) + DABNCNP6 * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP5, DABNCNP51731 + 0) * is_positive(ART1731BIS) + DABNCNP5 * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP4, DABNCNP41731 + 0) * is_positive(ART1731BIS) + DABNCNP4 * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP3, DABNCNP31731 + 0) * is_positive(ART1731BIS) + DABNCNP3 * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP2, DABNCNP21731 + 0) * is_positive(ART1731BIS) + DABNCNP2 * 1 - is_positive(ART1731BIS * PREM8_11) + min(DABNCNP1, DABNCNP11731 + 0) * is_positive(ART1731BIS) + DABNCNP1 * 1 - is_positive(ART1731BIS * PREM8_11)) + sum([GLN1, GLN2, GLN3])
RPQ1M = inf(GL1M / DIVGL1)
GLRVO5M = is_positive(_2RV3 + _2RV4 + REVRCM + REVRF) * arr(TONEQUOMHT * _2RV2 / TOTALQUOHT) + 1 - is_positive(_2RV3 + _2RV4 + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM - GLRVOM
TEFFREVRFR = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + PVBAR + max(BANOR, 0) + REB + min(BANOR, 0) * is_positive(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649
TRPQ1M = inf(TGL1M / DIVGL1)
GLPALIMVM = is_positive(PENALIMC + PENALIM1 + PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENALIMV / TOTALQUOHT) + 1 - is_positive(PENALIMC + PENALIM1 + PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM
GLTSVM = is_positive(TSNN2TSC + TSNN2TS1 + TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2TSV / TOTALQUOHT) + 1 - is_positive(TSNN2TSC + TSNN2TS1 + TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM
TEGL1M = GL1M * 1 - is_positive(INDTEFF) + TGL1M * is_positive(INDTEFF)
GLTSCM = is_positive(TSNN2TS1 + TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2TSC / TOTALQUOHT) + 1 - is_positive(TSNN2TS1 + TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSVM
TERPQ1M = RPQ1M * 1 - is_positive(INDTEFF) + TRPQ1M * is_positive(INDTEFF)
GLTSREMPCM = is_positive(TSNN2REMP1 + TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2REMPC / TOTALQUOHT) + 1 - is_positive(TSNN2REMP1 + TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPVM
RPQTSVM = inf(GLTSVM / CARTSNBAV)
DEFIBA = min(max(1 + SEUIL_IMPDEFBA - SHBA - REVTP - BA1 - REVQTOTQHT, 0), 1) * min(0, BANOR)
AGRBG = SHBA + REVTP - BA1 + REVQTOTQHT
RPQ2M = inf(GL2M / DIVGL2)
TGLTOTM = sum([TGL1M, TGL2M, TGL3M, TGL4M]) + TGLRVGM + TGLRWBM + TGLRWAM
RPQPRRVM = inf(GLPRRVM / CARPENBAV)
RPQRVOM = inf(GLRVOM / RENTAXNB)
TGLRVOM = is_positive(_2RV2 + _2RV3 + _2RV4 + REVRCM + REVRF) * arr(TONEQUOM * _2RV1 / TOTALQUO) + 1 - is_positive(_2RV2 + _2RV3 + _2RV4 + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM
GLRVO6M = is_positive(_2RV4 + REVRCM + REVRF) * arr(TONEQUOMHT * _2RV3 / TOTALQUOHT) + 1 - is_positive(_2RV4 + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM - GLRVOM - GLRVO5M
GL3M = is_positive(REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * GLN3 / TOTALQUOHT) + 1 - is_positive(REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLRWBM - GLRWAM - GLRVGM - GL1M - GL2M
TGLTSREMPVM = is_positive(TTSNN2REMPC + TTSNN2REMP1 + TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2REMPV / TOTALQUO) + 1 - is_positive(TTSNN2REMPC + TTSNN2REMP1 + TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM
GLFVM = is_positive(PENFC + PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENFV / TOTALQUOHT) + 1 - is_positive(PENFC + PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM
CDBA = positif_ou_nul(SEUIL_IMPDEFBA - SHBA - REVTP - BA1 - REVQTOTQHT)
RG = 1 - is_positive(IPVLOC) * SHBA + max(BANOR, 0) + REB + min(BANOR, 0) * is_positive(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + is_positive(IPVLOC) * IPVLOC
DEFBA1 = 1 - is_positive(BAHQT + BAQT) * abs(BAHQT + BAQT) - abs(DEFIBA) + is_positive(BAHQT + BAQT) * positif_ou_nul(DAGRI5 + DAGRI4 + DAGRI3 + DAGRI2 + DAGRI1 - BAHQT - BAQT) * DAGRI5 + DAGRI4 + DAGRI3 + DAGRI2 + DAGRI1 - BAHQT - BAQT * null(DEFBA2 + DEFBA3 + DEFBA4 + DEFBA5 + DEFBA6) * 1 - is_positive(IPVLOC) * 1 - is_positive(ART1731BIS) + DEFBANIF * is_positive(ART1731BIS * 1 - is_positive(PREM8_11 + null(8 - CMAJ) + null(11 - CMAJ))) + BACDEV + BACDEC + BACDEP + BAHDEV + BAHDEC + BAHDEP * is_positive(is_positive(ART1731BIS * PREM8_11) + null(8 - CMAJ) + null(11 - CMAJ)) * 1 - is_positive(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT)
TEFFREVINTER = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + PVBAR + max(BANOR, 0) + REB + min(BANOR, 0) * is_positive(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649 - DAR
IPROGUY6 = arr(ID16 * PROGUY / RG)
GL4M = is_positive(REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * REV4 / TOTALQUOHT) + 1 - is_positive(REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLRWBM - GLRWAM - GLRVGM - GL1M - GL2M - GL3M
TGL2M = is_positive(REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TGLN2 / TOTALQUO) + 1 - is_positive(REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLRWBM - TGLRWAM - TGLRVGM - TGL1M
RPQTSCM = inf(GLTSCM / CARTSNBAC)
RPQRVO6M = inf(GLRVO6M / RENTAXNB6)
TRPQRVOM = inf(TGLRVOM / RENTAXNB)
TGLPRRVM = is_positive(TPRR2C + TPRR21 + TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR2V / TOTALQUO) + 1 - is_positive(TPRR2C + TPRR21 + TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM
RPQPRR1M = inf(GLPRR1M / CARPENBAP1)
TGLFVM = is_positive(PENFC + PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * PENFV / TOTALQUO) + 1 - is_positive(PENFC + PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM
DEFBA = DEFBA1 + DEFBA2 + DEFBA3 + DEFBA4 + DEFBA5 + DEFBA6
LIGDEFBA1 = is_positive(DEFBA1) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
LIGDEFBA = is_positive(DEFBA1 + DEFBA2 + DEFBA3 + DEFBA4 + DEFBA5 + DEFBA6) * LIG1 * 1 - null(4 - V_REGCO) * LIG2
TGLRVO5M = is_positive(_2RV3 + _2RV4 + REVRCM + REVRF) * arr(TONEQUOM * _2RV2 / TOTALQUO) + 1 - is_positive(_2RV3 + _2RV4 + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM - TGLRVOM
TGLTSVM = is_positive(TTSNN2TSC + TTSNN2TS1 + TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2TSV / TOTALQUO) + 1 - is_positive(TTSNN2TSC + TTSNN2TS1 + TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM
TGLPALIMVM = is_positive(TPENALIMC + TPENALIM1 + TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPENALIMV / TOTALQUO) + 1 - is_positive(TPENALIMC + TPENALIM1 + TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM
TGLRVO6M = is_positive(_2RV4 + REVRCM + REVRF) * arr(TONEQUOM * _2RV3 / TOTALQUO) + 1 - is_positive(_2RV4 + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM - TGLRVOM - TGLRVO5M
RPQPRRCM = inf(GLPRRCM / CARPENBAC)
LIG134 = is_positive(LIG134V + LIG134C + LIG134P + present(DAGRI6) + present(DAGRI5) + present(DAGRI4) + present(DAGRI3) + present(DAGRI2) + present(DAGRI1)) * 1 - is_positive(IPVLOC) * 1 - is_positive(abs(DEFIBA)) * 1 - is_positive(ANNUL2042) * LIG1
SOMDEFICITHTS = SOMDEFANT + SOMDEFLOC + SOMDEFBNC + SOMDEFBASUP + SOMDEFBIC + RFDHIS
TEGLFVM = GLFVM * 1 - is_positive(INDTEFF) + TGLFVM * is_positive(INDTEFF)
RRBGTEFRFR = TEFFREVRFR - DAR * 1 - is_positive(RE168 + TAX1649) + is_positive(RE168 + TAX1649) * RE168 + TAX1649
GLRVO7M = is_positive(REVRCM + REVRF) * arr(TONEQUOMHT * _2RV4 / TOTALQUOHT) + 1 - is_positive(REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM - GLRVOM - GLRVO5M - GLRVO6M
RPQTSREMPCM = inf(GLTSREMPCM / REMPLANBC)
ABADON4 = arr(min(ID14 * TX_RABDOM / 100 * PRODOM * max(0, 1 - V_EAD - V_EAG) / RG + V_EAD, PLAF_RABDOM)) + arr(min(ID14 * TX_RABGUY / 100 * PROGUY * max(0, 1 - V_EAD - V_EAG) / RG + V_EAG, PLAF_RABGUY))
TERPQRVGM = RPQRVGM * 1 - is_positive(INDTEFF) + TRPQRVGM * is_positive(INDTEFF)
GLPALIMCM = is_positive(PENALIM1 + PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENALIMC / TOTALQUOHT) + 1 - is_positive(PENALIM1 + PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMVM
TEGLRVO5M = GLRVO5M * 1 - is_positive(INDTEFF) + TGLRVO5M * is_positive(INDTEFF)
GLRVOTOTM = GLRVOM + GLRVO5M + GLRVO6M + GLRVO7M
DFANTIMPU = 1 - is_positive(IPVLOC) * DEFAA5 + DEFAA4 + DEFAA3 + DEFAA2 + DEFAA1 + DEFAA0 * 1 - is_positive(ART1731BIS) + max(0, min(SOMDEFICIT, max(DFANTPROV1731, max(DFANTPROV_P, DFANTPROVP2)) + SOMDEFICIT)) * is_positive(DEFRIGLOBINF + DEFRIGLOBSUP) * 1 - PREM8_11
TGLTSREMPCM = is_positive(TTSNN2REMP1 + TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2REMPC / TOTALQUO) + 1 - is_positive(TTSNN2REMP1 + TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPVM
BASEXOGEN = 1 - present(IPTEFP) * max(0, RG + TOTALQUO + AB * 1 - present(IPVLOC)) * 1 - is_positive(APPLI_COLBERT)
TGLPRRCM = is_positive(TPRR21 + TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR2C / TOTALQUO) + 1 - is_positive(TPRR21 + TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRVM
IPRODOM6 = arr(ID16 * PRODOM / RG)
TRPQPALIMVM = inf(TGLPALIMVM / PENSALNBV)
TEFFREV = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + BPVRCM + PVTAXSB + PVIMPOS * null(1 - FLAG_EXIT) + COD3VE + PVIMPOS + PVSURSI * null(2 - FLAG_EXIT) + max(BANOR, 0) + REB + min(BANOR, 0) * is_positive(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649
RPQPALIMCM = inf(GLPALIMCM / PENSALNBC)
RBGTEFRFR = 1 - is_positive(TEFFREVRFR + PREREV - DAR) * min(0, TEFFREVRFR + PREREV - DAR + TOTALQUO) + is_positive(TEFFREVRFR + PREREV - DAR) * TEFFREVRFR + PREREV - DAR
GLFCM = is_positive(PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENFC / TOTALQUOHT) + 1 - is_positive(PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFVM
TEGLTSREMPVM = GLTSREMPVM * 1 - is_positive(INDTEFF) + TGLTSREMPVM * is_positive(INDTEFF)
IPRODOM4 = arr(ID14 * PRODOM / RG)
TRPQPRRCM = inf(TGLPRRCM / CARPENBAC)
RPQRVO5M = inf(GLRVO5M / RENTAXNB5)
RPQFCM = inf(GLFCM / COTFC)
INDDG = is_positive(DAR - RG - TOTALQUO) * is_positive(DAR)
GLRCMDCM = is_positive(_3RCM + _4RCM + _5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUOMHT * _2RCM / TOTALQUOHT) + 1 - is_positive(_3RCM + _4RCM + _5RCM + _6RCM + _7RCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM - GLRVOTOTM
TRPQTSVM = inf(TGLTSVM / CARTSNBAV)
TEGLPRRCM = GLPRRCM * 1 - is_positive(INDTEFF) + TGLPRRCM * is_positive(INDTEFF)
RBG2TEFRFR = RBGTEFRFR - max(0, min(RBGTEFRFR, DDCSG))
RPQPALIMVM = inf(GLPALIMVM / PENSALNBV)
GLF1M = is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENF1 / TOTALQUOHT) + 1 - is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFVM - GLFCM
RRBG = RG - DAR * 1 - is_positive(RE168 + TAX1649) + is_positive(RE168 + TAX1649) * RE168 + TAX1649 * 1 - ART1731BIS + RG - DAR - DFANTIMPU * 1 - is_positive(RE168 + TAX1649) + is_positive(RE168 + TAX1649) * RE168 + TAX1649 * ART1731BIS
DRBG = min(0, RRBG)
TGLPALIMCM = is_positive(TPENALIM1 + TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPENALIMC / TOTALQUO) + 1 - is_positive(TPENALIM1 + TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMVM
GLTSREMP1M = is_positive(TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2REMP1 / TOTALQUOHT) + 1 - is_positive(TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPVM - GLTSREMPCM
ABADON6 = arr(min(ID16 * TX_RABDOM / 100 * PRODOM * max(0, 1 - V_EAD - V_EAG) / RG + V_EAD, PLAF_RABDOM)) + arr(min(ID16 * TX_RABGUY / 100 * PROGUY * max(0, 1 - V_EAD - V_EAG) / RG + V_EAG, PLAF_RABGUY))
TEGLTSVM = GLTSVM * 1 - is_positive(INDTEFF) + TGLTSVM * is_positive(INDTEFF)
IFG = is_positive(min(PLAF_REDGARD, RDGARD1) + min(PLAF_REDGARD, RDGARD2) + min(PLAF_REDGARD, RDGARD3) + min(PLAF_REDGARD, RDGARD4) - max(0, RP)) * is_positive(sum([RDGARD1, RDGARD2, RDGARD3, RDGARD4]))
GLPRR2M = is_positive(PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR22 / TOTALQUOHT) + 1 - is_positive(PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRVM - GLPRRCM - GLPRR1M
RBG = 1 - is_positive(RG + R1649 + PREREV - DAR) * min(0, RG + R1649 + PREREV - DAR + TOTALQUO) + is_positive(RG + R1649 + PREREV - DAR) * RG + R1649 + PREREV - DAR * 1 - is_positive(ART1731BIS) + 1 - is_positive(RG + R1649 + PREREV - DAR - DFANTIMPU) * min(0, RG + R1649 + PREREV - DAR - DFANTIMPU + TOTALQUO) + is_positive(RG + R1649 + PREREV - DAR - DFANTIMPU) * RG + R1649 + PREREV - DAR - DFANTIMPU * ART1731BIS
TRPQPRRVM = inf(TGLPRRVM / CARPENBAV)
RPQFVM = inf(GLFVM / COTFV)
TXMOYIMPDEN4 = _2PRBV + _2PRBC + _2PRB1 + _2PRB2 + _2PRB3 + _2PRB4 + CODRVG + max(0, BAQTOT) * 1 - is_positive(DEFBA6 + DEFBA5 + DEFBA4 + DEFBA3 + DEFBA2 + DEFBA1) + sum([PEBFV, PEBFC, PEBF1, PEBF2, PEBF3, PEBF4])
DFANTPROV = min(0, RG - DAR * 1 - is_positive(RE168 + TAX1649) + is_positive(RE168 + TAX1649) * RE168 + TAX1649) + SOMDEFICIT
TGLFCM = is_positive(PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * PENFC / TOTALQUO) + 1 - is_positive(PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFVM
TEGLPRRVM = GLPRRVM * 1 - is_positive(INDTEFF) + TGLPRRVM * is_positive(INDTEFF)
TERPQPRRCM = RPQPRRCM * 1 - is_positive(INDTEFF) + TRPQPRRCM * is_positive(INDTEFF)
TRPQFVM = inf(TGLFVM / COTFV)
SDD = max(0, DAR - RG)
TGLTSREMP1M = is_positive(TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2REMP1 / TOTALQUO) + 1 - is_positive(TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPVM - TGLTSREMPCM
GLTS1M = is_positive(TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2TS1 / TOTALQUOHT) + 1 - is_positive(TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSVM - GLTSCM
ABAGU6 = arr(min(IPROGUY6 + ID16 * TX_RABGUY / 100, PLAF_RABGUY))
GLTS2M = is_positive(TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2TS2 / TOTALQUOHT) + 1 - is_positive(TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSVM - GLTSCM - GLTS1M
TEGL2M = GL2M * 1 - is_positive(INDTEFF) + TGL2M * is_positive(INDTEFF)
IPROGUY4 = arr(ID14 * PROGUY / RG)
TGLPRR1M = is_positive(TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR21 / TOTALQUO) + 1 - is_positive(TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRVM - TGLPRRCM
RPALETEFRFR = max(0, min(sum([min(NCHENF1, LIM_PENSALENF) + min(arr(CHENF1 * MAJREV), LIM_PENSALENF), min(NCHENF2, LIM_PENSALENF) + min(arr(CHENF2 * MAJREV), LIM_PENSALENF), min(NCHENF3, LIM_PENSALENF) + min(arr(CHENF3 * MAJREV), LIM_PENSALENF), min(NCHENF4, LIM_PENSALENF) + min(arr(CHENF4 * MAJREV), LIM_PENSALENF)]), RBGTEFRFR - DDCSG + TOTALQUO - SDD)) * 1 - V_CNR
ABADO6 = arr(min(IPRODOM6 + ID16 * TX_RABDOM / 100, PLAF_RABDOM))
RNIDF = 1 - positif_ou_nul(RG - DAR + TOTALQUO) * 1 - positif_ou_nul(RG + TOTALQUO) * RG + TOTALQUO * -1 + DAR_REP + null(RG + TOTALQUO) * DAR_REP + is_positive(RG + TOTALQUO) * is_positive(RG + TOTALQUO - DEFAA5) * RG + TOTALQUO - DAR + 1 - is_positive(RG + TOTALQUO - DEFAA5) * DAR_REP * 1 - is_positive(ART1731BIS) + max(0, FRNV - FRDV + FRNC - FRDC + FRN1 - FRD1 + FRN2 - FRD2 + FRN3 - FRD3 + FRN4 - FRD4 + SOMDEFICITHTS - DEFAA5 - BACDEV + BAHDEV + BACDEC + BAHDEC + BACDEP + BAHDEP * 1 - is_positive(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - sum([GLN1, GLN2, GLN3]) + max(0, _4BAQV + _4BAQC + _4BAQP + BAHQTOTMIN + BAHQTOTMAXN) + GLN4V + GLN4C + sum([PENALIMV, PENALIMC, PENALIM1, PENALIM2, PENALIM3, PENALIM4]) + sum([PENFV, PENFC, PENF1, PENF2, PENF3, PENF4]) + sum([TSNN2TSV, TSNN2TSC, TSNN2TS1, TSNN2TS2, TSNN2TS3, TSNN2TS4]) + sum([TSNN2REMPV, TSNN2REMPC, TSNN2REMP1, TSNN2REMP2, TSNN2REMP3, TSNN2REMP4]) + sum([PRR2V, PRR2C, PRR21, PRR22, PRR23, PRR24]) + T2RV + _2RCM + _3RCM + _4RCM + _5RCM + _6RCM + _7RCM + _2REVF + _3REVF)) * is_positive(ART1731BIS) * PREM8_11 + is_positive(DFANTIMPU - DFANT) * max(0, DFANTIMPU - TOTALQUORET - DEFAA5) + 1 - is_positive(DFANTIMPU - DFANT) * max(0, DFANTIMPU - TOTALQUORET - max(0, DEFAA5 + DFANTIMPU - TOTALQUORET - DFANT)) * is_positive(ART1731BIS) * 1 - PREM8_11
INETABADAJ6 = max(0, IPRODOM6 - ABADO6)
TGLTSCM = is_positive(TTSNN2TS1 + TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2TSC / TOTALQUO) + 1 - is_positive(TTSNN2TS1 + TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSVM
TGLRVO7M = is_positive(REVRCM + REVRF) * arr(TONEQUOM * _2RV4 / TOTALQUO) + 1 - is_positive(REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM - TGLRVOM - TGLRVO5M - TGLRVO6M
RPQRVO7M = inf(GLRVO7M / RENTAXNB7)
TRPQTSREMPVM = inf(TGLTSREMPVM / REMPLANBV)
RDCSG = max(min(DDCSG, RBG + TOTALQUO - SDD), 0)
TEGLTSREMPCM = GLTSREMPCM * 1 - is_positive(INDTEFF) + TGLTSREMPCM * is_positive(INDTEFF)
TGL3M = is_positive(REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TGLN3 / TOTALQUO) + 1 - is_positive(REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLRWBM - TGLRWAM - TGLRVGM - TGL1M - TGL2M
TERPQRVOM = RPQRVOM * 1 - is_positive(INDTEFF) + TRPQRVOM * is_positive(INDTEFF)
TEGLRVOM = GLRVOM * 1 - is_positive(INDTEFF) + TGLRVOM * is_positive(INDTEFF)
RPQ3M = inf(GL3M / DIVGL3)
RPQPRR2M = inf(GLPRR2M / CARPENBAP2)
TEGLPALIMVM = GLPALIMVM * 1 - is_positive(INDTEFF) + TGLPALIMVM * is_positive(INDTEFF)
EXO1 = 1 - ART1731BIS * 1 - min(abs(VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS) + VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS + INDTEFF, 1) * is_positive(R1649 + PREREV + RG + TOTALQUO + AB * 1 - present(IPVLOC) - SEUILEXO) + min(abs(VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS) + VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS + INDTEFF, 1) + ART1731BIS * 1 - min(abs(VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS) + VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS + INDTEFF, 1) * is_positive(R1649 + PREREV + RG + SOMDEFICIT + TOTALQUO + AB * 1 - present(IPVLOC) - SEUILEXO) + min(abs(VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS) + VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS + INDTEFF, 1)
TEGLPALIMCM = GLPALIMCM * 1 - is_positive(INDTEFF) + TGLPALIMCM * is_positive(INDTEFF)
TERPQPALIMVM = RPQPALIMVM * 1 - is_positive(INDTEFF) + TRPQPALIMVM * is_positive(INDTEFF)
TRPQ2M = inf(TGL2M / DIVGL2)
TGLF1M = is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * PENF1 / TOTALQUO) + 1 - is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFVM - TGLFCM
TRPQRVO6M = inf(TGLRVO6M / RENTAXNB6)
RPALE = max(0, min(sum([min(NCHENF1, LIM_PENSALENF) + min(arr(CHENF1 * MAJREV), LIM_PENSALENF), min(NCHENF2, LIM_PENSALENF) + min(arr(CHENF2 * MAJREV), LIM_PENSALENF), min(NCHENF3, LIM_PENSALENF) + min(arr(CHENF3 * MAJREV), LIM_PENSALENF), min(NCHENF4, LIM_PENSALENF) + min(arr(CHENF4 * MAJREV), LIM_PENSALENF)]), RBG - DDCSG + TOTALQUO - SDD)) * 1 - V_CNR
RPQ4M = inf(GL4M / DIVGL4)
GLTS3M = is_positive(TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2TS3 / TOTALQUOHT) + 1 - is_positive(TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSVM - GLTSCM - GLTS1M - GLTS2M
GLF2M = is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENF2 / TOTALQUOHT) + 1 - is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFVM - GLFCM - GLF1M
RRRBG = max(0, RRBG)
REVMETRO = max(0, RG - PRODOM - PROGUY)
TEGLRVO7M = GLRVO7M * 1 - is_positive(INDTEFF) + TGLRVO7M * is_positive(INDTEFF)
ABADO4 = arr(min(IPRODOM4 + ID14 * TX_RABDOM / 100, PLAF_RABDOM))
RPALPTEFRFR = max(min(TOTPA, RBGTEFRFR - RPALETEFRFR - DDCSG + TOTALQUO - SDD), 0) * 1 - V_CNR
RPQTS3M = inf(GLTS3M / CARTSNBAP3)
RBGTEF = 1 - is_positive(TEFFREV + PREREV - DAR) * min(0, TEFFREV + PREREV - DAR + TOTALQUO) + is_positive(TEFFREV + PREREV - DAR) * TEFFREV + PREREV - DAR
GLTS4M = is_positive(REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2TS4 / TOTALQUOHT) + 1 - is_positive(REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSVM - GLTSCM - GLTS1M - GLTS2M - GLTS3M
TEGLTSREMP1M = GLTSREMP1M * 1 - is_positive(INDTEFF) + TGLTSREMP1M * is_positive(INDTEFF)
TEGLPRR1M = GLPRR1M * 1 - is_positive(INDTEFF) + TGLPRR1M * is_positive(INDTEFF)
TRPQPRR1M = inf(TGLPRR1M / CARPENBAP1)
GLPALIM1M = is_positive(PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENALIM1 / TOTALQUOHT) + 1 - is_positive(PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMVM - GLPALIMCM
TERPQFVM = RPQFVM * 1 - is_positive(INDTEFF) + TRPQFVM * is_positive(INDTEFF)
RPQF1M = inf(GLF1M / COTF1)
TERPQRVO6M = RPQRVO6M * 1 - is_positive(INDTEFF) + TRPQRVO6M * is_positive(INDTEFF)
GLRCMFUM = is_positive(_4RCM + _5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUOMHT * _3RCM / TOTALQUOHT) + 1 - is_positive(_4RCM + _5RCM + _6RCM + _7RCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM - GLRVOTOTM - GLRCMDCM
RRBGTEF = TEFFREV - DAR * 1 - is_positive(RE168 + TAX1649) + is_positive(RE168 + TAX1649) * RE168 + TAX1649
TEGLRVO6M = GLRVO6M * 1 - is_positive(INDTEFF) + TGLRVO6M * is_positive(INDTEFF)
LIG49 = INDREV1A8 * positif_ou_nul(DRBG) * LIG2
RBG2 = RBG - min(RBG, DDCSG)
TERPQPRR1M = RPQPRR1M * 1 - is_positive(INDTEFF) + TRPQPRR1M * is_positive(INDTEFF)
LIG1112 = is_positive(DFANTIMPU) * is_positive(DEFRF4BC) * is_positive(RDRFPS) * LIGANNUL2042
INETABADAJ4 = max(0, IPRODOM4 - ABADO4)
TGLPRR2M = is_positive(TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR22 / TOTALQUO) + 1 - is_positive(TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRVM - TGLPRRCM - TGLPRR1M
LIG68 = INDREV1A8 * 1 - is_positive(abs(RNIDF)) * LIG2
TRPQTSREMPCM = inf(TGLTSREMPCM / REMPLANBC)
TERPQRVO5M = RPQRVO5M * 1 - is_positive(INDTEFF) + TRPQRVO5M * is_positive(INDTEFF)
INETABAEAJ6 = max(0, IPROGUY6 - ABAGU6)
TERPQTSVM = RPQTSVM * 1 - is_positive(INDTEFF) + TRPQTSVM * is_positive(INDTEFF)
TRPQPALIMCM = inf(TGLPALIMCM / PENSALNBC)
R8ZT = min(RBG2 + TOTALQUO, V_8ZT)
RPQRCMDCM = inf(GLRCMDCM / REVACTNB)
LIGRNIDF = is_positive(abs(RNIDF)) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RBGRFRHR = 1 - is_positive(RGRFRHR + R1649 + PREREV - DAR) * min(0, RGRFRHR + R1649 + PREREV - DAR + TOTALQUO) + is_positive(RGRFRHR + R1649 + PREREV - DAR) * RGRFRHR + R1649 + PREREV - DAR * 1 - is_positive(ART1731BIS) + 1 - is_positive(RGRFRHR + R1649 + PREREV - DAR - DFANTIMPU) * min(0, RGRFRHR + R1649 + PREREV - DAR - DFANTIMPU + TOTALQUO) + is_positive(RGRFRHR + R1649 + PREREV - DAR - DFANTIMPU) * RGRFRHR + R1649 + PREREV - DAR - DFANTIMPU * is_positive(ART1731BIS)
TGLTSREMP2M = is_positive(TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2REMP2 / TOTALQUO) + 1 - is_positive(TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPVM - TGLTSREMPCM - TGLTSREMP1M
TRPQTSREMP1M = inf(TGLTSREMP1M / REMPLANBP1)
LIG1111 = is_positive(DFANTIMPU) * LIGANNUL2042
TGLPALIM1M = is_positive(TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPENALIM1 / TOTALQUO) + 1 - is_positive(TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMVM - TGLPALIMCM
TEGLRVOTOTM = TEGLRVOM + TEGLRVO5M + TEGLRVO6M + TEGLRVO7M
GLPALIM2M = is_positive(PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENALIM2 / TOTALQUOHT) + 1 - is_positive(PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMVM - GLPALIMCM - GLPALIM1M
GLF3M = is_positive(PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENF3 / TOTALQUOHT) + 1 - is_positive(PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFVM - GLFCM - GLF1M - GLF2M
RBGRFR = 1 - is_positive(RGRFR + R1649 + PREREV - DAR) * min(0, RGRFR + R1649 + PREREV - DAR + TOTALQUO) + is_positive(RGRFR + R1649 + PREREV - DAR) * RGRFR + R1649 + PREREV - DAR * 1 - is_positive(ART1731BIS) + 1 - is_positive(RGRFR + R1649 + PREREV - DAR - DFANTIMPU) * min(0, RGRFR + R1649 + PREREV - DAR - DFANTIMPU + TOTALQUO) + is_positive(RGRFR + R1649 + PREREV - DAR - DFANTIMPU) * RGRFR + R1649 + PREREV - DAR - DFANTIMPU * is_positive(ART1731BIS)
RPQPALIM1M = inf(GLPALIM1M / PENSALNBP1)
TRPQPRR2M = inf(TGLPRR2M / CARPENBAP2)
RNETU = max(0, min(sum([min(CHENF1, LIM_PENSALENF), min(CHENF2, LIM_PENSALENF), min(CHENF3, LIM_PENSALENF), min(CHENF4, LIM_PENSALENF)]), RBG + TOTALQUO - SDD - RPALE)) * 1 - V_CNR
GLTSREMP2M = is_positive(TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2REMP2 / TOTALQUOHT) + 1 - is_positive(TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPVM - GLTSREMPCM - GLTSREMP1M
TEGLTSCM = GLTSCM * 1 - is_positive(INDTEFF) + TGLTSCM * is_positive(INDTEFF)
TRPQFCM = inf(TGLFCM / COTFC)
RBG2RFR = RBGRFR - min(RBGRFR, DDCSG)
TEGLTSREMP2M = GLTSREMP2M * 1 - is_positive(INDTEFF) + TGLTSREMP2M * is_positive(INDTEFF)
TGLTS1M = is_positive(TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2TS1 / TOTALQUO) + 1 - is_positive(TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSVM - TGLTSCM
ABATOT6 = ABADO6 + ABAGU6
INDEXOGEN = 1 - EXO1
TXMOYIMPDEN1 = sum([TSNT1, TSNT2, TSNT3, TSNT4, TSNTV, TSNTC]) * 1 - is_positive(abs(DRBG)) + sum([PALI1 + PRBR1 + PENIN1, PALI2 + PRBR2 + PENIN2, PALI3 + PRBR3 + PENIN3, PALI4 + PRBR4 + PENIN4, PALIV + PRBRV + PENINV, PALIC + PRBRC + PENINC]) * 1 - is_positive(abs(DRBG)) + RVTOT + T2RV + max(0, TRCMABD + DRTNC + RCMNAB + RAVC + RTCAR + RCMPRIVM - max(0, RCMFR - DFRCMN) * 1 - is_positive(abs(DRBG)) - RCM_I * is_positive(REPRCM - RCM_I) - REPRCM * positif_ou_nul(RCM_I - REPRCM)) * 1 - is_positive(abs(DRBG)) + RMFN * 1 - is_positive(abs(DRBG)) + RFCG + DRCF * 1 - is_positive(abs(DRBG)) + PLOCNETF + max(0, NPLOCNETF) + MIBNETPTOT + SPENETPF * 1 - is_positive(abs(DRBG)) + SPENETNPF + NOCEPIMP * null(DALNP) * 1 - is_positive(abs(DRBG)) + max(0, BAHQTOT) + min(0, BAHQTOT) * 1 - is_positive(SHBA - SEUIL_IMPDEFBA) + sum([BIPTAV + BIHTAV + BNNSV + BNNAV, BIPTAC + BIHTAC + BNNSC + BNNAC, BIPTAP + BIHTAP + BNNSP + BNNAP]) * 1 - is_positive(abs(DRBG)) + BICNPF * 1 - is_positive(abs(DRBG)) + REPSOF * 1 - is_positive(abs(DRBG)) - min(DABNCNP6, DABNCNP61731 + 0) * is_positive(ART1731BIS) + DABNCNP6 * 1 - ART1731BIS * is_positive(BNCDF6) + min(min(DABNCNP6, DABNCNP61731 + 0) * is_positive(ART1731BIS) + DABNCNP6 * 1 - ART1731BIS, NOCEPIMP + SPENETNPF) * null(BNCDF6) * is_positive(min(DABNCNP6, DABNCNP61731 + 0) * is_positive(ART1731BIS) + DABNCNP6 * 1 - ART1731BIS) + min(DABNCNP5, DABNCNP51731 + 0) * is_positive(ART1731BIS) + DABNCNP5 * 1 - ART1731BIS + min(DABNCNP4, DABNCNP41731 + 0) * is_positive(ART1731BIS) + DABNCNP4 * 1 - ART1731BIS + min(DABNCNP3, DABNCNP31731 + 0) * is_positive(ART1731BIS) + DABNCNP3 * 1 - ART1731BIS + min(DABNCNP2, DABNCNP21731 + 0) * is_positive(ART1731BIS) + DABNCNP2 * 1 - ART1731BIS + min(DABNCNP1, DABNCNP11731 + 0) * is_positive(ART1731BIS) + DABNCNP1 * 1 - ART1731BIS * null(BNCDF1 + BNCDF2 + BNCDF3 + BNCDF4 + BNCDF5 + BNCDF6) * 1 - is_positive(abs(DRBG)) + BPVRCM + PVTAXSB * 1 - is_positive(IPVLOC) * 1 - is_positive(present(TAX1649) + present(RE168))
TGLPRR3M = is_positive(TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR23 / TOTALQUO) + 1 - is_positive(TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRVM - TGLPRRCM - TGLPRR1M - TGLPRR2M
TGLTS2M = is_positive(TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2TS2 / TOTALQUO) + 1 - is_positive(TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSVM - TGLTSCM - TGLTS1M
RPQTSREMP2M = inf(GLTSREMP2M / REMPLANBP2)
TEGLFCM = GLFCM * 1 - is_positive(INDTEFF) + TGLFCM * is_positive(INDTEFF)
GLPALIM3M = is_positive(PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENALIM3 / TOTALQUOHT) + 1 - is_positive(PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMVM - GLPALIMCM - GLPALIM1M - GLPALIM2M
TGLTS3M = is_positive(TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2TS3 / TOTALQUO) + 1 - is_positive(TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSVM - TGLTSCM - TGLTS1M - TGLTS2M
RPQTSREMP1M = inf(GLTSREMP1M / REMPLANBP1)
TGLTSREMP3M = is_positive(TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2REMP3 / TOTALQUO) + 1 - is_positive(TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPVM - TGLTSREMPCM - TGLTSREMP1M - TGLTSREMP2M
TERPQTSREMPCM = RPQTSREMPCM * 1 - is_positive(INDTEFF) + TRPQTSREMPCM * is_positive(INDTEFF)
INDGARD = IFG + 9 * 1 - is_positive(IFG)
TERPQPRRVM = RPQPRRVM * 1 - is_positive(INDTEFF) + TRPQPRRVM * is_positive(INDTEFF)
TRPQTS1M = inf(TGLTS1M / CARTSNBAP1)
TRPQTS3M = inf(TGLTS3M / CARTSNBAP3)
GLRCMCHM = is_positive(_5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUOMHT * _4RCM / TOTALQUOHT) + 1 - is_positive(_5RCM + _6RCM + _7RCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM - GLRVOTOTM - GLRCMDCM - GLRCMFUM
GLPRR3M = is_positive(PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR23 / TOTALQUOHT) + 1 - is_positive(PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRVM - GLPRRCM - GLPRR1M - GLPRR2M
TRPQRVO7M = inf(TGLRVO7M / RENTAXNB7)
TGLTS4M = is_positive(REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2TS4 / TOTALQUO) + 1 - is_positive(REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSVM - TGLTSCM - TGLTS1M - TGLTS2M - TGLTS3M
TGLRVOTOTM = TGLRVOM + TGLRVO5M + TGLRVO6M + TGLRVO7M
TERPQTSREMPVM = RPQTSREMPVM * 1 - is_positive(INDTEFF) + TRPQTSREMPVM * is_positive(INDTEFF)
RNIDF1 = 1 - positif_ou_nul(RG + TOTALQUO) * DEFAA0 + positif_ou_nul(RG + TOTALQUO) * min(max(RG + TOTALQUO - DEFAA5 - DEFAA4 - DEFAA3 - DEFAA2 - DEFAA1, 0) - DEFAA0, DEFAA0) * -1 * positif_ou_nul(DEFAA0 - max(RG + TOTALQUO - DEFAA5 - DEFAA4 - DEFAA3 - DEFAA2 - DEFAA1, 0)) * 1 - is_positive(ART1731BIS) + min(DEFAA0, RNIDF) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFAA0 * is_positive(ART1731BIS * PREM8_11)
RPALETEF = max(0, min(sum([min(NCHENF1, LIM_PENSALENF) + min(arr(CHENF1 * MAJREV), LIM_PENSALENF), min(NCHENF2, LIM_PENSALENF) + min(arr(CHENF2 * MAJREV), LIM_PENSALENF), min(NCHENF3, LIM_PENSALENF) + min(arr(CHENF3 * MAJREV), LIM_PENSALENF), min(NCHENF4, LIM_PENSALENF) + min(arr(CHENF4 * MAJREV), LIM_PENSALENF)]), RBGTEF - DDCSG + TOTALQUO - SDD)) * 1 - V_CNR
ABAGU4 = arr(min(IPROGUY4 + ID14 * TX_RABGUY / 100, PLAF_RABGUY))
TRPQPALIM1M = inf(TGLPALIM1M / PENSALNBP1)
TEGLTS4M = GLTS4M * 1 - is_positive(INDTEFF) + TGLTS4M * is_positive(INDTEFF)
RPQTS2M = inf(GLTS2M / CARTSNBAP2)
RPALPTEF = max(min(TOTPA, RBGTEF - RPALETEF - DDCSG + TOTALQUO - SDD), 0) * 1 - V_CNR
TEGLF1M = GLF1M * 1 - is_positive(INDTEFF) + TGLF1M * is_positive(INDTEFF)
TRPQTSCM = inf(TGLTSCM / CARTSNBAC)
TEGLPALIM1M = GLPALIM1M * 1 - is_positive(INDTEFF) + TGLPALIM1M * is_positive(INDTEFF)
RPQTS1M = inf(GLTS1M / CARTSNBAP1)
RPQRCMCHM = inf(GLRCMCHM / PROVIENB)
RFACCTEFRFR = max(min(DFA, RBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - DDCSG + TOTALQUO - SDD), 0)
TEGL3M = GL3M * 1 - is_positive(INDTEFF) + TGL3M * is_positive(INDTEFF)
RBG2RFRHR = RBGRFRHR - min(RBGRFRHR, DDCSG)
ISNETDAJ4 = arr(INETABADAJ4 * IPRODOM4 / IPRODOM4)
RPALP = max(min(TOTPA, RBG - RPALE - DDCSG + TOTALQUO - SDD), 0) * 1 - V_CNR
TERPQPALIMCM = RPQPALIMCM * 1 - is_positive(INDTEFF) + TRPQPALIMCM * is_positive(INDTEFF)
TEGLTS2M = GLTS2M * 1 - is_positive(INDTEFF) + TGLTS2M * is_positive(INDTEFF)
TGLPRR4M = is_positive(TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR24 / TOTALQUO) + 1 - is_positive(TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRVM - TGLPRRCM - TGLPRR1M - TGLPRR2M - TGLPRR3M
RPQTS4M = inf(GLTS4M / CARTSNBAP4)
GLTSREMP3M = is_positive(TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2REMP3 / TOTALQUOHT) + 1 - is_positive(TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPVM - GLTSREMPCM - GLTSREMP1M - GLTSREMP2M
TEGLTS1M = GLTS1M * 1 - is_positive(INDTEFF) + TGLTS1M * is_positive(INDTEFF)
TGL4M = is_positive(REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * REV4 / TOTALQUO) + 1 - is_positive(REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLRWBM - TGLRWAM - TGLRVGM - TGL1M - TGL2M - TGL3M
TRPQTSREMP2M = inf(TGLTSREMP2M / REMPLANBP2)
RPQF3M = inf(GLF3M / COTF3)
IMETRO4 = arr(ID14 * EXO1 * REVMETRO / RG)
TERPQTSREMP1M = RPQTSREMP1M * 1 - is_positive(INDTEFF) + TRPQTSREMP1M * is_positive(INDTEFF)
TRPQ3M = inf(TGL3M / DIVGL3)
TERPQ2M = RPQ2M * 1 - is_positive(INDTEFF) + TRPQ2M * is_positive(INDTEFF)
TEGLTS3M = GLTS3M * 1 - is_positive(INDTEFF) + TGLTS3M * is_positive(INDTEFF)
IMETRO6 = arr(ID16 * REVMETRO / RG)
TGLF2M = is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * PENF2 / TOTALQUO) + 1 - is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFVM - TGLFCM - TGLF1M
GLRCMTSM = is_positive(_6RCM + _7RCM + REVRF) * arr(TONEQUOMHT * _5RCM / TOTALQUOHT) + 1 - is_positive(_6RCM + _7RCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM - GLRVOTOTM - GLRCMDCM - GLRCMFUM - GLRCMCHM
TRPQF1M = inf(TGLF1M / COTF1)
RPQF2M = inf(GLF2M / COTF2)
TEGLTSTOTM = TEGLTSVM + TEGLTSCM + TEGLTS1M + TEGLTS2M + TEGLTS3M + TEGLTS4M
TGLTSREMP4M = is_positive(REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TTSNN2REMP4 / TOTALQUO) + 1 - is_positive(REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPVM - TGLTSREMPCM - TGLTSREMP1M - TGLTSREMP2M - TGLTSREMP3M
TGLPALIM2M = is_positive(TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPENALIM2 / TOTALQUO) + 1 - is_positive(TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMVM - TGLPALIMCM - TGLPALIM1M
RFACCTEF = max(min(DFA, RBGTEF - RPALETEF - RPALPTEF - DDCSG + TOTALQUO - SDD), 0)
RBG2TEF = RBGTEF - max(0, min(RBGTEF, DDCSG))
TRPQTSREMP3M = inf(TGLTSREMP3M / REMPLANBP3)
GLPALIM4M = is_positive(REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENALIM4 / TOTALQUOHT) + 1 - is_positive(REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMVM - GLPALIMCM - GLPALIM1M - GLPALIM2M - GLPALIM3M
TEGLPRR2M = GLPRR2M * 1 - is_positive(INDTEFF) + TGLPRR2M * is_positive(INDTEFF)
RPQPALIM2M = inf(GLPALIM2M / PENSALNBP2)
RPQRCMFUM = inf(GLRCMFUM / REVPEANB)
RNIDF2 = 1 - positif_ou_nul(RG + TOTALQUO) * DEFAA1 + positif_ou_nul(RG + TOTALQUO) * min(max(RG + TOTALQUO - DEFAA5 - DEFAA4 - DEFAA3 - DEFAA2, 0) - DEFAA1, DEFAA1) * -1 * positif_ou_nul(DEFAA1 - max(RG + TOTALQUO - DEFAA5 - DEFAA4 - DEFAA3 - DEFAA2, 0)) * 1 - is_positive(ART1731BIS) + min(DEFAA1, RNIDF - RNIDF1) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFAA1 * is_positive(ART1731BIS * PREM8_11)
LIGRNIDF1 = is_positive(abs(RNIDF1)) * is_positive(is_positive(abs(RNIDF)) + is_positive(FLAGRETARD08 + FLAGDEFAUT11)) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
TERPQTS1M = RPQTS1M * 1 - is_positive(INDTEFF) + TRPQTS1M * is_positive(INDTEFF)
TRPQPRR3M = inf(TGLPRR3M / CARPENBAP3)
TRPQTS2M = inf(TGLTS2M / CARTSNBAP2)
TERPQPRR2M = RPQPRR2M * 1 - is_positive(INDTEFF) + TRPQPRR2M * is_positive(INDTEFF)
TEGL4M = GL4M * 1 - is_positive(INDTEFF) + TGL4M * is_positive(INDTEFF)
INETABAEAJ4 = max(0, IPROGUY4 - ABAGU4)
TEGLPRR3M = GLPRR3M * 1 - is_positive(INDTEFF) + TGLPRR3M * is_positive(INDTEFF)
RPQTSREMP3M = inf(GLTSREMP3M / REMPLANBP3)
ADO6 = ABADON6 * 1 - is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ)) + ABATOT6 * is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ))
RDDIVTEF = max(min(DEDIV * 1 - V_CNR, RBGTEF - RPALETEF - RPALPTEF - RFACCTEF - DDCSG + TOTALQUO - SDD), 0)
RPQPRR3M = inf(GLPRR3M / CARPENBAP3)
TERPQTSREMP2M = RPQTSREMP2M * 1 - is_positive(INDTEFF) + TRPQTSREMP2M * is_positive(INDTEFF)
TERPQFCM = RPQFCM * 1 - is_positive(INDTEFF) + TRPQFCM * is_positive(INDTEFF)
RPQPALIM3M = inf(GLPALIM3M / PENSALNBP3)
APERPVTEF = 1 - V_CNR * max(min(RPERPV, RBGTEF - RPALETEF - RPALPTEF - RFACCTEF - RDDIVTEF - DDCSG + TOTALQUO - SDD), 0)
TRPQTS4M = inf(TGLTS4M / CARTSNBAP4)
TERPQRVO7M = RPQRVO7M * 1 - is_positive(INDTEFF) + TRPQRVO7M * is_positive(INDTEFF)
GLRCMGOM = is_positive(_7RCM + REVRF) * arr(TONEQUOMHT * _6RCM / TOTALQUOHT) + 1 - is_positive(_7RCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM - GLRVOTOTM - GLRCMDCM - GLRCMFUM - GLRCMCHM - GLRCMTSM
RDDIVTEFRFR = max(min(DEDIV * 1 - V_CNR, RBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - RFACCTEFRFR - DDCSG + TOTALQUO - SDD), 0)
TGLPALIM3M = is_positive(TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * PENALIM3 / TOTALQUO) + 1 - is_positive(TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMVM - TGLPALIMCM - TGLPALIM1M - TGLPALIM2M
TGLF3M = is_positive(PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * PENF3 / TOTALQUO) + 1 - is_positive(PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFVM - TGLFCM - TGLF1M - TGLF2M
TERPQ3M = RPQ3M * 1 - is_positive(INDTEFF) + TRPQ3M * is_positive(INDTEFF)
TEGLTSREMP3M = GLTSREMP3M * 1 - is_positive(INDTEFF) + TGLTSREMP3M * is_positive(INDTEFF)
AGREPARET = RPALE + RPALP
TERPQPALIM1M = RPQPALIM1M * 1 - is_positive(INDTEFF) + TRPQPALIM1M * is_positive(INDTEFF)
RPQRCMTSM = inf(GLRCMTSM / DISQUONB)
TERPQTS3M = RPQTS3M * 1 - is_positive(INDTEFF) + TRPQTS3M * is_positive(INDTEFF)
ABATOT4 = ABADO4 + ABAGU4
TRPQTSREMP4M = inf(TGLTSREMP4M / REMPLANBP4)
TRPQPALIM3M = inf(TGLPALIM3M / PENSALNBP3)
TRPQPRR4M = inf(TGLPRR4M / CARPENBAP4)
RPQPALIM4M = inf(GLPALIM4M / PENSALNBP4)
TGLRCMDCM = is_positive(_3RCM + _4RCM + _5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUOM * _2RCM / TOTALQUO) + 1 - is_positive(_3RCM + _4RCM + _5RCM + _6RCM + _7RCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM - TGLRVOTOTM
APERPVTEFRFR = 1 - V_CNR * max(min(RPERPV, RBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - RFACCTEFRFR - RDDIVTEFRFR - DDCSG + TOTALQUO - SDD), 0)
TERPQTSCM = RPQTSCM * 1 - is_positive(INDTEFF) + TRPQTSCM * is_positive(INDTEFF)
TRPQRCMDCM = inf(TGLRCMDCM / REVACTNB)
TRPQF2M = inf(TGLF2M / COTF2)
RPQRCMGOM = inf(GLRCMGOM / RESTUCNB)
GLPRR4M = is_positive(PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR24 / TOTALQUOHT) + 1 - is_positive(PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRVM - GLPRRCM - GLPRR1M - GLPRR2M - GLPRR3M
TERPQTSREMP3M = RPQTSREMP3M * 1 - is_positive(INDTEFF) + TRPQTSREMP3M * is_positive(INDTEFF)
APERPCTEF = 1 - V_CNR * max(min(RPERPC, RBGTEF - RPALETEF - RPALPTEF - RFACCTEF - RDDIVTEF - DDCSG + TOTALQUO - SDD - APERPVTEF), 0)
TGLPRRZVM = is_positive(TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR2ZV / TOTALQUO) + 1 - is_positive(TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRVM - TGLPRRCM - TGLPRR1M - TGLPRR2M - TGLPRR3M - TGLPRR4M
TRPQF3M = inf(TGLF3M / COTF3)
TGLPALIM4M = is_positive(REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPENALIM4 / TOTALQUO) + 1 - is_positive(REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMVM - TGLPALIMCM - TGLPALIM1M - TGLPALIM2M - TGLPALIM3M
RFACC = max(min(DFA, RBG - RPALE - RPALP - DDCSG + TOTALQUO - SDD), 0)
TRPQPALIM2M = inf(TGLPALIM2M / PENSALNBP2)
TRPQ4M = inf(TGL4M / DIVGL4)
TEGLF2M = GLF2M * 1 - is_positive(INDTEFF) + TGLF2M * is_positive(INDTEFF)
GLTSREMP4M = is_positive(REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * TSNN2REMP4 / TOTALQUOHT) + 1 - is_positive(REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPVM - GLTSREMPCM - GLTSREMP1M - GLTSREMP2M - GLTSREMP3M
RNIDF3 = 1 - positif_ou_nul(RG + TOTALQUO) * DEFAA2 + positif_ou_nul(RG + TOTALQUO) * min(max(RG + TOTALQUO - DEFAA5 - DEFAA4 - DEFAA3, 0) - DEFAA2, DEFAA2) * -1 * positif_ou_nul(DEFAA2 - max(RG + TOTALQUO - DEFAA5 - DEFAA4 - DEFAA3, 0)) * 1 - is_positive(ART1731BIS) + min(DEFAA2, RNIDF - RNIDF1 - RNIDF2) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFAA2 * is_positive(ART1731BIS * PREM8_11)
TERPQ4M = RPQ4M * 1 - is_positive(INDTEFF) + TRPQ4M * is_positive(INDTEFF)
TGLRCMFUM = is_positive(_4RCM + _5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUOM * _3RCM / TOTALQUO) + 1 - is_positive(_4RCM + _5RCM + _6RCM + _7RCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM - TGLRVOTOTM - TGLRCMDCM
TERPQPRR3M = RPQPRR3M * 1 - is_positive(INDTEFF) + TRPQPRR3M * is_positive(INDTEFF)
TERPQTS2M = RPQTS2M * 1 - is_positive(INDTEFF) + TRPQTS2M * is_positive(INDTEFF)
ISNETEAJ4 = max(0, INETABAEAJ4 - ISNETDAJ4)
ITOTDOM6 = IMETRO6 + INETABADAJ6 + INETABAEAJ6
TEGLPALIM2M = GLPALIM2M * 1 - is_positive(INDTEFF) + TGLPALIM2M * is_positive(INDTEFF)
TERPQF2M = RPQF2M * 1 - is_positive(INDTEFF) + TRPQF2M * is_positive(INDTEFF)
RDDIV = max(min(DEDIV * 1 - V_CNR, RBG - RPALE - RPALP - RFACC - DDCSG + TOTALQUO - SDD), 0)
LIGRNIDF3 = is_positive(abs(RNIDF3)) * is_positive(is_positive(abs(RNIDF)) + is_positive(FLAGRETARD08 + FLAGDEFAUT11)) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
LIGRNIDF2 = is_positive(abs(RNIDF2)) * is_positive(is_positive(abs(RNIDF)) + is_positive(FLAGRETARD08 + FLAGDEFAUT11)) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
TAPERPV = 1 - V_CNR * max(min(RPERPV, RBG * 1 - INDTEFF + TEFFREVTOT3 - RPALE - RPALP - RFACC - RDDIV - DDCSG + TOTALQUO - SDD), 0)
TERPQF1M = RPQF1M * 1 - is_positive(INDTEFF) + TRPQF1M * is_positive(INDTEFF)
TRPQRCMFUM = inf(TGLRCMFUM / REVPEANB)
RPQPRR4M = inf(GLPRR4M / CARPENBAP4)
ITOTDOM4 = IMETRO4 + ISNETDAJ4 + ISNETEAJ4
APERPV = 1 - V_CNR * max(min(RPERPV, RBG - RPALE - RPALP - RFACC - RDDIV - DDCSG + TOTALQUO - SDD), 0)
TERPQRCMDCM = RPQRCMDCM * 1 - is_positive(INDTEFF) + TRPQRCMDCM * is_positive(INDTEFF)
TGLPRRZCM = is_positive(TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR2ZC / TOTALQUO) + 1 - is_positive(TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRVM - TGLPRRCM - TGLPRR1M - TGLPRR2M - TGLPRR3M - TGLPRR4M - TGLPRRZVM
TEGLPALIM3M = GLPALIM3M * 1 - is_positive(INDTEFF) + TGLPALIM3M * is_positive(INDTEFF)
APERPC = 1 - V_CNR * max(min(RPERPC, RBG - RPALE - RPALP - RFACC - RDDIV - DDCSG + TOTALQUO - SDD - APERPV), 0)
GLRCMTRM = is_positive(REVRF) * arr(TONEQUOMHT * _7RCM / TOTALQUOHT) + 1 - is_positive(REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM - GLRVOTOTM - GLRCMDCM - GLRCMFUM - GLRCMCHM - GLRCMGOM - GLRCMTSM
TEGLTSREMP4M = GLTSREMP4M * 1 - is_positive(INDTEFF) + TGLTSREMP4M * is_positive(INDTEFF)
TERPQPALIM2M = RPQPALIM2M * 1 - is_positive(INDTEFF) + TRPQPALIM2M * is_positive(INDTEFF)
TEGLTOTM = TEGL1M + TEGL2M + TEGL3M + TEGL4M
TEGLRCMFUM = GLRCMFUM * 1 - is_positive(INDTEFF) + TGLRCMFUM * is_positive(INDTEFF)
ADO4 = ABADON4 * 1 - is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ)) + ABATOT4 * is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ))
TEGLPRR4M = GLPRR4M * 1 - is_positive(INDTEFF) + TGLPRR4M * is_positive(INDTEFF)
TGLRCMCHM = is_positive(_5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUOM * _4RCM / TOTALQUO) + 1 - is_positive(_5RCM + _6RCM + _7RCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM - TGLRVOTOTM - TGLRCMDCM - TGLRCMFUM
GLPRRZVM = is_positive(PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR2ZV / TOTALQUOHT) + 1 - is_positive(PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRVM - GLPRRCM - GLPRR1M - GLPRR2M - GLPRR3M - GLPRR4M
TEGLRCMCHM = GLRCMCHM * 1 - is_positive(INDTEFF) + TGLRCMCHM * is_positive(INDTEFF)
TERPQTS4M = RPQTS4M * 1 - is_positive(INDTEFF) + TRPQTS4M * is_positive(INDTEFF)
TRPQPALIM4M = inf(TGLPALIM4M / PENSALNBP4)
RPQTSREMP4M = inf(GLTSREMP4M / REMPLANBP4)
TRPQPRRZVM = inf(TGLPRRZVM / CODNAZ)
RNIDF4 = 1 - positif_ou_nul(RG + TOTALQUO) * DEFAA3 + positif_ou_nul(RG + TOTALQUO) * min(max(RG + TOTALQUO - DEFAA5 - DEFAA4, 0) - DEFAA3, DEFAA3) * -1 * positif_ou_nul(DEFAA3 - max(RG + TOTALQUO - DEFAA5 - DEFAA4, 0)) * 1 - is_positive(ART1731BIS) + min(DEFAA3, RNIDF - RNIDF1 - RNIDF2 - RNIDF3) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFAA3 * is_positive(ART1731BIS * PREM8_11)
TEGLF3M = GLF3M * 1 - is_positive(INDTEFF) + TGLF3M * is_positive(INDTEFF)
TGLRCMTSM = is_positive(_6RCM + _7RCM + REVRF) * arr(TONEQUOM * _5RCM / TOTALQUO) + 1 - is_positive(_6RCM + _7RCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM - TGLRVOTOTM - TGLRCMDCM - TGLRCMFUM - TGLRCMCHM
TERPQTSREMP4M = RPQTSREMP4M * 1 - is_positive(INDTEFF) + TRPQTSREMP4M * is_positive(INDTEFF)
TEGLTSREMPTOTM = TEGLTSREMPVM + TEGLTSREMPCM + TEGLTSREMP1M + TEGLTSREMP2M + TEGLTSREMP3M + TEGLTSREMP4M
APERPPTEF = 1 - V_CNR * max(min(RPERPP, RBGTEF - RPALETEF - RPALPTEF - RFACCTEF - RDDIVTEF - DDCSG + TOTALQUO - SDD - APERPVTEF - APERPCTEF), 0)
TEGLRCMDCM = GLRCMDCM * 1 - is_positive(INDTEFF) + TGLRCMDCM * is_positive(INDTEFF)
TERPQF3M = RPQF3M * 1 - is_positive(INDTEFF) + TRPQF3M * is_positive(INDTEFF)
TRPQRCMCHM = inf(TGLRCMCHM / PROVIENB)
TGLPRRZ1M = is_positive(TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR2Z1 / TOTALQUO) + 1 - is_positive(TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRVM - TGLPRRCM - TGLPRR1M - TGLPRR2M - TGLPRR3M - TGLPRR4M - TGLPRRZVM - TGLPRRZCM
TERPQPALIM3M = RPQPALIM3M * 1 - is_positive(INDTEFF) + TRPQPALIM3M * is_positive(INDTEFF)
APERPCTEFRFR = 1 - V_CNR * max(min(RPERPC, RBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - RFACCTEFRFR - RDDIVTEFRFR - DDCSG + TOTALQUO - SDD - APERPVTEFRFR), 0)
TEGLPALIM4M = GLPALIM4M * 1 - is_positive(INDTEFF) + TGLPALIM4M * is_positive(INDTEFF)
TAPERPP = 1 - V_CNR * max(min(RPERPP, RBG * 1 - INDTEFF + TEFFREVTOT3 - RPALE - RPALP - RFACC - RDDIV - DDCSG + TOTALQUO - SDD - APERPV - APERPC), 0)
TGLRCMGOM = is_positive(_7RCM + REVRF) * arr(TONEQUOM * _6RCM / TOTALQUO) + 1 - is_positive(_7RCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM - TGLRVOTOTM - TGLRCMDCM - TGLRCMFUM - TGLRCMCHM - TGLRCMTSM
RPQRCMTRM = inf(GLRCMTRM / INTERENB)
TEGLRCMGOM = GLRCMGOM * 1 - is_positive(INDTEFF) + TGLRCMGOM * is_positive(INDTEFF)
RPQPRRZVM = inf(GLPRRZVM / CODNAZ)
TEGLRCMTSM = GLRCMTSM * 1 - is_positive(INDTEFF) + TGLRCMTSM * is_positive(INDTEFF)
GLRCMTOTM = GLRCMDCM + GLRCMFUM + GLRCMCHM + GLRCMGOM + GLRCMTRM + GLRCMTSM
TERPQPRR4M = RPQPRR4M * 1 - is_positive(INDTEFF) + TRPQPRR4M * is_positive(INDTEFF)
TGLPRRZ2M = is_positive(TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR2Z2 / TOTALQUO) + 1 - is_positive(TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRVM - TGLPRRCM - TGLPRR1M - TGLPRR2M - TGLPRR3M - TGLPRR4M - TGLPRRZVM - TGLPRRZCM - TGLPRRZ1M
TERPQRCMFUM = RPQRCMFUM * 1 - is_positive(INDTEFF) + TRPQRCMFUM * is_positive(INDTEFF)
TEGLPRRTOTM = TEGLPRRVM + TEGLPRRCM + TEGLPRR1M + TEGLPRR2M + TEGLPRR3M + TEGLPRR4M
TAPERPC = 1 - V_CNR * max(min(RPERPC, RBG * 1 - INDTEFF + TEFFREVTOT3 - RPALE - RPALP - RFACC - RDDIV - DDCSG + TOTALQUO - SDD - APERPV), 0)
RNIDF5 = 1 - positif_ou_nul(RG + TOTALQUO) * DEFAA4 + positif_ou_nul(RG + TOTALQUO) * min(max(RG + TOTALQUO - DEFAA5, 0) - DEFAA4, DEFAA4) * -1 * positif_ou_nul(DEFAA4 - max(RG + TOTALQUO - DEFAA5, 0)) * 1 - is_positive(ART1731BIS) + min(DEFAA4, RNIDF - RNIDF1 - RNIDF2 - RNIDF3 - RNIDF4) * is_positive(ART1731BIS * 1 - PREM8_11) + DEFAA4 * is_positive(ART1731BIS * PREM8_11)
TRPQPRRZCM = inf(TGLPRRZCM / CODNBZ)
TRPQRCMTSM = inf(TGLRCMTSM / DISQUONB)
APERPPTEFRFR = 1 - V_CNR * max(min(RPERPP, RBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - RFACCTEFRFR - RDDIVTEFRFR - DDCSG + TOTALQUO - SDD - APERPVTEFRFR - APERPCTEFRFR), 0)
TONEQUOM1 = sum([RPQ1M, RPQ2M, RPQ3M, RPQ4M]) + sum([RPQFVM, RPQFCM, RPQF1M, RPQF2M, RPQF3M, RPQF4M]) + sum([RPQPALIMVM, RPQPALIMCM, RPQPALIM1M, RPQPALIM2M, RPQPALIM3M, RPQPALIM4M]) + sum([RPQRF1M, RPQRF2M]) + RPQRCMDCM + RPQRCMFUM + RPQRCMCHM + RPQRCMTRM + RPQRCMTSM + RPQRCMGOM + sum([RPQPRRVM, RPQPRRCM, RPQPRR1M, RPQPRR2M, RPQPRR3M, RPQPRR4M]) + sum([RPQPRRZVM, RPQPRRZCM, RPQPRRZ1M, RPQPRRZ2M, RPQPRRZ3M, RPQPRRZ4M]) + RPQRVOM + RPQRVO5M + RPQRVO6M + RPQRVO7M + sum([RPQTSVM, RPQTSCM, RPQTS1M, RPQTS2M, RPQTS3M, RPQTS4M]) + sum([RPQTSREMPVM, RPQTSREMPCM, RPQTSREMP1M, RPQTSREMP2M, RPQTSREMP3M, RPQTSREMP4M]) + RPQRVGM + RPQRWBM * null(1 - FLAG_EXIT) + RPQRWBM + RPQRWAM * null(2 - FLAG_EXIT)
TERPQPALIM4M = RPQPALIM4M * 1 - is_positive(INDTEFF) + TRPQPALIM4M * is_positive(INDTEFF)
APERPP = 1 - V_CNR * max(min(RPERPP, RBG - RPALE - RPALP - RFACC - RDDIV - DDCSG + TOTALQUO - SDD - APERPV - APERPC), 0)
TRPQPRRZ1M = inf(TGLPRRZ1M / CODNCZ)
TGLRCMTRM = is_positive(REVRF) * arr(TONEQUOM * _7RCM / TOTALQUO) + 1 - is_positive(REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM - TGLRVOTOTM - TGLRCMDCM - TGLRCMFUM - TGLRCMCHM - TGLRCMGOM - TGLRCMTSM
TEGLPRRZVM = GLPRRZVM * 1 - is_positive(INDTEFF) + TGLPRRZVM * is_positive(INDTEFF)
NUREPARTEF = min(NUPROPT, max(0, min(PLAF_NUREPAR, RRBGTEF - RPALETEF - RPALPTEF - RFACCTEF - RDDIVTEF - APERPVTEF - APERPCTEF - APERPPTEF - DDCSG + TOTALQUO - SDD))) * 1 - V_CNR
GLPRRZCM = is_positive(PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR2ZC / TOTALQUOHT) + 1 - is_positive(PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRVM - GLPRRCM - GLPRR1M - GLPRR2M - GLPRR3M - GLPRR4M - GLPRRZVM
TRPQRCMGOM = inf(TGLRCMGOM / RESTUCNB)
NUREPAR = min(NUPROPT, max(0, min(PLAF_NUREPAR, RRBG - RPALE - RPALP - RFACC - RDDIV - APERPV - APERPC - APERPP - DDCSG + TOTALQUO - SDD))) * (V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]
REPAR5 = max(REPGROREP2 - NUREPAR, 0) * (V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]
RBLTEF = RBG2TEF - max(0, min(RBG2TEF, DPA + DFA + DEDIV + APERPVTEF + APERPCTEF + APERPPTEF + NUREPARTEF)) * 1 - V_CNR - min(RBG2TEF, V_8ZT) * V_CR2 * 1 - is_positive(RE168 + TAX1649)
REPAR1 = positif_ou_nul(REPGROREP1 + REPGROREP2 + REPGROREP11 + REPGROREP12 - NUREPAR) * REPGROREP13 + 1 - positif_ou_nul(REPGROREP1 + REPGROREP2 + REPGROREP11 + REPGROREP12 - NUREPAR) * max(REPGROREP13 + REPGROREP12 + REPGROREP11 + REPGROREP1 + REPGROREP2 - NUREPAR, 0) * (V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]
TERPQPRRZVM = RPQPRRZVM * 1 - is_positive(INDTEFF) + TRPQPRRZVM * is_positive(INDTEFF)
TERPQRCMCHM = RPQRCMCHM * 1 - is_positive(INDTEFF) + TRPQRCMCHM * is_positive(INDTEFF)
RPQPRRZCM = inf(GLPRRZCM / CODNBZ)
REPAR2 = positif_ou_nul(REPGROREP1 + REPGROREP2 + REPGROREP11 - NUREPAR) * REPGROREP12 + 1 - positif_ou_nul(REPGROREP1 + REPGROREP2 + REPGROREP11 - NUREPAR) * max(REPGROREP12 + REPGROREP11 + REPGROREP1 + REPGROREP2 - NUREPAR, 0) * (V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]
TEGLPALIMTOTM = TEGLPALIMVM + TEGLPALIMCM + TEGLPALIM1M + TEGLPALIM2M + TEGLPALIM3M + TEGLPALIM4M
LIGRNIDF4 = is_positive(abs(RNIDF4)) * is_positive(is_positive(abs(RNIDF)) + is_positive(FLAGRETARD08 + FLAGDEFAUT11)) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
GLRF1M = is_positive(_3REVF) * arr(TONEQUOMHT * _2REVF / TOTALQUOHT) + 1 - is_positive(_3REVF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM - GLRVOTOTM - GLRCMTOTM
SDC1 = max(0, DDCSG + DPA + DFA + DEDIV - APERPV - APERPC - APERPP - max(0, RBG)) * 1 - V_CNR + max(0, V_8ZT - max(0, RBG)) * V_CR2
GLPRRZ1M = is_positive(PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR2Z1 / TOTALQUOHT) + 1 - is_positive(PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRVM - GLPRRCM - GLPRR1M - GLPRR2M - GLPRR3M - GLPRR4M - GLPRRZVM - GLPRRZCM
SDC = max(0, DDCSG + DPA + DFA + DEDIV + APERPV + APERPC + APERPP + NUREPAR - max(0, RBG)) * 1 - V_CNR + max(0, V_8ZT - max(0, RBG)) * V_CR2
TRPQPRRZ2M = inf(TGLPRRZ2M / CODNDZ)
RNIDF0 = 1 - is_positive(RG + TOTALQUO) * RG + TOTALQUO * -1 * 1 - is_positive(ART1731BIS) + RNIDF - RNIDF1 - RNIDF2 - RNIDF3 - RNIDF4 - RNIDF5 * is_positive(ART1731BIS)
TEGLPRRZ1M = GLPRRZ1M * 1 - is_positive(INDTEFF) + TGLPRRZ1M * is_positive(INDTEFF)
REPNUREPART = max(NUPROPT - NUREPAR, 0)
CHTOT = max(0, min(DPA + DFA + 1 - is_positive(RE168 + TAX1649) * CHRDED + APERPV + APERPC + APERPP + NUREPAR, RBG - DDCSG + TOTALQUO - SDD)) * 1 - V_CNR
RBL = RBG2 - min(RBG2, DPA + DFA + DEDIV + APERPV + APERPC + APERPP + NUREPAR) * 1 - V_CNR - min(RBG2, V_8ZT) * V_CR2 * 1 - is_positive(RE168 + TAX1649)
LIGREPREPAR = is_positive(REPNUREPART) * LIG1 * 1 - null(4 - V_REGCO) * LIG2 * 1 - V_CNR
TXMOYIMPDEN2 = sum([DEFAA0 * 1 - is_positive(ART1731BIS), DEFAA1 * 1 - is_positive(ART1731BIS), DEFAA2 * 1 - is_positive(ART1731BIS), DEFAA3 * 1 - is_positive(ART1731BIS), DEFAA4 * 1 - is_positive(ART1731BIS), DEFAA5 * 1 - is_positive(ART1731BIS)]) * 1 - is_positive(RNIDF) + RDCSG + DPA + APERPV + APERPC + APERPP + DRFRP * is_positive(RRFI)
LIGRNIDF5 = is_positive(abs(RNIDF5)) * is_positive(is_positive(abs(RNIDF)) + is_positive(FLAGRETARD08 + FLAGDEFAUT11)) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
LIGREPAR1 = is_positive(REPAR1) * LIG1 * 1 - null(4 - V_REGCO) * LIG2 * 1 - V_CNR
LIGRNIDF0 = is_positive(abs(RNIDF0)) * is_positive(is_positive(abs(RNIDF)) + is_positive(FLAGRETARD08 + FLAGDEFAUT11)) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
NUREPARTEFRFR = min(NUPROPT, max(0, min(PLAF_NUREPAR, RRBGTEFRFR - RPALETEFRFR - RPALPTEFRFR - RFACCTEFRFR - RDDIVTEFRFR - APERPVTEFRFR - APERPCTEFRFR - APERPPTEFRFR - DDCSG + TOTALQUO - SDD))) * 1 - V_CNR
TEGLPRRZCM = GLPRRZCM * 1 - is_positive(INDTEFF) + TGLPRRZCM * is_positive(INDTEFF)
TRPQRCMTRM = inf(TGLRCMTRM / INTERENB)
RNGTEF = null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * IPVLOC + 1 - null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * RBLTEF
GLRF2M = TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRTOTM - GLRVOTOTM - GLRCMTOTM - GLRF1M
LIGREPAR5 = is_positive(REPAR5) * LIG1 * 1 - null(4 - V_REGCO) * LIG2 * 1 - V_CNR
TGLPRRZ3M = is_positive(TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR2Z3 / TOTALQUO) + 1 - is_positive(TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRVM - TGLPRRCM - TGLPRR1M - TGLPRR2M - TGLPRR3M - TGLPRR4M - TGLPRRZVM - TGLPRRZCM - TGLPRRZ1M - TGLPRRZ2M
TONEQUOM1T = sum([TRPQ1M, TRPQ2M, TRPQ3M, TRPQ4M]) + sum([TRPQFVM, TRPQFCM, TRPQF1M, TRPQF2M, TRPQF3M, TRPQF4M]) + sum([TRPQPALIMVM, TRPQPALIMCM, TRPQPALIM1M, TRPQPALIM2M, TRPQPALIM3M, TRPQPALIM4M]) + sum([TRPQRF1M, TRPQRF2M]) + TRPQRCMDCM + TRPQRCMFUM + TRPQRCMCHM + TRPQRCMTRM + TRPQRCMTSM + TRPQRCMGOM + sum([TRPQPRRVM, TRPQPRRCM, TRPQPRR1M, TRPQPRR2M, TRPQPRR3M, TRPQPRR4M]) + sum([TRPQPRRZVM, TRPQPRRZCM, TRPQPRRZ1M, TRPQPRRZ2M, TRPQPRRZ3M, TRPQPRRZ4M]) + TRPQRVOM + TRPQRVO5M + TRPQRVO6M + TRPQRVO7M + sum([TRPQTSVM, TRPQTSCM, TRPQTS1M, TRPQTS2M, TRPQTS3M, TRPQTS4M]) + sum([TRPQTSREMPVM, TRPQTSREMPCM, TRPQTSREMP1M, TRPQTSREMP2M, TRPQTSREMP3M, TRPQTSREMP4M]) + TRPQRVGM + TRPQRWBM * null(1 - FLAG_EXIT) + TRPQRWBM + TRPQRWAM * null(2 - FLAG_EXIT)
TEGLRCMTRM = GLRCMTRM * 1 - is_positive(INDTEFF) + TGLRCMTRM * is_positive(INDTEFF)
GLRFTOTM = GLRF1M + GLRF2M
NABTEF = min(max(LIM_ABTRNGDBL + 1 - RNGTEF + TOTALQUO - SDD - SDC, 0), 1) + min(max(LIM_ABTRNGSIMP + 1 - RNGTEF + TOTALQUO - SDD - SDC, 0), 1)
REPAR4 = positif_ou_nul(REPGROREP2 - NUREPAR) * REPGROREP1 + 1 - positif_ou_nul(REPGROREP2 - NUREPAR) * max(REPGROREP1 + REPGROREP2 - NUREPAR, 0) * (V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]
RNG = null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * IPVLOC + 1 - null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * RBL
REPAR3 = positif_ou_nul(REPGROREP1 + REPGROREP2 - NUREPAR) * REPGROREP11 + 1 - positif_ou_nul(REPGROREP1 + REPGROREP2 - NUREPAR) * max(REPGROREP11 + REPGROREP1 + REPGROREP2 - NUREPAR, 0) * (V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]
TERPQRCMTSM = RPQRCMTSM * 1 - is_positive(INDTEFF) + TRPQRCMTSM * is_positive(INDTEFF)
LIGREPAR3 = is_positive(REPAR3) * LIG1 * 1 - null(4 - V_REGCO) * LIG2 * 1 - V_CNR
RPQPRRZ1M = inf(GLPRRZ1M / CODNCZ)
RBLRFRHR = RBG2RFRHR - min(RBG2RFRHR, DPA + DFA + DEDIV + APERPV + APERPC + APERPP + NUREPAR) * 1 - V_CNR - min(RBG2RFRHR, V_8ZT) * V_CR2 * 1 - is_positive(RE168 + TAX1649)
TRPQPRRZ3M = inf(TGLPRRZ3M / CODNEZ)
TERPQPRRZCM = RPQPRRZCM * 1 - is_positive(INDTEFF) + TRPQPRRZCM * is_positive(INDTEFF)
GLPRRZ2M = is_positive(PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR2Z2 / TOTALQUOHT) + 1 - is_positive(PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRVM - GLPRRCM - GLPRR1M - GLPRR2M - GLPRR3M - GLPRR4M - GLPRRZVM - GLPRRZCM - GLPRRZ1M
RBLRFR = RBG2RFR - min(RBG2RFR, DPA + DFA + DEDIV + APERPV + APERPC + APERPP + NUREPAR) * 1 - V_CNR - min(RBG2RFR, V_8ZT) * V_CR2 * 1 - is_positive(RE168 + TAX1649)
TEGLPRRZ2M = GLPRRZ2M * 1 - is_positive(INDTEFF) + TGLPRRZ2M * is_positive(INDTEFF)
REVDON = max(0, RBL + TOTALQUOHT - SDD - SDC1)
ABTPATEF = NDA * NABTEF * ABAT_UNVIEUX * 1 - V_CNR
TGLRCMTOTM = TGLRCMDCM + TGLRCMFUM + TGLRCMCHM + TGLRCMGOM + TGLRCMTRM + TGLRCMTSM
LIGREPAR2 = is_positive(REPAR2) * LIG1 * 1 - null(4 - V_REGCO) * LIG2 * 1 - V_CNR
TERPQRCMGOM = RPQRCMGOM * 1 - is_positive(INDTEFF) + TRPQRCMGOM * is_positive(INDTEFF)
REPAR = max(REPNUREPART - REPAR5 - REPAR4 - REPAR3 - REPAR2 - REPAR1, 0) * (V_REGCO + 0) in [{'values': [1, 3, 5, 6, 7], 'type': 'enumeration_values'}]
RPQRF1M = inf(GLRF1M / FONCINB)
RNGRFR = null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * IPVLOC + 1 - null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * RBLRFR
TXMOYIMPDEN = max(0, TXMOYIMPDEN1 - TXMOYIMPDEN2 + TXMOYIMPDEN3 + TXMOYIMPDEN4 + TXMOYIMPDEN5 + TXMOYIMPDEN6)
RPQPRRZ2M = inf(GLPRRZ2M / CODNDZ)
RPQRF2M = inf(GLRF2M / REAMORNB)
BASEDONF = min(REPDON03, arr(REVDON * TX_BASEDUP / 100))
REPNUREPAR = REPAR5 + REPAR4 + REPAR3 + REPAR2 + REPAR1 + REPAR
REPDONR3 = positif_ou_nul(BASEDONF + REPDON04 - arr(REVDON * TX_BASEDUP / 100)) * REPDON05 + 1 - positif_ou_nul(BASEDONF + REPDON04 - arr(REVDON * TX_BASEDUP / 100)) * max(REPDON05 + BASEDONF + REPDON04 - arr(REVDON * TX_BASEDUP / 100), 0) * 1 - V_CNR
REPDONR2 = positif_ou_nul(BASEDONF + REPDON04 + REPDON05 - arr(REVDON * TX_BASEDUP / 100)) * REPDON06 + 1 - positif_ou_nul(BASEDONF + REPDON04 + REPDON05 - arr(REVDON * TX_BASEDUP / 100)) * max(REPDON06 + BASEDONF + REPDON04 + REPDON05 - arr(REVDON * TX_BASEDUP / 100), 0) * 1 - V_CNR
GLPRRZ3M = is_positive(PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR2Z3 / TOTALQUOHT) + 1 - is_positive(PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRVM - GLPRRCM - GLPRR1M - GLPRR2M - GLPRR3M - GLPRR4M - GLPRRZVM - GLPRRZCM - GLPRRZ1M - GLPRRZ2M
GLPRRZ4M = is_positive(REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PRR2Z4 / TOTALQUOHT) + 1 - is_positive(REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOTM - GLFTOTM - GLPALIMTOTM - GLTSTOTM - GLTSREMPTOTM - GLPRRVM - GLPRRCM - GLPRR1M - GLPRR2M - GLPRR3M - GLPRR4M - GLPRRZVM - GLPRRZCM - GLPRRZ1M - GLPRRZ2M - GLPRRZ3M
TGLPRRZ4M = is_positive(REVRVO + REVRCM + REVRF) * arr(TONEQUOM * TPRR2Z4 / TOTALQUO) + 1 - is_positive(REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRVM - TGLPRRCM - TGLPRR1M - TGLPRR2M - TGLPRR3M - TGLPRR4M - TGLPRRZVM - TGLPRRZCM - TGLPRRZ1M - TGLPRRZ2M - TGLPRRZ3M
REPDONR1 = positif_ou_nul(BASEDONF + REPDON04 + REPDON05 + REPDON06 - arr(REVDON * TX_BASEDUP / 100)) * REPDON07 + 1 - positif_ou_nul(BASEDONF + REPDON04 + REPDON05 + REPDON06 - arr(REVDON * TX_BASEDUP / 100)) * max(REPDON07 + BASEDONF + REPDON04 + REPDON05 + REPDON06 - arr(REVDON * TX_BASEDUP / 100), 0) * 1 - V_CNR
TEGLPRRZ4M = GLPRRZ4M * 1 - is_positive(INDTEFF) + TGLPRRZ4M * is_positive(INDTEFF)
LIGREPDONR1 = is_positive(REPDONR1) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RBLTEFRFR = RBG2TEFRFR - max(0, min(RBG2TEFRFR, DPA + DFA + DEDIV + APERPVTEFRFR + APERPCTEFRFR + APERPPTEFRFR + NUREPARTEFRFR)) * 1 - V_CNR - min(RBG2TEFRFR, V_8ZT) * V_CR2 * 1 - is_positive(RE168 + TAX1649)
ABSPRNG = RNG + TOTALQUO - SDD - SDC
SOFIRNG = RBL + TOTALQUO - SDD - SDC1
TEFFREVTOT = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + BPVRCM + PVTAXSB + PVIMPOS * null(1 - FLAG_EXIT) + COD3VE + PVIMPOS + PVSURSI * null(2 - FLAG_EXIT) + max(BANOR, 0) + REB + min(BANOR, 0) * is_positive(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649 - DAR - max(0, min(TEFFREVINTER, DPA + DFA + DEDIV + APERPVTEF + APERPCTEF + APERPPTEF + NUREPARTEF + ABTPATEF + ABTMA + DDCSG))
REPDONR4 = positif_ou_nul(BASEDONF - arr(REVDON * TX_BASEDUP / 100)) * REPDON04 + 1 - positif_ou_nul(BASEDONF - arr(REVDON * TX_BASEDUP / 100)) * max(REPDON04 + BASEDONF - arr(REVDON * TX_BASEDUP / 100), 0) * 1 - V_CNR
TERPQRCMTRM = RPQRCMTRM * 1 - is_positive(INDTEFF) + TRPQRCMTRM * is_positive(INDTEFF)
TGLRF1M = is_positive(_3REVF) * arr(TONEQUOM * _2REVF / TOTALQUO) + 1 - is_positive(_3REVF) * TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM - TGLRVOTOTM - TGLRCMTOTM
RPQPRRZ3M = inf(GLPRRZ3M / CODNEZ)
TERPQPRRZ2M = RPQPRRZ2M * 1 - is_positive(INDTEFF) + TRPQPRRZ2M * is_positive(INDTEFF)
BON = arr(min(REPDON03 + REPDON04 + REPDON05 + REPDON06 + REPDON07 + RDDOUP + BDON7UH + DONAUTRE + EXCEDANTA, REVDON * TX_BASEDUP / 100))
LIGREPDONR3 = is_positive(REPDONR3) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
NAB = min(max(LIM_ABTRNGDBL + 1 - RNG + TOTALQUO - SDD - SDC, 0), 1) + min(max(LIM_ABTRNGSIMP + 1 - RNG + TOTALQUO - SDD - SDC, 0), 1)
LIGREPAR4 = is_positive(REPAR4) * LIG1 * 1 - null(4 - V_REGCO) * LIG2 * 1 - V_CNR
TETONEQUOM1 = TONEQUOM1 * 1 - is_positive(INDTEFF) + TONEQUOM1T * is_positive(INDTEFF)
RNGRFRHR = null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * IPVLOC + 1 - null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * RBLRFRHR
REPDON = max(BASEDONF + REPDON04 + REPDON05 + REPDON06 + REPDON07 + BASEDONP - arr(REVDON * TX_BASEDUP / 100), 0) * 1 - V_CNR
RPQPRRZ4M = inf(GLPRRZ4M / CODNFZ)
TERPQPRRZ1M = RPQPRRZ1M * 1 - is_positive(INDTEFF) + TRPQPRRZ1M * is_positive(INDTEFF)
TEGLRCMTOTM = TEGLRCMDCM + TEGLRCMFUM + TEGLRCMCHM + TEGLRCMGOM + TEGLRCMTRM + TEGLRCMTSM
LIGREPDONR2 = is_positive(REPDONR2) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RNGTEFRFR = null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * IPVLOC + 1 - null(V_REGCO - 4) * null(V_CNR - 1) * null(V_CNR2 - 1) * null(V_CR2 - 1) * RBLTEFRFR
LIG1500YT = is_positive(is_positive(IPMOND) * is_positive(present(IPTEFP) + is_positive(VARIPTEFP) * present(DEFZU)) + is_positive(INDTEFF) * is_positive(TEFFREVTOT)) * is_positive(is_positive(max(0, IPTEFP + DEFZU - IPTEFN)) + is_positive(max(0, RMOND + DEFZU - DMOND))) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * is_positive(DEFRIMOND) * LIG1 * LIG2
TGLRF2M = TONEQUOM - TGLTOTM - TGLFTOTM - TGLPALIMTOTM - TGLTSTOTM - TGLTSREMPTOTM - TGLPRRTOTM - TGLRVOTOTM - TGLRCMTOTM - TGLRF1M
LIGREPARN = is_positive(REPAR) * LIG1 * 1 - null(4 - V_REGCO) * LIG2 * 1 - V_CNR
TEGLRF1M = GLRF1M * 1 - is_positive(INDTEFF) + TGLRF1M * is_positive(INDTEFF)
TRPQRF2M = inf(TGLRF2M / REAMORNB)
RRCN = arr(min(CINE1, min(max(SOFIRNG, RNG) * TX_CINE3 / 100, PLAF_CINE)) * TX_CINE1 / 100 + min(CINE2, max(min(max(SOFIRNG, RNG) * TX_CINE3 / 100, PLAF_CINE) - CINE1, 0)) * TX_CINE2 / 100) * 1 - V_CNR
TERPQPRRZ3M = RPQPRRZ3M * 1 - is_positive(INDTEFF) + TRPQPRRZ3M * is_positive(INDTEFF)
TRPQPRRZ4M = inf(TGLPRRZ4M / CODNFZ)
TGLRFTOTM = TGLRF1M + TGLRF2M
TEGLPRRZ3M = GLPRRZ3M * 1 - is_positive(INDTEFF) + TGLPRRZ3M * is_positive(INDTEFF)
LIG1510 = is_positive(is_positive(IPMOND) * present(IPTEFN) + is_positive(INDTEFF) * 1 - is_positive(TEFFREVTOT)) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * 1 - is_positive(DEFRIMOND) * LIG1 * LIG2
RB55 = max(0, RB05 + TETONEQUOM1)
RON = arr(BON * TX_REDDON / 100) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
ABTPA = NDA * NAB * ABAT_UNVIEUX * 1 - V_CNR
NABTEFRFR = min(max(LIM_ABTRNGDBL + 1 - RNGTEFRFR + TOTALQUO - SDD - SDC, 0), 1) + min(max(LIM_ABTRNGSIMP + 1 - RNGTEFRFR + TOTALQUO - SDD - SDC, 0), 1)
TEFF = VARIPTEFP - VARIPTEFN + TEFFREVTOT
ACINE_1 = max(0, min(CINE1 + CINE2, min(arr(SOFIRNG * TX_CINE3 / 100), PLAF_CINE))) * 1 - V_CNR
QF515 = arr(RB55) / NB1
LIGREPDONR4 = is_positive(REPDONR4) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
TEFFN_1 = 1 - positif_ou_nul(TEFF) * min(0, TEFF) * -1 + 0
LIG1500 = is_positive(is_positive(IPMOND) * is_positive(present(IPTEFP) + is_positive(VARIPTEFP) * present(DEFZU)) + is_positive(INDTEFF) * is_positive(TEFFREVTOT)) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * 1 - is_positive(DEFRIMOND) * LIG1 * LIG2
TRPQRF1M = inf(TGLRF1M / FONCINB)
REPDONR = max(REPDON - REPDONR1 - REPDONR2 - REPDONR3 - REPDONR4 - REPDONR5, 0) * 1 - V_CNR
TERPQRF1M = RPQRF1M * 1 - is_positive(INDTEFF) + TRPQRF1M * is_positive(INDTEFF)
ADONS = BON * 1 - ART1731BIS + min(BON, max(ADONS_P + ADONSP2, ADONS1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RI1 = max(RNG - 1 - min(1, IPVLOC) * ABTPA - ABTMA, 0)
ABMAR = min(ABTMA, max(RNG + TOTALQUO - SDD - SDC - ABTPA, 0))
LIGREPDON = is_positive(REPDONR + REPDONR1 + REPDONR2 + REPDONR3 + REPDONR4) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RB01 = RI1 * 1 - is_positive(VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS + VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS + INDTEFF) + ZONIPTEFP + PVIMPOS * is_positive(ZONIPTEFP) + ZONIPTEFN + PVIMPOS * is_positive(ZONIPTEFN - PVIMPOS) + PVIMPOS - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVIMPOS) * null(1 - FLAG_EXIT) + PVIMPOS + PVSURSI * is_positive(ZONIPTEFP) + ZONIPTEFN + PVSURSI * is_positive(ZONIPTEFN - PVSURSI) + PVSURSI - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVSURSI) * null(2 - FLAG_EXIT) + RFROBOR * V_INDTEO * is_positive(ZONIPTEFP) + TEFFREVTOT * 1 - is_positive(ZONIPTEFP + PVIMPOS * is_positive(ZONIPTEFP) + ZONIPTEFN + PVIMPOS * is_positive(ZONIPTEFN - PVIMPOS) + PVIMPOS - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVIMPOS) * null(1 - FLAG_EXIT) + PVSURSI + PVIMPOS * is_positive(ZONIPTEFP) + ZONIPTEFN + PVSURSI * is_positive(ZONIPTEFN - PVSURSI) + PVSURSI - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVSURSI) * null(2 - FLAG_EXIT)) * INDTEFF
QF011 = arr(RB01) / NB1
TERPQRF2M = RPQRF2M * 1 - is_positive(INDTEFF) + TRPQRF2M * is_positive(INDTEFF)
ABSPE = 1 - is_positive(NDA) * 9 + is_positive(NAB) * 1 - is_positive(NAB - 1) * 1 - is_positive(NDA - 1) * is_positive(NDA) + is_positive(NAB - 1) * 1 - is_positive(NDA - 1) * is_positive(NDA) * 2 + is_positive(NAB) * 1 - is_positive(NAB - 1) * is_positive(NDA - 1) * 3 + is_positive(NAB - 1) * is_positive(NDA - 1) * 6
ABVIE = min(ABTPA, max(RNG + TOTALQUO - SDD - SDC, 0))
RI1RFRHR = max(RNGRFRHR - 1 - min(1, IPVLOC) * ABTPA - ABTMA, 0)
RB018XR = RNG * 1 - is_positive(VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS + VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS + INDTEFF) + ABVIE + ABMAR * is_positive(ZONIPTEFP) + ZONIPTEFP + PVIMPOS * is_positive(ZONIPTEFP) + ZONIPTEFN + PVIMPOS * is_positive(ZONIPTEFN - PVIMPOS) + PVIMPOS - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVIMPOS) * null(1 - FLAG_EXIT) + PVIMPOS + PVSURSI * is_positive(ZONIPTEFP) + ZONIPTEFN + PVSURSI * is_positive(ZONIPTEFN - PVSURSI) + PVSURSI - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVSURSI) * null(2 - FLAG_EXIT) + RFROBOR * V_INDTEO * is_positive(ZONIPTEFP) + ABMAR + ABTPATEF + TEFFREVTOT * 1 - is_positive(ZONIPTEFP + PVIMPOS * is_positive(ZONIPTEFP) + ZONIPTEFN + PVIMPOS * is_positive(ZONIPTEFN - PVIMPOS) + PVIMPOS - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVIMPOS) * null(1 - FLAG_EXIT) + PVSURSI + PVIMPOS * is_positive(ZONIPTEFP) + ZONIPTEFN + PVSURSI * is_positive(ZONIPTEFN - PVSURSI) + PVSURSI - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVSURSI) * null(2 - FLAG_EXIT)) * INDTEFF
RNI = 1 - ART1731BIS * is_positive(RG + R1649 + PREREV) * arr(RI1) * 1 - is_positive(RE168 + TAX1649) + RE168 + TAX1649 * is_positive(RE168 + TAX1649) + ART1731BIS * is_positive(RG + R1649 + PREREV + SOMDEFICIT) * arr(RI1) * 1 - is_positive(RE168 + TAX1649) + RE168 + TAX1649 * is_positive(RE168 + TAX1649)
RI1RFR = max(RNGRFR - 1 - min(1, IPVLOC) * ABTPA - ABTMA, 0)
RNICOL = RNI + RNIDF
TEFFP_1 = max(0, TEFF)
TEGLRF2M = GLRF2M * 1 - is_positive(INDTEFF) + TGLRF2M * is_positive(INDTEFF)
TERPQPRRZ4M = RPQPRRZ4M * 1 - is_positive(INDTEFF) + TRPQPRRZ4M * is_positive(INDTEFF)
SDM = max(0, ABTMA - max(0, RNG - ABTPA))
RDMO = TEFF + VARRMOND * is_positive(SOMMEMOND_2) + RMOND * 1 - is_positive(SOMMEMOND_2 * PREM8_11) - VARDMOND * is_positive(SOMMEMOND_2) + DMOND * 1 - is_positive(SOMMEMOND_2 * PREM8_11)
ABTPATEFRFR = NDA * NABTEFRFR * ABAT_UNVIEUX * 1 - V_CNR
DS011 = max(QF011 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF011 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF011 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF011 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF011 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
DS515 = max(QF515 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF515 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF515 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF515 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF515 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
TEFFREVTOTRFR = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + PVBAR + max(BANOR, 0) + REB + min(BANOR, 0) * is_positive(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649 - DAR - max(0, min(TEFFREVINTER, DPA + DFA + DEDIV + APERPVTEFRFR + APERPCTEFRFR + APERPPTEFRFR + NUREPARTEFRFR + ABTPATEFRFR + ABTMA + DDCSG))
TEFFP_2 = max(0, TEFF) * null(SOMMEMOND_2 + 0) + is_positive(SOMMEMOND_2) * max(0, IPTEFP + DEFZU - IPTEFN) * 1 - PREM8_11 + max(0, IPTEFP + DEFZU - IPTEFN) * PREM8_11
QF525 = arr(RB55) / NB2
SDV = max(0, ABTPA - RNG)
ABSRE = ABMAR + ABVIE
TEFFN_2 = 1 - positif_ou_nul(TEFF) * min(0, TEFF) * -1 + 0 * null(SOMMEMOND_2 + 0) * 1 - PREM8_11 + 0
TEGLPRRZTOTM = TEGLPRRZVM + TEGLPRRZCM + TEGLPRRZ1M + TEGLPRRZ2M + TEGLPRRZ3M + TEGLPRRZ4M
QF021 = arr(RB01) / NB2
DS525 = max(QF525 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF525 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF525 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF525 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF525 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
REVQUOQHT = max(0, TOTALQUOHT - SDD - SDC - SDV - SDM)
ACINE = max(0, ACINE_1 * 1 - ART1731BIS + min(ACINE_1, max(ACINE_P + ACINEP2, ACINE1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - V_CNR
TEFFP = TEFFP_1 * 1 - is_positive(SOMMEMOND_2) + TEFFP_2 * is_positive(is_positive(SOMMEMOND_2 + 0) + PREM8_11)
AGABAT = ABVIE + ABMAR
RI2 = RI1 + DPAE
LIGREPDONR = is_positive(REPDONR) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIG1390 = is_positive(is_positive(ABMAR) + 1 - is_positive(RI1) * is_positive(V_0DN)) * LIG1 * LIG2
TEFFN = TEFFN_1 * 1 - is_positive(SOMMEMOND_2) + TEFFN_2 * is_positive(SOMMEMOND_2)
IS515 = arr(DS515 * NB1)
TEFFREVTOTRFRHR = INDTEFF * TBICPF + TBICNPF + TBNN + BIHTAV + BIHTAC + BIHTAP + BIPTAV + BIPTAC + BIPTAP + ESFP + TTSPR + RCM + PLOCNETF + NPLOCNETF + RFNTEO * V_INDTEO + RRFI * 1 - V_INDTEO + PVBARHR + max(BANOR, 0) + REB + min(BANOR, 0) * is_positive(SEUIL_IMPDEFBA + 1 - SHBA - REVTP - BA1 - REVQTOTQHT) + R1649 - DAR - max(0, min(TEFFREVINTER, DPA + DFA + DEDIV + APERPVTEFRFR + APERPCTEFRFR + APERPPTEFRFR + NUREPARTEFRFR + ABTPATEFRFR + ABTMA + DDCSG))
RB02 = RI2 * 1 - is_positive(VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS + VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS + INDTEFF) + ZONIPTEFP + PVIMPOS * is_positive(ZONIPTEFP) + ZONIPTEFN + PVIMPOS * is_positive(ZONIPTEFN - PVIMPOS) + PVIMPOS - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVIMPOS) * null(1 - FLAG_EXIT) + PVSURSI + PVIMPOS * is_positive(ZONIPTEFP) + ZONIPTEFN + PVSURSI * is_positive(ZONIPTEFN - PVSURSI) + PVSURSI - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVSURSI) * null(2 - FLAG_EXIT) + RFROBOR * V_INDTEO * is_positive(ZONIPTEFP) + DPAE + TEFFREVTOT * 1 - is_positive(ZONIPTEFP + PVIMPOS * is_positive(ZONIPTEFP) + ZONIPTEFN + PVIMPOS * is_positive(ZONIPTEFN - PVIMPOS) + PVIMPOS - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVIMPOS) * null(1 - FLAG_EXIT) + PVSURSI + PVIMPOS * is_positive(ZONIPTEFP) + ZONIPTEFN + PVSURSI * is_positive(ZONIPTEFN - PVSURSI) + PVSURSI - ZONIPTEFN * is_positive(ZONIPTEFN) * 1 - is_positive(ZONIPTEFN - PVSURSI) * null(2 - FLAG_EXIT)) * INDTEFF
IS525 = arr(DS525 * NB2)
DS021 = max(QF021 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF021 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF021 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF021 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF021 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
TEGLRFTOTM = TEGLRF1M + TEGLRF2M
IS011 = arr(DS011 * NB1)
IS021 = arr(DS021 * NB2)
TONEQUOHT = max(0, TOTALQUOHT - SDD + SDC + SDV + SDM * 1 - is_positive(VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS + VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS + TEFFREVTOT * INDTEFF) - VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS)
TONEQUO = max(0, TOTALQUO - SDD + SDC + SDV + SDM * 1 - is_positive(VARIPTEFP * is_positive(ART1731BIS) + IPTEFP * 1 - ART1731BIS + VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS + TEFFREVTOT * INDTEFF) - VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS)
GL4V = arr(TONEQUOHT * REV4V / TOTALQUOHT)
TGL4RAJV = arr(TONEQUO * REV4RAJV / TOTALQUO)
TGL4V = arr(TONEQUO * REV4V / TOTALQUO)
GLRWB = is_positive(CODRWA + CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * CODRWB / TOTALQUOHT) + 1 - is_positive(CODRWA + CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT * is_positive(null(1 - FLAG_EXIT) + null(2 - FLAG_EXIT))
REVQUO = max(0, TOTALQUO - SDD - SDC - SDV - SDM)
GLRWA = is_positive(CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * CODRWA / TOTALQUOHT) + 1 - is_positive(CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLRWB * null(2 - FLAG_EXIT)
TRPQ4V = arr(TGL4V / DIVGL4) + 0
IN01 = max(IS011, IS021 - PLA)
TGL4C = arr(TONEQUO * REV4C / TOTALQUO)
TGL4TVC = arr(TONEQUO * REV4TVC / TOTALQUO)
INANT01 = max(IS011, IS021 - PLANT)
TEGL4V = GL4V * 1 - is_positive(INDTEFF) + TGL4V * is_positive(INDTEFF)
QF022 = arr(RB02) / NB2
GL4C = arr(TONEQUOHT * REV4C / TOTALQUOHT)
DS022 = max(QF022 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF022 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF022 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF022 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF022 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
TGL4VC = arr(TONEQUO * REV4VC / TOTALQUO)
TRPQ4VC = arr(TGL4VC / DIVGL4) + 0
GL4RAJV = arr(TONEQUOHT * REV4RAJV / TOTALQUOHT)
TGL4RBJC = arr(TONEQUO * REV4RBJC / TOTALQUO)
TRPQ4TVC = arr(TGL4TVC / DIVGL4) + 0
GL4TVC = arr(TONEQUOHT * REV4TVC / TOTALQUOHT)
RPQRWA = inf(GLRWA / CODNWA) + 0
RPQRWB = inf(GLRWB / CODNWB) + 0
IN55 = max(IS515, IS525 - PLA)
RPQ4V = arr(GL4V / DIVGL4) + 0
QF012 = arr(RB02) / NB1
IPQANT01 = INANT01
IS022 = arr(DS022 * NB2)
TTPVQ = TONEQUOHT
SEUILRED1 = arr(arr(RI1) + REVQUO / NBPT)
TEGL4TVC = GL4TVC * 1 - is_positive(INDTEFF) + TGL4TVC * is_positive(INDTEFF)
BMI = arr(RI1 + REVQUO - PRODOM - PROGUY)
RPQ4C = arr(GL4C / DIVGL4) + 0
IPQ01 = IN01
GLRVG = is_positive(REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * CODRVG / TOTALQUOHT) + 1 - is_positive(REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLRWB - GLRWA
IMETRO31 = arr(IPQ01 * REVMETRO / RG)
TRPQ4C = arr(TGL4C / DIVGL4) + 0
TERPQ4V = RPQ4V * 1 - is_positive(INDTEFF) + TRPQ4V * is_positive(INDTEFF)
RPQ4RAJV = arr(GL4RAJV / DIVGL4) + 0
TRPQ4RAJV = arr(TGL4RAJV / DIVGL4) + 0
GL4RBJC = arr(TONEQUOHT * REV4RBJC / TOTALQUOHT)
TRPQ4RBJC = arr(TGL4RBJC / DIVGL4) + 0
IMETRO1 = arr(IPQ01 * EXO1 * REVMETRO / RG)
RPQRVG = inf(GLRVG / CODNVG) + 0
TGLRWB = is_positive(CODRWA + CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * CODRWB / TOTALQUO) + 1 - is_positive(CODRWA + CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO * is_positive(null(1 - FLAG_EXIT) + null(2 - FLAG_EXIT))
TEGL4C = GL4C * 1 - is_positive(INDTEFF) + TGL4C * is_positive(INDTEFF)
GL4VC = arr(TONEQUOHT * REV4VC / TOTALQUOHT)
TRPQRWB = inf(TGLRWB / CODNWB) + 0
IPROGUY31 = arr(IPQ01 * PROGUY / RG)
RNIDOM3 = arr(RNG + TTPVQ * TX11 / 100)
IPROGUY1 = arr(IPQ01 * EXO1 * PROGUY / RG)
TGLRWA = is_positive(CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * CODRWA / TOTALQUO) + 1 - is_positive(CODRVG + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLRWB * null(2 - FLAG_EXIT)
IQUOTOT5 = IN55 - IN05
DS012 = max(QF012 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF012 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF012 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF012 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF012 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
RPQ4TVC = arr(GL4TVC / DIVGL4) + 0
RNIDOM1 = arr(RNG + TTPVQ * TX15 / 100)
RPQ4VC = arr(GL4VC / DIVGL4) + 0
GL1 = is_positive(REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * GLN1 / TOTALQUOHT) + 1 - is_positive(REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLRVG - GLRWB - GLRWA
TERPQ4RAJV = RPQ4RAJV * 1 - is_positive(INDTEFF) + TRPQ4RAJV * is_positive(INDTEFF)
TGLRVG = is_positive(REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * CODRVG / TOTALQUO) + 1 - is_positive(REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLRWB - TGLRWA
GLTOT = sum([GL1, GL2, GL3, GL4]) + GLRVG + GLRWB + GLRWA
GLRVO = is_positive(_2RV2 + _2RV3 + _2RV4 + REVRCM + REVRF) * arr(TONEQUOHT * _2RV1 / TOTALQUOHT) + 1 - is_positive(_2RV2 + _2RV3 + _2RV4 + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRTOT
RPQRVO = inf(GLRVO / RENTAXNB)
RPQ4RBJC = arr(GL4RBJC / DIVGL4) + 0
TERPQ4RBJC = RPQ4RBJC * 1 - is_positive(INDTEFF) + TRPQ4RBJC * is_positive(INDTEFF)
TEGL4VC = GL4VC * 1 - is_positive(INDTEFF) + TGL4VC * is_positive(INDTEFF)
GLRVO5 = is_positive(_2RV3 + _2RV4 + REVRCM + REVRF) * arr(TONEQUOHT * _2RV2 / TOTALQUOHT) + 1 - is_positive(_2RV3 + _2RV4 + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRTOT - GLRVO
RNIDOM2 = arr(RNG + TTPVQ * TX13 / 100)
TERPQ4TVC = RPQ4TVC * 1 - is_positive(INDTEFF) + TRPQ4TVC * is_positive(INDTEFF)
TERPQ4C = RPQ4C * 1 - is_positive(INDTEFF) + TRPQ4C * is_positive(INDTEFF)
IMI = arr(BMI * TX_MIN_MET / 100 + arr(PRODOM + PROGUY) * TX_MIN_DOM / 100) * V_CR2
TRPQRVG = inf(TGLRVG / CODNVG) + 0
TRPQRWA = inf(TGLRWA / CODNWA) + 0
TGLTOT = sum([TGL1, TGL2, TGL3, TGL4]) + TGLRVG + TGLRWB + TGLRWA
IS012 = arr(DS012 * NB1)
GLRVO6 = is_positive(_2RV4 + REVRCM + REVRF) * arr(TONEQUOHT * _2RV3 / TOTALQUOHT) + 1 - is_positive(_2RV4 + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLPRRTOT - GLTSREMPTOT - GLRVO - GLRVO5
TEGLRWB = GLRWB * 1 - is_positive(INDTEFF) + TGLRWB * is_positive(INDTEFF)
TERPQ4VC = RPQ4VC * 1 - is_positive(INDTEFF) + TRPQ4VC * is_positive(INDTEFF)
TEGLRWA = GLRWA * 1 - is_positive(INDTEFF) + TGLRWA * is_positive(INDTEFF)
IPRODOM31 = arr(IPQ01 * PRODOM / RG)
RPQ1 = inf(GL1 / DIVGL1) + 0
IPRODOM1 = arr(IPQ01 * EXO1 * PRODOM / RG)
TGLTSREMPV = is_positive(TTSNN2REMPC + TTSNN2REMP1 + TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2REMPV / TOTALQUO) + 1 - is_positive(TTSNN2REMPC + TTSNN2REMP1 + TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLTSTOT - GLPALIMTOT
GLTSREMPV = is_positive(TSNN2REMPC + TSNN2REMP1 + TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2REMPV / TOTALQUOHT) + 1 - is_positive(TSNN2REMPC + TSNN2REMP1 + TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLTSTOT - GLPALIMTOT
RPQRVO5 = inf(GLRVO5 / RENTAXNB5)
TGLTSV = is_positive(TTSNN2TSC + TTSNN2TS1 + TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2TSV / TOTALQUO) + 1 - is_positive(TTSNN2TSC + TTSNN2TS1 + TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT
INANT02 = max(IS012, IS022 - PLANT)
GLTSV = is_positive(TSNN2TSC + TSNN2TS1 + TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2TSV / TOTALQUOHT) + 1 - is_positive(TSNN2TSC + TSNN2TS1 + TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT
TGLTSREMPC = is_positive(TTSNN2REMP1 + TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2REMPC / TOTALQUO) + 1 - is_positive(TTSNN2REMP1 + TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPV
TEGLTSV = GLTSV * 1 - is_positive(INDTEFF) + TGLTSV * is_positive(INDTEFF)
TGLFV = is_positive(PENFC + PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * PENFV / TOTALQUO) + 1 - is_positive(PENFC + PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT
GL2 = is_positive(REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * GLN2 / TOTALQUOHT) + 1 - is_positive(REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLRWB - GLRWA - GLRVG - GL1
TGLTSREMP1 = is_positive(TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2REMP1 / TOTALQUO) + 1 - is_positive(TTSNN2REMP2 + TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPV - TGLTSREMPC
GLPRRV = is_positive(PRR2C + PRR21 + PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR2V / TOTALQUOHT) + 1 - is_positive(PRR2C + PRR21 + PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT
TERPQRWB = RPQRWB * 1 - is_positive(INDTEFF) + TRPQRWB * is_positive(INDTEFF)
TGLPALIMV = is_positive(TPENALIMC + TPENALIM1 + TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPENALIMV / TOTALQUO) + 1 - is_positive(TPENALIMC + TPENALIM1 + TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT
GLTSREMPC = is_positive(TSNN2REMP1 + TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2REMPC / TOTALQUOHT) + 1 - is_positive(TSNN2REMP1 + TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPV
IN02 = max(IS012, IS022 - PLA)
GL3 = is_positive(REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * GLN3 / TOTALQUOHT) + 1 - is_positive(REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLRWB - GLRWA - GLRVG - GL1 - GL2
TGLRVO = is_positive(_2RV2 + _2RV3 + _2RV4 + REVRCM + REVRF) * arr(TONEQUO * _2RV1 / TOTALQUO) + 1 - is_positive(_2RV2 + _2RV3 + _2RV4 + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRTOT
TGLTSC = is_positive(TTSNN2TS1 + TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2TSC / TOTALQUO) + 1 - is_positive(TTSNN2TS1 + TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSV
RPQTSREMPC = inf(GLTSREMPC / REMPLANBC)
TGLFC = is_positive(PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * PENFC / TOTALQUO) + 1 - is_positive(PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFV
GL4 = is_positive(REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * REV4 / TOTALQUOHT) + 1 - is_positive(REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLRWB - GLRWA - GLRVG - GL1 - GL2 - GL3
GLFV = is_positive(PENFC + PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENFV / TOTALQUOHT) + 1 - is_positive(PENFC + PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT
GLF4M = is_positive(REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOMHT * PENF4 / TOTALQUOHT) + 1 - is_positive(REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOMHT - GLTOT - GLFVM - GLFCM - GLF1M - GLF2M - GLF3M
TGLTSREMP2 = is_positive(TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2REMP2 / TOTALQUO) + 1 - is_positive(TTSNN2REMP3 + TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPV - TGLTSREMPC - TGLTSREMP1
GLPRRC = is_positive(PRR21 + PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR2C / TOTALQUOHT) + 1 - is_positive(PRR21 + PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRV
TERPQRWA = RPQRWA * 1 - is_positive(INDTEFF) + TRPQRWA * is_positive(INDTEFF)
GLPALIMV = is_positive(PENALIMC + PENALIM1 + PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENALIMV / TOTALQUOHT) + 1 - is_positive(PENALIMC + PENALIM1 + PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT
TGL1 = is_positive(REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TGLN1 / TOTALQUO) + 1 - is_positive(REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLRWB - TGLRWA - TGLRVG
GLRVO7 = is_positive(REVRCM + REVRF) * arr(TONEQUOHT * _2RV4 / TOTALQUOHT) + 1 - is_positive(REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRTOT - GLRVO - GLRVO5 - GLRVO6
TEGLRVO = GLRVO * 1 - is_positive(INDTEFF) + TGLRVO * is_positive(INDTEFF)
GLPRR1 = is_positive(PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR21 / TOTALQUOHT) + 1 - is_positive(PRR22 + PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRV - GLPRRC
TGLPALIMC = is_positive(TPENALIM1 + TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPENALIMC / TOTALQUO) + 1 - is_positive(TPENALIM1 + TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMV
TEGLPALIMV = GLPALIMV * 1 - is_positive(INDTEFF) + TGLPALIMV * is_positive(INDTEFF)
RPQRVO7 = inf(GLRVO7 / RENTAXNB7)
TERPQRVG = RPQRVG * 1 - is_positive(INDTEFF) + TRPQRVG * is_positive(INDTEFF)
RPQFV = inf(GLFV / COTFV)
RPQPALIMV = inf(GLPALIMV / PENSALNBV)
TEGLRVG = GLRVG * 1 - is_positive(INDTEFF) + TGLRVG * is_positive(INDTEFF)
TGL2 = is_positive(REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TGLN2 / TOTALQUO) + 1 - is_positive(REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLRWB - TGLRWA - TGLRVG - TGL1
TGLPRRV = is_positive(TPRR2C + TPRR21 + TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR2V / TOTALQUO) + 1 - is_positive(TPRR2C + TPRR21 + TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT
TGLF4M = is_positive(REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOM * PENF4 / TOTALQUO) + 1 - is_positive(REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOM - TGLTOT - TGLFVM - TGLFCM - TGLF1M - TGLF2M - TGLF3M
TEGLFV = GLFV * 1 - is_positive(INDTEFF) + TGLFV * is_positive(INDTEFF)
RPQ3 = inf(GL3 / DIVGL3) + 0
TRPQPALIMV = inf(TGLPALIMV / PENSALNBV)
TEGLTSREMPC = GLTSREMPC * 1 - is_positive(INDTEFF) + TGLTSREMPC * is_positive(INDTEFF)
TRPQTSREMPC = inf(TGLTSREMPC / REMPLANBC)
TRPQTSREMPV = inf(TGLTSREMPV / REMPLANBV)
TGLTS1 = is_positive(TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2TS1 / TOTALQUO) + 1 - is_positive(TTSNN2TS2 + TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - GLTOT - GLFTOT - GLPALIMTOT - TGLTSV - TGLTSC
TRPQTSV = inf(TGLTSV / CARTSNBAV)
TGLRVO5 = is_positive(_2RV3 + _2RV4 + REVRCM + REVRF) * arr(TONEQUO * _2RV2 / TOTALQUO) + 1 - is_positive(_2RV3 + _2RV4 + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRTOT - TGLRVO
GLN3NET = arr(GLN3 * GL3 / REV3)
RPQPRR1 = inf(GLPRR1 / CARPENBAP1)
TGL3 = is_positive(REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TGLN3 / TOTALQUO) + 1 - is_positive(REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLRWB - TGLRWA - TGLRVG - TGL1 - TGL2
GLFC = is_positive(PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENFC / TOTALQUOHT) + 1 - is_positive(PENF1 + PENF2 + PENF3 + PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFV
RPQTSREMPV = inf(GLTSREMPV / REMPLANBV)
GLRVOTOT = GLRVO + GLRVO5 + GLRVO6 + GLRVO7
TRPQTSREMP1 = inf(TGLTSREMP1 / REMPLANBP1)
RPQRVO6 = inf(GLRVO6 / RENTAXNB6)
RPQPRRV = inf(GLPRRV / CARPENBAV)
GLTSC = is_positive(TSNN2TS1 + TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2TSC / TOTALQUOHT) + 1 - is_positive(TSNN2TS1 + TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSV
TGLPRRC = is_positive(TPRR21 + TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR2C / TOTALQUO) + 1 - is_positive(TPRR21 + TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRV
TGLF1 = is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * PENF1 / TOTALQUO) + 1 - is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFV - TGLFC
TGLF2 = is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * PENF2 / TOTALQUO) + 1 - is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFV - TGLFC - TGLF1
TEGLTSREMPV = GLTSREMPV * 1 - is_positive(INDTEFF) + TGLTSREMPV * is_positive(INDTEFF)
TRPQF2 = inf(TGLF2 / COTF2)
TGLTSREMP3 = is_positive(TTSNN2REMP4 + TTSNN2REMPC + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2REMP3 / TOTALQUO) + 1 - is_positive(TTSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPV - TGLTSREMPC - TGLTSREMP1 - TGLTSREMP2
TRPQRVO5 = inf(TGLRVO5 / RENTAXNB5)
TEGLTSC = GLTSC * 1 - is_positive(INDTEFF) + TGLTSC * is_positive(INDTEFF)
TRPQPRRV = inf(TGLPRRV / CARPENBAV)
TEGLPRRV = GLPRRV * 1 - is_positive(INDTEFF) + TGLPRRV * is_positive(INDTEFF)
TRPQ1 = inf(TGL1 / DIVGL1) + 0
GLF1 = is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENF1 / TOTALQUOHT) + 1 - is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFV - GLFC
TRPQFV = inf(TGLFV / COTFV)
IPQ02 = IN02
TERPQ1 = RPQ1 * 1 - is_positive(INDTEFF) + TRPQ1 * is_positive(INDTEFF)
GLPRR2 = is_positive(PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR22 / TOTALQUOHT) + 1 - is_positive(PRR23 + PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRV - GLPRRC - GLPRR1
TRPQRVO = inf(TGLRVO / RENTAXNB)
TEGL1 = GL1 * 1 - is_positive(INDTEFF) + TGL1 * is_positive(INDTEFF)
TEGL2 = GL2 * 1 - is_positive(INDTEFF) + TGL2 * is_positive(INDTEFF)
RPQF4M = inf(GLF4M / COTF4)
IMETRO32 = arr(IPQ02 * REVMETRO / RG)
TRPQTSC = inf(TGLTSC / CARTSNBAC)
RPQTSV = inf(GLTSV / CARTSNBAV)
RPQPRRC = inf(GLPRRC / CARPENBAC)
RPQ2 = inf(GL2 / DIVGL2) + 0
GLTSREMP1 = is_positive(TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2REMP1 / TOTALQUOHT) + 1 - is_positive(TSNN2REMP2 + TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPV - GLTSREMPC
IPRODOM2 = arr(IPQ02 * EXO1 * PRODOM / RG)
TRPQTSREMP2 = inf(TGLTSREMP2 / REMPLANBP2)
TGLPALIM1 = is_positive(TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPENALIM1 / TOTALQUO) + 1 - is_positive(TPENALIM2 + TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMV - TGLPALIMC
RPQ4 = inf(GL4 / DIVGL4) + 0
TEGLF4M = GLF4M * 1 - is_positive(INDTEFF) + TGLF4M * is_positive(INDTEFF)
TEGLFTOTM = TEGLFVM + TEGLFCM + TEGLF1M + TEGLF2M + TEGLF3M + TEGLF4M
GLN2NET = arr(GLN2 * GL2 / REV2)
TRPQTS1 = inf(TGLTS1 / CARTSNBAP1)
TRPQ2 = inf(TGL2 / DIVGL2) + 0
TERPQ2 = RPQ2 * 1 - is_positive(INDTEFF) + TRPQ2 * is_positive(INDTEFF)
TGLF3 = is_positive(PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * PENF3 / TOTALQUO) + 1 - is_positive(PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFV - TGLFC - TGLF1 - TGLF2
TRPQFC = inf(TGLFC / COTFC)
TEGL3 = GL3 * 1 - is_positive(INDTEFF) + TGL3 * is_positive(INDTEFF)
TEGLF1 = GLF1 * 1 - is_positive(INDTEFF) + TGLF1 * is_positive(INDTEFF)
TRPQPALIMC = inf(TGLPALIMC / PENSALNBC)
TRPQF1 = inf(TGLF1 / COTF1)
TEGLPRRC = GLPRRC * 1 - is_positive(INDTEFF) + TGLPRRC * is_positive(INDTEFF)
TRPQPRRC = inf(TGLPRRC / CARPENBAC)
TRPQTSREMP3 = inf(TGLTSREMP3 / REMPLANBP3)
TERPQRVO5 = RPQRVO5 * 1 - is_positive(INDTEFF) + TRPQRVO5 * is_positive(INDTEFF)
TEGLTSREMP1 = GLTSREMP1 * 1 - is_positive(INDTEFF) + TGLTSREMP1 * is_positive(INDTEFF)
GLPALIMC = is_positive(PENALIM1 + PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENALIMC / TOTALQUOHT) + 1 - is_positive(PENALIM1 + PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMV
RPQTSC = inf(GLTSC / CARTSNBAC)
TGLPALIM2 = is_positive(TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPENALIM2 / TOTALQUO) + 1 - is_positive(TPENALIM3 + TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMV - TGLPALIMC - TGLPALIM1
IPRODOM32 = arr(IPQ02 * PRODOM / RG)
GLPRR3 = is_positive(PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR23 / TOTALQUOHT) + 1 - is_positive(PRR24 + PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRV - GLPRRC - GLPRR1 - GLPRR2
TRPQF4M = inf(TGLF4M / COTF4)
TGL4 = is_positive(REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * REV4 / TOTALQUO) + 1 - is_positive(REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLRWB - TGLRWA - TGLRVG - TGL1 - TGL2 - TGL3
TGLTS2 = is_positive(TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2TS2 / TOTALQUO) + 1 - is_positive(TTSNN2TS3 + TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSV - TGLTSC - TGLTS1
TERPQTSREMPV = RPQTSREMPV * 1 - is_positive(INDTEFF) + TRPQTSREMPV * is_positive(INDTEFF)
TEGLRVO5 = GLRVO5 * 1 - is_positive(INDTEFF) + TGLRVO5 * is_positive(INDTEFF)
TGLTSREMP4 = is_positive(REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2REMP4 / TOTALQUO) + 1 - is_positive(REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPV - TGLTSREMPC - TGLTSREMP1 - TGLTSREMP2 - TGLTSREMP3
TGLRVO6 = is_positive(_2RV4 + REVRCM + REVRF) * arr(TONEQUO * _2RV3 / TOTALQUO) + 1 - is_positive(_2RV4 + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLPRRTOT - TGLTSREMPTOT - TGLRVO - TGLRVO5
TERPQTSREMPC = RPQTSREMPC * 1 - is_positive(INDTEFF) + TRPQTSREMPC * is_positive(INDTEFF)
GLTSREMP2 = is_positive(TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2REMP2 / TOTALQUOHT) + 1 - is_positive(TSNN2REMP3 + TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPV - GLTSREMPC - GLTSREMP1
GLTS1 = is_positive(TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2TS1 / TOTALQUOHT) + 1 - is_positive(TSNN2TS2 + TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSV - GLTSC
RPQPRR3 = inf(GLPRR3 / CARPENBAP3)
TRPQPALIM1 = inf(TGLPALIM1 / PENSALNBP1)
TERPQPALIMV = RPQPALIMV * 1 - is_positive(INDTEFF) + TRPQPALIMV * is_positive(INDTEFF)
ZIPQRWB5 = is_positive(TEGLRWA + TEGLRVG + sum([TEGL1M, TEGL2M, TEGL3M, TEGL4M]) + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQRWBM / TETONEQUOM1) + 1 - is_positive(TEGLRWA + TEGLRVG + sum([TEGL1M, TEGL2M, TEGL3M, TEGL4M]) + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT7
TEGLFC = GLFC * 1 - is_positive(INDTEFF) + TGLFC * is_positive(INDTEFF)
TRPQF3 = inf(TGLF3 / COTF3)
TRPQ3 = inf(TGL3 / DIVGL3) + 0
GLRCMDC = is_positive(_3RCM + _4RCM + _5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUOHT * _2RCM / TOTALQUOHT) + 1 - is_positive(_3RCM + _4RCM + _5RCM + _6RCM + _7RCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRTOT - GLRVOTOT
GLPALIM1 = is_positive(PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENALIM1 / TOTALQUOHT) + 1 - is_positive(PENALIM2 + PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMV - GLPALIMC
TRPQPALIM2 = inf(TGLPALIM2 / PENSALNBP2)
GLF2 = is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENF2 / TOTALQUOHT) + 1 - is_positive(PENF2 + PENF3 + PENF4 + REV1 + REV2 + REV3 + REV4 + REVF + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFV - GLFC - GLF1
TERPQTSV = RPQTSV * 1 - is_positive(INDTEFF) + TRPQTSV * is_positive(INDTEFF)
TEGLPALIM1 = GLPALIM1 * 1 - is_positive(INDTEFF) + TGLPALIM1 * is_positive(INDTEFF)
GLTSREMP3 = is_positive(TSNN2REMP4 + TSNN2REMPC + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2REMP3 / TOTALQUOHT) + 1 - is_positive(TSNN2REMP4 + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPV - GLTSREMPC - GLTSREMP1 - GLTSREMP2
IPQRWB5 = ZIPQRWB5 * CODNWB
TERPQTSC = RPQTSC * 1 - is_positive(INDTEFF) + TRPQTSC * is_positive(INDTEFF)
TRPQTSREMP4 = inf(TGLTSREMP4 / REMPLANBP4)
RPQFC = inf(GLFC / COTFC)
RPQF1 = inf(GLF1 / COTF1)
RPQPRR2 = inf(GLPRR2 / CARPENBAP2)
IMETRO2 = arr(IPQ02 * EXO1 * REVMETRO / RG)
TGLPRR1 = is_positive(TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR21 / TOTALQUO) + 1 - is_positive(TPRR22 + TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRV - TGLPRRC
TRPQ4 = inf(TGL4 / DIVGL4) + 0
RPQTSREMP2 = inf(GLTSREMP2 / REMPLANBP2)
TERPQPRRV = RPQPRRV * 1 - is_positive(INDTEFF) + TRPQPRRV * is_positive(INDTEFF)
TEGLTS1 = GLTS1 * 1 - is_positive(INDTEFF) + TGLTS1 * is_positive(INDTEFF)
RPQTSREMP1 = inf(GLTSREMP1 / REMPLANBP1)
TERPQFV = RPQFV * 1 - is_positive(INDTEFF) + TRPQFV * is_positive(INDTEFF)
TERPQTSREMP2 = RPQTSREMP2 * 1 - is_positive(INDTEFF) + TRPQTSREMP2 * is_positive(INDTEFF)
IPROGUY32 = arr(IPQ02 * PROGUY / RG)
TERPQTSREMP1 = RPQTSREMP1 * 1 - is_positive(INDTEFF) + TRPQTSREMP1 * is_positive(INDTEFF)
RPQPALIMC = inf(GLPALIMC / PENSALNBC)
RPQPALIM1 = inf(GLPALIM1 / PENSALNBP1)
GLRCMFU = is_positive(_4RCM + _5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUOHT * _3RCM / TOTALQUOHT) + 1 - is_positive(_4RCM + _5RCM + _6RCM + _7RCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRTOT - GLRVOTOT - GLRCMDC
TRPQPRR1 = inf(TGLPRR1 / CARPENBAP1)
ZIPQRWA5 = is_positive(TEGLRVG + sum([TEGL1M, TEGL2M, TEGL3M, TEGL4M]) + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQRWAM / TETONEQUOM1) + 1 - is_positive(TEGLRVG + sum([TEGL1M, TEGL2M, TEGL3M, TEGL4M]) + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT7 - ZIPQRWB5
GLTS2 = is_positive(TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2TS2 / TOTALQUOHT) + 1 - is_positive(TSNN2TS3 + TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSV - GLTSC - GLTS1
TRPQRVO6 = inf(TGLRVO6 / RENTAXNB6)
IPROGUY2 = arr(IPQ02 * EXO1 * PROGUY / RG)
TGLTS3 = is_positive(TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2TS3 / TOTALQUO) + 1 - is_positive(TTSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSV - TGLTSC - TGLTS1 - TGLTS2
RPQF2 = inf(GLF2 / COTF2)
TERPQRVO = RPQRVO * 1 - is_positive(INDTEFF) + TRPQRVO * is_positive(INDTEFF)
TEGL4 = GL4 * 1 - is_positive(INDTEFF) + TGL4 * is_positive(INDTEFF)
TGLPALIM3 = is_positive(TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPENALIM3 / TOTALQUO) + 1 - is_positive(TPENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMV - TGLPALIMC - TGLPALIM1 - TGLPALIM2
RPQTS2 = inf(GLTS2 / CARTSNBAP2)
TGLF4 = is_positive(REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * PENF4 / TOTALQUO) + 1 - is_positive(REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFV - TGLFC - TGLF1 - TGLF2 - TGLF3
TEGLF2 = GLF2 * 1 - is_positive(INDTEFF) + TGLF2 * is_positive(INDTEFF)
GLPALIM2 = is_positive(PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENALIM2 / TOTALQUOHT) + 1 - is_positive(PENALIM3 + PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMV - GLPALIMC - GLPALIM1
GLPALIM3 = is_positive(PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENALIM3 / TOTALQUOHT) + 1 - is_positive(PENALIM4 + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMV - GLPALIMC - GLPALIM1 - GLPALIM2
RPQRCMFU = inf(GLRCMFU / REVPEANB)
TERPQF1 = RPQF1 * 1 - is_positive(INDTEFF) + TRPQF1 * is_positive(INDTEFF)
TRPQF4 = inf(TGLF4 / COTF4)
TERPQ4 = RPQ4 * 1 - is_positive(INDTEFF) + TRPQ4 * is_positive(INDTEFF)
TERPQF4M = RPQF4M * 1 - is_positive(INDTEFF) + TRPQF4M * is_positive(INDTEFF)
TERPQPALIM1 = RPQPALIM1 * 1 - is_positive(INDTEFF) + TRPQPALIM1 * is_positive(INDTEFF)
TEGLPRR1 = GLPRR1 * 1 - is_positive(INDTEFF) + TGLPRR1 * is_positive(INDTEFF)
TERPQPRRC = RPQPRRC * 1 - is_positive(INDTEFF) + TRPQPRRC * is_positive(INDTEFF)
TEGLPALIMC = GLPALIMC * 1 - is_positive(INDTEFF) + TGLPALIMC * is_positive(INDTEFF)
GLPRR4 = is_positive(PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR24 / TOTALQUOHT) + 1 - is_positive(PRR2ZV + PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRV - GLPRRC - GLPRR1 - GLPRR2 - GLPRR3
GLTS3 = is_positive(TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2TS3 / TOTALQUOHT) + 1 - is_positive(TSNN2TS4 + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSV - GLTSC - GLTS1 - GLTS2
GLRCMCH = is_positive(_5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUOHT * _4RCM / TOTALQUOHT) + 1 - is_positive(_5RCM + _6RCM + _7RCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRTOT - GLRVOTOT - GLRCMDC - GLRCMFU
TRPQTS3 = inf(TGLTS3 / CARTSNBAP3)
TEGLPALIM2 = GLPALIM2 * 1 - is_positive(INDTEFF) + TGLPALIM2 * is_positive(INDTEFF)
TEGLTSREMP3 = GLTSREMP3 * 1 - is_positive(INDTEFF) + TGLTSREMP3 * is_positive(INDTEFF)
TERPQ3 = RPQ3 * 1 - is_positive(INDTEFF) + TRPQ3 * is_positive(INDTEFF)
TGLTS4 = is_positive(REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TTSNN2TS4 / TOTALQUO) + 1 - is_positive(REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSV - TGLTSC - TGLTS1 - TGLTS2 - TGLTS3
GLPALIM4 = is_positive(REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENALIM4 / TOTALQUOHT) + 1 - is_positive(REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMV - GLPALIMC - GLPALIM1 - GLPALIM2 - GLPALIM3
TRPQTS2 = inf(TGLTS2 / CARTSNBAP2)
TEGLRVO6 = GLRVO6 * 1 - is_positive(INDTEFF) + TGLRVO6 * is_positive(INDTEFF)
TERPQPALIMC = RPQPALIMC * 1 - is_positive(INDTEFF) + TRPQPALIMC * is_positive(INDTEFF)
TEGLTS3 = GLTS3 * 1 - is_positive(INDTEFF) + TGLTS3 * is_positive(INDTEFF)
ZIPQRVG5 = is_positive(sum([TEGL1M, TEGL2M, TEGL3M, TEGL4M]) + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQRVGM / TETONEQUOM1) + 1 - is_positive(sum([TEGL1M, TEGL2M, TEGL3M, TEGL4M]) + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT7 - ZIPQRWB5 - ZIPQRWA5
RPQRCMDC = inf(GLRCMDC / REVACTNB)
TGLRVO7 = is_positive(REVRCM + REVRF) * arr(TONEQUO * _2RV4 / TOTALQUO) + 1 - is_positive(REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRTOT - TGLRVO - TGLRVO5 - TGLRVO6
TERPQRVO6 = RPQRVO6 * 1 - is_positive(INDTEFF) + TRPQRVO6 * is_positive(INDTEFF)
IPQRWA5 = ZIPQRWA5 * CODNWA
RPQTSREMP3 = inf(GLTSREMP3 / REMPLANBP3)
RPQPALIM2 = inf(GLPALIM2 / PENSALNBP2)
TEGLTSREMP2 = GLTSREMP2 * 1 - is_positive(INDTEFF) + TGLTSREMP2 * is_positive(INDTEFF)
RPQTS1 = inf(GLTS1 / CARTSNBAP1)
TEGLTOT = TEGLRVG + TEGL1 + TEGL2 + TEGL3 + TEGL4
TEGLPALIM3 = GLPALIM3 * 1 - is_positive(INDTEFF) + TGLPALIM3 * is_positive(INDTEFF)
TERPQPRR1 = RPQPRR1 * 1 - is_positive(INDTEFF) + TRPQPRR1 * is_positive(INDTEFF)
TRPQPALIM3 = inf(TGLPALIM3 / PENSALNBP3)
RPQPRR4 = inf(GLPRR4 / CARPENBAP4)
GLF3 = is_positive(PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENF3 / TOTALQUOHT) + 1 - is_positive(PENF4 + REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFV - GLFC - GLF1 - GLF2
TERPQPALIM2 = RPQPALIM2 * 1 - is_positive(INDTEFF) + TRPQPALIM2 * is_positive(INDTEFF)
GLTSREMP4 = is_positive(REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2REMP4 / TOTALQUOHT) + 1 - is_positive(REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPV - GLTSREMPC - GLTSREMP1 - GLTSREMP2 - GLTSREMP3
TERPQFC = RPQFC * 1 - is_positive(INDTEFF) + TRPQFC * is_positive(INDTEFF)
TRPQTS4 = inf(TGLTS4 / CARTSNBAP4)
GLRCMTS = is_positive(_6RCM + _7RCM + REVRF) * arr(TONEQUOHT * _5RCM / TOTALQUOHT) + 1 - is_positive(_6RCM + _7RCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRTOT - GLRVOTOT - GLRCMDC - GLRCMFU - GLRCMCH
TEGLTS2 = GLTS2 * 1 - is_positive(INDTEFF) + TGLTS2 * is_positive(INDTEFF)
TGLPRR2 = is_positive(TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR22 / TOTALQUO) + 1 - is_positive(TPRR23 + TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRV - TGLPRRC - TGLPRR1
TEGLF3 = GLF3 * 1 - is_positive(INDTEFF) + TGLF3 * is_positive(INDTEFF)
TERPQTS1 = RPQTS1 * 1 - is_positive(INDTEFF) + TRPQTS1 * is_positive(INDTEFF)
GLPRRZV = is_positive(PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR2ZV / TOTALQUOHT) + 1 - is_positive(PRR2ZC + PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRV - GLPRRC - GLPRR1 - GLPRR2 - GLPRR3 - GLPRR4
RPQTS3 = inf(GLTS3 / CARTSNBAP3)
GLTS4 = is_positive(REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * TSNN2TS4 / TOTALQUOHT) + 1 - is_positive(REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSV - GLTSC - GLTS1 - GLTS2 - GLTS3
TERPQTS2 = RPQTS2 * 1 - is_positive(INDTEFF) + TRPQTS2 * is_positive(INDTEFF)
RPQPALIM3 = inf(GLPALIM3 / PENSALNBP3)
GLRCMGO = is_positive(_7RCM + REVRF) * arr(TONEQUOHT * _6RCM / TOTALQUOHT) + 1 - is_positive(_7RCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRTOT - GLRVOTOT - GLRCMDC - GLRCMFU - GLRCMCH - GLRCMTS
RPQRCMCH = inf(GLRCMCH / PROVIENB)
TGLPALIM4 = is_positive(REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPENALIM4 / TOTALQUO) + 1 - is_positive(REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMV - TGLPALIMC - TGLPALIM1 - TGLPALIM2 - TGLPALIM3
TERPQF2 = RPQF2 * 1 - is_positive(INDTEFF) + TRPQF2 * is_positive(INDTEFF)
TGLRVOTOT = TGLRVO + TGLRVO5 + TGLRVO6 + TGLRVO7
RPQPALIM4 = inf(GLPALIM4 / PENSALNBP4)
TERPQTSREMP3 = RPQTSREMP3 * 1 - is_positive(INDTEFF) + TRPQTSREMP3 * is_positive(INDTEFF)
ZIPQ45 = is_positive(TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQ4M / TETONEQUOM1) + 1 - is_positive(TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT7 - ZIPQRWB5 - ZIPQRWA5 - ZIPQRVG5 - sum([ZIPQ15, ZIPQ25, ZIPQ35])
TEGLPALIM4 = GLPALIM4 * 1 - is_positive(INDTEFF) + TGLPALIM4 * is_positive(INDTEFF)
RPQTSREMP4 = inf(GLTSREMP4 / REMPLANBP4)
TRPQRVO7 = inf(TGLRVO7 / RENTAXNB7)
ZIPQ5TOT = sum([ZIPQ15, ZIPQ25, ZIPQ35, ZIPQ45]) + ZIPQRVG5 + ZIPQRWB5 + ZIPQRWA5
RPQRCMGO = inf(GLRCMGO / RESTUCNB)
GLRCMTR = is_positive(REVRF) * arr(TONEQUOHT * _7RCM / TOTALQUOHT) + 1 - is_positive(REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRTOT - GLRVOTOT - GLRCMDC - GLRCMFU - GLRCMCH - GLRCMGO - GLRCMTS
ZIPQ35 = is_positive(TEGL4M + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQ3M / TETONEQUOM1) + 1 - is_positive(TEGL4M + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT7 - ZIPQRWB5 - ZIPQRWA5 - ZIPQRVG5 - sum([ZIPQ15, ZIPQ25])
RPQF3 = inf(GLF3 / COTF3)
IPQ45 = ZIPQ45 * 4
TEGLRVO7 = GLRVO7 * 1 - is_positive(INDTEFF) + TGLRVO7 * is_positive(INDTEFF)
ZIPQPALIMV5 = is_positive(sum([TEGLPALIMCM, TEGLPALIM1M, TEGLPALIM2M, TEGLPALIM3M, TEGLPALIM4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPALIMVM / TETONEQUOM1) + 1 - is_positive(sum([TEGLPALIMCM, TEGLPALIM1M, TEGLPALIM2M, TEGLPALIM3M, TEGLPALIM4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT
ZIPQ15 = is_positive(sum([TEGL2M, TEGL3M, TEGL4M]) + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQ1M / TETONEQUOM1) + 1 - is_positive(sum([TEGL2M, TEGL3M, TEGL4M]) + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT7 - ZIPQRWB5 - ZIPQRWA5 - ZIPQRVG5
TERPQTS3 = RPQTS3 * 1 - is_positive(INDTEFF) + TRPQTS3 * is_positive(INDTEFF)
RPQTS4 = inf(GLTS4 / CARTSNBAP4)
TGLRCMDC = is_positive(_3RCM + _4RCM + _5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUO * _2RCM / TOTALQUO) + 1 - is_positive(_3RCM + _4RCM + _5RCM + _6RCM + _7RCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRTOT - TGLRVOTOT
TEGLPALIMTOT = TEGLPALIMV + TEGLPALIMC + TEGLPALIM1 + TEGLPALIM2 + TEGLPALIM3 + TEGLPALIM4
RPQRCMTR = inf(GLRCMTR / INTERENB)
TERPQTSREMP4 = RPQTSREMP4 * 1 - is_positive(INDTEFF) + TRPQTSREMP4 * is_positive(INDTEFF)
ZIPQPALIM35 = is_positive(TEGLPALIM4M + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPALIM3M / TETONEQUOM1) + 1 - is_positive(TEGLPALIM4M + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - sum([ZIPQPALIMV5, ZIPQPALIMC5, ZIPQPALIM15, ZIPQPALIM25])
ZIPQF35 = is_positive(TEGLF4M + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQF3M / TETONEQUOM1) + 1 - is_positive(TEGLF4M + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - sum([ZIPQF15, ZIPQF25, ZIPQFV5, ZIPQFC5])
ZIPQF15 = is_positive(sum([TEGLF2M, TEGLF3M, TEGLF4M]) + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQF1M / TETONEQUOM1) + 1 - is_positive(sum([TEGLF2M, TEGLF3M, TEGLF4M]) + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - sum([ZIPQFV5, ZIPQFC5])
GLF4 = is_positive(REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PENF4 / TOTALQUOHT) + 1 - is_positive(REVALIM + REVTS + REVTSREMP + REVPRR + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFV - GLFC - GLF1 - GLF2 - GLF3
TEGLTSREMP4 = GLTSREMP4 * 1 - is_positive(INDTEFF) + TGLTSREMP4 * is_positive(INDTEFF)
IPQRVG5 = ZIPQRVG5 * CODNVG
TRPQRCMDC = inf(TGLRCMDC / REVACTNB)
RPQPRRZV = inf(GLPRRZV / CODNAZ)
IPQ35 = ZIPQ35 * 3
TRPQPALIM4 = inf(TGLPALIM4 / PENSALNBP4)
ZIPQPALIMC5 = is_positive(sum([TEGLPALIM1M, TEGLPALIM2M, TEGLPALIM3M, TEGLPALIM4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPALIMCM / TETONEQUOM1) + 1 - is_positive(sum([TEGLPALIM1M, TEGLPALIM2M, TEGLPALIM3M, TEGLPALIM4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIMV5
TEGLRVOTOT = TEGLRVO + TEGLRVO5 + TEGLRVO6 + TEGLRVO7
ZIPQPALIM15 = is_positive(sum([TEGLPALIM2M, TEGLPALIM3M, TEGLPALIM4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPALIM1M / TETONEQUOM1) + 1 - is_positive(sum([TEGLPALIM2M, TEGLPALIM3M, TEGLPALIM4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - sum([ZIPQPALIMV5, ZIPQPALIMC5])
TEGLTS4 = GLTS4 * 1 - is_positive(INDTEFF) + TGLTS4 * is_positive(INDTEFF)
TRPQPRR2 = inf(TGLPRR2 / CARPENBAP2)
ZIPQPALIM45 = is_positive(TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPALIM4M / TETONEQUOM1) + 1 - is_positive(TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - sum([ZIPQPALIMV5, ZIPQPALIMC5, ZIPQPALIM15, ZIPQPALIM25, ZIPQPALIM35])
IPQF35 = ZIPQF35 * COTF3
TERPQRCMDC = RPQRCMDC * 1 - is_positive(INDTEFF) + TRPQRCMDC * is_positive(INDTEFF)
RPQRCMTS = inf(GLRCMTS / DISQUONB)
TGLRCMFU = is_positive(_4RCM + _5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUO * _3RCM / TOTALQUO) + 1 - is_positive(_4RCM + _5RCM + _6RCM + _7RCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRTOT - TGLRVOTOT - TGLRCMDC
IPQ15 = ZIPQ15 * 1
TEGLF4 = GLF4 * 1 - is_positive(INDTEFF) + TGLF4 * is_positive(INDTEFF)
RPQF4 = inf(GLF4 / COTF4)
TERPQPALIM3 = RPQPALIM3 * 1 - is_positive(INDTEFF) + TRPQPALIM3 * is_positive(INDTEFF)
IPQPALIM35 = ZIPQPALIM35 * PENSALNBP3
IPQPALIMV5 = ZIPQPALIMV5 * PENSALNBV
GLPRRZC = is_positive(PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR2ZC / TOTALQUOHT) + 1 - is_positive(PRR2Z1 + PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRV - GLPRRC - GLPRR1 - GLPRR2 - GLPRR3 - GLPRR4 - GLPRRZV
ZIPQF25 = is_positive(sum([TEGLF3M, TEGLF4M]) + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQF2M / TETONEQUOM1) + 1 - is_positive(sum([TEGLF3M, TEGLF4M]) + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - sum([ZIPQF15, ZIPQFV5, ZIPQFC5])
TGLPRR3 = is_positive(TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR23 / TOTALQUO) + 1 - is_positive(TPRR24 + TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRV - TGLPRRC - TGLPRR1 - TGLPRR2
IPQF25 = ZIPQF25 * COTF2
IPQPALIMC5 = ZIPQPALIMC5 * PENSALNBC
TEGLPRR2 = GLPRR2 * 1 - is_positive(INDTEFF) + TGLPRR2 * is_positive(INDTEFF)
TRPQRCMFU = inf(TGLRCMFU / REVPEANB)
TERPQF4 = RPQF4 * 1 - is_positive(INDTEFF) + TRPQF4 * is_positive(INDTEFF)
TEGLTSREMPTOT = TEGLTSREMPV + TEGLTSREMPC + TEGLTSREMP1 + TEGLTSREMP2 + TEGLTSREMP3 + TEGLTSREMP4
ZIPQF45 = is_positive(TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQF4M / TETONEQUOM1) + 1 - is_positive(TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - sum([ZIPQFV5, ZIPQFC5, ZIPQF15, ZIPQF25, ZIPQF35])
TERPQPALIM4 = RPQPALIM4 * 1 - is_positive(INDTEFF) + TRPQPALIM4 * is_positive(INDTEFF)
TERPQTS4 = RPQTS4 * 1 - is_positive(INDTEFF) + TRPQTS4 * is_positive(INDTEFF)
TEGLTSTOT = TEGLTSV + TEGLTSC + TEGLTS1 + TEGLTS2 + TEGLTS3 + TEGLTS4
TEGLRCMDC = GLRCMDC * 1 - is_positive(INDTEFF) + TGLRCMDC * is_positive(INDTEFF)
ZIPQFV5 = is_positive(sum([TEGLFCM, TEGLF1M, TEGLF2M, TEGLF3M, TEGLF4M]) + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQFVM / TETONEQUOM1) + 1 - is_positive(sum([TEGLFCM, TEGLF1M, TEGLF2M, TEGLF3M, TEGLF4M]) + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT
GLRCMTOT = GLRCMDC + GLRCMFU + GLRCMCH + GLRCMGO + GLRCMTR + GLRCMTS
GLRF1 = is_positive(_3REVF) * arr(TONEQUOHT * _2REVF / TOTALQUOHT) + 1 - is_positive(_3REVF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRTOT - GLRVOTOT - GLRCMTOT
IPQPALIM45 = ZIPQPALIM45 * PENSALNBP4
ZIPQRCMDC5 = is_positive(TEGLRCMFUM + TEGLRCMCHM + TEGLRCMTSM + TEGLRCMGOM + TEGLRCMTRM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQRCMDCM / TETONEQUOM1) + 1 - is_positive(TEGLRCMFUM + TEGLRCMCHM + TEGLRCMTSM + TEGLRCMGOM + TEGLRCMTRM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT
TERPQRVO7 = RPQRVO7 * 1 - is_positive(INDTEFF) + TRPQRVO7 * is_positive(INDTEFF)
IPQF15 = ZIPQF15 * COTF1
ZIPQPALIM25 = is_positive(sum([TEGLPALIM3M, TEGLPALIM4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPALIM2M / TETONEQUOM1) + 1 - is_positive(sum([TEGLPALIM3M, TEGLPALIM4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - sum([ZIPQPALIM15, ZIPQPALIMV5, ZIPQPALIMC5])
ZIPQ25 = is_positive(sum([TEGL3M, TEGL4M]) + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQ2M / TETONEQUOM1) + 1 - is_positive(sum([TEGL3M, TEGL4M]) + TEGLFTOTM + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT7 - ZIPQRWB5 - ZIPQRWA5 - ZIPQRVG5 - ZIPQ15
TERPQF3 = RPQF3 * 1 - is_positive(INDTEFF) + TRPQF3 * is_positive(INDTEFF)
TEGLRCMFU = GLRCMFU * 1 - is_positive(INDTEFF) + TGLRCMFU * is_positive(INDTEFF)
GLPRRZ1 = is_positive(PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR2Z1 / TOTALQUOHT) + 1 - is_positive(PRR2Z2 + PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRV - GLPRRC - GLPRR1 - GLPRR2 - GLPRR3 - GLPRR4 - GLPRRZV - GLPRRZC
RPQPRRZC = inf(GLPRRZC / CODNBZ)
IPQPALIM25 = ZIPQPALIM25 * PENSALNBP2
TERPQPRR2 = RPQPRR2 * 1 - is_positive(INDTEFF) + TRPQPRR2 * is_positive(INDTEFF)
IPQF45 = ZIPQF45 * COTF4
TGLRCMCH = is_positive(_5RCM + _6RCM + _7RCM + REVRF) * arr(TONEQUO * _4RCM / TOTALQUO) + 1 - is_positive(_5RCM + _6RCM + _7RCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRTOT - TGLRVOTOT - TGLRCMDC - TGLRCMFU
ZIPQFC5 = is_positive(sum([TEGLF1M, TEGLF2M, TEGLF3M, TEGLF4M]) + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQFCM / TETONEQUOM1) + 1 - is_positive(sum([TEGLFCM, TEGLF1M, TEGLF2M, TEGLF3M, TEGLF4M]) + TEGLPALIMTOTM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRCMTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQFV5
TERPQRCMFU = RPQRCMFU * 1 - is_positive(INDTEFF) + TRPQRCMFU * is_positive(INDTEFF)
RPQRF1 = inf(GLRF1 / FONCINB)
TEGLFTOT = TEGLFV + TEGLFC + TEGLF1 + TEGLF2 + TEGLF3 + TEGLF4
IPQPALIM15 = ZIPQPALIM15 * PENSALNBP1
TONEQUO1 = sum([RPQ1, RPQ2, RPQ3, RPQ4]) + sum([RPQFV, RPQFC, RPQF1, RPQF2, RPQF3, RPQF4]) + sum([RPQPALIMV, RPQPALIMC, RPQPALIM1, RPQPALIM2, RPQPALIM3, RPQPALIM4]) + sum([RPQRF1, RPQRF2]) + RPQRCMDC + RPQRCMFU + RPQRCMCH + RPQRCMTR + RPQRCMTS + RPQRCMGO + sum([RPQPRRV, RPQPRRC, RPQPRR1, RPQPRR2, RPQPRR3, RPQPRR4]) + sum([RPQPRRZV, RPQPRRZC, RPQPRRZ1, RPQPRRZ2, RPQPRRZ3, RPQPRRZ4]) + RPQRVO + RPQRVO5 + RPQRVO6 + RPQRVO7 + sum([RPQTSV, RPQTSC, RPQTS1, RPQTS2, RPQTS3, RPQTS4]) + sum([RPQTSREMPV, RPQTSREMPC, RPQTSREMP1, RPQTSREMP2, RPQTSREMP3, RPQTSREMP4]) + RPQRVG + RPQRWB * null(1 - FLAG_EXIT) + RPQRWB + RPQRWA * null(2 - FLAG_EXIT)
TEGLPRR3 = GLPRR3 * 1 - is_positive(INDTEFF) + TGLPRR3 * is_positive(INDTEFF)
ZIPQRCMFU5 = is_positive(TEGLRCMCHM + TEGLRCMTSM + TEGLRCMGOM + TEGLRCMTRM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQRCMFUM / TETONEQUOM1) + 1 - is_positive(TEGLRCMCHM + TEGLRCMTSM + TEGLRCMGOM + TEGLRCMTRM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCMDC5
TRPQPRR3 = inf(TGLPRR3 / CARPENBAP3)
GLPRRZ2 = is_positive(PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR2Z2 / TOTALQUOHT) + 1 - is_positive(PRR2Z3 + PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRV - GLPRRC - GLPRR1 - GLPRR2 - GLPRR3 - GLPRR4 - GLPRRZV - GLPRRZC - GLPRRZ1
IPQRCMDC5 = ZIPQRCMDC5 * REVACTNB
TEGLRCMCH = GLRCMCH * 1 - is_positive(INDTEFF) + TGLRCMCH * is_positive(INDTEFF)
GLPRRZ3 = is_positive(PRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR2Z3 / TOTALQUOHT) + 1 - is_positive(PRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRV - GLPRRC - GLPRR1 - GLPRR2 - GLPRR3 - GLPRR4 - GLPRRZV - GLPRRZC - GLPRRZ1 - GLPRRZ2
GLRF2 = TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRTOT - GLRVOTOT - GLRCMTOT - GLRF1
TGLPRR4 = is_positive(TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR24 / TOTALQUO) + 1 - is_positive(TPRR2ZV + TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRV - TGLPRRC - TGLPRR1 - TGLPRR2 - TGLPRR3
LIMIT9 = 25000 + max(0, arr(max(0, RI1 + TONEQUO1) * 10 / 100)) * 1 - is_positive(VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS) + max(0, arr(max(0, VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS + TONEQUOM1) * 10 / 100)) * is_positive(VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS)
TRPQRCMCH = inf(TGLRCMCH / PROVIENB)
TERPQPRR3 = RPQPRR3 * 1 - is_positive(INDTEFF) + TRPQPRR3 * is_positive(INDTEFF)
IPQRCMFU5 = ZIPQRCMFU5 * REVPEANB
RPQPRRZ3 = inf(GLPRRZ3 / CODNEZ)
IPQFC5 = ZIPQFC5 * COTFC
IPQ25 = ZIPQ25 * 2
ZIPQRCMCH5 = is_positive(TEGLRCMTSM + TEGLRCMGOM + TEGLRCMTRM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQRCMCHM / TETONEQUOM1) + 1 - is_positive(TEGLRCMTSM + TEGLRCMGOM + TEGLRCMTRM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCMDC5 - ZIPQRCMFU5
IPQFV5 = ZIPQFV5 * COTFV
LIMIT12 = 18000 + max(0, arr(max(0, RI1 + TONEQUO1) * 4 / 100)) * 1 - is_positive(VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS) + max(0, arr(max(0, VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS + TONEQUOM1) * 4 / 100)) * is_positive(VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS)
RPQPRRZ1 = inf(GLPRRZ1 / CODNCZ)
GLRFTOT = GLRF1 + GLRF2
TERPQRCMCH = RPQRCMCH * 1 - is_positive(INDTEFF) + TRPQRCMCH * is_positive(INDTEFF)
TRPQPRR4 = inf(TGLPRR4 / CARPENBAP4)
LIMIT10 = 20000 + max(0, arr(max(0, RI1 + TONEQUO1) * 8 / 100)) * 1 - is_positive(VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS) + max(0, arr(max(0, VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS + TONEQUOM1) * 8 / 100)) * is_positive(VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS)
TGLRCMTS = is_positive(_6RCM + _7RCM + REVRF) * arr(TONEQUO * _5RCM / TOTALQUO) + 1 - is_positive(_6RCM + _7RCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRTOT - TGLRVOTOT - TGLRCMDC - TGLRCMFU - TGLRCMCH
GLPRRZ4 = is_positive(REVRVO + REVRCM + REVRF) * arr(TONEQUOHT * PRR2Z4 / TOTALQUOHT) + 1 - is_positive(REVRVO + REVRCM + REVRF) * TONEQUOHT - GLTOT - GLFTOT - GLPALIMTOT - GLTSTOT - GLTSREMPTOT - GLPRRV - GLPRRC - GLPRR1 - GLPRR2 - GLPRR3 - GLPRR4 - GLPRRZV - GLPRRZC - GLPRRZ1 - GLPRRZ2 - GLPRRZ3
RPQRF2 = inf(GLRF2 / REAMORNB)
LIMIT11 = 18000 + max(0, arr(max(0, RI1 + TONEQUO1) * 6 / 100)) * 1 - is_positive(VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS) + max(0, arr(max(0, VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS + TONEQUOM1) * 6 / 100)) * is_positive(VARRMOND * is_positive(ART1731BIS) + RMOND * 1 - ART1731BIS)
RPQPRRZ4 = inf(GLPRRZ4 / CODNFZ)
IPQRCMCH5 = ZIPQRCMCH5 * PROVIENB
TEGLPRR4 = GLPRR4 * 1 - is_positive(INDTEFF) + TGLPRR4 * is_positive(INDTEFF)
TRPQRCMTS = inf(TGLRCMTS / DISQUONB)
AVPLAF12 = max(0, AUBAINE13A + AUBAINE13B + AUBAINE12 - AVPLAF13 - LIMIT12) * is_positive(V_DIFTEOREEL)
RPQPRRZ2 = inf(GLPRRZ2 / CODNDZ)
TGLPRRZV = is_positive(TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR2ZV / TOTALQUO) + 1 - is_positive(TPRR2ZC + TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRV - TGLPRRC - TGLPRR1 - TGLPRR2 - TGLPRR3 - TGLPRR4
TRPQPRRZV = inf(TGLPRRZV / CODNAZ)
ZIPQRCMTR5 = is_positive(TEGLRCMGOM + TEGLRCMTSM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQRCMTRM / TETONEQUOM1) + 1 - is_positive(TEGLRCMGOM + TEGLRCMTSM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCMDC5 - ZIPQRCMFU5 - ZIPQRCMCH5
TEGLRCMTS = GLRCMTS * 1 - is_positive(INDTEFF) + TGLRCMTS * is_positive(INDTEFF)
TEGLPRRTOT = TEGLPRRV + TEGLPRRC + TEGLPRR1 + TEGLPRR2 + TEGLPRR3 + TEGLPRR4
TGLRCMGO = is_positive(_7RCM + REVRF) * arr(TONEQUO * _6RCM / TOTALQUO) + 1 - is_positive(_7RCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRTOT - TGLRVOTOT - TGLRCMDC - TGLRCMFU - TGLRCMCH - TGLRCMTS
TGLPRRZC = is_positive(TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR2ZC / TOTALQUO) + 1 - is_positive(TPRR2Z1 + TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRV - TGLPRRC - TGLPRR1 - TGLPRR2 - TGLPRR3 - TGLPRR4 - TGLPRRZV
TERPQPRR4 = RPQPRR4 * 1 - is_positive(INDTEFF) + TRPQPRR4 * is_positive(INDTEFF)
TRPQRCMGO = inf(TGLRCMGO / RESTUCNB)
TEGLPRRZV = GLPRRZV * 1 - is_positive(INDTEFF) + TGLPRRZV * is_positive(INDTEFF)
TGLRCMTR = is_positive(REVRF) * arr(TONEQUO * _7RCM / TOTALQUO) + 1 - is_positive(REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRTOT - TGLRVOTOT - TGLRCMDC - TGLRCMFU - TGLRCMCH - TGLRCMGO - TGLRCMTS
TGLRCMTOT = TGLRCMDC + TGLRCMFU + TGLRCMCH + TGLRCMGO + TGLRCMTR + TGLRCMTS
TEGLRCMGO = GLRCMGO * 1 - is_positive(INDTEFF) + TGLRCMGO * is_positive(INDTEFF)
AVPLAF11 = max(0, AUBAINE13A + AUBAINE13B + AUBAINE12 + AUBAINE11 - AVPLAF13 - AVPLAF12 - LIMIT11) * is_positive(V_DIFTEOREEL)
IPQRCMTR5 = ZIPQRCMTR5 * INTERENB
TRPQPRRZC = inf(TGLPRRZC / CODNBZ)
TEGLRCMTR = GLRCMTR * 1 - is_positive(INDTEFF) + TGLRCMTR * is_positive(INDTEFF)
TERPQRCMTS = RPQRCMTS * 1 - is_positive(INDTEFF) + TRPQRCMTS * is_positive(INDTEFF)
TGLPRRZ1 = is_positive(TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR2Z1 / TOTALQUO) + 1 - is_positive(TPRR2Z2 + TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRV - TGLPRRC - TGLPRR1 - TGLPRR2 - TGLPRR3 - TGLPRR4 - TGLPRRZV - TGLPRRZC
TERPQRCMGO = RPQRCMGO * 1 - is_positive(INDTEFF) + TRPQRCMGO * is_positive(INDTEFF)
TGLRF1 = is_positive(_3REVF) * arr(TONEQUO * _2REVF / TOTALQUO) + 1 - is_positive(_3REVF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRTOT - TGLRVOTOT - TGLRCMTOT
ZIPQRCMGO5 = is_positive(TEGLRCMTSM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQRCMGOM / TETONEQUOM1) + 1 - is_positive(TEGLRCMTSM + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCMDC5 - ZIPQRCMFU5 - ZIPQRCMCH5 - ZIPQRCMTR5
TRPQRCMTR = inf(TGLRCMTR / INTERENB)
TEGLRCMTOT = TEGLRCMDC + TEGLRCMFU + TEGLRCMCH + TEGLRCMGO + TEGLRCMTR + TEGLRCMTS
TEGLPRRZC = GLPRRZC * 1 - is_positive(INDTEFF) + TGLPRRZC * is_positive(INDTEFF)
ZIPQRCMTS5 = is_positive(TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQRCMTSM / TETONEQUOM1) + 1 - is_positive(TEGLTSTOTM + TEGLTSREMPTOTM + TEGLPRRTOTM + TEGLPRRZTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCMDC5 - ZIPQRCMFU5 - ZIPQRCMCH5 - ZIPQRCMTR5 - ZIPQRCMGO5
TERPQPRRZV = RPQPRRZV * 1 - is_positive(INDTEFF) + TRPQPRRZV * is_positive(INDTEFF)
TGLRF2 = TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRTOT - TGLRVOTOT - TGLRCMTOT - TGLRF1
TERPQRCMTR = RPQRCMTR * 1 - is_positive(INDTEFF) + TRPQRCMTR * is_positive(INDTEFF)
TRPQRF1 = inf(TGLRF1 / FONCINB)
TERPQPRRZC = RPQPRRZC * 1 - is_positive(INDTEFF) + TRPQPRRZC * is_positive(INDTEFF)
ZIPQRCM5TOT = ZIPQRCMDC5 + ZIPQRCMFU5 + ZIPQRCMCH5 + ZIPQRCMTS5 + ZIPQRCMGO5 + ZIPQRCMTR5
TGLRFTOT = TGLRF1 + TGLRF2
TRPQPRRZ1 = inf(TGLPRRZ1 / CODNCZ)
IPQRCMGO5 = ZIPQRCMGO5 * RESTUCNB
AVPLAF10 = max(0, AUBAINE13A + AUBAINE13B + AUBAINE12 + AUBAINE11 + AUBAINE10 - AVPLAF13 - AVPLAF12 - AVPLAF11 - LIMIT10) * is_positive(V_DIFTEOREEL)
TGLPRRZ2 = is_positive(TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR2Z2 / TOTALQUO) + 1 - is_positive(TPRR2Z3 + TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRV - TGLPRRC - TGLPRR1 - TGLPRR2 - TGLPRR3 - TGLPRR4 - TGLPRRZV - TGLPRRZC - TGLPRRZ1
ZIPQPRRZV5 = is_positive(sum([TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRRZVM / TETONEQUOM1) + 1 - is_positive(sum([TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT
AVPLAF9 = max(0, AUBAINE13A + AUBAINE13B + AUBAINE12 + AUBAINE11 + AUBAINE10 + AUBAINE9 - AVPLAF13 - AVPLAF12 - AVPLAF11 - AVPLAF10 - LIMIT9) * is_positive(V_DIFTEOREEL)
IPQPRRZV5 = ZIPQPRRZV5 * CODNAZ
ZIPQRF15 = is_positive(TEGLRF2M + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM) * arr(IQUOTOT5 * TERPQRF1M / TETONEQUOM1) + 1 - is_positive(TEGLRF2M + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZ5TOT
ZIPQPRRV5 = is_positive(sum([TEGLPRRCM, TEGLPRR1M, TEGLPRR2M, TEGLPRR3M, TEGLPRR4M]) + sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRRVM / TETONEQUOM1) + 1 - is_positive(sum([TEGLPRRCM, TEGLPRR1M, TEGLPRR2M, TEGLPRR3M, TEGLPRR4M]) + sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT
TONEQUO1T = sum([TRPQ1, TRPQ2, TRPQ3, TRPQ4]) + sum([TRPQFV, TRPQFC, TRPQF1, TRPQF2, TRPQF3, TRPQF4]) + sum([TRPQPALIMV, TRPQPALIMC, TRPQPALIM1, TRPQPALIM2, TRPQPALIM3, TRPQPALIM4]) + sum([TRPQRF1, TRPQRF2]) + TRPQRCMDC + TRPQRCMFU + TRPQRCMCH + TRPQRCMTR + TRPQRCMTS + TRPQRCMGO + sum([TRPQPRRV, TRPQPRRC, TRPQPRR1, TRPQPRR2, TRPQPRR3, TRPQPRR4]) + sum([TRPQPRRZV, TRPQPRRZC, TRPQPRRZ1, TRPQPRRZ2, TRPQPRRZ3, TRPQPRRZ4]) + TRPQRVO + TRPQRVO5 + TRPQRVO6 + TRPQRVO7 + sum([TRPQTSV, TRPQTSC, TRPQTS1, TRPQTS2, TRPQTS3, TRPQTS4]) + sum([TRPQTSREMPV, TRPQTSREMPC, TRPQTSREMP1, TRPQTSREMP2, TRPQTSREMP3, TRPQTSREMP4]) + TRPQRVG + TRPQRWB * null(1 - FLAG_EXIT) + TRPQRWB + TRPQRWA * null(2 - FLAG_EXIT)
TETONEQUO1 = TONEQUO1 * 1 - is_positive(INDTEFF) + TONEQUO1T * is_positive(INDTEFF)
TEGLPRRZ2 = GLPRRZ2 * 1 - is_positive(INDTEFF) + TGLPRRZ2 * is_positive(INDTEFF)
IPQPRRV5 = ZIPQPRRV5 * CARPENBAV
TEGLRF2 = GLRF2 * 1 - is_positive(INDTEFF) + TGLRF2 * is_positive(INDTEFF)
TEGLPRRZ1 = GLPRRZ1 * 1 - is_positive(INDTEFF) + TGLPRRZ1 * is_positive(INDTEFF)
TERPQPRRZ1 = RPQPRRZ1 * 1 - is_positive(INDTEFF) + TRPQPRRZ1 * is_positive(INDTEFF)
TEGLRF1 = GLRF1 * 1 - is_positive(INDTEFF) + TGLRF1 * is_positive(INDTEFF)
ZIPQPRRZC5 = is_positive(sum([TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRRZCM / TETONEQUOM1) + 1 - is_positive(sum([TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZV5
IPQPRRZC5 = ZIPQPRRZC5 * CODNBZ
TRPQPRRZ2 = inf(TGLPRRZ2 / CODNDZ)
IPQRCMTS5 = ZIPQRCMTS5 * DISQUONB
QUOKIREHR = TGL1 + TGL2 + TGL3 + TGL4 + sum([TGLPRRV + TGLPRRZV + TGLFV + TGLTSV + TGLTSREMPV + TGLPALIMV, TGLPRRC + TGLPRRZC + TGLFC + TGLTSC + TGLTSREMPC + TGLPALIMC, TGLPRR1 + TGLPRRZ1 + TGLF1 + TGLTS1 + TGLTSREMP1 + TGLPALIM1, TGLPRR2 + TGLPRRZ2 + TGLF2 + TGLTS2 + TGLTSREMP2 + TGLPALIM2, TGLPRR3 + TGLPRRZ3 + TGLF3 + TGLTS3 + TGLTSREMP3 + TGLPALIM3, TGLPRR4 + TGLPRRZ4 + TGLF4 + TGLTS4 + TGLTSREMP4 + TGLPALIM4]) + TGLRF1 + TGLRF2 + TGLRCMDC + TGLRCMFU + TGLRCMCH + TGLRCMTS + TGLRCMGO + TGLRCMTR + TGLRVO + TGLRVO5 + TGLRVO6 + TGLRVO7
ZIPQRVO5 = is_positive(TEGLRVO5M + TEGLRVO6M + TEGLRVO7M + TEGLTSTOTM + TEGLTSREMPTOTM) * arr(IQUOTOT5 * TERPQRVOM / TETONEQUOM1) + 1 - is_positive(TEGLRVO5M + TEGLRVO6M + TEGLRVO7M + TEGLTSTOTM + TEGLTSREMPTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQRF5TOT - ZIPQPRRZ5TOT
TRPQRF2 = inf(TGLRF2 / REAMORNB)
TERPQRF1 = RPQRF1 * 1 - is_positive(INDTEFF) + TRPQRF1 * is_positive(INDTEFF)
RB51 = max(0, RB01 + TETONEQUO1)
ZIPQPRRC5 = is_positive(sum([TEGLPRR1M, TEGLPRR2M, TEGLPRR3M, TEGLPRR4M]) + sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRRCM / TETONEQUOM1) + 1 - is_positive(sum([TEGLPRR1M, TEGLPRR2M, TEGLPRR3M, TEGLPRR4M]) + sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRRV5
RB52 = max(0, RB02 + TETONEQUO1)
IPQRVO5 = ZIPQRVO5 * RENTAXNB
IPQRF15 = ZIPQRF15 * FONCINB
QUOKIRE = TEGL1 + TEGL2 + TEGL3 + RPQ4 + sum([TERPQPRRV + TERPQPRRZV + TEGLFV + TERPQTSV + TERPQTSREMPV + TERPQPALIMV, TERPQPRRC + TERPQPRRZC + TEGLFC + TERPQTSC + TERPQTSREMPC + TERPQPALIMC, TERPQPRR1 + TERPQPRRZ1 + TEGLF1 + TERPQTS1 + TERPQTSREMP1 + TERPQPALIM1, TERPQPRR2 + TERPQPRRZ2 + TEGLF2 + TERPQTS2 + TERPQTSREMP2 + TERPQPALIM2, TERPQPRR3 + TERPQPRRZ3 + TEGLF3 + TERPQTS3 + TERPQTSREMP3 + TERPQPALIM3, TERPQPRR4 + TERPQPRRZ4 + TEGLF4 + TERPQTS4 + TERPQTSREMP4 + TERPQPALIM4]) + TERPQRF1 + TEGLRF2 + TERPQRCMDC + TERPQRCMFU + TERPQRCMCH + TERPQRCMTS + TERPQRCMGO + TERPQRCMTR + TERPQRVO + TERPQRVO5 + TERPQRVO6 + TERPQRVO7
QF511 = arr(RB51) / NB1
TGLPRRZ3 = is_positive(TPRR2Z4 + REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR2Z3 / TOTALQUO) + 1 - is_positive(TPRR2Z4 + REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRV - TGLPRRC - TGLPRR1 - TGLPRR2 - TGLPRR3 - TGLPRR4 - TGLPRRZV - TGLPRRZC - TGLPRRZ1 - TGLPRRZ2
REVKIREHR = 1 - null(IND_TDR) * arr(max(0, 1 - is_positive(max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS + VARIPTEFN + PVTXEFF * present(IPTEFN) * is_positive(ART1731BIS) + IPTEFN + PVTXEFF * present(IPTEFN) * 1 - ART1731BIS + INDTEFF) * RI1RFRHR + is_positive(max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS + VARIPTEFN + PVTXEFF * present(IPTEFN) * is_positive(ART1731BIS) + IPTEFN + PVTXEFF * present(IPTEFN) * 1 - ART1731BIS + INDTEFF) * max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS + is_positive(max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS + VARIPTEFN + PVTXEFF * present(IPTEFN) * is_positive(ART1731BIS) + IPTEFN + PVTXEFF * present(IPTEFN) * 1 - ART1731BIS + INDTEFF) * is_positive(TEFFN - DRBG - RNIDF + APERPV + APERPC + APERPP * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) + QUOKIREHR) * APERPV + APERPC + APERPP * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) + QUOKIREHR + max(0, TEFFREVTOTRFRHR * INDTEFF) * 1 - is_positive(max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS) * 1 - present(IND_TDR) + IND_TDR + 1 - is_positive(max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS + VARIPTEFN + PVTXEFF * present(IPTEFN) * is_positive(ART1731BIS) + IPTEFN + PVTXEFF * present(IPTEFN) * 1 - ART1731BIS + INDTEFF) * QUOKIREHR + APERPV + APERPC + APERPP * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) + VARREVKIRE)) * 1 - present(COD8YM) + COD8YM
TEGLRFTOT = TEGLRF1 + TEGLRF2
ZIPQRF25 = is_positive(TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM) * arr(IQUOTOT5 * TERPQRF2M / TETONEQUOM1) + 1 - is_positive(TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQRF15 - ZIPQPRRZ5TOT
TERPQRF2 = RPQRF2 * 1 - is_positive(INDTEFF) + TRPQRF2 * is_positive(INDTEFF)
HRLIM15 = positif_ou_nul(REVKIREHR - 1.5 * HRMOYBTRFR)
HRCONDTHEO = is_positive(null(2 - HRNBTRFR) * is_positive(HRLIM15) * is_positive(HRLIMBTRFR1 * HRLIMBTRFR2) * 1 - is_positive(CASECHR + 0))
QF521 = arr(RB51) / NB2
TERPQPRRZ2 = RPQPRRZ2 * 1 - is_positive(INDTEFF) + TRPQPRRZ2 * is_positive(INDTEFF)
TRPQPRRZ3 = inf(TGLPRRZ3 / CODNEZ)
ZIPQPRRZ15 = is_positive(sum([TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRRZ1M / TETONEQUOM1) + 1 - is_positive(sum([TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZV5 - ZIPQPRRZC5
DS521 = max(QF521 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF521 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF521 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF521 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF521 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
ZIPQRVO55 = is_positive(TEGLRVO6M + TEGLRVO7M + TEGLTSTOTM + TEGLTSREMPTOTM) * arr(IQUOTOT5 * TERPQRVO5M / TETONEQUOM1) + 1 - is_positive(TEGLRVO6M + TEGLRVO7M + TEGLTSTOTM + TEGLTSREMPTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQRF5TOT - ZIPQRVO5 - ZIPQPRRZ5TOT
ZIPQRVO65 = is_positive(TEGLRVO7M + TEGLTSTOTM + TEGLTSREMPTOTM) * arr(IQUOTOT5 * TERPQRVO6M / TETONEQUOM1) + 1 - is_positive(TEGLRVO7M + TEGLTSTOTM + TEGLTSREMPTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQRF5TOT - ZIPQRVO5 - ZIPQRVO55 - ZIPQPRRZ5TOT
TEGLPRRZ3 = GLPRRZ3 * 1 - is_positive(INDTEFF) + TGLPRRZ3 * is_positive(INDTEFF)
REVKIRE = 1 - null(IND_TDR) * arr(max(0, 1 - is_positive(max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS + VARIPTEFN + PVTXEFF * present(IPTEFN) * is_positive(ART1731BIS) + IPTEFN + PVTXEFF * present(IPTEFN) * 1 - ART1731BIS + INDTEFF) * RI1RFR + is_positive(max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS + VARIPTEFN + PVTXEFF * present(IPTEFN) * is_positive(ART1731BIS) + IPTEFN + PVTXEFF * present(IPTEFN) * 1 - ART1731BIS + INDTEFF) * max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS + is_positive(max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS + VARIPTEFN + PVTXEFF * present(IPTEFN) * is_positive(ART1731BIS) + IPTEFN + PVTXEFF * present(IPTEFN) * 1 - ART1731BIS + INDTEFF) * is_positive(TEFFN - DRBG - RNIDF + APERPV + APERPC + APERPP * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) + QUOKIRE) * APERPV + APERPC + APERPP * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) + QUOKIRE + max(0, TEFFREVTOTRFR * INDTEFF) * 1 - is_positive(max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS) * 1 - present(IND_TDR) + IND_TDR + 1 - is_positive(max(0, VARIPTEFP - PVTXEFF) * is_positive(ART1731BIS) + max(0, IPTEFP - PVTXEFF) * 1 - ART1731BIS + VARIPTEFN + PVTXEFF * present(IPTEFN) * is_positive(ART1731BIS) + IPTEFN + PVTXEFF * present(IPTEFN) * 1 - ART1731BIS + INDTEFF) * QUOKIRE + APERPV + APERPC + APERPP * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) + VARREVKIRE))
QF522 = arr(RB52) / NB2
IPQPRRC5 = ZIPQPRRC5 * CARPENBAC
BHAUTREV = max(0, REVKIREHR - LIMHR1 * 1 + BOOL_0AM)
ZIPQPRR15 = is_positive(sum([TEGLPRR2M, TEGLPRR3M, TEGLPRR4M]) + sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRR1M / TETONEQUOM1) + 1 - is_positive(sum([TEGLPRR2M, TEGLPRR3M, TEGLPRR4M]) + sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRRV5 - ZIPQPRRC5
IPQRVO55 = ZIPQRVO55 * RENTAXNB5
CHRREEL2 = max(0, REVKIREHR - LIMHR2 * 1 + BOOL_0AM * TXHR2 / 100)
DS522 = max(QF522 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF522 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF522 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF522 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF522 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
TGLPRRZ4 = is_positive(REVRVO + REVRCM + REVRF) * arr(TONEQUO * TPRR2Z4 / TOTALQUO) + 1 - is_positive(REVRVO + REVRCM + REVRF) * TONEQUO - TGLTOT - TGLFTOT - TGLPALIMTOT - TGLTSTOT - TGLTSREMPTOT - TGLPRRV - TGLPRRC - TGLPRR1 - TGLPRR2 - TGLPRR3 - TGLPRR4 - TGLPRRZV - TGLPRRZC - TGLPRRZ1 - TGLPRRZ2 - TGLPRRZ3
IPQRF25 = ZIPQRF25 * REAMORNB
IS521 = arr(DS521 * NB2)
QF512 = arr(RB52) / NB1
DS511 = max(QF511 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF511 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF511 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF511 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF511 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
CHRREEL1 = positif_ou_nul(LIMHRTX1 * 1 + BOOL_0AM - REVKIREHR) * REVKIREHR - LIMHR1 * 1 + BOOL_0AM * TXHR1 / 100 + LIMHR1 * 1 + BOOL_0AM * TXHR1 / 100 * is_positive(REVKIREHR - LIMHRTX1 * 1 + BOOL_0AM)
CIIMSI = null(1 - null(IND_TDR) + is_positive(SEUILCIIMSI - REVKIRE) - 2) + 2 * 1 - null(1 - null(IND_TDR) + is_positive(SEUILCIIMSI - REVKIRE) - 2)
TEGLPRRZ4 = GLPRRZ4 * 1 - is_positive(INDTEFF) + TGLPRRZ4 * is_positive(INDTEFF)
IPQPRRZ15 = ZIPQPRRZ15 * CODNCZ
ZIPQRVO75 = is_positive(TEGLTSTOTM + TEGLTSREMPTOTM) * arr(IQUOTOT5 * TERPQRVO7M / TETONEQUOM1) + 1 - is_positive(TEGLTSTOTM + TEGLTSREMPTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQRF5TOT - ZIPQRVO5 - ZIPQRVO55 - ZIPQRVO65 - ZIPQPRRZ5TOT
HRBASEFRAC = arr(REVKIREHR - HRMOYBTRFR / 2)
IS511 = arr(DS511 * NB1)
TEGLPRRZTOT = TEGLPRRZV + TEGLPRRZC + TEGLPRRZ1 + TEGLPRRZ2 + TEGLPRRZ3 + TEGLPRRZ4
ZIPQPRRZ25 = is_positive(sum([TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRRZ2M / TETONEQUOM1) + 1 - is_positive(sum([TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZV5 - ZIPQPRRZC5 - ZIPQPRRZ15
IPQPRR15 = ZIPQPRRZ15 * CARPENBAP1
INANT51 = max(IS511, IS521 - PLANT)
ZIPQPRR25 = is_positive(sum([TEGLPRR3M, TEGLPRR4M]) + sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRR2M / TETONEQUOM1) + 1 - is_positive(sum([TEGLPRR3M, TEGLPRR4M]) + sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRRV5 - ZIPQPRRC5 - ZIPQPRR15
TERPQPRRZ3 = RPQPRRZ3 * 1 - is_positive(INDTEFF) + TRPQPRRZ3 * is_positive(INDTEFF)
CIRIRF = null(1 - null(IND_TDR) + positif_ou_nul(SEUILCIRIRF - REVKIRE) - 2) + 2 * 1 - null(1 - null(IND_TDR) + positif_ou_nul(SEUILCIRIRF - REVKIRE) - 2)
CKIREDUR = arr(REVKIRE * 360 / CDEVDUR_NBJ)
PPE_KIRE = REVKIRE * PPENBJAN / PPENBJ
IPQRVO65 = ZIPQRVO65 * RENTAXNB6
HRBASELISSE = HRBASEFRAC + HRMOYBTRFR
CHRTHEO11 = arr(positif_ou_nul(LIMHRTX1 * 1 + BOOL_0AM - HRBASELISSE) * HRBASELISSE - LIMHR1 * 1 + BOOL_0AM * TXHR1 / 100 + LIMHR1 * 1 + BOOL_0AM * TXHR1 / 100 * is_positive(HRBASELISSE - LIMHRTX1 * 1 + BOOL_0AM))
LIG1950 = INDREV1A8 * positif_ou_nul(REVKIRE) * 1 - positif_ou_nul(IND_TDR) * 1 - is_positive(ANNUL2042 + 0)
IS522 = arr(DS522 * NB2)
LIGHAUTNET = is_positive(BHAUTREV * INDREV1A8IR + HAUTREVANTAF) * 1 - is_positive(ANNUL2042 + 0) * LIG1
ZIPQPRR35 = is_positive(TEGLPRR4M + sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRR3M / TETONEQUOM1) + 1 - is_positive(TEGLPRR4M + sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRRV5 - ZIPQPRRC5 - ZIPQPRR15 - ZIPQPRR25
TRPQPRRZ4 = inf(TGLPRRZ4 / CODNFZ)
REVKIREDUR2 = CKIREDUR
IQUOTOTANT1 = INANT51 - INANT01
ZIPQPRRZ35 = is_positive(TEGLPRRZ4M + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRRZ3M / TETONEQUOM1) + 1 - is_positive(TEGLPRRZ4M + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZV5 - ZIPQPRRZC5 - ZIPQPRRZ15 - ZIPQPRRZ25
ZIPQPRR45 = is_positive(sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRR4M / TETONEQUOM1) + 1 - is_positive(sum([TEGLPRRZVM, TEGLPRRZCM, TEGLPRRZ1M, TEGLPRRZ2M, TEGLPRRZ3M, TEGLPRRZ4M]) + TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRRV5 - ZIPQPRRC5 - ZIPQPRR15 - ZIPQPRR25 - ZIPQPRR35
LIG_IRNET = is_positive(LIGTAXANET + LIGPCAPNET + LIGLOYNET + LIGHAUTNET) * 1 - is_positive(ANNUL2042 + 0)
IPQRVO75 = ZIPQRVO75 * RENTAXNB7
ZIPQRVO5TOT = ZIPQRVO5 + ZIPQRVO55 + ZIPQRVO65 + ZIPQRVO75
CHRREELTOT = arr(max(0, CHRREEL1 + CHRREEL2))
IPQPRR25 = ZIPQPRRZ25 * CARPENBAP2
ZIPQTSREMPV5 = is_positive(sum([TEGLTSREMPCM, TEGLTSREMP1M, TEGLTSREMP2M, TEGLTSREMP3M, TEGLTSREMP4M])) * arr(IQUOTOT5 * TERPQTSREMPVM / TETONEQUOM1) + 1 - is_positive(sum([TEGLTSREMPCM, TEGLTSREMP1M, TEGLTSREMP2M, TEGLTSREMP3M, TEGLTSREMP4M])) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZ5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQTS5TOT
PPE_BOOL_KIR_COND = 1 - null(IND_TDR) * positif_ou_nul(PPESEUILKIR - PPE_KIRE)
IPQPRRZ35 = ZIPQPRRZ35 * CODNEZ
IPQPRRZ25 = ZIPQPRRZ25 * CODNDZ
PPEMAJORETTE = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * arr(PPE_MONO + PPE_MAJO + PPE_MABT) * 1 - V_CNR
DS512 = max(QF512 - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR, 0) * TAUX1 / 100 + max(QF512 - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR, 0) * TAUX2 / 100 + max(QF512 - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR, 0) * TAUX3 / 100 + max(QF512 - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR, 0) * TAUX4 / 100 + max(QF512 - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR, 0) * TAUX5 / 100
IN51 = max(IS511, IS521 - PLA)
PPE_FORMULE1 = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN1 * PPE_BOOL_MAX1 * arr(positif_ou_nul(PPELIMSMIC - PPE_RCONTP1) * arr(PPE_RCONTP1 * PPETX1 / 100) / PPE_COEFF1 + is_positive(PPE_RCONTP1 - PPELIMSMIC) * positif_ou_nul(PPELIMRPH - PPE_RCONTP1) * arr(arr(PPELIMRPH - PPE_RCONTP1 * PPETX2 / 100) / PPE_COEFF1) + is_positive(PPE_RCONTP1 - PPELIMRPHI) * positif_ou_nul(PPE_HAUTE - PPE_RCONTP1) * arr(arr(PPELIMRPH2 - PPE_RCONTP1 * PPETX3 / 100) / PPE_COEFF1))
IS512 = arr(DS512 * NB1)
ZIPQTSV5 = is_positive(sum([TEGLTSCM, TEGLTS1M, TEGLTS2M, TEGLTS3M, TEGLTS4M]) + TEGLTSREMPTOTM) * arr(IQUOTOT5 * TERPQTSVM / TETONEQUOM1) + 1 - is_positive(sum([TEGLTSCM, TEGLTS1M, TEGLTS2M, TEGLTS3M, TEGLTS4M]) + TEGLTSREMPTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQPRRZ5TOT
IPQ1005 = IPQRWB5 + IPQRWA5 + IPQRVG5 + sum([IPQ15, IPQ25, IPQ35, IPQ45]) + sum([IPQFV5, IPQFC5, IPQF15, IPQF25, IPQF35, IPQF45]) + sum([IPQPALIMV5, IPQPALIMC5, IPQPALIM15, IPQPALIM25, IPQPALIM35, IPQPALIM45]) + sum([IPQTSV5, IPQTSC5, IPQTS15, IPQTS25, IPQTS35, IPQTS45]) + sum([IPQTSREMPV5, IPQTSREMPC5, IPQTSREMP15, IPQTSREMP25, IPQTSREMP35, IPQTSREMP45]) + IPQRF15 + IPQRF25 + sum([IPQPRRV5 + IPQPRRZV5, IPQPRRC5 + IPQPRRZC5, IPQPRR15 + IPQPRRZ15, IPQPRR25 + IPQPRRZ25, IPQPRR35 + IPQPRRZ35, IPQPRR45 + IPQPRRZ45]) + IPQRCMDC5 + IPQRCMFU5 + IPQRCMCH5 + IPQRCMTS5 + IPQRCMGO5 + IPQRCMTR5 + IPQRVO5 + IPQRVO55 + IPQRVO65 + IPQRVO75
PPE_FORMULE4 = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN4 * PPE_BOOL_MAX4 * arr(positif_ou_nul(PPELIMSMIC - PPE_RCONTP4) * arr(PPE_RCONTP4 * PPETX1 / 100) / PPE_COEFF4 + is_positive(PPE_RCONTP4 - PPELIMSMIC) * positif_ou_nul(PPELIMRPH - PPE_RCONTP4) * arr(arr(PPELIMRPH - PPE_RCONTP4 * PPETX2 / 100) / PPE_COEFF4) + is_positive(PPE_RCONTP4 - PPELIMRPHI) * positif_ou_nul(PPE_HAUTE - PPE_RCONTP4) * arr(arr(PPELIMRPH2 - PPE_RCONTP4 * PPETX3 / 100) / PPE_COEFF4))
IPQTSREMPV5 = ZIPQTSREMPV5 * REMPLANBV
ZIPQANTRWB = is_positive(TEGLRWA + TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQRWB / TETONEQUO1) + 1 - is_positive(TEGLRWA + TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1
ZIPQTSC5 = is_positive(sum([TEGLTS1M, TEGLTS2M, TEGLTS3M, TEGLTS4M]) + TEGLTSREMPTOTM) * arr(IQUOTOT5 * TERPQTSCM / TETONEQUOM1) + 1 - is_positive(sum([TEGLTS1M, TEGLTS2M, TEGLTS3M, TEGLTS4M]) + TEGLTSREMPTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQPRRZ5TOT - ZIPQTSV5
CHRTHEO21 = arr(max(0, HRBASELISSE - LIMHR2 * 1 + BOOL_0AM * TXHR2 / 100))
TERPQPRRZ4 = RPQPRRZ4 * 1 - is_positive(INDTEFF) + TRPQPRRZ4 * is_positive(INDTEFF)
PPEPRIMETTEC = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_PRIMETTE * BOOL_0AM * INDMONO * positif_ou_nul(PPELIMRPHI - PPE_RCONTPC) * positif_ou_nul(PPE_RTAC - PPELIMRPB) * 1 - is_positive(PPE_BOOL_NADAC) * 1 - V_CNR
IPQ5 = IPQ05 + IPQ1005
INANT52 = max(IS512, IS522 - PLANT)
IPQPRR35 = ZIPQPRRZ35 * CARPENBAP3
PPEPRIMETTEV = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_PRIMETTE * BOOL_0AM * INDMONO * positif_ou_nul(PPE_RTAV - PPELIMRPB) * positif_ou_nul(PPELIMRPHI - PPE_RCONTPV) * 1 - is_positive(PPE_BOOL_NADAV) * 1 - V_CNR
PPENARPRIME4 = PPE_FORMULE4 * 1 + PPETXMAJ2 * positif_ou_nul(PPE_COEFFCOND4 - 2) * 1 - PPE_BOOL_TP4 + arr(PPE_FORMULE4 * PPETXMAJ1) + arr(PPE_FORMULE4 * PPE_COEFF4 * PPETXMAJ2) * is_positive(2 - PPE_COEFFCOND4) * is_positive(PPE_COEFFCOND4 - 1) * 1 - PPE_BOOL_TP4 + PPE_FORMULE4 * is_positive(PPE_BOOL_TP4 + positif_ou_nul(1 - PPE_COEFFCOND4))
PPE_FORMULEV = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINV * PPE_BOOL_MAXV * arr(positif_ou_nul(PPELIMSMIC - PPE_RCONTPV) * arr(PPE_RCONTPV * PPETX1 / 100) / PPE_COEFFV + is_positive(PPE_RCONTPV - PPELIMSMIC) * positif_ou_nul(PPELIMRPH - PPE_RCONTPV) * arr(arr(PPELIMRPH - PPE_RCONTPV * PPETX2 / 100) / PPE_COEFFV) + is_positive(PPE_RCONTPV - PPELIMRPHI) * positif_ou_nul(PPE_HAUTE - PPE_RCONTPV) * arr(arr(PPELIMRPH2 - PPE_RCONTPV * PPETX3 / 100) / PPE_COEFFV))
IN52 = max(IS512, IS522 - PLA)
ZIPQTSREMPC5 = is_positive(sum([TEGLTSREMP1M, TEGLTSREMP2M, TEGLTSREMP3M, TEGLTSREMP4M])) * arr(IQUOTOT5 * TERPQTSREMPCM / TETONEQUOM1) + 1 - is_positive(sum([TEGLTSREMP1M, TEGLTSREMP2M, TEGLTSREMP3M, TEGLTSREMP4M])) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZ5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQTS5TOT - ZIPQTSREMPV5
PPENARPRIME1 = PPE_FORMULE1 * 1 + PPETXMAJ2 * positif_ou_nul(PPE_COEFFCOND1 - 2) * 1 - PPE_BOOL_TP1 + arr(PPE_FORMULE1 * PPETXMAJ1) + arr(PPE_FORMULE1 * PPE_COEFF1 * PPETXMAJ2) * is_positive(2 - PPE_COEFFCOND1) * is_positive(PPE_COEFFCOND1 - 1) * 1 - PPE_BOOL_TP1 + PPE_FORMULE1 * is_positive(PPE_BOOL_TP1 + positif_ou_nul(1 - PPE_COEFFCOND1))
PPE_FORMULEC = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINC * PPE_BOOL_MAXC * arr(positif_ou_nul(PPELIMSMIC - PPE_RCONTPC) * arr(PPE_RCONTPC * PPETX1 / 100) / PPE_COEFFC + is_positive(PPE_RCONTPC - PPELIMSMIC) * positif_ou_nul(PPELIMRPH - PPE_RCONTPC) * arr(arr(PPELIMRPH - PPE_RCONTPC * PPETX2 / 100) / PPE_COEFFC) + is_positive(PPE_RCONTPC - PPELIMRPHI) * positif_ou_nul(PPE_HAUTE - PPE_RCONTPC) * arr(arr(PPELIMRPH2 - PPE_RCONTPC * PPETX3 / 100) / PPE_COEFFC))
PPE_FORMULE2 = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN2 * PPE_BOOL_MAX2 * arr(positif_ou_nul(PPELIMSMIC - PPE_RCONTP2) * arr(PPE_RCONTP2 * PPETX1 / 100) / PPE_COEFF2 + is_positive(PPE_RCONTP2 - PPELIMSMIC) * positif_ou_nul(PPELIMRPH - PPE_RCONTP2) * arr(arr(PPELIMRPH - PPE_RCONTP2 * PPETX2 / 100) / PPE_COEFF2) + is_positive(PPE_RCONTP2 - PPELIMRPHI) * positif_ou_nul(PPE_HAUTE - PPE_RCONTP2) * arr(arr(PPELIMRPH2 - PPE_RCONTP2 * PPETX3 / 100) / PPE_COEFF2))
PPE_FORMULEU = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINU * PPE_BOOL_MAXU * arr(positif_ou_nul(PPELIMSMIC - PPE_RCONTPU) * arr(PPE_RCONTPU * PPETX1 / 100) / PPE_COEFFU + is_positive(PPE_RCONTPU - PPELIMSMIC) * positif_ou_nul(PPELIMRPH - PPE_RCONTPU) * arr(arr(PPELIMRPH - PPE_RCONTPU * PPETX2 / 100) / PPE_COEFFU) + is_positive(PPE_RCONTPU - PPELIMRPHI) * positif_ou_nul(PPE_HAUTE - PPE_RCONTPU) * arr(arr(PPELIMRPH2 - PPE_RCONTPU * PPETX3 / 100) / PPE_COEFFU))
ZIPQPRRZ45 = is_positive(TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * arr(IQUOTOT5 * TERPQPRRZ4M / TETONEQUOM1) + 1 - is_positive(TEGLTSTOTM + TEGLTSREMPTOTM + TEGLRVOTOTM + TEGLRFTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZV5 - ZIPQPRRZC5 - ZIPQPRRZ15 - ZIPQPRRZ25 - ZIPQPRRZ35
IPQTSREMPC5 = ZIPQTSREMPC5 * REMPLANBC
PPENARPRIMEV = PPE_FORMULEV * 1 + PPETXMAJ2 * positif_ou_nul(PPE_COEFFCONDV - 2) * 1 - PPE_BOOL_TPV + arr(PPE_FORMULEV * PPETXMAJ1) + arr(PPE_FORMULEV * PPE_COEFFV * PPETXMAJ2) * is_positive(2 - PPE_COEFFCONDV) * is_positive(PPE_COEFFCONDV - 1) * 1 - PPE_BOOL_TPV + PPE_FORMULEV * is_positive(PPE_BOOL_TPV + positif_ou_nul(1 - PPE_COEFFCONDV))
ZIPQTSREMP15 = is_positive(sum([TEGLTSREMP2M, TEGLTSREMP3M, TEGLTSREMP4M])) * arr(IQUOTOT5 * TERPQTSREMP1M / TETONEQUOM1) + 1 - is_positive(sum([TEGLTSREMP2M, TEGLTSREMP3M, TEGLTSREMP4M])) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZ5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQTS5TOT - ZIPQTSREMPV5 - ZIPQTSREMPC5
PPE_FORMULE3 = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN3 * PPE_BOOL_MAX3 * arr(positif_ou_nul(PPELIMSMIC - PPE_RCONTP3) * arr(PPE_RCONTP3 * PPETX1 / 100) / PPE_COEFF3 + is_positive(PPE_RCONTP3 - PPELIMSMIC) * positif_ou_nul(PPELIMRPH - PPE_RCONTP3) * arr(arr(PPELIMRPH - PPE_RCONTP3 * PPETX2 / 100) / PPE_COEFF3) + is_positive(PPE_RCONTP3 - PPELIMRPHI) * positif_ou_nul(PPE_HAUTE - PPE_RCONTP3) * arr(arr(PPELIMRPH2 - PPE_RCONTP3 * PPETX3 / 100) / PPE_COEFF3))
CHRTHEOTOT = arr(max(0, CHRTHEO11 + CHRTHEO21) * 2)
PPE_FORMULEN = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINN * PPE_BOOL_MAXN * arr(positif_ou_nul(PPELIMSMIC - PPE_RCONTPN) * arr(PPE_RCONTPN * PPETX1 / 100) / PPE_COEFFN + is_positive(PPE_RCONTPN - PPELIMSMIC) * positif_ou_nul(PPELIMRPH - PPE_RCONTPN) * arr(arr(PPELIMRPH - PPE_RCONTPN * PPETX2 / 100) / PPE_COEFFN) + is_positive(PPE_RCONTPN - PPELIMRPHI) * positif_ou_nul(PPE_HAUTE - PPE_RCONTPN) * arr(arr(PPELIMRPH2 - PPE_RCONTPN * PPETX3 / 100) / PPE_COEFFN))
IQUOTOT1 = IN51 - IN01
ZIPQTS15 = is_positive(sum([TEGLTS2M, TEGLTS3M, TEGLTS4M]) + TEGLTSREMPTOTM) * arr(IQUOTOT5 * TERPQTS1M / TETONEQUOM1) + 1 - is_positive(sum([TEGLTS2M, TEGLTS3M, TEGLTS4M]) + TEGLTSREMPTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQPRRZ5TOT - ZIPQTSV5 - ZIPQTSC5
IPQTS15 = ZIPQTS15 * CARTSNBAP1
PPENARPRIME2 = PPE_FORMULE2 * 1 + PPETXMAJ2 * positif_ou_nul(PPE_COEFFCOND2 - 2) * 1 - PPE_BOOL_TP2 + arr(PPE_FORMULE2 * PPETXMAJ1) + arr(PPE_FORMULE2 * PPE_COEFF2 * PPETXMAJ2) * is_positive(2 - PPE_COEFFCOND2) * is_positive(PPE_COEFFCOND2 - 1) * 1 - PPE_BOOL_TP2 + PPE_FORMULE2 * is_positive(PPE_BOOL_TP2 + positif_ou_nul(1 - PPE_COEFFCOND2))
IPQANTRWB = ZIPQANTRWB * CODNWB
PPEPRIME1 = arr(PPENARPRIME1)
ZIPQTS25 = is_positive(sum([TEGLTS3M, TEGLTS4M]) + TEGLTSREMPTOTM) * arr(IQUOTOT5 * TERPQTS2M / TETONEQUOM1) + 1 - is_positive(sum([TEGLTS3M, TEGLTS4M]) + TEGLTSREMPTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQPRRZ5TOT - ZIPQTSV5 - ZIPQTSC5 - ZIPQTS15
IQUOTOT2 = IN52 - IN02
IPQTSC5 = ZIPQTSC5 * CARTSNBAC
IPQTSV5 = ZIPQTSV5 * CARTSNBAV
TMOY = inf(IPQ5 / max(0, RB05 + TONEQUOM) * 10000) / 100 * V_CR2
ZIPQANTRWA = is_positive(TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQRWA / TETONEQUO1) + 1 - is_positive(TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANTRWB
ZIPQRWB2 = is_positive(TEGLRWA + TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQRWB / TETONEQUO1) + 1 - is_positive(TEGLRWA + TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2
PPEPRIMETTE = PPEPRIMETTEV + PPEPRIMETTEC
INDTXMOY = is_positive(TX_MIN_MET - TMOY) * is_positive(present(RMOND) + present(DMOND)) * V_CR2
ZIPQANTRVG = is_positive(sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQRVG / TETONEQUO1) + 1 - is_positive(sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANTRWB - ZIPQANTRWA
IPQPRR45 = ZIPQPRRZ45 * CARPENBAP4
PPENARPRIMEU = PPE_FORMULEU * 1 + PPETXMAJ2 * positif_ou_nul(PPE_COEFFCONDU - 2) * 1 - PPE_BOOL_TPU + arr(PPE_FORMULEU * PPETXMAJ1) + arr(PPE_FORMULEU * PPE_COEFFU * PPETXMAJ2) * is_positive(2 - PPE_COEFFCONDU) * is_positive(PPE_COEFFCONDU - 1) * 1 - PPE_BOOL_TPU + PPE_FORMULEU * is_positive(PPE_BOOL_TPU + positif_ou_nul(1 - PPE_COEFFCONDU))
PPEPRIMEV = arr(PPENARPRIMEV)
PPEPRIME4 = arr(PPENARPRIME4)
PPENARPRIME3 = PPE_FORMULE3 * 1 + PPETXMAJ2 * positif_ou_nul(PPE_COEFFCOND3 - 2) * 1 - PPE_BOOL_TP3 + arr(PPE_FORMULE3 * PPETXMAJ1) + arr(PPE_FORMULE3 * PPE_COEFF3 * PPETXMAJ2) * is_positive(2 - PPE_COEFFCOND3) * is_positive(PPE_COEFFCOND3 - 1) * 1 - PPE_BOOL_TP3 + PPE_FORMULE3 * is_positive(PPE_BOOL_TP3 + positif_ou_nul(1 - PPE_COEFFCOND3))
PPENARPRIMEC = PPE_FORMULEC * 1 + PPETXMAJ2 * positif_ou_nul(PPE_COEFFCONDC - 2) * 1 - PPE_BOOL_TPC + arr(PPE_FORMULEC * PPETXMAJ1) + arr(PPE_FORMULEC * PPE_COEFFC * PPETXMAJ2) * is_positive(2 - PPE_COEFFCONDC) * is_positive(PPE_COEFFCONDC - 1) * 1 - PPE_BOOL_TPC + PPE_FORMULEC * is_positive(PPE_BOOL_TPC + positif_ou_nul(1 - PPE_COEFFCONDC))
ZIPQTSREMP25 = is_positive(sum([TEGLTSREMP3M, TEGLTSREMP4M])) * arr(IQUOTOT5 * TERPQTSREMP2M / TETONEQUOM1) + 1 - is_positive(sum([TEGLTSREMP3M, TEGLTSREMP4M])) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZ5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQTS5TOT - ZIPQTSREMPV5 - ZIPQTSREMPC5 - ZIPQTSREMP15
IPQPRRZ45 = ZIPQPRRZ45 * CODNFZ
IPQTSREMP15 = ZIPQTSREMP15 * REMPLANBP1
PPETOT = is_positive(sum([PPENARPRIME1, PPENARPRIME2, PPENARPRIME3, PPENARPRIME4, PPENARPRIMEV, PPENARPRIMEC, PPENARPRIMEU, PPENARPRIMEN]) + PPEPRIMETTE + PPEMAJORETTE + 0 + sum([1 - is_positive(PPELIMRPH - PPE_RCONTP1 - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN1 * PPE_BOOL_MAX1, 1 - is_positive(PPELIMRPH - PPE_RCONTP2 - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN2 * PPE_BOOL_MAX2, 1 - is_positive(PPELIMRPH - PPE_RCONTP3 - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN3 * PPE_BOOL_MAX3, 1 - is_positive(PPELIMRPH - PPE_RCONTP4 - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN4 * PPE_BOOL_MAX4, 1 - is_positive(PPELIMRPH - PPE_RCONTPV - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINV * PPE_BOOL_MAXV, 1 - is_positive(PPELIMRPH - PPE_RCONTPC - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINC * PPE_BOOL_MAXC, 1 - is_positive(PPELIMRPH - PPE_RCONTPU - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINU * PPE_BOOL_MAXU, 1 - is_positive(PPELIMRPH - PPE_RCONTPN - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINN * PPE_BOOL_MAXN]) + sum([1 - is_positive(PPELIMRPH2 - PPE_RCONTP1 - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN1 * PPE_BOOL_MAX1, 1 - is_positive(PPELIMRPH2 - PPE_RCONTP2 - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN2 * PPE_BOOL_MAX2, 1 - is_positive(PPELIMRPH2 - PPE_RCONTP3 - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN3 * PPE_BOOL_MAX3, 1 - is_positive(PPELIMRPH2 - PPE_RCONTP4 - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN4 * PPE_BOOL_MAX4, 1 - is_positive(PPELIMRPH2 - PPE_RCONTPV - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINV * PPE_BOOL_MAXV, 1 - is_positive(PPELIMRPH2 - PPE_RCONTPC - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINC * PPE_BOOL_MAXC, 1 - is_positive(PPELIMRPH2 - PPE_RCONTPU - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINU * PPE_BOOL_MAXU, 1 - is_positive(PPELIMRPH2 - PPE_RCONTPN - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MINN * PPE_BOOL_MAXN])) * max(0, arr(sum([PPEPRIME1, PPEPRIME2, PPEPRIME3, PPEPRIME4, PPEPRIMEV, PPEPRIMEC, PPEPRIMEU, PPEPRIMEN]) + PPEPRIMETTE + PPEMAJORETTE)) * positif_ou_nul(arr(sum([PPEPRIME1, PPEPRIME2, PPEPRIME3, PPEPRIME4, PPEPRIMEV, PPEPRIMEC, PPEPRIMEU, PPEPRIMEN]) + PPEPRIMETTE + PPEMAJORETTE - PPELIMTOT)) * 1 - is_positive(V_PPEISF + PPEISFPIR + PPEREVPRO) * 1 - is_positive(RE168 + TAX1649) * 1 - null(7 - PPENEXOV) * 1 - null(11 - PPENEXOV) * 1 - null(7 - PPENEXOC) * 1 - null(11 - PPENEXOC) * 1 - null(7 - PPENEXO1) * 1 - null(11 - PPENEXO1) * 1 - null(7 - PPENEXO2) * 1 - null(11 - PPENEXO2) * 1 - null(7 - PPENEXO3) * 1 - null(11 - PPENEXO3) * 1 - null(7 - PPENEXO4) * 1 - null(11 - PPENEXO4) * 1 - null(2 - PPEPEXOV) * 1 - null(2 - PPEPEXOC) * 1 - null(2 - PPEPEXO1) * 1 - null(2 - PPEPEXO2) * 1 - null(2 - PPEPEXO3) * 1 - null(2 - PPEPEXO4) * 1 - V_CNR
LIG1760 = 1 - present(IND_TDR) * INDTXMOY * LIG2
IPQANTRWA = ZIPQANTRWA * CODNWA
ZIPQTS35 = is_positive(TEGLTS4M + TEGLTSREMPTOTM) * arr(IQUOTOT5 * TERPQTS3M / TETONEQUOM1) + 1 - is_positive(TEGLTS4M + TEGLTSREMPTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQPRRZ5TOT - ZIPQTSV5 - ZIPQTSC5 - ZIPQTS15 - ZIPQTS25
PPEPRIMEC = arr(PPENARPRIMEC)
LIG1550 = 1 - present(IND_TDR) * INDTXMOY * LIG2
PPEPRIME2 = arr(PPENARPRIME2)
PPENARPRIMEN = PPE_FORMULEN * 1 + PPETXMAJ2 * positif_ou_nul(PPE_COEFFCONDN - 2) * 1 - PPE_BOOL_TPN + arr(PPE_FORMULEN * PPETXMAJ1) + arr(PPE_FORMULEN * PPE_COEFFN * PPETXMAJ2) * is_positive(2 - PPE_COEFFCONDN) * is_positive(PPE_COEFFCONDN - 1) * 1 - PPE_BOOL_TPN + PPE_FORMULEN * is_positive(PPE_BOOL_TPN + positif_ou_nul(1 - PPE_COEFFCONDN))
PPEPRIMEVT = PPEPRIMEV + PPEPRIMETTEV * 1 - V_CNR
IPQANTRVG = ZIPQANTRVG * CODNVG
IPQTS25 = ZIPQTS25 * CARTSNBAP2
ZIPQRWB1 = is_positive(TEGLRWA + TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQRWB / TETONEQUO1) + 1 - is_positive(TEGLRWA + TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1
ZIPQANT31 = is_positive(TEGL4 + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQ3 / TETONEQUO1) + 1 - is_positive(TEGL4 + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANTRWB - ZIPQANTRWA - ZIPQANTRVG - sum([ZIPQANT11, ZIPQANT21])
ZIPQRWA1 = is_positive(TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQRWA / TETONEQUO1) + 1 - is_positive(TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQRWB1
PPETOTMAY = arr(PPETOT * 81 / 100) * positif_ou_nul(arr(PPETOT * 81 / 100) - PPELIMTOT) * null(7 - V_REGCO)
ZIPQANT41 = is_positive(TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQ4 / TETONEQUO1) + 1 - is_positive(TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANTRWB - ZIPQANTRWA - ZIPQANTRVG - sum([ZIPQANT11, ZIPQANT21, ZIPQANT31])
PPEPRIME3 = arr(PPENARPRIME3)
PPEPRIMEN = arr(PPENARPRIMEN)
IMO = arr(BMI * TMOY / 100 + arr(PRODOM + PROGUY) * TX_MIN_DOM / 100) * V_CR2
ZIPQRWA2 = is_positive(TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQRWA / TETONEQUO1) + 1 - is_positive(TEGLRVG + sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQRWB2
IPQRWA2 = ZIPQRWA2 * CODNWA
IPQRWB2 = ZIPQRWB2 * CODNWB
PPEPRIMECT = PPEPRIMEC + PPEPRIMETTEC * 1 - V_CNR
PPEPRIMEU = arr(PPENARPRIMEU)
ZIPQANT1TOT = sum([ZIPQANT11, ZIPQANT21, ZIPQANT31, ZIPQANT41]) + ZIPQANTRVG + ZIPQANTRWB + ZIPQANTRWA
PPETOT2 = PPETOT
IPQRWB1 = ZIPQRWB1 * CODNWB
ZIPQANT11 = is_positive(sum([TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQ1 / TETONEQUO1) + 1 - is_positive(sum([TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANTRWB - ZIPQANTRWA - ZIPQANTRVG
ZIPQFANT41 = is_positive(TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQF4 / TETONEQUO1) + 1 - is_positive(TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - sum([ZIPQFANTV1, ZIPQFANTC1, ZIPQFANT11, ZIPQFANT21, ZIPQFANT31])
IPQFANT41 = ZIPQFANT41 * COTF4
ZIPQRCMDCANT1 = is_positive(TEGLRCMFU + TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQRCMDC / TETONEQUO1) + 1 - is_positive(TEGLRCMFU + TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT
ZIPQFANT11 = is_positive(sum([TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQF1 / TETONEQUO1) + 1 - is_positive(sum([TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - sum([ZIPQFANTV1, ZIPQFANTC1])
PPEPRIMEPAC = PPEPRIMEU + PPEPRIME1 + PPEPRIME2 + PPEPRIME3 + PPEPRIME4 + PPEPRIMEN
IPQANT31 = ZIPQANT31 * 3
ZIPQPALIMANTV1 = is_positive(sum([TEGLPALIMC, TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPALIMV / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIMC, TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT
ZIPQFANT31 = is_positive(TEGLF4 + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQF3 / TETONEQUO1) + 1 - is_positive(TEGLF4 + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - sum([ZIPQFANT11, ZIPQFANT21, ZIPQFANTV1, ZIPQFANTC1])
IPQFANT11 = ZIPQFANT11 * COTF1
ZIPQTSREMP35 = is_positive(TEGLTSREMP4M) * arr(IQUOTOT5 * TERPQTSREMP3M / TETONEQUOM1) + 1 - is_positive(TEGLTSREMP4M) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZ5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQTS5TOT - ZIPQTSREMPV5 - ZIPQTSREMPC5 - ZIPQTSREMP15 - ZIPQTSREMP25
PPETOTX = PPETOT * 1 - null(7 - V_REGCO) + PPETOTMAY
IPQTSREMP25 = ZIPQTSREMP25 * REMPLANBP2
LIGPPETOT = is_positive(PPETOT) * 1 - null(7 - V_REGCO)
ZIPQPALIMANTC1 = is_positive(sum([TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPALIMC / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANTV1
ZIPQRVG1 = is_positive(sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQRVG / TETONEQUO1) + 1 - is_positive(sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQRWB1 - ZIPQRWA1
IPQANT41 = ZIPQANT41 * 4
ZIPQPALIMANT11 = is_positive(sum([TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPALIM1 / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - sum([ZIPQPALIMANTV1, ZIPQPALIMANTC1])
ZIPQTS45 = is_positive(TEGLTSREMPTOTM) * arr(IQUOTOT5 * TERPQTS4M / TETONEQUOM1) + 1 - is_positive(TEGLTSREMPTOTM) * IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQPRRZ5TOT - ZIPQTSV5 - ZIPQTSC5 - ZIPQTS15 - ZIPQTS25 - ZIPQTS35
ZIPQFANT21 = is_positive(sum([TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQF2 / TETONEQUO1) + 1 - is_positive(sum([TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - sum([ZIPQFANT11, ZIPQFANTV1, ZIPQFANTC1])
IPQRWA1 = ZIPQRWA1 * CODNWA
LIGRSA = is_positive(PPERSATOT) * is_positive(PPETOTX) * LIG1 * LIG2
IDOM14 = max(ID14 - ADO4 * 1 - is_positive(INDCODDAJ) + ITOTDOM4 * is_positive(INDCODDAJ), IMI) * 1 - INDTXMOY + IMO * INDTXMOY
IPQFANT21 = ZIPQFANT21 * COTF2
PPERPROP = PPE_RPROP * is_positive(PPETOTX + is_positive(PPESALPTOT) + present(PPEACP) + present(PPENJP))
IPQTS35 = ZIPQTS35 * CARTSNBAP3
ZIPQPALIMANT21 = is_positive(sum([TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPALIM2 / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - sum([ZIPQPALIMANT11, ZIPQPALIMANTV1, ZIPQPALIMANTC1])
ZIPQFANTV1 = is_positive(sum([TEGLFC, TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQFV / TETONEQUO1) + 1 - is_positive(sum([TEGLFC, TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT
IPQPALIMANT21 = ZIPQPALIMANT21 * PENSALNBP2
PPESAISITPP = is_positive(PPEACP * is_positive(abs(PPERPROP)))
IDOM16 = max(ID16 - ADO6 * 1 - is_positive(INDCODDAJ) + ITOTDOM6 * is_positive(INDCODDAJ), IMI) * 1 - INDTXMOY + IMO * INDTXMOY
LIGPPEMAY = is_positive(PPETOTMAY) * null(7 - V_REGCO)
IPQFANT31 = ZIPQFANT31 * COTF3
ZIPQRCMFUANT1 = is_positive(TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQRCMFU / TETONEQUO1) + 1 - is_positive(TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMDCANT1
IPQANT11 = ZIPQANT11 * 1
ZIPQPALIMANT41 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPALIM4 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - sum([ZIPQPALIMANTV1, ZIPQPALIMANTC1, ZIPQPALIMANT11, ZIPQPALIMANT21, ZIPQPALIMANT31])
IPQPALIMANTV1 = ZIPQPALIMANTV1 * PENSALNBV
ZIPQ41 = is_positive(TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQ4 / TETONEQUO1) + 1 - is_positive(TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQRWB1 - ZIPQRWA1 - ZIPQRVG1 - sum([ZIPQ11, ZIPQ21, ZIPQ31])
IPQPALIMANT11 = ZIPQPALIMANT11 * PENSALNBP1
ZIPQRVG2 = is_positive(sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQRVG / TETONEQUO1) + 1 - is_positive(sum([TEGL1, TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQRWB2 - ZIPQRWA2
IPQTS45 = ZIPQTS45 * CARTSNBAP4
ZIPQPALIMANT31 = is_positive(TEGLPALIM4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPALIM3 / TETONEQUO1) + 1 - is_positive(TEGLPALIM4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - sum([ZIPQPALIMANTV1, ZIPQPALIMANTC1, ZIPQPALIMANT11, ZIPQPALIMANT21])
ZIPQTSREMP45 = IQUOTOT5 - ZIPQ5TOT - ZIPQF5TOT - ZIPQPALIM5TOT - ZIPQRCM5TOT - ZIPQPRR5TOT - ZIPQPRRZ5TOT - ZIPQRF5TOT - ZIPQRVO5TOT - ZIPQTS5TOT - ZIPQTSREMPV5 - ZIPQTSREMPC5 - ZIPQTSREMP15 - ZIPQTSREMP25 - ZIPQTSREMP35
IPQRCMDCANT1 = ZIPQRCMDCANT1 * REVACTNB
ZIPQANT21 = is_positive(sum([TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQ2 / TETONEQUO1) + 1 - is_positive(sum([TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANTRWB - ZIPQANTRWA - ZIPQANTRVG - ZIPQANT11
IPQPALIMANT31 = ZIPQPALIMANT31 * PENSALNBP3
PPERPROV = PPE_RPROV * is_positive(PPETOTX + is_positive(PPESALVTOT) + present(PPEACV) + present(PPENJV))
PPESAISINBJV = is_positive(PPENJV * is_positive(abs(PPERPROV)))
ZIPQ1TOT = sum([ZIPQ11, ZIPQ21, ZIPQ31, ZIPQ41]) + ZIPQRVG1 + ZIPQRWB1 + ZIPQRWA1
PPERSA = min(PPETOTX, PPERSATOT) * 1 - V_CNR
ZIPQPALIM31 = is_positive(TEGLPALIM4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPALIM3 / TETONEQUO1) + 1 - is_positive(TEGLPALIM4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - sum([ZIPQPALIMV1, ZIPQPALIMC1, ZIPQPALIM11, ZIPQPALIM21])
IPQTSREMP45 = ZIPQTSREMP45 * REMPLANBP4
IPQPALIMANTC1 = ZIPQPALIMANTC1 * PENSALNBC
ZIPQ11 = is_positive(sum([TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQ1 / TETONEQUO1) + 1 - is_positive(sum([TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQRWB1 - ZIPQRWA1 - ZIPQRVG1
ZIPQ42 = is_positive(TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQ4 / TETONEQUO1) + 1 - is_positive(TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQRWB2 - ZIPQRWA2 - ZIPQRVG2 - sum([ZIPQ12, ZIPQ22, ZIPQ32])
IPQRVG1 = ZIPQRVG1 * CODNVG
PPERPROC = PPE_RPROC * is_positive(PPETOTX + is_positive(PPESALCTOT) + present(PPEACC) + present(PPENJC))
PPESAISITPV = is_positive(PPEACV * is_positive(abs(PPERPROV)))
ZIPQ31 = is_positive(TEGL4 + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQ3 / TETONEQUO1) + 1 - is_positive(TEGL4 + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQRWB1 - ZIPQRWA1 - ZIPQRVG1 - sum([ZIPQ11, ZIPQ21])
IPQ42 = ZIPQ42 * 4
LIGPIPPE = is_positive(PPETOTX) * LIG0
ZIPQRCMDC1 = is_positive(TEGLRCMFU + TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQRCMDC / TETONEQUO1) + 1 - is_positive(TEGLRCMFU + TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT
ZIPQPALIM41 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPALIM4 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - sum([ZIPQPALIMV1, ZIPQPALIMC1, ZIPQPALIM11, ZIPQPALIM21, ZIPQPALIM31])
PPESAISINBJP = is_positive(PPENJP * is_positive(abs(PPERPROP)))
IPQFANTV1 = ZIPQFANTV1 * COTFV
IPQTSREMP35 = ZIPQTSREMP35 * REMPLANBP3
ZIPQ32 = is_positive(TEGL4 + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQ3 / TETONEQUO1) + 1 - is_positive(TEGL4 + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQRWB2 - ZIPQRWA2 - ZIPQRVG2 - sum([ZIPQ12, ZIPQ22])
INDPPEP = is_positive(sum([PPETPP1, PPETPP2, PPETPP3, PPETPP4]) * PPESALPTOT + sum([PPENBH1, PPENBH2, PPENBH3, PPENBH4]) * PPESALPTOT + PPEACP + PPENJP * abs(PPERPROP) * null(TSHALLO1 + TSHALLO2 + TSHALLO3 + TSHALLO4 + 0) + is_positive(sum([PPETPP1 + PPENBH1 + 0, PPETPP2 + PPENBH2 + 0, PPETPP3 + PPENBH3 + 0, PPETPP4 + PPENBH4 + 0])) + sum([present(CARTSP1) * present(CARTSNBAP1), present(CARTSP2) * present(CARTSNBAP2), present(CARTSP3) * present(CARTSNBAP3), present(CARTSP4) * present(CARTSNBAP4)]) * PPEPRIMEPT + abs(PPERPROP) * PPEPRIMEPT)
IPQ11 = ZIPQ11 * 1
IPQPALIM41 = ZIPQPALIM41 * PENSALNBP4
ZIPQFANTC1 = is_positive(sum([TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQFC / TETONEQUO1) + 1 - is_positive(sum([TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANTV1
IRE = 1 - is_positive(RE168 + TAX1649 + 0) * CIDIREPARGNE + EPAV + CRICH + CICORSENOW + CIGE + CIDEVDUR + CITEC + IPELUS + CICA + CIGARD + CISYND + CIPRETUD + CIADCRE + CIHABPRIN + CREFAM + CREAPP + CREAGRIBIO + CREPROSP + CRESINTER + CREFORMCHENT + CREINTERESSE + CREARTS + CICONGAGRI + CRERESTAU + CILOYIMP + AUTOVERSLIB + PPETOTX - PPERSA + CI2CK + CIFORET + CIEXCEDENT + COD8TL * 1 - is_positive(RE168 + TAX1649)
INDPPEV = is_positive(PPETPV * PPESALVTOT + PPENBHV * PPESALVTOT + is_positive(present(BPCOSAV) + present(GLDGRATV) + present(GLD1V) + present(GLD2V) + present(GLD3V) + present(TSASSUV) + present(CARTSV) * present(CARTSNBAV) + present(CODDAJ) + present(CODEAJ)) * PPEPRIMEVT + PPEMAJORETTE * null(PPEPRIMECT) + PPEACV + PPENJV * abs(PPERPROV) * null(TSHALLOV + 0) + is_positive(PPETPV + PPENBHV + 0) + abs(PPERPROV) * PPEPRIMEVT + PPEMAJORETTE * null(PPEPRIMECT))
ZIPQF21 = is_positive(sum([TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQF2 / TETONEQUO1) + 1 - is_positive(sum([TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - sum([ZIPQF11, ZIPQFV1, ZIPQFC1])
ZIPQ21 = is_positive(sum([TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQ2 / TETONEQUO1) + 1 - is_positive(sum([TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQRWB1 - ZIPQRWA1 - ZIPQRVG1 - ZIPQ11
IPQ32 = ZIPQ32 * 3
IPQRCMDC1 = ZIPQRCMDC1 * REVACTNB
ZIPQPALIMV1 = is_positive(sum([TEGLPALIMC, TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPALIMV / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIMC, TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT
ZIPQPALIM21 = is_positive(sum([TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPALIM2 / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - sum([ZIPQPALIM11, ZIPQPALIMV1, ZIPQPALIMC1])
ZIPQRCMCHANT1 = is_positive(TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQRCMCH / TETONEQUO1) + 1 - is_positive(TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMDCANT1 - ZIPQRCMFUANT1
AGREPPE = max(0, PPETOTX - PPERSA)
IPQRCMFUANT1 = ZIPQRCMFUANT1 * REVPEANB
ZIPQ12 = is_positive(sum([TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQ1 / TETONEQUO1) + 1 - is_positive(sum([TEGL2, TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQRWB2 - ZIPQRWA2 - ZIPQRVG2
IPQ31 = ZIPQ31 * 3
DEC6 = min(max(arr(SEUIL_DECOTE1 * 1 - BOOL_0AM + SEUIL_DECOTE2 * BOOL_0AM - IDOM16), 0), IDOM16) * 1 - V_ANC_BAR + min(max(arr(SEUIL_DECOTEA / 2 - IDOM16 / 2), 0), IDOM16) * V_ANC_BAR * 1 - V_CNR
IPQPALIMANT41 = ZIPQPALIMANT41 * PENSALNBP4
ZIPQFV1 = is_positive(sum([TEGLFC, TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQFV / TETONEQUO1) + 1 - is_positive(sum([TEGLFC, TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT
IPQPALIM31 = ZIPQPALIM31 * PENSALNBP3
ZIPQF11 = is_positive(sum([TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQF1 / TETONEQUO1) + 1 - is_positive(sum([TEGLF2M, TEGLF3M, TEGLF4M]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - sum([ZIPQFV1, ZIPQFC1])
IPQANT21 = ZIPQANT21 * 2
IPQFANTC1 = ZIPQFANTC1 * COTFC
IPQ41 = ZIPQ41 * 4
IPQFV1 = ZIPQFV1 * COTFV
ZIPQ22 = is_positive(sum([TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQ2 / TETONEQUO1) + 1 - is_positive(sum([TEGL3, TEGL4]) + TEGLFTOT + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQRWB2 - ZIPQRWA2 - ZIPQRVG2 - ZIPQ12
ZIPQF41 = is_positive(TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQF4 / TETONEQUO1) + 1 - is_positive(TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - sum([ZIPQFV1, ZIPQFC1, ZIPQF11, ZIPQF21, ZIPQF31])
IRE2 = IRE + BCIGA * 1 - is_positive(RE168 + TAX1649)
ZIPQPALIM11 = is_positive(sum([TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPALIM1 / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - sum([ZIPQPALIMV1, ZIPQPALIMC1])
ZIPQ2TOT = sum([ZIPQ12, ZIPQ22, ZIPQ32, ZIPQ42]) + ZIPQRVG2 + ZIPQRWB2 + ZIPQRWA2
IPQRVG2 = ZIPQRVG2 * CODNVG
PPESAISINBJC = is_positive(PPENJC * is_positive(abs(PPERPROC)))
INDPPEC = is_positive(PPETPC * PPESALCTOT + PPENBHC * PPESALCTOT + is_positive(present(BPCOSAC) + present(GLDGRATV) + present(GLD1C) + present(GLD2C) + present(GLD3C) + present(TSASSUC) + present(CARTSC) * present(CARTSNBAC) + present(CODDBJ) + present(CODEBJ)) * PPEPRIMECT + PPEACC + PPENJC * abs(PPERPROC) * null(TSHALLOC + 0) + is_positive(PPETPC + PPENBHC + 0) + abs(PPERPROC) * PPEPRIMECT)
ZIPQFV2 = is_positive(sum([TEGLFC, TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQFV / TETONEQUO1) + 1 - is_positive(sum([TEGLFC, TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT
PPEFINAL = PPETOTX - PPERSA
IPQ21 = ZIPQ21 * 2
IPQF11 = ZIPQF11 * COTF1
LIGPPEP = null(INDPPEV) * null(INDPPEC) * is_positive(INDPPEP) * TYPEPPE
ZIPQRCMFU1 = is_positive(TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQRCMFU / TETONEQUO1) + 1 - is_positive(TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCMDC1
ZIPQF31 = is_positive(TEGLF4 + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQF3 / TETONEQUO1) + 1 - is_positive(TEGLF4 + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - sum([ZIPQF11, ZIPQF21, ZIPQFV1, ZIPQFC1])
IPQF31 = ZIPQF31 * COTF3
LIGPPEVCP = is_positive(INDPPEV) * is_positive(INDPPEC) * is_positive(INDPPEP) * TYPEPPE
ZIPQF12 = is_positive(sum([TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQF1 / TETONEQUO1) + 1 - is_positive(sum([TEGLF2M, TEGLF3M, TEGLF4M]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - sum([ZIPQFV2, ZIPQFC2])
PPESAISITPC = is_positive(PPEACC * is_positive(abs(PPERPROC)))
ZIPQPALIMC1 = is_positive(sum([TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPALIMC / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIMV1
ZIPQF32 = is_positive(TEGLF4 + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQF3 / TETONEQUO1) + 1 - is_positive(TEGLF4 + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - sum([ZIPQF12, ZIPQF22, ZIPQFV2, ZIPQFC2])
IPQF21 = ZIPQF21 * COTF2
ZIPQRCMTRANT1 = is_positive(TEGLRCMGO + TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQRCMTR / TETONEQUO1) + 1 - is_positive(TEGLRCMGO + TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMDCANT1 - ZIPQRCMFUANT1 - ZIPQRCMCHANT1
IPQRCMCHANT1 = ZIPQRCMCHANT1 * PROVIENB
IPQFV2 = ZIPQFV2 * COTFV
IPQ12 = ZIPQ12 * 1
LIGPPECP = null(INDPPEV) * is_positive(INDPPEC) * is_positive(INDPPEP) * TYPEPPE
ZIPQFC1 = is_positive(sum([TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQFC / TETONEQUO1) + 1 - is_positive(sum([TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQFV1
ZIPQPALIM22 = is_positive(sum([TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPALIM2 / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - sum([ZIPQPALIM12, ZIPQPALIMV2, ZIPQPALIMC2])
LIGPPEV = is_positive(INDPPEV) * null(INDPPEC) * null(INDPPEP) * TYPEPPE
IPQ22 = ZIPQ22 * 2
IPQRCMFU1 = ZIPQRCMFU1 * REVPEANB
IPQF41 = ZIPQF41 * COTF4
ZIPQPALIMV2 = is_positive(sum([TEGLPALIMC, TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPALIMV / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIMC, TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT
IPQF32 = ZIPQF32 * COTF3
ZIPQPALIM32 = is_positive(TEGLPALIM4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPALIM3 / TETONEQUO1) + 1 - is_positive(TEGLPALIM4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - sum([ZIPQPALIMV2, ZIPQPALIMC2, ZIPQPALIM12, ZIPQPALIM22])
IPQPALIMC1 = ZIPQPALIMC1 * PENSALNBC
LIGPPEVC = is_positive(INDPPEV) * is_positive(INDPPEC) * null(INDPPEP) * TYPEPPE
ZIPQRCMCH1 = is_positive(TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQRCMCH / TETONEQUO1) + 1 - is_positive(TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCMDC1 - ZIPQRCMFU1
IPQPALIMV1 = ZIPQPALIMV1 * PENSALNBV
IPQPALIM32 = ZIPQPALIM32 * PENSALNBP3
IPQRCMTRANT1 = ZIPQRCMTRANT1 * INTERENB
ZIPQF42 = is_positive(TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQF4 / TETONEQUO1) + 1 - is_positive(TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - sum([ZIPQFV2, ZIPQFC2, ZIPQF12, ZIPQF22, ZIPQF32])
IPQPALIM11 = ZIPQPALIM11 * PENSALNBP1
ZIPQFC2 = is_positive(sum([TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQFC / TETONEQUO1) + 1 - is_positive(sum([TEGLF1, TEGLF2, TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQFV2
IPQPALIM21 = ZIPQPALIM21 * PENSALNBP2
IPQFC2 = ZIPQFC2 * COTFC
IPQPALIMV2 = ZIPQPALIMV2 * PENSALNBV
ZIPQPALIM12 = is_positive(sum([TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPALIM1 / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - sum([ZIPQPALIMV2, ZIPQPALIMC2])
IPQFC1 = ZIPQFC1 * COTFC
ZIPQPALIM42 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPALIM4 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - sum([ZIPQPALIMV2, ZIPQPALIMC2, ZIPQPALIM12, ZIPQPALIM22, ZIPQPALIM32])
ZIPQF22 = is_positive(sum([TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQF2 / TETONEQUO1) + 1 - is_positive(sum([TEGLF3, TEGLF4]) + TEGLPALIMTOT + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - sum([ZIPQF12, ZIPQFV2, ZIPQFC2])
LIGPPEVP = is_positive(INDPPEV) * null(INDPPEC) * is_positive(INDPPEP) * TYPEPPE
ZIPQRCMDC2 = is_positive(TEGLRCMFU + TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQRCMDC / TETONEQUO1) + 1 - is_positive(TEGLRCMFU + TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT
LIGPPEC = null(INDPPEV) * is_positive(INDPPEC) * null(INDPPEP) * TYPEPPE
ZIPQRCMFU2 = is_positive(TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQRCMFU / TETONEQUO1) + 1 - is_positive(TEGLRCMCH + TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCMDC2
IPQPALIM22 = ZIPQPALIM22 * PENSALNBP2
IPQF12 = ZIPQF12 * COTF1
ZIPQRCMTR1 = is_positive(TEGLRCMGO + TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQRCMTR / TETONEQUO1) + 1 - is_positive(TEGLRCMGO + TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCMDC1 - ZIPQRCMFU1 - ZIPQRCMCH1
ZIPQRCMGOANT1 = is_positive(TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQRCMGO / TETONEQUO1) + 1 - is_positive(TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMDCANT1 - ZIPQRCMFUANT1 - ZIPQRCMCHANT1 - ZIPQRCMTRANT1
IPQPALIM42 = ZIPQPALIM42 * PENSALNBP4
IPQRCMCH1 = ZIPQRCMCH1 * PROVIENB
INDLIGPPE = is_positive(LIGPPEVCP + LIGPPEV + LIGPPEVC + LIGPPEVP + LIGPPEC + LIGPPECP + LIGPPEP) * 1 - null(7 - PPENEXOV) * 1 - null(11 - PPENEXOV) * 1 - null(7 - PPENEXOC) * 1 - null(11 - PPENEXOC) * 1 - null(7 - PPENEXO1) * 1 - null(11 - PPENEXO1) * 1 - null(7 - PPENEXO2) * 1 - null(11 - PPENEXO2) * 1 - null(7 - PPENEXO3) * 1 - null(11 - PPENEXO3) * 1 - null(7 - PPENEXO4) * 1 - null(11 - PPENEXO4) * 1 - null(2 - PPEPEXOV) * 1 - null(2 - PPEPEXOC) * 1 - null(2 - PPEPEXO1) * 1 - null(2 - PPEPEXO2) * 1 - null(2 - PPEPEXO3) * 1 - null(2 - PPEPEXO4)
PPEREVSALC = is_positive(PPESALCTOT * INDLIGPPE + PPESALC * is_positive(PPEPRIMECT) * is_positive(PPETOTX)) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * INDPPEC * INDLIGPPE
ZIPQPALIMC2 = is_positive(sum([TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPALIMC / TETONEQUO1) + 1 - is_positive(sum([TEGLPALIM1, TEGLPALIM2, TEGLPALIM3, TEGLPALIM4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRCMTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIMV2
LIGPPENSC = is_positive(is_positive(is_positive(1 - null(PPE_AVRPRO1C + 0)) * is_positive(is_positive(PPETOTX) + is_positive(PPEREVSALC)) * is_positive(INDLIGPPE)) + is_positive(PPESAISITPC + PPESAISINBJC)) * INDPPEC * LIG0 * LIG2
IPQF22 = ZIPQF22 * COTF2
PPEREVSALV = is_positive(PPESALVTOT * INDLIGPPE + PPESALV * is_positive(PPEPRIMEVT) * is_positive(PPETOTX)) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * INDPPEV * INDLIGPPE
IPQPALIMC2 = ZIPQPALIMC2 * PENSALNBC
IPQF42 = ZIPQF42 * COTF4
IPQRCMDC2 = ZIPQRCMDC2 * REVACTNB
IPQRCMFU2 = ZIPQRCMFU2 * REVPEANB
PPEREVSALP = is_positive(PPESALPTOT + PPESALPTOT * INDLIGPPE + PPESALPTOT * is_positive(PPEPRIMEPT) * is_positive(PPETOTX)) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * INDPPEP * INDLIGPPE
IPQPALIM12 = ZIPQPALIM12 * PENSALNBP1
LIGPPEHV = positif_ou_nul(1820 - PPENBHV) * present(PPENBHV) * INDPPEV * is_positive(INDLIGPPE) * LIG0 * LIG2
ZIPQRCMTSANT1 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQRCMTS / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMDCANT1 - ZIPQRCMFUANT1 - ZIPQRCMCHANT1 - ZIPQRCMTRANT1 - ZIPQRCMGOANT1
LIGPPEJP = positif_ou_nul(360 - PPENJP) * is_positive(INDLIGPPE) * LIG0 * LIG2 * is_positive(PPENJP) * present(PPENJP) + is_positive(PPESAISITPP) * is_positive(PPEACP)
LIGPPEJV = positif_ou_nul(360 - PPENJV) * is_positive(INDLIGPPE) * LIG0 * LIG2 * present(PPENJV) * is_positive(PPENJV) + is_positive(PPESAISITPV) * is_positive(PPEACV)
LIGPPENSP = is_positive(is_positive(is_positive(1 - null(PPE_AVRPRO1P + 0)) * is_positive(is_positive(PPETOTX) + is_positive(PPEREVSALP)) * is_positive(INDLIGPPE)) + is_positive(PPESAISITPP + PPESAISINBJP)) * INDPPEP * LIG0 * LIG2
ZIPQRCMCH2 = is_positive(TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQRCMCH / TETONEQUO1) + 1 - is_positive(TEGLRCMTS + TEGLRCMGO + TEGLRCMTR + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCMDC2 - ZIPQRCMFU2
LIGPASPPE = INDLIGPPE * null(PPETOTX)
IPQRCMCH2 = ZIPQRCMCH2 * PROVIENB
TPLEINSALV = is_positive(PPETPV * PPESALVTOT + is_positive(PPENBHV - 1820) + PPESALVTOT * INDLIGPPE * 1 - is_positive(LIGPPEHV) + is_positive(PPEPRIMEVT) * is_positive(PPETOTX) * is_positive(PPESALV) * 1 - is_positive(LIGPPEHV) + is_positive(PPESALV) * 1 - is_positive(LIGPPEHV)) * INDPPEV * is_positive(INDLIGPPE) * LIG0 * LIG2
IPQRCMGOANT1 = ZIPQRCMGOANT1 * RESTUCNB
LIGPPEHC = positif_ou_nul(1820 - PPENBHC) * present(PPENBHC) * INDPPEC * is_positive(INDLIGPPE) * LIG0 * LIG2
LIGPPEJC = positif_ou_nul(360 - PPENJC) * is_positive(INDLIGPPE) * LIG0 * LIG2 * is_positive(PPENJC) * present(PPENJC) + is_positive(PPESAISITPC) * is_positive(PPEACC)
LIGPPENSV = is_positive(is_positive(is_positive(1 - null(PPE_AVRPRO1V + 0)) * is_positive(is_positive(PPETOTX) + is_positive(PPEREVSALV)) * is_positive(INDLIGPPE)) + is_positive(PPESAISITPV + PPESAISINBJV)) * INDPPEV * LIG0 * LIG2
IPQRCMTR1 = ZIPQRCMTR1 * INTERENB
ZIPQRCMGO1 = is_positive(TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQRCMGO / TETONEQUO1) + 1 - is_positive(TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCMDC1 - ZIPQRCMFU1 - ZIPQRCMCH1 - ZIPQRCMTR1
LIGPPEHP = is_positive(positif_ou_nul(1820 - PPENBH1) * present(PPENBH1) + positif_ou_nul(1820 - PPENBH2) * present(PPENBH2) + positif_ou_nul(1820 - PPENBH3) * present(PPENBH3) + positif_ou_nul(1820 - PPENBH4) * present(PPENBH4)) * INDPPEP * is_positive(INDLIGPPE) * LIG0 * LIG2
ZIPQRCMTS1 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQRCMTS / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCMDC1 - ZIPQRCMFU1 - ZIPQRCMCH1 - ZIPQRCMTR1 - ZIPQRCMGO1
ZIPQRCM1TOT = ZIPQRCMDC1 + ZIPQRCMFU1 + ZIPQRCMCH1 + ZIPQRCMTS1 + ZIPQRCMGO1 + ZIPQRCMTR1
TPLEINNSALV = is_positive(is_positive(PPEACV + is_positive(PPENJV - 360) + is_positive(is_positive(1 - null(PPE_AVRPRO1V + 0)) * is_positive(is_positive(PPETOTX) + is_positive(PPEREVSALV)) * is_positive(abs(PPERPROV))) * 1 - is_positive(LIGPPEJV)) * is_positive(INDLIGPPE) + is_positive(PPESAISITPV) * is_positive(PPEACV)) * INDPPEV * LIG0 * LIG2
ZIPQRCMTR2 = is_positive(TEGLRCMGO + TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQRCMTR / TETONEQUO1) + 1 - is_positive(TEGLRCMGO + TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCMDC2 - ZIPQRCMFU2 - ZIPQRCMCH2
IPQRCMTSANT1 = ZIPQRCMTSANT1 * DISQUONB
ZIPQRCMANT1TOT = ZIPQRCMDCANT1 + ZIPQRCMFUANT1 + ZIPQRCMCHANT1 + ZIPQRCMTSANT1 + ZIPQRCMGOANT1 + ZIPQRCMTRANT1
TPLEINNSALP = is_positive(is_positive(PPEACP + is_positive(PPENJP - 360) + is_positive(is_positive(1 - null(PPE_AVRPRO1P + 0)) * is_positive(is_positive(PPETOTX) + is_positive(PPEREVSALP)) * is_positive(abs(PPERPROP))) * 1 - is_positive(LIGPPEJP)) * is_positive(INDLIGPPE) + is_positive(PPESAISITPP) * is_positive(PPEACP)) * INDPPEP * LIG0 * LIG2
ZIPQRF11 = is_positive(TEGLRF2 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * arr(IQUOTOT1 * TERPQRF1 / TETONEQUO1) + 1 - is_positive(TEGLRF2 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQPRRZ1TOT
TPLEINSALP = is_positive(PPETPP1 + PPETPP2 + PPETPP3 + PPETPP4 * PPESALPTOT + is_positive(PPENBH1 - 1820) + is_positive(PPENBH2 - 1820) + is_positive(PPENBH3 - 1820) + is_positive(PPENBH4 - 1820) + PPESALPTOT * INDLIGPPE * 1 - is_positive(LIGPPEHP) + is_positive(PPEPRIMEPT) * is_positive(PPETOTX) * is_positive(PPESALPTOT) * 1 - is_positive(LIGPPEHP) + is_positive(PPESALPTOT) * 1 - is_positive(LIGPPEHP)) * INDPPEP * is_positive(INDLIGPPE) * LIG0 * LIG2
TPLEINSALC = is_positive(PPETPC * PPESALCTOT + PPESALCTOT * INDLIGPPE * 1 - is_positive(LIGPPEHC) + is_positive(PPENBHC - 1820) + is_positive(PPEPRIMECT) * is_positive(PPETOTX) * is_positive(PPESALC) * 1 - is_positive(LIGPPEHC) + is_positive(PPESALC) * 1 - is_positive(LIGPPEHC)) * INDPPEC * is_positive(INDLIGPPE) * LIG0 * LIG2
ZIPQRF21 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * arr(IQUOTOT1 * TERPQRF2 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQRF11 - ZIPQPRRZ1TOT
ZIPQRVO1 = is_positive(TEGLRVO5 + TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOT1 * TERPQRVO / TETONEQUO1) + 1 - is_positive(TEGLRVO5 + TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQRF1TOT - ZIPQPRRZ1TOT
ZIPQRVO51 = is_positive(TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOT1 * TERPQRVO5 / TETONEQUO1) + 1 - is_positive(TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQRF1TOT - ZIPQRVO1 - ZIPQPRRZ1TOT
TPLEINNSALC = is_positive(is_positive(PPEACC + is_positive(PPENJC - 360) + is_positive(is_positive(1 - null(PPE_AVRPRO1C + 0)) * is_positive(is_positive(PPETOTX) + is_positive(PPEREVSALC)) * is_positive(abs(PPERPROC))) * 1 - is_positive(LIGPPEJC)) * is_positive(INDLIGPPE) + is_positive(PPESAISITPC) * is_positive(PPEACC)) * INDPPEC * LIG0 * LIG2
ZIPQRCMGO2 = is_positive(TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQRCMGO / TETONEQUO1) + 1 - is_positive(TEGLRCMTS + TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCMDC2 - ZIPQRCMFU2 - ZIPQRCMCH2 - ZIPQRCMTR2
ZIPQRVO61 = is_positive(TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOT1 * TERPQRVO6 / TETONEQUO1) + 1 - is_positive(TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQRF1TOT - ZIPQRVO1 - ZIPQRVO51 - ZIPQPRRZ1TOT
ZIPQRVOANT1 = is_positive(TEGLRVO5 + TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOTANT1 * TERPQRVO / TETONEQUO1) + 1 - is_positive(TEGLRVO5 + TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQRFANT1TOT - ZIPQPRRANTZ1TOT
IPQRCMGO1 = ZIPQRCMGO1 * RESTUCNB
IPQRCMGO2 = ZIPQRCMGO2 * RESTUCNB
ZIPQPRRV1 = is_positive(sum([TEGLPRRC, TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRRV / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRC, TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT
IPQRCMTR2 = ZIPQRCMTR2 * INTERENB
ZIPQRCMTS2 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQRCMTS / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLPRRTOT + TEGLPRRZTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCMDC2 - ZIPQRCMFU2 - ZIPQRCMCH2 - ZIPQRCMTR2 - ZIPQRCMGO2
ZIPQPRRZV1 = is_positive(sum([TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRRZV / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT
IPQRF21 = ZIPQRF21 * REAMORNB
ZIPQPRRZC1 = is_positive(sum([TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRRZC / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRRZV1
IPQRCMTS1 = ZIPQRCMTS1 * DISQUONB
IPQRVOANT1 = ZIPQRVOANT1 * RENTAXNB
ZIPQPRRZ11 = is_positive(sum([TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRRZ1 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRRZV1 - ZIPQPRRZC1
ZIPQPRRANTZV1 = is_positive(sum([TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRRZV / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT
IPQRCMTS2 = ZIPQRCMTS2 * DISQUONB
ZIPQRFANT11 = is_positive(TEGLRF2 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * arr(IQUOTOTANT1 * TERPQRF1 / TETONEQUO1) + 1 - is_positive(TEGLRF2 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQPRRANTZ1TOT
IPQPRRZV1 = ZIPQPRRZV1 * CODNAZ
ZIPQPRRC1 = is_positive(sum([TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRRC / TETONEQUO1) + 1 - is_positive(sum([TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRRV1
ZIPQRVO71 = is_positive(TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOT1 * TERPQRVO7 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQRF1TOT - ZIPQPRRZ1TOT - ZIPQRVO1 - ZIPQRVO51 - ZIPQRVO61
IPQPRRZ11 = ZIPQPRRZ11 * CODNCZ
ZIPQRCM2TOT = ZIPQRCMDC2 + ZIPQRCMFU2 + ZIPQRCMCH2 + ZIPQRCMTS2 + ZIPQRCMGO2 + ZIPQRCMTR2
ZIPQPRRZV2 = is_positive(sum([TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRRZV / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT
ZIPQPRRANTV1 = is_positive(sum([TEGLPRRC, TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRRV / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRC, TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT
IPQRFANT11 = ZIPQRFANT11 * FONCINB
IPQRVO1 = ZIPQRVO1 * RENTAXNB
ZIPQPRRZ21 = is_positive(sum([TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRRZ2 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRRZV1 - ZIPQPRRZC1 - ZIPQPRRZ11
IPQRVO61 = ZIPQRVO61 * RENTAXNB6
IPQRF11 = ZIPQRF11 * FONCINB
IPQPRRANTV1 = ZIPQPRRANTV1 * CARPENBAV
IPQRVO71 = ZIPQRVO71 * RENTAXNB7
IPQRVO51 = ZIPQRVO51 * RENTAXNB5
ZIPQPRRZ31 = is_positive(TEGLPRRZ4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRRZ3 / TETONEQUO1) + 1 - is_positive(TEGLPRRZ4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRRZV1 - ZIPQPRRZC1 - ZIPQPRRZ11 - ZIPQPRRZ21
IPQPRRC1 = ZIPQPRRC1 * CARPENBAC
ZIPQPRRV2 = is_positive(sum([TEGLPRRC, TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRRV / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRC, TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT
IPQPRRZ21 = ZIPQPRRZ21 * CODNDZ
ZIPQRVO5ANT1 = is_positive(TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOTANT1 * TERPQRVO5 / TETONEQUO1) + 1 - is_positive(TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1 - ZIPQPRRANTZ1TOT
ZIPQRVO1TOT = ZIPQRVO1 + ZIPQRVO51 + ZIPQRVO61 + ZIPQRVO71
IPQPRRZ31 = ZIPQPRRZ31 * CODNEZ
IPQRVO5ANT1 = ZIPQRVO5ANT1 * RENTAXNB5
IPQPRRZC1 = ZIPQPRRZC1 * CODNBZ
IPQPRRV1 = ZIPQPRRV1 * CARPENBAV
ZIPQRF12 = is_positive(TEGLRF2 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * arr(IQUOTOT2 * TERPQRF1 / TETONEQUO1) + 1 - is_positive(TEGLRF2 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQPRRZ2TOT
ZIPQPRRANTZC1 = is_positive(sum([TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRRZC / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANTZV1
ZIPQPRRZ41 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRRZ4 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRRZV1 - ZIPQPRRZC1 - ZIPQPRRZ11 - ZIPQPRRZ21 - ZIPQPRRZ31
ZIPQRFANT21 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * arr(IQUOTOTANT1 * TERPQRF2 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQRFANT11 - ZIPQPRRANTZ1TOT
ZIPQTSV1 = is_positive(sum([TEGLTSC, TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOT1 * TERPQTSV / TETONEQUO1) + 1 - is_positive(sum([TEGLTSC, TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQPRRZ1TOT
ZIPQRVO6ANT1 = is_positive(TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOTANT1 * TERPQRVO6 / TETONEQUO1) + 1 - is_positive(TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1 - ZIPQRVO5ANT1 - ZIPQPRRANTZ1TOT
ZIPQPRR11 = is_positive(sum([TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRR1 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRRV1 - ZIPQPRRC1
IPQPRRANTZV1 = ZIPQPRRANTZV1 * CODNAZ
IPQPRRV2 = ZIPQPRRV2 * CARPENBAV
ZIPQPRRZC2 = is_positive(sum([TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRRZC / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRRZV2
ZIPQPRRZ12 = is_positive(sum([TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRRZ1 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRRZV2 - ZIPQPRRZC2
ZIPQTSC1 = is_positive(sum([TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOT1 * TERPQTSC / TETONEQUO1) + 1 - is_positive(sum([TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQPRRZ1TOT - ZIPQTSV1
ZIPQPRRANTC1 = is_positive(sum([TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRRC / TETONEQUO1) + 1 - is_positive(sum([TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANTV1
IPQPRRZ41 = ZIPQPRRZ41 * CODNFZ
ZIPQPRRANTZ11 = is_positive(sum([TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRRZ1 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANTZV1 - ZIPQPRRANTZC1
IPQPRR11 = ZIPQPRR11 * CARPENBAP1
ZIPQRVO7ANT1 = is_positive(TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOTANT1 * TERPQRVO7 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQPRRANTZ1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1 - ZIPQRVO5ANT1 - ZIPQRVO6ANT1
ZIPQTSREMPV1 = is_positive(sum([TEGLTSREMPC, TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOT1 * TERPQTSREMPV / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMPC, TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQPRRZ1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQTS1TOT
ZIPQRVO2 = is_positive(TEGLRVO5 + TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOT2 * TERPQRVO / TETONEQUO1) + 1 - is_positive(TEGLRVO5 + TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQRF2TOT - ZIPQPRRZ2TOT
IPQRF12 = ZIPQRF12 * FONCINB
IPQPRRZV2 = ZIPQPRRZV2 * CODNAZ
IPQRFANT21 = ZIPQRFANT21 * REAMORNB
IPQRVO2 = ZIPQRVO2 * RENTAXNB
ZIPQRVOANT1TOT = ZIPQRVOANT1 + ZIPQRVO5ANT1 + ZIPQRVO6ANT1 + ZIPQRVO7ANT1
ZIPQTSREMPC1 = is_positive(sum([TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOT1 * TERPQTSREMPC / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQPRRZ1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQTS1TOT - ZIPQTSREMPV1
IPQPRRZC2 = ZIPQPRRZC2 * CODNBZ
ZIPQTSREMPANTV1 = is_positive(sum([TEGLTSREMPC, TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOTANT1 * TERPQTSREMPV / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMPC, TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQPRRANTZ1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQTSANT1TOT
ZIPQRVO52 = is_positive(TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOT2 * TERPQRVO5 / TETONEQUO1) + 1 - is_positive(TEGLRVO6 + TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQRF2TOT - ZIPQRVO2 - ZIPQPRRZ2TOT
IPQTSREMPC1 = ZIPQTSREMPC1 * REMPLANBC
ZIPQPRRZ22 = is_positive(sum([TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRRZ2 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRRZV2 - ZIPQPRRZC2 - ZIPQPRRZ12
IPQPRRANTZC1 = ZIPQPRRANTZC1 * CODNBZ
IPQRVO52 = ZIPQRVO52 * RENTAXNB5
IPQPRRANTC1 = ZIPQPRRANTC1 * CARPENBAC
ZIPQRVO62 = is_positive(TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOT2 * TERPQRVO6 / TETONEQUO1) + 1 - is_positive(TEGLRVO7 + TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQRF2TOT - ZIPQRVO2 - ZIPQRVO52 - ZIPQPRRZ2TOT
IPQ1001 = IPQRWB1 + IPQRWA1 + IPQRVG1 + sum([IPQ11, IPQ21, IPQ31, IPQ41]) + sum([IPQFV1, IPQFC1, IPQF11, IPQF21, IPQF31, IPQF41]) + sum([IPQPALIMV1, IPQPALIMC1, IPQPALIM11, IPQPALIM21, IPQPALIM31, IPQPALIM41]) + sum([IPQTSV1, IPQTSC1, IPQTS11, IPQTS21, IPQTS31, IPQTS41]) + sum([IPQTSREMPV1, IPQTSREMPC1, IPQTSREMP11, IPQTSREMP21, IPQTSREMP31, IPQTSREMP41]) + IPQRF11 + IPQRF21 + sum([IPQPRRV1 + IPQPRRZV1, IPQPRRC1 + IPQPRRZC1, IPQPRR11 + IPQPRRZ11, IPQPRR21 + IPQPRRZ21, IPQPRR31 + IPQPRRZ31, IPQPRR41 + IPQPRRZ41]) + IPQRCMDC1 + IPQRCMFU1 + IPQRCMCH1 + IPQRCMTS1 + IPQRCMGO1 + IPQRCMTR1 + IPQRVO1 + IPQRVO51 + IPQRVO61 + IPQRVO71
ZIPQPRR21 = is_positive(sum([TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRR2 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRRV1 - ZIPQPRRC1 - ZIPQPRR11
IPQTSC1 = ZIPQTSC1 * CARTSNBAC
ZIPQPRRC2 = is_positive(sum([TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRRC / TETONEQUO1) + 1 - is_positive(sum([TEGLPRR1, TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRRV2
IPQ1 = IPQ01 * EXO1 + IPQ1001
IPQTSREMPV1 = ZIPQTSREMPV1 * REMPLANBV
ZIPQPRR31 = is_positive(TEGLPRR4 + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRR3 / TETONEQUO1) + 1 - is_positive(TEGLPRR4 + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRRV1 - ZIPQPRRC1 - ZIPQPRR11 - ZIPQPRR21
ZIPQRF22 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * arr(IQUOTOT2 * TERPQRF2 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQRF12 - ZIPQPRRZ2TOT
IPQTSREMPANTV1 = ZIPQTSREMPANTV1 * REMPLANBV
ZIPQPRRZ32 = is_positive(TEGLPRRZ4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRRZ3 / TETONEQUO1) + 1 - is_positive(TEGLPRRZ4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRRZV2 - ZIPQPRRZC2 - ZIPQPRRZ12 - ZIPQPRRZ22
IPQRVO7ANT1 = ZIPQRVO7ANT1 * RENTAXNB7
ZIPQPRR12 = is_positive(sum([TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRR1 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRRV2 - ZIPQPRRC2
IQUODAJ1 = arr(IPQ1001 * TERPQ4V + TERPQ4C / TERPQ4TVC + TERPQTSV + TERPQTSC)
IPQPRRZ12 = ZIPQPRRZ12 * CODNCZ
IPQRVO62 = ZIPQRVO62 * RENTAXNB6
ZIPQTSREMP11 = is_positive(sum([TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOT1 * TERPQTSREMP1 / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQPRRZ1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQTS1TOT - ZIPQTSREMPV1 - ZIPQTSREMPC1
ZIPQTSREMPANTC1 = is_positive(sum([TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOTANT1 * TERPQTSREMPC / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQPRRANTZ1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQTSANT1TOT - ZIPQTSREMPANTV1
IQUORAJ31 = arr(IPQ1001 * TERPQ4RAJV + TERPQ4RBJC / TERPQ4TVC + TERPQTSV + TERPQTSC)
IPQTSV1 = ZIPQTSV1 * CARTSNBAV
ZIPQPRR41 = is_positive(sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT1 * TERPQPRR4 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRRV1 - ZIPQPRRC1 - ZIPQPRR11 - ZIPQPRR21 - ZIPQPRR31
ZIPQPRRANT11 = is_positive(sum([TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRR1 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRR2, TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANTV1 - ZIPQPRRANTC1
IPQPRR41 = ZIPQPRR41 * CARPENBAP4
IPQRF22 = ZIPQRF22 * REAMORNB
ZIPQTSANTV1 = is_positive(sum([TEGLTSC, TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOTANT1 * TERPQTSV / TETONEQUO1) + 1 - is_positive(sum([TEGLTSC, TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQPRRANTZ1TOT
IPQRVO6ANT1 = ZIPQRVO6ANT1 * RENTAXNB6
IPQPRRANTZ11 = ZIPQPRRANTZ11 * CODNCZ
IPQPRRZ22 = ZIPQPRRZ22 * CODNDZ
CRCFA = arr(IPQ1 * REGCI / RB018XR + TONEQUO) * 1 - is_positive(RE168 + TAX1649)
IPQPRRZ32 = ZIPQPRRZ32 * CODNEZ
IPQPRRANT11 = ZIPQPRRANT11 * CARPENBAP1
ZIPQPRRANTZ21 = is_positive(sum([TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRRZ2 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANTZV1 - ZIPQPRRANTZC1 - ZIPQPRRANTZ11
IPQPRR31 = ZIPQPRR31 * CARPENBAP3
ZIPQTS11 = is_positive(sum([TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOT1 * TERPQTS1 / TETONEQUO1) + 1 - is_positive(sum([TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQPRRZ1TOT - ZIPQTSV1 - ZIPQTSC1
ABADO1 = arr(min(IPRODOM1 + IQUODAJ1 * TX_RABDOM / 100, PLAF_RABDOM))
ZIPQTSREMP21 = is_positive(sum([TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOT1 * TERPQTSREMP2 / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQPRRZ1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQTS1TOT - ZIPQTSREMPV1 - ZIPQTSREMPC1 - ZIPQTSREMP11
IPQPRRC2 = ZIPQPRRC2 * CARPENBAC
IQUODAJ31 = arr(IPQ1001 * TERPQ4V + TERPQ4C / TERPQ4TVC + TERPQTSV + TERPQTSC)
IPQTSREMPANTC1 = ZIPQTSREMPANTC1 * REMPLANBC
ABADON31 = arr(min(IPQ1 * TX_RABDOM / 100 * PRODOM * max(0, 1 - V_EAD - V_EAG) / RG + V_EAD, PLAF_RABDOM)) + arr(min(IPQ1 * TX_RABGUY / 100 * PROGUY * max(0, 1 - V_EAD - V_EAG) / RG + V_EAG, PLAF_RABGUY))
INETABADAJ1 = max(0, IPRODOM1 + IQUODAJ1 - ABADO1)
ZIPQTSREMPANT11 = is_positive(sum([TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOTANT1 * TERPQTSREMP1 / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQPRRANTZ1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQTSANT1TOT - ZIPQTSREMPANTV1 - ZIPQTSREMPANTC1
IPQPRR21 = ZIPQPRR21 * CARPENBAP2
ZIPQTS21 = is_positive(sum([TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOT1 * TERPQTS2 / TETONEQUO1) + 1 - is_positive(sum([TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQPRRZ1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQTSV1 - ZIPQTSC1 - ZIPQTS11
INDTXMIN = positif_ou_nul(IMI - IPQ1) * is_positive(1 - INDTXMOY) * V_CR2
ZIPQPRRZ42 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRRZ4 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRRZV2 - ZIPQPRRZC2 - ZIPQPRRZ12 - ZIPQPRRZ22 - ZIPQPRRZ32
IPQTSREMPANT11 = ZIPQTSREMPANT11 * REMPLANBP1
IPQPRRANTZ21 = ZIPQPRRANTZ21 * CODNDZ
IPQTS21 = ZIPQTS21 * CARTSNBAP2
IPQTS11 = ZIPQTS11 * CARTSNBAP1
IQUORAJ1 = arr(IPQ1001 * TERPQ4RAJV + TERPQ4RBJC / TERPQ4TVC + TERPQTSV + TERPQTSC)
IPQTSREMP21 = ZIPQTSREMP21 * REMPLANBP2
ZIPQTSREMP31 = is_positive(TEGLTSREMP4) * arr(IQUOTOT1 * TERPQTSREMP3 / TETONEQUO1) + 1 - is_positive(TEGLTSREMP4) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQPRRZ1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQTS1TOT - ZIPQTSREMPV1 - ZIPQTSREMPC1 - ZIPQTSREMP11 - ZIPQTSREMP21
IPQTSREMP11 = ZIPQTSREMP11 * REMPLANBP1
IPQANT1001 = IPQANTRWB + IPQANTRWA + IPQANTRVG + sum([IPQANT11, IPQANT21, IPQANT31, IPQANT41]) + sum([IPQFANTV1, IPQFANTC1, IPQFANT11, IPQFANT21, IPQFANT31, IPQFANT41]) + sum([IPQPALIMANTV1, IPQPALIMANTC1, IPQPALIMANT11, IPQPALIMANT21, IPQPALIMANT31, IPQPALIMANT41]) + sum([IPQTSANTV1, IPQTSANTC1, IPQTSANT11, IPQTSANT21, IPQTSANT31, IPQTSANT41]) + sum([IPQTSREMPV1, IPQTSREMPC1, IPQTSREMP11, IPQTSREMP21, IPQTSREMP31, IPQTSREMP41]) + IPQRFANT11 + IPQRFANT21 + sum([IPQPRRANTV1 + IPQPRRANTZV1, IPQPRRANTC1 + IPQPRRANTZC1, IPQPRRANT11 + IPQPRRANTZ11, IPQPRRANT21 + IPQPRRANTZ21, IPQPRRANT31 + IPQPRRANTZ31, IPQPRRANT41 + IPQPRRANTZ41]) + IPQRCMDCANT1 + IPQRCMFUANT1 + IPQRCMCHANT1 + IPQRCMTSANT1 + IPQRCMGOANT1 + IPQRCMTRANT1 + IPQRVOANT1 + IPQRVO5ANT1 + IPQRVO6ANT1 + IPQRVO7ANT1
IPQPRR12 = ZIPQPRR12 * CARPENBAP1
ZIPQRVO72 = is_positive(TEGLTSTOT + TEGLTSREMPTOT) * arr(IQUOTOT2 * TERPQRVO7 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQRF2TOT - ZIPQPRRZ2TOT - ZIPQRVO2 - ZIPQRVO52 - ZIPQRVO62
LIG74 = 1 - present(IND_TDR) * 1 - INDTXMIN * is_positive(LIG1500 + LIG1510 + LIG1500YT + LIG1510YT) * LIG2
ZIPQPRRANTZ31 = is_positive(TEGLPRRZ4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRRZ3 / TETONEQUO1) + 1 - is_positive(TEGLPRRZ4 + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANTZV1 - ZIPQPRRANTZC1 - ZIPQPRRANTZ11 - ZIPQPRRANTZ21
ID11 = arr(IPQ1 * arr(RI1 + REVQUOQHT) / arr(RB01 + TONEQUO))
IPQTSREMP31 = ZIPQTSREMP31 * REMPLANBP3
LIG1522 = 1 - present(IND_TDR) * 1 - INDTXMIN * 1 - INDTXMOY * V_CR2 * LIG2
ZIPQPRR22 = is_positive(sum([TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRR2 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRRV2 - ZIPQPRRC2 - ZIPQPRR12
IQUOEAJ31 = max(0, IPQ1001 - IQUORAJ31 - IQUODAJ31)
ZIPQTSANTC1 = is_positive(sum([TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOTANT1 * TERPQTSC / TETONEQUO1) + 1 - is_positive(sum([TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQPRRANTZ1TOT - ZIPQTSANTV1
ZIPQPRRANT21 = is_positive(sum([TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRR2 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRR3, TEGLPRR4]) + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANTV1 - ZIPQPRRANTC1 - ZIPQPRRANT11
ZIPQTSREMPANT21 = is_positive(sum([TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOTANT1 * TERPQTSREMP2 / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQPRRANTZ1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQTSANT1TOT - ZIPQTSREMPANTV1 - ZIPQTSREMPANTC1 - ZIPQTSREMPANT11
ZIPQRVO2TOT = ZIPQRVO2 + ZIPQRVO52 + ZIPQRVO62 + ZIPQRVO72
LIG1545 = 1 - present(IND_TDR) * INDTXMIN * is_positive(IND_REV) * LIG2
IPQTSANTV1 = ZIPQTSANTV1 * CARTSNBAV
LIGIBAEX = is_positive(REVQTOT) * LIG1 * LIG2 * 1 - INDTXMIN * 1 - INDTXMOY * 1 - null(2 - V_REGCO) * 1 - LIG1522 * 1 - null(4 - V_REGCO)
ZIPQPRRANT31 = is_positive(TEGLPRR4 + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRR3 / TETONEQUO1) + 1 - is_positive(TEGLPRR4 + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANTV1 - ZIPQPRRANTC1 - ZIPQPRRANT11 - ZIPQPRRANT21
LIG3740 = is_positive(INDTXMIN) * LIG1 * is_positive(IND_REV) * 1 - is_positive(ANNUL2042)
ZIPQTSREMPANT31 = is_positive(TEGLTSREMP4) * arr(IQUOTOTANT1 * TERPQTSREMP3 / TETONEQUO1) + 1 - is_positive(TEGLTSREMP4) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQPRRANTZ1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQTSANT1TOT - ZIPQTSREMPANTV1 - ZIPQTSREMPANTC1 - ZIPQTSREMPANT11 - ZIPQTSREMPANT21
ZIPQPRRANT41 = is_positive(sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRR4 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANTV1 - ZIPQPRRANTC1 - ZIPQPRRANT11 - ZIPQPRRANT21 - ZIPQPRRANT31
IPQPRRANT21 = ZIPQPRRANT21 * CARPENBAP2
ABADO31 = arr(min(IPRODOM1 + IQUODAJ31 * TX_RABDOM / 100, PLAF_RABDOM))
IPQTSREMPANT21 = ZIPQTSREMPANT21 * REMPLANBP2
ABADON1 = arr(min(ID11 * TX_RABDOM / 100 * PRODOM * max(0, 1 - V_EAD - V_EAG) / RG + V_EAD, PLAF_RABDOM)) + arr(min(ID11 * TX_RABGUY / 100 * PROGUY * max(0, 1 - V_EAD - V_EAG) / RG + V_EAG, PLAF_RABGUY))
IPQANT1 = IPQANT01 * EXO1 + IPQANT1001
ZIPQTSREMPV2 = is_positive(sum([TEGLTSREMPC, TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOT2 * TERPQTSREMPV / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMPC, TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQPRRZ2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQTS2TOT
IQUOEAJ1 = max(0, IPQ1001 - IQUODAJ1 - IQUORAJ1)
ZIPQTSREMPANT41 = IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQPRRANTZ1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQTSANT1TOT - ZIPQTSREMPANTV1 - ZIPQTSREMPANTC1 - ZIPQTSREMPANT11 - ZIPQTSREMPANT21 - ZIPQTSREMPANT31
LIG75 = 1 - INDTXMIN * 1 - INDTXMOY * 1 - LIG1500 + LIG1500YT * 1 - LIG1510 + LIG1510YT * INDREV1A8 * LIG2
IPQTSREMPANT41 = ZIPQTSREMPANT41 * REMPLANBP4
IPQPRRANT41 = ZIPQPRRANT41 * CARPENBAP4
ZIPQTS31 = is_positive(TEGLTS4 + TEGLTSREMPTOT) * arr(IQUOTOT1 * TERPQTS3 / TETONEQUO1) + 1 - is_positive(TEGLTS4 + TEGLTSREMPTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQPRRZ1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQTSV1 - ZIPQTSC1 - ZIPQTS11 - ZIPQTS21
INETABADAJ31 = max(0, IPRODOM1 + IQUODAJ31 - ABADO31)
ZIPQTSV2 = is_positive(sum([TEGLTSC, TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOT2 * TERPQTSV / TETONEQUO1) + 1 - is_positive(sum([TEGLTSC, TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQPRRZ2TOT
ZIPQTS41 = is_positive(TEGLTSREMPTOT) * arr(IQUOTOT1 * TERPQTS4 / TETONEQUO1) + 1 - is_positive(TEGLTSREMPTOT) * IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQPRRZ1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQTSV1 - ZIPQTSC1 - ZIPQTS11 - ZIPQTS21 - ZIPQTS31
ABADO = arr(min(ID11 * TX_RABDOM / 100 * PRODOM * max(0, 1 - V_EAD - V_EAG) / RG + V_EAD, PLAF_RABDOM)) * 1 - is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ)) + ABADO1 * is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ))
IMPFHQ1 = 1 - is_positive(VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS) * EXO1 * arr(ID11 * IPQ01 / IPQ1)
IMT12 = max(ID11, IMI) * 1 - INDTXMOY + IMO * INDTXMOY
ZIPQTSREMP41 = IQUOTOT1 - ZIPQ1TOT - ZIPQF1TOT - ZIPQPALIM1TOT - ZIPQRCM1TOT - ZIPQPRR1TOT - ZIPQPRRZ1TOT - ZIPQRF1TOT - ZIPQRVO1TOT - ZIPQTS1TOT - ZIPQTSREMPV1 - ZIPQTSREMPC1 - ZIPQTSREMP11 - ZIPQTSREMP21 - ZIPQTSREMP31
IPQTSREMPV2 = ZIPQTSREMPV2 * REMPLANBV
IPQTSREMP41 = ZIPQTSREMP41 * REMPLANBP4
IPQPRRZ42 = ZIPQPRRZ42 * CODNFZ
IPQRVO72 = ZIPQRVO72 * RENTAXNB7
ZIPQPRRANTZ41 = is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOTANT1 * TERPQPRRZ4 / TETONEQUO1) + 1 - is_positive(TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANTZV1 - ZIPQPRRANTZC1 - ZIPQPRRANTZ11 - ZIPQPRRANTZ21 - ZIPQPRRANTZ31
IPQPRRANTZ41 = ZIPQPRRANTZ41 * CODNFZ
IPQPRRANTZ31 = ZIPQPRRANTZ31 * CODNEZ
ZIPQPRR32 = is_positive(TEGLPRR4 + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRR3 / TETONEQUO1) + 1 - is_positive(TEGLPRR4 + sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRRV2 - ZIPQPRRC2 - ZIPQPRR12 - ZIPQPRR22
ISNETDAJ31 = arr(INETABADAJ31 * IPRODOM1 / IPRODOM1 + IQUODAJ31)
ABAGU31 = arr(min(IPROGUY1 + IQUOEAJ31 * TX_RABGUY / 100, PLAF_RABGUY))
IPQTSANTC1 = ZIPQTSANTC1 * CARTSNBAC
ZIPQPRR42 = is_positive(sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * arr(IQUOTOT2 * TERPQPRR4 / TETONEQUO1) + 1 - is_positive(sum([TEGLPRRZV, TEGLPRRZC, TEGLPRRZ1, TEGLPRRZ2, TEGLPRRZ3, TEGLPRRZ4]) + TEGLTSTOT + TEGLTSREMPTOT + TEGLRVOTOT + TEGLRFTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRRV2 - ZIPQPRRC2 - ZIPQPRR12 - ZIPQPRR22 - ZIPQPRR32
ABATOT31 = ABADO31 + ABAGU31
INETABAEAJ31 = max(0, IPROGUY1 + IQUOEAJ31 - ABAGU31)
IPQPRR22 = ZIPQPRR22 * CARPENBAP2
ADO31 = ABADON31 * 1 - is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ)) + ABATOT31 * is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ))
IPQ1002 = IPQRWB2 + IPQRWA2 + IPQRVG2 + sum([IPQ12, IPQ22, IPQ32, IPQ42]) + sum([IPQFV2, IPQFC2, IPQF12, IPQF22, IPQF32, IPQF42]) + sum([IPQPALIMV2, IPQPALIMC2, IPQPALIM12, IPQPALIM22, IPQPALIM32, IPQPALIM42]) + sum([IPQTSV2, IPQTSC2, IPQTS12, IPQTS22, IPQTS32, IPQTS42]) + sum([IPQTSREMPV2, IPQTSREMPC2, IPQTSREMP12, IPQTSREMP22, IPQTSREMP32, IPQTSREMP42]) + IPQRF11 + IPQRF21 + sum([IPQPRRV2 + IPQPRRZV2, IPQPRRC2 + IPQPRRZC2, IPQPRR12 + IPQPRRZ12, IPQPRR22 + IPQPRRZ22, IPQPRR32 + IPQPRRZ32, IPQPRR42 + IPQPRRZ42]) + IPQRCMDC2 + IPQRCMFU2 + IPQRCMCH2 + IPQRCMTS2 + IPQRCMGO2 + IPQRCMTR2 + IPQRVO2 + IPQRVO52 + IPQRVO62 + IPQRVO72
ZIPQTSANT11 = is_positive(sum([TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOTANT1 * TERPQTS1 / TETONEQUO1) + 1 - is_positive(sum([TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQPRRANTZ1TOT - ZIPQTSANTV1 - ZIPQTSANTC1
IPQTSANT11 = ZIPQTSANT11 * CARTSNBAP1
ZIPQTSC2 = is_positive(sum([TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOT2 * TERPQTSC / TETONEQUO1) + 1 - is_positive(sum([TEGLTS1, TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQPRRZ2TOT - ZIPQTSV2
ABAGU1 = arr(min(IPROGUY1 + IQUOEAJ1 * TX_RABGUY / 100, PLAF_RABGUY))
IPQTS41 = ZIPQTS41 * CARTSNBAP4
ITOTDOM31 = IMETRO31 + IQUORAJ31 + INETABADAJ31 + INETABAEAJ31
IQUODAJ2 = arr(IPQ1002 * TERPQ4V + TERPQ4C / TERPQ4TVC + TERPQTSV + TERPQTSC)
IPQPRR32 = ZIPQPRR32 * CARPENBAP3
IDANT11 = arr(IPQANT1 * arr(RI1 + REVQUOQHT) / arr(RB01 + TONEQUO))
IQNETDAJ31 = arr(INETABADAJ31 * IQUODAJ31 / IPRODOM1 + IQUODAJ31)
IPQTSREMPANT31 = ZIPQTSREMPANT31 * REMPLANBP3
IPQPRRANT31 = ZIPQPRRANT31 * CARPENBAP3
IMPFHQANT1 = 1 - is_positive(VARIPTEFN * is_positive(ART1731BIS) + IPTEFN * 1 - ART1731BIS) * EXO1 * arr(IDANT11 * IPQANT01 / IPQANT1)
ZIPQTSREMPC2 = is_positive(sum([TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOT2 * TERPQTSREMPC / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMP1, TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQPRRZ2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQTS2TOT - ZIPQTSREMPV2
IPQTS31 = ZIPQTS31 * CARTSNBAP3
ISNETEAJ31 = max(0, INETABAEAJ31 - ISNETDAJ31)
IQNETEAJ31 = max(0, INETABAEAJ31 - IQNETDAJ31)
IPQ2 = IPQ02 * EXO1 + IPQ1002
ZIPQTSANT21 = is_positive(sum([TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOTANT1 * TERPQTS2 / TETONEQUO1) + 1 - is_positive(sum([TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQPRRANTZ1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQTSANTV1 - ZIPQTSANTC1 - ZIPQTSANT11
IPQTSV2 = ZIPQTSV2 * CARTSNBAV
INETABAEAJ1 = max(0, IPROGUY1 + IQUOEAJ1 - ABAGU1)
IPQPRR42 = ZIPQPRR42 * CARPENBAP4
ABADO2 = arr(min(IPRODOM2 + IQUODAJ2 * TX_RABDOM / 100, PLAF_RABDOM))
ZIPQTS12 = is_positive(sum([TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOT2 * TERPQTS1 / TETONEQUO1) + 1 - is_positive(sum([TEGLTS2, TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQPRRZ2TOT - ZIPQTSV2 - ZIPQTSC2
ABADON32 = arr(min(IPQ2 * TX_RABDOM / 100 * PRODOM * max(0, 1 - V_EAD - V_EAG) / RG + V_EAD, PLAF_RABDOM)) + arr(min(IPQ2 * TX_RABGUY / 100 * PROGUY * max(0, 1 - V_EAD - V_EAG) / RG + V_EAG, PLAF_RABGUY))
IQUODAJ32 = arr(IPQ1002 * TERPQ4V + TERPQ4C / TERPQ4TVC + TERPQTSV + TERPQTSC)
IPHQ2 = arr(IMT12 * IMPFHQ1 / ID11)
IQUORAJ32 = arr(IPQ1002 * TERPQ4RAJV + TERPQ4RBJC / TERPQ4TVC + TERPQTSV + TERPQTSC)
IQUORAJ2 = arr(IPQ1002 * TERPQ4RAJV + TERPQ4RBJC / TERPQ4TVC + TERPQTSV + TERPQTSC)
ABAGU = arr(min(ID11 * TX_RABGUY / 100 * PROGUY * max(0, 1 - V_EAD - V_EAG) / RG + V_EAG, PLAF_RABGUY)) * 1 - is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ)) + ABAGU1 * is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ))
IQUOEAJ32 = max(0, IPQ1002 - IQUORAJ32 - IQUODAJ32)
IPQTS12 = ZIPQTS12 * CARTSNBAP1
IPQTSREMPC2 = ZIPQTSREMPC2 * REMPLANBC
IPQTSANT21 = ZIPQTSANT21 * CARTSNBAP2
IPQTSC2 = ZIPQTSC2 * CARTSNBAC
INETABADAJ2 = max(0, IPRODOM2 + IQUODAJ2 - ABADO2)
ITOTDOM1 = IMETRO1 + IQUORAJ1 + INETABADAJ1 + INETABAEAJ1
ABATOT1 = ABADO1 + ABAGU1
ID12 = arr(IPQ2 * arr(RI2 + REVQUOQHT) / arr(RB02 + TONEQUO))
ABADO32 = arr(min(IPRODOM2 + IQUODAJ32 * TX_RABDOM / 100, PLAF_RABDOM))
IPQT2 = IMT12 - IPHQ2
ZIPQTSANT31 = is_positive(TEGLTS4 + TEGLTSREMPTOT) * arr(IQUOTOTANT1 * TERPQTS3 / TETONEQUO1) + 1 - is_positive(TEGLTS4 + TEGLTSREMPTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQPRRANTZ1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQTSANTV1 - ZIPQTSANTC1 - ZIPQTSANT11 - ZIPQTSANT21
IMTANT12 = max(IDANT11, IMI) * 1 - INDTXMOY + IMO * INDTXMOY
ADO1 = ABADON1 * 1 - is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ)) + ABATOT1 * is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ))
ZIPQTSREMP12 = is_positive(sum([TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOT2 * TERPQTSREMP1 / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMP2, TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQPRRZ2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQTS2TOT - ZIPQTSREMPV2 - ZIPQTSREMPC2
ZIPQTSREMP22 = is_positive(sum([TEGLTSREMP3, TEGLTSREMP4])) * arr(IQUOTOT2 * TERPQTSREMP2 / TETONEQUO1) + 1 - is_positive(sum([TEGLTSREMP3, TEGLTSREMP4])) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQPRRZ2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQTS2TOT - ZIPQTSREMPV2 - ZIPQTSREMPC2 - ZIPQTSREMP12
IDOM11 = max(ID11 - ADO1 * 1 - is_positive(INDCODDAJ) + ITOTDOM1 * is_positive(INDCODDAJ), IMI) * 1 - INDTXMOY + IMO * INDTXMOY * 1 - is_positive(RE168 + TAX1649)
ZIPQTS22 = is_positive(sum([TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * arr(IQUOTOT2 * TERPQTS2 / TETONEQUO1) + 1 - is_positive(sum([TEGLTS3, TEGLTS4]) + TEGLTSREMPTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQPRRZ2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQTSV2 - ZIPQTSC2 - ZIPQTS12
ZIPQTSREMP32 = is_positive(TEGLTSREMP4) * arr(IQUOTOT2 * TERPQTSREMP3 / TETONEQUO1) + 1 - is_positive(TEGLTSREMP4) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQPRRZ2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQTS2TOT - ZIPQTSREMPV2 - ZIPQTSREMPC2 - ZIPQTSREMP12 - ZIPQTSREMP22
DOMABDB = max(PLAF_RABDOM - ABADO, 0) * is_positive(V_EAD) + max(PLAF_RABGUY - ABAGU, 0) * is_positive(V_EAG)
ABAGU32 = arr(min(IPROGUY2 + IQUOEAJ32 * TX_RABGUY / 100, PLAF_RABGUY))
INETABADAJ32 = max(0, IPRODOM2 + IQUODAJ32 - ABADO32)
IPQTSANT31 = ZIPQTSANT31 * CARTSNBAP3
IQUOEAJ2 = max(0, IPQ1002 - IQUODAJ2 - IQUORAJ2)
ABATOT32 = ABADO32 + ABAGU32
IBAEX = IPQT2 * 1 - INDTXMIN * 1 - INDTXMOY
IMT11 = max(ID11 - ADO1, IMI) * 1 - INDTXMOY + IMO * INDTXMOY
IDRS = INDTXMIN * IMI + INDTXMOY * IMO + 1 - INDTXMIN * 1 - INDTXMOY * max(0, IPHQ2 - ADO1)
IPQTS22 = ZIPQTS22 * CARTSNBAP2
ZIPQTS32 = is_positive(TEGLTS4 + TEGLTSREMPTOT) * arr(IQUOTOT2 * TERPQTS3 / TETONEQUO1) + 1 - is_positive(TEGLTS4 + TEGLTSREMPTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQPRRZ2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQTSV2 - ZIPQTSC2 - ZIPQTS12 - ZIPQTS22
IPHQANT2 = arr(IMTANT12 * IMPFHQANT1 / IDANT11)
ZIPQTSREMP42 = IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQPRRZ2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQTS2TOT - ZIPQTSREMPV2 - ZIPQTSREMPC2 - ZIPQTSREMP12 - ZIPQTSREMP22 - ZIPQTSREMP32
ABAGU2 = arr(min(IPROGUY2 + IQUOEAJ2 * TX_RABGUY / 100, PLAF_RABGUY))
ABADON2 = arr(min(ID12 * TX_RABDOM / 100 * PRODOM * max(0, 1 - V_EAD - V_EAG) / RG + V_EAD, PLAF_RABDOM)) + arr(min(ID12 * TX_RABGUY / 100 * PROGUY * max(0, 1 - V_EAD - V_EAG) / RG + V_EAG, PLAF_RABGUY))
ABATOT2 = ABADO2 + ABAGU2
IPQTSREMP12 = ZIPQTSREMP12 * REMPLANBP1
IPQTSREMP22 = ZIPQTSREMP22 * REMPLANBP2
ZIPQTSANT41 = is_positive(TEGLTSREMPTOT) * arr(IQUOTOTANT1 * TERPQTS4 / TETONEQUO1) + 1 - is_positive(TEGLTSREMPTOT) * IQUOTOTANT1 - ZIPQANT1TOT - ZIPQFANT1TOT - ZIPQPALIMANT1TOT - ZIPQRCMANT1TOT - ZIPQPRRANT1TOT - ZIPQPRRANTZ1TOT - ZIPQRFANT1TOT - ZIPQRVOANT1TOT - ZIPQTSANTV1 - ZIPQTSANTC1 - ZIPQTSANT11 - ZIPQTSANT21 - ZIPQTSANT31
INETABAEAJ2 = max(0, IPROGUY2 + IQUOEAJ2 - ABAGU2)
RECOMP = max(0, IPHQANT2 - IPHQ2 * 1 - INDTXMIN * 1 - INDTXMOY) * 1 - is_positive(IPMOND + INDTEFF)
IDRT = IDOM11
IMTANT11 = max(IDANT11 - ADO1, IMI) * 1 - INDTXMOY + IMO * INDTXMOY
ZIPQTS42 = is_positive(TEGLTSREMPTOT) * arr(IQUOTOT2 * TERPQTS4 / TETONEQUO1) + 1 - is_positive(TEGLTSREMPTOT) * IQUOTOT2 - ZIPQ2TOT - ZIPQF2TOT - ZIPQPALIM2TOT - ZIPQRCM2TOT - ZIPQPRR2TOT - ZIPQPRRZ2TOT - ZIPQRF2TOT - ZIPQRVO2TOT - ZIPQTSV2 - ZIPQTSC2 - ZIPQTS12 - ZIPQTS22 - ZIPQTS32
IDOM31 = is_positive(IND_TDR) * IDOM14 + 1 - is_positive(IND_TDR) * V_CR2 * IDOM11 + 1 - V_CR2 * ID11 - ADO31 * 1 - is_positive(INDCODDAJ) + ITOTDOM31 * is_positive(INDCODDAJ)
LIG1820 = is_positive(ABADO + ABAGU + RECOMP) * LIG2
DEC11 = min(max(arr(SEUIL_DECOTE1 * 1 - BOOL_0AM + SEUIL_DECOTE2 * BOOL_0AM - IDOM11), 0), IDOM11) * 1 - V_ANC_BAR + min(max(arr(SEUIL_DECOTEA / 2 - IDOM11 / 2), 0), IDOM11) * V_ANC_BAR * 1 - V_CNR
IPQTSREMP42 = ZIPQTSREMP42 * REMPLANBP4
ADO2 = ABADON2 * 1 - is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ)) + ABATOT2 * is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ))
ISNETDAJ32 = arr(INETABADAJ32 * IPRODOM2 / IPRODOM2 + IQUODAJ32)
DOMDOM = max(DOMAVTO - DOMABDB, 0) * is_positive(V_EAD + V_EAG)
IPQTS32 = ZIPQTS32 * CARTSNBAP3
INETABAEAJ32 = max(0, IPROGUY2 + IQUOEAJ32 - ABAGU32)
IPQTS42 = ZIPQTS42 * CARTSNBAP4
IPQTSREMP32 = ZIPQTSREMP32 * REMPLANBP3
RCOTFOR_1 = max(min(arr(ACOTFOR_R * TX76 / 100), IDOM11 - DEC11), 0)
IDRSANT = INDTXMIN * IMI + INDTXMOY * IMO + 1 - INDTXMIN * 1 - INDTXMOY * max(0, IPHQANT2 - ADO1)
ITOTDOM2 = IMETRO2 + IQUORAJ2 + INETABADAJ2 + INETABAEAJ2
ADO32 = ABADON32 * 1 - is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ)) + ABATOT32 * is_positive(present(CODDAJ) + present(CODEAJ) + present(CODDBJ) + present(CODEBJ))
IDRS3 = IDRT
IQNETDAJ32 = arr(INETABADAJ32 * IQUODAJ32 / IPRODOM2 + IQUODAJ32)
LIG1740 = is_positive(RECOMP) * LIG2
IDEC = DEC11 * 1 - is_positive(V_CR2 + V_CNR + IPVLOC)
IQNETEAJ32 = max(0, INETABAEAJ32 - IQNETDAJ32)
PLAFQF = is_positive(IS521 - PLANT - IS511) * is_positive(abs(TEFF)) * is_positive(IDRS) + 1 - is_positive(abs(TEFF))
DEC31 = min(max(arr(SEUIL_DECOTE1 * 1 - BOOL_0AM + SEUIL_DECOTE2 * BOOL_0AM - IDOM31), 0), IDOM31) * 1 - V_ANC_BAR + min(max(arr(SEUIL_DECOTEA / 2 - IDOM31 / 2), 0), IDOM31) * V_ANC_BAR * 1 - V_CNR
IPHQ = arr(IMT11 * IMPFHQ1 / ID11)
IAD31 = IDOM31 - DEC31 * 1 - is_positive(V_CR2 + IPVLOC) + is_positive(V_CR2 + IPVLOC) * IDOM31
IPQTSANT41 = ZIPQTSANT41 * CARTSNBAP4
RCOTFOR = max(0, RCOTFOR_1 * 1 - ART1731BIS + min(RCOTFOR_1, max(RCOTFOR_P + RCOTFORP2, RCOTFOR1731 + 0) * 1 - PREM8_11) * ART1731BIS)
WTXMARJ = RB51 / NB1 * null(PLAFQF) + NB2 * null(1 - PLAFQF)
ISNETEAJ32 = max(0, INETABAEAJ32 - ISNETDAJ32)
IPQT = IMT11 - IPHQ
ITP = arr(BPTP2 * TX225 / 100 + BPTPVT * TX19 / 100 + BPTP4 * TX30 / 100 + DOMITPD + DOMITPG + BPTP3 * TX16 / 100 + BPTP40 * TX41 / 100 + DOMDOM * is_positive(V_EAD + V_EAG) + BPTP18 * TX18 / 100 + BPTPSJ * TX19 / 100 + BPTP24 * TX24 / 100) * 1 - is_positive(IPVLOC) * 1 - is_positive(present(TAX1649) + present(RE168))
RREPA_1 = max(min(RAA, IDOM11 - DEC11 - RCOTFOR_1), 0)
ITOTDOM32 = IMETRO32 + IQUORAJ32 + INETABADAJ32 + INETABAEAJ32
IBM33 = IAD31 + ITP + REI
IMPIM3 = IAD31
IDOM12 = max(ID12 - ADO2 * 1 - is_positive(INDCODDAJ) + ITOTDOM2 * is_positive(INDCODDAJ), IMI) * 1 - INDTXMOY + IMO * INDTXMOY * 1 - is_positive(RE168 + TAX1649)
RREPA = RREPA_1 * 1 - ART1731BIS + min(RREPA_1, max(RREPA_P + RREPAP2, RREPA1731 + 0) * 1 - PREM8_11) * ART1731BIS
RAIDE_1 = max(min(RAD, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1), 0)
RAIDE = max(RAIDE_1 * 1 - ART1731BIS + min(RAIDE_1, max(RAIDE_P + RAIDEP2, RAIDE1731 + 0) * 1 - PREM8_11) * ART1731BIS, 0)
IDOM32 = is_positive(IND_TDR) * IDOM14 + 1 - is_positive(IND_TDR) * V_CR2 * IDOM12 + 1 - V_CR2 * ID12 - ADO32 * 1 - is_positive(INDCODDAJ) + ITOTDOM32 * is_positive(INDCODDAJ)
RDIFAGRI_1 = max(min(RAGRI, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RAIDE_1), 0)
DEC32 = min(max(arr(SEUIL_DECOTE1 * 1 - BOOL_0AM + SEUIL_DECOTE2 * BOOL_0AM - IDOM32), 0), IDOM32) * 1 - V_ANC_BAR + min(max(arr(SEUIL_DECOTEA / 2 - IDOM32 / 2), 0), IDOM32) * V_ANC_BAR * 1 - V_CNR
IPROP = ITP
DEC12 = min(max(arr(SEUIL_DECOTE1 * 1 - BOOL_0AM + SEUIL_DECOTE2 * BOOL_0AM - IDOM12), 0), IDOM12) * 1 - V_ANC_BAR + min(max(arr(SEUIL_DECOTEA / 2 - IDOM12 / 2), 0), IDOM12) * V_ANC_BAR * 1 - V_CNR
RFORET_1 = max(min(RAFORET, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RAIDE_1 - RDIFAGRI_1), 0)
RFORET = max(0, RFORET_1 * 1 - ART1731BIS + min(RFORET_1, max(RFORET_P + RFORETP2, RFORET1731 + 0) * 1 - PREM8_11) * ART1731BIS)
CODMESGOUV = is_positive(NBPT - 10) + is_positive(LIG74 + LIGTTPVQ) + null(2 - V_REGCO) + null(4 - V_REGCO) + is_positive(CESSASSV + CESSASSC + PCAPTAXV + PCAPTAXC + LOYELEV + 0) + is_positive(IPROP + AVFISCOPTER + IPREP + IPPRICORSE)
MESGOUV = 1 * null(IDRS3 - IDEC) * positif_ou_nul(RNI - RNIBAR13) + 2 * is_positive(IDRS3 - IDEC + 0) * is_positive(IDEC + 0) * 1 - is_positive(CODMESGOUV) * 1 - is_positive(RNIBAR13 - RNI) + 3 * is_positive(CODMESGOUV + is_positive(RNIBAR13 - RNI) + 1 - is_positive(null(IDRS3 - IDEC) * positif_ou_nul(RNI - RNIBAR13) + is_positive(IDRS3 - IDEC + 0) * is_positive(IDEC + 0)))
RDIFAGRI = max(0, RDIFAGRI_1 * 1 - ART1731BIS + min(RDIFAGRI_1, max(RDIFAGRI_P + RDIFAGRIP2, RDIFAGRI1731 + 0) * 1 - PREM8_11) * ART1731BIS)
IAD32 = IDOM32 - DEC32 * 1 - is_positive(V_CR2 + IPVLOC) + is_positive(V_CR2 + IPVLOC) * IDOM32
RFIPDOM_1 = max(min(RFIPDOMCOM, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1), 0)
MESGOUV2 = 4 * null(IDRS3 - IDEC) * positif_ou_nul(RNI - RNIBAR13) + 5 * is_positive(IDRS3 - IDEC + 0) * is_positive(IDEC + 0) + 6 * is_positive(RNIBAR13 - RNI) * 1 - is_positive(CODMESGOUV) + 7 * is_positive(CODMESGOUV + 1 - is_positive(null(IDRS3 - IDEC) * positif_ou_nul(RNI - RNIBAR13) + is_positive(IDRS3 - IDEC + 0) * is_positive(IDEC + 0) + is_positive(RNIBAR13 - RNI)))
RFIPDOM = max(0, RFIPDOM_1 * 1 - ART1731BIS + min(RFIPDOM_1, max(RFIPDOM_P + RFIPDOMP2, RFIPDOM1731 + 0) * 1 - PREM8_11) * ART1731BIS)
ANG3 = IAD32 - IAD31
RFIPC_1 = max(min(RFIPCORSE, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPDOM_1), 0)
RCINE_1 = max(min(RRCN, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPDOM_1 - RFIPC_1), 0)
ACP3 = max(0, sum([min(arr(CHENF1 * TX_DPAEAV / 100), SEUIL_AVMAXETU), min(arr(CHENF2 * TX_DPAEAV / 100), SEUIL_AVMAXETU), min(arr(CHENF3 * TX_DPAEAV / 100), SEUIL_AVMAXETU), min(arr(CHENF4 * TX_DPAEAV / 100), SEUIL_AVMAXETU)]) - ANG3) * 1 - is_positive(V_CR2 + IPVLOC) * is_positive(ANG3) * is_positive(IMPIM3)
IAMD3 = IBM33 - min(ACP3, IMPIM3)
RRESTIMOD = max(min(RESTIMOD * TX40 / 100, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RFIPDOM_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPC_1 - RCINE_1), 0)
RCINE = max(0, RCINE_1 * 1 - ART1731BIS + min(RCINE_1, max(RCINE_P + RCINEP2, RCINE1731 + 0) * 1 - PREM8_11) * ART1731BIS)
KIR = IAMD3
RRESTIMO_1 = max(min(RETRESTIMO, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RFIPDOM_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPC_1 - RCINE_1), 0)
RFIPC = max(0, RFIPC_1 * 1 - ART1731BIS + min(RFIPC_1, max(RFIPC_P + RFIPCP2, RFIPC1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RRESTIMOB = max(min(RESTIMOB * TX36 / 100, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RFIPDOM_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPC_1 - RCINE_1 - RRESTIMOD), 0)
RRESTIMOC = max(min(RESTIMOC * TX30 / 100, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RFIPDOM_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPC_1 - RCINE_1 - RRESTIMOD - RRESTIMOB), 0)
RRESTIMOF = max(min(RESTIMOF * TX30 / 100, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RFIPDOM_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPC_1 - RCINE_1 - RRESTIMOD - RRESTIMOB - RRESTIMOC), 0)
RSOCREPR_1 = max(min(RSOCREP, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPDOM_1 - RFIPC_1 - RCINE_1 - RRESTIMO_1), 0)
RRPRESCOMP_1 = max(min(RPRESCOMP, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RFIPDOM_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPC_1 - RCINE_1 - RRESTIMO_1 - RSOCREPR_1), 0)
IKIRN = KIR
RRESTIMO = max(0, RRESTIMO_1 * 1 - ART1731BIS + min(RRESTIMO_1, max(RRESTIMO_P + RRESTIMOP2, RRESTIMO1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RHEBE_1 = max(min(RAH, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPDOM_1 - RFIPC_1 - RCINE_1 - RRESTIMO_1 - RSOCREPR_1 - RRPRESCOMP_1), 0)
RSURV_1 = max(min(RRS, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPDOM_1 - RFIPC_1 - RCINE_1 - RRESTIMO_1 - RSOCREPR_1 - RRPRESCOMP_1 - RHEBE_1), 0)
RRESTIMOY = max(min(RESTIMOY * TX30 / 100, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RFIPDOM_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPC_1 - RCINE_1 - RRESTIMOD - RRESTIMOB - RRESTIMOC - RRESTIMOC), 0)
RRPRESCOMP = max(0, RRPRESCOMP_1 * 1 - ART1731BIS + min(RRPRESCOMP_1, max(RRPRESCOMP_P + RRPRESCOMPP2, RRPRESCOMP1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RRESTIMOA = max(min(RESTIMOA * TX_RESTIMO1 / 100, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RFIPDOM_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPC_1 - RCINE_1 - RRESTIMOD - RRESTIMOB - RRESTIMOC - RRESTIMOC - RRESTIMOY), 0)
RRESTIMOE = max(min(RESTIMOE * TX22 / 100, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RFIPDOM_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPC_1 - RCINE_1 - RRESTIMOD - RRESTIMOB - RRESTIMOC - RRESTIMOC - RRESTIMOY - RRESTIMOA), 0)
RPRESCOMPAN = RRPRESCOMP * 1 - is_positive(RDPRESREPORT)
RSURV = max(0, RSURV_1 * 1 - ART1731BIS + min(RSURV_1, max(RSURV_P + RSURVP2, RSURV1731 + 0) * 1 - PREM8_11) * ART1731BIS)
A12RRESTIMO = arr(max(min(RRESTIMO, RRESTIMOD + RRESTIMOB + RRESTIMOC + RRESTIMOF + RRESTIMOA + RRESTIMOE), 0)) * 1 - V_CNR
RSOCREPR = max(0, RSOCREPR_1 * 1 - ART1731BIS + min(RSOCREPR_1, max(RSOCREPR_P + RSOCREPRP2, RSOCREPR1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RRESTIMOX = max(min(RESTIMOX * TX22 / 100, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RFIPDOM_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPC_1 - RCINE_1 - RCINE_1 - RRESTIMOD - RRESTIMOB - RRESTIMOC - RRESTIMOC - RRESTIMOY - RRESTIMOA - RRESTIMOE), 0)
RRESTIMOXY = max(RRESTIMO - A12RRESTIMO, 0) * 1 - V_CNR
RHEBE = max(0, RHEBE_1 * 1 - ART1731BIS + min(RHEBE_1, max(RHEBE_P + RHEBEP2, RHEBE1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RPRESCOMPREP = max(min(RPRESCOMP, IDOM11 - DEC11 - RCOTFOR - RREPA - RFIPDOM - RAIDE - RDIFAGRI - RFORET - RFIPC - RCINE - RRESTIMO - RSOCREPR), 0) * is_positive(RDPRESREPORT)
RINNO_1 = max(min(RFCPI, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RFIPDOM_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPC_1 - RCINE_1 - RRESTIMO_1 - RSOCREPR_1 - RRPRESCOMP_1 - RHEBE - RSURV_1), 0)
RSOUFIP_1 = max(min(RFIP, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPDOM_1 - RFIPC_1 - RCINE_1 - RRESTIMO_1 - RSOCREPR_1 - RRPRESCOMP_1 - RHEBE_1 - RSURV_1 - RINNO_1), 0)
RRIRENOV_1 = max(min(RENOV, IDOM11 - DEC11 - RCOTFOR_1 - RREPA_1 - RAIDE_1 - RDIFAGRI_1 - RFORET_1 - RFIPDOM_1 - RFIPC_1 - RCINE_1 - RRESTIMO_1 - RSOCREPR_1 - RRPRESCOMP_1 - RHEBE_1 - RSURV_1 - RINNO_1 - RSOUFIP_1), 0)
RINNO = max(0, RINNO_1 * 1 - ART1731BIS + min(RINNO_1, max(RINNO_P + RINNOP2, RINNO1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RRIRENOV = max(0, RRIRENOV_1 * 1 - ART1731BIS + min(RRIRENOV_1, max(RRIRENOV_P + RRIRENOVP2, RRIRENOV1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RSOUFIP = max(0, RSOUFIP_1 * 1 - ART1731BIS + min(RSOUFIP_1, max(RSOUFIP_P + RSOUFIPP2, RSOUFIP1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RRI1 = IDOM11 - DEC11 - RCOTFOR - RREPA - RAIDE - RDIFAGRI - RFORET - RFIPDOM - RFIPC - RCINE - RRESTIMO - RSOCREPR - RRPRESCOMP - RHEBE - RSURV - RINNO - RSOUFIP - RRIRENOV
NINVRETQB = max(min(INVLOG2008, RRI1), 0) * 1 - V_CNR
RRI1_1 = IDOM11 - DEC11 - RCOTFOR - RREPA - RAIDE - RDIFAGRI - RFORET - RFIPDOM - RFIPC - RCINE - RRESTIMO - RSOCREPR - RRPRESCOMP - RHEBE - RSURV - RINNO - RSOUFIP - RRIRENOV * 1 - ART1731BIS + min(IDOM111731 + 0, IDOM11) - min(DEC111731 + 0, DEC11) - min(RCOTFOR1731 + 0, RCOTFOR) - min(RREPA1731 + 0, RREPA) - min(RFIPDOM1731 + 0, RFIPDOM) - min(RAIDE1731 + 0, RAIDE) - min(RDIFAGRI1731 + 0, RDIFAGRI) - min(RFORET1731 + 0, RFORET) - min(RFIPC1731 + 0, RFIPC) - min(RCINE1731 + 0, RCINE) - min(RRESTIMO1731 + 0, RRESTIMO) - min(RSOCREPR1731 + 0, RSOCREPR) - min(RRPRESCOMP1731 + 0, RRPRESCOMP) - min(RHEBE1731 + 0, RHEBE) - min(RSURV1731 + 0, RSURV) - min(RINNO1731 + 0, RINNO) - min(RSOUFIP1731 + 0, RSOUFIP) - min(RRIRENOV1731 + 0, RRIRENOV) * ART1731BIS
INVRETQB = NINVRETQB * 1 - V_CNR
NINVRETOS = max(min(INVOMLOGOS, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO), 0) * 1 - V_CNR
NINVRETQT = max(min(INVLGDEB, RRI1 - INVLOG2008 - INVLGDEB2009), 0) * 1 - V_CNR
INVRETQT = NINVRETQT * 1 - V_CNR
NINVRETQL = max(min(INVLGAUTRE, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS), 0) * 1 - V_CNR
NINVRETOH = max(min(INVOMLOGOH, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA), 0) * 1 - V_CNR
NINVRETQM = max(min(INVLGDEB2010, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL), 0) * 1 - V_CNR
NINVRETOA = max(min(INVOMLOGOA, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB), 0) * 1 - V_CNR
RLOG01 = max(min(INVLOG2008, RRI1), 0) * 1 - V_CNR
NINVRETQC = max(min(INVLGDEB2009, RRI1 - INVLOG2008), 0) * 1 - V_CNR
NINVRETOO = max(min(INVOMLOGOO, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL), 0) * 1 - V_CNR
INVRETQC = NINVRETQC * 1 - V_CNR
NINVRETOL = max(min(INVOMLOGOL, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH), 0) * 1 - V_CNR
RLOG02 = max(min(INVLGDEB2009, RRI1 - RLOG01), 0) * 1 - V_CNR
NINVRETQD = max(min(INVLOG2009, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM), 0) * 1 - V_CNR
RLOG03 = max(min(INVLGDEB, RRI1 - RLOG01 - RLOG02), 0) * 1 - V_CNR
RLOG04 = max(min(INVOMLOGOA, RRI1 - RLOG01 - RLOG02 - RLOG03), 0) * 1 - V_CNR
RLOG05 = max(min(INVOMLOGOH, RRI1 - RLOG01 - RLOG02 - RLOG03 - RLOG04), 0) * 1 - V_CNR
NINVRETOB = max(min(INVOMLOGOB, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD), 0) * 1 - V_CNR
RLOG06 = max(min(INVOMLOGOL, RRI1 - RLOG01 - RLOG02 - RLOG03 - RLOG04 - RLOG05), 0) * 1 - V_CNR
NINVRETOC = max(min(INVOMLOGOC, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB), 0) * 1 - V_CNR
RLOG07 = max(min(INVOMLOGOO, RRI1 - RLOG01 - RLOG02 - RLOG03 - RLOG04 - RLOG05 - RLOG06), 0) * 1 - V_CNR
NINVRETOI = max(min(INVOMLOGOI, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC), 0) * 1 - V_CNR
RLOG08 = max(min(INVOMLOGOS, RRI1 - RLOG01 - RLOG02 - RLOG03 - RLOG04 - RLOG05 - RLOG06 - RLOG07), 0) * 1 - V_CNR
RLOGDOM_1 = 1 - V_INDTEO * sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28, RLOG29, RLOG30, RLOG31, RLOG32, RLOG33, RLOG34, RLOG35, RLOG36, RLOG37, RLOG38, RLOG39]) + V_INDTEO * RLOG01 + RLOG02 + RLOG03 + RLOG04 + RLOG05 + RLOG06 + RLOG07 + RLOG08
NINVRETOJ = max(min(INVOMLOGOJ, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI), 0) * 1 - V_CNR
NINVRETOK = max(min(INVOMLOGOK, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ), 0) * 1 - V_CNR
NINVRETOM = max(min(INVOMLOGOM, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK), 0) * 1 - V_CNR
RLOGDOM = RLOGDOM_1 * 1 - ART1731BIS + min(RLOGDOM_1, max(RLOGDOM_P + RLOGDOMP2, RLOGDOM1731 + 0) * 1 - PREM8_11) * ART1731BIS
RINVDOMTOMLG = RLOGDOM
NINVRETON = max(min(INVOMLOGON, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM), 0) * 1 - V_CNR
RCREAT_1 = max(min(RCREATEUR + RCREATEURHANDI, RRI1 - RLOGDOM), 0)
NINVRETOP = max(min(INVOMLOGOP, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON), 0) * 1 - V_CNR
NINVRETOQ = max(min(INVOMLOGOQ, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP), 0) * 1 - V_CNR
NINVRETOR = max(min(INVOMLOGOR, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ), 0) * 1 - V_CNR
RCREAT = max(0, RCREAT_1 * 1 - ART1731BIS + min(RCREAT_1, max(RCREAT_P + RCREATP2, RCREAT1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RCOMP_1 = max(min(RFC, RRI1 - RLOGDOM - RCREAT), 0)
NINVRETOT = max(min(INVOMLOGOT, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR), 0) * 1 - V_CNR
RCOMP = max(0, RCOMP_1 * 1 - ART1731BIS + min(RCOMP_1, max(RCOMP_P + RCOMPP2, RCOMP1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RRETU_1 = max(min(RETUD, RRI1 - RLOGDOM - RCREAT - RCOMP), 0)
RRETU = max(0, RRETU_1 * 1 - ART1731BIS + min(RRETU_1, max(RRETU_P + RRETUP2, RRETU1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NINVRETOU = max(min(INVOMLOGOU, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT), 0) * 1 - V_CNR
NINVRETOV = max(min(INVOMLOGOV, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU), 0) * 1 - V_CNR
RDONS_1 = max(min(RON, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU), 0)
LIG2040 = is_positive(DNBE + RNBE + RRETU) * LIG1 * LIG2
RDONS = max(0, RDONS_1 * 1 - ART1731BIS + min(RDONS_1, max(RDONS_P + RDONSP2, RDONS1731 + 0) * 1 - PREM8_11) * ART1731BIS)
LIG98B = is_positive(LIG80 + LIGFIPC + LIGFIPDOM + present(DAIDE) + LIGDUFLOT + LIGPINEL + LIG7CY + LIGREDAGRI + LIGFORET + LIGRESTIMO + LIGCINE + LIGRSOCREPR + LIGCOTFOR + present(PRESCOMP2000) + present(RDPRESREPORT) + present(FCPI) + present(DSOUFIP) + LIGRIRENOV + present(DFOREST) + present(DHEBE) + present(DSURV) + LIGLOGDOM + LIGREPTOUR + LIGLOCHOTR + LIGREPHA + LIGCREAT + LIG1780 + LIG2040 + LIG81 + LIGLOGSOC + LIGDOMSOC1 + sum([LIGCELLA, LIGCELLB, LIGCELLE, LIGCELLM, LIGCELLC, LIGCELLD, LIGCELLS, LIGCELLF, LIGCELLZ, LIGCELLN, LIGCELLT, LIGCELLX]) + LIGCELMG + LIGCELMH + sum([LIGCELHA, LIGCELHB, LIGCELHD, LIGCELHE, LIGCELHF, LIGCELHH, LIGCELHG, LIGCELHL, LIGCELHM, LIGCELHS, LIGCELHR, LIGCELHU, LIGCELHT, LIGCELHZ, LIGCELHX, LIGCELHW, LIGCELHV]) + sum([LIGCELGU, LIGCELGX, LIGCELGT, LIGCELGS, LIGCELGW, LIGCELGP, LIGCELGL, LIGCELGV, LIGCELGK, LIGCELGJ]) + sum([LIGCELYA, LIGCELYB, LIGCELYC, LIGCELYD, LIGCELYE, LIGCELYF, LIGCELYG, LIGCELYH, LIGCELYI, LIGCELYJ, LIGCELYK, LIGCELYL]) + LIGCELHNO + LIGCELHJK + LIGCELNQ + LIGCELCOM + LIGCELNBGL + LIGCEL + LIGCELJP + LIGCELJBGL + LIGCELJOQR + LIGCEL2012 + LIGCELFD + LIGCELFABC + LIGILMPA + LIGILMPB + LIGILMPC + LIGILMPD + LIGILMPE + LIGILMOA + LIGILMOB + LIGILMOC + LIGILMOD + LIGILMOE + LIGREDMEUB + LIGREDREP + LIGILMIX + LIGILMIY + LIGINVRED + LIGILMIH + LIGILMJC + LIGILMIZ + LIGILMJI + LIGILMJS + LIGMEUBLE + LIGPROREP + LIGREPNPRO + LIGMEUREP + LIGILMIC + LIGILMIB + LIGILMIA + LIGILMJY + LIGILMJX + LIGILMJW + LIGILMJV + LIGRESIMEUB + LIGRESINEUV + LIGRESIVIEU + LIGLOCIDEFG + LIGCODJTJU + LIGCODOU + present(DNOUV) + LIGLOCENT + LIGCOLENT + LIGRIDOMPRO + LIGPATNAT1 + LIGPATNAT2 + LIGPATNAT3 + LIGPATNAT4) * LIG1 * LIG2
RDUFREPFI = max(0, min(ADUFREPFI, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS))
LIGRED = LIG98B * 1 - is_positive(RIDEFRI) * LIG1 * LIG2
LIGREDYT = LIG98B * is_positive(RIDEFRI) * LIG1 * LIG2
NINVRETOW = max(min(INVOMLOGOW, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV), 0) * 1 - V_CNR
RDUFLOGIH_1 = max(0, min(RDUFLO_GIH, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFREPFI))
RDUFLOGIH = max(0, RDUFLOGIH_1 * 1 - ART1731BIS + min(RDUFLOGIH_1, max(RDUFLOGIH_P + RDUFLOGIHP2, RDUFLOGIH1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RDUFLOEKL_1 = max(0, min(RDUFLO_EKL, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFREPFI - RDUFLOGIH))
NINVRETOD = max(min(CODHOD, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW), 0) * 1 - V_CNR
RDUFLOEKL = max(0, RDUFLOEKL_1 * 1 - ART1731BIS)
RDUFLOTOT = RDUFREPFI + RDUFLOGIH + RDUFLOEKL
NINVRETOE = max(min(CODHOE, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD), 0) * 1 - V_CNR
RPIQABCD_1 = max(0, min(RPI_QABCD, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFREPFI - RDUFLOGIH - RDUFLOEKL))
NINVRETOF = max(min(CODHOF, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE), 0) * 1 - V_CNR
RPIQABCD = max(0, RPIQABCD_1 * 1 - ART1731BIS)
NINVRETOG = max(min(CODHOG, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE - NINVRETOF), 0) * 1 - V_CNR
RPINELTOT = RPIQABCD
RSNCL = max(0, min(RSN_CL, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT))
RNOUV_1 = max(min(RSN, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT), 0)
RSNCM = max(0, min(RSN_CM, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RSNCL))
NINVRETOX = max(min(CODHOX, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE - NINVRETOF - NINVRETOG), 0) * 1 - V_CNR
RNOUV = RNOUV_1 * 1 - ART1731BIS + min(RNOUV_1, max(RNOUV_P + RNOUVP2, RNOUV1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - V_CNR
NINVRETOY = max(min(CODHOY, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE - NINVRETOF - NINVRETOG - NINVRETOX), 0) * 1 - V_CNR
RSNCN = max(0, min(RSN_CN, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RSNCL - RSNCM))
RSNCC = max(0, min(RSN_CC, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RSNCL - RSNCM - RSNCN))
RPLAFREPME4 = max(min(APLAFREPME4, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV), 0)
RSNCU = max(0, min(RSN_CU, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RSNCL - RSNCM - RSNCN - RSNCC))
A9RFOR = max(0, min(BA9RFOR, IDOM11 - DEC11 - RCOTFOR - RREPA - RAIDE - RDIFAGRI - RFORET - RFIPDOM - RFIPC - RCINE - RRESTIMO - RSOCREPR - RRPRESCOMP - RHEBE - RSURV - RINNO - RSOUFIP - RRIRENOV - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4)) * 1 - ART1731BIS
NINVRETOZ = max(min(CODHOZ, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE - NINVRETOF - NINVRETOG - NINVRETOX - NINVRETOY), 0) * 1 - V_CNR
RSNCQ = max(0, min(RSN_CQ, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RSNCL - RSNCM - RSNCN - RSNCC - RSNCU))
NINVRETUA = max(min(CODHUA, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE - NINVRETOF - NINVRETOG - NINVRETOX - NINVRETOY - NINVRETOZ), 0) * 1 - V_CNR
RFOR_1 = max(min(RFOREST, IDOM11 - DEC11 - RCOTFOR - RREPA - RAIDE - RDIFAGRI - RFORET - RFIPDOM - RFIPC - RCINE - RRESTIMO - RSOCREPR - RRPRESCOMP - RHEBE - RSURV - RINNO - RSOUFIP - RRIRENOV - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4), 0)
A10RFOR = max(0, min(BA10RFOR, IDOM11 - DEC11 - RCOTFOR - RREPA - RAIDE - RDIFAGRI - RFORET - RFIPDOM - RFIPC - RCINE - RRESTIMO - RSOCREPR - RRPRESCOMP - RHEBE - RSURV - RINNO - RSOUFIP - RRIRENOV - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - A9RFOR)) * 1 - ART1731BIS
RPENTCY = RPLAFREPME4
A11RFOR = max(0, min(BA11RFOR, IDOM11 - DEC11 - RCOTFOR - RREPA - RAIDE - RDIFAGRI - RFORET - RFIPDOM - RFIPC - RCINE - RRESTIMO - RSOCREPR - RRPRESCOMP - RHEBE - RSURV - RINNO - RSOUFIP - RRIRENOV - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - A9RFOR - A10RFOR)) * 1 - ART1731BIS
RSNCR = max(0, min(RSN_CR, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RSNCL - RSNCM - RSNCN - RSNCC - RSNCU - RSNCQ))
RFOR = max(0, RFOR_1 * 1 - ART1731BIS + min(RFOR_1, max(RFOR_P + RFORP2, RFOR1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NINVRETUB = max(min(CODHUB, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE - NINVRETOF - NINVRETOG - NINVRETOX - NINVRETOY - NINVRETOZ - NINVRETUA), 0) * 1 - V_CNR
RSNCF = max(0, min(RSN_CF, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RSNCL - RSNCM - RSNCN - RSNCC - RSNCU - RSNCQ - RSNCR))
PLAFREPETOT = arr(max(0, RSNCR + RSNCF + RPLAFREPME4 - 10000)) * 1 - V_CNR * is_positive(AVFISCOPTER)
RTOURREP_1 = max(min(arr(ATOURREP * TX_REDIL25 / 100), RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - RFOR), 0)
A12RFOR = max(0, min(BA12RFOR, IDOM11 - DEC11 - RCOTFOR - RREPA - RAIDE - RDIFAGRI - RFORET - RFIPDOM - RFIPC - RCINE - RRESTIMO - RSOCREPR - RRPRESCOMP - RHEBE - RSURV - RINNO - RSOUFIP - RRIRENOV - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - A9RFOR - A10RFOR - A11RFOR)) * 1 - ART1731BIS
NINVRETUC = max(min(CODHUC, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE - NINVRETOF - NINVRETOG - NINVRETOX - NINVRETOY - NINVRETOZ - NINVRETUA - NINVRETUB), 0) * 1 - V_CNR
PLAFREPSN4 = arr(max(0, RSNCF - 10000)) * 1 - V_CNR * is_positive(AVFISCOPTER)
NINVRETUD = max(min(CODHUD, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE - NINVRETOF - NINVRETOG - NINVRETOX - NINVRETOY - NINVRETOZ - NINVRETUA - NINVRETUB - NINVRETUC), 0) * 1 - V_CNR
A13UXI = max(0, min(BA13UXI, IDOM11 - DEC11 - RCOTFOR - RREPA - RAIDE - RDIFAGRI - RFORET - RFIPDOM - RFIPC - RCINE - RRESTIMO - RSOCREPR - RRPRESCOMP - RHEBE - RSURV - RINNO - RSOUFIP - RRIRENOV - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - A9RFOR - A10RFOR - A11RFOR - A12RFOR)) * 1 - ART1731BIS
RTOURREP = RTOURREP_1 * 1 - ART1731BIS + min(RTOURREP_1, max(RTOURREP_P + RTOURREPP2, RTOURREP1731 + 0) * 1 - PREM8_11) * ART1731BIS
NINVRETUE = max(min(CODHUE, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE - NINVRETOF - NINVRETOG - NINVRETOX - NINVRETOY - NINVRETOZ - NINVRETUA - NINVRETUB - NINVRETUC - NINVRETUD), 0) * 1 - V_CNR
LIGPLAFRSN4 = is_positive(PLAFREPSN4) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
PLAFREPSN3 = arr(max(0, PLAFREPETOT - PLAFREPSN4))
NINVRETUF = max(min(CODHUF, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE - NINVRETOF - NINVRETOG - NINVRETOX - NINVRETOY - NINVRETOZ - NINVRETUA - NINVRETUB - NINVRETUC - NINVRETUD - NINVRETUE), 0) * 1 - V_CNR
RPLAFPME13 = PLAFREPSN4 + PLAFREPSN3
LIGPLAFRSN3 = is_positive(PLAFREPSN3) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
A14UN = max(0, min(BA14UN, IDOM11 - DEC11 - RCOTFOR - RREPA - RAIDE - RDIFAGRI - RFORET - RFIPDOM - RFIPC - RCINE - RRESTIMO - RSOCREPR - RRPRESCOMP - RHEBE - RSURV - RINNO - RSOUFIP - RRIRENOV - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - A9RFOR - A10RFOR - A11RFOR - A12RFOR - A13UXI)) * 1 - ART1731BIS
RTOUHOTR_1 = max(min(RIHOTR, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - RFOR - RTOURREP), 0) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
RTOUHOTR = RTOUHOTR_1 * 1 - ART1731BIS + min(RTOUHOTR_1, max(RTOUHOTR_P + RTOUHOTRP2, RTOUHOTR1731 + 0) * 1 - PREM8_11) * ART1731BIS
RTOUR = RTOURREP
A13RFOR = A13UXI + A14UN * 1 - ART1731BIS
LIGPLAFRSN = is_positive(PLAFREPSN4 + PLAFREPSN3) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RTOUREPA_1 = max(min(arr(ATOUREPA * TX_REDIL20 / 100), RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - RFOR - RTOURREP - RTOUHOTR), 0)
NINVRETUG = max(min(CODHUG, RRI1 - INVLOG2008 - INVLGDEB2009 - INVLGDEB - INVOMLOGOA - INVOMLOGOH - INVOMLOGOL - INVOMLOGOO - INVOMLOGOS - NINVRETQL - NINVRETQM - NINVRETQD - NINVRETOB - NINVRETOC - NINVRETOI - NINVRETOJ - NINVRETOK - NINVRETOM - NINVRETON - NINVRETOP - NINVRETOQ - NINVRETOR - NINVRETOT - NINVRETOU - NINVRETOV - NINVRETOW - NINVRETOD - NINVRETOE - NINVRETOF - NINVRETOG - NINVRETOX - NINVRETOY - NINVRETOZ - NINVRETUA - NINVRETUB - NINVRETUC - NINVRETUD - NINVRETUE - NINVRETUF), 0) * 1 - V_CNR
NRLOGDOM = INVLOG2008 + INVLGDEB2009 + INVLGDEB + INVOMLOGOA + INVOMLOGOH + INVOMLOGOL + INVOMLOGOO + INVOMLOGOS + NINVRETQL + NINVRETQM + NINVRETQD + NINVRETOB + NINVRETOC + NINVRETOI + NINVRETOJ + NINVRETOK + NINVRETOM + NINVRETON + NINVRETOP + NINVRETOQ + NINVRETOR + NINVRETOT + NINVRETOU + NINVRETOV + NINVRETOW + NINVRETOD + NINVRETOE + NINVRETOF + NINVRETOG + NINVRETOX + NINVRETOY + NINVRETOZ + NINVRETUA + NINVRETUB + NINVRETUC + NINVRETUD + NINVRETUE + NINVRETUF + NINVRETUG * 1 - V_CNR
NRCREAT = max(min(RCREATEUR + RCREATEURHANDI, RRI1 - NRLOGDOM), 0)
RTOUREPA = RTOUREPA_1 * 1 - ART1731BIS + min(RTOUREPA_1, max(RTOUREPA_P + RTOUREPAP2, RTOUREPA1731 + 0) * 1 - PREM8_11) * ART1731BIS
NRCOMP = max(min(RFC, RRI1 - NRLOGDOM - NRCREAT), 0)
REDUCAVTCEL = RCOTFOR + RREPA + RAIDE + RDIFAGRI + RFORET + RFIPDOM + RFIPC + RCINE + RRESTIMO + RSOCREPR + RRPRESCOMP + RHEBE + RSURV + RINNO + RSOUFIP + RRIRENOV + RLOGDOM + RCREAT + RCOMP + RRETU + RDONS + RDUFLOTOT + RPINELTOT + RNOUV + RPLAFREPME4 + RFOR + RTOURREP + RTOUHOTR + RTOUREPA
A10TOURSOC_1 = RTOURREP * is_positive(REPINVTOU) + RTOUHOTR * is_positive(INVLOGHOT) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO)) + RTOUREPA * is_positive(INVLOGREHA)
A10TOURSOC = max(0, A10TOURSOC_1 * 1 - ART1731BIS + min(A10TOURSOC1731 + 0, A10TOURSOC_1) * ART1731BIS)
NRRETU = max(min(RETUD, RRI1 - NRLOGDOM - NRCREAT - NRCOMP), 0)
RCELRREDLA_1 = max(min(ACELRREDLA, IDOM11 - DEC11 - REDUCAVTCEL), 0)
RCELRREDLB_1 = max(min(ACELRREDLB, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1), 0)
NRDONS = max(min(RON, RRI1 - NRLOGDOM - NRCREAT - NRCOMP - NRRETU), 0)
RCELRREDLE_1 = max(min(ACELRREDLE, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1), 0)
RCELRREDLA = max(0, RCELRREDLA_1 * 1 - ART1731BIS + min(RCELRREDLA_1, max(RCELRREDLA_P + RCELRREDLAP2, RCELRREDLA1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RCELRREDLE = max(0, RCELRREDLE_1 * 1 - ART1731BIS + min(RCELRREDLE_1, max(RCELRREDLE_P + RCELRREDLEP2, RCELRREDLE1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RCELRREDLB = max(0, RCELRREDLB_1 * 1 - ART1731BIS + min(RCELRREDLB_1, max(RCELRREDLB_P + RCELRREDLBP2, RCELRREDLB1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NRDUFREPFI = max(min(ADUFREPFI, RRI1 - NRLOGDOM - NRCREAT - NRCOMP - NRRETU - NRDONS), 0)
RCELRREDLM_1 = max(min(ACELRREDLM, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1 - RCELRREDLE_1), 0)
NRDUFLOGIH = max(min(RDUFLO_GIH, RRI1 - NRLOGDOM - NRCREAT - NRCOMP - NRRETU - NRDONS - NRDUFREPFI), 0)
RRCELLB = max(0, CELRREDLB - RCELRREDLB) * is_positive(CELRREDLB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RRCELLA = max(0, CELRREDLA - RCELRREDLA) * is_positive(CELRREDLA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRDUFLOEKL = max(min(RDUFLO_EKL, RRI1 - NRLOGDOM - NRCREAT - NRCOMP - NRRETU - NRDONS - NRDUFREPFI - NRDUFLOGIH), 0)
RCELRREDLM = max(0, RCELRREDLM_1 * 1 - ART1731BIS + min(RCELRREDLM_1, max(RCELRREDLM_P + RCELRREDLMP2, RCELRREDLM1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RRCELLM = max(0, CELRREDLM - RCELRREDLM) * is_positive(CELRREDLM) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RRCELLE = max(0, CELRREDLE - RCELRREDLE) * is_positive(CELRREDLE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGRRCEL41 = is_positive(RRCELLA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
LIGRRCEL42 = is_positive(RRCELLB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCELRREDLN_1 = max(min(ACELRREDLN, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1 - RCELRREDLE_1 - RCELRREDLM_1), 0)
NRPIQABCD = max(min(RPI_QABCD, RRI1 - NRLOGDOM - NRCREAT - NRCOMP - NRRETU - NRDONS - NRDUFREPFI - NRDUFLOGIH - NRDUFLOEKL), 0)
LIGRRCEL44 = is_positive(RRCELLM) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
LIGRRCEL43 = is_positive(RRCELLE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCELRREDLN = max(0, RCELRREDLN_1 * 1 - ART1731BIS + min(RCELRREDLN_1, max(RCELRREDLN_P + RCELRREDLNP2, RCELRREDLN1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RCELRREDLC_1 = max(min(ACELRREDLC, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1 - RCELRREDLE_1 - RCELRREDLM_1 - RCELRREDLN_1), 0)
RCELRREDLC = max(0, RCELRREDLC_1 * 1 - ART1731BIS + min(RCELRREDLC_1, max(RCELRREDLC_P + RCELRREDLCP2, RCELRREDLC1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NRNOUV = max(min(RSN, RRI1 - NRLOGDOM - NRCREAT - NRCOMP - NRRETU - NRDONS - NRDUFREPFI - NRDUFLOGIH - NRDUFLOEKL - NRPIQABCD), 0)
RRCELLC = max(0, CELRREDLC - RCELRREDLC) * is_positive(CELRREDLC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELRREDLD_1 = max(min(ACELRREDLD, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1 - RCELRREDLE_1 - RCELRREDLM_1 - RCELRREDLN_1 - RCELRREDLC_1), 0)
RCELRREDLD = max(0, RCELRREDLD_1 * 1 - ART1731BIS + min(RCELRREDLD_1, max(RCELRREDLD_P + RCELRREDLDP2, RCELRREDLD1731 + 0) * 1 - PREM8_11) * ART1731BIS)
LIGRRCEL31 = is_positive(RRCELLC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCELRREDLS_1 = max(min(ACELRREDLS, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1 - RCELRREDLE_1 - RCELRREDLM_1 - RCELRREDLN_1 - RCELRREDLC_1 - RCELRREDLD_1), 0)
RRCELLN = max(0, CELRREDLN - RCELRREDLN) * is_positive(CELRREDLN) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RRCELLD = max(0, CELRREDLD - RCELRREDLD) * is_positive(CELRREDLD) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELRREDLT_1 = max(min(ACELRREDLT, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1 - RCELRREDLE_1 - RCELRREDLM_1 - RCELRREDLN_1 - RCELRREDLC_1 - RCELRREDLD_1 - RCELRREDLS_1), 0)
RCELRREDLF_1 = max(min(ACELRREDLF, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1 - RCELRREDLE_1 - RCELRREDLM_1 - RCELRREDLN_1 - RCELRREDLC_1 - RCELRREDLD_1 - RCELRREDLS_1 - RCELRREDLT_1), 0)
RCELRREDLT = max(0, RCELRREDLT_1 * 1 - ART1731BIS + min(RCELRREDLT_1, max(RCELRREDLT_P + RCELRREDLTP2, RCELRREDLT1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RCELRREDLS = max(0, RCELRREDLS_1 * 1 - ART1731BIS + min(RCELRREDLS_1, max(RCELRREDLS_P + RCELRREDLSP2, RCELRREDLS1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RCELRREDLZ_1 = max(min(ACELRREDLZ, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1 - RCELRREDLE_1 - RCELRREDLM_1 - RCELRREDLN_1 - RCELRREDLC_1 - RCELRREDLD_1 - RCELRREDLS_1 - RCELRREDLT_1 - RCELRREDLF_1), 0)
NRPLAFPME = max(min(COD7CY, RRI1 - NRLOGDOM - NRCREAT - NRCOMP - NRRETU - NRDONS - NRDUFREPFI - NRDUFLOGIH - NRDUFLOEKL - NRPIQABCD - NRNOUV), 0)
RCELRREDLF = max(0, RCELRREDLF_1 * 1 - ART1731BIS + min(RCELRREDLF_1, max(RCELRREDLF_P + RCELRREDLFP2, RCELRREDLF1731 + 0) * 1 - PREM8_11) * ART1731BIS)
LIGRRCEL45 = is_positive(RRCELLN) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RRCELLT = max(0, CELRREDLT - RCELRREDLT) * is_positive(CELRREDLT) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGRRCEL34 = is_positive(RRCELLT) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
LIGRRCEL32 = is_positive(RRCELLD) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RRCELLS = max(0, CELRREDLS - RCELRREDLS) * is_positive(CELRREDLS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RRCELLF = max(0, CELRREDLF - RCELRREDLF) * is_positive(CELRREDLF) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELRREDLX_1 = max(min(ACELRREDLX, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1 - RCELRREDLE_1 - RCELRREDLM_1 - RCELRREDLN_1 - RCELRREDLC_1 - RCELRREDLD_1 - RCELRREDLS_1 - RCELRREDLT_1 - RCELRREDLF_1 - RCELRREDLZ_1), 0)
NRFOR = max(min(RFOREST, RRI1 - NRLOGDOM - NRCREAT - NRCOMP - NRRETU - NRDONS - NRDUFREPFI - NRDUFLOGIH - NRDUFLOEKL - NRPIQABCD - NRNOUV - NRPLAFPME), 0)
NRTOURREP = max(min(arr(ATOURREP * TX_REDIL25 / 100), RRI1 - NRLOGDOM - NRCREAT - NRCOMP - NRRETU - NRDONS - NRDUFREPFI - NRDUFLOGIH - NRDUFLOEKL - NRPIQABCD - NRNOUV - NRPLAFPME - NRFOR), 0)
RCELRREDLZ = max(0, RCELRREDLZ_1 * 1 - ART1731BIS + min(RCELRREDLZ_1, max(RCELRREDLZ_P + RCELRREDLZP2, RCELRREDLZ1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RRCELLZ = max(0, CELRREDLZ - RCELRREDLZ) * is_positive(CELRREDLZ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELRREDLX = max(0, RCELRREDLX_1 * 1 - ART1731BIS + min(RCELRREDLX_1, max(RCELRREDLX_P + RCELRREDLXP2, RCELRREDLX1731 + 0) * 1 - PREM8_11) * ART1731BIS)
LIGRRCEL33 = is_positive(RRCELLS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
NRTOUHOTR = max(min(RIHOTR, RRI1 - NRLOGDOM - NRCREAT - NRCOMP - NRRETU - NRDONS - NRDUFREPFI - NRDUFLOGIH - NRDUFLOEKL - NRPIQABCD - NRNOUV - NRPLAFPME - NRFOR - NRTOURREP), 0) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))
LIGRRCEL21 = is_positive(RRCELLF) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCELRREDMG_1 = max(min(ACELRREDMG, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1 - RCELRREDLE_1 - RCELRREDLM_1 - RCELRREDLN_1 - RCELRREDLC_1 - RCELRREDLD_1 - RCELRREDLS_1 - RCELRREDLT_1 - RCELRREDLF_1 - RCELRREDLZ_1 - RCELRREDLX_1), 0)
LIGRRCEL22 = is_positive(RRCELLZ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCELRREDMH_1 = max(min(ACELRREDMH, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDLA_1 - RCELRREDLB_1 - RCELRREDLE_1 - RCELRREDLM_1 - RCELRREDLN_1 - RCELRREDLC_1 - RCELRREDLD_1 - RCELRREDLS_1 - RCELRREDLT_1 - RCELRREDLF_1 - RCELRREDLZ_1 - RCELRREDLX_1 - RCELRREDMG_1), 0)
NRTOUREPA = max(min(arr(ATOUREPA * TX_REDIL20 / 100), RRI1 - NRLOGDOM - NRCREAT - NRCOMP - NRRETU - NRDONS - NRDUFREPFI - NRDUFLOGIH - NRDUFLOEKL - NRPIQABCD - NRNOUV - NRPLAFPME - NRFOR - NRTOURREP - NRTOUHOTR), 0)
RRCELLX = max(0, CELRREDLX - RCELRREDLX) * is_positive(CELRREDLX) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRRI2 = NRCREAT + NRCOMP + NRRETU + NRDONS + NRDUFREPFI + NRDUFLOGIH + NRDUFLOEKL + NRPIQABCD + NRNOUV + NRPLAFPME + NRFOR + NRTOURREP + NRTOUHOTR + NRTOUREPA
RCELRREDMH = max(0, RCELRREDMH_1 * 1 - ART1731BIS + min(RCELRREDMH_1, max(RCELRREDMH_P + RCELRREDMHP2, RCELRREDMH1731 + 0) * 1 - PREM8_11) * ART1731BIS)
LIGRRCEL23 = is_positive(RRCELLX) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
NRCELRREDLC = max(min(CELRREDLC, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN])), 0)
NRCELRREDLZ = max(min(CELRREDLZ, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF])), 0)
NRCELRREDMG = max(min(CELRREDMG, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX])), 0)
RCELRREDMG = max(0, RCELRREDMG_1 * 1 - ART1731BIS + min(RCELRREDMG_1, max(RCELRREDMG_P + RCELRREDMGP2, RCELRREDMG1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NRCELRREDLF = max(min(CELRREDLF, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT])), 0)
NRCELRREDLA = max(min(CELRREDLA, RRI1 - NRLOGDOM - NRRI2), 0)
NRCELRREDLT = max(min(CELRREDLT, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS])), 0)
RCELRREDSOM = sum([RCELRREDLA_1, RCELRREDLB_1, RCELRREDLE_1, RCELRREDLM_1, RCELRREDLN_1, RCELRREDLC_1, RCELRREDLD_1, RCELRREDLS_1, RCELRREDLT_1, RCELRREDLF_1, RCELRREDLZ_1, RCELRREDLX_1]) + RCELRREDMG_1 + RCELRREDMH_1
RCELREPHA_1 = max(min(ACELREPHA, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYJ_1 = max(min(ACELREPYJ, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELRREDLS = max(min(CELRREDLS, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD])), 0)
RRCELMH = max(0, CELRREDMH - RCELRREDMH) * is_positive(CELRREDMH) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYI_1 = max(min(ACELREPYI, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYB_1 = max(min(ACELREPYB, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGRRCEL12 = is_positive(RRCELMH) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
NRCELRREDLD = max(min(CELRREDLD, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC])), 0)
RCELREPYF_1 = max(min(ACELREPYF, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYD_1 = max(min(ACELREPYD, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELRREDLN = max(min(CELRREDLN, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM])), 0)
RCELREPHS_1 = max(min(RCELREP_HS, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGV_1 = max(min(ACELREPGV, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYC_1 = max(min(ACELREPYC, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGS_1 = max(min(ACELREPGS, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHB_1 = max(min(ACELREPHB, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYH_1 = max(min(ACELREPYH, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGT_1 = max(min(ACELREPGT, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELRREDLB = max(min(CELRREDLB, RRI1 - NRLOGDOM - NRRI2 - NRCELRREDLA), 0)
RCELREPHS = max(0, RCELREPHS_1 * 1 - ART1731BIS + min(RCELREPHS_1, max(RCELREPHS_P + RCELREPHSP2, RCELREPHS1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHE_1 = max(min(ACELREPHE, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELRREDLX = max(min(CELRREDLX, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ])), 0)
RCELREPYI = max(0, RCELREPYI_1 * 1 - ART1731BIS + min(RCELREPYI_1, max(RCELREPYI_P + RCELREPYIP2, RCELREPYI1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGP_1 = max(min(ACELREPGP, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RRCELMG = max(0, CELRREDMG - RCELRREDMG) * is_positive(CELRREDMG) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGJ_1 = max(min(ACELREPGJ, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYD = max(0, RCELREPYD_1 * 1 - ART1731BIS + min(RCELREPYD_1, max(RCELREPYD_P + RCELREPYDP2, RCELREPYD1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELRREDMH = max(min(CELRREDMH, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG), 0)
NRCELREPYA = max(min(ACELREPYA, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI])), 0)
NRCELRREDLE = max(min(CELRREDLE, RRI1 - NRLOGDOM - NRRI2 - NRCELRREDLA - NRCELRREDLB), 0)
RCELREPYF = max(0, RCELREPYF_1 * 1 - ART1731BIS + min(RCELREPYF_1, max(RCELREPYF_P + RCELREPYFP2, RCELREPYF1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGU_1 = max(min(ACELREPGU, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYB = max(0, RCELREPYB_1 * 1 - ART1731BIS + min(RCELREPYB_1, max(RCELREPYB_P + RCELREPYBP2, RCELREPYB1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYK_1 = max(min(ACELREPYK, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPYL = max(min(ACELREPYL, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH])), 0)
RCELREPHH_1 = max(min(ACELREPHH, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGS = max(0, RCELREPGS_1 * 1 - ART1731BIS + min(RCELREPGS_1, max(RCELREPGS_P + RCELREPGSP2, RCELREPGS1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELHM_1 = max(min(RCEL_HM, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGJ = max(0, RCELREPGJ_1 * 1 - ART1731BIS + min(RCELREPGJ_1, max(RCELREPGJ_P + RCELREPGJP2, RCELREPGJ1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGK_1 = max(min(ACELREPGK, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPHX = max(min(RCELREP_HX, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ])), 0)
RCELREPHR_1 = max(min(RCELREP_HR, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - RCELREPHS_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPGX = max(min(ACELREPGX, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB]) - sum([NRCELREPGU])), 0)
NRCELREPHZ = max(min(RCELREP_HZ, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT])), 0)
RCELREPGL_1 = max(min(ACELREPGL, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYC = max(0, RCELREPYC_1 * 1 - ART1731BIS + min(RCELREPYC_1, max(RCELREPYC_P + RCELREPYCP2, RCELREPYC1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYG_1 = max(min(ACELREPYG, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHG_1 = max(min(ACELREPHG, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPGV = max(min(ACELREPGV, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL])), 0)
RCELREPGK = max(0, RCELREPGK_1 * 1 - ART1731BIS + min(RCELREPGK_1, max(RCELREPGK_P + RCELREPGKP2, RCELREPGK1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGL = max(0, RCELREPGL_1 * 1 - ART1731BIS + min(RCELREPGL_1, max(RCELREPGL_P + RCELREPGLP2, RCELREPGL1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYH = max(0, RCELREPYH_1 * 1 - ART1731BIS + min(RCELREPYH_1, max(RCELREPYH_P + RCELREPYHP2, RCELREPYH1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHD_1 = max(min(ACELREPHD, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHE = max(0, RCELREPHE_1 * 1 - ART1731BIS + min(RCELREPHE_1, max(RCELREPHE_P + RCELREPHEP2, RCELREPHE1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHF_1 = max(min(ACELREPHF, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPHF = max(min(ACELREPHF, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV])), 0)
RCELREPHH = max(0, RCELREPHH_1 * 1 - ART1731BIS + min(RCELREPHH_1, max(RCELREPHH_P + RCELREPHHP2, RCELREPHH1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPHG = max(min(ACELREPHG, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH])), 0)
RCELREPYE_1 = max(min(ACELREPYE, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPHH = max(min(ACELREPHH, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD])), 0)
NRCELREPHS = max(min(RCELREP_HS, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH), 0)
NRCELREPYC = max(min(ACELREPYC, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ])), 0)
NRCELREPHE = max(min(ACELREPHE, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF])), 0)
NRCELREPGW = max(min(ACELREPGW, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS])), 0)
RCELREPHG = max(0, RCELREPHG_1 * 1 - ART1731BIS + min(RCELREPHG_1, max(RCELREPHG_P + RCELREPHGP2, RCELREPHG1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPYG = max(min(ACELREPYG, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL])), 0)
RCELREPGV = max(0, RCELREPGV_1 * 1 - ART1731BIS + min(RCELREPGV_1, max(RCELREPGV_P + RCELREPGVP2, RCELREPGV1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGX_1 = max(min(ACELREPGX, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - RCELREPGU_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGW_1 = max(min(ACELREPGW, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPGT = max(min(ACELREPGT, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB]) - sum([NRCELREPGU, NRCELREPGX])), 0)
NRCELREPGK = max(min(ACELREPGK, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV])), 0)
RCELREPHA = max(0, RCELREPHA_1 * 1 - ART1731BIS + min(RCELREPHA_1, max(RCELREPHA_P + RCELREPHAP2, RCELREPHA1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPHB = max(min(ACELREPHB, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG])), 0)
NRCELREPGS = max(min(ACELREPGS, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT])), 0)
RCELREPYA_1 = max(min(ACELREPYA, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1])), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPHW = max(min(RCELREP_HW, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX])), 0)
RCELREPGT = max(0, RCELREPGT_1 * 1 - ART1731BIS + min(RCELREPGT_1, max(RCELREPGT_P + RCELREPGTP2, RCELREPGT1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYG = max(0, RCELREPYG_1 * 1 - ART1731BIS + min(RCELREPYG_1, max(RCELREPYG_P + RCELREPYGP2, RCELREPYG1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGP = max(0, RCELREPGP_1 * 1 - ART1731BIS + min(RCELREPGP_1, max(RCELREPGP_P + RCELREPGPP2, RCELREPGP1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYJ = max(0, RCELREPYJ_1 * 1 - ART1731BIS + min(RCELREPYJ_1, max(RCELREPYJ_P + RCELREPYJP2, RCELREPYJ1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPYB = max(min(ACELREPYB, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC])), 0)
RCELREPHF = max(0, RCELREPHF_1 * 1 - ART1731BIS + min(RCELREPHF_1, max(RCELREPHF_P + RCELREPHFP2, RCELREPHF1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELRREDLM = max(min(CELRREDLM, RRI1 - NRLOGDOM - NRRI2 - NRCELRREDLA - NRCELRREDLB - NRCELRREDLE), 0)
NRCELREPHD = max(min(ACELREPHD, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE])), 0)
NRCELREPYH = max(min(ACELREPYH, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ])), 0)
RCELREPHR = max(0, RCELREPHR_1 * 1 - ART1731BIS + min(RCELREPHR_1, max(RCELREPHR_P + RCELREPHRP2, RCELREPHR1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYE = max(0, RCELREPYE_1 * 1 - ART1731BIS + min(RCELREPYE_1, max(RCELREPYE_P + RCELREPYEP2, RCELREPYE1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELHM = max(min(RCEL_HM, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA])), 0)
RCELREPHB = max(0, RCELREPHB_1 * 1 - ART1731BIS + min(RCELREPHB_1, max(RCELREPHB_P + RCELREPHBP2, RCELREPHB1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELHL = max(min(RCEL_HL, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM), 0)
NRCELREPHR = max(min(RCELREP_HR, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS])), 0)
NRCELREPHT = max(min(RCELREP_HT, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU])), 0)
NRCELREPYE = max(min(ACELREPYE, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK])), 0)
NRCELREPYJ = max(min(ACELREPYJ, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD])), 0)
RCELREPGU = max(0, RCELREPGU_1 * 1 - ART1731BIS + min(RCELREPGU_1, max(RCELREPGU_P + RCELREPGUP2, RCELREPGU1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELHM = max(0, RCELHM_1 * 1 - ART1731BIS + min(RCELHM_1, max(RCELHM_P + RCELHMP2, RCELHM1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPHV = max(min(RCELREP_HV, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW])), 0)
NRCELREPGJ = max(min(ACELREPGJ, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK])), 0)
NRCELREPGU = max(min(ACELREPGU, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB])), 0)
NRCELREPGP = max(min(ACELREPGP, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW])), 0)
RCELHL_1 = max(min(RCEL_HL, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPHU = max(min(RCELREP_HU, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR])), 0)
LIGRRCEL11 = is_positive(RRCELMG) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCELREPYL_1 = max(min(ACELREPYL, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - RCELREPYH_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGX = max(0, RCELREPGX_1 * 1 - ART1731BIS + min(RCELREPGX_1, max(RCELREPGX_P + RCELREPGXP2, RCELREPGX1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPYI = max(min(ACELREPYI, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB])), 0)
RCELREPHU_1 = max(min(RCELREP_HU, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - RCELREPHS_1 - RCELREPHR_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYK = max(0, RCELREPYK_1 * 1 - ART1731BIS + min(RCELREPYK_1, max(RCELREPYK_P + RCELREPYKP2, RCELREPYK1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPGW = max(0, RCELREPGW_1 * 1 - ART1731BIS + min(RCELREPGW_1, max(RCELREPGW_P + RCELREPGWP2, RCELREPGW1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPYF = max(min(ACELREPYF, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG])), 0)
NRCELREPYK = max(min(ACELREPYK, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF])), 0)
RCELREPYA = max(0, RCELREPYA_1 * 1 - ART1731BIS + min(RCELREPYA_1, max(RCELREPYA_P + RCELREPYAP2, RCELREPYA1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHD = max(0, RCELREPHD_1 * 1 - ART1731BIS + min(RCELREPHD_1, max(RCELREPHD_P + RCELREPHDP2, RCELREPHD1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELREPHA = max(min(ACELREPHA, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB])), 0)
NRCELREPYD = max(min(ACELREPYD, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE])), 0)
NRCELREPGL = max(min(ACELREPGL, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP])), 0)
RCELHL = max(0, RCELHL_1 * 1 - ART1731BIS + min(RCELHL_1, max(RCELHL_P + RCELHLP2, RCELHL1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELHNO_1 = max(min(RCEL_HNO, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHT_1 = max(min(RCELREP_HT, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - RCELREPHS_1 - RCELREPHR_1 - RCELREPHU_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPYL = max(0, RCELREPYL_1 * 1 - ART1731BIS + min(RCELREPYL_1, max(RCELREPYL_P + RCELREPYLP2, RCELREPYL1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELHJK_1 = max(min(RCEL_HJK, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1 - RCELHNO_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELNQ_1 = max(min(RCEL_NQ, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1 - RCELHNO_1 - RCELHJK_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELHNO = max(min(RCEL_HNO, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL), 0)
RCELHNO = max(0, RCELHNO_1 * 1 - ART1731BIS + min(RCELHNO_1, max(RCELHNO_P + RCELHNOP2, RCELHNO1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHU = max(0, RCELREPHU_1 * 1 - ART1731BIS + min(RCELREPHU_1, max(RCELREPHU_P + RCELREPHUP2, RCELREPHU1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHZ_1 = max(min(RCELREP_HZ, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - RCELREPHS_1 - RCELREPHR_1 - RCELREPHU_1 - RCELREPHT_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELNQ = max(0, RCELNQ_1 * 1 - ART1731BIS + min(RCELNQ_1, max(RCELNQ_P + RCELNQP2, RCELNQ1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHT = max(0, RCELREPHT_1 * 1 - ART1731BIS + min(RCELREPHT_1, max(RCELREPHT_P + RCELREPHTP2, RCELREPHT1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELHJK = max(0, RCELHJK_1 * 1 - ART1731BIS + min(RCELHJK_1, max(RCELHJK_P + RCELHJKP2, RCELHJK1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RRCELHH = max(0, RCEL_HL_R + RCEL_HM_R + RCEL_HNO_R + sum([RCELREP_HR_R, RCELREP_HS_R, RCELREP_HT_R, RCELREP_HU_R, RCELREP_HX_R, RCELREP_HZ_R]) - RCELHL + RCELHM + RCELHNO + sum([RCELREPHR, RCELREPHS, RCELREPHT, RCELREPHU, RCELREPHX, RCELREPHZ])) * is_positive(sum([CELREPHR, CELREPHS, CELREPHT, CELREPHU, CELREPHX, CELREPHZ]) + sum([CELLIERHL, CELLIERHM, CELLIERHN, CELLIERHO]))
NRCELHJK = max(min(RCEL_HJK, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL - NRCELHNO), 0)
RCELNBGL_1 = max(min(RCEL_NBGL, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1 - RCELHNO_1 - RCELHJK_1 - RCELNQ_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHX_1 = max(min(RCELREP_HX, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - RCELREPHS_1 - RCELREPHR_1 - RCELREPHU_1 - RCELREPHT_1 - RCELREPHZ_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHZ = max(0, RCELREPHZ_1 * 1 - ART1731BIS + min(RCELREPHZ_1, max(RCELREPHZ_P + RCELREPHZP2, RCELREPHZ1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHW_1 = max(min(RCELREP_HW, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - RCELREPHS_1 - RCELREPHR_1 - RCELREPHU_1 - RCELREPHT_1 - RCELREPHZ_1 - RCELREPHX_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELNBGL = max(0, RCELNBGL_1 * 1 - ART1731BIS + min(RCELNBGL_1, max(RCELNBGL_P + RCELNBGLP2, RCELNBGL1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RRCEL2009 = max(0, RRCELHH + CELREPGU + CELREPGT + CELREPHF + CELREPHE - RCELREPGU - RCELREPGT - RCELREPHF - RCELREPHE * is_positive(CELREPGU + CELREPGT + CELREPHF + CELREPHE) + CELREPYG + CELREPYH - RCELREPYG - RCELREPYH * is_positive(CELREPYG + CELREPYH)) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHV_1 = max(min(RCELREP_HV, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - RCELREPHS_1 - RCELREPHR_1 - RCELREPHU_1 - RCELREPHT_1 - RCELREPHZ_1 - RCELREPHX_1 - RCELREPHW_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHX = max(0, RCELREPHX_1 * 1 - ART1731BIS + min(RCELREPHX_1, max(RCELREPHX_P + RCELREPHXP2, RCELREPHX1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELNQ = max(min(RCEL_NQ, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL - NRCELHNO - NRCELHJK), 0)
LIGRRCEL46 = is_positive(RRCEL2009) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCELCOM_1 = max(min(RCEL_COM, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1 - RCELHNO_1 - RCELHJK_1 - RCELNQ_1 - RCELNBGL_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGRRCEL4 = is_positive(RRCEL2009 + RRCELLA + RRCELLB + RRCELLE + RRCELLM + RRCELLN) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
NRCELNBGL = max(min(RCEL_NBGL, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL - NRCELHNO - NRCELHJK - NRCELNQ), 0)
RCEL_1 = max(min(RCEL_2011, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1 - RCELHNO_1 - RCELHJK_1 - RCELNQ_1 - RCELNBGL_1 - RCELCOM_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCEL = max(0, RCEL_1 * 1 - ART1731BIS + min(RCEL_1, max(RCEL_P + RCELP2, RCEL1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELCOM = max(min(RCEL_COM, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL - NRCELHNO - NRCELHJK - NRCELNQ - NRCELNBGL), 0)
RCELREPHW = max(0, RCELREPHW_1 * 1 - ART1731BIS + min(RCELREPHW_1, max(RCELREPHW_P + RCELREPHWP2, RCELREPHW1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELREPHV = max(0, RCELREPHV_1 * 1 - ART1731BIS + min(RCELREPHV_1, max(RCELREPHV_P + RCELREPHVP2, RCELREPHV1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELJP_1 = max(min(RCEL_JP, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1 - RCELHNO_1 - RCELHJK_1 - RCELNQ_1 - RCELNBGL_1 - RCELCOM_1 - RCEL_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELCOM = max(0, RCELCOM_1 * 1 - ART1731BIS + min(RCELCOM_1, max(RCELCOM_P + RCELCOMP2, RCELCOM1731 + 0) * 1 - PREM8_11) * ART1731BIS * 1 - is_positive(null(CMAJ2 - 8) + null(CMAJ2 - 11))) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELJBGL_1 = max(min(RCEL_JBGL, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1 - RCELHNO_1 - RCELHJK_1 - RCELNQ_1 - RCELNBGL_1 - RCELCOM_1 - RCEL_1 - RCELJP_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RRCEL2010 = max(0, CELREPYE + CELREPYF + CELREPYL - RCELREPYE - RCELREPYF - RCELREPYL * is_positive(CELREPYE + CELREPYF + CELREPYL) + CELREPGX + CELREPGS + CELREPGP - RCELREPGX - RCELREPGS - RCELREPGP * is_positive(CELREPGX + CELREPGS + CELREPGP) + CELREPHH + CELREPHD + CELREPHB + RCELREP_HW_R + RCELREP_HV_R - RCELREPHH - RCELREPHD - RCELREPHB - RCELREPHW - RCELREPHV * is_positive(CELREPHH + CELREPHD + CELREPHB + CELREPHW + CELREPHV) + RCEL_NQ_R + RCEL_NBGL_R + RCEL_HJK_R - RCELNQ - RCELNBGL - RCELHJK * is_positive(sum([CELLIERNQ, CELLIERNB, CELLIERNG, CELLIERNL]) + CELLIERHJ + CELLIERHK)) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGRRCEL35 = is_positive(RRCEL2010) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCELJP = max(0, RCELJP_1 * 1 - ART1731BIS + min(RCELJP_1, max(RCELJP_P + RCELJPP2, RCELJP1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCEL = max(min(RCEL_2011, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL - NRCELHNO - NRCELHJK - NRCELNQ - NRCELNBGL - NRCELCOM), 0)
LIGRRCEL3 = is_positive(RRCEL2010 + RRCELLC + RRCELLD + RRCELLS + RRCELLT) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCELJOQR_1 = max(min(RCEL_JOQR, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1 - RCELHNO_1 - RCELHJK_1 - RCELNQ_1 - RCELNBGL_1 - RCELCOM_1 - RCEL_1 - RCELJP_1 - RCELJBGL_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELJBGL = max(0, RCELJBGL_1 * 1 - ART1731BIS + min(RCELJBGL_1, max(RCELJBGL_P + RCELJBGLP2, RCELJBGL1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELJP = max(min(RCEL_JP, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL - NRCELHNO - NRCELHJK - NRCELNQ - NRCELNBGL - NRCELCOM - NRCEL), 0)
RCELJOQR = max(0, RCELJOQR_1 * 1 - ART1731BIS + min(RCELJOQR_1, max(RCELJOQR_P + RCELJOQRP2, RCELJOQR1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RRCEL2011 = max(0, RCEL_2011_R - RCEL * is_positive(CELSOMN) + RCEL_COM_R - RCELCOM * is_positive(sum([CELLIERNP, CELLIERNR, CELLIERNS, CELLIERNT])) + CELREPYC + CELREPYD + CELREPYK - RCELREPYC - RCELREPYD - RCELREPYK * is_positive(sum([CELREPYC, CELREPYD, CELREPYK])) + CELREPGW + CELREPGL + CELREPGK + CELREPHG + CELREPHA + RCEL_JBGL_R + RCEL_JP_R - RCELREPGW - RCELREPGL - RCELREPGK - RCELREPHG - RCELREPHA - RCELJBGL - RCELJP * is_positive(sum([CELREPGW, CELREPGL, CELREPGK]) + CELREPHG + CELREPHA + sum([CELLIERJB, CELLIERJG, CELLIERJL, CELLIERJP]))) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCEL2012_1 = max(min(RCEL_2012, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1 - RCELHNO_1 - RCELHJK_1 - RCELNQ_1 - RCELNBGL_1 - RCELCOM_1 - RCEL_1 - RCELJP_1 - RCELJBGL_1 - RCELJOQR_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELJBGL = max(min(RCEL_JBGL, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL - NRCELHNO - NRCELHJK - NRCELNQ - NRCELNBGL - NRCELCOM - NRCEL - NRCELJP), 0)
RCELFD_1 = max(min(RCEL_FD, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1 - RCELHNO_1 - RCELHJK_1 - RCELNQ_1 - RCELNBGL_1 - RCELCOM_1 - RCEL_1 - RCELJP_1 - RCELJBGL_1 - RCELJOQR_1 - RCEL2012_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGRRCEL2 = is_positive(RRCEL2011 + RRCELLF + RRCELLZ + RRCELLX) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCELFABC_1 = max(min(RCEL_FABC, IDOM11 - DEC11 - REDUCAVTCEL - RCELRREDSOM - sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) - sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) - sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) - RCELHM_1 - RCELHL_1 - RCELHNO_1 - RCELHJK_1 - RCELNQ_1 - RCELNBGL_1 - RCELCOM_1 - RCEL_1 - RCELJP_1 - RCELJBGL_1 - RCELJOQR_1 - RCEL2012_1 - RCELFD_1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELFD = max(0, RCELFD_1 * 1 - ART1731BIS + min(RCELFD_1, max(RCELFD_P + RCELFDP2, RCELFD1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGRRCEL24 = is_positive(RRCEL2011) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
RCELTOT_1 = RCELRREDSOM + sum([RCELREPHS_1, RCELREPHR_1, RCELREPHU_1, RCELREPHT_1, RCELREPHZ_1, RCELREPHX_1, RCELREPHW_1, RCELREPHV_1, RCELREPHF_1, RCELREPHE_1, RCELREPHD_1, RCELREPHH_1, RCELREPHG_1, RCELREPHB_1, RCELREPHA_1]) + sum([RCELREPGU_1, RCELREPGX_1, RCELREPGT_1, RCELREPGS_1, RCELREPGW_1, RCELREPGP_1, RCELREPGL_1, RCELREPGV_1, RCELREPGK_1, RCELREPGJ_1]) + sum([RCELREPYH_1, RCELREPYL_1, RCELREPYG_1, RCELREPYF_1, RCELREPYK_1, RCELREPYE_1, RCELREPYD_1, RCELREPYJ_1, RCELREPYC_1, RCELREPYB_1, RCELREPYI_1, RCELREPYA_1]) + RCELHM_1 + RCELHL_1 + RCELHNO_1 + RCELHJK_1 + RCELNQ_1 + RCELNBGL_1 + RCELCOM_1 + RCEL_1 + RCELJP_1 + RCELJBGL_1 + RCELJOQR_1 + RCEL2012_1 + RCELFD_1 + RCELFABC_1
NRCELJOQR = max(min(RCEL_JOQR, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL - NRCELHNO - NRCELHJK - NRCELNQ - NRCELNBGL - NRCELCOM - NRCEL - NRCELJP - NRCELJBGL), 0)
NRCEL2012 = max(min(RCEL_2012, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL - NRCELHNO - NRCELHJK - NRCELNQ - NRCELNBGL - NRCELCOM - NRCEL - NRCELJP - NRCELJBGL - NRCELJOQR), 0)
NRCELFD = max(min(RCEL_FD, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL - NRCELHNO - NRCELHJK - NRCELNQ - NRCELNBGL - NRCELCOM - NRCEL - NRCELJP - NRCELJBGL - NRCELJOQR - NRCEL2012), 0)
RCEL2012 = max(0, RCEL2012_1 * 1 - ART1731BIS + min(RCEL2012_1, max(RCEL2012_P + RCEL2012P2, RCEL20121731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCELFABC = max(0, RCELFABC_1 * 1 - ART1731BIS + min(RCELFABC_1, max(RCELFABC_P + RCELFABCP2, RCELFABC1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELFABC = max(min(RCEL_FABC, RRI1 - NRLOGDOM - NRRI2 - sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) - NRCELRREDMG - NRCELRREDMH - sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) - sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) - sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) - NRCELHM - NRCELHL - NRCELHNO - NRCELHJK - NRCELNQ - NRCELNBGL - NRCELCOM - NRCEL - NRCELJP - NRCELJBGL - NRCELJOQR - NRCEL2012 - NRCELFD), 0)
RCELTOT = RCELRREDSOM + sum([RCELREPHS, RCELREPHR, RCELREPHU, RCELREPHT, RCELREPHZ, RCELREPHX, RCELREPHW, RCELREPHV, RCELREPHF, RCELREPHE, RCELREPHD, RCELREPHH, RCELREPHG, RCELREPHB, RCELREPHA]) + sum([RCELREPGU, RCELREPGX, RCELREPGT, RCELREPGS, RCELREPGW, RCELREPGP, RCELREPGL, RCELREPGV, RCELREPGK, RCELREPGJ]) + sum([RCELREPYH, RCELREPYL, RCELREPYG, RCELREPYF, RCELREPYK, RCELREPYE, RCELREPYD, RCELREPYJ, RCELREPYC, RCELREPYB, RCELREPYI, RCELREPYA]) + RCELHM + RCELHL + RCELHNO + RCELHJK + RCELNQ + RCELNBGL + RCELCOM + RCEL + RCELJP + RCELJBGL + RCELJOQR + RCEL2012 + RCELFD + RCELFABC
RRCEL2012 = max(0, CELREPYJ + CELREPYI + CELREPYB + CELREPYA - RCELREPYJ - RCELREPYI - RCELREPYB - RCELREPYA) * is_positive(sum([CELREPYJ, CELREPYI, CELREPYB, CELREPYA])) + max(0, RCEL_2012_R - RCEL2012) * is_positive(CELSOMJ) + max(0, RCEL_JOQR_R - RCELJOQR) * is_positive(sum([CELLIERJO, CELLIERJQ, CELLIERJR])) + max(0, CELREPGV - RCELREPGV) * is_positive(CELREPGV) + max(0, CELREPGJ - RCELREPGJ) * is_positive(CELREPGJ) + max(0, RCEL_FABC_R - RCELFABC) * is_positive(CELLIERFA + CELLIERFB + CELLIERFC) + max(0, RCEL_FD_R - RCELFD) * is_positive(CELLIERFD) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCELTOT = sum([NRCELRREDLA, NRCELRREDLB, NRCELRREDLE, NRCELRREDLM, NRCELRREDLN, NRCELRREDLC, NRCELRREDLD, NRCELRREDLS, NRCELRREDLT, NRCELRREDLF, NRCELRREDLZ, NRCELRREDLX]) + NRCELRREDMG + NRCELRREDMH + sum([NRCELREPHS, NRCELREPHR, NRCELREPHU, NRCELREPHT, NRCELREPHZ, NRCELREPHX, NRCELREPHW, NRCELREPHV, NRCELREPHF, NRCELREPHE, NRCELREPHD, NRCELREPHH, NRCELREPHG, NRCELREPHB, NRCELREPHA]) + sum([NRCELREPGU, NRCELREPGX, NRCELREPGT, NRCELREPGS, NRCELREPGW, NRCELREPGP, NRCELREPGL, NRCELREPGV, NRCELREPGK, NRCELREPGJ]) + sum([NRCELREPYH, NRCELREPYL, NRCELREPYG, NRCELREPYF, NRCELREPYK, NRCELREPYE, NRCELREPYD, NRCELREPYJ, NRCELREPYC, NRCELREPYB, NRCELREPYI, NRCELREPYA]) + NRCELHM + NRCELHL + NRCELHNO + NRCELHJK + NRCELNQ + NRCELNBGL + NRCELCOM + NRCEL + NRCELJP + NRCELJBGL + NRCELJOQR + NRCEL2012 + NRCELFD + NRCELFABC
RREDMEUB_1 = max(min(AREDMEUB, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT), 0)
LIGRRCEL13 = is_positive(RRCEL2012) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
LIGRRCEL1 = is_positive(RRCELMG + RRCELMH + RRCEL2012) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1 * LIG2
NRREDMEUB = max(min(AREDMEUB, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT), 0)
NRREDREP = max(min(AREDREP, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB), 0)
NRILMIX = max(min(AILMIX, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP), 0)
RREDMEUB = max(0, RREDMEUB_1 * 1 - ART1731BIS + min(RREDMEUB_1, max(RREDMEUB_P + RREDMEUBP2, RREDMEUB1731 + 0) * 1 - PREM8_11) * ART1731BIS)
REPMEUIS = DREDMEUB - RREDMEUB * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRILMIY = max(min(AILMIY, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX), 0)
NRILMPA = max(min(AILMPA, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY), 0)
RREDREP_1 = max(min(AREDREP, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB), 0)
NRINVRED = max(min(AINVRED, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA), 0)
MEUBLERED = REPMEUIS
RREDREP = max(0, RREDREP_1 * 1 - ART1731BIS + min(RREDREP_1, max(RREDREP_P + RREDREPP2, RREDREP1731 + 0) * 1 - PREM8_11) * ART1731BIS)
LIGREPRED = is_positive(MEUBLERED) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRILMIH = max(min(AILMIH, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED), 0)
RILMIX_1 = max(min(AILMIX, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP), 0)
RILMIX = max(0, RILMIX_1 * 1 - ART1731BIS + min(RILMIX_1, max(RILMIX_P + RILMIXP2, RILMIX1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NRILMJC = max(min(AILMJC, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH), 0)
REPMEUIX = AILMIX_R - RILMIX * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPMEUIU = DREDREP - RREDREP * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGREPLOCIX = is_positive(REPMEUIX) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMIY_1 = max(min(AILMIY, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX), 0)
REPREDREP = REPMEUIU
NRILMPB = max(min(AILMPB, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC), 0)
RILMIY = max(0, RILMIY_1 * 1 - ART1731BIS + min(RILMIY_1, max(RILMIY_P + RILMIYP2, RILMIY1731 + 0) * 1 - PREM8_11) * ART1731BIS)
REPMEUIY = DILMIY - RILMIY * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMPA = max(min(AILMPA, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY), 0)
LIGREPRESI = is_positive(REPREDREP) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRILMIZ = max(min(AILMIZ, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB), 0)
REPMEUPA = DILMPA - RILMPA * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RINVRED_1 = max(min(AINVRED, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA), 0)
REPLOCN2 = REPMEUIY
NRILMJI = max(min(AILMJI, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ), 0)
NRILMPC = max(min(AILMPC, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI), 0)
RINVRED = max(0, RINVRED_1 * 1 - ART1731BIS + min(RINVRED_1, max(RINVRED_P + RINVREDP2, RINVRED1731 + 0) * 1 - PREM8_11) * ART1731BIS)
LIGREP7PA = is_positive(REPMEUPA) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGREPLOC2 = is_positive(REPLOCN2) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRILMJS = max(min(AILMJS, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC), 0)
NRILMPD = max(min(AILMPD, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS), 0)
RILMIH_1 = max(min(AILMIH, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED), 0)
REPMEUIT = DINVRED - RINVRED * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRILMPE = max(min(AILMPE, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD), 0)
NRMEUBLE = max(min(MEUBLERET, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE), 0)
REPINVRED = REPMEUIT
RILMIH = max(0, RILMIH_1 * 1 - ART1731BIS + min(RILMIH_1, max(RILMIH_P + RILMIHP2, RILMIH1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NRPROREP = max(min(RETPROREP, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE), 0)
LIGREPINV = is_positive(REPINVRED) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMJC_1 = max(min(AILMJC, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH), 0)
NRREPNPRO = max(min(RETREPNPRO, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP), 0)
REPMEUIH = AILMIH_R - RILMIH * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMJC = max(0, RILMJC_1 * 1 - ART1731BIS + min(RILMJC_1, max(RILMJC_P + RILMJCP2, RILMJC1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RILMPB = max(min(AILMPB, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC), 0)
RILMIZ_1 = max(min(AILMIZ, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB), 0)
RILMIZ = max(0, RILMIZ_1 * 1 - ART1731BIS + min(RILMIZ_1, max(RILMIZ_P + RILMIZP2, RILMIZ1731 + 0) * 1 - PREM8_11) * ART1731BIS)
LIGREPLOCIH = is_positive(REPMEUIH) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPMEUIZ = AILMIZ_R - RILMIZ * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRREPMEU = max(min(RETREPMEU, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO), 0)
RILMJI_1 = max(min(AILMJI, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ), 0)
REPMEUPB = DILMPB - RILMPB * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPMEUJC = DILMJC - RILMJC * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMJI = max(0, RILMJI_1 * 1 - ART1731BIS + min(RILMJI_1, max(RILMJI_P + RILMJIP2, RILMJI1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NRILMIC = max(min(AILMIC, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU), 0)
RILMPC = max(min(AILMPC, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI), 0)
LIGREPLOCIZ = is_positive(REPMEUIZ) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPLOCN1 = REPMEUJC
REPMEUPC = DILMPC - RILMPC * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGREP7PB = is_positive(REPMEUPB) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMJS_1 = max(min(AILMJS, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC), 0)
NRILMIB = max(min(AILMIB, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC), 0)
REPMEUJI = DILMJI - RILMJI * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMJS = max(0, RILMJS_1 * 1 - ART1731BIS + min(RILMJS_1, max(RILMJS_P + RILMJSP2, RILMJS1731 + 0) * 1 - PREM8_11) * ART1731BIS)
REPRESINEUV = REPMEUJI
LIGREPLOC1 = is_positive(REPLOCN1) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGREP7PC = is_positive(REPMEUPC) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMPD = max(min(AILMPD, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS), 0)
NRILMIA = max(min(AILMIA, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB), 0)
REPMEUPD = DILMPD - RILMPD * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGREPLOCIJ = is_positive(REPRESINEUV) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGREP7PD = is_positive(REPMEUPD) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPMEUJS = DILMJS - RILMJS * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRILMJY = max(min(AILMJY, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA), 0)
RILMPE = max(min(AILMPE, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD), 0)
RMEUBLE_1 = max(min(MEUBLERET, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE), 0)
RMEUBLE = max(0, RMEUBLE_1 * 1 - ART1731BIS + min(RMEUBLE_1, max(RMEUBLE_P + RMEUBLEP2, RMEUBLE1731 + 0) * 1 - PREM8_11) * ART1731BIS)
REPLOCNT = REPMEUJS
REPMEUPE = DILMPE - RILMPE * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRILMJX = max(min(AILMJX, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY), 0)
LIGREPLOCJS = is_positive(REPLOCNT) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPMEUIK = MEUBLERET - RMEUBLE * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RPROREP_1 = max(min(RETPROREP, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE), 0)
LIGREP7PE = is_positive(REPMEUPE) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRILMJW = max(min(AILMJW, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX), 0)
NRILMJV = max(min(AILMJV, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW), 0)
NRILMOE = max(min(AILMOE, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV), 0)
RPROREP = max(0, RPROREP_1 * 1 - ART1731BIS + min(RPROREP_1, max(RPROREP_P + RPROREPP2, RPROREP1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RREPNPRO_1 = max(min(RETREPNPRO, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP), 0)
NRILMOD = max(min(AILMOD, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV - NRILMOE), 0)
RREPNPRO = max(0, RREPNPRO_1 * 1 - ART1731BIS + min(RREPNPRO_1, max(RREPNPRO_P + RREPNPROP2, RREPNPRO1731 + 0) * 1 - PREM8_11) * ART1731BIS)
REPMEUIR = RETPROREP - RPROREP * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RREPMEU_1 = max(min(RETREPMEU, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO), 0)
RREPMEU = max(0, RREPMEU_1 * 1 - ART1731BIS + min(RREPMEU_1, max(RREPMEU_P + RREPMEUP2, RREPMEU1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RILMIC_1 = max(min(AILMIC, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU), 0)
REPMEUIQ = RETREPNPRO - RREPNPRO * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPMEUIP = RETREPMEU - RREPMEU * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMIC = max(0, RILMIC_1 * 1 - ART1731BIS + min(RILMIC_1, max(RILMIC_P + RILMICP2, RILMIC1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NRILMOC = max(min(AILMOC, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV - NRILMOE - NRILMOD), 0)
REPMEUIC = AILMIC_R - RILMIC * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMIB_1 = max(min(AILMIB, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC), 0)
NRILMOB = max(min(AILMOB, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV - NRILMOE - NRILMOD - NRILMOC), 0)
RILMIB = max(0, RILMIB_1 * 1 - ART1731BIS + min(RILMIB_1, max(RILMIB_P + RILMIBP2, RILMIB1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RILMIA_1 = max(min(AILMIA, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB), 0)
REPMEUIB = AILMIB_R - RILMIB * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRILMOA = max(min(AILMOA, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV - NRILMOE - NRILMOD - NRILMOC - NRILMOB), 0)
NRRESIMEUB = max(min(RETRESIMEUB, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV - NRILMOE - NRILMOD - NRILMOC - NRILMOB - NRILMOA), 0)
NRRESINEUV = max(min(RETRESINEUV, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV - NRILMOE - NRILMOD - NRILMOC - NRILMOB - NRILMOA - NRRESIMEUB - NRRESIMEUB), 0)
RILMIA = max(0, RILMIA_1 * 1 - ART1731BIS + min(RILMIA_1, max(RILMIA_P + RILMIAP2, RILMIA1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NRLOCIDEFG = max(min(RETLOCIDEFG, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV - NRILMOE - NRILMOD - NRILMOC - NRILMOB - NRILMOA - NRRESIMEUB - NRRESIMEUB - NRRESINEUV), 0)
NRCODJU = max(min(RETCODJU, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV - NRILMOE - NRILMOD - NRILMOC - NRILMOB - NRILMOA - NRRESIMEUB - NRRESIMEUB - NRRESINEUV - NRLOCIDEFG), 0)
NRCODJT = max(min(RETCODJT, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV - NRILMOE - NRILMOD - NRILMOC - NRILMOB - NRILMOA - NRRESIMEUB - NRRESIMEUB - NRRESINEUV - NRLOCIDEFG - NRCODJU), 0)
NRRESIVIEU = max(min(RETRESIVIEU, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV - NRILMOE - NRILMOD - NRILMOC - NRILMOB - NRILMOA - NRRESIMEUB), 0)
RILMJY_1 = max(min(AILMJY, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA), 0)
REPMEUIA = AILMIA_R - RILMIA * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRCODOU = max(min(ACODOU, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRREDMEUB - NRREDREP - NRILMIX - NRILMIY - NRILMPA - NRINVRED - NRILMIH - NRILMJC - NRILMPB - NRILMIZ - NRILMJI - NRILMPC - NRILMJS - NRILMPD - NRILMPE - NRMEUBLE - NRPROREP - NRREPNPRO - NRREPMEU - NRILMIC - NRILMIB - NRILMIA - NRILMJY - NRILMJX - NRILMJW - NRILMJV - NRILMOE - NRILMOD - NRILMOC - NRILMOB - NRILMOA - NRRESIMEUB - NRRESIMEUB - NRRESINEUV - NRLOCIDEFG - NRCODJU - NRCODJT), 0)
NRLOCNPRO = NRREDMEUB + NRREDREP + NRILMIX + NRILMIY + NRILMPA + NRINVRED + NRILMIH + NRILMJC + NRILMPB + NRILMIZ + NRILMJI + NRILMPC + NRILMJS + NRILMPD + NRILMPE + NRMEUBLE + NRPROREP + NRREPNPRO + NRREPMEU + NRILMIC + NRILMIB + NRILMIA + NRILMJY + NRILMJX + NRILMJW + NRILMJV + NRILMOE + NRILMOD + NRILMOC + NRILMOB + NRILMOA + NRRESIMEUB + NRRESIVIEU + NRRESINEUV + NRLOCIDEFG + NRCODJU + NRCODJT + NRCODOU
RILMJY = max(0, RILMJY_1 * 1 - ART1731BIS + min(RILMJY_1, max(RILMJY_P + RILMJYP2, RILMJY1731 + 0) * 1 - PREM8_11) * ART1731BIS)
REPMEUJY = DILMJY - RILMJY * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NRPATNAT1 = max(min(APATNAT1, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO), 0)
RILMJX_1 = max(min(AILMJX, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY), 0)
NRPATNAT2 = max(min(APATNAT2, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT1), 0)
RILMJX = max(0, RILMJX_1 * 1 - ART1731BIS + min(RILMJX_1, max(RILMJX_P + RILMJXP2, RILMJX1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NRPATNAT3 = max(min(APATNAT3, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT1 - NRPATNAT2), 0)
RILMJW_1 = max(min(AILMJW, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX), 0)
NRPATNAT = max(min(APATNAT, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT1 - NRPATNAT2 - NRPATNAT3), 0)
REPMEUJX = DILMJX - RILMJX * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETKG = max(min(INVSOCNRET, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT), 0) * 1 - V_CNR
NINVRETKGR = NINVRETKG - arr(NINVRETKG * TX35 / 100) * 1 - V_CNR
INVRETKG = min(arr(NINVRETKG * TX35 / 100), PLAF_INVDOM) * 1 - V_CNR
NRRI3 = NRCELTOT + NRLOCNPRO + NRPATNAT1 + NRPATNAT2 + NRPATNAT3 + NRPATNAT
INVRETKGA = min(arr(NINVRETKG * TX35 / 100), RNIDOM1) * 1 - V_CNR
NINVRETKH = max(min(INVOMSOCKH, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG), 0) * 1 - V_CNR
NINVRETKHR = NINVRETKH - arr(NINVRETKH * TX35 / 100) * 1 - V_CNR
RILMJW = max(0, RILMJW_1 * 1 - ART1731BIS + min(RILMJW_1, max(RILMJW_P + RILMJWP2, RILMJW1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RILMJV_1 = max(min(AILMJV, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW), 0)
INVRETKGR = min(max(min(arr(INVRETKG * 13 / 7), NINVRETKG - INVRETKG), NINVRETKG - INVRETKG), PLAF_INVDOM1) * 1 - V_CNR
INVRETKHA = min(arr(NINVRETKH * TX35 / 100), max(0, RNIDOM1 - INVRETKGA)) * 1 - V_CNR
NINVRETKI = max(min(INVOMSOCKI, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH), 0) * 1 - V_CNR
REPMEUJW = DILMJW - RILMJW * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETKIA = min(arr(NINVRETKI * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA)) * 1 - V_CNR
NINVRETQN = max(min(INVSOC2010, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI), 0) * 1 - V_CNR
NINVRETQU = max(min(INVOMSOCQU, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN), 0) * 1 - V_CNR
INVRETKH = min(arr(NINVRETKH * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG)) * 1 - V_CNR
RILMJV = max(0, RILMJV_1 * 1 - ART1731BIS + min(RILMJV_1, max(RILMJV_P + RILMJVP2, RILMJV1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NINVRETKIR = NINVRETKI - arr(NINVRETKI * TX35 / 100) * 1 - V_CNR
INVRETQNA = min(arr(NINVRETQN * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA)) * 1 - V_CNR
NINVRETQUR = NINVRETQU - arr(NINVRETQU * TX35 / 100) * 1 - V_CNR
NINVRETQNR = NINVRETQN - arr(NINVRETQN * TX35 / 100) * 1 - V_CNR
INVRETKHR = min(max(min(arr(INVRETKH * 13 / 7), NINVRETKH - INVRETKH), NINVRETKH - INVRETKH), max(0, PLAF_INVDOM1 - INVRETKGR)) * 1 - V_CNR
NINVRETQK = max(min(INVLOGSOC, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU), 0) * 1 - V_CNR
INVRETKI = min(arr(NINVRETKI * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH)) * 1 - V_CNR
INVRETQN = min(arr(NINVRETQN * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI)) * 1 - V_CNR
RILMOE = max(min(AILMOE, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV), 0)
INVRETKIR = min(max(min(arr(INVRETKI * 13 / 7), NINVRETKI - INVRETKI), NINVRETKI - INVRETKI), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR)) * 1 - V_CNR
RILMOD = max(min(AILMOD, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE), 0)
INVRETQUA = min(arr(NINVRETQU * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA)) * 1 - V_CNR
INVRETQKA = min(arr(NINVRETQK * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA)) * 1 - V_CNR
REPMEUJV = DILMJV - RILMJV * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMOC = max(min(AILMOC, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD), 0)
REPMEUOD = DILMOD - RILMOD * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETQKR = NINVRETQK - arr(NINVRETQK * TX35 / 100) * 1 - V_CNR
RILMOB = max(min(AILMOB, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC), 0)
REPMEUOE = DILMOE - RILMOE * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETQJ = max(min(INVOMSOCQJ, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK), 0) * 1 - V_CNR
REPMEUOB = DILMOB - RILMOB * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPMEUOC = DILMOC - RILMOC * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RILMOA = max(min(AILMOA, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB), 0)
INVRETQNR = min(max(min(arr(INVRETQN * 13 / 7), NINVRETQN - INVRETQN), NINVRETQN - INVRETQN), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR)) * 1 - V_CNR
INVRETQU = min(arr(NINVRETQU * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN)) * 1 - V_CNR
RRESIMEUB_1 = max(min(RETRESIMEUB, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA), 0)
RRESIMEUB = max(0, RRESIMEUB_1 * 1 - ART1731BIS + min(RRESIMEUB_1, max(RRESIMEUB_P + RRESIMEUBP2, RRESIMEUB1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NINVRETQS = max(min(INVOMSOCQS, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK - NINVRETQJ), 0) * 1 - V_CNR
INVRETQUR = min(max(min(arr(INVRETQU * 13 / 7), NINVRETQU - INVRETQU), NINVRETQU - INVRETQU), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR)) * 1 - V_CNR
NINVRETQJR = NINVRETQJ - arr(NINVRETQJ * TX35 / 100) * 1 - V_CNR
RCODIW_1 = max(min(RETCODIW, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB), 0)
REPMEUOA = DILMOA - RILMOA * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETQJA = min(arr(NINVRETQJ * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA)) * 1 - V_CNR
REPRESIMEUB = RETRESIMEUB_1 - RRESIMEUB
NINVRETQW = max(min(INVOMSOCQW, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK - NINVRETQJ - NINVRETQS), 0) * 1 - V_CNR
INVRETQK = min(arr(NINVRETQK * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU)) * 1 - V_CNR
REPLOCIO = RETRESIMEUB_1 - RRESIMEUB * is_positive(VIEUMEUB + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCODIW = max(0, RCODIW_1 * 1 - ART1731BIS + min(RCODIW_1, max(RCODIW_P + RCODIWP2, RCODIW1731 + 0) * 1 - PREM8_11) * ART1731BIS)
RCODIM_1 = max(min(RETCODIM, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RCODIW), 0)
NINVRETQSR = NINVRETQS - arr(NINVRETQS * TX35 / 100) * 1 - V_CNR
NINVRETQWR = NINVRETQW - arr(NINVRETQW * TX35 / 100) * 1 - V_CNR
INVRETQJ = min(arr(NINVRETQJ * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK)) * 1 - V_CNR
INVRETQKR = min(max(min(arr(INVRETQK * 13 / 7), NINVRETQK - INVRETQK), NINVRETQK - INVRETQK), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR)) * 1 - V_CNR
REPLOCIW = RETCODIW - RCODIW * is_positive(RESIVIANT + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETQSA = min(arr(NINVRETQS * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA)) * 1 - V_CNR
REPLNPZ = REPMEUIK + REPMEUIR + REPMEUIQ + REPMEUIC + REPMEUJY + REPLOCIO + REPLOCIW + REPMEUOE
INVRETQJR = min(max(min(arr(INVRETQJ * 13 / 7), NINVRETQJ - INVRETQJ), NINVRETQJ - INVRETQJ), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR)) * 1 - V_CNR
INVRETQWA = min(arr(NINVRETQW * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA)) * 1 - V_CNR
NINVRETQX = max(min(INVOMSOCQX, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK - NINVRETQJ - NINVRETQS - NINVRETQW), 0) * 1 - V_CNR
RCODIM = max(0, RCODIM_1 * 1 - ART1731BIS + min(RCODIM_1, max(RCODIM_P + RCODIMP2, RCODIM1731 + 0) * 1 - PREM8_11) * ART1731BIS)
INVRETQS = min(arr(NINVRETQS * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK - INVRETQJ)) * 1 - V_CNR
RRESIVIEU = RCODIW + RCODIM
NINVRETQXR = NINVRETQX - arr(NINVRETQX * TX35 / 100) * 1 - V_CNR
REPRESIVIEU = RETRESIVIEU_1 - RRESIVIEU * is_positive(RESIVIEU)
LIGREPLNPZ = is_positive(REPLNPZ) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPLOCIM = RETCODIM - RCODIM * is_positive(RESIVIEU + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETRA = max(min(CODHRA, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK - NINVRETQJ - NINVRETQS - NINVRETQW - NINVRETQX), 0) * 1 - V_CNR
NINVRETRB = max(min(CODHRB, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK - NINVRETQJ - NINVRETQS - NINVRETQW - NINVRETQX - NINVRETRA), 0) * 1 - V_CNR
INVRETQSR = min(max(min(arr(INVRETQS * 13 / 7), NINVRETQS - INVRETQS), NINVRETQS - INVRETQS), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR - INVRETQJR)) * 1 - V_CNR
INVRETQXA = min(arr(NINVRETQX * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA)) * 1 - V_CNR
LIGREPNEUV = is_positive(MEUBLERED + REPREDREP + REPMEUIX + REPLOCN2 + REPMEUPA + REPLNPZ) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RESIVIEUREP = RETRESIVIEU_1 - RRESIVIEU * is_positive(RESIVIANT)
NINVRETRBR = NINVRETRB - arr(NINVRETRB * TX35 / 100) * 1 - V_CNR
NINVRETRAR = NINVRETRA - arr(NINVRETRA * TX35 / 100) * 1 - V_CNR
NINVRETRC = max(min(CODHRC, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK - NINVRETQJ - NINVRETQS - NINVRETQW - NINVRETQX - NINVRETRA - NINVRETRB), 0) * 1 - V_CNR
INVRETQW = min(arr(NINVRETQW * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK - INVRETQJ - INVRETQS)) * 1 - V_CNR
RCODIL_1 = max(min(RETCODIL, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RRESIVIEU), 0)
NINVRETRCR = NINVRETRC - arr(NINVRETRC * TX35 / 100) * 1 - V_CNR
NINVRETRD = max(min(CODHRD, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK - NINVRETQJ - NINVRETQS - NINVRETQW - NINVRETQX - NINVRETRA - NINVRETRB - NINVRETRC), 0) * 1 - V_CNR
NINVRETRDR = NINVRETRD - arr(NINVRETRD * TX35 / 100) * 1 - V_CNR
NINVRETXA = max(min(CODHXA, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK - NINVRETQJ - NINVRETQS - NINVRETQW - NINVRETQX - NINVRETRA - NINVRETRB - NINVRETRC - NINVRETRD), 0) * 1 - V_CNR
REPMEUTOT1 = REPRESIMEUB + REPMEUIK + REPMEUIQ + REPMEUIR + RESIVIEUREP
INVRETQX = min(arr(NINVRETQX * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK - INVRETQJ - INVRETQS - INVRETQW)) * 1 - V_CNR
INVRETRAA = min(arr(NINVRETRA * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA)) * 1 - V_CNR
INVRETRA = min(arr(NINVRETRA * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK - INVRETQJ - INVRETQS - INVRETQW - INVRETQX)) * 1 - V_CNR
NRDOMSOC1 = NINVRETKG + NINVRETKH + NINVRETKI + NINVRETQN + NINVRETQU + NINVRETQK + NINVRETQJ + NINVRETQS + NINVRETQW + NINVRETQX + NINVRETRA + NINVRETRB + NINVRETRC + NINVRETRD
NINVRETXB = max(min(CODHXB, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK - NINVRETQJ - NINVRETQS - NINVRETQW - NINVRETQX - NINVRETRA - NINVRETRB - NINVRETRC - NINVRETRD - NINVRETXA), 0) * 1 - V_CNR
INVRETQWR = min(max(min(arr(INVRETQW * 13 / 7), NINVRETQW - INVRETQW), NINVRETQW - INVRETQW), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR - INVRETQJR - INVRETQSR)) * 1 - V_CNR
INVRETRB = min(arr(NINVRETRB * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK - INVRETQJ - INVRETQS - INVRETQW - INVRETQX - INVRETRA)) * 1 - V_CNR
INVRETRBA = min(arr(NINVRETRB * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA)) * 1 - V_CNR
RCODIL = RCODIL_1 * 1 - ART1731BIS + min(RCODIL_1, max(RCODIL_P + RCODILP2, RCODIL1731 + 0) * 1 - PREM8_11) * ART1731BIS
NINVRETXAR = NINVRETXA - arr(NINVRETXA * TX35 / 100) * 1 - V_CNR
NINVRETXC = max(min(CODHXC, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK - NINVRETQJ - NINVRETQS - NINVRETQW - NINVRETQX - NINVRETRA - NINVRETRB - NINVRETRC - NINVRETRD - NINVRETXA - NINVRETXB), 0) * 1 - V_CNR
RCODIN_1 = max(min(RETCODIN, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RRESIVIEU - RCODIL), 0)
NINVRETXBR = NINVRETXB - arr(NINVRETXB * TX35 / 100) * 1 - V_CNR
INVRETQXR = min(max(min(arr(INVRETQX * 13 / 7), NINVRETQX - INVRETQX), NINVRETQX - INVRETQX), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR - INVRETQJR - INVRETQSR - INVRETQWR)) * 1 - V_CNR
REPLOCIL = RETCODIL - RCODIL * is_positive(MEUBLENP + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETXE = max(min(CODHXE, RRI1 - NRLOGDOM - NRRI2 - NRCELTOT - NRLOCNPRO - NRPATNAT3 - NRPATNAT2 - NRPATNAT1 - NRPATNAT - NINVRETKG - NINVRETKH - NINVRETKI - NINVRETQN - NINVRETQU - NINVRETQK - NINVRETQJ - NINVRETQS - NINVRETQW - NINVRETQX - NINVRETRA - NINVRETRB - NINVRETRC - NINVRETRD - NINVRETXA - NINVRETXB - NINVRETXC), 0) * 1 - V_CNR
NINVRETXCR = NINVRETXC - arr(NINVRETXC * TX35 / 100) * 1 - V_CNR
INVRETRC = min(arr(NINVRETRC * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK - INVRETQJ - INVRETQS - INVRETQW - INVRETQX - INVRETRA - INVRETRB)) * 1 - V_CNR
INVRETRD = min(arr(NINVRETRD * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK - INVRETQJ - INVRETQS - INVRETQW - INVRETQX - INVRETRA - INVRETRB - INVRETRC)) * 1 - V_CNR
NINVRETXER = NINVRETXE - arr(NINVRETXE * TX35 / 100) * 1 - V_CNR
INVRETRCA = min(arr(NINVRETRC * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA)) * 1 - V_CNR
REPLNPY = REPMEUIP + REPMEUIB + REPMEUJX + REPLOCIM + REPLOCIL + REPMEUOD
INVRETRAR = min(max(min(arr(INVRETRA * 13 / 7), NINVRETRA - INVRETRA), NINVRETRA - INVRETRA), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR - INVRETQJR - INVRETQSR - INVRETQWR - INVRETQXR)) * 1 - V_CNR
INVRETRDA = min(arr(NINVRETRD * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA)) * 1 - V_CNR
NRLOGSOC = NINVRETXA + NINVRETXB + NINVRETXC + NINVRETXE
NINVRETQE = max(min(INVENDEB2009, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN), 0) * 1 - V_CNR
INVRETXAA = min(arr(NINVRETXA * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA)) * 1 - V_CNR
INVRETXA = min(arr(NINVRETXA * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK - INVRETQJ - INVRETQS - INVRETQW - INVRETQX - INVRETRA - INVRETRB - INVRETRC - INVRETRD)) * 1 - V_CNR
INVRETQE = NINVRETQE * 1 - V_CNR
RCODIN = RCODIN_1 * 1 - ART1731BIS + min(RCODIN_1, max(RCODIN_P + RCODINP2, RCODIN1731 + 0) * 1 - PREM8_11) * ART1731BIS
LIGREPLNPY = is_positive(REPLNPY) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETPM = max(min(INVOMRETPM, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009), 0) * 1 - V_CNR
NINVRETMN = max(min(INVOMENTMN, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP), 0) * 1 - V_CNR
LIGREPMEU = is_positive(REPINVRED + REPMEUIH + REPLOCN1 + REPMEUPB + REPLNPY) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETMM = max(min(INVOMREP, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3), 0) * 1 - V_CNR
INVRETRBR = min(max(min(arr(INVRETRB * 13 / 7), NINVRETRB - INVRETRB), NINVRETRB - INVRETRB), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR - INVRETQJR - INVRETQSR - INVRETQWR - INVRETQXR - INVRETRAR)) * 1 - V_CNR
INVRETXB = min(arr(NINVRETXB * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK - INVRETQJ - INVRETQS - INVRETQW - INVRETQX - INVRETRA - INVRETRB - INVRETRC - INVRETRD - INVRETXA)) * 1 - V_CNR
RCODIV_1 = max(min(RETCODIV, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RRESIVIEU - RCODIL - RCODIN), 0)
REPLOCIN = RETCODIN - RCODIN * is_positive(INVNPROF1 + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETXBA = min(arr(NINVRETXB * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA)) * 1 - V_CNR
NINVRETQV = max(min(INVOMQV, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVENDEB2009), 0) * 1 - V_CNR
INVRETMM = NINVRETMM * 1 - V_CNR
INVRETXC = min(arr(NINVRETXC * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK - INVRETQJ - INVRETQS - INVRETQW - INVRETQX - INVRETRA - INVRETRB - INVRETRC - INVRETRD - INVRETXA - INVRETXB)) * 1 - V_CNR
INVRETMN = NINVRETMN * 1 - V_CNR
NINVRETRJ = max(min(INVOMENTRJ, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM), 0) * 1 - V_CNR
INVRETXE = min(arr(NINVRETXE * TX35 / 100), max(0, PLAF_INVDOM - INVRETKG - INVRETKH - INVRETKI - INVRETQN - INVRETQU - INVRETQK - INVRETQJ - INVRETQS - INVRETQW - INVRETQX - INVRETRA - INVRETRB - INVRETRC - INVRETRD - INVRETXA - INVRETXB - INVRETXC)) * 1 - V_CNR
INVRETRCR = min(max(min(arr(INVRETRC * 13 / 7), NINVRETRC - INVRETRC), NINVRETRC - INVRETRC), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR - INVRETQJR - INVRETQSR - INVRETQWR - INVRETQXR - INVRETRAR - INVRETRBR)) * 1 - V_CNR
INVRETXCA = min(arr(NINVRETXC * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA)) * 1 - V_CNR
INVRETSOC = INVRETKG + INVRETKH + INVRETKI + INVRETQN + INVRETQU + INVRETQK + INVRETQJ + INVRETQS + INVRETQW + INVRETQX + INVRETRA + INVRETRB + INVRETRC + INVRETRD + INVRETXA + INVRETXB + INVRETXC + INVRETXE
NINVRETMA = max(min(NRETROC40, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ), 0) * 1 - V_CNR
INVRETMA = min(arr(NINVRETMA * TX40 / 100), max(0, PLAF_INVDOM - INVRETSOC)) * 1 - V_CNR
INVRETMAR = min(arr(INVRETMA * 3 / 2), NINVRETMA - INVRETMA) * 1 - V_CNR
RCODIV = RCODIV_1 * 1 - ART1731BIS + min(RCODIV_1, max(RCODIV_P + RCODIVP2, RCODIV1731 + 0) * 1 - PREM8_11) * ART1731BIS
INVRETQV = NINVRETQV * 1 - V_CNR
RCODIJ_1 = max(min(RETCODIJ, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RRESIVIEU - RCODIL - RCODIN - RCODIV), 0)
INVRETRDR = min(max(min(arr(INVRETRD * 13 / 7), NINVRETRD - INVRETRD), NINVRETRD - INVRETRD), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR - INVRETQJR - INVRETQSR - INVRETQWR - INVRETQXR - INVRETRAR - INVRETRBR - INVRETRCR)) * 1 - V_CNR
NINVRETMAR = NINVRETMA - arr(NINVRETMA * TX40 / 100) * 1 - V_CNR
INVRETXEA = min(arr(NINVRETXE * TX35 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA)) * 1 - V_CNR
INVRETXAR = min(max(min(arr(INVRETXA * 13 / 7), NINVRETXA - INVRETXA), NINVRETXA - INVRETXA), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR - INVRETQJR - INVRETQSR - INVRETQWR - INVRETQXR - INVRETRAR - INVRETRBR - INVRETRCR - INVRETRDR)) * 1 - V_CNR
RCODIJ = RCODIJ_1 * 1 - ART1731BIS + min(RCODIJ_1, max(RCODIJ_P + RCODIJP2, RCODIJ1731 + 0) * 1 - PREM8_11) * ART1731BIS
NINVRETLG = max(min(NRETROC50, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA), 0) * 1 - V_CNR
INVRETXBR = min(max(min(arr(INVRETXB * 13 / 7), NINVRETXB - INVRETXB), NINVRETXB - INVRETXB), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR - INVRETQJR - INVRETQSR - INVRETQWR - INVRETQXR - INVRETRAR - INVRETRBR - INVRETRCR - INVRETRDR - INVRETXAR)) * 1 - V_CNR
NINVRETKS = max(min(INVENDI, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG), 0) * 1 - V_CNR
INVRETXCR = min(max(min(arr(INVRETXC * 13 / 7), NINVRETXC - INVRETXC), NINVRETXC - INVRETXC), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR - INVRETQJR - INVRETQSR - INVRETQWR - INVRETQXR - INVRETRAR - INVRETRBR - INVRETRCR - INVRETRDR - INVRETXAR - INVRETXBR)) * 1 - V_CNR
REPLOCIV = RETCODIV - RCODIV * is_positive(INVNPROF2 + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETMB = max(min(RETROCOMMB, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS), 0) * 1 - V_CNR
INVRETXER = min(max(min(arr(INVRETXE * 13 / 7), NINVRETXE - INVRETXE), NINVRETXE - INVRETXE), max(0, PLAF_INVDOM1 - INVRETKGR - INVRETKHR - INVRETKIR - INVRETQNR - INVRETQUR - INVRETQKR - INVRETQJR - INVRETQSR - INVRETQWR - INVRETQXR - INVRETRAR - INVRETRBR - INVRETRCR - INVRETRDR - INVRETXAR - INVRETXBR - INVRETXCR)) * 1 - V_CNR
NINVRETLGR = NINVRETLG - arr(NINVRETLG * TX50 / 100) * 1 - V_CNR
RRESINEUV = RCODIL + RCODIN + RCODIV + RCODIJ
INVRETMAA = min(arr(NINVRETMA * TX40 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA)) * 1 - V_CNR
INVRETLG = min(arr(NINVRETLG * TX50 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA)) * 1 - V_CNR
INVRETLGR = min(INVRETLG, max(0, NINVRETLG - INVRETLG)) * 1 - V_CNR
MEUBLEREP = RETRESINEUV_1 - RRESINEUV * is_positive(MEUBLENP)
INVRETKS = NINVRETKS * 1 - V_CNR
NINVRETMC = max(min(RETROCOMMC, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB), 0) * 1 - V_CNR
REPLOCIJ = RETCODIJ - RCODIJ * is_positive(LOCRESINEUV + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCODIE_1 = max(min(RETCODIE, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RRESIVIEU - RRESINEUV), 0)
NINVRETLH = max(min(RETROCOMLH, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC), 0) * 1 - V_CNR
REPRETREP = REPRESIVIEU + MEUBLEREP + REPMEUIK
NINVRETMBR = NINVRETMB - arr(NINVRETMB * TX40 / 100) * 1 - V_CNR
INVRETMB = min(arr(NINVRETMB * TX40 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG)) * 1 - V_CNR
RCODIE = RCODIE_1 * 1 - ART1731BIS + min(RCODIE_1, max(RCODIE_P + RCODIEP2, RCODIE1731 + 0) * 1 - PREM8_11) * ART1731BIS
REPLOC7IE = RETCODIE - RCODIE * is_positive(LOCMEUBIE + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETLGA = min(arr(NINVRETLG * TX50 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA)) * 1 - V_CNR
INVRETMC = min(arr(NINVRETMC * TX40 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB)) * 1 - V_CNR
INVRETLH = min(arr(NINVRETLH * TX50 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC)) * 1 - V_CNR
REPLNPX = REPMEUIA + REPMEUJW + REPLOCIV + REPLOCIN + REPLOCIJ + REPLOC7IE + REPMEUOC
NINVRETMCR = NINVRETMC - arr(NINVRETMC * TX40 / 100) * 1 - V_CNR
NINVRETLHR = NINVRETLH - arr(NINVRETLH * TX50 / 100) * 1 - V_CNR
REPMEUTOT2 = REPMEUIP + MEUBLEREP + REPRESIVIEU
INVRETMCR = min(arr(INVRETMC * 3 / 2), NINVRETMC - INVRETMC) * 1 - V_CNR
NINVRETLI = max(min(RETROCOMLI, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH), 0) * 1 - V_CNR
LIGREPLNPX = is_positive(REPLNPX) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETLIR = NINVRETLI - arr(NINVRETLI * TX50 / 100) * 1 - V_CNR
INVRETLI = min(arr(NINVRETLI * TX50 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH)) * 1 - V_CNR
INVRETKSA = min(NINVRETKS, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA)) * 1 - V_CNR
INVRETMBR = min(arr(INVRETMB * 3 / 2), NINVRETMB - INVRETMB) * 1 - V_CNR
NINVRETKT = max(min(INVOMENTKT, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI), 0) * 1 - V_CNR
INVRETLHR = min(INVRETLH, max(0, NINVRETLH - INVRETLH)) * 1 - V_CNR
INVRETMBA = min(arr(NINVRETMB * TX40 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA)) * 1 - V_CNR
RCODIF_1 = max(min(RETCODIF, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RRESIVIEU - RRESINEUV - RCODIE), 0)
NINVRETKU = max(min(INVOMENTKU, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT), 0) * 1 - V_CNR
LIGRESIREP = is_positive(REPMEUIZ + REPRESINEUV + REPMEUPC + REPLNPX) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETQP = max(min(INVRETRO2, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU), 0) * 1 - V_CNR
RCODIF = RCODIF_1 * 1 - ART1731BIS + min(RCODIF_1, max(RCODIF_P + RCODIFP2, RCODIF1731 + 0) * 1 - PREM8_11) * ART1731BIS
INVRETLIR = min(INVRETLI, max(0, NINVRETLI - INVRETLI)) * 1 - V_CNR
INVRETQP = min(arr(NINVRETQP * TX40 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI)) * 1 - V_CNR
INVRETMCA = min(arr(NINVRETMC * TX40 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA)) * 1 - V_CNR
INVRETKU = NINVRETKU * 1 - V_CNR
INVRETLHA = min(arr(NINVRETLH * TX50 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETMCA)) * 1 - V_CNR
INVRETKT = NINVRETKT * 1 - V_CNR
NINVRETQPR = NINVRETQP - arr(NINVRETQP * TX40 / 100) * 1 - V_CNR
REPLOCIF = RETCODIF - RCODIF * is_positive(LOCMEUBIF + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETQPR = min(arr(INVRETQP * 3 / 2), NINVRETQP - INVRETQP) * 1 - V_CNR
NINVRETQG = max(min(INVDOMRET60, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP), 0) * 1 - V_CNR
RCODIG_1 = max(min(RETCODIG, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RRESIVIEU - RRESINEUV - RCODIE - RCODIF), 0)
NINVRETQGR = NINVRETQG - arr(NINVRETQG * TX40 / 100) * 1 - V_CNR
RCODIG = RCODIG_1 * 1 - ART1731BIS + min(RCODIG_1, max(RCODIG_P + RCODIGP2, RCODIG1731 + 0) * 1 - PREM8_11) * ART1731BIS
INVRETLIA = min(arr(NINVRETLI * TX50 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA)) * 1 - V_CNR
INVRETQG = min(arr(NINVRETQG * TX40 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP)) * 1 - V_CNR
INVRETKTA = min(NINVRETKT, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA)) * 1 - V_CNR
NINVRETPB = max(min(INVOMRETPB, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG), 0) * 1 - V_CNR
NINVRETPBR = NINVRETPB - arr(NINVRETPB * TX375 / 100) * 1 - V_CNR
RCODID_1 = max(min(RETCODID, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RRESIVIEU - RRESINEUV - RCODIE - RCODIF - RCODIG), 0)
INVRETKUA = min(NINVRETKU, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA)) * 1 - V_CNR
INVRETQPA = min(arr(NINVRETQP * TX40 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA)) * 1 - V_CNR
NINVRETPF = max(min(INVOMRETPF, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETPB), 0) * 1 - V_CNR
RCODID = RCODID_1 * 1 - ART1731BIS + min(RCODID_1, max(RCODID_P + RCODIDP2, RCODID1731 + 0) * 1 - PREM8_11) * ART1731BIS
INVRETQGR = min(arr(INVRETQG * 3 / 2), NINVRETQG - INVRETQG) * 1 - V_CNR
INVRETQGA = min(arr(NINVRETQG * TX40 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA)) * 1 - V_CNR
REPLOCIG = RETCODIG - RCODIG * is_positive(LOCMEUBIG + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPLOCID = RETCODID - RCODID * is_positive(LOCMEUBID + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETPJ = max(min(INVOMRETPJ, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETPB - NINVRETPF), 0) * 1 - V_CNR
NINVRETPFR = NINVRETPF - arr(NINVRETPF * TX375 / 100) * 1 - V_CNR
RLOCIDEFG = RCODIE + RCODIF + RCODIG + RCODID
RCODJU_1 = max(min(RETCODJU, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RRESIVIEU - RRESINEUV - RLOCIDEFG), 0)
NINVRETQO = max(min(INVRETRO1, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETPB - NINVRETPF - NINVRETPJ), 0) * 1 - V_CNR
NINVRETPJR = NINVRETPJ - arr(NINVRETPJ * TX375 / 100) * 1 - V_CNR
INVRETQO = min(arr(NINVRETQO * TX50 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG)) * 1 - V_CNR
INVRETQOR = min(INVRETQO, max(0, NINVRETQO - INVRETQO)) * 1 - V_CNR
NINVRETQOR = NINVRETQO - arr(NINVRETQO * TX50 / 100) * 1 - V_CNR
RCODJU = max(0, RCODJU_1 * 1 - ART1731BIS + min(RCODJU_1, max(RCODJU_P + RCODJUP2, RCODJU1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NINVRETQF = max(min(INVDOMRET50, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETQO), 0) * 1 - V_CNR
INVRETQOA = min(arr(NINVRETQO * TX50 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA)) * 1 - V_CNR
INVRETQF = min(arr(NINVRETQF * TX50 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO)) * 1 - V_CNR
NINVRETQFR = NINVRETQF - arr(NINVRETQF * TX50 / 100) * 1 - V_CNR
INVRETQFA = min(arr(NINVRETQF * TX50 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA)) * 1 - V_CNR
INVRETQFR = min(INVRETQF, max(0, NINVRETQF - INVRETQF)) * 1 - V_CNR
NINVRETPA = max(min(INVOMRETPA, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETQO - NINVRETQF), 0) * 1 - V_CNR
NINVRETPAR = NINVRETPA - arr(NINVRETPA * TX4737 / 100) * 1 - V_CNR
REPLOCJU = RETCODJU - RCODJU * is_positive(LOCMEUBJU + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETPE = max(min(INVOMRETPE, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETQO - NINVRETQF - NINVRETPA), 0) * 1 - V_CNR
RCODJT_1 = max(min(RETCODJT, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RRESIVIEU - RRESINEUV - RLOCIDEFG - RCODJU), 0)
INVRETPB = min(arr(NINVRETPB * TX375 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF)) * 1 - V_CNR
NINVRETPER = NINVRETPE - arr(NINVRETPE * TX4737 / 100) * 1 - V_CNR
INVRETPF = min(arr(NINVRETPF * TX375 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB)) * 1 - V_CNR
INVRETPFR = min(arr(INVRETPF * 5 / 3), NINVRETPF - INVRETPF) * 1 - null(1 - abs(arr(INVRETPF * 5 / 3) - NINVRETPF - INVRETPF)) + NINVRETPF - INVRETPF * null(1 - abs(arr(INVRETPF * 5 / 3) - NINVRETPF - INVRETPF)) * 1 - V_CNR
INVRETPBR = min(arr(INVRETPB * 5 / 3), NINVRETPB - INVRETPB) * 1 - null(1 - abs(arr(INVRETPB * 5 / 3) - NINVRETPB - INVRETPB)) + NINVRETPB - INVRETPB * null(1 - abs(arr(INVRETPB * 5 / 3) - NINVRETPB - INVRETPB)) * 1 - V_CNR
REPLNPW = REPMEUJV + REPLOCIG + REPLOCIF + REPLOCID + REPLOCJU + REPMEUOB
INVRETPJ = min(arr(NINVRETPJ * TX375 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF)) * 1 - V_CNR
NINVRETPI = max(min(INVOMRETPI, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETQO - NINVRETQF - NINVRETPA - NINVRETPE), 0) * 1 - V_CNR
RCODJT = max(0, RCODJT_1 * 1 - ART1731BIS + min(RCODJT_1, max(RCODJT_P + RCODJTP2, RCODJT1731 + 0) * 1 - PREM8_11) * ART1731BIS)
NINVRETPIR = NINVRETPI - arr(NINVRETPI * TX4737 / 100) * 1 - V_CNR
NINVRETQR = max(min(INVIMP, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETQO - NINVRETQF - NINVRETPA - NINVRETPE - NINVRETPI), 0) * 1 - V_CNR
INVRETQRA = min(NINVRETQR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA)) * 1 - V_CNR
INVRETPJR = min(arr(INVRETPJ * 5 / 3), NINVRETPJ - INVRETPJ) * 1 - null(1 - abs(arr(INVRETPJ * 5 / 3) - NINVRETPJ - INVRETPJ)) + NINVRETPJ - INVRETPJ * null(1 - abs(arr(INVRETPJ * 5 / 3) - NINVRETPJ - INVRETPJ)) * 1 - V_CNR
LIGREPLOCJU = is_positive(REPLNPW) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCODJTJU = RCODJU + RCODJT
INVRETPA = min(arr(NINVRETPA * TX4737 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ)) * 1 - V_CNR
LIGREPLOCNT = is_positive(REPLNPW + REPMEUPD + REPLOCNT) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPLOCJT = RETCODJT - RCODJT * is_positive(LOCMEUBJT + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
RCODOU = max(min(RETCODOU, IDOM11 - DEC11 - REDUCAVTCEL - RCELTOT - RREDMEUB - RREDREP - RILMIX - RILMIY - RILMPA - RINVRED - RILMIH - RILMJC - RILMPB - RILMIZ - RILMJI - RILMPC - RILMJS - RILMPD - RILMPE - RMEUBLE - RPROREP - RREPNPRO - RREPMEU - RILMIC - RILMIB - RILMIA - RILMJY - RILMJX - RILMJW - RILMJV - RILMOE - RILMOD - RILMOC - RILMOB - RILMOA - RRESIMEUB - RRESIVIEU - RRESINEUV - RLOCIDEFG - RCODJTJU), 0)
NINVRETQI = max(min(INVDIR2009, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETQO - NINVRETQF - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETQR), 0) * 1 - V_CNR
INVRETPE = min(arr(NINVRETPE * TX4737 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA)) * 1 - V_CNR
INVRETPER = min(arr(INVRETPE * 10 / 9), NINVRETPE - INVRETPE) * 1 - null(1 - abs(arr(INVRETPE * 10 / 9) - NINVRETPE - INVRETPE)) + NINVRETPE - INVRETPE * null(1 - abs(arr(INVRETPE * 10 / 9) - NINVRETPE - INVRETPE)) * 1 - V_CNR
INVRETQR = NINVRETQR * 1 - V_CNR
NINVRETPD = max(min(INVOMRETPD, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI), 0) * 1 - V_CNR
INVRETPD = NINVRETPD * 1 - V_CNR
NINVRETPH = max(min(INVOMRETPH, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD), 0) * 1 - V_CNR
INVRETPI = min(arr(NINVRETPI * TX4737 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE)) * 1 - V_CNR
INVRETPAR = min(arr(INVRETPA * 10 / 9), NINVRETPA - INVRETPA) * 1 - null(1 - abs(arr(INVRETPA * 10 / 9) - NINVRETPA - INVRETPA)) + NINVRETPA - INVRETPA * null(1 - abs(arr(INVRETPA * 10 / 9) - NINVRETPA - INVRETPA)) * 1 - V_CNR
RLOCNPRO = RREDMEUB + RREDREP + RILMIX + RILMIY + RILMPA + RINVRED + RILMIH + RILMJC + RILMPB + RILMIZ + RILMJI + RILMPC + RILMJS + RILMPD + RILMPE + RMEUBLE + RPROREP + RREPNPRO + RREPMEU + RILMIC + RILMIB + RILMIA + RILMJY + RILMJX + RILMJW + RILMJV + RILMOE + RILMOD + RILMOC + RILMOB + RILMOA + RRESIMEUB + RRESIVIEU + RRESINEUV + RLOCIDEFG + RCODJTJU + RCODOU
REPLNPV = REPLOCJT + REPMEUOA
INVRETQIA = min(NINVRETQI, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA)) * 1 - V_CNR
REPMEUOU = RETCODOU - RCODOU * is_positive(COD7OU + 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETQI = NINVRETQI * 1 - V_CNR
LIGREPCODJT = is_positive(REPLNPV + REPMEUPE) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETPH = NINVRETPH * 1 - V_CNR
LIGREPOU = is_positive(REPMEUOU) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETPL = max(min(INVOMRETPL, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH), 0) * 1 - V_CNR
RPATNAT1_1 = max(min(APATNAT1, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - RFOR - RTOURREP - RTOUHOTR - RTOUREPA - RCELTOT - RLOCNPRO), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETPIR = min(arr(INVRETPI * 10 / 9), NINVRETPI - INVRETPI) * 1 - null(1 - abs(arr(INVRETPI * 10 / 9) - NINVRETPI - INVRETPI)) + NINVRETPI - INVRETPI * null(1 - abs(arr(INVRETPI * 10 / 9) - NINVRETPI - INVRETPI)) * 1 - V_CNR
LIGREPLNPV = is_positive(REPLNPV) * LIG1 * LIG2 * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETPL = NINVRETPL * 1 - V_CNR
RPATNAT1 = max(0, RPATNAT1_1 * 1 - ART1731BIS + min(RPATNAT1_1, max(RPATNAT1_P + RPATNAT1P2, RPATNAT11731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETPO = max(min(INVOMRETPO, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL), 0) * 1 - V_CNR
NINVRETPOR = NINVRETPO - arr(NINVRETPO * TX40 / 100) * 1 - V_CNR
INVRETPO = min(arr(NINVRETPO * TX40 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI)) * 1 - V_CNR
INVRETPOA = min(arr(NINVRETPO * TX40 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA)) * 1 - V_CNR
NINVRETPT = max(min(INVOMRETPT, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO), 0) * 1 - V_CNR
INVRETPT = min(arr(NINVRETPT * TX40 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO)) * 1 - V_CNR
REPNATR1 = max(PATNAT1 - RPATNAT1, 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETPOR = min(arr(INVRETPO * 3 / 2), NINVRETPO - INVRETPO) * 1 - V_CNR
RPATNAT2_1 = max(min(APATNAT2, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - RFOR - RTOURREP - RTOUHOTR - RTOUREPA - RCELTOT - RLOCNPRO - RPATNAT1), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETPTA = min(arr(NINVRETPT * TX40 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA)) * 1 - V_CNR
LIGNATR1 = is_positive(REPNATR1) * LIG1
RPATNAT2 = max(0, RPATNAT2_1 * 1 - ART1731BIS + min(RPATNAT2_1, max(RPATNAT2_P + RPATNAT2P2, RPATNAT21731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETPTR = min(arr(INVRETPT * 3 / 2), NINVRETPT - INVRETPT) * 1 - V_CNR
RPATNAT3_1 = max(min(APATNAT3, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - RFOR - RTOURREP - RTOUHOTR - RTOUREPA - RCELTOT - RLOCNPRO - RPATNAT1 - RPATNAT2), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETPY = max(min(INVOMRETPY, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT), 0) * 1 - V_CNR
REPNATR2 = max(PATNAT2 - RPATNAT2, 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGNATR2 = is_positive(REPNATR2) * LIG1
INVRETPY = min(arr(NINVRETPY * TX375 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT)) * 1 - V_CNR
NINVRETPTR = NINVRETPT - arr(NINVRETPT * TX40 / 100) * 1 - V_CNR
NINVRETPYR = NINVRETPY - arr(NINVRETPY * TX375 / 100) * 1 - V_CNR
NINVRETRL = max(min(INVOMENTRL, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY), 0) * 1 - V_CNR
RPATNAT3 = max(0, RPATNAT3_1 * 1 - ART1731BIS + min(RPATNAT3_1, max(RPATNAT3_P + RPATNAT3P2, RPATNAT31731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
INVRETPYR = min(arr(INVRETPY * 5 / 3), NINVRETPY - INVRETPY) * 1 - null(1 - abs(arr(INVRETPY * 5 / 3) - NINVRETPY - INVRETPY)) + NINVRETPY - INVRETPY * null(1 - abs(arr(INVRETPY * 5 / 3) - NINVRETPY - INVRETPY)) * 1 - V_CNR
NINVRETRLR = NINVRETRL - arr(NINVRETRL * TX375 / 100) * 1 - V_CNR
REPNATR3 = max(PATNAT3 - RPATNAT3, 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETRQ = max(min(INVOMENTRQ, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL), 0) * 1 - V_CNR
INVRETRL = min(arr(NINVRETRL * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY)) * 1 - V_CNR
INVRETRQ = min(arr(NINVRETRQ * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL)) * 1 - V_CNR
RPATNAT_1 = max(min(APATNAT, RRI1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - RFOR - RTOURREP - RTOUHOTR - RTOUREPA - RCELTOT - RLOCNPRO - RPATNAT1 - RPATNAT2 - RPATNAT3), 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
LIGNATR3 = is_positive(REPNATR3) * LIG1
RPATNAT = max(0, RPATNAT_1 * 1 - ART1731BIS + min(RPATNAT_1, max(RPATNAT_P + RPATNATP2, RPATNAT1731 + 0) * 1 - PREM8_11) * ART1731BIS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
NINVRETRV = max(min(INVOMENTRV, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ), 0) * 1 - V_CNR
A13REELA = RCOTFOR + RFIPDOM + RAIDE + RFIPC + RINNO + RSOUFIP + RRIRENOV + RDUFLOEKL + RPINELTOT + A13RFOR + arr(RSNCF + RSNCU + RSNCC + RSNCR + RPLAFREPME4) + RCODOU + CIDEVDUR + CIGARD + CIADCRE + CIHABPRIN + CILOYIMP + CIFORET + RDUFREPFI + RDUFLOGIH + RCODJT + RILMPE + RILMOA + RPATNAT
RPATNATOT = RPATNAT1 + RPATNAT2 + RPATNAT3 + RPATNAT
RRISUP = RRI1 - RLOGDOM - RTOURREP - RTOUHOTR - RTOUREPA - RCOMP - RCREAT - RRETU - RDONS - RCELTOT - RLOCNPRO - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - RFOR - RPATNATOT
INVRETRQR = min(arr(INVRETRQ * 5 / 3), NINVRETRQ - INVRETRQ) * 1 - null(1 - abs(arr(INVRETRQ * 5 / 3) - NINVRETRQ - INVRETRQ)) + NINVRETRQ - INVRETRQ * null(1 - abs(arr(INVRETRQ * 5 / 3) - NINVRETRQ - INVRETRQ)) * 1 - V_CNR
NINVRETRQR = NINVRETRQ - arr(NINVRETRQ * TX375 / 100) * 1 - V_CNR
RRIREP = RRI1 - DLOGDOM - RTOURES - RTOURREP - RTOUHOTR - RTOUREPA - RCOMP - RCREAT - RRETU - RDONS - RCELTOT - RLOCNPRO - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - RFOR - RPATNATOT
REPBA = max(0, CODHBA - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU)) * 1 - ART1731BIS + max(0, CODHBA - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU)) * ART1731BIS * 1 - V_CNR
REPAW = max(0, CODHAW - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR)) * 1 - ART1731BIS + max(0, CODHAW - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR)) * ART1731BIS * 1 - V_CNR
REPQU = max(0, INVOMSOCQU - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010)) * 1 - ART1731BIS + max(0, INVOMSOCQU - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010)) * ART1731BIS * 1 - V_CNR
REPAB = max(0, CODHAB - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1)) * 1 - ART1731BIS + max(0, CODHAB - RLOCENT) * ART1731BIS * 1 - V_CNR
REPAH = max(0, CODHAH - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC)) * 1 - ART1731BIS + max(0, CODHAH - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC)) * ART1731BIS * 1 - V_CNR
INVRETRLR = min(arr(INVRETRL * 5 / 3), NINVRETRL - INVRETRL) * 1 - null(1 - abs(arr(INVRETRL * 5 / 3) - NINVRETRL - INVRETRL)) + NINVRETRL - INVRETRL * null(1 - abs(arr(INVRETRL * 5 / 3) - NINVRETRL - INVRETRL)) * 1 - V_CNR
LIGREPAB = is_positive(REPAB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPBA = is_positive(REPBA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPKH = max(0, INVOMSOCKH - max(0, RRIREP - INVSOCNRET)) * 1 - ART1731BIS + max(0, INVOMSOCKH - max(0, RDOMSOC1 - INVSOCNRET)) * ART1731BIS * 1 - V_CNR
REPRB = max(0, CODHRB - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX - CODHRA)) * 1 - ART1731BIS + max(0, CODHRB - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX - CODHRA)) * ART1731BIS * 1 - V_CNR
LIGREPAW = is_positive(REPAW) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPAK = max(0, CODHAK - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF)) * 1 - ART1731BIS + max(0, CODHAK - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF)) * ART1731BIS * 1 - V_CNR
NINVRETNV = max(min(INVOMENTNV, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV), 0) * 1 - V_CNR
LIGREPAH = is_positive(REPAH) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPNATR = max(PATNAT4 - RPATNAT, 0) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)
REPAM = max(0, CODHAM - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH)) * 1 - ART1731BIS + max(0, CODHAM - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH)) * ART1731BIS * 1 - V_CNR
LIGREPRB = is_positive(REPRB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPQS = max(0, INVOMSOCQS - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ)) * 1 - ART1731BIS + max(0, INVOMSOCQS - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ)) * ART1731BIS * 1 - V_CNR
LIGREPKH = is_positive(REPKH) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPBB = max(0, CODHBB - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV)) * 1 - ART1731BIS + max(0, CODHBB - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV)) * ART1731BIS * 1 - V_CNR
REPAQ = max(0, CODHAQ - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL)) * 1 - ART1731BIS + max(0, CODHAQ - max(0, RLOCENT - CODHAB - CODHAG - CODHAL)) * ART1731BIS * 1 - V_CNR
REPQX = max(0, INVOMSOCQX - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW)) * 1 - ART1731BIS + max(0, INVOMSOCQX - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW)) * ART1731BIS * 1 - V_CNR
NINVRETPN = max(min(INVOMRETPN, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV), 0) * 1 - V_CNR
LIGREPQX = is_positive(REPQX) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPAQ = is_positive(REPAQ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPAY = max(0, CODHAY - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE - CODHAE - CODHAJ - CODHAO - CODHAT)) * 1 - ART1731BIS + max(0, CODHAY - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE - CODHAE - CODHAJ - CODHAO - CODHAT)) * ART1731BIS * 1 - V_CNR
REPAP = max(0, CODHAP - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK)) * 1 - ART1731BIS + max(0, CODHAP - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK)) * ART1731BIS * 1 - V_CNR
NINVRETRVR = NINVRETRV - arr(NINVRETRV * TX375 / 100) * 1 - V_CNR
INVRETRV = min(arr(NINVRETRV * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ)) * 1 - V_CNR
NINVRETPNR = NINVRETPN - arr(NINVRETPN * TX50 / 100) * 1 - V_CNR
REPAA = max(0, CODHAA - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB)) * 1 - ART1731BIS + max(0, CODHAA - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB)) * ART1731BIS * 1 - V_CNR
REPAU = max(0, CODHAU - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP)) * 1 - ART1731BIS + max(0, CODHAU - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP)) * ART1731BIS * 1 - V_CNR
REPRC = max(0, CODHRC - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX - CODHRA - CODHRB)) * 1 - ART1731BIS + max(0, CODHRC - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX - CODHRA - CODHRB)) * ART1731BIS * 1 - V_CNR
REPAT = max(0, CODHAT - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE - CODHAE - CODHAJ - CODHAO)) * 1 - ART1731BIS + max(0, CODHAT - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE - CODHAE - CODHAJ - CODHAO)) * ART1731BIS * 1 - V_CNR
REPBE = max(0, CODHBE - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW)) * 1 - ART1731BIS + max(0, CODHBE - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW)) * ART1731BIS * 1 - V_CNR
REPQK = max(0, INVLOGSOC - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU)) * 1 - ART1731BIS + max(0, INVLOGSOC - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU)) * ART1731BIS * 1 - V_CNR
REPRA = max(0, CODHRA - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX)) * 1 - ART1731BIS + max(0, CODHRA - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX)) * ART1731BIS * 1 - V_CNR
REPAJ = max(0, CODHAJ - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE - CODHAE)) * 1 - ART1731BIS + max(0, CODHAJ - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE - CODHAE)) * ART1731BIS * 1 - V_CNR
LIGREPAM = is_positive(REPAM) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
INVRETPNA = min(arr(NINVRETPN * TX50 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA)) * 1 - V_CNR
NINVRETNVR = NINVRETNV - arr(NINVRETNV * TX375 / 100) * 1 - V_CNR
REPAG = max(0, CODHAG - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB)) * 1 - ART1731BIS + max(0, CODHAG - max(0, RLOCENT - CODHAB)) * ART1731BIS * 1 - V_CNR
LIGREPQS = is_positive(REPQS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPBG = max(0, CODHBG - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE - CODHAE - CODHAJ - CODHAO - CODHAT - CODHAY)) * 1 - ART1731BIS + max(0, CODHBG - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE - CODHAE - CODHAJ - CODHAO - CODHAT - CODHAY)) * ART1731BIS * 1 - V_CNR
REPAO = max(0, CODHAO - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE - CODHAE - CODHAJ)) * 1 - ART1731BIS + max(0, CODHAO - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE - CODHAE - CODHAJ)) * ART1731BIS * 1 - V_CNR
REPQJ = max(0, INVOMSOCQJ - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC)) * 1 - ART1731BIS + max(0, INVOMSOCQJ - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC)) * ART1731BIS * 1 - V_CNR
LIGREPAA = is_positive(REPAA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPAP = is_positive(REPAP) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPAO = is_positive(REPAO) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPBB = is_positive(REPBB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPQU = is_positive(REPQU) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPAC = max(0, CODHAC - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA)) * 1 - ART1731BIS + max(0, CODHAC - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA)) * ART1731BIS * 1 - V_CNR
LIGREPQK = is_positive(REPQK) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPQN = max(0, INVSOC2010 - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI)) * 1 - ART1731BIS + max(0, INVSOC2010 - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH - INVOMSOCKI)) * ART1731BIS * 1 - V_CNR
LIGREPAJ = is_positive(REPAJ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPAF = max(0, CODHAF - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA)) * 1 - ART1731BIS + max(0, CODHAF - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA)) * ART1731BIS * 1 - V_CNR
LIGREPRC = is_positive(REPRC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPKI = max(0, INVOMSOCKI - max(0, RRIREP - INVSOCNRET - INVOMSOCKH)) * 1 - ART1731BIS + max(0, INVOMSOCKI - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH)) * ART1731BIS * 1 - V_CNR
REPAV = max(0, CODHAV - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ)) * 1 - ART1731BIS + max(0, CODHAV - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ)) * ART1731BIS * 1 - V_CNR
REPRD = max(0, CODHRD - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX - CODHRA - CODHRB - CODHRC)) * 1 - ART1731BIS + max(0, CODHRD - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX - CODHRA - CODHRB - CODHRC)) * ART1731BIS * 1 - V_CNR
INVRETNV = min(arr(NINVRETNV * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV)) * 1 - V_CNR
REPQW = max(0, INVOMSOCQW - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS)) * 1 - ART1731BIS + max(0, INVOMSOCQW - max(0, RDOMSOC1 - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS)) * ART1731BIS * 1 - V_CNR
LIGREPAT = is_positive(REPAT) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPKI = is_positive(REPKI) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPAE = max(0, CODHAE - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE)) * 1 - ART1731BIS + max(0, CODHAE - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM - CODHAR - CODHAW - CODHBE)) * ART1731BIS * 1 - V_CNR
REPHAR = max(0, CODHAR - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM)) * 1 - ART1731BIS + max(0, CODHAR - max(0, RLOCENT - CODHAB - CODHAG - CODHAL - CODHAQ - CODHAV - CODHBB - CODHAA - CODHAF - CODHAK - CODHAP - CODHAU - CODHBA - CODHAC - CODHAH - CODHAM)) * ART1731BIS * 1 - V_CNR
LIGREPAY = is_positive(REPAY) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPAL = max(0, CODHAL - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - REPENT1 - CODHAB - CODHAG)) * 1 - ART1731BIS + max(0, CODHAL - max(0, RLOCENT - CODHAB - CODHAG)) * ART1731BIS * 1 - V_CNR
INVRETPN = min(arr(NINVRETPN * TX50 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV)) * 1 - V_CNR
LIGREPAU = is_positive(REPAU) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPAC = is_positive(REPAC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPHAR = is_positive(REPHAR) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPAV = is_positive(REPAV) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPQJ = is_positive(REPQJ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGNATR = is_positive(REPNATR) * LIG1
LIGREPAK = is_positive(REPAK) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPBG = is_positive(REPBG) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPRA = is_positive(REPRA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPAG = is_positive(REPAG) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPDOMSOC3 = REPQN + REPQU + REPQK
INVRETRVR = min(arr(INVRETRV * 5 / 3), NINVRETRV - INVRETRV) * 1 - null(1 - abs(arr(INVRETRV * 5 / 3) - NINVRETRV - INVRETRV)) + NINVRETRV - INVRETRV * null(1 - abs(arr(INVRETRV * 5 / 3) - NINVRETRV - INVRETRV)) * 1 - V_CNR
LIGPATNATR = is_positive(REPNATR + REPNATR1 + REPNATR2 + REPNATR3) * LIG1
INVRETPNR = min(INVRETPN, max(0, NINVRETPN - INVRETPN)) * 1 - V_CNR
NINVRETPS = max(min(INVOMRETPS, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN), 0) * 1 - V_CNR
LIGREPQW = is_positive(REPQW) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPBE = is_positive(REPBE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPDOMSOC1 = REPRA + REPRB + REPRC + REPRD
REPDOMENTR = REPAB + REPAG + REPAL + REPAQ + REPAV + REPBB + REPAA + REPAF + REPAK + REPAP + REPAU + REPBA + REPAC + REPAH + REPAM + REPHAR + REPAW + REPBE + REPAE + REPAJ + REPAO + REPAT + REPAY + REPBG
INVRETNVR = min(arr(INVRETNV * 5 / 3), NINVRETNV - INVRETNV) * 1 - null(1 - abs(arr(INVRETNV * 5 / 3) - NINVRETNV - INVRETNV)) + NINVRETNV - INVRETNV * null(1 - abs(arr(INVRETNV * 5 / 3) - NINVRETNV - INVRETNV)) * 1 - V_CNR
REPDOMSOC4 = REPKH + REPKI
NINVRETPX = max(min(INVOMRETPX, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS), 0) * 1 - V_CNR
NINVRETPXR = NINVRETPX - arr(NINVRETPX * TX4737 / 100) * 1 - V_CNR
INVRETPSA = min(arr(NINVRETPS * TX50 / 100), max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA)) * 1 - V_CNR
NINVRETPSR = NINVRETPS - arr(NINVRETPS * TX50 / 100) * 1 - V_CNR
LIGREPAF = is_positive(REPAF) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
NINVRETRK = max(min(INVOMENTRK, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX), 0) * 1 - V_CNR
LIGREPRD = is_positive(REPRD) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPDOM = is_positive(REPDOMENTR) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPQNH = is_positive(REPQJ + REPQN + REPKH) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPQN = is_positive(REPQN) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPDOMSOC2 = REPQJ + REPQS + REPQW + REPQX
NINVRETRKR = NINVRETRK - arr(NINVRETRK * TX4737 / 100) * 1 - V_CNR
LIGREPAE = is_positive(REPAE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPAL = is_positive(REPAL) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
NINVRETRP = max(min(INVOMENTRP, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK), 0) * 1 - V_CNR
INVRETPS = min(arr(NINVRETPS * TX50 / 100), max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN)) * 1 - V_CNR
NINVRETRU = max(min(INVOMENTRU, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP), 0) * 1 - V_CNR
INVRETPSR = min(INVRETPS, max(0, NINVRETPS - INVRETPS)) * 1 - V_CNR
NINVRETRPR = NINVRETRP - arr(NINVRETRP * TX4737 / 100) * 1 - V_CNR
INVRETPX = min(arr(NINVRETPX * TX4737 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS)) * 1 - V_CNR
NINVRETNU = max(min(INVOMENTNU, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU), 0) * 1 - V_CNR
INVRETPXR = min(arr(INVRETPX * 10 / 9), NINVRETPX - INVRETPX) * 1 - null(1 - abs(arr(INVRETPX * 10 / 9) - NINVRETPX - INVRETPX)) + NINVRETPX - INVRETPX * null(1 - abs(arr(INVRETPX * 10 / 9) - NINVRETPX - INVRETPX)) * 1 - V_CNR
NINVRETRUR = NINVRETRU - arr(NINVRETRU * TX4737 / 100) * 1 - V_CNR
NINVRETPP = max(min(INVOMRETPP, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU), 0) * 1 - V_CNR
INVRETRK = min(arr(NINVRETRK * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX)) * 1 - V_CNR
NINVRETNUR = NINVRETNU - arr(NINVRETNU * TX4737 / 100) * 1 - V_CNR
NINVRETPU = max(min(INVOMRETPU, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP), 0) * 1 - V_CNR
INVRETRKR = min(arr(INVRETRK * 10 / 9), NINVRETRK - INVRETRK) * 1 - null(1 - abs(arr(INVRETRK * 10 / 9) - NINVRETRK - INVRETRK)) + NINVRETRK - INVRETRK * null(1 - abs(arr(INVRETRK * 10 / 9) - NINVRETRK - INVRETRK)) * 1 - V_CNR
INVRETRP = min(arr(NINVRETRP * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK)) * 1 - V_CNR
INVRETRPR = min(arr(INVRETRP * 10 / 9), NINVRETRP - INVRETRP) * 1 - null(1 - abs(arr(INVRETRP * 10 / 9) - NINVRETRP - INVRETRP)) + NINVRETRP - INVRETRP * null(1 - abs(arr(INVRETRP * 10 / 9) - NINVRETRP - INVRETRP)) * 1 - V_CNR
INVRETPPA = min(NINVRETPP, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA)) * 1 - V_CNR
NINVRETRG = max(min(INVOMENTRG, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU), 0) * 1 - V_CNR
NINVRETRM = max(min(INVOMENTRM, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG), 0) * 1 - V_CNR
INVRETRU = min(arr(NINVRETRU * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP)) * 1 - V_CNR
INVRETRUR = min(arr(INVRETRU * 10 / 9), NINVRETRU - INVRETRU) * 1 - null(1 - abs(arr(INVRETRU * 10 / 9) - NINVRETRU - INVRETRU)) + NINVRETRU - INVRETRU * null(1 - abs(arr(INVRETRU * 10 / 9) - NINVRETRU - INVRETRU)) * 1 - V_CNR
INVRETNU = min(arr(NINVRETNU * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU)) * 1 - V_CNR
INVRETPUA = min(NINVRETPU, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA)) * 1 - V_CNR
INVRETNUR = min(arr(INVRETNU * 10 / 9), NINVRETNU - INVRETNU) * 1 - null(1 - abs(arr(INVRETNU * 10 / 9) - NINVRETNU - INVRETNU)) + NINVRETNU - INVRETNU * null(1 - abs(arr(INVRETNU * 10 / 9) - NINVRETNU - INVRETNU)) * 1 - V_CNR
NINVRETRR = max(min(INVOMENTRR, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM), 0) * 1 - V_CNR
NINVRETRW = max(min(INVOMENTRW, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR), 0) * 1 - V_CNR
NINVRETNW = max(min(INVOMENTNW, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW), 0) * 1 - V_CNR
NINVRETPR = max(min(INVOMRETPR, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW), 0) * 1 - V_CNR
INVRETPR = NINVRETPR * 1 - V_CNR
INVRETPRA = min(NINVRETPR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA)) * 1 - V_CNR
NINVRETPW = max(min(INVOMRETPW, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR), 0) * 1 - V_CNR
INVRETPW = NINVRETPW * 1 - V_CNR
NINVRETRI = max(min(INVOMENTRI, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW), 0) * 1 - V_CNR
INVRETPWA = min(NINVRETPW, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA)) * 1 - V_CNR
INVRETQLA = min(NINVRETQL, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA)) * 1 - V_CNR
INVRETQMA = min(NINVRETQM, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA)) * 1 - V_CNR
INVRETRI = NINVRETRI * 1 - V_CNR
INVRETQDA = min(NINVRETQD, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA)) * 1 - V_CNR
INVRETOBA = min(NINVRETOB, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA)) * 1 - V_CNR
NINVRETRO = max(min(INVOMENTRO, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI), 0) * 1 - V_CNR
INVRETOCA = min(NINVRETOC, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA)) * 1 - V_CNR
INVRETOMA = min(NINVRETOM, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA)) * 1 - V_CNR
INVRETRO = NINVRETRO * 1 - V_CNR
NINVRETRT = max(min(INVOMENTRT, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO), 0) * 1 - V_CNR
INVRETONA = min(NINVRETON, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA)) * 1 - V_CNR
INVRETODA = min(NINVRETOD, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA)) * 1 - V_CNR
INVRETRT = NINVRETRT * 1 - V_CNR
NINVRETRY = max(min(INVOMENTRY, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT), 0) * 1 - V_CNR
NINVRETNY = max(min(INVOMENTNY, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY), 0) * 1 - V_CNR
INVRETUAA = min(NINVRETUA, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETODA)) * 1 - V_CNR
NINVRETSB = max(min(CODHSB, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY), 0) * 1 - V_CNR
INVRETRY = NINVRETRY * 1 - V_CNR
NINVRETSG = max(min(CODHSG, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB), 0) * 1 - V_CNR
INVRETKGRA = min(NINVRETKGR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA)) * 1 - V_CNR
INVRETNY = NINVRETNY * 1 - V_CNR
NINVRETSL = max(min(CODHSL, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG), 0) * 1 - V_CNR
INVRETSB = min(arr(NINVRETSB * TX375 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU)) * 1 - V_CNR
INVRETKHRA = min(NINVRETKHR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA)) * 1 - V_CNR
NINVRETSBR = NINVRETSB - arr(NINVRETSB * TX375 / 100) * 1 - V_CNR
NINVRETSGR = NINVRETSG - arr(NINVRETSG * TX375 / 100) * 1 - V_CNR
NINVRETSLR = NINVRETSL - arr(NINVRETSL * TX375 / 100) * 1 - V_CNR
INVRETSBR = min(arr(INVRETSB * 5 / 3), NINVRETSB - INVRETSB) * 1 - null(1 - abs(arr(INVRETSB * 5 / 3) - NINVRETSB - INVRETSB)) + NINVRETSB - INVRETSB * null(1 - abs(arr(INVRETSB * 5 / 3) - NINVRETSB - INVRETSB)) * 1 - V_CNR
INVRETSG = min(arr(NINVRETSG * TX375 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB)) * 1 - V_CNR
NINVRETSQ = max(min(CODHSQ, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL), 0) * 1 - V_CNR
INVRETSGR = min(arr(INVRETSG * 5 / 3), NINVRETSG - INVRETSG) * 1 - null(1 - abs(arr(INVRETSG * 5 / 3) - NINVRETSG - INVRETSG)) + NINVRETSG - INVRETSG * null(1 - abs(arr(INVRETSG * 5 / 3) - NINVRETSG - INVRETSG)) * 1 - V_CNR
INVRETKIRA = min(NINVRETKIR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA)) * 1 - V_CNR
NINVRETSV = max(min(CODHSV, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ), 0) * 1 - V_CNR
INVRETSL = min(arr(NINVRETSL * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG)) * 1 - V_CNR
NINVRETSQR = NINVRETSQ - arr(NINVRETSQ * TX375 / 100) * 1 - V_CNR
INVRETQNRA = min(NINVRETQNR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA)) * 1 - V_CNR
INVRETSQ = min(arr(NINVRETSQ * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL)) * 1 - V_CNR
INVRETSLR = min(arr(INVRETSL * 5 / 3), NINVRETSL - INVRETSL) * 1 - null(1 - abs(arr(INVRETSL * 5 / 3) - NINVRETSL - INVRETSL)) + NINVRETSL - INVRETSL * null(1 - abs(arr(INVRETSL * 5 / 3) - NINVRETSL - INVRETSL)) * 1 - V_CNR
INVRETSV = min(arr(NINVRETSV * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ)) * 1 - V_CNR
NINVRETTA = max(min(CODHTA, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV), 0) * 1 - V_CNR
NINVRETSVR = NINVRETSV - arr(NINVRETSV * TX375 / 100) * 1 - V_CNR
INVRETSQR = min(arr(INVRETSQ * 5 / 3), NINVRETSQ - INVRETSQ) * 1 - null(1 - abs(arr(INVRETSQ * 5 / 3) - NINVRETSQ - INVRETSQ)) + NINVRETSQ - INVRETSQ * null(1 - abs(arr(INVRETSQ * 5 / 3) - NINVRETSQ - INVRETSQ)) * 1 - V_CNR
INVRETQURA = min(NINVRETQUR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA)) * 1 - V_CNR
NINVRETSA = max(min(CODHSA, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA), 0) * 1 - V_CNR
INVRETSVR = min(arr(INVRETSV * 5 / 3), NINVRETSV - INVRETSV) * 1 - null(1 - abs(arr(INVRETSV * 5 / 3) - NINVRETSV - INVRETSV)) + NINVRETSV - INVRETSV * null(1 - abs(arr(INVRETSV * 5 / 3) - NINVRETSV - INVRETSV)) * 1 - V_CNR
INVRETQKRA = min(NINVRETQKR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA)) * 1 - V_CNR
INVRETQJRA = min(NINVRETQJR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA)) * 1 - V_CNR
INVRETTA = min(arr(NINVRETTA * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV)) * 1 - V_CNR
NINVRETTAR = NINVRETTA - arr(NINVRETTA * TX375 / 100) * 1 - V_CNR
NINVRETSAR = NINVRETSA - arr(NINVRETSA * TX4737 / 100) * 1 - V_CNR
NINVRETSF = max(min(CODHSF, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA), 0) * 1 - V_CNR
INVRETTAR = min(arr(INVRETTA * 5 / 3), NINVRETTA - INVRETTA) * 1 - null(1 - abs(arr(INVRETTA * 5 / 3) - NINVRETTA - INVRETTA)) + NINVRETTA - INVRETTA * null(1 - abs(arr(INVRETTA * 5 / 3) - NINVRETTA - INVRETTA)) * 1 - V_CNR
NINVRETSFR = NINVRETSF - arr(NINVRETSF * TX4737 / 100) * 1 - V_CNR
INVRETSA = min(arr(NINVRETSA * TX4737 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA)) * 1 - V_CNR
NINVRETSK = max(min(CODHSK, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF), 0) * 1 - V_CNR
INVRETQSRA = min(NINVRETQSR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA)) * 1 - V_CNR
INVRETSF = min(arr(NINVRETSF * TX4737 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA)) * 1 - V_CNR
INVRETSFR = min(arr(INVRETSF * 10 / 9), NINVRETSF - INVRETSF) * 1 - null(1 - abs(arr(INVRETSF * 10 / 9) - NINVRETSF - INVRETSF)) + NINVRETSF - INVRETSF * null(1 - abs(arr(INVRETSF * 10 / 9) - NINVRETSF - INVRETSF)) * 1 - V_CNR
NINVRETSKR = NINVRETSK - arr(NINVRETSK * TX4737 / 100) * 1 - V_CNR
INVRETSK = min(arr(NINVRETSK * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF)) * 1 - V_CNR
INVRETQWRA = min(NINVRETQWR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA)) * 1 - V_CNR
INVRETSAR = min(arr(INVRETSA * 10 / 9), NINVRETSA - INVRETSA) * 1 - null(1 - abs(arr(INVRETSA * 10 / 9) - NINVRETSA - INVRETSA)) + NINVRETSA - INVRETSA * null(1 - abs(arr(INVRETSA * 10 / 9) - NINVRETSA - INVRETSA)) * 1 - V_CNR
NINVRETSP = max(min(CODHSP, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK), 0) * 1 - V_CNR
INVRETQXRA = min(NINVRETQXR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA)) * 1 - V_CNR
NINVRETSU = max(min(CODHSU, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP), 0) * 1 - V_CNR
NINVRETSUR = NINVRETSU - arr(NINVRETSU * TX4737 / 100) * 1 - V_CNR
NINVRETSPR = NINVRETSP - arr(NINVRETSP * TX4737 / 100) * 1 - V_CNR
INVRETRARA = min(NINVRETRAR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA)) * 1 - V_CNR
INVRETSP = min(arr(NINVRETSP * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK)) * 1 - V_CNR
INVRETRBRA = min(NINVRETRBR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA)) * 1 - V_CNR
INVRETSKR = min(arr(INVRETSK * 10 / 9), NINVRETSK - INVRETSK) * 1 - null(1 - abs(arr(INVRETSK * 10 / 9) - NINVRETSK - INVRETSK)) + NINVRETSK - INVRETSK * null(1 - abs(arr(INVRETSK * 10 / 9) - NINVRETSK - INVRETSK)) * 1 - V_CNR
INVRETRCRA = min(NINVRETRCR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA)) * 1 - V_CNR
INVRETRDRA = min(NINVRETRDR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA)) * 1 - V_CNR
NINVRETSZ = max(min(CODHSZ, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU), 0) * 1 - V_CNR
INVRETSPR = min(arr(INVRETSP * 10 / 9), NINVRETSP - INVRETSP) * 1 - null(1 - abs(arr(INVRETSP * 10 / 9) - NINVRETSP - INVRETSP)) + NINVRETSP - INVRETSP * null(1 - abs(arr(INVRETSP * 10 / 9) - NINVRETSP - INVRETSP)) * 1 - V_CNR
INVRETSU = min(arr(NINVRETSU * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP)) * 1 - V_CNR
INVRETXARA = min(NINVRETXAR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA)) * 1 - V_CNR
NINVRETSC = max(min(CODHSC, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ), 0) * 1 - V_CNR
NINVRETSH = max(min(CODHSH, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC), 0) * 1 - V_CNR
INVRETSUR = min(arr(INVRETSU * 10 / 9), NINVRETSU - INVRETSU) * 1 - null(1 - abs(arr(INVRETSU * 10 / 9) - NINVRETSU - INVRETSU)) + NINVRETSU - INVRETSU * null(1 - abs(arr(INVRETSU * 10 / 9) - NINVRETSU - INVRETSU)) * 1 - V_CNR
INVRETXBRA = min(NINVRETXBR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA)) * 1 - V_CNR
NINVRETSZR = NINVRETSZ - arr(NINVRETSZ * TX4737 / 100) * 1 - V_CNR
INVRETXCRA = min(NINVRETXCR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA)) * 1 - V_CNR
NINVRETSM = max(min(CODHSM, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH), 0) * 1 - V_CNR
INVRETSZ = min(arr(NINVRETSZ * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU)) * 1 - V_CNR
INVRETXERA = min(NINVRETXER, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA)) * 1 - V_CNR
NINVRETSR = max(min(CODHSR, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM), 0) * 1 - V_CNR
NINVRETSW = max(min(CODHSW, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR), 0) * 1 - V_CNR
INVRETSZR = min(arr(INVRETSZ * 10 / 9), NINVRETSZ - INVRETSZ) * 1 - null(1 - abs(arr(INVRETSZ * 10 / 9) - NINVRETSZ - INVRETSZ)) + NINVRETSZ - INVRETSZ * null(1 - abs(arr(INVRETSZ * 10 / 9) - NINVRETSZ - INVRETSZ)) * 1 - V_CNR
INVRETMARA = min(NINVRETMAR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA)) * 1 - V_CNR
NINVRETTB = max(min(CODHTB, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW), 0) * 1 - V_CNR
INVRETLGRA = min(NINVRETLGR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA)) * 1 - V_CNR
NINVRETSE = max(min(CODHSE, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB), 0) * 1 - V_CNR
NINVRETSJ = max(min(CODHSJ, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE), 0) * 1 - V_CNR
INVRETSE = NINVRETSE * 1 - V_CNR
INVRETMBRA = min(NINVRETMBR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA)) * 1 - V_CNR
NINVRETSO = max(min(CODHSO, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ), 0) * 1 - V_CNR
INVRETSO = NINVRETSO * 1 - V_CNR
INVRETSJ = NINVRETSJ * 1 - V_CNR
NINVRETST = max(min(CODHST, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO), 0) * 1 - V_CNR
INVRETMCRA = min(NINVRETMCR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA - INVRETMBRA)) * 1 - V_CNR
INVRETST = NINVRETST * 1 - V_CNR
NINVRETSY = max(min(CODHSY, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST), 0) * 1 - V_CNR
INVRETSY = NINVRETSY * 1 - V_CNR
INVRETLHRA = min(NINVRETLHR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA - INVRETMBRA - INVRETMCRA)) * 1 - V_CNR
NINVRETTD = max(min(CODHTD, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY), 0) * 1 - V_CNR
INVRETLIRA = min(NINVRETLIR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA - INVRETMBRA - INVRETMCRA - INVRETLHRA)) * 1 - V_CNR
NINVRETAB = max(min(CODHAB, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD), 0) * 1 - V_CNR
INVRETQPRA = min(NINVRETQPR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA - INVRETMBRA - INVRETLHRA - INVRETLIRA - INVRETMCRA)) * 1 - V_CNR
NINVRETAG = max(min(CODHAG, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB), 0) * 1 - V_CNR
INVRETTD = NINVRETTD * 1 - V_CNR
NINVRETAL = max(min(CODHAL, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG), 0) * 1 - V_CNR
NINVRETAQ = max(min(CODHAQ, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL), 0) * 1 - V_CNR
NINVRETALR = NINVRETAL - arr(NINVRETAL * TX375 / 100) * 1 - V_CNR
NINVRETAV = max(min(CODHAV, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ), 0) * 1 - V_CNR
NINVRETAGR = NINVRETAG - arr(NINVRETAG * TX375 / 100) * 1 - V_CNR
NINVRETABR = NINVRETAB - arr(NINVRETAB * TX375 / 100) * 1 - V_CNR
INVRETQGRA = min(NINVRETQGR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA - INVRETMBRA - INVRETLHRA - INVRETLIRA - INVRETMCRA - INVRETQPRA)) * 1 - V_CNR
INVRETAB = min(arr(NINVRETAB * TX375 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ)) * 1 - V_CNR
INVRETQORA = min(NINVRETQOR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA - INVRETMBRA - INVRETLHRA - INVRETLIRA - INVRETMCRA - INVRETQPRA - INVRETQGRA)) * 1 - V_CNR
NINVRETAQR = NINVRETAQ - arr(NINVRETAQ * TX375 / 100) * 1 - V_CNR
INVRETAG = min(arr(NINVRETAG * TX375 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB)) * 1 - V_CNR
INVRETAGR = min(arr(INVRETAG * 5 / 3), NINVRETAG - INVRETAG) * 1 - null(1 - abs(arr(INVRETAG * 5 / 3) - NINVRETAG - INVRETAG)) + NINVRETAG - INVRETAG * null(1 - abs(arr(INVRETAG * 5 / 3) - NINVRETAG - INVRETAG)) * 1 - V_CNR
NINVRETAVR = NINVRETAV - arr(NINVRETAV * TX375 / 100) * 1 - V_CNR
NINVRETBB = max(min(CODHBB, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV), 0) * 1 - V_CNR
INVRETQFRA = min(NINVRETQFR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA - INVRETMBRA - INVRETLHRA - INVRETLIRA - INVRETMCRA - INVRETQPRA - INVRETQGRA - INVRETQORA)) * 1 - V_CNR
INVRETAL = min(arr(NINVRETAL * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG)) * 1 - V_CNR
NINVRETBBR = NINVRETBB - arr(NINVRETBB * TX375 / 100) * 1 - V_CNR
INVRETALR = min(arr(INVRETAL * 5 / 3), NINVRETAL - INVRETAL) * 1 - null(1 - abs(arr(INVRETAL * 5 / 3) - NINVRETAL - INVRETAL)) + NINVRETAL - INVRETAL * null(1 - abs(arr(INVRETAL * 5 / 3) - NINVRETAL - INVRETAL)) * 1 - V_CNR
INVRETABR = min(arr(INVRETAB * 5 / 3), NINVRETAB - INVRETAB) * 1 - null(1 - abs(arr(INVRETAB * 5 / 3) - NINVRETAB - INVRETAB)) + NINVRETAB - INVRETAB * null(1 - abs(arr(INVRETAB * 5 / 3) - NINVRETAB - INVRETAB)) * 1 - V_CNR
NINVRETAA = max(min(CODHAA, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB), 0) * 1 - V_CNR
INVRETAQ = min(arr(NINVRETAQ * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL)) * 1 - V_CNR
INVRETAQR = min(arr(INVRETAQ * 5 / 3), NINVRETAQ - INVRETAQ) * 1 - null(1 - abs(arr(INVRETAQ * 5 / 3) - NINVRETAQ - INVRETAQ)) + NINVRETAQ - INVRETAQ * null(1 - abs(arr(INVRETAQ * 5 / 3) - NINVRETAQ - INVRETAQ)) * 1 - V_CNR
NINVRETAF = max(min(CODHAF, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA), 0) * 1 - V_CNR
NINVRETAAR = NINVRETAA - arr(NINVRETAA * TX4737 / 100) * 1 - V_CNR
NINVRETAFR = NINVRETAF - arr(NINVRETAF * TX4737 / 100) * 1 - V_CNR
NINVRETAK = max(min(CODHAK, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF), 0) * 1 - V_CNR
INVRETPORA = min(NINVRETPOR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA - INVRETMBRA - INVRETLHRA - INVRETLIRA - INVRETMCRA - INVRETQPRA - INVRETQGRA - INVRETQORA - INVRETQFRA)) * 1 - V_CNR
NINVRETAKR = NINVRETAK - arr(NINVRETAK * TX4737 / 100) * 1 - V_CNR
INVRETAV = min(arr(NINVRETAV * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ)) * 1 - V_CNR
NINVRETAP = max(min(CODHAP, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK), 0) * 1 - V_CNR
INVRETPTRA = min(NINVRETPTR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA - INVRETMBRA - INVRETLHRA - INVRETLIRA - INVRETMCRA - INVRETQPRA - INVRETQGRA - INVRETQORA - INVRETQFRA - INVRETPORA)) * 1 - V_CNR
NINVRETAU = max(min(CODHAU, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP), 0) * 1 - V_CNR
NINVRETAUR = NINVRETAU - arr(NINVRETAU * TX4737 / 100) * 1 - V_CNR
INVRETBB = min(arr(NINVRETBB * TX375 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV)) * 1 - V_CNR
NINVRETBA = max(min(CODHBA, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU), 0) * 1 - V_CNR
INVRETPNRA = min(NINVRETPNR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA - INVRETMBRA - INVRETLHRA - INVRETLIRA - INVRETMCRA - INVRETQPRA - INVRETQGRA - INVRETQORA - INVRETQFRA - INVRETPORA - INVRETPTRA)) * 1 - V_CNR
INVRETAVR = min(arr(INVRETAV * 5 / 3), NINVRETAV - INVRETAV) * 1 - null(1 - abs(arr(INVRETAV * 5 / 3) - NINVRETAV - INVRETAV)) + NINVRETAV - INVRETAV * null(1 - abs(arr(INVRETAV * 5 / 3) - NINVRETAV - INVRETAV)) * 1 - V_CNR
NINVRETAC = max(min(CODHAC, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA), 0) * 1 - V_CNR
INVRETPSRA = min(NINVRETPSR, max(0, RNIDOM1 - INVRETKGA - INVRETKHA - INVRETKIA - INVRETQNA - INVRETQUA - INVRETQKA - INVRETQJA - INVRETQSA - INVRETQWA - INVRETQXA - INVRETRAA - INVRETRBA - INVRETRCA - INVRETRDA - INVRETXAA - INVRETXBA - INVRETXCA - INVRETXEA - INVRETMAA - INVRETLGA - INVRETKSA - INVRETMBA - INVRETLHA - INVRETMCA - INVRETLIA - INVRETKTA - INVRETKUA - INVRETQPA - INVRETQGA - INVRETQOA - INVRETQFA - INVRETQRA - INVRETQIA - INVRETPOA - INVRETPTA - INVRETPNA - INVRETPSA - INVRETPPA - INVRETPUA - INVRETPRA - INVRETPWA - INVRETQLA - INVRETQMA - INVRETQDA - INVRETOBA - INVRETOCA - INVRETOMA - INVRETONA - INVRETUAA - INVRETODA - INVRETKGRA - INVRETKHRA - INVRETKIRA - INVRETQNRA - INVRETQURA - INVRETQKRA - INVRETQJRA - INVRETQSRA - INVRETQWRA - INVRETQXRA - INVRETRARA - INVRETRBRA - INVRETRCRA - INVRETRDRA - INVRETXARA - INVRETXBRA - INVRETXCRA - INVRETXERA - INVRETMARA - INVRETLGRA - INVRETMBRA - INVRETLHRA - INVRETLIRA - INVRETMCRA - INVRETQPRA - INVRETQGRA - INVRETQORA - INVRETQFRA - INVRETPORA - INVRETPTRA - INVRETPNRA)) * 1 - V_CNR
NINVRETBAR = NINVRETBA - arr(NINVRETBA * TX4737 / 100) * 1 - V_CNR
NINVRETAPR = NINVRETAP - arr(NINVRETAP * TX4737 / 100) * 1 - V_CNR
INVRETBBR = min(arr(INVRETBB * 5 / 3), NINVRETBB - INVRETBB) * 1 - null(1 - abs(arr(INVRETBB * 5 / 3) - NINVRETBB - INVRETBB)) + NINVRETBB - INVRETBB * null(1 - abs(arr(INVRETBB * 5 / 3) - NINVRETBB - INVRETBB)) * 1 - V_CNR
NINVRETAH = max(min(CODHAH, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA - NINVRETAC), 0) * 1 - V_CNR
INVRETAA = min(arr(NINVRETAA * TX4737 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB)) * 1 - V_CNR
TOTALPLAFA = INVRETKGA + INVRETKHA + INVRETKIA + INVRETQNA + INVRETQUA + INVRETQKA + INVRETQJA + INVRETQSA + INVRETQWA + INVRETQXA + INVRETRAA + INVRETRBA + INVRETRCA + INVRETRDA + INVRETXAA + INVRETXBA + INVRETXCA + INVRETXEA + INVRETMAA + INVRETLGA + INVRETKSA + INVRETMBA + INVRETLHA + INVRETMCA + INVRETLIA + INVRETKTA + INVRETKUA + INVRETQPA + INVRETQGA + INVRETQOA + INVRETQFA + INVRETQRA + INVRETQIA + INVRETPOA + INVRETPTA + INVRETPNA + INVRETPSA + INVRETPPA + INVRETPUA + INVRETPRA + INVRETPWA + INVRETQLA + INVRETQMA + INVRETQDA + INVRETOBA + INVRETOCA + INVRETOMA + INVRETONA + INVRETODA + INVRETUAA + INVRETKGRA + INVRETKHRA + INVRETKIRA + INVRETQNRA + INVRETQURA + INVRETQKRA + INVRETQJRA + INVRETQSRA + INVRETQWRA + INVRETQXRA + INVRETRARA + INVRETRBRA + INVRETRCRA + INVRETRDRA + INVRETXARA + INVRETXBRA + INVRETXCRA + INVRETXERA + INVRETMARA + INVRETLGRA + INVRETMBRA + INVRETLHRA + INVRETLIRA + INVRETMCRA + INVRETQPRA + INVRETQGRA + INVRETQORA + INVRETQFRA + INVRETPORA + INVRETPTRA + INVRETPNRA + INVRETPSRA
INVRETAF = min(arr(NINVRETAF * TX4737 / 100), max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA)) * 1 - V_CNR
NINVRETAM = max(min(CODHAM, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA - NINVRETAC - NINVRETAH), 0) * 1 - V_CNR
MAXDOM2 = max(0, RNIDOM2 - TOTALPLAFA)
INVRETAAR = min(arr(INVRETAA * 10 / 9), NINVRETAA - INVRETAA) * 1 - null(1 - abs(arr(INVRETAA * 10 / 9) - NINVRETAA - INVRETAA)) + NINVRETAA - INVRETAA * null(1 - abs(arr(INVRETAA * 10 / 9) - NINVRETAA - INVRETAA)) * 1 - V_CNR
INVRETAFR = min(arr(INVRETAF * 10 / 9), NINVRETAF - INVRETAF) * 1 - null(1 - abs(arr(INVRETAF * 10 / 9) - NINVRETAF - INVRETAF)) + NINVRETAF - INVRETAF * null(1 - abs(arr(INVRETAF * 10 / 9) - NINVRETAF - INVRETAF)) * 1 - V_CNR
INVRETAK = min(arr(NINVRETAK * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF)) * 1 - V_CNR
INVRETPBA = min(arr(NINVRETPB * TX375 / 100), MAXDOM2) * 1 - V_CNR
INVRETAP = min(arr(NINVRETAP * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK)) * 1 - V_CNR
NINVRETAR = max(min(CODHAR, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA - NINVRETAC - NINVRETAH - NINVRETAM), 0) * 1 - V_CNR
INVRETAKR = min(arr(INVRETAK * 10 / 9), NINVRETAK - INVRETAK) * 1 - null(1 - abs(arr(INVRETAK * 10 / 9) - NINVRETAK - INVRETAK)) + NINVRETAK - INVRETAK * null(1 - abs(arr(INVRETAK * 10 / 9) - NINVRETAK - INVRETAK)) * 1 - V_CNR
INVRETPFA = min(arr(NINVRETPF * TX375 / 100), max(0, MAXDOM2 - INVRETPBA)) * 1 - V_CNR
INVRETPJA = min(arr(NINVRETPJ * TX375 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA)) * 1 - V_CNR
INVRETAPR = min(arr(INVRETAP * 10 / 9), NINVRETAP - INVRETAP) * 1 - null(1 - abs(arr(INVRETAP * 10 / 9) - NINVRETAP - INVRETAP)) + NINVRETAP - INVRETAP * null(1 - abs(arr(INVRETAP * 10 / 9) - NINVRETAP - INVRETAP)) * 1 - V_CNR
NINVRETAW = max(min(CODHAW, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA - NINVRETAC - NINVRETAH - NINVRETAM - NINVRETAR), 0) * 1 - V_CNR
INVRETAU = min(arr(NINVRETAU * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP)) * 1 - V_CNR
INVRETBA = min(arr(NINVRETBA * TX4737 / 100), max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU)) * 1 - V_CNR
INVRETPP = min(NINVRETPP, max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA)) * 1 - V_CNR
INVRETBAR = min(arr(INVRETBA * 10 / 9), NINVRETBA - INVRETBA) * 1 - null(1 - abs(arr(INVRETBA * 10 / 9) - NINVRETBA - INVRETBA)) + NINVRETBA - INVRETBA * null(1 - abs(arr(INVRETBA * 10 / 9) - NINVRETBA - INVRETBA)) * 1 - V_CNR
INVRETPAA = min(arr(NINVRETPA * TX4737 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA)) * 1 - V_CNR
NINVRETBE = max(min(CODHBE, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA - NINVRETAC - NINVRETAH - NINVRETAM - NINVRETAR - NINVRETAW), 0) * 1 - V_CNR
INVRETAUR = min(arr(INVRETAU * 10 / 9), NINVRETAU - INVRETAU) * 1 - null(1 - abs(arr(INVRETAU * 10 / 9) - NINVRETAU - INVRETAU)) + NINVRETAU - INVRETAU * null(1 - abs(arr(INVRETAU * 10 / 9) - NINVRETAU - INVRETAU)) * 1 - V_CNR
NINVRETAE = max(min(CODHAE, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA - NINVRETAC - NINVRETAH - NINVRETAM - NINVRETAR - NINVRETAW - NINVRETBE), 0) * 1 - V_CNR
INVRETPU = min(NINVRETPU, max(0, PLAF_INVDOM - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP)) * 1 - V_CNR
INVRETPEA = min(arr(NINVRETPE * TX4737 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA)) * 1 - V_CNR
INVRETAE = NINVRETAE * 1 - V_CNR
NINVRETAJ = max(min(CODHAJ, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA - NINVRETAC - NINVRETAH - NINVRETAM - NINVRETAR - NINVRETAW - NINVRETBE - NINVRETAE), 0) * 1 - V_CNR
INVRETRG = min(NINVRETRG, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU)) * 1 - V_CNR
INVRETPIA = min(arr(NINVRETPI * TX4737 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA)) * 1 - V_CNR
INVRETAJ = NINVRETAJ * 1 - V_CNR
INVRETRM = min(NINVRETRM, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG)) * 1 - V_CNR
NINVRETAO = max(min(CODHAO, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA - NINVRETAC - NINVRETAH - NINVRETAM - NINVRETAR - NINVRETAW - NINVRETBE - NINVRETAE - NINVRETAJ), 0) * 1 - V_CNR
INVRETPDA = min(NINVRETPD, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA)) * 1 - V_CNR
INVRETRR = min(NINVRETRR, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM)) * 1 - V_CNR
NINVRETAT = max(min(CODHAT, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA - NINVRETAC - NINVRETAH - NINVRETAM - NINVRETAR - NINVRETAW - NINVRETBE - NINVRETAE - NINVRETAJ - NINVRETAO), 0) * 1 - V_CNR
NINVRETAY = max(min(CODHAY, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA - NINVRETAC - NINVRETAH - NINVRETAM - NINVRETAR - NINVRETAW - NINVRETBE - NINVRETAE - NINVRETAJ - NINVRETAO - NINVRETAT), 0) * 1 - V_CNR
INVRETPHA = min(NINVRETPH, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA)) * 1 - V_CNR
INVRETPLA = min(NINVRETPL, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA)) * 1 - V_CNR
INVRETAO = NINVRETAO * 1 - V_CNR
INVRETAT = NINVRETAT * 1 - V_CNR
NINVRETBG = max(min(CODHBG, RRI1 - NRLOGDOM - NRRI2 - NRLOGSOC - NRDOMSOC1 - NRRI3 - INVOMREP - INVOMENTMN - INVOMQV - INVENDEB2009 - NINVRETPM - NINVRETRJ - NINVRETMA - NINVRETLG - NINVRETKS - NINVRETMB - NINVRETMC - NINVRETLH - NINVRETLI - NINVRETKT - NINVRETKU - NINVRETQP - NINVRETQG - NINVRETQO - NINVRETQF - NINVRETQR - NINVRETQI - NINVRETPB - NINVRETPF - NINVRETPJ - NINVRETPA - NINVRETPE - NINVRETPI - NINVRETPD - NINVRETPH - NINVRETPL - NINVRETPO - NINVRETPT - NINVRETPY - NINVRETRL - NINVRETRQ - NINVRETRV - NINVRETNV - NINVRETPN - NINVRETPS - NINVRETPX - NINVRETRK - NINVRETRP - NINVRETRU - NINVRETNU - NINVRETPP - NINVRETPU - NINVRETRG - NINVRETRM - NINVRETRR - NINVRETRW - NINVRETNW - NINVRETPR - NINVRETPW - NINVRETRI - NINVRETRO - NINVRETRT - NINVRETRY - NINVRETNY - NINVRETSB - NINVRETSG - NINVRETSL - NINVRETSQ - NINVRETSV - NINVRETTA - NINVRETSA - NINVRETSF - NINVRETSK - NINVRETSP - NINVRETSU - NINVRETSZ - NINVRETSC - NINVRETSH - NINVRETSM - NINVRETSR - NINVRETSW - NINVRETTB - NINVRETSE - NINVRETSJ - NINVRETSO - NINVRETST - NINVRETSY - NINVRETTD - NINVRETAB - NINVRETAG - NINVRETAL - NINVRETAQ - NINVRETAV - NINVRETBB - NINVRETAA - NINVRETAF - NINVRETAK - NINVRETAP - NINVRETAU - NINVRETBA - NINVRETAC - NINVRETAH - NINVRETAM - NINVRETAR - NINVRETAW - NINVRETBE - NINVRETAE - NINVRETAJ - NINVRETAO - NINVRETAT - NINVRETAY), 0) * 1 - V_CNR
INVRETRW = min(NINVRETRW, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR)) * 1 - V_CNR
INVRETBG = NINVRETBG * 1 - V_CNR
INVRETPYA = min(arr(NINVRETPY * TX375 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA)) * 1 - V_CNR
INVRETAY = NINVRETAY * 1 - V_CNR
INVRETNW = min(NINVRETNW, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW)) * 1 - V_CNR
INVRETPXA = min(arr(NINVRETPX * TX4737 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA)) * 1 - V_CNR
INVRETSC = min(NINVRETSC, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW)) * 1 - V_CNR
INVRETSH = min(NINVRETSH, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW - INVRETSC)) * 1 - V_CNR
INVRETRGA = min(NINVRETRG, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA)) * 1 - V_CNR
INVRETRIA = min(NINVRETRI, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA)) * 1 - V_CNR
INVRETSM = min(NINVRETSM, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW - INVRETSC - INVRETSH)) * 1 - V_CNR
INVRETSR = min(NINVRETSR, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW - INVRETSC - INVRETSH - INVRETSM)) * 1 - V_CNR
INVRETSBA = min(arr(NINVRETSB * TX375 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA)) * 1 - V_CNR
INVRETSGA = min(arr(NINVRETSG * TX375 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA)) * 1 - V_CNR
INVRETSW = min(NINVRETSW, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW - INVRETSC - INVRETSH - INVRETSM - INVRETSR)) * 1 - V_CNR
INVRETTB = min(NINVRETTB, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW - INVRETSC - INVRETSH - INVRETSM - INVRETSR - INVRETSW)) * 1 - V_CNR
INVRETAC = min(NINVRETAC, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW - INVRETSC - INVRETSH - INVRETSM - INVRETSR - INVRETSW - INVRETTB)) * 1 - V_CNR
INVRETAH = min(NINVRETAH, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW - INVRETSC - INVRETSH - INVRETSM - INVRETSR - INVRETSW - INVRETTB - INVRETAC)) * 1 - V_CNR
INVRETAM = min(NINVRETAM, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW - INVRETSC - INVRETSH - INVRETSM - INVRETSR - INVRETSW - INVRETTB - INVRETAC - INVRETAH)) * 1 - V_CNR
INVRETSAA = min(arr(NINVRETSA * TX4737 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA)) * 1 - V_CNR
INVRETAR = min(NINVRETAR, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW - INVRETSC - INVRETSH - INVRETSM - INVRETSR - INVRETSW - INVRETTB - INVRETAC - INVRETAH - INVRETAM)) * 1 - V_CNR
INVRETSFA = min(arr(NINVRETSF * TX4737 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA)) * 1 - V_CNR
INVRETSCA = min(NINVRETSC, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA)) * 1 - V_CNR
INVRETAW = min(NINVRETAW, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW - INVRETSC - INVRETSH - INVRETSM - INVRETSR - INVRETSW - INVRETTB - INVRETAC - INVRETAH - INVRETAM - INVRETAR)) * 1 - V_CNR
INVRETSHA = min(NINVRETSH, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA)) * 1 - V_CNR
INVRETBE = min(NINVRETBE, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETMA - INVRETLG - INVRETMB - INVRETMC - INVRETLH - INVRETLI - INVRETQP - INVRETQG - INVRETQO - INVRETQF - INVRETPB - INVRETPF - INVRETPJ - INVRETPA - INVRETPE - INVRETPI - INVRETPO - INVRETPT - INVRETPY - INVRETRL - INVRETRQ - INVRETRV - INVRETNV - INVRETPN - INVRETPS - INVRETPX - INVRETRK - INVRETRP - INVRETRU - INVRETNU - INVRETSB - INVRETSG - INVRETSL - INVRETSQ - INVRETSV - INVRETTA - INVRETSA - INVRETSF - INVRETSK - INVRETSP - INVRETSU - INVRETSZ - INVRETAB - INVRETAG - INVRETAL - INVRETAQ - INVRETAV - INVRETBB - INVRETAA - INVRETAF - INVRETAK - INVRETAP - INVRETAU - INVRETBA - INVRETPP - INVRETPU - INVRETRG - INVRETRM - INVRETRR - INVRETRW - INVRETNW - INVRETSC - INVRETSH - INVRETSM - INVRETSR - INVRETSW - INVRETTB - INVRETAC - INVRETAH - INVRETAM - INVRETAR - INVRETAW)) * 1 - V_CNR
INVRETSEA = min(NINVRETSE, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA)) * 1 - V_CNR
INVRETSJA = min(NINVRETSJ, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA)) * 1 - V_CNR
INVRETENT = INVRETMA + INVRETLG + INVRETMB + INVRETMC + INVRETLH + INVRETLI + INVRETQP + INVRETQG + INVRETQO + INVRETQF + INVRETPB + INVRETPF + INVRETPJ + INVRETPA + INVRETPE + INVRETPI + INVRETPO + INVRETPT + INVRETPY + INVRETRL + INVRETRQ + INVRETRV + INVRETNV + INVRETPN + INVRETPS + INVRETPX + INVRETRK + INVRETRP + INVRETRU + INVRETNU + INVRETSB + INVRETSG + INVRETSL + INVRETSQ + INVRETSV + INVRETTA + INVRETSA + INVRETSF + INVRETSK + INVRETSP + INVRETSU + INVRETSZ + INVRETAB + INVRETAG + INVRETAL + INVRETAQ + INVRETAV + INVRETBB + INVRETAA + INVRETAF + INVRETAK + INVRETAP + INVRETAU + INVRETBA + INVRETPP + INVRETPU + INVRETRG + INVRETRM + INVRETRR + INVRETRW + INVRETNW + INVRETSC + INVRETSH + INVRETSM + INVRETSR + INVRETSW + INVRETTB + INVRETAC + INVRETAH + INVRETAM + INVRETAR + INVRETAW + INVRETBE
INVRETQL = min(NINVRETQL, max(0, PLAF_INVDOM - INVRETSOC - INVRETENT)) * 1 - V_CNR
INVRETABA = min(arr(NINVRETAB * TX375 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA)) * 1 - V_CNR
INVRETAGA = min(arr(NINVRETAG * TX375 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA)) * 1 - V_CNR
INVRETQM = min(NINVRETQM, max(0, PLAF_INVDOM - INVRETSOC - INVRETENT - INVRETQL)) * 1 - V_CNR
INVRETQD = min(NINVRETQD, max(0, PLAF_INVDOM - INVRETSOC - INVRETENT - INVRETQL - INVRETQM)) * 1 - V_CNR
INVRETAAA = min(arr(NINVRETAA * TX4737 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA)) * 1 - V_CNR
INVRETAFA = min(arr(NINVRETAF * TX4737 / 100), max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA)) * 1 - V_CNR
INVRETOB = min(NINVRETOB, max(0, PLAF_INVDOM - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD)) * 1 - V_CNR
INVRETACA = min(NINVRETAC, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA)) * 1 - V_CNR
INVRETOC = min(NINVRETOC, max(0, PLAF_INVDOM - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB)) * 1 - V_CNR
INVRETOI = min(NINVRETOI, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC)) * 1 - V_CNR
INVRETOJ = min(NINVRETOJ, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI)) * 1 - V_CNR
INVRETAHA = min(NINVRETAH, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA)) * 1 - V_CNR
INVRETAEA = min(NINVRETAE, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA)) * 1 - V_CNR
INVRETOK = min(NINVRETOK, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ)) * 1 - V_CNR
INVRETAJA = min(NINVRETAJ, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA)) * 1 - V_CNR
INVRETOIA = min(NINVRETOI, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA)) * 1 - V_CNR
INVRETOJA = min(NINVRETOJ, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA)) * 1 - V_CNR
INVRETOKA = min(NINVRETOK, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA)) * 1 - V_CNR
INVRETOM = min(NINVRETOM, max(0, PLAF_INVDOM - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK)) * 1 - V_CNR
INVRETOPA = min(NINVRETOP, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA)) * 1 - V_CNR
INVRETOQA = min(NINVRETOQ, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA)) * 1 - V_CNR
INVRETON = min(NINVRETON, max(0, PLAF_INVDOM - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM)) * 1 - V_CNR
INVRETOP = min(NINVRETOP, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON)) * 1 - V_CNR
INVRETOQ = min(NINVRETOQ, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP)) * 1 - V_CNR
INVRETORA = min(NINVRETOR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA)) * 1 - V_CNR
INVRETOR = min(NINVRETOR, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ)) * 1 - V_CNR
INVRETOT = min(NINVRETOT, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR)) * 1 - V_CNR
INVRETOEA = min(NINVRETOE, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA)) * 1 - V_CNR
INVRETOU = min(NINVRETOU, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT)) * 1 - V_CNR
INVRETOFA = min(NINVRETOF, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA)) * 1 - V_CNR
INVRETOV = min(NINVRETOV, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU)) * 1 - V_CNR
INVRETUBA = min(NINVRETUB, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA)) * 1 - V_CNR
INVRETOW = min(NINVRETOW, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV)) * 1 - V_CNR
INVRETUCA = min(NINVRETUC, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA)) * 1 - V_CNR
INVRETPBRA = min(NINVRETPBR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA)) * 1 - V_CNR
INVRETOD = min(NINVRETOD, max(0, PLAF_INVDOM - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW)) * 1 - V_CNR
INVRETPFRA = min(NINVRETPFR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA)) * 1 - V_CNR
INVRETOE = min(NINVRETOE, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD)) * 1 - V_CNR
INVRETPJRA = min(NINVRETPJR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA)) * 1 - V_CNR
INVRETOF = min(NINVRETOF, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE)) * 1 - V_CNR
INVRETPARA = min(NINVRETPAR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA)) * 1 - V_CNR
INVRETOG = min(NINVRETOG, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE - INVRETOF)) * 1 - V_CNR
INVRETOX = min(NINVRETOX, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE - INVRETOF - INVRETOG)) * 1 - V_CNR
INVRETOY = min(NINVRETOY, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE - INVRETOF - INVRETOG - INVRETOX)) * 1 - V_CNR
INVRETPERA = min(NINVRETPER, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA)) * 1 - V_CNR
INVRETOZ = min(NINVRETOZ, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE - INVRETOF - INVRETOG - INVRETOX - INVRETOY)) * 1 - V_CNR
INVRETUA = min(NINVRETUA, max(0, PLAF_INVDOM - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE - INVRETOF - INVRETOG - INVRETOX - INVRETOY - INVRETOZ)) * 1 - V_CNR
INVRETPIRA = min(NINVRETPIR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA - INVRETPERA)) * 1 - V_CNR
INVRETUB = min(NINVRETUB, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE - INVRETOF - INVRETOG - INVRETOX - INVRETOY - INVRETOZ - INVRETUA)) * 1 - V_CNR
INVRETPYRA = min(NINVRETPYR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA - INVRETPERA - INVRETPIRA)) * 1 - V_CNR
TOTALPLAF1 = INVRETKG + INVRETKH + INVRETKI + INVRETQN + INVRETQU + INVRETQK + INVRETQJ + INVRETQS + INVRETQW + INVRETQX + INVRETRA + INVRETRB + INVRETRC + INVRETRD + INVRETXA + INVRETXB + INVRETXC + INVRETXE + INVRETMA + INVRETLG + INVRETMB + INVRETLH + INVRETMC + INVRETLI + INVRETQP + INVRETQG + INVRETQO + INVRETQF + INVRETPO + INVRETPT + INVRETPN + INVRETPS + INVRETPP + INVRETPU + INVRETKS + INVRETKT + INVRETKU + INVRETQR + INVRETQI + INVRETPR + INVRETPW + INVRETQL + INVRETQM + INVRETQD + INVRETOB + INVRETOC + INVRETOM + INVRETON + INVRETOD + INVRETUA + INVRETKGR + INVRETKHR + INVRETKIR + INVRETQNR + INVRETQUR + INVRETQKR + INVRETQJR + INVRETQSR + INVRETQWR + INVRETQXR + INVRETRAR + INVRETRBR + INVRETRCR + INVRETRDR + INVRETXAR + INVRETXBR + INVRETXCR + INVRETXER + INVRETMAR + INVRETLGR + INVRETMBR + INVRETLHR + INVRETMCR + INVRETLIR + INVRETQPR + INVRETQGR + INVRETQOR + INVRETQFR + INVRETPOR + INVRETPTR + INVRETPNR + INVRETPSR
INVRETUC = min(NINVRETUC, max(0, PLAF_INVDOM3 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE - INVRETOF - INVRETOG - INVRETOX - INVRETOY - INVRETOZ - INVRETUA - INVRETUB)) * 1 - V_CNR
TOTALPLAF2 = INVRETPB + INVRETPF + INVRETPJ + INVRETPA + INVRETPE + INVRETPI + INVRETPY + INVRETPX + INVRETRG + INVRETPD + INVRETPH + INVRETPL + INVRETRI + INVRETSB + INVRETSG + INVRETSA + INVRETSF + INVRETSC + INVRETSH + INVRETSE + INVRETSJ + INVRETAB + INVRETAG + INVRETAA + INVRETAF + INVRETAC + INVRETAH + INVRETAE + INVRETAJ + INVRETOI + INVRETOJ + INVRETOK + INVRETOP + INVRETOQ + INVRETOR + INVRETOE + INVRETOF + INVRETUB + INVRETUC + INVRETPBR + INVRETPFR + INVRETPJR + INVRETPAR + INVRETPER + INVRETPIR + INVRETPYR + INVRETPXR + INVRETSBR + INVRETSGR + INVRETSAR + INVRETSFR + INVRETABR + INVRETAGR + INVRETAAR + INVRETAFR
INVRETPXRA = min(NINVRETPXR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA - INVRETPERA - INVRETPIRA - INVRETPYRA)) * 1 - V_CNR
INDPLAF1 = is_positive(RNIDOM1 - TOTALPLAF1)
INVRETSBRA = min(NINVRETSBR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA - INVRETPERA - INVRETPIRA - INVRETPYRA - INVRETPXRA)) * 1 - V_CNR
INVRETSGRA = min(NINVRETSGR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA - INVRETPERA - INVRETPIRA - INVRETPYRA - INVRETPXRA - INVRETSBRA)) * 1 - V_CNR
INDPLAF2 = is_positive(RNIDOM2 - TOTALPLAF2 - TOTALPLAFA)
INVRETUD = min(NINVRETUD, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE - INVRETOF - INVRETOG - INVRETOX - INVRETOY - INVRETOZ - INVRETUA - INVRETUB - INVRETUC)) * 1 - V_CNR
INVRETSARA = min(NINVRETSAR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA - INVRETPERA - INVRETPIRA - INVRETPYRA - INVRETPXRA - INVRETSBRA - INVRETSGRA)) * 1 - V_CNR
INVRETUE = min(NINVRETUE, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE - INVRETOF - INVRETOG - INVRETOX - INVRETOY - INVRETOZ - INVRETUA - INVRETUB - INVRETUC - INVRETUD)) * 1 - V_CNR
INVRETSFRA = min(NINVRETSFR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA - INVRETPERA - INVRETPIRA - INVRETPYRA - INVRETPXRA - INVRETSBRA - INVRETSGRA - INVRETSARA)) * 1 - V_CNR
INVRETUF = min(NINVRETUF, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE - INVRETOF - INVRETOG - INVRETOX - INVRETOY - INVRETOZ - INVRETUA - INVRETUB - INVRETUC - INVRETUD - INVRETUE)) * 1 - V_CNR
INVRETUG = min(NINVRETUG, max(0, PLAF_INVDOM4 - INVRETSOC - INVRETENT - INVRETQL - INVRETQM - INVRETQD - INVRETOB - INVRETOC - INVRETOI - INVRETOJ - INVRETOK - INVRETOM - INVRETON - INVRETOP - INVRETOQ - INVRETOR - INVRETOT - INVRETOU - INVRETOV - INVRETOW - INVRETOD - INVRETOE - INVRETOF - INVRETOG - INVRETOX - INVRETOY - INVRETOZ - INVRETUA - INVRETUB - INVRETUC - INVRETUD - INVRETUE - INVRETUF)) * 1 - V_CNR
INVRETABRA = min(NINVRETABR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA - INVRETPERA - INVRETPIRA - INVRETPYRA - INVRETPXRA - INVRETSBRA - INVRETSGRA - INVRETSARA - INVRETSFRA)) * 1 - V_CNR
INVRETAGRA = min(NINVRETAGR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA - INVRETPERA - INVRETPIRA - INVRETPYRA - INVRETPXRA - INVRETSBRA - INVRETSGRA - INVRETSARA - INVRETSFRA - INVRETABRA)) * 1 - V_CNR
TOTALPLAF3 = INVRETRL + INVRETRQ + INVRETRV + INVRETNV + INVRETRK + INVRETRP + INVRETRU + INVRETNU + INVRETRM + INVRETRR + INVRETRW + INVRETNW + INVRETRO + INVRETRT + INVRETRY + INVRETNY + INVRETSL + INVRETSQ + INVRETSV + INVRETTA + INVRETSK + INVRETSP + INVRETSU + INVRETSZ + INVRETSM + INVRETSR + INVRETSW + INVRETTB + INVRETSO + INVRETST + INVRETSY + INVRETTD + INVRETAL + INVRETAQ + INVRETAV + INVRETBB + INVRETAK + INVRETAP + INVRETAU + INVRETBA + INVRETAM + INVRETAR + INVRETAW + INVRETBE + INVRETAO + INVRETAT + INVRETAY + INVRETBG + INVRETOT + INVRETOU + INVRETOV + INVRETOW + INVRETOG + INVRETOX + INVRETOY + INVRETOZ + INVRETUD + INVRETUE + INVRETUF + INVRETUG + INVRETRLR + INVRETRQR + INVRETRVR + INVRETNVR + INVRETRKR + INVRETRPR + INVRETRUR + INVRETNUR + INVRETSLR + INVRETSQR + INVRETSVR + INVRETTAR + INVRETSKR + INVRETSPR + INVRETSUR + INVRETSZR + INVRETALR + INVRETAQR + INVRETAVR + INVRETBBR + INVRETAKR + INVRETAPR + INVRETAUR + INVRETBAR
INVRETLOG = INVRETQL + INVRETQM + INVRETQD + INVRETOB + INVRETOC + INVRETOI + INVRETOJ + INVRETOK + INVRETOM + INVRETON + INVRETOP + INVRETOQ + INVRETOR + INVRETOT + INVRETOU + INVRETOV + INVRETOW + INVRETOD + INVRETOE + INVRETOF + INVRETOG + INVRETOX + INVRETOY + INVRETOZ + INVRETUA + INVRETUB + INVRETUC + INVRETUD + INVRETUE + INVRETUF + INVRETUG
INVRETAARA = min(NINVRETAAR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA - INVRETPERA - INVRETPIRA - INVRETPYRA - INVRETPXRA - INVRETSBRA - INVRETSGRA - INVRETSARA - INVRETSFRA - INVRETABRA - INVRETAGRA)) * 1 - V_CNR
INVRETAFRA = min(NINVRETAFR, max(0, MAXDOM2 - INVRETPBA - INVRETPFA - INVRETPJA - INVRETPAA - INVRETPEA - INVRETPIA - INVRETPDA - INVRETPHA - INVRETPLA - INVRETPYA - INVRETPXA - INVRETRGA - INVRETRIA - INVRETSBA - INVRETSGA - INVRETSAA - INVRETSFA - INVRETSCA - INVRETSHA - INVRETSEA - INVRETSJA - INVRETABA - INVRETAGA - INVRETAAA - INVRETAFA - INVRETACA - INVRETAHA - INVRETAEA - INVRETAJA - INVRETOIA - INVRETOJA - INVRETOKA - INVRETOPA - INVRETOQA - INVRETORA - INVRETOEA - INVRETOFA - INVRETUBA - INVRETUCA - INVRETPBRA - INVRETPFRA - INVRETPJRA - INVRETPARA - INVRETPERA - INVRETPIRA - INVRETPYRA - INVRETPXRA - INVRETSBRA - INVRETSGRA - INVRETSARA - INVRETSFRA - INVRETABRA - INVRETAGRA - INVRETAARA)) * 1 - V_CNR
TOTALPLAFB = INVRETPBA + INVRETPFA + INVRETPJA + INVRETPAA + INVRETPEA + INVRETPIA + INVRETPDA + INVRETPHA + INVRETPLA + INVRETPYA + INVRETPXA + INVRETRGA + INVRETRIA + INVRETSBA + INVRETSGA + INVRETSAA + INVRETSFA + INVRETABA + INVRETAGA + INVRETAAA + INVRETAFA + INVRETACA + INVRETAHA + INVRETAEA + INVRETAJA + INVRETSCA + INVRETSHA + INVRETSEA + INVRETSJA + INVRETOIA + INVRETOJA + INVRETOKA + INVRETOPA + INVRETOQA + INVRETORA + INVRETOEA + INVRETOFA + INVRETUBA + INVRETUCA + INVRETPBRA + INVRETPFRA + INVRETPJRA + INVRETPARA + INVRETPERA + INVRETPIRA + INVRETPYRA + INVRETPXRA + INVRETSBRA + INVRETSGRA + INVRETSARA + INVRETSFRA + INVRETABRA + INVRETAGRA + INVRETAARA + INVRETAFRA
MAXDOM3 = max(0, RNIDOM3 - TOTALPLAFA - TOTALPLAFB)
INDPLAF3 = is_positive(RNIDOM3 - TOTALPLAF3 - TOTALPLAFA - TOTALPLAFB)
INVRETRLA = min(arr(NINVRETRL * TX375 / 100), MAXDOM3) * 1 - V_CNR
INVRETRQA = min(arr(NINVRETRQ * TX375 / 100), max(0, MAXDOM3 - INVRETRLA)) * 1 - V_CNR
INVRETRVA = min(arr(NINVRETRV * TX375 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA)) * 1 - V_CNR
INVRETNVA = min(arr(NINVRETNV * TX375 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA)) * 1 - V_CNR
INVRETRKA = min(arr(NINVRETRK * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA)) * 1 - V_CNR
INVRETRPA = min(arr(NINVRETRP * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA)) * 1 - V_CNR
INVRETRUA = min(arr(NINVRETRU * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA)) * 1 - V_CNR
INVRETNUA = min(arr(NINVRETNU * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA)) * 1 - V_CNR
INVRETRMA = min(NINVRETRM, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA)) * 1 - V_CNR
INVRETRRA = min(NINVRETRR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA)) * 1 - V_CNR
INVRETRWA = min(NINVRETRW, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA)) * 1 - V_CNR
INVRETNWA = min(NINVRETNW, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA)) * 1 - V_CNR
INVRETROA = min(NINVRETRO, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA)) * 1 - V_CNR
INVRETRTA = min(NINVRETRT, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA)) * 1 - V_CNR
INVRETRYA = min(NINVRETRY, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA)) * 1 - V_CNR
INVRETNYA = min(NINVRETNY, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA)) * 1 - V_CNR
INVRETSLA = min(arr(NINVRETSL * TX375 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA)) * 1 - V_CNR
INVRETSQA = min(arr(NINVRETSQ * TX375 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA)) * 1 - V_CNR
INVRETSVA = min(arr(NINVRETSV * TX375 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA)) * 1 - V_CNR
INVRETTAA = min(arr(NINVRETTA * TX375 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA)) * 1 - V_CNR
INVRETSKA = min(arr(NINVRETSK * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA)) * 1 - V_CNR
INVRETSPA = min(arr(NINVRETSP * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA)) * 1 - V_CNR
INVRETSUA = min(arr(NINVRETSU * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA)) * 1 - V_CNR
INVRETSZA = min(arr(NINVRETSZ * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA)) * 1 - V_CNR
INVRETSMA = min(NINVRETSM, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA)) * 1 - V_CNR
INVRETSRA = min(NINVRETSR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA)) * 1 - V_CNR
INVRETSWA = min(NINVRETSW, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA)) * 1 - V_CNR
INVRETTBA = min(NINVRETTB, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA)) * 1 - V_CNR
INVRETSOA = min(NINVRETSO, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA)) * 1 - V_CNR
INVRETSTA = min(NINVRETST, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA)) * 1 - V_CNR
INVRETSYA = min(NINVRETSY, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA)) * 1 - V_CNR
INVRETTDA = min(NINVRETTD, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA)) * 1 - V_CNR
INVRETALA = min(arr(NINVRETAL * TX375 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA)) * 1 - V_CNR
INVRETAQA = min(arr(NINVRETAQ * TX375 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA)) * 1 - V_CNR
INVRETAVA = min(arr(NINVRETAV * TX375 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA)) * 1 - V_CNR
INVRETBBA = min(arr(NINVRETBB * TX375 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA)) * 1 - V_CNR
INVRETAKA = min(arr(NINVRETAK * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA)) * 1 - V_CNR
INVRETAPA = min(arr(NINVRETAP * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA)) * 1 - V_CNR
INVRETAUA = min(arr(NINVRETAU * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA)) * 1 - V_CNR
INVRETBAA = min(arr(NINVRETBA * TX4737 / 100), max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA)) * 1 - V_CNR
INVRETAMA = min(NINVRETAM, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA)) * 1 - V_CNR
INVRETARA = min(NINVRETAR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA)) * 1 - V_CNR
INVRETAWA = min(NINVRETAW, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA)) * 1 - V_CNR
INVRETBEA = min(NINVRETBE, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA)) * 1 - V_CNR
INVRETAOA = min(NINVRETAO, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA)) * 1 - V_CNR
INVRETATA = min(NINVRETAT, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA)) * 1 - V_CNR
INVRETAYA = min(NINVRETAY, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA)) * 1 - V_CNR
INVRETBGA = min(NINVRETBG, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA)) * 1 - V_CNR
INVRETOTA = min(NINVRETOT, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA)) * 1 - V_CNR
INVRETOUA = min(NINVRETOU, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA)) * 1 - V_CNR
INVRETOVA = min(NINVRETOV, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA)) * 1 - V_CNR
INVRETOWA = min(NINVRETOW, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA)) * 1 - V_CNR
INVRETOGA = min(NINVRETOG, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA)) * 1 - V_CNR
INVRETOXA = min(NINVRETOX, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA)) * 1 - V_CNR
INVRETOYA = min(NINVRETOY, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA)) * 1 - V_CNR
INVRETOZA = min(NINVRETOZ, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA)) * 1 - V_CNR
INVRETUDA = min(NINVRETUD, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA)) * 1 - V_CNR
INVRETUEA = min(NINVRETUE, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA)) * 1 - V_CNR
INVRETUFA = min(NINVRETUF, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA)) * 1 - V_CNR
INVRETUGA = min(NINVRETUG, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA)) * 1 - V_CNR
INVRETRLRA = min(NINVRETRLR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA)) * 1 - V_CNR
INVRETRQRA = min(NINVRETRQR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA)) * 1 - V_CNR
INVRETRVRA = min(NINVRETRVR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA)) * 1 - V_CNR
INVRETNVRA = min(NINVRETNVR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA)) * 1 - V_CNR
INVRETRKRA = min(NINVRETRKR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA)) * 1 - V_CNR
INVRETRPRA = min(NINVRETRPR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA)) * 1 - V_CNR
INVRETRURA = min(NINVRETRUR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA)) * 1 - V_CNR
INVRETNURA = min(NINVRETNUR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA)) * 1 - V_CNR
INVRETSLRA = min(NINVRETSLR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA)) * 1 - V_CNR
INVRETSQRA = min(NINVRETSQR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA)) * 1 - V_CNR
INVRETSVRA = min(NINVRETSVR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA)) * 1 - V_CNR
INVRETTARA = min(NINVRETTAR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA)) * 1 - V_CNR
INVRETSKRA = min(NINVRETSKR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA)) * 1 - V_CNR
INVRETSPRA = min(NINVRETSPR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA - INVRETSKRA)) * 1 - V_CNR
INVRETSURA = min(NINVRETSUR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA - INVRETSKRA - INVRETSPRA)) * 1 - V_CNR
INVRETSZRA = min(NINVRETSZR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA - INVRETSKRA - INVRETSPRA - INVRETSURA)) * 1 - V_CNR
INVRETALRA = min(NINVRETALR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA - INVRETSKRA - INVRETSPRA - INVRETSURA - INVRETSZRA)) * 1 - V_CNR
INVRETAQRA = min(NINVRETAQR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA - INVRETSKRA - INVRETSPRA - INVRETSURA - INVRETSZRA - INVRETALRA)) * 1 - V_CNR
INVRETAVRA = min(NINVRETAVR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA - INVRETSKRA - INVRETSPRA - INVRETSURA - INVRETSZRA - INVRETALRA - INVRETAQRA)) * 1 - V_CNR
INVRETBBRA = min(NINVRETBBR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA - INVRETSKRA - INVRETSPRA - INVRETSURA - INVRETSZRA - INVRETALRA - INVRETAQRA - INVRETAVRA)) * 1 - V_CNR
INVRETAKRA = min(NINVRETAKR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA - INVRETSKRA - INVRETSPRA - INVRETSURA - INVRETSZRA - INVRETALRA - INVRETAQRA - INVRETAVRA - INVRETBBRA)) * 1 - V_CNR
INVRETAPRA = min(NINVRETAPR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA - INVRETSKRA - INVRETSPRA - INVRETSURA - INVRETSZRA - INVRETALRA - INVRETAQRA - INVRETAVRA - INVRETBBRA - INVRETAKRA)) * 1 - V_CNR
INVRETAURA = min(NINVRETAUR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA - INVRETSKRA - INVRETSPRA - INVRETSURA - INVRETSZRA - INVRETALRA - INVRETAQRA - INVRETAVRA - INVRETBBRA - INVRETAKRA - INVRETAPRA)) * 1 - V_CNR
INVRETBARA = min(NINVRETBAR, max(0, MAXDOM3 - INVRETRLA - INVRETRQA - INVRETRVA - INVRETNVA - INVRETRKA - INVRETRPA - INVRETRUA - INVRETNUA - INVRETRMA - INVRETRRA - INVRETRWA - INVRETNWA - INVRETROA - INVRETRTA - INVRETRYA - INVRETNYA - INVRETSLA - INVRETSQA - INVRETSVA - INVRETTAA - INVRETSKA - INVRETSPA - INVRETSUA - INVRETSZA - INVRETSMA - INVRETSRA - INVRETSWA - INVRETTBA - INVRETSOA - INVRETSTA - INVRETSYA - INVRETTDA - INVRETALA - INVRETAQA - INVRETAVA - INVRETBBA - INVRETAKA - INVRETAPA - INVRETAUA - INVRETBAA - INVRETAMA - INVRETARA - INVRETAWA - INVRETBEA - INVRETAOA - INVRETATA - INVRETAYA - INVRETBGA - INVRETOTA - INVRETOUA - INVRETOVA - INVRETOWA - INVRETOGA - INVRETOXA - INVRETOYA - INVRETOZA - INVRETUDA - INVRETUEA - INVRETUFA - INVRETUGA - INVRETRLRA - INVRETRQRA - INVRETRVRA - INVRETNVRA - INVRETRKRA - INVRETRPRA - INVRETRURA - INVRETNURA - INVRETSLRA - INVRETSQRA - INVRETSVRA - INVRETTARA - INVRETSKRA - INVRETSPRA - INVRETSURA - INVRETSZRA - INVRETALRA - INVRETAQRA - INVRETAVRA - INVRETBBRA - INVRETAKRA - INVRETAPRA - INVRETAURA)) * 1 - V_CNR
TOTALPLAFC = INVRETRLA + INVRETRQA + INVRETRVA + INVRETNVA + INVRETRKA + INVRETRPA + INVRETRUA + INVRETNUA + INVRETRMA + INVRETRRA + INVRETRWA + INVRETNWA + INVRETROA + INVRETRTA + INVRETRYA + INVRETNYA + INVRETSLA + INVRETSQA + INVRETSVA + INVRETTAA + INVRETSKA + INVRETSPA + INVRETSUA + INVRETSZA + INVRETSMA + INVRETSRA + INVRETSWA + INVRETTBA + INVRETSOA + INVRETSTA + INVRETSYA + INVRETTDA + INVRETALA + INVRETAQA + INVRETAVA + INVRETBBA + INVRETAKA + INVRETAPA + INVRETAUA + INVRETBAA + INVRETAMA + INVRETARA + INVRETAWA + INVRETBEA + INVRETAOA + INVRETATA + INVRETAYA + INVRETBGA + INVRETOTA + INVRETOUA + INVRETOVA + INVRETOWA + INVRETOGA + INVRETOXA + INVRETOYA + INVRETOZA + INVRETUDA + INVRETUEA + INVRETUFA + INVRETUGA + INVRETRLRA + INVRETRQRA + INVRETRVRA + INVRETNVRA + INVRETRKRA + INVRETRPRA + INVRETRURA + INVRETNURA + INVRETSLRA + INVRETSQRA + INVRETSVRA + INVRETTARA + INVRETSKRA + INVRETSPRA + INVRETSURA + INVRETSZRA + INVRETALRA + INVRETAQRA + INVRETAVRA + INVRETBBRA + INVRETAKRA + INVRETAPRA + INVRETAURA + INVRETBARA
INDPLAF = is_positive(TOTALPLAFA + TOTALPLAFB + TOTALPLAFC - TOTALPLAF1 - TOTALPLAF2 - TOTALPLAF3) * is_positive(INDPLAF1 + INDPLAF2 + INDPLAF3) * is_positive(OPTPLAF15)
RSOC19 = arr(max(min(INVRETQK * 1 - INDPLAF + INVRETQKA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18])), 0)) * 1 - V_CNR
RSOC26 = arr(max(min(INVRETQX * 1 - INDPLAF + INVRETQXA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25])), 0)) * 1 - V_CNR
RSOC32 = arr(max(min(INVRETRB * 1 - INDPLAF + INVRETRBA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27, RSOC28, RSOC29, RSOC30, RSOC31])), 0)) * 1 - V_CNR
RSOC36 = arr(max(min(INVRETRBR * 1 - INDPLAF + INVRETRBRA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27, RSOC28, RSOC29, RSOC30, RSOC31, RSOC32, RSOC33, RSOC34, RSOC35])), 0)) * 1 - V_CNR
RSOC21 = arr(max(min(INVRETQUR * 1 - INDPLAF + INVRETQURA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20])), 0)) * 1 - V_CNR
RLOG28 = max(min(INVRETOF * 1 - INDPLAF + INVRETOFA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27])), 0) * 1 - V_CNR
RLOG12 = max(min(INVRETOB * 1 - INDPLAF + INVRETOBA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11])), 0) * 1 - V_CNR
RSOC38 = arr(max(min(INVRETRDR * 1 - INDPLAF + INVRETRDRA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27, RSOC28, RSOC29, RSOC30, RSOC31, RSOC32, RSOC33, RSOC34, RSOC35, RSOC36, RSOC37])), 0)) * 1 - V_CNR
RSOC16 = arr(max(min(INVRETKIR * 1 - INDPLAF + INVRETKIRA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15])), 0)) * 1 - V_CNR
RSOC28 = arr(max(min(INVRETQSR * 1 - INDPLAF + INVRETQSRA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27])), 0)) * 1 - V_CNR
RLOG11 = max(min(INVRETQD * 1 - INDPLAF + INVRETQDA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10])), 0) * 1 - V_CNR
RSOC22 = arr(max(min(INVRETQKR * 1 - INDPLAF + INVRETQKRA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21])), 0)) * 1 - V_CNR
RLOG18 = max(min(INVRETON * 1 - INDPLAF + INVRETONA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17])), 0) * 1 - V_CNR
RLOG39 = max(min(INVRETUG * 1 - INDPLAF + INVRETUGA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28, RLOG29, RLOG30, RLOG31, RLOG32, RLOG33, RLOG34, RLOG35, RLOG36, RLOG37, RLOG38])), 0) * 1 - V_CNR
RLOG23 = max(min(INVRETOU * 1 - INDPLAF + INVRETOUA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22])), 0) * 1 - V_CNR
RSOC20 = arr(max(min(INVRETQNR * 1 - INDPLAF + INVRETQNRA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19])), 0)) * 1 - V_CNR
RLOG25 = max(min(INVRETOW * 1 - INDPLAF + INVRETOWA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24])), 0) * 1 - V_CNR
RSOC33 = arr(max(min(INVRETRC * 1 - INDPLAF + INVRETRCA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27, RSOC28, RSOC29, RSOC30, RSOC31, RSOC32])), 0)) * 1 - V_CNR
RLOG37 = max(min(INVRETUE * 1 - INDPLAF + INVRETUEA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28, RLOG29, RLOG30, RLOG31, RLOG32, RLOG33, RLOG34, RLOG35, RLOG36])), 0) * 1 - V_CNR
RSOC29 = arr(max(min(INVRETQWR * 1 - INDPLAF + INVRETQWRA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27, RSOC28])), 0)) * 1 - V_CNR
RLOG38 = max(min(INVRETUF * 1 - INDPLAF + INVRETUFA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28, RLOG29, RLOG30, RLOG31, RLOG32, RLOG33, RLOG34, RLOG35, RLOG36, RLOG37])), 0) * 1 - V_CNR
RSOC30 = arr(max(min(INVRETQXR * 1 - INDPLAF + INVRETQXRA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27, RSOC28, RSOC29])), 0)) * 1 - V_CNR
RLOG31 = max(min(INVRETOY * 1 - INDPLAF + INVRETOYA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28, RLOG29, RLOG30])), 0) * 1 - V_CNR
ALOGDOM_1 = INVLOG2008 + INVLGDEB2009 + INVLGDEB + INVOMLOGOA + INVOMLOGOH + INVOMLOGOL + INVOMLOGOO + INVOMLOGOS + INVRETQL + INVRETQM + INVRETQD + INVRETOB + INVRETOC + INVRETOM + INVRETON + INVRETOI + INVRETOJ + INVRETOK + INVRETOP + INVRETOQ + INVRETOR + INVRETOT + INVRETOU + INVRETOV + INVRETOW + INVRETOD + INVRETOE + INVRETOF + INVRETOG + INVRETOX + INVRETOY + INVRETOZ + INVRETUA + INVRETUB + INVRETUC + INVRETUD + INVRETUE + INVRETUF + INVRETUG * 1 - INDPLAF + INVRETQLA + INVRETQMA + INVRETQDA + INVRETOBA + INVRETOCA + INVRETOMA + INVRETONA + INVRETOIA + INVRETOJA + INVRETOKA + INVRETOPA + INVRETOQA + INVRETORA + INVRETOTA + INVRETOUA + INVRETOVA + INVRETOWA + INVRETODA + INVRETOEA + INVRETOFA + INVRETOGA + INVRETOXA + INVRETOYA + INVRETOZA + INVRETUAA + INVRETUBA + INVRETUCA + INVRETUDA + INVRETUEA + INVRETUFA + INVRETUGA * INDPLAF * 1 - V_CNR
ALOGDOM = ALOGDOM_1 * 1 - ART1731BIS + min(ALOGDOM_1, max(ALOGDOM_P + ALOGDOMP2, ALOGDOM1731 + 0) * 1 - PREM8_11) * ART1731BIS
RSOC17 = arr(max(min(INVRETQN * 1 - INDPLAF + INVRETQNA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16])), 0)) * 1 - V_CNR
RSOC31 = arr(max(min(INVRETRA * 1 - INDPLAF + INVRETRAA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27, RSOC28, RSOC29, RSOC30])), 0)) * 1 - V_CNR
RLOG15 = max(min(INVRETOJ * 1 - INDPLAF + INVRETOJA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14])), 0) * 1 - V_CNR
RLOG14 = max(min(INVRETOI * 1 - INDPLAF + INVRETOIA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13])), 0) * 1 - V_CNR
RLOG27 = max(min(INVRETOE * 1 - INDPLAF + INVRETOEA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26])), 0) * 1 - V_CNR
RLOG24 = max(min(INVRETOV * 1 - INDPLAF + INVRETOVA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23])), 0) * 1 - V_CNR
ADOMSOC1_1 = INVRETKG + INVRETKH + INVRETKI + INVRETQN + INVRETQU + INVRETQK + INVRETQJ + INVRETQS + INVRETQW + INVRETQX + INVRETRA + INVRETRB + INVRETRC + INVRETRD + INVRETKGR + INVRETKHR + INVRETKIR + INVRETQNR + INVRETQUR + INVRETQKR + INVRETQJR + INVRETQSR + INVRETQWR + INVRETQXR + INVRETRAR + INVRETRBR + INVRETRCR + INVRETRDR * 1 - INDPLAF + INVRETKGA + INVRETKHA + INVRETKIA + INVRETQNA + INVRETQUA + INVRETQKA + INVRETQJA + INVRETQSA + INVRETQWA + INVRETQXA + INVRETRAA + INVRETRBA + INVRETRCA + INVRETRDA + INVRETKGRA + INVRETKHRA + INVRETKIRA + INVRETQNRA + INVRETQURA + INVRETQKRA + INVRETQJRA + INVRETQSRA + INVRETQWRA + INVRETQXRA + INVRETRARA + INVRETRBRA + INVRETRCRA + INVRETRDRA * INDPLAF * 1 - V_CNR
RLOG16 = max(min(INVRETOK * 1 - INDPLAF + INVRETOKA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15])), 0) * 1 - V_CNR
RLOG36 = max(min(INVRETUD * 1 - INDPLAF + INVRETUDA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28, RLOG29, RLOG30, RLOG31, RLOG32, RLOG33, RLOG34, RLOG35])), 0) * 1 - V_CNR
RLOG19 = max(min(INVRETOP * 1 - INDPLAF + INVRETOPA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18])), 0) * 1 - V_CNR
RSOC11 = arr(max(min(INVRETKG * 1 - INDPLAF + INVRETKGA * INDPLAF, RRISUP), 0)) * 1 - V_CNR
RLOG29 = max(min(INVRETOG * 1 - INDPLAF + INVRETOGA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28])), 0) * 1 - V_CNR
RLOG35 = max(min(INVRETUC * 1 - INDPLAF + INVRETUCA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28, RLOG29, RLOG30, RLOG31, RLOG32, RLOG33, RLOG34])), 0) * 1 - V_CNR
ALOGSOC_1 = INVRETXA + INVRETXB + INVRETXC + INVRETXE + INVRETXAR + INVRETXBR + INVRETXCR + INVRETXER * 1 - INDPLAF + INVRETXAA + INVRETXBA + INVRETXCA + INVRETXEA + INVRETXARA + INVRETXBRA + INVRETXCRA + INVRETXERA * INDPLAF * 1 - V_CNR
RSOC12 = arr(max(min(INVRETKGR * 1 - INDPLAF + INVRETKGRA * INDPLAF, RRISUP - RSOC11), 0)) * 1 - V_CNR
RSOC14 = arr(max(min(INVRETKI * 1 - INDPLAF + INVRETKIA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13])), 0)) * 1 - V_CNR
RLOG22 = max(min(INVRETOT * 1 - INDPLAF + INVRETOTA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21])), 0) * 1 - V_CNR
RLOG20 = max(min(INVRETOQ * 1 - INDPLAF + INVRETOQA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19])), 0) * 1 - V_CNR
RLOG09 = max(min(INVRETQL * 1 - INDPLAF + INVRETQLA * INDPLAF, RRI1 - RLOG01 - RLOG02 - RLOG03 - RLOG04 - RLOG05 - RLOG06 - RLOG07 - RLOG08), 0) * 1 - V_CNR
RLOG33 = max(min(INVRETUA * 1 - INDPLAF + INVRETUAA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28, RLOG29, RLOG30, RLOG31, RLOG32])), 0) * 1 - V_CNR
RSOC15 = arr(max(min(INVRETKHR * 1 - INDPLAF + INVRETKHRA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14])), 0)) * 1 - V_CNR
ACOLENT_1 = INVOMREP + INVOMENTMN + INVENDEB2009 + INVOMQV + INVOMRETPM + INVOMENTRJ + INVRETMA + INVRETLG + INVRETMB + INVRETLH + INVRETMC + INVRETLI + INVRETQP + INVRETQG + INVRETPB + INVRETPF + INVRETPJ + INVRETQO + INVRETQF + INVRETPA + INVRETPE + INVRETPI + INVRETKS + INVRETKT + INVRETKU + INVRETQR + INVRETQI + INVRETPD + INVRETPH + INVRETPL + INVRETPO + INVRETPT + INVRETPY + INVRETRL + INVRETRQ + INVRETRV + INVRETNV + INVRETPN + INVRETPS + INVRETPX + INVRETRK + INVRETRP + INVRETRU + INVRETNU + INVRETPP + INVRETPU + INVRETRG + INVRETRM + INVRETRR + INVRETRW + INVRETNW + INVRETPR + INVRETPW + INVRETRI + INVRETRO + INVRETRT + INVRETRY + INVRETNY + INVRETSB + INVRETSG + INVRETSA + INVRETSF + INVRETSC + INVRETSH + INVRETSE + INVRETSJ + INVRETSL + INVRETSQ + INVRETSV + INVRETTA + INVRETSK + INVRETSP + INVRETSU + INVRETSZ + INVRETSM + INVRETSR + INVRETSW + INVRETTB + INVRETSO + INVRETST + INVRETSY + INVRETTD + INVRETMAR + INVRETLGR + INVRETMBR + INVRETLHR + INVRETMCR + INVRETLIR + INVRETQPR + INVRETQGR + INVRETPBR + INVRETPFR + INVRETPJR + INVRETQOR + INVRETQFR + INVRETPAR + INVRETPER + INVRETPIR + INVRETPOR + INVRETPTR + INVRETPYR + INVRETRLR + INVRETRQR + INVRETRVR + INVRETNVR + INVRETPNR + INVRETPSR + INVRETPXR + INVRETRKR + INVRETRPR + INVRETRUR + INVRETNUR + INVRETSBR + INVRETSGR + INVRETSAR + INVRETSFR + INVRETSLR + INVRETSQR + INVRETSVR + INVRETTAR + INVRETSKR + INVRETSPR + INVRETSUR + INVRETSZR * 1 - INDPLAF + INVRETMAA + INVRETLGA + INVRETMBA + INVRETLHA + INVRETMCA + INVRETLIA + INVRETQPA + INVRETQGA + INVRETPBA + INVRETPFA + INVRETPJA + INVRETQOA + INVRETQFA + INVRETPAA + INVRETPEA + INVRETPIA + INVRETKSA + INVRETKTA + INVRETKUA + INVRETQRA + INVRETQIA + INVRETPDA + INVRETPHA + INVRETPLA + INVRETPOA + INVRETPTA + INVRETPYA + INVRETRLA + INVRETRQA + INVRETRVA + INVRETNVA + INVRETPNA + INVRETPSA + INVRETPXA + INVRETRKA + INVRETRPA + INVRETRUA + INVRETNUA + INVRETPPA + INVRETPUA + INVRETRGA + INVRETRMA + INVRETRRA + INVRETRWA + INVRETNWA + INVRETPRA + INVRETPWA + INVRETRIA + INVRETROA + INVRETRTA + INVRETRYA + INVRETNYA + INVRETSBA + INVRETSGA + INVRETSAA + INVRETSFA + INVRETSCA + INVRETSHA + INVRETSEA + INVRETSJA + INVRETSLA + INVRETSQA + INVRETSVA + INVRETTAA + INVRETSKA + INVRETSPA + INVRETSUA + INVRETSZA + INVRETSMA + INVRETSRA + INVRETSWA + INVRETTBA + INVRETSOA + INVRETSTA + INVRETSYA + INVRETTDA + INVRETMARA + INVRETLGRA + INVRETMBRA + INVRETLHRA + INVRETMCRA + INVRETLIRA + INVRETQPRA + INVRETQGRA + INVRETPBRA + INVRETPFRA + INVRETPJRA + INVRETQORA + INVRETQFRA + INVRETPARA + INVRETPERA + INVRETPIRA + INVRETPORA + INVRETPTRA + INVRETPYRA + INVRETRLRA + INVRETRQRA + INVRETRVRA + INVRETNVRA + INVRETPNRA + INVRETPSRA + INVRETPXRA + INVRETRKRA + INVRETRPRA + INVRETRURA + INVRETNURA + INVRETSBRA + INVRETSGRA + INVRETSARA + INVRETSFRA + INVRETSLRA + INVRETSQRA + INVRETSVRA + INVRETTARA + INVRETSKRA + INVRETSPRA + INVRETSURA + INVRETSZRA * INDPLAF * 1 - V_CNR
RSOC18 = arr(max(min(INVRETQU * 1 - INDPLAF + INVRETQUA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17])), 0)) * 1 - V_CNR
RSOC24 = arr(max(min(INVRETQS * 1 - INDPLAF + INVRETQSA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23])), 0)) * 1 - V_CNR
RLOG17 = max(min(INVRETOM * 1 - INDPLAF + INVRETOMA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16])), 0) * 1 - V_CNR
RLOG30 = max(min(INVRETOX * 1 - INDPLAF + INVRETOXA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28, RLOG29])), 0) * 1 - V_CNR
RLOG26 = max(min(INVRETOD * 1 - INDPLAF + INVRETODA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25])), 0) * 1 - V_CNR
RSOC23 = arr(max(min(INVRETQJ * 1 - INDPLAF + INVRETQJA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22])), 0)) * 1 - V_CNR
RSOC27 = arr(max(min(INVRETQJR * 1 - INDPLAF + INVRETQJRA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26])), 0)) * 1 - V_CNR
RSOC25 = arr(max(min(INVRETQW * 1 - INDPLAF + INVRETQWA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24])), 0)) * 1 - V_CNR
RLOG32 = max(min(INVRETOZ * 1 - INDPLAF + INVRETOZA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28, RLOG29, RLOG30, RLOG31])), 0) * 1 - V_CNR
RSOC37 = arr(max(min(INVRETRCR * 1 - INDPLAF + INVRETRCRA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27, RSOC28, RSOC29, RSOC30, RSOC31, RSOC32, RSOC33, RSOC34, RSOC35, RSOC36])), 0)) * 1 - V_CNR
ALOCENT_1 = INVRETAB + INVRETAG + INVRETAA + INVRETAF + INVRETAC + INVRETAH + INVRETAE + INVRETAJ + INVRETAL + INVRETAQ + INVRETAV + INVRETBB + INVRETAK + INVRETAP + INVRETAU + INVRETBA + INVRETAM + INVRETAR + INVRETAW + INVRETBE + INVRETAO + INVRETAT + INVRETAY + INVRETBG + INVRETABR + INVRETAGR + INVRETAAR + INVRETAFR + INVRETALR + INVRETAQR + INVRETAVR + INVRETBBR + INVRETAKR + INVRETAPR + INVRETAUR + INVRETBAR * 1 - INDPLAF + INVRETABA + INVRETAGA + INVRETAAA + INVRETAFA + INVRETACA + INVRETAHA + INVRETAEA + INVRETAJA + INVRETALA + INVRETAQA + INVRETAVA + INVRETBBA + INVRETAKA + INVRETAPA + INVRETAUA + INVRETBAA + INVRETAMA + INVRETARA + INVRETAWA + INVRETBEA + INVRETAOA + INVRETATA + INVRETAYA + INVRETBGA + INVRETABRA + INVRETAGRA + INVRETAARA + INVRETAFRA + INVRETALRA + INVRETAQRA + INVRETAVRA + INVRETBBRA + INVRETAKRA + INVRETAPRA + INVRETAURA + INVRETBARA * INDPLAF * 1 - V_CNR
RSOC35 = arr(max(min(INVRETRAR * 1 - INDPLAF + INVRETRARA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27, RSOC28, RSOC29, RSOC30, RSOC31, RSOC32, RSOC33, RSOC34])), 0)) * 1 - V_CNR
RLOG34 = max(min(INVRETUB * 1 - INDPLAF + INVRETUBA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20, RLOG21, RLOG22, RLOG23, RLOG24, RLOG25, RLOG26, RLOG27, RLOG28, RLOG29, RLOG30, RLOG31, RLOG32, RLOG33])), 0) * 1 - V_CNR
RSOC1 = arr(max(min(INVRETXA * 1 - INDPLAF + INVRETXAA * INDPLAF, RRISUP - RDOMSOC1), 0)) * 1 - V_CNR
RSOC34 = arr(max(min(INVRETRD * 1 - INDPLAF + INVRETRDA * INDPLAF, RRISUP - sum([RSOC11, RSOC12, RSOC13, RSOC14, RSOC15, RSOC16, RSOC17, RSOC18, RSOC19, RSOC20, RSOC21, RSOC22, RSOC23, RSOC24, RSOC25, RSOC26, RSOC27, RSOC28, RSOC29, RSOC30, RSOC31, RSOC32, RSOC33])), 0)) * 1 - V_CNR
RLOG21 = max(min(INVRETOR * 1 - INDPLAF + INVRETORA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12, RLOG13, RLOG14, RLOG15, RLOG16, RLOG17, RLOG18, RLOG19, RLOG20])), 0) * 1 - V_CNR
RLOG13 = max(min(INVRETOC * 1 - INDPLAF + INVRETOCA * INDPLAF, RRI1 - sum([RLOG1, RLOG2, RLOG3, RLOG4, RLOG5, RLOG6, RLOG7, RLOG8, RLOG9, RLOG10, RLOG11, RLOG12])), 0) * 1 - V_CNR
ACOLENT = ACOLENT_1 * 1 - ART1731BIS + min(ACOLENT_1, max(ACOLENT_P + ACOLENTP2, ACOLENT1731 + 0) * 1 - PREM8_11) * ART1731BIS
ALOGSOC = ALOGSOC_1 * 1 - ART1731BIS + min(ALOGSOC_1, max(ALOGSOC_P + ALOGSOCP2, ALOGSOC1731 + 0) * 1 - PREM8_11) * ART1731BIS
ADOMSOC1 = ADOMSOC1_1 * 1 - ART1731BIS + min(ADOMSOC1_1, max(ADOMSOC1_P + ADOMSOC1P2, ADOMSOC11731 + 0) * 1 - PREM8_11) * ART1731BIS
RSOC13 = arr(max(min(INVRETKH * 1 - INDPLAF + INVRETKHA * INDPLAF, RRISUP - RSOC11 - RSOC12), 0)) * 1 - V_CNR
RLOG10 = max(min(INVRETQM * 1 - INDPLAF + INVRETQMA * INDPLAF, RRI1 - RLOG01 - RLOG02 - RLOG03 - RLOG04 - RLOG05 - RLOG06 - RLOG07 - RLOG08 - RLOG09), 0) * 1 - V_CNR
ALOCENT = ALOCENT_1 * 1 - ART1731BIS + min(ALOCENT_1, max(ALOCENT_P + ALOCENTP2, ALOCENT1731 + 0) * 1 - PREM8_11) * ART1731BIS
RSOC2 = arr(max(min(INVRETXB * 1 - INDPLAF + INVRETXBA * INDPLAF, RRISUP - RDOMSOC1 - RSOC1), 0)) * 1 - V_CNR
RSOC3 = arr(max(min(INVRETXC * 1 - INDPLAF + INVRETXCA * INDPLAF, RRISUP - RDOMSOC1 - RSOC1 - RSOC2), 0)) * 1 - V_CNR
RSOC4 = arr(max(min(INVRETXE * 1 - INDPLAF + INVRETXEA * INDPLAF, RRISUP - RDOMSOC1 - RSOC1 - RSOC2 - RSOC3), 0)) * 1 - V_CNR
RSOC5 = arr(max(min(INVRETXAR * 1 - INDPLAF + INVRETXARA * INDPLAF, RRISUP - RDOMSOC1 - RSOC1 - RSOC2 - RSOC3 - RSOC4), 0)) * 1 - V_CNR
RSOC6 = arr(max(min(INVRETXBR * 1 - INDPLAF + INVRETXBRA * INDPLAF, RRISUP - RDOMSOC1 - RSOC1 - RSOC2 - RSOC3 - RSOC4 - RSOC5), 0)) * 1 - V_CNR
RSOC7 = arr(max(min(INVRETXCR * 1 - INDPLAF + INVRETXCRA * INDPLAF, RRISUP - RDOMSOC1 - RSOC1 - RSOC2 - RSOC3 - RSOC4 - RSOC5 - RSOC6), 0)) * 1 - V_CNR
A11RSOC = max(0, arr(RSOC2 + RSOC6 + RSOC19 + RSOC22 + RSOC25 + RSOC29 + RSOC32 + RSOC36 - RSOC2 + RSOC6 + RSOC19 + RSOC22 + RSOC25 + RSOC29 + RSOC32 + RSOC36 * TX65 / 100)) * 1 - ART1731BIS * 1 - V_CNR
RSOC8 = arr(max(min(INVRETXER * 1 - INDPLAF + INVRETXERA * INDPLAF, RRISUP - RDOMSOC1 - RSOC1 - RSOC2 - RSOC3 - RSOC4 - RSOC5 - RSOC6 - RSOC7), 0)) * 1 - V_CNR
A10RSOC = max(0, arr(RSOC1 + RSOC5 + RSOC14 + RSOC16 + RSOC18 + RSOC21 + RSOC24 + RSOC28 + RSOC31 + RSOC35 - RSOC1 + RSOC5 + RSOC14 + RSOC16 + RSOC18 + RSOC21 + RSOC24 + RSOC28 + RSOC31 + RSOC35 * TX65 / 100)) * 1 - ART1731BIS * 1 - V_CNR
RLOGSOC_1 = 1 - V_INDTEO * RSOC1 + RSOC2 + RSOC3 + RSOC4 + RSOC5 + RSOC6 + RSOC7 + RSOC8 + V_INDTEO * arr(V_RSOC1 + V_RSOC5 + V_RSOC2 + V_RSOC6 + V_RSOC3 + V_RSOC7 + V_RSOC4 + V_RSOC8 * TX65 / 100) * 1 - V_CNR
A12RSOC = max(0, arr(RSOC3 + RSOC7 + RSOC26 + RSOC30 + RSOC33 + RSOC37 - RSOC3 + RSOC7 + RSOC26 + RSOC30 + RSOC33 + RSOC37 * TX65 / 100)) * 1 - V_CNR * 1 - ART1731BIS
RLOGSOC = RLOGSOC_1 * 1 - ART1731BIS + min(RLOGSOC_1, max(RLOGSOC_P + RLOGSOCP2, RLOGSOC1731 + 0) * 1 - PREM8_11) * ART1731BIS
RRILOC = RRISUP - RLOGSOC - RDOMSOC1 - RIDOMPROTOT
RLOC16 = max(min(INVRETLHR * 1 - INDPLAF + INVRETLHRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15])), 0) * 1 - V_CNR
A13RSOC = max(0, arr(RSOC4 + RSOC8 + RSOC34 + RSOC38 - RSOC4 + RSOC8 + RSOC34 + RSOC38 * TX65 / 100)) * 1 - V_CNR * 1 - ART1731BIS
RLOC21 = max(min(INVRETQG * 1 - INDPLAF + INVRETQGA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20])), 0) * 1 - V_CNR
REPXB = max(0, CODHXB - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX - CODHRA - CODHRB - CODHRC - CODHRD - CODHXA)) * 1 - ART1731BIS + max(0, CODHXB - max(0, RLOGSOC - CODHXA)) * ART1731BIS * 1 - V_CNR
RLOC12 = max(min(INVRETKT * 1 - INDPLAF + INVRETKTA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11])), 0) * 1 - V_CNR
RLOC92 = max(min(INVRETSQ * 1 - INDPLAF + INVRETSQA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91])), 0) * 1 - V_CNR
RLOC120 = max(min(INVRETTAR * 1 - INDPLAF + INVRETTARA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113, RLOC114, RLOC115, RLOC116, RLOC117, RLOC118, RLOC119])), 0) * 1 - V_CNR
RLOC22 = max(min(INVRETPB * 1 - INDPLAF + INVRETPBA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21])), 0) * 1 - V_CNR
RLOC93 = max(min(INVRETSV * 1 - INDPLAF + INVRETSVA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92])), 0) * 1 - V_CNR
RLOC38 = max(min(INVRETPFR * 1 - INDPLAF + INVRETPFRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37])), 0) * 1 - V_CNR
RLOC84 = max(min(INVRETPXR * 1 - INDPLAF + INVRETPXRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83])), 0) * 1 - V_CNR
REPXC = max(0, CODHXC - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX - CODHRA - CODHRB - CODHRC - CODHRD - CODHXA - CODHXB)) * 1 - ART1731BIS + max(0, CODHXC - max(0, RLOGSOC - CODHXA - CODHXB)) * ART1731BIS * 1 - V_CNR
RLOC34 = max(min(INVRETPL * 1 - INDPLAF + INVRETPLA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33])), 0) * 1 - V_CNR
RLOC123 = max(min(INVRETSUR * 1 - INDPLAF + INVRETSURA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113, RLOC114, RLOC115, RLOC116, RLOC117, RLOC118, RLOC119, RLOC120, RLOC121, RLOC122])), 0) * 1 - V_CNR
RLOC68 = max(min(INVRETPR * 1 - INDPLAF + INVRETPRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67])), 0) * 1 - V_CNR
RLOC24 = max(min(INVRETPJ * 1 - INDPLAF + INVRETPJA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23])), 0) * 1 - V_CNR
RLOC69 = max(min(INVRETPW * 1 - INDPLAF + INVRETPWA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68])), 0) * 1 - V_CNR
RLOC74 = max(min(INVRETNY * 1 - INDPLAF + INVRETNYA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73])), 0) * 1 - V_CNR
RLOC19 = max(min(INVENDEB2009, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18])), 0) * 1 - V_CNR
RLOC57 = max(min(INVRETRK * 1 - INDPLAF + INVRETRKA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56])), 0) * 1 - V_CNR
RLOC80 = max(min(INVRETRVR * 1 - INDPLAF + INVRETRVRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79])), 0) * 1 - V_CNR
RLOC91 = max(min(INVRETSL * 1 - INDPLAF + INVRETSLA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90])), 0) * 1 - V_CNR
RLOC77 = max(min(INVRETPYR * 1 - INDPLAF + INVRETPYRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76])), 0) * 1 - V_CNR
RLOC45 = max(min(INVOMRETPM, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44])), 0) * 1 - V_CNR
RLOC90 = max(min(INVRETSG * 1 - INDPLAF + INVRETSGA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89])), 0) * 1 - V_CNR
RLOC85 = max(min(INVRETRKR * 1 - INDPLAF + INVRETRKRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84])), 0) * 1 - V_CNR
RLOC95 = max(min(INVRETSA * 1 - INDPLAF + INVRETSAA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94])), 0) * 1 - V_CNR
RLOC113 = max(min(INVRETSBR * 1 - INDPLAF + INVRETSBRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112])), 0) * 1 - V_CNR
RLOC31 = max(min(INVRETQI * 1 - INDPLAF + INVRETQIA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30])), 0) * 1 - V_CNR
RLOC81 = max(min(INVRETNVR * 1 - INDPLAF + INVRETNVRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80])), 0) * 1 - V_CNR
RLOC58 = max(min(INVRETRP * 1 - INDPLAF + INVRETRPA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57])), 0) * 1 - V_CNR
RLOC111 = max(min(INVRETSY * 1 - INDPLAF + INVRETSYA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110])), 0) * 1 - V_CNR
RLOC29 = max(min(INVRETPI * 1 - INDPLAF + INVRETPIA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28])), 0) * 1 - V_CNR
RLOC109 = max(min(INVRETSO * 1 - INDPLAF + INVRETSOA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC100, RLOC101, RLOC102, RLOC103, RLOC104, RLOC105, RLOC106, RLOC107, RLOC108])), 0) * 1 - V_CNR
RLOC66 = max(min(INVRETRW * 1 - INDPLAF + INVRETRWA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65])), 0) * 1 - V_CNR
RLOC76 = max(min(INVRETPTR * 1 - INDPLAF + INVRETPTRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75])), 0) * 1 - V_CNR
RLOC48 = max(min(INVRETPT * 1 - INDPLAF + INVRETPTA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47])), 0) * 1 - V_CNR
LIGREPRXC = is_positive(REPRC + REPXC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RLOC51 = max(min(INVRETRQ * 1 - INDPLAF + INVRETRQA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50])), 0) * 1 - V_CNR
RLOC53 = max(min(INVRETNV * 1 - INDPLAF + INVRETNVA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52])), 0) * 1 - V_CNR
PLAFDOMPRO1 = max(0, RRI1_1 - RLOGDOM - RCREAT - RCOMP - RRETU - RDONS - RDUFLOTOT - RPINELTOT - RNOUV - RPLAFREPME4 - RFOR - RTOURREP - RTOUHOTR - RTOUREPA - RCELTOT - RLOCNPRO - RPATNATOT - RDOMSOC1 - RLOGSOC)
RLOC60 = max(min(INVRETNU * 1 - INDPLAF + INVRETNUA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59])), 0) * 1 - V_CNR
RLOC17 = max(min(INVRETLIR * 1 - INDPLAF + INVRETLIRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16])), 0) * 1 - V_CNR
RLOC37 = max(min(INVRETPBR * 1 - INDPLAF + INVRETPBRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36])), 0) * 1 - V_CNR
RLOC86 = max(min(INVRETRPR * 1 - INDPLAF + INVRETRPRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85])), 0) * 1 - V_CNR
RLOC15 = max(min(INVRETMCR * 1 - INDPLAF + INVRETMCRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14])), 0) * 1 - V_CNR
RLOC119 = max(min(INVRETSVR * 1 - INDPLAF + INVRETSVRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113, RLOC114, RLOC115, RLOC116, RLOC117, RLOC118])), 0) * 1 - V_CNR
RLOC14 = max(min(INVRETMBR * 1 - INDPLAF + INVRETMBRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13])), 0) * 1 - V_CNR
RLOC61 = max(min(INVRETPP * 1 - INDPLAF + INVRETPPA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60])), 0) * 1 - V_CNR
RLOC54 = max(min(INVRETPN * 1 - INDPLAF + INVRETPNA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53])), 0) * 1 - V_CNR
RLOC11 = max(min(INVRETLI * 1 - INDPLAF + INVRETLIA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10])), 0) * 1 - V_CNR
RLOC118 = max(min(INVRETSQR * 1 - INDPLAF + INVRETSQRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113, RLOC114, RLOC115, RLOC116, RLOC117])), 0) * 1 - V_CNR
RLOC116 = max(min(INVRETSFR * 1 - INDPLAF + INVRETSFRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113, RLOC114, RLOC115])), 0) * 1 - V_CNR
RLOC100 = max(min(INVRETSZ * 1 - INDPLAF + INVRETSZA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99])), 0) * 1 - V_CNR
RLOC101 = max(min(INVRETSC * 1 - INDPLAF + INVRETSCA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - RLOC100), 0) * 1 - V_CNR
REPXA = max(0, CODHXA - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX - CODHRA - CODHRB - CODHRC - CODHRD)) * 1 - ART1731BIS + max(0, CODHXA - RLOGSOC) * ART1731BIS * 1 - V_CNR
RLOC102 = max(min(INVRETSH * 1 - INDPLAF + INVRETSHA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - RLOC100 - RLOC101), 0) * 1 - V_CNR
RLOC25 = max(min(INVRETQO * 1 - INDPLAF + INVRETQOA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24])), 0) * 1 - V_CNR
RLOC44 = max(min(INVRETPIR * 1 - INDPLAF + INVRETPIRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43])), 0) * 1 - V_CNR
RLOC106 = max(min(INVRETTB * 1 - INDPLAF + INVRETTBA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC100, RLOC101, RLOC102, RLOC103, RLOC104, RLOC105])), 0) * 1 - V_CNR
RLOC23 = max(min(INVRETPF * 1 - INDPLAF + INVRETPFA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22])), 0) * 1 - V_CNR
RLOC103 = max(min(INVRETSM * 1 - INDPLAF + INVRETSMA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC100, RLOC101, RLOC102])), 0) * 1 - V_CNR
RLOC50 = max(min(INVRETRL * 1 - INDPLAF + INVRETRLA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49])), 0) * 1 - V_CNR
RLOC78 = max(min(INVRETRLR * 1 - INDPLAF + INVRETRLRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77])), 0) * 1 - V_CNR
RLOC63 = max(min(INVRETRG * 1 - INDPLAF + INVRETRGA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62])), 0) * 1 - V_CNR
RLOC43 = max(min(INVRETPER * 1 - INDPLAF + INVRETPERA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42])), 0) * 1 - V_CNR
RLOC32 = max(min(INVRETPD * 1 - INDPLAF + INVRETPDA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31])), 0) * 1 - V_CNR
RLOC49 = max(min(INVRETPY * 1 - INDPLAF + INVRETPYA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48])), 0) * 1 - V_CNR
RLOC27 = max(min(INVRETPA * 1 - INDPLAF + INVRETPAA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26])), 0) * 1 - V_CNR
RLOC67 = max(min(INVRETNW * 1 - INDPLAF + INVRETNWA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66])), 0) * 1 - V_CNR
RLOC105 = max(min(INVRETSW * 1 - INDPLAF + INVRETSWA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC100, RLOC101, RLOC102, RLOC103, RLOC104])), 0) * 1 - V_CNR
RLOC112 = max(min(INVRETTD * 1 - INDPLAF + INVRETTDA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111])), 0) * 1 - V_CNR
RLOC62 = max(min(INVRETPU * 1 - INDPLAF + INVRETPUA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61])), 0) * 1 - V_CNR
RLOC42 = max(min(INVRETPAR * 1 - INDPLAF + INVRETPARA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41])), 0) * 1 - V_CNR
RLOC117 = max(min(INVRETSLR * 1 - INDPLAF + INVRETSLRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113, RLOC114, RLOC115, RLOC116])), 0) * 1 - V_CNR
RLOC110 = max(min(INVRETST * 1 - INDPLAF + INVRETSTA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC100, RLOC101, RLOC102, RLOC103, RLOC104, RLOC105, RLOC106, RLOC107, RLOC108, RLOC109])), 0) * 1 - V_CNR
LIGREPQWB = is_positive(REPQW + REPRB + REPXB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RLOC107 = max(min(INVRETSE * 1 - INDPLAF + INVRETSEA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC100, RLOC101, RLOC102, RLOC103, RLOC104, RLOC105, RLOC106])), 0) * 1 - V_CNR
RLOC28 = max(min(INVRETPE * 1 - INDPLAF + INVRETPEA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27])), 0) * 1 - V_CNR
RLOC33 = max(min(INVRETPH * 1 - INDPLAF + INVRETPHA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32])), 0) * 1 - V_CNR
RLOC96 = max(min(INVRETSF * 1 - INDPLAF + INVRETSFA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95])), 0) * 1 - V_CNR
RLOC55 = max(min(INVRETPS * 1 - INDPLAF + INVRETPSA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54])), 0) * 1 - V_CNR
RLOC88 = max(min(INVRETNUR * 1 - INDPLAF + INVRETNURA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87])), 0) * 1 - V_CNR
RLOC108 = max(min(INVRETSJ * 1 - INDPLAF + INVRETSJA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC100, RLOC101, RLOC102, RLOC103, RLOC104, RLOC105, RLOC106, RLOC107])), 0) * 1 - V_CNR
RLOC39 = max(min(INVRETPJR * 1 - INDPLAF + INVRETPJRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38])), 0) * 1 - V_CNR
RLOC114 = max(min(INVRETSGR * 1 - INDPLAF + INVRETSGRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113])), 0) * 1 - V_CNR
RLOC89 = max(min(INVRETSB * 1 - INDPLAF + INVRETSBA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88])), 0) * 1 - V_CNR
RLOC41 = max(min(INVRETQFR * 1 - INDPLAF + INVRETQFRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40])), 0) * 1 - V_CNR
RLOC18 = max(min(INVOMQV, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17])), 0) * 1 - V_CNR
RLOC94 = max(min(INVRETTA * 1 - INDPLAF + INVRETTAA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93])), 0) * 1 - V_CNR
RLOC124 = max(min(INVRETSZR * 1 - INDPLAF + INVRETSZRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113, RLOC114, RLOC115, RLOC116, RLOC117, RLOC118, RLOC119, RLOC120, RLOC121, RLOC122, RLOC123])), 0) * 1 - V_CNR
REPXE = max(0, CODHXE - max(0, RRIREP - INVSOCNRET - INVOMSOCKH - INVOMSOCKI - INVSOC2010 - INVOMSOCQU - INVLOGSOC - INVOMSOCQJ - INVOMSOCQS - INVOMSOCQW - INVOMSOCQX - CODHRA - CODHRB - CODHRC - CODHRD - CODHXA - CODHXB - CODHXC)) * 1 - ART1731BIS + max(0, CODHXE - max(0, RLOGSOC - CODHXA - CODHXB - CODHXC)) * ART1731BIS * 1 - V_CNR
RLOC79 = max(min(INVRETRQR * 1 - INDPLAF + INVRETRQRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78])), 0) * 1 - V_CNR
RLOC70 = max(min(INVRETRI * 1 - INDPLAF + INVRETRIA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69])), 0) * 1 - V_CNR
RLOC104 = max(min(INVRETSR * 1 - INDPLAF + INVRETSRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC100, RLOC101, RLOC102, RLOC103])), 0) * 1 - V_CNR
RLOC83 = max(min(INVRETPSR * 1 - INDPLAF + INVRETPSRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82])), 0) * 1 - V_CNR
RLOC47 = max(min(INVRETPO * 1 - INDPLAF + INVRETPOA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46])), 0) * 1 - V_CNR
RLOC82 = max(min(INVRETPNR * 1 - INDPLAF + INVRETPNRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81])), 0) * 1 - V_CNR
RLOC26 = max(min(INVRETQF * 1 - INDPLAF + INVRETQFA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25])), 0) * 1 - V_CNR
RLOC46 = max(min(INVOMENTRJ, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45])), 0) * 1 - V_CNR
RLOC87 = max(min(INVRETRUR * 1 - INDPLAF + INVRETRURA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86])), 0) * 1 - V_CNR
RLOC99 = max(min(INVRETSU * 1 - INDPLAF + INVRETSUA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98])), 0) * 1 - V_CNR
RLOC36 = max(min(INVRETQGR * 1 - INDPLAF + INVRETQGRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35])), 0) * 1 - V_CNR
RLOC56 = max(min(INVRETPX * 1 - INDPLAF + INVRETPXA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55])), 0) * 1 - V_CNR
RLOC01 = max(min(INVOMREP, RRILOC), 0) * 1 - V_CNR
RLOC40 = max(min(INVRETQOR * 1 - INDPLAF + INVRETQORA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39])), 0) * 1 - V_CNR
LIGREPXC = is_positive(REPXC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RLOC30 = max(min(INVRETQR * 1 - INDPLAF + INVRETQRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29])), 0) * 1 - V_CNR
RLOC97 = max(min(INVRETSK * 1 - INDPLAF + INVRETSKA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96])), 0) * 1 - V_CNR
RLOC59 = max(min(INVRETRU * 1 - INDPLAF + INVRETRUA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58])), 0) * 1 - V_CNR
RLOC98 = max(min(INVRETSP * 1 - INDPLAF + INVRETSPA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97])), 0) * 1 - V_CNR
RLOC64 = max(min(INVRETRM * 1 - INDPLAF + INVRETRMA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63])), 0) * 1 - V_CNR
RLOC65 = max(min(INVRETRR * 1 - INDPLAF + INVRETRRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64])), 0) * 1 - V_CNR
RLOC13 = max(min(INVRETKU * 1 - INDPLAF + INVRETKUA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12])), 0) * 1 - V_CNR
RLOC75 = max(min(INVRETPOR * 1 - INDPLAF + INVRETPORA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74])), 0) * 1 - V_CNR
RLOC35 = max(min(INVRETQPR * 1 - INDPLAF + INVRETQPRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34])), 0) * 1 - V_CNR
LIGREPXA = is_positive(REPXA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RLOC73 = max(min(INVRETRY * 1 - INDPLAF + INVRETRYA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72])), 0) * 1 - V_CNR
RLOC121 = max(min(INVRETSKR * 1 - INDPLAF + INVRETSKRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113, RLOC114, RLOC115, RLOC116, RLOC117, RLOC118, RLOC119, RLOC120])), 0) * 1 - V_CNR
RLOC71 = max(min(INVRETRO * 1 - INDPLAF + INVRETROA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70])), 0) * 1 - V_CNR
RLOC52 = max(min(INVRETRV * 1 - INDPLAF + INVRETRVA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51])), 0) * 1 - V_CNR
RLOC115 = max(min(INVRETSAR * 1 - INDPLAF + INVRETSARA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113, RLOC114])), 0) * 1 - V_CNR
RLOC20 = max(min(INVRETQP * 1 - INDPLAF + INVRETQPA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19])), 0) * 1 - V_CNR
RLOC122 = max(min(INVRETSPR * 1 - INDPLAF + INVRETSPRA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) - sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113, RLOC114, RLOC115, RLOC116, RLOC117, RLOC118, RLOC119, RLOC120, RLOC121])), 0) * 1 - V_CNR
RLOC72 = max(min(INVRETRT * 1 - INDPLAF + INVRETRTA * INDPLAF, RRILOC - sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71])), 0) * 1 - V_CNR
LIGREPXB = is_positive(REPXB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPXE = is_positive(REPXE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPDOMSOC = REPXA + REPXB + REPXC + REPXE
RLOC02 = max(min(INVRETMA * 1 - INDPLAF + INVRETMAA * INDPLAF, RRILOC - RLOC01), 0) * 1 - V_CNR
LIGREPQUS = is_positive(REPQS + REPQU + REPRA + REPXA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RLOC03 = max(min(INVRETLG * 1 - INDPLAF + INVRETLGA * INDPLAF, RRILOC - RLOC01 - RLOC02), 0) * 1 - V_CNR
LIGREPQKG = is_positive(REPKI + REPQK + REPQX + REPRD + REPXE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RLOC04 = max(min(INVRETKS * 1 - INDPLAF + INVRETKSA * INDPLAF, RRILOC - RLOC01 - RLOC02 - RLOC03), 0) * 1 - V_CNR
RLOC05 = max(min(INVRETMAR * 1 - INDPLAF + INVRETMARA * INDPLAF, RRILOC - RLOC01 - RLOC02 - RLOC03 - RLOC04), 0) * 1 - V_CNR
RLOC06 = max(min(INVRETLGR * 1 - INDPLAF + INVRETLGRA * INDPLAF, RRILOC - RLOC01 - RLOC02 - RLOC03 - RLOC04 - RLOC05), 0) * 1 - V_CNR
RLOC07 = max(min(INVOMENTMN, RRILOC - RLOC01 - RLOC02 - RLOC03 - RLOC04 - RLOC05 - RLOC06), 0) * 1 - V_CNR
RCOLENT_1 = 1 - V_INDTEO * sum([RLOC1, RLOC2, RLOC3, RLOC4, RLOC5, RLOC6, RLOC7, RLOC8, RLOC9, RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC20, RLOC21, RLOC22, RLOC23, RLOC24, RLOC25, RLOC26, RLOC27, RLOC28, RLOC29, RLOC30, RLOC31, RLOC32, RLOC33, RLOC34, RLOC35, RLOC36, RLOC37, RLOC38, RLOC39, RLOC40, RLOC41, RLOC42, RLOC43, RLOC44, RLOC45, RLOC46, RLOC47, RLOC48, RLOC49, RLOC50, RLOC51, RLOC52, RLOC53, RLOC54, RLOC55, RLOC56, RLOC57, RLOC58, RLOC59, RLOC60, RLOC61, RLOC62, RLOC63, RLOC64, RLOC65, RLOC66, RLOC67, RLOC68, RLOC69, RLOC70, RLOC71, RLOC72, RLOC73, RLOC74, RLOC75, RLOC76, RLOC77, RLOC78, RLOC79, RLOC80, RLOC81, RLOC82, RLOC83, RLOC84, RLOC85, RLOC86, RLOC87, RLOC88, RLOC89, RLOC90, RLOC91, RLOC92, RLOC93, RLOC94, RLOC95, RLOC96, RLOC97, RLOC98, RLOC99]) + sum([RLOC10, RLOC11, RLOC12, RLOC13, RLOC14, RLOC15, RLOC16, RLOC17, RLOC18, RLOC19, RLOC110, RLOC111, RLOC112, RLOC113, RLOC114, RLOC115, RLOC116, RLOC117, RLOC118, RLOC119, RLOC120, RLOC121, RLOC122, RLOC123, RLOC124]) + V_INDTEO * RLOC01 + RLOC07 + RLOC18 + RLOC19 + RLOC45 + RLOC46 + arr(V_RLOC03 + V_RLOC06 * TX50 / 100) + arr(V_RLOC02 + V_RLOC05 * TX60 / 100) + arr(V_RLOC10 + V_RLOC16 * TX50 / 100) + arr(V_RLOC08 + V_RLOC14 * TX60 / 100) + arr(V_RLOC25 + V_RLOC40 * TX50 / 100) + arr(V_RLOC20 + V_RLOC35 * TX60 / 100) + arr(V_RLOC54 + V_RLOC82 * TX50 / 100) + arr(V_RLOC47 + V_RLOC75 * TX60 / 100) + arr(V_RLOC27 + V_RLOC42 * 5263 / 10000) + arr(V_RLOC22 + V_RLOC37 * 625 / 1000) + arr(V_RLOC57 + V_RLOC85 * 5263 / 10000) + arr(V_RLOC50 + V_RLOC78 * 625 / 1000) + arr(V_RLOC11 + V_RLOC17 * TX50 / 100) + arr(V_RLOC09 + V_RLOC15 * 60 / 100) + arr(V_RLOC26 + V_RLOC41 * 50 / 100) + arr(V_RLOC21 + V_RLOC36 * 60 / 100) + arr(V_RLOC55 + V_RLOC83 * 50 / 100) + arr(V_RLOC48 + V_RLOC76 * 60 / 100) + arr(V_RLOC28 + V_RLOC43 * 5263 / 10000) + arr(V_RLOC23 + V_RLOC38 * 625 / 1000) + arr(V_RLOC58 + V_RLOC86 * 5263 / 10000) + arr(V_RLOC51 + V_RLOC79 * 625 / 1000) + arr(V_RLOC95 + V_RLOC115 * 5263 / 10000) + arr(V_RLOC89 + V_RLOC113 * 625 / 1000) + arr(V_RLOC97 + V_RLOC121 * 5263 / 10000) + arr(V_RLOC91 + V_RLOC117 * 625 / 1000) + arr(V_RLOC29 + V_RLOC44 * 5263 / 10000) + arr(V_RLOC24 + V_RLOC39 * 625 / 1000) + arr(V_RLOC56 + V_RLOC84 * 5263 / 10000) + arr(V_RLOC49 + V_RLOC77 * 625 / 1000) + arr(V_RLOC59 + V_RLOC87 * 5263 / 10000) + arr(V_RLOC52 + V_RLOC80 * 625 / 1000) + arr(V_RLOC96 + V_RLOC116 * 5263 / 10000) + arr(V_RLOC90 + V_RLOC114 * 625 / 1000) + arr(V_RLOC98 + V_RLOC122 * 5263 / 10000) + arr(V_RLOC92 + V_RLOC118 * 625 / 1000) + arr(V_RLOC60 + V_RLOC88 * 5263 / 10000) + arr(V_RLOC53 + V_RLOC81 * 625 / 1000) + arr(V_RLOC99 + V_RLOC123 * 5263 / 10000) + arr(V_RLOC93 + V_RLOC119 * 625 / 1000) + arr(V_RLOC100 + V_RLOC124 * 5263 / 10000) + arr(V_RLOC94 + V_RLOC120 * 625 / 1000) * 1 - V_CNR
RLOC08 = max(min(INVRETMB * 1 - INDPLAF + INVRETMBA * INDPLAF, RRILOC - RLOC01 - RLOC02 - RLOC03 - RLOC04 - RLOC05 - RLOC06 - RLOC07), 0) * 1 - V_CNR
RCOLENT = RCOLENT_1 * 1 - ART1731BIS + min(RCOLENT_1, max(RCOLENT_P + RCOLENTP2, RCOLENT1731 + 0) * 1 - PREM8_11) * ART1731BIS
REPPB = max(0, INVOMRETPB - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60)) * 1 - ART1731BIS + max(0, INVOMRETPB - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60)) * ART1731BIS * 1 - V_CNR
REPQF = max(0, INVDOMRET50 - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1)) * 1 - ART1731BIS + max(0, INVDOMRET50 - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1)) * ART1731BIS * 1 - V_CNR
REPPN = max(0, INVOMRETPN - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV)) * 1 - ART1731BIS + max(0, INVOMRETPN - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV)) * ART1731BIS * 1 - V_CNR
REPRU = max(0, INVOMENTRU - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP)) * 1 - ART1731BIS + max(0, INVOMENTRU - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP)) * ART1731BIS * 1 - V_CNR
REPRI = max(0, INVOMENTRI - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR - INVOMRETPW)) * 1 - ART1731BIS + max(0, INVOMENTRI - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR - INVOMRETPW)) * ART1731BIS * 1 - V_CNR
REPTD = max(0, CODHTD - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB - CODHSE - CODHSJ - CODHSO - CODHST - CODHSY)) * 1 - ART1731BIS + max(0, CODHTD - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB - CODHSE - CODHSJ - CODHSO - CODHST - CODHSY)) * ART1731BIS * 1 - V_CNR
REPSE = max(0, CODHSE - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB)) * 1 - ART1731BIS + max(0, CODHSE - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB)) * ART1731BIS * 1 - V_CNR
REPPP = max(0, INVOMRETPP - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU)) * 1 - ART1731BIS + max(0, INVOMRETPP - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU)) * ART1731BIS * 1 - V_CNR
REPRR = max(0, INVOMENTRR - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM)) * 1 - ART1731BIS + max(0, INVOMENTRR - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM)) * ART1731BIS * 1 - V_CNR
REPNY = max(0, INVOMENTNY - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR - INVOMRETPW - INVOMENTRI - INVOMENTRO - INVOMENTRT - INVOMENTRY)) * 1 - ART1731BIS + max(0, INVOMENTNY - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR - INVOMRETPW - INVOMENTRI - INVOMENTRO - INVOMENTRT - INVOMENTRY)) * ART1731BIS * 1 - V_CNR
REPPH = max(0, INVOMRETPH - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE - INVOMRETPI - INVIMP - INVDIR2009 - INVOMRETPD)) * 1 - ART1731BIS + max(0, INVOMRETPH - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE - INVOMRETPI - INVIMP - INVDIR2009 - INVOMRETPD)) * ART1731BIS * 1 - V_CNR
REPNW = max(0, INVOMENTNW - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW)) * 1 - ART1731BIS + max(0, INVOMENTNW - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW)) * ART1731BIS * 1 - V_CNR
REPKT = max(0, INVOMENTKT - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - INVOMENTMN - RETROCOMMB - RETROCOMMC - RETROCOMLH - RETROCOMLI)) * 1 - ART1731BIS + max(0, INVOMENTKT - max(0, RCOLENT - REPENT5 - INVOMENTMN - RETROCOMMB - RETROCOMMC - RETROCOMLH - RETROCOMLI)) * ART1731BIS * 1 - V_CNR
REPPM = max(0, INVOMRETPM - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3)) * 1 - ART1731BIS + max(0, INVOMRETPM - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3)) * ART1731BIS * 1 - V_CNR
REPSL = max(0, CODHSL - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG)) * 1 - ART1731BIS + max(0, CODHSL - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG)) * ART1731BIS * 1 - V_CNR
REPSA = max(0, CODHSA - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA)) * 1 - ART1731BIS + max(0, CODHSA - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA)) * ART1731BIS * 1 - V_CNR
REPSZ = max(0, CODHSZ - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU)) * 1 - ART1731BIS + max(0, CODHSZ - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU)) * ART1731BIS * 1 - V_CNR
REPTA = max(0, CODHTA - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV)) * 1 - ART1731BIS + max(0, CODHTA - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV)) * ART1731BIS * 1 - V_CNR
REPRO = max(0, INVOMENTRO - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR - INVOMRETPW - INVOMENTRI)) * 1 - ART1731BIS + max(0, INVOMENTRO - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR - INVOMRETPW - INVOMENTRI)) * ART1731BIS * 1 - V_CNR
REPSP = max(0, CODHSP - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK)) * 1 - ART1731BIS + max(0, CODHSP - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK)) * ART1731BIS * 1 - V_CNR
REPPF = max(0, INVOMRETPF - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB)) * 1 - ART1731BIS + max(0, INVOMRETPF - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB)) * ART1731BIS * 1 - V_CNR
LIGREPQF = is_positive(REPQF) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPSB = max(0, CODHSB - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2)) * 1 - ART1731BIS + max(0, CODHSB - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2)) * ART1731BIS * 1 - V_CNR
REPRL = max(0, INVOMENTRL - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY)) * 1 - ART1731BIS + max(0, INVOMENTRL - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY)) * ART1731BIS * 1 - V_CNR
REPKU = max(0, INVOMENTKU - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - INVOMENTMN - RETROCOMMB - RETROCOMMC - RETROCOMLH - RETROCOMLI - INVOMENTKT)) * 1 - ART1731BIS + max(0, INVOMENTKU - max(0, RCOLENT - REPENT5 - INVOMENTMN - RETROCOMMB - RETROCOMMC - RETROCOMLH - RETROCOMLI - INVOMENTKT)) * ART1731BIS * 1 - V_CNR
LIGREPSAB = is_positive(REPSB + REPAB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPPA = max(0, INVOMRETPA - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50)) * 1 - ART1731BIS + max(0, INVOMRETPA - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50)) * ART1731BIS * 1 - V_CNR
REPSG = max(0, CODHSG - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB)) * 1 - ART1731BIS + max(0, CODHSG - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB)) * ART1731BIS * 1 - V_CNR
LIGREPRU = is_positive(REPRU) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSB = is_positive(REPSB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPSR = max(0, CODHSR - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM)) * 1 - ART1731BIS + max(0, CODHSR - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM)) * ART1731BIS * 1 - V_CNR
REPST = max(0, CODHST - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB - CODHSE - CODHSJ - CODHSO)) * 1 - ART1731BIS + max(0, CODHST - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB - CODHSE - CODHSJ - CODHSO)) * ART1731BIS * 1 - V_CNR
REPSK = max(0, CODHSK - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF)) * 1 - ART1731BIS + max(0, CODHSK - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF)) * ART1731BIS * 1 - V_CNR
LIGREPRO = is_positive(REPRO) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPMC = max(0, RETROCOMMC - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - INVOMENTMN - RETROCOMMB)) * 1 - ART1731BIS + max(0, RETROCOMMC - max(0, RCOLENT - REPENT5 - INVOMENTMN - RETROCOMMB)) * ART1731BIS * 1 - V_CNR
REPPT = max(0, INVOMRETPT - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO)) * 1 - ART1731BIS + max(0, INVOMRETPT - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO)) * ART1731BIS * 1 - V_CNR
REPSU = max(0, CODHSU - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP)) * 1 - ART1731BIS + max(0, CODHSU - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP)) * ART1731BIS * 1 - V_CNR
REPQG = max(0, INVDOMRET60 - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2)) * 1 - ART1731BIS + max(0, INVDOMRET60 - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2)) * ART1731BIS * 1 - V_CNR
LIGREPPB = is_positive(REPPB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSE = is_positive(REPSE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPRG = max(0, INVOMENTRG - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU)) * 1 - ART1731BIS + max(0, INVOMENTRG - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU)) * ART1731BIS * 1 - V_CNR
REPNV = max(0, INVOMENTNV - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV)) * 1 - ART1731BIS + max(0, INVOMENTNV - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV)) * ART1731BIS * 1 - V_CNR
REPPE = max(0, INVOMRETPE - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA)) * 1 - ART1731BIS + max(0, INVOMRETPE - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA)) * ART1731BIS * 1 - V_CNR
REPSW = max(0, CODHSW - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR)) * 1 - ART1731BIS + max(0, CODHSW - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR)) * ART1731BIS * 1 - V_CNR
REPSY = max(0, CODHSY - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB - CODHSE - CODHSJ - CODHSO - CODHST)) * 1 - ART1731BIS + max(0, CODHSY - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB - CODHSE - CODHSJ - CODHSO - CODHST)) * ART1731BIS * 1 - V_CNR
LIGREPSU = is_positive(REPSU) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPLI = max(0, RETROCOMLI - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - INVOMENTMN - RETROCOMMB - RETROCOMMC - RETROCOMLH)) * 1 - ART1731BIS + max(0, RETROCOMLI - max(0, RCOLENT - REPENT5 - INVOMENTMN - RETROCOMMB - RETROCOMMC - RETROCOMLH)) * ART1731BIS * 1 - V_CNR
LIGREPKU = is_positive(REPKU) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPP = is_positive(REPPP) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPRQ = max(0, INVOMENTRQ - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL)) * 1 - ART1731BIS + max(0, INVOMENTRQ - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL)) * ART1731BIS * 1 - V_CNR
REPRJ = max(0, INVOMENTRJ - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM)) * 1 - ART1731BIS + max(0, INVOMENTRJ - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM)) * ART1731BIS * 1 - V_CNR
REPRM = max(0, INVOMENTRM - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG)) * 1 - ART1731BIS + max(0, INVOMENTRM - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG)) * ART1731BIS * 1 - V_CNR
LIGREPKT = is_positive(REPKT) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPSV = max(0, CODHSV - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ)) * 1 - ART1731BIS + max(0, CODHSV - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ)) * ART1731BIS * 1 - V_CNR
REPSO = max(0, CODHSO - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB - CODHSE - CODHSJ)) * 1 - ART1731BIS + max(0, CODHSO - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB - CODHSE - CODHSJ)) * ART1731BIS * 1 - V_CNR
LIGREPSAW = is_positive(REPSW + REPAW) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPFL = is_positive(REPPF + REPRQ + REPSL + REPAL) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPQE = max(0, INVENDEB2009 - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV)) * 1 - ART1731BIS + max(0, INVENDEB2009 - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV)) * ART1731BIS * 1 - V_CNR
LIGREPSZ = is_positive(REPSZ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPTB = max(0, CODHTB - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW)) * 1 - ART1731BIS + max(0, CODHTB - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW)) * ART1731BIS * 1 - V_CNR
LIGREPSA = is_positive(REPSA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSK = is_positive(REPSK) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSO = is_positive(REPSO) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPRV = max(0, INVOMENTRV - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ)) * 1 - ART1731BIS + max(0, INVOMENTRV - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ)) * ART1731BIS * 1 - V_CNR
REPQO = max(0, INVRETRO1 - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ)) * 1 - ART1731BIS + max(0, INVRETRO1 - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ)) * ART1731BIS * 1 - V_CNR
LIGREPPA = is_positive(REPPA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSAE = is_positive(REPSE + REPAE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPPD = max(0, INVOMRETPD - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE - INVOMRETPI - INVIMP - INVDIR2009)) * 1 - ART1731BIS + max(0, INVOMRETPD - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE - INVOMRETPI - INVIMP - INVDIR2009)) * ART1731BIS * 1 - V_CNR
REPPS = max(0, INVOMRETPS - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN)) * 1 - ART1731BIS + max(0, INVOMRETPS - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN)) * ART1731BIS * 1 - V_CNR
REPSQ = max(0, CODHSQ - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL)) * 1 - ART1731BIS + max(0, CODHSQ - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL)) * ART1731BIS * 1 - V_CNR
REPSC = max(0, CODHSC - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ)) * 1 - ART1731BIS + max(0, CODHSC - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ)) * ART1731BIS * 1 - V_CNR
LIGREPNW = is_positive(REPNW) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPSM = max(0, CODHSM - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH)) * 1 - ART1731BIS + max(0, CODHSM - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH)) * ART1731BIS * 1 - V_CNR
LIGREPTA = is_positive(REPTA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPRI = is_positive(REPRI) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RRIRENT = RRISUP - RLOGSOC - RDOMSOC1 - RIDOMPROTOT - RCOLENT
LIGREPRG = is_positive(REPRG) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPPO = max(0, INVOMRETPO - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ)) * 1 - ART1731BIS + max(0, INVOMRETPO - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ)) * ART1731BIS * 1 - V_CNR
REPLH = max(0, RETROCOMLH - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - INVOMENTMN - RETROCOMMB - RETROCOMMC)) * 1 - ART1731BIS + max(0, RETROCOMLH - max(0, RCOLENT - REPENT5 - INVOMENTMN - RETROCOMMB - RETROCOMMC)) * ART1731BIS * 1 - V_CNR
RENT13 = max(min(INVRETAC * 1 - INDPLAF + INVRETACA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12])), 0) * 1 - V_CNR
LIGREPRVQ = is_positive(REPRV + REPSQ + REPAQ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT33 = max(min(INVRETAKR * 1 - INDPLAF + INVRETAKRA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25, RENT26, RENT27, RENT28, RENT29, RENT30, RENT31, RENT32])), 0) * 1 - V_CNR
LIGREPPE = is_positive(REPPE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPSF = max(0, CODHSF - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA)) * 1 - ART1731BIS + max(0, CODHSF - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA)) * ART1731BIS * 1 - V_CNR
REPPR = max(0, INVOMRETPR - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW)) * 1 - ART1731BIS + max(0, INVOMRETPR - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW)) * ART1731BIS * 1 - V_CNR
REPPI = max(0, INVOMRETPI - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE)) * 1 - ART1731BIS + max(0, INVOMRETPI - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE)) * ART1731BIS * 1 - V_CNR
REPSH = max(0, CODHSH - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC)) * 1 - ART1731BIS + max(0, CODHSH - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC)) * ART1731BIS * 1 - V_CNR
REPQR = max(0, INVIMP - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE - INVOMRETPI)) * 1 - ART1731BIS + max(0, INVIMP - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE - INVOMRETPI)) * ART1731BIS * 1 - V_CNR
RENT28 = max(min(INVRETAQR * 1 - INDPLAF + INVRETAQRA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25, RENT26, RENT27])), 0) * 1 - V_CNR
REPQI = max(0, INVDIR2009 - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE - INVOMRETPI - INVIMP)) * 1 - ART1731BIS + max(0, INVDIR2009 - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE - INVOMRETPI - INVIMP)) * ART1731BIS * 1 - V_CNR
LIGREPMC = is_positive(REPMC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT26 = max(min(INVRETAGR * 1 - INDPLAF + INVRETAGRA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25])), 0) * 1 - V_CNR
REPRW = max(0, INVOMENTRW - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR)) * 1 - ART1731BIS + max(0, INVOMENTRW - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR)) * ART1731BIS * 1 - V_CNR
RENT30 = max(min(INVRETBBR * 1 - INDPLAF + INVRETBBRA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25, RENT26, RENT27, RENT28, RENT29])), 0) * 1 - V_CNR
REPQP = max(0, INVRETRO2 - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009)) * 1 - ART1731BIS + max(0, INVRETRO2 - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009)) * ART1731BIS * 1 - V_CNR
LIGREPPM = is_positive(REPPM) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPLI = is_positive(REPLI) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT32 = max(min(INVRETAFR * 1 - INDPLAF + INVRETAFRA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25, RENT26, RENT27, RENT28, RENT29, RENT30, RENT31])), 0) * 1 - V_CNR
LIGREPSR = is_positive(REPSR) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPD = is_positive(REPPD) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSAY = is_positive(REPSY + REPAY) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT25 = max(min(INVRETABR * 1 - INDPLAF + INVRETABRA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24])), 0) * 1 - V_CNR
LIGREPSV = is_positive(REPSV) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPRP = max(0, INVOMENTRP - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK)) * 1 - ART1731BIS + max(0, INVOMENTRP - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK)) * ART1731BIS * 1 - V_CNR
REPRK = max(0, INVOMENTRK - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX)) * 1 - ART1731BIS + max(0, INVOMENTRK - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX)) * ART1731BIS * 1 - V_CNR
LIGREPSL = is_positive(REPSL) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPRUP = is_positive(REPRU + REPSP + REPAP) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPH = is_positive(REPPH) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RLOC09 = max(min(INVRETMC * 1 - INDPLAF + INVRETMCA * INDPLAF, RRILOC - RLOC01 - RLOC02 - RLOC03 - RLOC04 - RLOC05 - RLOC06 - RLOC07 - RLOC08), 0) * 1 - V_CNR
LIGREPSAA = is_positive(REPSA + REPAA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPSJ = max(0, CODHSJ - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB - CODHSE)) * 1 - ART1731BIS + max(0, CODHSJ - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - REPENT2 - CODHSB - CODHSG - CODHSL - CODHSQ - CODHSV - CODHTA - CODHSA - CODHSF - CODHSK - CODHSP - CODHSU - CODHSZ - CODHSC - CODHSH - CODHSM - CODHSR - CODHSW - CODHTB - CODHSE)) * ART1731BIS * 1 - V_CNR
REPPW = max(0, INVOMRETPW - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR)) * 1 - ART1731BIS + max(0, INVOMRETPW - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR)) * ART1731BIS * 1 - V_CNR
REPPJ = max(0, INVOMRETPJ - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF)) * 1 - ART1731BIS + max(0, INVOMRETPJ - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF)) * ART1731BIS * 1 - V_CNR
RENT20 = max(min(INVRETAJ * 1 - INDPLAF + INVRETAJA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19])), 0) * 1 - V_CNR
LIGREPRL = is_positive(REPRL) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPPL = max(0, INVOMRETPL - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE - INVOMRETPI - INVIMP - INVDIR2009 - INVOMRETPD - INVOMRETPH)) * 1 - ART1731BIS + max(0, INVOMRETPL - max(0, RCOLENT - REPENT5 - REPENT4 - INVOMQV - INVENDEB2009 - INVRETRO2 - INVDOMRET60 - INVOMRETPB - INVOMRETPF - INVOMRETPJ - INVRETRO1 - INVDOMRET50 - INVOMRETPA - INVOMRETPE - INVOMRETPI - INVIMP - INVDIR2009 - INVOMRETPD - INVOMRETPH)) * ART1731BIS * 1 - V_CNR
LIGREPTB = is_positive(REPTB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RED = RCOTFOR + RSURV + RCOMP + RHEBE + RREPA + RDIFAGRI + RDONS + RDUFLOTOT + RPINELTOT + RCELTOT + RRESTIMO * 1 - V_INDTEO + V_RRESTIMOXY * V_INDTEO + RFIPC + RFIPDOM + RAIDE + RNOUV + RPLAFREPME4 + RTOURREP + RTOUREPA + RTOUHOTR + RLOGDOM + RLOGSOC + RDOMSOC1 + RLOCENT + RCOLENT + RRETU + RINNO + RRPRESCOMP + RFOR + RSOUFIP + RRIRENOV + RSOCREPR + RRESIMEUB + RRESINEUV + RRESIVIEU + RCODOU + RLOCIDEFG + RCODJT + RCODJU + RREDMEUB + RREDREP + RILMIX + RILMIY + RINVRED + RILMIH + RILMJC + RILMIZ + RILMJI + RILMJS + RMEUBLE + RPROREP + RREPNPRO + RREPMEU + RILMIC + RILMIB + RILMIA + RILMJY + RILMJX + RILMJW + RILMJV + RILMOA + RILMOB + RILMOC + RILMOD + RILMOE + RILMPA + RILMPB + RILMPC + RILMPD + RILMPE + RIDOMPROE3 + RPATNAT1 + RPATNAT2 + RPATNAT3 + RPATNAT + RFORET + RCREAT + RCINE
REPRT = max(0, INVOMENTRT - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR - INVOMRETPW - INVOMENTRI - INVOMENTRO)) * 1 - ART1731BIS + max(0, INVOMENTRT - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR - INVOMRETPW - INVOMENTRI - INVOMENTRO)) * ART1731BIS * 1 - V_CNR
LIGREPRW = is_positive(REPRW) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPPX = max(0, INVOMRETPX - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS)) * 1 - ART1731BIS + max(0, INVOMRETPX - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS)) * ART1731BIS * 1 - V_CNR
LIGREPRR = is_positive(REPRR) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT23 = max(min(INVRETAY * 1 - INDPLAF + INVRETAYA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22])), 0) * 1 - V_CNR
LIGREPTD = is_positive(REPTD) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPPY = max(0, INVOMRETPY - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT)) * 1 - ART1731BIS + max(0, INVOMRETPY - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT)) * ART1731BIS * 1 - V_CNR
LIGREPSG = is_positive(REPSG) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSAG = is_positive(REPSG + REPAG) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPN = is_positive(REPPN) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT14 = max(min(INVRETAH * 1 - INDPLAF + INVRETAHA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13])), 0) * 1 - V_CNR
LIGREPRJ = is_positive(REPRJ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPQE = is_positive(REPQE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPPU = max(0, INVOMRETPU - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP)) * 1 - ART1731BIS + max(0, INVOMRETPU - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP)) * ART1731BIS * 1 - V_CNR
LIGREPPJA = is_positive(REPPJ + REPNV + REPTA + REPBB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPNU = max(0, INVOMENTNU - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU)) * 1 - ART1731BIS + max(0, INVOMENTNU - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU)) * ART1731BIS * 1 - V_CNR
REPMN = max(0, INVOMENTMN - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5)) * 1 - ART1731BIS + max(0, INVOMENTMN - max(0, RCOLENT - REPENT5)) * ART1731BIS * 1 - V_CNR
LIGREPSY = is_positive(REPSY) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPHO = is_positive(REPPH + REPRT + REPSO + REPAO) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPTBE = is_positive(REPTB + REPBE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPQV = max(0, INVOMQV - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4)) * 1 - ART1731BIS + max(0, INVOMQV - max(0, RCOLENT - REPENT5 - REPENT4)) * ART1731BIS * 1 - V_CNR
LIGREPSP = is_positive(REPSP) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPJ = is_positive(REPPJ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT31 = max(min(INVRETAAR * 1 - INDPLAF + INVRETAARA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25, RENT26, RENT27, RENT28, RENT29, RENT30])), 0) * 1 - V_CNR
REPMB = max(0, RETROCOMMB - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - INVOMENTMN)) * 1 - ART1731BIS + max(0, RETROCOMMB - max(0, RCOLENT - REPENT5 - INVOMENTMN)) * ART1731BIS * 1 - V_CNR
REPRY = max(0, INVOMENTRY - max(0, RRIREP - REPSOC - RIDOMPROTOT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR - INVOMRETPW - INVOMENTRI - INVOMENTRO - INVOMENTRT)) * 1 - ART1731BIS + max(0, INVOMENTRY - max(0, RCOLENT - REPENT5 - REPENT4 - REPENT3 - INVOMRETPM - INVOMENTRJ - INVOMRETPO - INVOMRETPT - INVOMRETPY - INVOMENTRL - INVOMENTRQ - INVOMENTRV - INVOMENTNV - INVOMRETPN - INVOMRETPS - INVOMRETPX - INVOMENTRK - INVOMENTRP - INVOMENTRU - INVOMENTNU - INVOMRETPP - INVOMRETPU - INVOMENTRG - INVOMENTRM - INVOMENTRR - INVOMENTRW - INVOMENTNW - INVOMRETPR - INVOMRETPW - INVOMENTRI - INVOMENTRO - INVOMENTRT)) * ART1731BIS * 1 - V_CNR
LIGREPPO = is_positive(REPPO) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSC = is_positive(REPSC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT11 = max(min(INVRETAU * 1 - INDPLAF + INVRETAUA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10])), 0) * 1 - V_CNR
RENT19 = max(min(INVRETAE * 1 - INDPLAF + INVRETAEA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18])), 0) * 1 - V_CNR
IAD11 = max(0, IDOM11 - DEC11 - RED) * 1 - is_positive(V_CR2 + IPVLOC) + is_positive(V_CR2 + IPVLOC) * max(0, IDOM11 - RED) * 1 - is_positive(RE168 + TAX1649) + is_positive(RE168 + TAX1649) * IDOM16
LIGREPNY = is_positive(REPNY) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPBL = is_positive(REPPB + REPRL) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPQO = is_positive(REPQO) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
IBM13 = IAD11 + ITP + REI + AUTOVERSSUP + TAXASSUR + IPCAPTAXTOT + TAXLOY + CHRAPRES + AVFISCOPTER
LIGREPSF = is_positive(REPSF) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSAU = is_positive(REPSU + REPAU) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT24 = max(min(INVRETBG * 1 - INDPLAF + INVRETBGA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23])), 0) * 1 - V_CNR
GGIRSEUL = IAD11 + ITP + REI + AVFISCOPTER
LIGREPSAJ = is_positive(REPSJ + REPAJ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPRM = is_positive(REPRM) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT17 = max(min(INVRETAW * 1 - INDPLAF + INVRETAWA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16])), 0) * 1 - V_CNR
RENT36 = max(min(INVRETBAR * 1 - INDPLAF + INVRETBARA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25, RENT26, RENT27, RENT28, RENT29, RENT30, RENT31, RENT32, RENT33, RENT34, RENT35])), 0) * 1 - V_CNR
LIGREPSW = is_positive(REPSW) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSAM = is_positive(REPSM + REPAM) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPRV = is_positive(REPRV) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT12 = max(min(INVRETBA * 1 - INDPLAF + INVRETBAA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11])), 0) * 1 - V_CNR
LIGREPQR = is_positive(REPQR) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPF = is_positive(REPPF) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT18 = max(min(INVRETBE * 1 - INDPLAF + INVRETBEA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17])), 0) * 1 - V_CNR
LIGREPSM = is_positive(REPSM) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPDO = is_positive(REPPD + REPRO) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPS = is_positive(REPPS) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPRY = is_positive(REPRY) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
GGIAIMP = IAD11
RENT22 = max(min(INVRETAT * 1 - INDPLAF + INVRETATA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21])), 0) * 1 - V_CNR
LIGREPPX = is_positive(REPPX) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPRP = is_positive(REPRP) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPNV = is_positive(REPNV) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPST = is_positive(REPST) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPLB = is_positive(REPPL + REPNY + REPTD + REPBG) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPR = is_positive(REPPR) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT01 = max(min(INVRETAB * 1 - INDPLAF + INVRETABA * INDPLAF, RRIRENT), 0) * 1 - V_CNR
LIGREPRK = is_positive(REPRK) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSAV = is_positive(REPSV + REPAV) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPDOMENTR1 = REPSB + REPSG + REPSL + REPSQ + REPSV + REPTA + REPSA + REPSF + REPSK + REPSP + REPSU + REPSZ + REPSC + REPSH + REPSM + REPSR + REPSW + REPTB + REPSE + REPSJ + REPSO + REPST + REPSY + REPTD
LIGREPQG = is_positive(REPQG) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPAK = is_positive(REPPA + REPRK) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSAC = is_positive(REPSC + REPAC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT06 = max(min(INVRETBB * 1 - INDPLAF + INVRETBBA * INDPLAF, RRIRENT - sum([RENT01, RENT02, RENT03, RENT04, RENT05])), 0) * 1 - V_CNR
LIGREPQP = is_positive(REPQP) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT02 = max(min(INVRETAG * 1 - INDPLAF + INVRETAGA * INDPLAF, RRIRENT - RENT01), 0) * 1 - V_CNR
LIGREPPT = is_positive(REPPT) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSH = is_positive(REPSH) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPRT = is_positive(REPRT) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
REPDOMENTR3 = REPQE + REPQV + REPQP + REPQG + REPQO + REPQF + REPQR + REPQI + REPPB + REPPF + REPPJ + REPPA + REPPE + REPPI + REPPD + REPPH + REPPL
LIGREPMB = is_positive(REPMB) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPQV = is_positive(REPQV) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSAH = is_positive(REPSH + REPAH) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
A13RENT1 = RENT18 + RENT24 + RLOC106 + RLOC112 + max(0, RENT12 + RENT36 + RENT06 + RENT30 + RLOC100 + RLOC124 + RLOC94 + RLOC120 - arr(RENT12 + RENT36 * 5263 / 10000) + arr(RENT06 + RENT30 * 625 / 1000) + arr(RLOC100 + RLOC124 * 5263 / 10000) + arr(RLOC94 + RLOC120 * 625 / 1000)) * 1 - V_CNR
LIGREPSAF = is_positive(REPSF + REPAF) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT10 = max(min(INVRETAP * 1 - INDPLAF + INVRETAPA * INDPLAF, RRIRENT - sum([RENT01, RENT02, RENT03, RENT04, RENT05, RENT06, RENT07, RENT08, RENT09])), 0) * 1 - V_CNR
LIGREPLH = is_positive(REPLH) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPRQ = is_positive(REPRQ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPSQ = is_positive(REPSQ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPMN = is_positive(REPMN) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT09 = max(min(INVRETAK * 1 - INDPLAF + INVRETAKA * INDPLAF, RRIRENT - sum([RENT01, RENT02, RENT03, RENT04, RENT05, RENT06, RENT07, RENT08])), 0) * 1 - V_CNR
LIGREPPU = is_positive(REPPU) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPQI = is_positive(REPQI) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
A13RENT = max(0, A13RENT1 * 1 - ART1731BIS + min(A13RENT1731 + 0, A13RENT1) * ART1731BIS) * 1 - V_CNR
LIGREPSJ = is_positive(REPSJ) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPNU = is_positive(REPNU) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT27 = max(min(INVRETALR * 1 - INDPLAF + INVRETALRA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25, RENT26])), 0) * 1 - V_CNR
LIGREPRWR = is_positive(REPRW + REPSR + REPHAR) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT15 = max(min(INVRETAM * 1 - INDPLAF + INVRETAMA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14])), 0) * 1 - V_CNR
RENT08 = max(min(INVRETAF * 1 - INDPLAF + INVRETAFA * INDPLAF, RRIRENT - sum([RENT01, RENT02, RENT03, RENT04, RENT05, RENT06, RENT07])), 0) * 1 - V_CNR
RENT21 = max(min(INVRETAO * 1 - INDPLAF + INVRETAOA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20])), 0) * 1 - V_CNR
REPDOMENTR4 = REPMN + REPMB + REPMC + REPLH + REPLI + REPKT + REPKU
LIGREPMMQE = is_positive(REPRJ + REPMN + REPQE) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
ITRED = min(RED, IDOM11 - DEC11)
RENT16 = max(min(INVRETAR * 1 - INDPLAF + INVRETARA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15])), 0) * 1 - V_CNR
LIGREPPI = is_positive(REPPI) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT35 = max(min(INVRETAUR * 1 - INDPLAF + INVRETAURA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25, RENT26, RENT27, RENT28, RENT29, RENT30, RENT31, RENT32, RENT33, RENT34])), 0) * 1 - V_CNR
RENT34 = max(min(INVRETAPR * 1 - INDPLAF + INVRETAPRA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25, RENT26, RENT27, RENT28, RENT29, RENT30, RENT31, RENT32, RENT33])), 0) * 1 - V_CNR
RENT03 = max(min(INVRETAL * 1 - INDPLAF + INVRETALA * INDPLAF, RRIRENT - RENT01 - RENT02), 0) * 1 - V_CNR
RENT07 = max(min(INVRETAA * 1 - INDPLAF + INVRETAAA * INDPLAF, RRIRENT - sum([RENT01, RENT02, RENT03, RENT04, RENT05, RENT06])), 0) * 1 - V_CNR
LIGREPRYT = is_positive(REPRY + REPST + REPAT) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPL = is_positive(REPPL) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RENT29 = max(min(INVRETAVR * 1 - INDPLAF + INVRETAVRA * INDPLAF, RRIRENT - sum([RENT1, RENT2, RENT3, RENT4, RENT5, RENT6, RENT7, RENT8, RENT9, RENT10, RENT11, RENT12, RENT13, RENT14, RENT15, RENT16, RENT17, RENT18, RENT19, RENT20, RENT21, RENT22, RENT23, RENT24, RENT25, RENT26, RENT27, RENT28])), 0) * 1 - V_CNR
LIGREPPEK = is_positive(REPPE + REPRP + REPSK + REPAK) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
RLOC10 = max(min(INVRETLH * 1 - INDPLAF + INVRETLHA * INDPLAF, RRILOC - RLOC01 - RLOC02 - RLOC03 - RLOC04 - RLOC05 - RLOC06 - RLOC07 - RLOC08 - RLOC09), 0) * 1 - V_CNR
LIGREPPW = is_positive(REPPW) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
IBM23 = IAD11 + ITP + REI + AUTOVERSSUP + AVFISCOPTER
LIGREPPY = is_positive(REPPY) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
LIGREPPIZ = is_positive(REPPI + REPNU + REPSZ + REPBA) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * LIG1
IAMD1 = IBM13
A13REELB = RCINE + RLOG32 + RLOG39 + A13RSOC + A13RENT
REPDOMENTR2 = REPPM + REPRJ + REPPO + REPPT + REPPY + REPRL + REPRQ + REPRV + REPNV + REPPN + REPPS + REPPX + REPRK + REPRP + REPRU + REPNU + REPPP + REPPU + REPRG + REPRM + REPRR + REPRW + REPNW + REPPR + REPPW + REPRI + REPRO + REPRT + REPRY + REPNY
INDNIRI = is_positive(IDOM11 - DEC11) * null(IAD11)
IAMD2 = IBM23
LOYBASE_I = TAXLOY * is_positive(IAMD1 + 1 - SEUIL_61)
IND61IR = is_positive(positif_ou_nul(IAMD1 - SEUIL_61) + is_positive(present(NRINET) + present(IMPRET) + present(BRAS))) * 2 + 1 - is_positive(positif_ou_nul(IAMD1 - SEUIL_61) + is_positive(present(NRINET) + present(IMPRET) + present(BRAS))) * is_positive(IAMD1) * 1 + null(IAMD1) * 1 - is_positive(present(NRINET) + present(IMPRET) + present(BRAS)) * 3
RENT04 = max(min(INVRETAQ * 1 - INDPLAF + INVRETAQA * INDPLAF, RRIRENT - RENT01 - RENT02 - RENT03), 0) * 1 - V_CNR
TAXABASE_I = TAXASSUR * is_positive(IAMD1 + 1 - SEUIL_61)
IRB = IAMD2
A11RENT1 = RENT14 + RENT20 + RENT16 + RENT22 + RLOC102 + RLOC108 + RLOC104 + RLOC110 + RLOC34 + RLOC63 + RLOC70 + RLOC66 + RLOC73 + max(0, RLOC29 + RLOC44 + RLOC24 + RLOC39 + RLOC56 + RLOC84 + RLOC49 + RLOC77 + RLOC59 + RLOC87 + RLOC52 + RLOC80 + RENT08 + RENT32 + RENT02 + RENT26 + RENT10 + RENT34 + RENT04 + RENT28 + RLOC96 + RLOC116 + RLOC90 + RLOC114 + RLOC98 + RLOC122 + RLOC92 + RLOC118 - arr(RLOC29 + RLOC44 * 5263 / 10000) + arr(RLOC24 + RLOC39 * 625 / 1000) + arr(RLOC56 + RLOC84 * 5263 / 10000) + arr(RLOC49 + RLOC77 * 625 / 1000) + arr(RLOC59 + RLOC87 * 5263 / 10000) + arr(RLOC52 + RLOC80 * 625 / 1000) + arr(RENT08 + RENT32 * 5263 / 10000) + arr(RENT02 + RENT26 * 625 / 1000) + arr(RENT10 + RENT34 * 5263 / 10000) + arr(RENT04 + RENT28 * 625 / 1000) + arr(RLOC96 + RLOC116 * 5263 / 10000) + arr(RLOC90 + RLOC114 * 625 / 1000) + arr(RLOC98 + RLOC122 * 5263 / 10000) + arr(RLOC92 + RLOC118 * 625 / 1000)) * 1 - V_CNR
INDSEUIL61 = positif_ou_nul(IAMD1 - SEUIL_61)
LIG_CORRECT = positif_ou_nul(IBM23) * INDREV1A8 * LIG1 * LIG2
A10RENT1 = RENT13 + RENT19 + RENT15 + RENT21 + RLOC101 + RLOC107 + RLOC103 + RLOC109 + RLOC13 + RLOC31 + RLOC33 + RLOC62 + RLOC69 + RLOC65 + RLOC72 + max(0, RLOC11 + RLOC17 + RLOC09 + RLOC15 + RLOC26 + RLOC41 + RLOC21 + RLOC36 + RLOC28 + RLOC43 + RLOC55 + RLOC83 + RLOC48 + RLOC76 + RLOC58 + RLOC86 + RLOC51 + RLOC79 + RLOC23 + RLOC38 + RENT07 + RENT31 + RENT01 + RENT25 + RENT09 + RENT33 + RENT03 + RENT27 + RLOC95 + RLOC115 + RLOC89 + RLOC113 + RLOC97 + RLOC121 + RLOC91 + RLOC117 - arr(RLOC11 + RLOC17 * 50 / 100) + arr(RLOC09 + RLOC15 * 60 / 100) + arr(RLOC26 + RLOC41 * 50 / 100) + arr(RLOC21 + RLOC36 * 60 / 100) + arr(RLOC55 + RLOC83 * 50 / 100) + arr(RLOC48 + RLOC76 * 60 / 100) + arr(RLOC28 + RLOC43 * 5263 / 10000) + arr(RLOC23 + RLOC38 * 625 / 1000) + arr(RLOC58 + RLOC86 * 5263 / 10000) + arr(RLOC51 + RLOC79 * 625 / 1000) + arr(RENT07 + RENT31 * 5263 / 10000) + arr(RENT01 + RENT25 * 625 / 1000) + arr(RENT09 + RENT33 * 5263 / 10000) + arr(RENT03 + RENT27 * 625 / 1000) + arr(RLOC95 + RLOC115 * 5263 / 10000) + arr(RLOC89 + RLOC113 * 625 / 1000) + arr(RLOC97 + RLOC121 * 5263 / 10000) + arr(RLOC91 + RLOC117 * 625 / 1000)) * 1 - V_CNR
IDRS2 = 1 - is_positive(IPMOND + INDTEFF) * IDRSANT + is_positive(ABADO) * ABADO + is_positive(ABAGU) * ABAGU * is_positive(IDRSANT) + IPHQANT2 * 1 - is_positive(IDRSANT) + is_positive(RE168 + TAX1649) * IAMD2 + is_positive(IPMOND + INDTEFF) * IDRS * 1 - is_positive(IPHQ2) + IPHQ2 * is_positive(IPHQ2)
CICAP = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY + CHRAPRES - AVFISCOPTER, min(IPCAPTAXTOT, BCICAP)))
IRB2 = IAMD2 + TAXASSUR + IPCAPTAXTOT + TAXLOY + CHRAPRES
IAMD2TH = positif_ou_nul(IBM23 - SEUIL_61) * IBM23
A10RENT = max(0, A10RENT1 * 1 - ART1731BIS + min(A10RENT1731 + 0, A10RENT1) * ART1731BIS) * 1 - V_CNR
CIRCMAVFT = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER, RCMAVFT * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO))))
HRBASE_I = IHAUTREVT * is_positive(IAMD1 + 1 - SEUIL_61)
IPCAPTAXT = IPCAPTAXTOT - CICAP
A10REEL = RLOG11 + RLOG13 + RLOG15 + RLOG18 + RLOG20 + RLOG23 + RLOG26 + RLOG27 + RLOG29 * 1 - ART1731BIS + min(RLOG111731 + 0, RLOG11) + min(RLOG131731 + 0, RLOG13) + min(RLOG151731 + 0, RLOG15) + min(RLOG181731 + 0, RLOG18) + min(RLOG201731 + 0, RLOG20) + min(RLOG231731 + 0, RLOG23) * ART1731BIS + RLOG33 + RLOG34 + RLOG36 + A10RSOC + arr(RSNCL) + A10RENT + RCELRREDLC + RCELRREDLD + RCELRREDLS + RCELRREDLT + RCELREPHW + RCELREPHV + RCELREPHD + RCELREPHH + RCELREPHB + RCELREPGX + RCELREPGS + RCELREPGP + RCELREPYL + RCELREPYF + RCELREPYE + RCELHJK + RCELNQ + RCELNBGL + RINVRED + RREPMEU + RCODIM + RCODIL + RILMIH + RILMIB + RILMJC + RILMJX + RILMPB + RILMOD + A10TOURSOC + RPATNAT1 + A10RFOR
VARIR61 = IBM23 + TAXASSUR + IPCAPTAXT + TAXLOY + IHAUTREVT + 0
A11RENT = max(0, A11RENT1 * 1 - ART1731BIS + min(A11RENT1731 + 0, A11RENT1) * ART1731BIS) * 1 - V_CNR
RENT05 = max(min(INVRETAV * 1 - INDPLAF + INVRETAVA * INDPLAF, RRIRENT - RENT01 - RENT02 - RENT03 - RENT04), 0) * 1 - V_CNR
CAPBASE_I = IPCAPTAXT * is_positive(IAMD1 + 1 - SEUIL_61)
A11REEL = RLOG16 + RLOG21 + RLOG24 * 1 - ART1731BIS + min(RLOG161731 + 0, RLOG16) + min(RLOG211731 + 0, RLOG21) + min(RLOG241731 + 0, RLOG24) * ART1731BIS + RLOG28 + RLOG30 + RLOG35 + RLOG37 + A11RSOC + arr(RSNCM) + RCELRREDLF + RCELRREDLZ + RCELRREDLX + RCELREPHG + RCELREPHA + RCELREPGW + RCELREPGL + RCELREPGK + RCELREPYK + RCELREPYD + RCELREPYC + RCELCOM + RCEL + RCELJP + RCELJBGL + RCODIE + RCODIN + RCODIV + RCODIJ + RILMIZ + RILMIA + RILMJI + RILMJW + RILMPC + RILMOC + RTOURREP * is_positive(INVLOCXN) + RTOUREPA * is_positive(INVLOCXV) + RPATNAT2 + A11RENT + A11RFOR
TXMARJ = max(is_positive(WTXMARJ - LIM_BAR1 * 1 - V_ANC_BAR + LIM_BAR1A * V_ANC_BAR) * TX_BAR1 * 1 - V_ANC_BAR + TX_BAR1A * V_ANC_BAR, max(is_positive(WTXMARJ - LIM_BAR2 * 1 - V_ANC_BAR + LIM_BAR2A * V_ANC_BAR) * TX_BAR2, max(is_positive(WTXMARJ - LIM_BAR3 * 1 - V_ANC_BAR + LIM_BAR3A * V_ANC_BAR) * TX_BAR3, max(is_positive(WTXMARJ - LIM_BAR4 * 1 - V_ANC_BAR + LIM_BAR4A * V_ANC_BAR) * TX_BAR4, max(is_positive(WTXMARJ - LIM_BAR5 * 1 - V_ANC_BAR + LIM_BAR5A * V_ANC_BAR) * TX_BAR5, 0))))) * 1 - is_positive(present(NRBASE) + present(NRINET) + present(IPTEFP) + present(IPTEFN) + present(PRODOM) + present(PROGUY)) * 1 - null(2 - V_REGCO) * is_positive(IDRS2 + IPQ1)
IRETS = max(0, min(min(COD8PA, IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT) * present(COD8PA) + IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT * 1 - present(COD8PA), IPSOUR * 1 - is_positive(RE168 + TAX1649)))
GGINET = ((GGIAIMP - 0 + EPAV + CICA + CIGE) if (V_REGCO == 2) else max(0, GGIAIMP - CIRCMAVFT + EPAV + CICA + CIGE)) if (is_positive(RE168 + TAX1649 + 0) == 0) else max(0, GGIAIMP - CIRCMAVFT)
A12RENT1 = RENT17 + RENT23 + RLOC105 + RLOC111 + RLOC67 + RLOC74 + max(0, RENT11 + RENT35 + RENT05 + RENT29 + RLOC60 + RLOC88 + RLOC53 + RLOC81 + RLOC99 + RLOC123 + RLOC93 + RLOC119 - arr(RENT11 + RENT35 * 5263 / 10000) + arr(RENT05 + RENT29 * 625 / 1000) + arr(RLOC60 + RLOC88 * 5263 / 10000) + arr(RLOC53 + RLOC81 * 625 / 1000) + arr(RLOC99 + RLOC123 * 5263 / 10000) + arr(RLOC93 + RLOC119 * 625 / 1000)) * 1 - V_CNR
DIAVF2 = BCIGA + IPRECH + IPCHER + IPELUS + RCMAVFT + DIREPARGNE + COD3VE + COD3UV * 1 - is_positive(RE168 + TAX1649) + CIRCMAVFT * is_positive(RE168 + TAX1649)
ICREREVET = max(0, min(IAD11 + ITP - CIRCMAVFT - IRETS - min(IAD11, CRCFA), min(ITP, CREREVET)))
CRDIE = max(0, min(IRB - REI - AVFISCOPTER - CIRCMAVFT - IRETS, min(IAD11 - CIRCMAVFT - IRETS, CRCFA) * 1 - is_positive(RE168 + TAX1649)))
CIGLO = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET, ICIGLO))
LIG2305 = is_positive(DIAVF2) * LIG1 * LIG2
A12RENT = max(0, A12RENT1 * 1 - ART1731BIS + min(A12RENT1731 + 0, A12RENT1) * ART1731BIS) * 1 - V_CNR
CICULTUR = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - REI - IRETS - CRDIE - ICREREVET - CIGLO, min(IAD11 + ITP + TAXASSUR + TAXLOY + IPCAPTAXTOT + CHRAPRES, BCIAQCUL)))
LIGCRED1 = is_positive(REGCI + LIGPVETR + LIGCICAP + LIGREGCI + LIGCI8XV + LIGCIGLO + 0) * 1 - is_positive(IPSOUR + LIGCULTURE + LIGMECENAT + LIGCORSE + LIG2305 + LIGEMPLOI + LIGCI2CK + LIGBPLIB + LIGCIGE + LIGDEVDUR + LIGCICA + LIGCIGARD + LIG82 + LIGPRETUD + LIGSALDOM + LIGCIFORET + LIGHABPRIN + LIGCREFAM + LIGCREAPP + LIGCREBIO + LIGPRESINT + LIGCREPROSP + LIGINTER + LIGRESTAU + LIGCONGA + LIGMETART + LIGCREFORM + LIGLOYIMP + LIGVERSLIB + LIGCITEC + 0)
CI8XV = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET, ICI8XV))
CI8XFH = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET - CI8XV, ICI8XFH))
CRDIE2 = CRDIE + 0
LIGCRED3 = is_positive(REGCI + LIGPVETR + LIGCICAP + LIGREGCI + LIGCI8XV + LIGCIGLO + 0) * is_positive(IPSOUR + LIGCULTURE + LIGMECENAT + LIGCORSE + LIG2305 + LIGEMPLOI + LIGCI2CK + LIGBPLIB + LIGCIGE + LIGDEVDUR + LIGCICA + LIGCIGARD + LIG82 + LIGPRETUD + LIGSALDOM + LIGCIFORET + LIGHABPRIN + LIGCREFAM + LIGCREAPP + LIGCREBIO + LIGPRESINT + LIGCREPROSP + LIGINTER + LIGRESTAU + LIGCONGA + LIGMETART + LIGCREFORM + LIGLOYIMP + LIGVERSLIB + LIGCITEC + 0)
A12REEL = A12RFOR + A12RRESTIMO + RLOG25 * 1 - ART1731BIS + min(RLOG251731 + 0, RLOG25) * ART1731BIS + RLOG31 * 1 - ART1731BIS + RLOG38 * 1 - ART1731BIS + RTOURREP * is_positive(COD7UY) + RTOUREPA * is_positive(COD7UZ) + arr(RSNCN + RSNCQ) + RCELRREDMG + RCELRREDMH + RCELREPGV + RCELREPGJ + RCELREPYJ + RCELREPYB + RCELREPYI + RCELREPYA + RCELJOQR + RCEL2012 + RCELFD + RCELFABC + RCODIF + RCODIG + RCODID + RILMJV + RILMJS + RCODJU + RILMPD + RILMOB + RPATNAT3 + A12RSOC + A12RENT
CIGPA = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR, BCIGA))
LIGCRED2 = 1 - is_positive(REGCI + LIGPVETR + LIGCICAP + LIGREGCI + LIGCI8XV + LIGCIGLO + 0) * is_positive(IPSOUR + LIGCULTURE + LIGMECENAT + LIGCORSE + LIG2305 + LIGEMPLOI + LIGCI2CK + LIGBPLIB + LIGCIGE + LIGDEVDUR + LIGCICA + LIGCIGARD + LIG82 + LIGPRETUD + LIGSALDOM + LIGCIFORET + LIGHABPRIN + LIGCREFAM + LIGCREAPP + LIGCREBIO + LIGPRESINT + LIGCREPROSP + LIGINTER + LIGRESTAU + LIGCONGA + LIGMETART + LIGCREFORM + LIGLOYIMP + LIGVERSLIB + LIGCITEC + 0)
CIDONENTR = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - REI - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA, BCIDONENTR))
LIG109 = is_positive(IPSOUR + REGCI + LIGPVETR + LIGCULTURE + LIGMECENAT + LIGCORSE + LIG2305 + LIGEMPLOI + LIGCI2CK + LIGCICAP + LIGCI8XV + LIGCIGLO + LIGREGCI + LIGBPLIB + LIGCIGE + LIGDEVDUR + LIGCICA + LIGCIGARD + LIG82 + LIGPRETUD + LIGSALDOM + LIGCIFORET + LIGHABPRIN + LIGCREFAM + LIGCREAPP + LIGCREBIO + LIGPRESINT + LIGCREPROSP + LIGINTER + LIGRESTAU + LIGCONGA + LIGMETART + LIGCREFORM + LIGLOYIMP + LIGVERSLIB + LIGCITEC + INDLIGPPE) * LIG1 * LIG2
CICORSE = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IPPRICORSE - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR, CIINVCORSE + IPREPCORSE))
REPCORSE = abs(CIINVCORSE + IPREPCORSE - CICORSE)
IAVF = IRE - EPAV + CICORSE + CICULTUR + CIGPA + CIRCMAVFT
CIRECH = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR - CICORSE, IPCHER))
CICORSEAVIS = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IPPRICORSE - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR, CIINVCORSE + IPREPCORSE)) + CICORSENOW
REPRECH = abs(IPCHER - CIRECH)
LIGREPCORSE = is_positive(REPCORSE) * LIG1 * LIG2
CICOMPEMPL = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR - CICORSE - CIRECH, COD8UW))
IAVF2 = CIDIREPARGNE + IPRECH + CIRECH + IPELUS + CIRCMAVFT + CIGPA + CIEXCEDENT + 0 * 1 - is_positive(RE168 + TAX1649) + CIRCMAVFT * is_positive(RE168 + TAX1649)
REPCICE = abs(COD8UW - CICOMPEMPL)
LIGREPRECH = is_positive(REPRECH) * LIG1 * LIG2
INE = CIRCMAVFT + IRETS + min(max(0, IAD11 - CIRCMAVFT - IRETS), CRCFA) + ICREREVET + CIGLO + CICULTUR + CIGPA + CIDONENTR + CICORSE + CIRECH + CICOMPEMPL * 1 - is_positive(RE168 + TAX1649)
LIGREPCICE = is_positive(REPCICE) * LIG1 * LIG2
IRECR = abs(min(0, IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR - CICORSE - CIRECH - CICOMPEMPL))
AGRECITOT = INE + IRE + CICAP + CICHR
CIEMPLOI = CICOMPEMPL + COD8TL * 1 - is_positive(RE168 + TAX1649)
IAVFGP = IAVF2 + CREFAM + CREAPP
IAN = max(0, IRB - AVFISCOPTER + CIRCMAVFT - IRETS - min(max(0, IAD11 - CIRCMAVFT - IRETS), CRCFA) - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR - CICORSE - CIRECH - CICOMPEMPL * 1 - is_positive(RE168 + TAX1649) + min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(IPCAPTAXTOT + 0, max(0, INE - IRB + AVFISCOPTER - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)))) + min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - min(IPCAPTAXTOT + 0, max(0, INE - IRB + AVFISCOPTER - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)))) - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)))))
IMPTHNET = max(0, IRB * positif_ou_nul(IRB - SEUIL_61) - INE - IRE * positif_ou_nul(IRB * positif_ou_nul(IRB - SEUIL_61) - INE - IRE - SEUIL_12)) * 1 - V_CNR
AGRECI = max(0, INE + IRE + CICAP + CICHR - AGREPPE)
IAVT = IRE - EPAV - CICA + min(IRB, IPSOUR + CRCFA) + min(max(0, IAN - IRE), BCIGA * 1 - is_positive(RE168 + TAX1649))
IAR = min(0, IAN + AVFISCOPTER - IRE) + max(0, IAN + AVFISCOPTER - IRE)
LIGIRECR = is_positive(IRECR) * LIG1 * LIG2
IARD = IAR - IAR_A
IAVT2 = IAVT + CICA
IRN = min(0, IAN + AVFISCOPTER - IRE) + max(0, IAN + AVFISCOPTER - IRE) * is_positive(IAMD1 + 1 - SEUIL_61)
NMAJLOY3 = max(0, MAJO1758ALOY + arr(max(0, TAXLOY + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT)) * COPETO / 100) * is_positive(null(CMAJ - 10) + null(CMAJ - 17)) + FLAG_TRTARDIF * MAJOLO17_2TARDIF_D + FLAG_TRTARDIF_F * is_positive(PROPLOY_A) * MAJOLO17_2TARDIF_P + 1 - is_positive(PROPLOY_A) * MAJOLO17_2TARDIF_D - FLAG_TRTARDIF_F * 1 - is_positive(PROPLOY_A) * is_positive(FLAG_RECTIF) * MAJOLO17_2TARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJOLO17_2TARDIF_A)
HRBASE_N = arr(max(IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
NMAJLOY1 = max(0, MAJO1728LOY + arr(max(0, TAXLOY - min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - IPCAPTAXT)) + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT)) * COPETO / 100) + FLAG_TRTARDIF * MAJOLOYTARDIF_D1 + FLAG_TRTARDIF_F * is_positive(PROPLOY_A) * MAJOLOYTARDIF_P1 + 1 - is_positive(PROPLOY_A) * MAJOLOYTARDIF_D1 - FLAG_TRTARDIF_F * 1 - is_positive(PROPLOY_A) * is_positive(FLAG_RECTIF) * MAJOLOYTARDIF_R1 + 1 - is_positive(FLAG_RECTIF) * MAJOLOYTARDIF_A1)
LIGNMAJLOY3 = TYPE2 * is_positive(NMAJLOY3)
IRBASE_I = IRN - IRANT * is_positive(IRN + 1 - SEUIL_12)
BINRIR = max(0, IRN - IRANT) + max(0, TAXASSUR - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRN - IRANT)) + max(0, IPCAPTAXT - min(IPCAPTAXT + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR)) + min(0, IRN - IRANT + TAXASSUR)) + max(0, TAXLOY - min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - IPCAPTAXT)) + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT)) + max(0, IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY))
TAXABASE = arr(max(TAXASSUR + min(0, IRN - IRANT), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
LIG_REPORT = is_positive(LIGRNIDF + sum([LIGRNIDF0, LIGRNIDF1, LIGRNIDF2, LIGRNIDF3, LIGRNIDF4, LIGRNIDF5]) + LIGDEFBA + LIGDRFRP + LIG3250 + LIGIRECR + LIGDRCVM + LIGDLMRN + LIGBNCDF + sum([LIGMIBDREPV + LIGMBDREPNPV + LIGSPEDREPV + LIGSPDREPNPV, LIGMIBDREPC + LIGMBDREPNPC + LIGSPEDREPC + LIGSPDREPNPC, LIGMIBDREPP + LIGMBDREPNPP + LIGSPEDREPP + LIGSPDREPNPP]) + LIGLOCNEUF + sum([LIGLOCNEUF1, LIGLOCNEUF2, LIGLOCNEUF3, LIGLOCNEUF4, LIGLOCNEUF5, LIGLOCNEUF6]) + LIGPATNATR + LIGRDUFLOTOT + LIGRPINELTOT + LIGRCELFD + LIGRCELFABC + LIGRCEL2012 + LIGRCELJBGL + LIGRCELJOQR + LIGRCELJP + LIGRCEL + LIGRCELNBGL + LIGRCELCOM + LIGRCELNQ + LIGRCELHJK + LIGRCELHNO + LIGRCELHLM + LIGRRCEL1 + LIGRRCEL2 + LIGRRCEL3 + LIGRRCEL4 + LIGRCODOU + LIGRCODJT + LIGRCODJU + LIGRLOCIDFG + LIGREPLOCIE + LIGNEUV + LIGRNEUV + LIGVIEU + LIGCOMP01 + LIGREPQKG + LIGREPQNH + LIGREPQUS + LIGREPQWB + LIGREPMMQE + LIGREPLI + LIGREPMC + LIGREPKU + LIGREPLH + LIGREPMB + LIGREPKT + LIGREPQV + LIGREPQO + LIGREPQP + LIGREPQR + LIGREPQF + LIGREPQG + LIGREPQI + LIGREPPAK + LIGREPPBL + LIGREPPDO + LIGREPPEK + LIGREPPFL + LIGREPPHO + LIGREPPIZ + LIGREPPJA + LIGREPPLB + LIGREPTB + LIGREPPM + LIGREPPN + LIGREPPO + LIGREPPP + LIGREPPR + LIGREPPS + LIGREPPT + LIGREPPU + LIGREPPW + LIGREPPX + LIGREPPY + LIGREPRG + LIGREPRI + LIGREPRM + LIGREPRC + LIGREPRR + LIGREPRUP + LIGREPRVQ + LIGREPRWR + LIGREPRYT + LIGREPNW + LIGREPSA + LIGREPSB + LIGREPSC + LIGREPSE + LIGREPSF + LIGREPSG + LIGREPSH + LIGREPSJ + LIGREPSM + LIGREPSU + LIGREPSV + LIGREPSW + LIGREPSY + LIGREPDOMOUT + LIGPME3 + LIGPME2 + LIGPME1 + LIGPMECU + LIGRSN + LIGRSN2 + LIGRSN1 + LIGRSN0 + LIGPLAFRSN + LIGPLAFRSN4 + LIGPLAFRSN3 + LIGREPDON + LIGREPDONR + LIGREPDONR1 + LIGREPDONR2 + LIGREPDONR3 + LIGREPDONR4 + LIGREPOU + LIGREP7PA + LIGREP7PB + LIGREP7PC + LIGREP7PD + LIGREP7PE + LIGREPDOM + LIGREPNEUV + LIGREPCODJT + LIGREPLOCNT + LIGRESIREP + LIGREPMEU + LIGREPREPAR + LIGLOCRES + LIGDFRCM + LIGPME + LIGREPCORSE + LIGREPRECH + LIGREPCICE + LIGDEFPLOC + LIGFOREST + LIGNFOREST + LIGREP7UP + LIGREP7UA + LIGREP7UT + LIGREP7UB) * LIG2
LIGNMAJLOY1 = TYPE2 * is_positive(NMAJLOY1)
LOYBASE = arr(max(TAXLOY + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
NMAJPCAP3 = max(0, MAJO1758APCAP + arr(max(0, IPCAPTAXT + min(0, IRN - IRANT + TAXASSUR)) * COPETO / 100) * is_positive(null(CMAJ - 10) + null(CMAJ - 17)) + FLAG_TRTARDIF * MAJOCP17_2TARDIF_D)
LOYBASE_N = arr(max(TAXLOY + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
NMAJCHR3 = max(0, MAJO1758ACHR + arr(max(0, IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY)) * COPETO / 100) * is_positive(null(CMAJ - 10) + null(CMAJ - 17)) + FLAG_TRTARDIF * MAJOHR17_2TARDIF_D + FLAG_TRTARDIF_F * is_positive(PROPHR_A) * MAJOHR17_2TARDIF_P + 1 - is_positive(PROPHR_A) * MAJOHR17_2TARDIF_D - FLAG_TRTARDIF_F * 1 - is_positive(PROPHR_A) * is_positive(FLAG_RECTIF) * MAJOHR17_2TARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJOHR17_2TARDIF_A)
VAR9YIIR = arr(ACODELAISINR * BINRIR / BINRIR + BINRPS)
CHRBASE = arr(max(IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
BTO = max(0, IRN - IRANT) * is_positive(IAMD1 + 1 - SEUIL_61)
NMAJPCAP1 = max(0, MAJO1728PCAP + arr(max(0, IPCAPTAXT - min(IPCAPTAXT + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR)) + min(0, IRN - IRANT + TAXASSUR)) * COPETO / 100) + FLAG_TRTARDIF * MAJOCAPTARDIF_D1 + FLAG_TRTARDIF_F * MAJOCAPTARDIF_D1 - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJOCAPTARDIF_R1 + 1 - is_positive(FLAG_RECTIF) * MAJOCAPTARDIF_A1)
MAJTXLOY1 = 1 - is_positive(V_NBCOD1728LOY) * 1 - is_positive(CMAJ) * is_positive(NMAJLOY1) * TXPF1728LOY + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728LOY) * -1
NMAJCHR1 = max(0, MAJO1728CHR + arr(max(0, IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY)) * COPETO / 100) + FLAG_TRTARDIF * MAJOHRTARDIF_D1 + FLAG_TRTARDIF_F * is_positive(PROPIR_A) * MAJOHRTARDIF_P1 + 1 - is_positive(PROPIR_A) * MAJOHRTARDIF_D1 - FLAG_TRTARDIF_F * 1 - is_positive(PROPIR_A) * is_positive(FLAG_RECTIF) * MAJOHRTARDIF_R1 + 1 - is_positive(FLAG_RECTIF) * MAJOHRTARDIF_A1)
NMAJTAXA3 = max(0, MAJO1758ATAXA + arr(max(0, TAXASSUR + min(0, IRN - IRANT)) * COPETO / 100) * is_positive(null(CMAJ - 10) + null(CMAJ - 17)) + FLAG_TRTARDIF * MAJOTA17_2TARDIF_D)
MAJTXLOY3 = is_positive(NMAJLOY3) * 10
LIGNMAJCHR3 = TYPE2 * is_positive(NMAJCHR3)
NMAJ3 = max(0, MAJO1758AIR + arr(BTO * COPETO / 100) * is_positive(null(CMAJ - 10) + null(CMAJ - 17)) + FLAG_TRTARDIF * MAJOIR17_2TARDIF_D + FLAG_TRTARDIF_F * is_positive(PROPIR_A) * MAJOIR17_2TARDIF_P + 1 - is_positive(PROPIR_A) * MAJOIR17_2TARDIF_D - FLAG_TRTARDIF_F * 1 - is_positive(PROPIR_A) * is_positive(FLAG_RECTIF) * MAJOIR17_2TARDIF_R + 1 - is_positive(FLAG_RECTIF) * MAJOIR17_2TARDIF_A)
LIGNMAJPCAP1 = TYPE2 * is_positive(NMAJPCAP1)
MAJTXPCAP3 = is_positive(NMAJPCAP3) * 10
LIGNMAJPCAP3 = TYPE2 * is_positive(NMAJPCAP3)
LIGCHR17281 = TYPE2 * is_positive(NMAJCHR1)
CAPBASE_N = arr(max(IPCAPTAXT + min(0, IRN - IRANT + TAXASSUR), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
IR9YI = arr(VAR9YIIR * max(0, IRN - IRANT) / BINRIR)
TAXA9YI = is_positive(IPCAPTAXT + TAXLOY + IHAUTREVT) * arr(VAR9YIIR * max(0, TAXASSUR - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRN - IRANT)) / BINRIR) + 1 - is_positive(IPCAPTAXT + TAXLOY + IHAUTREVT) * max(0, VAR9YIIR - IR9YI)
IRBASE_N = IRN - IRANT * 1 - is_positive(IRN - IRANT + TAXABASE_IRECT + CAPBASE_IRECT + HRBASE_IRECT) + IAN - min(IAN, IRE) * is_positive(IRN - IRANT + TAXABASE_IRECT + CAPBASE_IRECT + HRBASE_IRECT)
PCAPBASE = arr(max(IPCAPTAXT + min(0, IRN - IRANT + TAXASSUR), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
LIGNMAJCHR1 = TYPE2 * is_positive(NMAJCHR1)
VAR9YIPS = max(0, ACODELAISINR - VAR9YIIR)
NMAJ1 = max(0, MAJO1728IR + arr(BTO * COPETO / 100) + FLAG_TRTARDIF * MAJOIRTARDIF_D1 + FLAG_TRTARDIF_F * is_positive(PROPIR_A) * MAJOIRTARDIF_P1 + 1 - is_positive(PROPIR_A) * MAJOIRTARDIF_D1 - FLAG_TRTARDIF_F * 1 - is_positive(PROPIR_A) * is_positive(FLAG_RECTIF) * MAJOIRTARDIF_R1 + 1 - is_positive(FLAG_RECTIF) * MAJOIRTARDIF_A1)
CAP9YI = is_positive(TAXLOY + IHAUTREVT) * arr(VAR9YIIR * max(0, IPCAPTAXT - min(IPCAPTAXT + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR)) + min(0, IRN - IRANT + TAXASSUR)) / BINRIR) + 1 - is_positive(TAXLOY + IHAUTREVT) * max(0, VAR9YIIR - IR9YI - TAXA9YI)
NMAJTAXA1 = max(0, MAJO1728TAXA + arr(max(0, TAXASSUR - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRN - IRANT)) * COPETO / 100) + FLAG_TRTARDIF * MAJOTAXATARDIF_D1 + FLAG_TRTARDIF_F * MAJOTAXATARDIF_D1 - FLAG_TRTARDIF_F * is_positive(FLAG_RECTIF) * MAJOTAXATARDIF_R1 + 1 - is_positive(FLAG_RECTIF) * MAJOTAXATARDIF_A1)
LIGNMAJTAXA1 = TYPE2 * is_positive(NMAJTAXA1)
TAXABASE_N = arr(max(TAXASSUR + min(0, IRN - IRANT), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
IRNIN = IRN - IRANT * is_positive(IRN - IRANT)
MAJTXCHR3 = is_positive(NMAJCHR3) * 10
IRNIN_INR = max(0, IRN - IRANT - IR9YI) * is_positive(IRN - IRANT)
LIGPCAP17281 = TYPE2 * is_positive(NMAJPCAP1)
LIGNMAJTAXA3 = TYPE2 * is_positive(NMAJTAXA3)
BTOINR = max(0, IRN - IR9YI - IRANT) * is_positive(IAMD1 + 1 - SEUIL_61)
IRNN = IRNIN
LIG_172810 = TYPE2 * is_positive(NMAJ1)
MAJTXTAXA3 = is_positive(NMAJTAXA3) * 10
LIGTAXA17281 = TYPE2 * is_positive(NMAJTAXA1)
MAJTXPCAP1 = 1 - is_positive(V_NBCOD1728CAP) * 1 - is_positive(CMAJ) * is_positive(NMAJPCAP1) * TXPF1728CAP + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728CAP) * -1
CS9YP = is_positive(RDSN + PRS + CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * CSG - CSGIM / BINRPS) + 1 - is_positive(RDSN + PRS + CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * VAR9YIPS
LIG_NMAJ3 = TYPE2 * is_positive(NMAJ3)
MAJTXCHR1 = 1 - is_positive(V_NBCOD1728CHR) * 1 - is_positive(CMAJ) * is_positive(NMAJCHR1) * TXPF1728 + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728CHR) * -1
MAJTX1 = 1 - is_positive(V_NBCOD1728) * 1 - is_positive(CMAJ) * is_positive(NMAJ1 + NMAJTAXA1 + NMAJPCAP1 + NMAJLOY1 + NMAJCHR1) * TXPF1728 + is_positive(CMAJ) * COPETO + is_positive(V_NBCOD1728) * -1
PTOTPCAP = arr(max(0, IPCAPTAXT - min(IPCAPTAXT + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR)) + min(0, IRN - IRANT + TAXASSUR)) * COPETO / 100) + arr(max(0, IPCAPTAXT - min(IPCAPTAXT + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR)) + min(0, IRN - IRANT + TAXASSUR)) * COPETO / 100) * is_positive(null(CMAJ - 10) + null(CMAJ - 17)) + arr(max(0, IPCAPTAXT - min(IPCAPTAXT + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR)) + min(0, IRN - IRANT + TAXASSUR) - CAP9YI) * TXINT / 100)
LIG_NMAJ1 = TYPE2 * is_positive(NMAJ1)
PTOIR = arr(BTO * COPETO / 100) + arr(BTO * COPETO / 100) * is_positive(null(CMAJ - 10) + null(CMAJ - 17)) + arr(BTOINR * TXINT / 100)
MAJTX3 = is_positive(NMAJ3) * 10
B1507MAJO1 = IRNIN * is_positive(NMAJ1) + TAXASSUR * is_positive(NMAJTAXA1) + IPCAPTAXT * is_positive(NMAJPCAP1) + TAXLOY * is_positive(NMAJLOY1) + IHAUTREVT * is_positive(NMAJCHR1)
PTOTAXA = arr(max(0, TAXASSUR - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRN - IRANT)) * COPETO / 100) + arr(max(0, TAXASSUR - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRN - IRANT)) * COPETO / 100) * is_positive(null(CMAJ - 10) + null(CMAJ - 17)) + arr(max(0, TAXASSUR - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRN - IRANT) - TAXA9YI) * TXINT / 100)
LOY9YI = is_positive(IHAUTREVT) * arr(VAR9YIIR * max(0, TAXLOY - min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - IPCAPTAXT)) + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT)) / BINRIR) + 1 - is_positive(IHAUTREVT) * max(0, VAR9YIIR - IR9YI - TAXA9YI - CAP9YI)
PTOTLOY = arr(max(0, TAXLOY - min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - IPCAPTAXT)) + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT)) * COPETO / 100) + arr(max(0, TAXLOY - min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - IPCAPTAXT)) + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT)) * COPETO / 100) * is_positive(null(CMAJ - 10) + null(CMAJ - 17)) + arr(max(0, TAXLOY - min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - IPCAPTAXT)) + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT) - LOY9YI) * TXINT / 100)
PIR = PTOIR * positif_ou_nul(IAMD1 - SEUIL_61)
IAVIMBIS = IRB + PIR
B1507INR = IRNIN_INR + TAXABASE + PCAPBASE + LOYBASE + CHRBASE
RD9YP = is_positive(PRS + CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * RDSN - CRDSIM / BINRPS) + 1 - is_positive(PRS + CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP)
B1507MAJO3 = IRNIN * is_positive(NMAJ3) + TAXASSUR * is_positive(NMAJTAXA3) + IPCAPTAXT * is_positive(NMAJPCAP3) + TAXLOY * is_positive(NMAJLOY3) + IHAUTREVT * is_positive(NMAJCHR3)
TAXABASE_INR = arr(max(TAXASSUR - TAXA9YI + min(0, IRN - IRANT), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
PTAXA = PTOTAXA
CHR9YI = max(0, VAR9YIIR - IR9YI - TAXA9YI - CAP9YI - LOY9YI)
PIRD = PIR * is_positive(5 - V_IND_TRAIT) + 1 - is_positive(5 - V_IND_TRAIT) * positif_ou_nul(IRN + PIR - SEUIL_12) + 1 - is_positive(IRN + PIR) - PIR_A * positif_ou_nul(PIR_A - SEUIL_12) + 1 - is_positive(PIR_A)
PTOTCHR = arr(max(0, IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY)) * COPETO / 100) + arr(max(0, IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY)) * COPETO / 100) * is_positive(null(CMAJ - 10) + null(CMAJ - 17)) + arr(max(0, IHAUTREVT + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY) - CHR9YI) * TXINT / 100)
PTAXLOY = PTOTLOY
B1507MAJO4 = IRNIN * is_positive(NMAJ4) + TAXASSUR * is_positive(NMAJTAXA4) + IPCAPTAXT * is_positive(NMAJPCAP4) + TAXLOY * is_positive(NMAJLOY4) + IHAUTREVT * is_positive(NMAJCHR4)
PCAPBASE_INR = arr(max(IPCAPTAXT - CAP9YI + min(0, IRN - IRANT + TAXASSUR), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
PS9YP = is_positive(CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * PRS - PRSPROV / BINRPS) + 1 - is_positive(CVNSALC + CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP)
PTOCSG = arr(max(0, CSG - CSGIM) * COPETO / 100) + arr(max(0, CSG - CSGIM - CS9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
PSBASE_INR = max(0, PRS - PRSPROV - PS9YP)
PPCAP = PTOTPCAP
PTOT = PIR
IAVIMO = max(0, max(ID11 - ADO1, IMI) - RED) + ITP + REI + PIR * V_CR2
LIG3 = is_positive(is_positive(CMAJ + 0) + positif_ou_nul(MAJTX1 - 40) + positif_ou_nul(MAJTX4 - 40) + positif_ou_nul(MAJTXPCAP1 - 40) + positif_ou_nul(MAJTXPCAP4 - 40) + positif_ou_nul(MAJTXLOY1 - 40) + positif_ou_nul(MAJTXLOY4 - 40) + positif_ou_nul(MAJTXCHR1 - 40) + positif_ou_nul(MAJTXCHR4 - 40) + positif_ou_nul(MAJTXC1 - 40) + positif_ou_nul(MAJTXC4 - 40) + positif_ou_nul(MAJTXCVN1 - 40) + positif_ou_nul(MAJTXCVN4 - 40) + positif_ou_nul(MAJTXCDIS1 - 40) + positif_ou_nul(MAJTXCDIS4 - 40) + positif_ou_nul(MAJTXGLO1 - 40) + positif_ou_nul(MAJTXGLO4 - 40) + positif_ou_nul(MAJTXRSE11 - 40) + positif_ou_nul(MAJTXRSE14 - 40) + positif_ou_nul(MAJTXRSE51 - 40) + positif_ou_nul(MAJTXRSE54 - 40) + positif_ou_nul(MAJTXRSE21 - 40) + positif_ou_nul(MAJTXRSE24 - 40) + positif_ou_nul(MAJTXRSE31 - 40) + positif_ou_nul(MAJTXRSE34 - 40) + positif_ou_nul(MAJTXRSE41 - 40) + positif_ou_nul(MAJTXRSE44 - 40) + positif_ou_nul(MAJTXTAXA4 - 40))
GGIDRS = IDOM11 + ITP + REI + PIR
CSBASE_INR = max(0, CSG - CSGIM - CS9YP)
IRPROV = min(IRANT, IAR + PIR) * is_positive(IRANT)
IRNET2 = IAR + PIR - IRANT * 1 - INDTXMIN * 1 - INDTXMOY + min(0, IAR + PIR - IRANT) * INDTXMIN + INDTXMOY + max(0, IAR + PIR - IRANT) * INDTXMIN * is_positive(IAVIMBIS - SEUIL_TXMIN) + INDTXMOY * is_positive(IAVIMO - SEUIL_TXMIN)
PTOTD = PIRD
CVN9YP = is_positive(CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * CVNSALC - COD8YT / BINRPS) + 1 - is_positive(CDIS + CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP)
PTOCVN = arr(max(0, CVNSALC - COD8YT) * COPETO / 100) + arr(max(0, CVNSALC - COD8YT - CVN9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
LOYBASE_INR = arr(max(TAXLOY - LOY9YI + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
PCSG = PTOCSG
CSNET = max(0, CSGC + PCSG - CICSG - CSGIM)
CHRBASE_INR = arr(max(IHAUTREVT - CHR9YI + min(0, IRN - IRANT + TAXASSUR + IPCAPTAXT + TAXLOY), 0)) * is_positive(IAMD1 + 1 - SEUIL_61)
IRD = IRN * is_positive(5 - V_IND_TRAIT) + 1 - is_positive(5 - V_IND_TRAIT) * positif_ou_nul(IRN + PIR - SEUIL_12) + 1 - is_positive(IRN + PIR)
IAVIM2 = IRB + PTOT
PHAUTREV = PTOTCHR
PTORDS = arr(max(0, RDSN - CRDSIM) * COPETO / 100) + arr(max(0, RDSN - CRDSIM - RD9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
RDBASE_INR = max(0, RDSN - CRDSIM - RD9YP)
CSNETEMP = CSNET * INDSEUIL61
PTOPRS = arr(max(0, PRS - PRSPROV) * COPETO / 100) + arr(max(0, PRS - PRSPROV - PS9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
CVNBASE_INR = max(0, CVNSALC - COD8YT - CVN9YP)
MONTNETCS = PRS + PTOPRS * 1 - is_positive(APPLI_COLBERT)
PCSGD = PCSG * CSREC - PCSG_A * CSRECA
NAPCSAVIM = CSG + PCSG
CDIS9YP = is_positive(CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * CDIS - CDISPROV / BINRPS) + 1 - is_positive(CGLOA + RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP)
PPRS = PTOPRS
TAXANEG = min(0, TAXASSUR + PTAXA - min(TAXASSUR + PTAXA + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRNET2))
PTOCDIS = arr(max(0, CDIS - CDISPROV) * COPETO / 100) + arr(max(0, CDISC - CDISPROV - CDIS9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
PCAPTAXNET = is_positive(IPCAPTAXT) * max(0, IPCAPTAXT + PPCAP - min(IPCAPTAXT + PPCAP, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA)) + min(0, TAXANEG))
IRESTITIR = abs(min(0, IRN + PIR + NRINET + IMPRET + RASAR + TAXASSUR + PTAXA - min(TAXASSUR + PTAXA + 0, max(0, INE - IRB + AVFISCOPTER)) + IPCAPTAXT + PPCAP - min(IPCAPTAXT + PPCAP, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA)) + TAXLOY + PTAXLOY - min(TAXLOY + PTAXLOY, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA - IPCAPTAXT - PPCAP)) + IHAUTREVT + PHAUTREV - min(IHAUTREVT + PHAUTREV, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA - IPCAPTAXT - PPCAP - TAXLOY - PTAXLOY))))
RPEN = PTOTD * is_positive(APPLI_ILIAD + APPLI_COLBERT)
IND_COLC = is_positive(BCSG) * is_positive(PCSG + CICSG + CSGIM) * 1 - INDCTX
TOTPENIR = PIR + PTAXA + PTAXLOY + PHAUTREV + PPCAP
NAPPSAVIM = PRS + PPRS
TAXNET = is_positive(TAXASSUR) * max(0, TAXASSUR + PTAXA - min(TAXASSUR + PTAXA + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRNET2))
GLO9YP = is_positive(RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * CGLOA - COD8YL / BINRPS) + 1 - is_positive(RSE1 + RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP)
PCVN = PTOCVN
NAPI = IRD + PIRD - IRANT + TAXASSUR + IPCAPTAXT + IHAUTREVT + TAXLOY + RASAR * V_CR2
PPRSD = PPRS * CSREC - PPRS_A * CSRECA
PRDS = PTORDS
PPEREST2A = is_positive(IRE) * is_positive(IRESTITIR) * max(0, min(PPETOTX - PPERSA, IRESTITIR))
INDCOLVN = is_positive(BCVNSAL) * is_positive(PCVN + COD8YT) * 1 - INDCTX
NAPCVNAVIM = CVNSALC + PCVN
CDISBASE_INR = max(0, CDIS - CDISPROV - CDIS9YP)
PCAPNEG = min(0, IPCAPTAXT + PPCAP - min(IPCAPTAXT + PPCAP, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA)) + min(0, TAXANEG))
IAVIM = IRB + PTOT + TAXASSUR + PTAXA + IPCAPTAXTOT + PPCAP + TAXLOY + PTAXLOY + CHRAPRES + PHAUTREV
IND_COLP = is_positive(BPRS) * is_positive(PPRS + CIPRS + PRSPROV) * 1 - INDCTX
IND_COLR = is_positive(BRDS) * is_positive(PRDS + CIRDS + CRDSIM) * 1 - INDCTX
CVNNET = max(0, CVNSALC + PCVN - COD8YT)
LIG2141 = null(IAN + RPEN - IAVT + TAXASSUR + IPCAPTAXT + TAXLOY + CHRAPRES - IRANT) * is_positive(IRANT) * 1 - is_positive(LIG2501) * null(V_IND_TRAIT - 4) * 1 - is_positive(NRINET + 0)
PCAPNET = null(NRINET + IMPRET + RASAR * V_CR2 + 0) * PCAPTAXNET + is_positive(NRINET + IMPRET + RASAR * V_CR2 + 0) * positif_ou_nul(IAMD1 - SEUIL_61) * PCAPTAXNET + 1 - positif_ou_nul(IAMD1 - SEUIL_61) * 0
PPEIMP2A = positif_ou_nul(PPEREST2A) * PPETOTX - PPERSA - PPEREST2A
LIGPCAPANT = APPLI_ILIAD * 1 - is_positive(20 - V_NOTRAIT) * is_positive(V_PCAPANT + LIGPCAPNET * is_positive(PCAPNET)) * 1 - is_positive(LIG2051) * TYPE2 * 1 - APPLI_OCEANS
RSE19YP = is_positive(RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * RSE1 - CSPROVYD / BINRPS) + 1 - is_positive(RSE2 + RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP)
RDNET = max(0, RDSC + PRDS - CIRDS - CRDSIM)
ZIG_PENAMONT = is_positive(PCSG + PRDS + PPRS + PCVN) * LIG2
NAPRDAVIM = RDSN + PRDS
PRSNET = max(0, PRSC + PPRS - CIPRS - PRSPROV)
REST = is_positive(IRE) * is_positive(IRESTITIR)
ZIG_PENATAUX = ZIG_PENAMONT * is_positive(NMAJC1 + NMAJR1 + NMAJP1 + NMAJCVN1) * LIG2
ARTREST = is_positive(REST) * max(0, min(CREARTS, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI))
IRESTIR = max(0, IRESTITIR - RECUMBISIR)
PCDIS = PTOCDIS
EMPREST = is_positive(REST) * max(0, min(COD8TL, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH - CI2CK))
TAXANET = null(NRINET + IMPRET + RASAR * V_CR2 + 0) * TAXNET + is_positive(NRINET + IMPRET + RASAR * V_CR2 + 0) * positif_ou_nul(IAMD1 - SEUIL_61) * TAXNET + 1 - positif_ou_nul(IAMD1 - SEUIL_61) * 0
EXCREST = is_positive(REST) * max(0, min(CIEXCEDENT, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH - CI2CK - COD8TL - CIDIREPARGNE - IPRECH))
VARIR61BIS = IBM23 + TAXASSUR + IPCAPTAXT + TAXLOY + IHAUTREVT + TOTPENIR + 0
CVNNETEMP = CVNNET * INDSEUIL61
FORREST = is_positive(REST) * max(0, min(CREFORMCHENT, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE))
AGRREST = is_positive(REST) * max(0, min(CICONGAGRI, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU))
APPREST = is_positive(REST) * max(0, min(CREAPP, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO))
LOIREST = is_positive(REST) * max(0, min(CILOYIMP, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB))
HABREST = is_positive(REST) * max(0, min(CIHABPRIN, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM))
SALREST = is_positive(REST) * max(0, min(CIADCRE, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET))
PRDSD = PRDS * CSREC - PRDS_A * CSRECA
PTOGLOA = arr(max(0, CGLOA - COD8YL) * COPETO / 100) + arr(max(0, CGLOA - COD8YL - GLO9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
APPIMP = positif_ou_nul(APPREST) * CREAPP - APPREST
LOYELEVNEG = min(0, TAXLOY + PTAXLOY - min(TAXLOY + PTAXLOY, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA - IPCAPTAXT - PPCAP)) + min(0, PCAPNEG))
RSE1BASE_INR = max(0, RSE1N - CSPROVYD - RSE19YP)
FAMREST = is_positive(REST) * max(0, min(CREFAM, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP))
BIOREST = is_positive(REST) * max(0, min(CREAGRIBIO, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP))
TECREST = is_positive(REST) * max(0, min(CITEC, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS))
TAXACUM = 1 - is_positive(IRESTITIR) * is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * 0 + 1 - is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * TAXANET
AIDREST = is_positive(REST) * max(0, min(CIGE, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR))
BAIREST = is_positive(REST) * max(0, min(CICA, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD))
SYNREST = is_positive(REST) * max(0, min(CISYND, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD))
ELUREST = is_positive(REST) * max(0, min(IPELUS, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA))
ZIGPENACDIS = is_positive(PCDIS) * is_positive(NMAJCDIS1) * LIG2
NAPCDISAVIM = CDIS + PCDIS
CHRNEG = min(0, IHAUTREVT + PHAUTREV + min(0, LOYELEVNEG))
DEPREST = is_positive(REST) * max(0, min(CIDEVDUR, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC))
PROREST = is_positive(REST) * max(0, min(CREPROSP, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER))
LIGTAXANT = APPLI_ILIAD * 1 - is_positive(20 - V_NOTRAIT) * is_positive(V_TAXANT + LIGTAXANET * is_positive(TAXANET)) * 1 - is_positive(LIG2051) * TYPE2 * 1 - APPLI_OCEANS
CHRNET = is_positive(IHAUTREVT) * max(0, IHAUTREVT + PHAUTREV + min(0, LOYELEVNEG))
SALIMP = positif_ou_nul(SALREST) * CIADCRE - SALREST
LOIIMP = positif_ou_nul(LOIREST) * CILOYIMP - LOIREST
PSNETEMP = PRSNET * INDSEUIL61
EMPIMP = positif_ou_nul(EMPREST) * COD8TL - EMPREST
GARREST = is_positive(REST) * max(0, min(CIGARD, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND))
GLOBASE_INR = max(0, CGLOA - COD8YL - GLO9YP)
INTREST = is_positive(REST) * max(0, min(CREINTERESSE, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS))
AGRIMP = positif_ou_nul(AGRREST) * CICONGAGRI - AGRREST
ARTIMP = positif_ou_nul(ARTREST) * CREARTS - ARTREST
ZIG_PEN17281 = ZIG_PENAMONT * is_positive(NMAJC1 + NMAJR1 + NMAJP1 + NMAJCVN1) * LIG2
LOYELEVNET = is_positive(LOYELEV) * max(0, TAXLOY + PTAXLOY - min(TAXLOY + PTAXLOY, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA - IPCAPTAXT - PPCAP)) + min(0, PCAPNEG))
EXCIMP = positif_ou_nul(EXCREST) * CIEXCEDENT - EXCREST
LIBREST = is_positive(REST) * max(0, min(AUTOVERSLIB, IRESTITIR - PPETOTX - PPERSA))
TAUREST = is_positive(REST) * max(0, min(CRERESTAU, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP))
SYNIMP = positif_ou_nul(SYNREST) * CISYND - SYNREST
INDCOL = is_positive(IND_COLC + IND_COLR + IND_COLP + INDCOLVN)
INDT = is_positive(IND_COLC + IND_COLR + IND_COLP + IND_COLS + IND_CTXC + IND_CTXR + IND_CTXP + IND_CTXS) * INDTRAIT
IRNETTER = max(0, IRNET2 + TAXASSUR + PTAXA - min(TAXASSUR + PTAXA + 0, max(0, INE - IRB + AVFISCOPTER)) - max(0, TAXASSUR + PTAXA - min(TAXASSUR + PTAXA + 0, max(0, INE - IRB + AVFISCOPTER)) + min(0, IRNET2)) + IPCAPTAXT + PPCAP - min(IPCAPTAXT + PPCAP, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA)) - max(0, IPCAPTAXT + PPCAP - min(IPCAPTAXT + PPCAP, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA)) + min(0, TAXANEG)) + TAXLOY + PTAXLOY - min(TAXLOY + PTAXLOY, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA - IPCAPTAXT - PPCAP)) - max(0, TAXLOY + PTAXLOY - min(TAXLOY + PTAXLOY, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA - IPCAPTAXT - PPCAP)) + min(0, PCAPNEG)) + IHAUTREVT + PHAUTREV - max(0, IHAUTREVT + PHAUTREV + min(0, LOYELEVNEG)))
FAMIMP = positif_ou_nul(FAMREST) * CREFAM - FAMREST
RECREST = is_positive(REST) * max(0, min(IPRECH, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH - CI2CK - COD8TL - CIDIREPARGNE))
IRNETBIS = max(0, IRNETTER - PIR * is_positive(SEUIL_12 - IRNETTER + PIR) * is_positive(SEUIL_12 - PIR) * positif_ou_nul(IRNETTER - SEUIL_12))
ROFREST = is_positive(REST) * max(0, min(CIFORET, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN))
PREREST = is_positive(REST) * max(0, min(CIPRETUD, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE))
PTORSE1 = arr(max(0, RSE1 - CIRSE1 - CSPROVYD) * COPETO / 100) + arr(max(0, RSE1 - CIRSE1 - CSPROVYD - RSE19YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
BAIIMP = positif_ou_nul(BAIREST) * CICA - BAIREST
RDNETEMP = RDNET * INDSEUIL61
RECIMP = positif_ou_nul(RECREST) * IPRECH - RECREST
PGLOA = PTOGLOA
ASSREST = is_positive(REST) * max(0, min(I2DH, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE))
DEPIMP = positif_ou_nul(DEPREST) * CIDEVDUR - DEPREST
ELUIMP = positif_ou_nul(ELUREST) * IPELUS - ELUREST
CDISNET = max(0, CDISC + PCDIS - CDISPROV)
PSIREST = is_positive(REST) * max(0, min(CRESINTER, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT))
TECIMP = positif_ou_nul(TECREST) * CITEC - TECREST
_2CKREST = is_positive(REST) * max(0, min(CI2CK, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH))
CORREST = is_positive(REST) * max(0, min(CICORSENOW, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH - CI2CK - COD8TL - CIDIREPARGNE - IPRECH - CIEXCEDENT))
ZIG_PENATX4 = ZIG_PENAMONT * is_positive(NMAJC4 + NMAJR4 + NMAJP4 + NMAJCVN4) * LIG2
FORIMP = positif_ou_nul(FORREST) * CREFORMCHENT - FORREST
EPAREST = is_positive(REST) * max(0, min(CIDIREPARGNE, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH - CI2CK - COD8TL))
GARIMP = positif_ou_nul(GARREST) * CIGARD - GARREST
ZIGPENACDIS4 = is_positive(PCDIS) * is_positive(NMAJCDIS4) * LIG2
RSE29YP = is_positive(RSE3 + RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * RSE2 - CSPROVRSE2 / BINRPS) + 1 - is_positive(RSE3 + RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP - RSE19YP)
ZIGR30 = is_positive(ZIG_PENATX4) * is_positive(R1649 + PREREV) * LIG2
TAUIMP = positif_ou_nul(TAUREST) * CRERESTAU - TAUREST
AIDIMP = positif_ou_nul(AIDREST) * CIGE - AIDREST
IND_COLD = is_positive(BCDIS) * is_positive(PCDIS + CDISPROV) * 1 - INDCTX
PCAPCUM = 1 - is_positive(IRESTITIR) * is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * 0 + 1 - is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * PCAPNET
INDGLOA = is_positive(BGLOA) * is_positive(PGLOA + COD8YL) * 1 - INDCTX
RECUMIR = is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * IRESTITIR + 1 - is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * IRESTITIR
CORIMP = positif_ou_nul(CORREST) * CICORSENOW - CORREST
HAUTREVNET = null(NRINET + IMPRET + RASAR * V_CR2 + 0) * CHRNET + is_positive(NRINET + IMPRET + RASAR * V_CR2 + 0) * positif_ou_nul(IAMD1 - SEUIL_61) * CHRNET + 1 - positif_ou_nul(IAMD1 - SEUIL_61) * 0
EPAIMP = positif_ou_nul(EPAREST) * CIDIREPARGNE - EPAREST
HABIMP = positif_ou_nul(HABREST) * CIHABPRIN - HABREST
BIOIMP = positif_ou_nul(BIOREST) * CREAGRIBIO - BIOREST
PREIMP = positif_ou_nul(PREREST) * CIPRETUD - PREREST
NAPGLOAVIM = CGLOA + PGLOA - COD8YL
PROIMP = positif_ou_nul(PROREST) * CREPROSP - PROREST
TAXLOYNET = null(NRINET + IMPRET + RASAR * V_CR2 + 0) * LOYELEVNET + is_positive(NRINET + IMPRET + RASAR * V_CR2 + 0) * positif_ou_nul(IAMD1 - SEUIL_61) * LOYELEVNET + 1 - positif_ou_nul(IAMD1 - SEUIL_61) * 0
RSE39YP = is_positive(RSE4 + RSE5 + BREGV) * arr(VAR9YIPS * RSE3 - CSPROVYG / BINRPS) + 1 - is_positive(RSE4 + RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP - RSE19YP - RSE29YP)
PTORSE2 = arr(max(0, RSE2 - CIRSE2 - CSPROVRSE2) * COPETO / 100) + arr(max(0, RSE2 - CIRSE2 - CSPROVRSE2 - RSE29YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
INTIMP = positif_ou_nul(INTREST) * CREINTERESSE - INTREST
LIBIMP = positif_ou_nul(LIBREST) * AUTOVERSLIB - LIBREST
TAXLOYCUM = 1 - is_positive(IRESTITIR) * is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * 0 + 1 - is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * TAXLOYNET
PSIIMP = positif_ou_nul(PSIREST) * CRESINTER - PSIREST
_2CKIMP = positif_ou_nul(_2CKREST) * CI2CK - _2CKREST
ZIGPENAGLO1 = is_positive(PGLOA) * is_positive(NMAJGLO1) * LIG2
CDISNETEMP = CDISNET * INDSEUIL61
ROFIMP = positif_ou_nul(ROFREST) * CIFORET - ROFREST
ASSIMP = positif_ou_nul(ASSREST) * I2DH - ASSREST
LIGLOYANT = APPLI_ILIAD * 1 - is_positive(20 - V_NOTRAIT) * is_positive(V_TAXLOYANT + LIGLOYNET * is_positive(TAXLOYNET)) * 1 - is_positive(LIG2051) * TYPE2 * 1 - APPLI_OCEANS
CGLOANET = max(0, CGLOA + PGLOA - COD8YL)
ZIGPENAGLO4 = is_positive(PGLOA) * is_positive(NMAJGLO4) * LIG2
PRSE1 = PTORSE1
INDTD = is_positive(IND_COLD + IND_CTXD) * INDTRAIT
ZIGNONR30 = is_positive(ZIG_PENATX4) * is_positive(1 - is_positive(R1649 + PREREV)) * LIG2
GLONETEMP = CGLOANET * INDSEUIL61
RSE3BASE_INR = max(0, RSE3N - CSPROVYG - RSE39YP)
PRSE2 = PTORSE2
RSE2BASE_INR = max(0, max(0, RSE8TV - CIRSE8TV - CSPROVYF) + max(0, RSE8SA - CIRSE8SA - CSPROVYN) - RSE29YP)
ZIGPENARSE2 = is_positive(PRSE2) * is_positive(NMAJRSE21) * LIG2
RSE49YP = is_positive(RSE5 + BREGV) * arr(VAR9YIPS * RSE4 - CSPROVRSE4 / BINRPS) + 1 - is_positive(RSE5 + BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP - RSE19YP - RSE29YP - RSE39YP)
NAPRSE2AVIM = RSE2N + PRSE2
RSE4BASE_INR = max(0, max(0, RSE8TX - CIRSE8TX - CSPROVYH) + max(0, RSE8SB - CIRSE8SB - CSPROVYP) - RSE49YP)
HAUTREVCUM = 1 - is_positive(IRESTITIR) * is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * 0 + 1 - is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * HAUTREVNET
ZIGPENARSE1 = is_positive(PRSE1) * is_positive(NMAJRSE11) * LIG2
LIGHAUTANT = APPLI_ILIAD * 1 - is_positive(20 - V_NOTRAIT) * is_positive(V_CHRANT + LIGHAUTNET * is_positive(HAUTREVNET)) * 1 - is_positive(LIG2051) * TYPE2 * 1 - APPLI_OCEANS
PTORSE3 = arr(max(0, RSE3 - CIRSE3 - CSPROVYG) * COPETO / 100) + arr(max(0, RSE3 - CIRSE3 - CSPROVYG - RSE39YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
PTORSE4 = arr(max(0, RSE4 - CIRSE4 - CSPROVRSE4) * COPETO / 100) + arr(max(0, RSE4 - CIRSE4 - CSPROVRSE4 - RSE49YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
PRSE4 = PTORSE4
RSE2NET = max(0, RSE8TV - CIRSE8TV - CSPROVYF) + max(0, RSE8SA - CIRSE8SA - CSPROVYN) + PRSE2
INDRSE2 = is_positive(BRSE2) * is_positive(PRSE2 + CIRSE2 + CSPROVYF + CSPROVYN) * 1 - INDCTX
ZIGPENARSE24 = is_positive(PRSE2) * is_positive(NMAJRSE24) * LIG2
NAPRSE1AVIM = RSE1N + PRSE1
ZIGPENARSE4 = is_positive(PRSE4) * is_positive(NMAJRSE41) * LIG2
RSE2NETEMP = RSE2NET * INDSEUIL61
INDRSE4 = is_positive(BRSE4) * is_positive(PRSE4 + CIRSE4 + CSPROVYH + CSPROVYP) * 1 - INDCTX
ZIGPENARSE44 = is_positive(PRSE4) * is_positive(NMAJRSE44) * LIG2
ZIGPENARSE14 = is_positive(PRSE1) * is_positive(NMAJRSE14) * LIG2
INDRSE1 = is_positive(BRSE1) * is_positive(PRSE1 + CIRSE1 + CSPROVYD) * 1 - INDCTX
INDE2 = is_positive(INDRSE2 + INDRSE2X) * INDTRAIT
RSE4NET = max(0, RSE8TX - CIRSE8TX - CSPROVYH) + max(0, RSE8SB - CIRSE8SB - CSPROVYP) + PRSE4
RSE1NET = max(0, RSE1 + PRSE1 - CIRSE1 - CSPROVYD)
RSE59YP = is_positive(BREGV) * arr(VAR9YIPS * RSE5 - CSPROVYE / BINRPS) + 1 - is_positive(BREGV) * max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP - RSE19YP - RSE29YP - RSE39YP - RSE49YP)
PTORSE5 = arr(max(0, RSE5 - CIRSE5 - CSPROVYE) * COPETO / 100) + arr(max(0, RSE5 - CIRSE5 - CSPROVYE - RSE59YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
INDE4 = is_positive(INDRSE4 + INDRSE4X) * INDTRAIT
NAPRSE4AVIM = RSE4N + PRSE4
RSE4NETEMP = RSE4NET * INDSEUIL61
REGV9YP = max(0, VAR9YIPS - CS9YP - RD9YP - PS9YP - CVN9YP - CDIS9YP - GLO9YP - RSE19YP - RSE29YP - RSE39YP - RSE49YP - RSE59YP)
PRSE3 = PTORSE3
INDE1 = is_positive(INDRSE1 + INDRSE1X) * INDTRAIT
RSE1NETEMP = RSE1NET * INDSEUIL61
RSE5BASE_INR = max(0, RSE5N - CSPROVYE - RSE59YP)
RSE3NET = max(0, RSE3 + PRSE3 - CIRSE3 - CSPROVYG)
NAPRSE3AVIM = RSE3N + PRSE3
RSE3NETEMP = RSE3NET * INDSEUIL61
INDRSE3 = is_positive(BRSE3) * is_positive(PRSE3 + CIRSE3 + CSPROVYG) * 1 - INDCTX
REGVBASE_INR = max(0, BREGV - REGV9YP)
PRSE5 = PTORSE5
ZIGPENARSE54 = is_positive(PRSE5) * is_positive(NMAJRSE54) * LIG2
ZIGPENARSE3 = is_positive(PRSE3) * is_positive(NMAJRSE31) * LIG2
PTOREGV = arr(BREGV * COPETO / 100) + arr(max(0, BREGV - REGV9YP) * TXINT / 100) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)
ZIGPENARSE34 = is_positive(PRSE3) * is_positive(NMAJRSE34) * LIG2
INDE3 = is_positive(INDRSE3 + INDRSE3X) * INDTRAIT
RSE5NET = max(0, RSE5 + PRSE5 - CIRSE5 - CSPROVYE)
PRSETOT = PRSE1 + PRSE2 + PRSE3 + PRSE4 + PRSE5
INDRSE5 = is_positive(BRSE5) * is_positive(PRSE5 + CIRSE5 + CSPROVYE) * 1 - INDCTX
ZIGPENARSE5 = is_positive(PRSE5) * is_positive(NMAJRSE51) * LIG2
NAPRSE5AVIM = RSE5N + PRSE5
PREGV = PTOREGV
NAPREGVAVIM = BREGV + PREGV
REGVNET = BREGV + PREGV
INDREGV = is_positive(BREGV) * is_positive(PREGV) * 1 - INDCTX
NAPCRPAVIM = max(0, NAPPSAVIM + NAPCSAVIM + NAPRDAVIM + NAPCVNAVIM + NAPREGVAVIM + NAPCDISAVIM + NAPGLOAVIM + NAPRSE1AVIM + NAPRSE2AVIM + NAPRSE3AVIM + NAPRSE4AVIM + NAPRSE5AVIM)
CSTOT = max(0, CSG + RDSN + PRS + PCSG + PRDS + PPRS + CVNSALC + PCVN + CDIS + PCDIS + CGLOA + PGLOA + BREGV + PREGV + RSE1N + PRSE1 + RSE2N + PRSE2 + RSE3N + PRSE3 + RSE4N + PRSE4 + RSE5N + PRSE5)
PTOTIRCS = PIR + PTAXA + PTAXLOY + PHAUTREV + PPCAP + PPRS + PCSG + PRDS + PCDIS + PREGV + PCVN + PGLOA + PRSE1 + PRSE2 + PRSE3 + PRSE4 + PRSE5
RSE5NETEMP = RSE5NET * INDSEUIL61
ZIGPENAREGV = is_positive(PREGV) * is_positive(NMAJREGV1) * LIG2
INDSEUIL12 = positif_ou_nul(max(0, CSNET + RDNET + PRSNET + CVNNET + REGVNET + CDISNET + CGLOANET + RSE1NET + RSE2NET + RSE3NET + RSE4NET + RSE5NET) - SEUIL_12)
VARPS61 = CSG + RDSN + PRS + PCSG + PRDS + PPRS + CVNSALC + PCVN + CDIS + PCDIS + BREGV + PREGV + CGLOA + PGLOA + RSE1N + PRSE1 + RSE2N + PRSE2 + RSE3N + PRSE3 + RSE4N + PRSE4 + RSE5N + PRSE5 - CSGIM - CRDSIM - PRSPROV - COD8YT - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP + 0
NAPRSE4 = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * RSE4NET
NAPCVN = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * CVNNET
RSENETTOT = RSE1NET + RSE2NET + RSE3NET + RSE4NET + RSE5NET
TOTCRNET = CSNET + RDNET + PRSNET + CVNNET + REGVNET + CDISNET + CGLOANET + RSE1NET + RSE2NET + RSE3NET + RSE4NET + RSE5NET
NAPREGV = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * REGVNET
NAPRSE2 = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * RSE2NET
INDE5 = is_positive(INDRSE5 + INDRSE5X) * INDTRAIT
NAPCRINR = null(4 - V_IND_TRAIT) * max(0, CSTOT - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYG - CSPROVYH - COD8YT) + null(5 - V_IND_TRAIT) * max(0, CSTOT - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYG - CSPROVYH - COD8YT)
NAPRSE3 = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * RSE3NET
NAPCS = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * CSNET
NAPRD = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * RDNET
TOTPENCS = PPRS + PCSG + PRDS + PCVN + PREGV + PCDIS + PGLOA + PRSE1 + PRSE2 + PRSE3 + PRSE4 + PRSE5
NAPRSE5 = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * RSE5NET
TOTCRBRUT = max(0, CSGC + PCSG - CICSG - CSGIM + RDSC + PRDS - CIRDS - CRDSIM + PRSC + PPRS - CIPRS - PRSPROV + CVNSALC + PCVN - COD8YT + BREGV + PREGV + CDISC + PCDIS - CDISPROV + CGLOA + PGLOA - COD8YL + RSE1 + PRSE1 + RSE2 + PRSE2 + RSE3 + PRSE3 + RSE4 + PRSE4 + RSE5 + PRSE5 - CIRSE1 - CSPROVYD - CIRSE5 - CSPROVYE - CIRSE2 - CSPROVRSE2 - CIRSE3 - CSPROVYG - CIRSE4 - CSPROVRSE4)
TOTCRBIS = (V_ANTCR + 0) if (V_ANTCR - CSTOT > 0 and V_ANTCR - CSTOT < SEUIL_8 and CSTOT >= SEUIL_61 or CSTOT - V_ANTCR > 0 and CSTOT - V_ANTCR < SEUIL_61 and V_IND_TRAIT == 4 or CSTOT - V_ANTCR > 0 and CSTOT - V_ANTCR < SEUIL_12 and V_IND_TRAIT > 4) else (CSTOT * positif_ou_nul(CSTOT - SEUIL_61))
LIG2383 = (is_positive(RBG - V_8ZT) * present(IPSOUR) * V_CR2 * LIG2) if (IAVIM + NAPCRPAVIM <= IPSOUR * LIG1) else 0
CRSE2D = NAPRSE2 - V_RSE2ANT
CSGD = NAPCS - V_CSANT
NAPPS = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * PRSNET
NAPCDIS = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * CDISNET
RDSD = NAPRD - V_RDANT
CRSE5D = NAPRSE5 - V_RSE5ANT
CRSE3D = NAPRSE3 - V_RSE3ANT
NAPINI = IRN + PIR - IRANT * 1 - INDTXMIN * 1 - INDTXMOY + min(0, IRN + PIR - IRANT) * INDTXMIN + INDTXMOY + max(0, IRN + PIR - IRANT) * INDTXMIN * is_positive(IAVIMBIS - NAPCRPAVIM - SEUIL_61) + INDTXMOY * is_positive(IAVIMO - NAPCRPAVIM - SEUIL_61) + RASAR * V_CR2
IMPNETCDIS = NAPCDIS - V_CDISANT
NAPGLOA = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * CGLOANET
NAPCRP = max(0, CSNET + RDNET + PRSNET + CVNNET + REGVNET + CDISNET + CGLOANET + RSE1NET + RSE2NET + RSE3NET + RSE4NET + RSE5NET)
AGPENA = PTOTIRCS
IMPNETPRS = NAPPS - V_PSANT
IMPNETCSAL = NAPCVN - V_CVNANT
REGVD = NAPREGV - V_REGVANT
IMPNETCS = NAPCS - V_CSANT
CVND = NAPCVN - V_CVNANT
CRSE4D = NAPRSE4 - V_RSE4ANT
PRSD = NAPPS - V_PSANT
NAPRSE1 = is_positive(SEUIL_61 - VARPS61) * 0 + 1 - is_positive(SEUIL_61 - VARPS61) * RSE1NET
TOTCR = (CSGIM + CRDSIM + PRSPROV + COD8YT + CDISPROV + COD8YL + CSPROVYD + CSPROVYE + CSPROVYF + CSPROVYN + CSPROVYG + CSPROVYH + CSPROVYP + 0) if (TOTCRBIS - CSGIM - CRDSIM - PRSPROV - COD8YT - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP < SEUIL_61 and CSGIM + CRDSIM + PRSPROV + COD8YT + CDISPROV + COD8YL + CSPROVYD + CSPROVYE + CSPROVYF + CSPROVYG + CSPROVYH + 0 > 0) else (TOTCRBIS + 0)
IRESTIT = abs(min(0, IRN + PIR + NRINET + IMPRET + RASAR + TAXASSUR + PTAXA - min(TAXASSUR + PTAXA + 0, max(0, INE - IRB + AVFISCOPTER)) + IPCAPTAXT + PPCAP - min(IPCAPTAXT + PPCAP, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA)) + TAXLOY + PTAXLOY - min(TAXLOY + PTAXLOY, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA - IPCAPTAXT - PPCAP)) + IHAUTREVT + PHAUTREV - min(IHAUTREVT + PHAUTREV, max(0, INE - IRB + AVFISCOPTER - TAXASSUR - PTAXA - IPCAPTAXT - PPCAP - TAXLOY - PTAXLOY)) + null(4 - V_IND_TRAIT) * max(0, TOTCR - CSGIM - CRDSIM - PRSPROV - COD8YT - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP) * positif_ou_nul(TOTCR - CSGIM - CRDSIM - PRSPROV - COD8YT - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP - SEUIL_61) + null(5 - V_IND_TRAIT) * max(0, TOTCR - CSGIM - CRDSIM - PRSPROV - COD8YT - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP) * positif_ou_nul(TOTCR - CSGIM - CRDSIM - PRSPROV - COD8YT - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP - SEUIL_61)))
IMPNETRD = NAPRD - V_RDANT
IMPNETREGV = NAPREGV - V_REGVANT
CDISD = NAPCDIS - V_CDISANT
IMPNETRSE = NAPRSE1 + NAPRSE2 + NAPRSE3 + NAPRSE4 + NAPRSE5 - V_RSE1ANT - V_RSE2ANT - V_RSE3ANT - V_RSE4ANT - V_RSE5ANT
IMPNETGLO = NAPGLOA - V_GLOANT
IRNET = null(NRINET + IMPRET + RASAR * V_CR2 + 0) * IRNETBIS * positif_ou_nul(IRB - min(max(0, IRB - AVFISCOPTER), INE)) + is_positive(NRINET + IMPRET + RASAR * V_CR2 + 0) * is_positive(IRE) + positif_ou_nul(IAVIM - SEUIL_61) * 1 - is_positive(IRE) * max(0, CHRNEG + NRINET + IMPRET + RASAR * V_CR2 + IRNETBIS * is_positive(positif_ou_nul(IAVIM - SEUIL_61)) * positif_ou_nul(IRB - min(max(0, IRB - AVFISCOPTER), INE))) * 1 - is_positive(IRESTIT) + 1 - positif_ou_nul(IAVIM - SEUIL_61) * 1 - is_positive(IRE) * max(0, CHRNEG + NRINET + IMPRET + RASAR * V_CR2)
LIGIRNET = is_positive(IRNET * LIG_IRNET + LIGTAXANET + LIGPCAPNET + LIGLOYNET + LIGHAUTNET) * 1 - is_positive(ANNUL2042 + 0)
TAXLOYTOT = (TAXLOYNET * is_positive(TAXLOYCUM)) if (APPLI_COLBERT == 0 and IRNET - V_ANTIR + TAXANET - V_TAXANT + PCAPNET - V_PCAPANT + TAXLOYNET - V_TAXLOYANT + HAUTREVNET - V_CHRANT >= SEUIL_12 or IRNET + V_ANTIR - TAXANET + V_TAXANT - PCAPNET + V_PCAPANT - TAXLOYNET + V_TAXLOYANT - HAUTREVNET + V_CHRANT >= SEUIL_8) else (V_TAXLOYANT * is_positive(TAXLOYCUM) + 0)
RC1INI = is_positive(NAPINI + 1 - SEUIL_12)
CGLOAD = NAPGLOA - V_GLOANT
IRCUM = 1 - is_positive(IRESTITIR) * is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * 0 + 1 - is_positive(is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * 1 - null(2 - V_REGCO) + positif_ou_nul(SEUIL_TXMIN - IBM23) * is_positive(SEUIL_61 - VARIR61 * TRAITINF20 + VARIR61BIS * TRAITSUP20) * null(VARIR12) * null(2 - V_REGCO)) * IRNET
NAPCR = null(4 - V_IND_TRAIT) * max(0, TOTCR - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP - COD8YT) * positif_ou_nul(TOTCR - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP - COD8YT - SEUIL_61) + null(5 - V_IND_TRAIT) * max(0, TOTCR - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP - COD8YT - TOTCRA) * positif_ou_nul(TOTCR - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP - COD8YT - TOTCRA - SEUIL_12)
RC1 = 1 if (NAPINI - V_ANTIR - IRCUM_A + RECUMBIS >= SEUIL_12) else 0
NAPTOT = IRCUM + TAXACUM + PCAPCUM + TAXLOYCUM + HAUTREVCUM - RECUMIR
NAPCRTOT = NAPCRP
PIRNETNEG = max(0, PIR - IRCUM)
IRCUMBIS = (V_ANTIR + IRCUM_A + 0) if (V_ANTIR + IRCUM_A - IRNET + IRANT * is_positive(IRNET + IRANT) - TAXANET - PCAPNET - TAXLOYNET - HAUTREVNET + V_ANTCR - CSTOT > 0 and V_ANTIR + IRCUM_A - IRNET + IRANT * is_positive(IRNET + IRANT) - TAXANET - PCAPNET - TAXLOYNET - HAUTREVNET + V_ANTCR - CSTOT < SEUIL_8 or TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET + IRNET + IRANT * is_positive(IRNET + IRANT) - V_ANTIR - IRCUM_A + CSTOT - V_ANTCR > 0 and TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET + IRNET + IRANT * is_positive(IRNET + IRANT) - V_ANTIR - IRCUM_A + CSTOT - V_ANTCR < SEUIL_12) else (IRNET + IRANT)
CRDEG = max(0, TOTCRA - TOTCR) * positif_ou_nul(TOTCRA - TOTCR - SEUIL_8)
NAPCR61 = NAPCS + NAPRD + NAPPS + NAPCVN + NAPCDIS + NAPGLOA + NAPRSE1 + NAPRSE2 + NAPRSE3 + NAPRSE4 + NAPRSE5 + NAPREGV
CRSE1D = NAPRSE1 - V_RSE1ANT
TOTAXAGA = (TAXANET * is_positive(TAXACUM)) if (APPLI_COLBERT == 0 and IRNET - V_ANTIR + TAXANET - V_TAXANT + PCAPNET - V_PCAPANT + TAXLOYNET - V_TAXLOYANT + HAUTREVNET - V_CHRANT >= SEUIL_12 or IRNET + V_ANTIR - TAXANET + V_TAXANT - PCAPNET + V_PCAPANT - TAXLOYNET + V_TAXLOYANT - HAUTREVNET + V_CHRANT >= SEUIL_8) else (V_TAXANT * is_positive(TAXACUM) + 0)
DCSGD = is_positive(CSREC + V_IDANT) * arr(BDCSG * T_IDCSG / 100) - DCSGIM - DCSGIM_A * is_positive(NAPCR61)
IND_REST = is_positive(IRESTIT)
IMPNETPS = NAPCR61 - V_ANTCR
IND61PS = positif_ou_nul(TOTCR - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP - COD8YT - SEUIL_61) * 2 + 1 - positif_ou_nul(TOTCR - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYN - CSPROVYG - CSPROVYH - CSPROVYP - COD8YT - SEUIL_61) * is_positive(TOTCR) * 1 + null(TOTCR) * 3
NAPCRBIS = null(4 - V_IND_TRAIT) * max(0, TOTCR - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYG - CSPROVYH - COD8YT) * positif_ou_nul(TOTCR - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYG - CSPROVYH - COD8YT - SEUIL_61) + null(5 - V_IND_TRAIT) * max(0, TOTCR - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYG - CSPROVYH - COD8YT - TOTCRA) * positif_ou_nul(TOTCR - CSGIM - CRDSIM - PRSPROV - CDISPROV - COD8YL - CSPROVYD - CSPROVYE - CSPROVYF - CSPROVYG - CSPROVYH - COD8YT - TOTCRA - SEUIL_12)
ZIG_PRIM = is_positive(NAPCR) * LIG2
NAPCRP2 = max(0, NAPPS + NAPCS + NAPRD + NAPCVN + NAPCDIS + NAPGLOA + NAPRSE1 + NAPRSE2 + NAPRSE3 + NAPRSE4 + NAPRSE5)
DRSED = arr(BDRSE1 * TXTQDED / 100) + arr(BDRSE2 * TXTVDED / 100) + arr(BDRSE3 * TXTWDED / 100) + arr(BDRSE4 * TXTXDED / 100) + arr(BDRSE5 * TX051 / 100) * is_positive(CSREC + V_IDRSEANT) * is_positive(NAPCR61)
NATCRP = 1 if (NAPCR > 0) else (2 if (NAPCRP + 0 > 0) else (3 if (CRDEG + 0 > 0) else 0))
IND12 = is_positive(SEUIL_12 - NAPCR + IRNET + TAXANET + TAXLOYNET + PCAPNET + HAUTREVNET - IRESTITIR) * is_positive(NAPCR + IRNET + TAXANET + TAXLOYNET + PCAPNET + HAUTREVNET - IRESTITIR) * 1 + 1 - is_positive(SEUIL_12 - NAPCR + IRNET + TAXANET + TAXLOYNET + PCAPNET + HAUTREVNET - IRESTITIR) * 2 + null(NAPCR + IRNET + TAXANET + TAXLOYNET + PCAPNET + HAUTREVNET - IRESTITIR) * 3
PTAXANETNEG = max(0, PIR + PTAXA - IRCUM - TAXACUM)
PCAPTOT = (PCAPNET * is_positive(PCAPCUM)) if (APPLI_COLBERT == 0 and IRNET - V_ANTIR + TAXANET - V_TAXANT + PCAPNET - V_PCAPANT + TAXLOYNET - V_TAXLOYANT + HAUTREVNET - V_CHRANT >= SEUIL_12 or IRNET + V_ANTIR - TAXANET + V_TAXANT - PCAPNET + V_PCAPANT - TAXLOYNET + V_TAXLOYANT - HAUTREVNET + V_CHRANT >= SEUIL_8) else (V_PCAPANT * is_positive(PCAPCUM) + 0)
TOTIRCUM = IRCUM + TAXACUM + PCAPCUM + TAXLOYCUM + HAUTREVCUM
INDSEUIL12IR = positif_ou_nul(IRNET + TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET - SEUIL_12)
PTAXLOYNETNEG = max(0, PIR + PTAXA + PPCAP + PTAXLOY - IRCUM - TAXACUM - PCAPCUM - TAXLOYCUM)
INDPPEMENS = is_positive(is_positive(IRESTIT - 180) + is_positive(-1 * ANCNAP - 180) + is_positive(IRESTIT - IRNET - 180) * null(V_IND_TRAIT - 5) * is_positive(PPETOTX - PPERSA - 180)) * 1 - V_CNR
DGLOD = is_positive(CSREC + V_GLOANT) * arr(BGLOA - COD8YL / 0.075 * TX051 / 100) * 1 - is_positive(present(RE168) + present(TAX1649)) * is_positive(NAPCR61)
NATIMPIR = null(V_IND_TRAIT - 4) * is_positive(is_positive(NAPTOT - NAPTOTAIR - IRANT) * positif_ou_nul(IAMD1 - SEUIL_61) * positif_ou_nul(IRNET + TAXANET + TAXLOYNET + PCAPNET + HAUTREVNET - SEUIL_12) + is_positive(IRE - IRESTITIR) * is_positive(IRESTITIR)) + null(V_IND_TRAIT - 5) * is_positive(positif_ou_nul(IAMD1 - SEUIL_61) + positif_ou_nul(RASAR + NRINET + IMPRET - SEUIL_12))
ZIG_TOTDEG = is_positive(CRDEG) * is_positive(INDCTX)
IRPSCUM = max(0, TOTIRCUM - RECUMIR + NAPCR61)
HAUTREVTOT = (HAUTREVNET * is_positive(HAUTREVCUM)) if (APPLI_COLBERT == 0 and IRNET - V_ANTIR + TAXANET - V_TAXANT + PCAPNET - V_PCAPANT + TAXLOYNET - V_TAXLOYANT + HAUTREVNET - V_CHRANT >= SEUIL_12 or IRNET + V_ANTIR - TAXANET + V_TAXANT - PCAPNET + V_PCAPANT - TAXLOYNET + V_TAXLOYANT - HAUTREVNET + V_CHRANT >= SEUIL_8) else (V_CHRANT * is_positive(HAUTREVCUM) + 0)
ILICAPNET = positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0, PCAPCUM - PPCAP - PTAXANETNEG) + 1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * 0
NAPTIR = IRNET + TAXANET + TAXLOYNET + PCAPNET + HAUTREVNET - IRESTITIR
LIG12NMR = is_positive(IRPSCUM) * is_positive(SEUIL_12 - IRPSCUM) * is_positive(V_NOTRAIT - 20) * 1 - null(2 - V_REGCO) * 1 - is_positive(IMPRET - SEUIL_12) * 1 - is_positive(NRINET - SEUIL_12)
ILICHRNET = positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0, HAUTREVCUM - PHAUTREV - PTAXLOYNETNEG) + 1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * 0
IDGLO = (arr(BGLOA - COD8YL / 0.075 * TX051 / 100) * is_positive(CSREC)) if (V_IND_TRAIT == 4) else abs(DGLOD - V_IDGLOANT)
PPCAPNETNEG = max(0, PIR + PTAXA + PPCAP - IRCUM - TAXACUM - PCAPCUM)
ZIGLORS = is_positive(DGLOD - V_GLOANT) * is_positive(IDGLO) * 1 - null(V_IDGLOANT + DGLOD + 0) * 1 - null(V_IDGLOANT - DGLOD) * is_positive(V_NOTRAIT - 20) * LIG2
NAPSANSPENA = NAPTIR - PIR + PTAXA + PPCAP + PHAUTREV + PTAXLOY * is_positive(abs(NAPTIR))
ZIGLODD = is_positive(V_GLOANT - DGLOD) * is_positive(IDGLO) * 1 - null(V_IDGLOANT + DGLOD + 0) * 1 - null(V_IDGLOANT - DGLOD) * is_positive(V_NOTRAIT - 20) * LIG2
NAPCOROLCS = max(0, NAPCR61 - V_ANTCR)
ILITOTPSNET = max(0, NAPCR61 - TOTPENCS)
IDCSG = (arr(BDCSG * T_IDCSG / 100) - DCSGIM * is_positive(CSREC)) if (V_IND_TRAIT == 4) else (0 if (CRDEG == 0 and NAPCRP == 0) else abs(DCSGD - V_IDANT))
LIGDCSGD = is_positive(DCSGD) * null(5 - V_IND_TRAIT) * INDCTX * LIG1 * LIG2
ZIG_DEGINF61 = is_positive(V_CSANT + V_RDANT + V_PSANT + 0) * is_positive(CRDEG + 0) * is_positive(SEUIL_61 - TOTCRA - CSNET - RDNET - PRSNET - CDISNET + 0) * 1 - null(CSTOT + 0) * LIG2
ZIG_TITREP = ZIG_NETAP + ZIG_TOTDEG
ILIIRNET = positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0, IRCUM - PIR) + 1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * TOTIRCUM - RECUMIR - TOTPENIR
ILILOYNET = positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0, TAXLOYCUM - PTAXLOY - PPCAPNETNEG) + 1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * 0
ZIG_CSGDPRIM = 1 - is_positive(V_CSANT + V_RDANT + V_PSANT + V_IDANT) * is_positive(IDCSG) * LIG2
RECUM = max(0, TOTIRCUM - RECUMIR + NAPCR61)
IDRSE = (is_positive(CSREC) * arr(BDRSE1 * TXTQDED / 100) + arr(BDRSE2 * TXTVDED / 100) + arr(BDRSE3 * TXTWDED / 100) + arr(BDRSE4 * TXTXDED / 100) + arr(BDRSE5 * TX051 / 100)) if (V_IND_TRAIT == 4) else abs(DRSED - V_IDRSEANT)
ILITAXANET = positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0, TAXACUM - PTAXA - PIRNETNEG) + 1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * 0
ZIG_CSGDRS = is_positive(DCSGD - V_IDANT) * is_positive(IDCSG) * 1 - null(V_IDANT + DCSGD + 0) * 1 - null(V_IDANT - DCSGD) * is_positive(V_NOTRAIT - 20) * LIG2
ZIGLOCO = is_positive(ZIGLODD + ZIGLORS + null(V_IDGLOANT - DGLOD)) * 1 - null(V_IDGLOANT + DGLOD + 0) * is_positive(V_NOTRAIT - 20) * LIG2
ZIGRSERS = is_positive(DRSED - V_RSE1ANT + V_RSE2ANT + V_RSE3ANT + V_RSE4ANT + V_RSE5ANT) * is_positive(IDRSE) * 1 - null(V_IDRSEANT + DRSED + 0) * 1 - null(V_IDRSEANT - DRSED) * is_positive(V_NOTRAIT - 20) * LIG2
TXMOYIMPNUM = is_positive(IRCUM + IRANT + TAXACUM + PCAPCUM + TAXLOYCUM + HAUTREVCUM - RECUM - PIR - PTAXA - PPCAP - PTAXLOY - PHAUTREV) * max(0, IRCUM + IRANT + TAXACUM + PCAPCUM + TAXLOYCUM + HAUTREVCUM - RECUM - PIR - PTAXA - PPCAP - PTAXLOY - PHAUTREV * positif_ou_nul(IRNET2 + TAXASSUR + IPCAPTAXT + TAXLOY + IHAUTREVT - SEUIL_12) + IRNET2 + TAXASSUR + IPCAPTAXT + TAXLOY + IHAUTREVT + IRANT * is_positive(SEUIL_12 - IRNET2 + TAXASSUR + IPCAPTAXT + TAXLOY + IHAUTREVT) + arr(RCMLIB * TX_PREVLIB / 100) + COD2CK - IPREP - IPPRICORSE) * positif_ou_nul(IAMD1 - SEUIL_61) * 100
LIGDEGRES = is_positive(TOTIRPSANT + 0) * positif_ou_nul(RECUM - SEUIL_8) * is_positive(null(V_NOTRAIT - 23) + null(V_NOTRAIT - 33) + null(V_NOTRAIT - 43) + null(V_NOTRAIT - 53) + null(V_NOTRAIT - 63))
IINETIR = max(0, NAPTIR)
TOTNET = max(0, NAPTIR)
ZIG_CSGD99 = ZIG_CSGDPRIM * 1 - null(V_IDANT + DCSGD + 0) * is_positive(DCSGD) * is_positive(20 - V_NOTRAIT) * LIG2
ZIGLOCOR = is_positive(ZIGLODD + ZIGLORS) * 1 - null(V_IDGLOANT + DGLOD + 0) * 1 - null(V_IDGLOANT - DGLOD) * is_positive(V_NOTRAIT - 20) * LIG2
ZIGDCSGD2 = ZIG_CSGD99 * null(ANCSDED2 - V_ANREV + 2) * LIG2
ZIGRSEDD = is_positive(V_RSE1ANT + V_RSE2ANT + V_RSE3ANT + V_RSE4ANT + V_RSE5ANT - DRSED) * is_positive(IDRSE) * 1 - null(V_IDRSEANT + DRSED + 0) * 1 - null(V_IDRSEANT - DRSED) * is_positive(V_NOTRAIT - 20) * LIG2
ZIGIDGLO = is_positive(IDGLO) * 1 - null(V_IDGLOANT + DGLOD + 0) * is_positive(20 - V_NOTRAIT) * LIG2
ZIGDCSGD1 = ZIG_CSGD99 * null(ANCSDED2 - V_ANREV + 1) * LIG2
ZIGDCSGD6 = ZIG_CSGD99 * null(ANCSDED2 - V_ANREV + 6) * LIG2
LIGDEG = positif_ou_nul(TOTIRPSANT) * is_positive(SEUIL_8 - RECUM) * is_positive(null(V_NOTRAIT - 23) + null(V_NOTRAIT - 33) + null(V_NOTRAIT - 43) + null(V_NOTRAIT - 53) + null(V_NOTRAIT - 63))
ZIGIDRSE = is_positive(IDRSE) * 1 - null(V_IDRSEANT + DRSED + 0) * is_positive(20 - V_NOTRAIT) * LIG2
NONREST = is_positive(20 - V_NOTRAIT) * is_positive(SEUIL_8 - RECUM) * is_positive(SEUIL_12 - IRPSCUM) * RECUM + 1 - is_positive(SEUIL_8 - RECUM) * is_positive(SEUIL_12 - IRPSCUM) * 0 + 1 - is_positive(20 - V_NOTRAIT) * is_positive(SEUIL_8 - RECUM) * is_positive(SEUIL_12 - IRPSCUM) * is_positive(SEUIL_12 - abs(TOTIRPSANT)) * max(0, TOTIRPSANT - IRPSCUM - RECUM) + 1 - is_positive(SEUIL_12 - abs(TOTIRPSANT)) * RECUM + 1 - is_positive(SEUIL_8 - RECUM) * is_positive(SEUIL_12 - IRPSCUM) * is_positive(is_positive(SEUIL_12 - VARNON) * is_positive(VARNON) + is_positive(SEUIL_8 - abs(VARNON)) * 1 - is_positive(VARNON)) * max(0, TOTIRPSANT - IRPSCUM - RECUM) + 1 - is_positive(is_positive(SEUIL_12 - VARNON) * is_positive(VARNON) + is_positive(SEUIL_8 - abs(VARNON)) * 1 - is_positive(VARNON)) * 0
ZIGIDGLO3 = ZIGIDGLO * null(ANCSDED2 - V_ANREV + 3)
ZIGDRSED3 = ZIGIDRSE * null(ANCSDED2 - V_ANREV + 3)
ZIGIDGLO2 = ZIGIDGLO * null(ANCSDED2 - V_ANREV + 2)
ZIGRSECOR = is_positive(ZIGRSEDD + ZIGRSERS) * 1 - null(V_IDRSEANT + DRSED + 0) * 1 - null(V_IDRSEANT - DRSED) * is_positive(V_NOTRAIT - 20) * LIG2
ZIG_CSGDDO = is_positive(V_IDANT - DCSGD) * is_positive(IDCSG) * 1 - null(V_IDANT + DCSGD + 0) * 1 - null(V_IDANT - DCSGD) * is_positive(V_NOTRAIT - 20) * LIG2
ZIGIDGLO1 = ZIGIDGLO * null(ANCSDED2 - V_ANREV + 1)
ZIGDRSED4 = ZIGIDRSE * null(ANCSDED2 - V_ANREV + 4)
ZIGIDGLO5 = ZIGIDGLO * null(ANCSDED2 - V_ANREV + 5)
NAPTEMP = is_positive(is_positive(SEUIL_8 - abs(IRPSCUM - RECUM)) * 1 - is_positive(IRPSCUM - RECUM) + is_positive(SEUIL_12 - IRPSCUM - RECUM) * is_positive(IRPSCUM - RECUM)) * 0 + 1 - is_positive(is_positive(SEUIL_8 - abs(IRPSCUM - RECUM)) * 1 - is_positive(IRPSCUM - RECUM) + is_positive(SEUIL_12 - IRPSCUM - RECUM) * is_positive(IRPSCUM - RECUM)) * IRPSCUM - RECUM
LIGRES = 1 - is_positive(TOTIRPSANT + 0) * positif_ou_nul(RECUM - SEUIL_8) * is_positive(null(V_NOTRAIT - 23) + null(V_NOTRAIT - 33) + null(V_NOTRAIT - 43) + null(V_NOTRAIT - 53) + null(V_NOTRAIT - 63))
NONMER = is_positive(20 - V_NOTRAIT) * is_positive(SEUIL_8 - RECUM) * is_positive(SEUIL_12 - IRPSCUM) * IRPSCUM + 1 - is_positive(SEUIL_8 - RECUM) * is_positive(SEUIL_12 - IRPSCUM) * 0 + 1 - is_positive(20 - V_NOTRAIT) * is_positive(SEUIL_8 - RECUM) * is_positive(SEUIL_12 - IRPSCUM) * is_positive(SEUIL_12 - abs(TOTIRPSANT)) * max(0, IRPSCUM - RECUM - TOTIRPSANT) + 1 - is_positive(SEUIL_12 - abs(TOTIRPSANT)) * IRPSCUM + 1 - is_positive(SEUIL_8 - RECUM) * is_positive(SEUIL_12 - IRPSCUM) * is_positive(is_positive(SEUIL_12 - VARNON) * is_positive(VARNON) + is_positive(SEUIL_8 - abs(VARNON)) * 1 - is_positive(VARNON)) * max(0, IRPSCUM - RECUM - TOTIRPSANT) + 1 - is_positive(is_positive(SEUIL_12 - VARNON) * is_positive(VARNON) + is_positive(SEUIL_8 - abs(VARNON)) * 1 - is_positive(VARNON)) * 0
ILITOTIRNET = ILIIRNET + ILITAXANET + ILICAPNET + ILILOYNET + ILICHRNET
TXMOYIMPC = arr(TXMOYIMPNUM / TXMOYIMPDEN * 100) / 100
ZIGLOCOR2 = ZIGLOCOR * null(ANCSDED2 - V_ANREV + 2)
ZIGLOCOR3 = ZIGLOCOR * null(ANCSDED2 - V_ANREV + 3)
LIGIDEGR = is_positive(LIGDEG + LIGDEGRES) * positif_ou_nul(IDEGR - SEUIL_8) + null(IDEGR)
TXMOYIMP = max(0, is_positive(IRPSCUM + IRANT - NONMER) * is_positive(4500 / 100 - TXMOYIMPC) * TXMOYIMPC)
ZIGLOCOR1 = ZIGLOCOR * null(ANCSDED2 - V_ANREV + 1)
NAPTEMPCX = IRPSCUM - NONMER - RECUM + NONREST * is_positive(IRPSCUM - RECUM - TOTIRPSANT + 0)
ZIGLOCOR5 = ZIGLOCOR * null(ANCSDED2 - V_ANREV + 5)
ZIGIDGLO6 = ZIGIDGLO * null(ANCSDED2 - V_ANREV + 6)
ZIGLOCOR4 = ZIGLOCOR * null(ANCSDED2 - V_ANREV + 4)
ZIGRSECO = is_positive(ZIGRSEDD + ZIGRSERS + null(V_IDRSEANT - DRSED)) * 1 - null(V_IDRSEANT + DRSED + 0) * is_positive(V_NOTRAIT - 20) * LIG2
ZIGDCSGD5 = ZIG_CSGD99 * null(ANCSDED2 - V_ANREV + 5) * LIG2
ZIGDCSGD4 = ZIG_CSGD99 * null(ANCSDED2 - V_ANREV + 4) * LIG2
LIGNEMP = is_positive(1 - null(NAPTEMP) + null(NAPTEMP) * null(NAPTIR) * null(NAPCRP))
IREST = max(0, max(0, NAPTEMPCX) - max(0, TOTIRPSANT))
ZIGDCSGD3 = ZIG_CSGD99 * null(ANCSDED2 - V_ANREV + 3) * LIG2
ZIGLOCOR6 = ZIGLOCOR * null(ANCSDED2 - V_ANREV + 6)
ZIGRSECOR1 = ZIGRSECOR * null(ANCSDED2 - V_ANREV + 1)
ZIGDRSED2 = ZIGIDRSE * null(ANCSDED2 - V_ANREV + 2)
NONRESTEMP2 = IDEGR + max(0, V_NONRESTANT - V_ANTRE - min(0, NAPTEMP)) * is_positive(SEUIL_8 - IDEGR - max(0, V_NONRESTANT - V_ANTRE - min(0, NAPTEMP))) * is_positive(NAPCRTEMP - V_ANTCR)
ZIGDRSED6 = ZIGIDRSE * null(ANCSDED2 - V_ANREV + 6)
ZIG_CSGDC = is_positive(ZIG_CSGDDO + ZIG_CSGDRS + null(V_IDANT - DCSGD)) * 1 - null(V_IDANT + DCSGD + 0) * is_positive(V_NOTRAIT - 20) * LIG2
LIGIDEGRC = is_positive(LIGDEG + LIGDEGRES) * is_positive(SEUIL_8 - IDEGR) * is_positive(IDEGR + 0)
LIGIREST = is_positive(LIGRES + LIGDEGRES) * positif_ou_nul(IREST - SEUIL_8) + null(IREST)
ZIGRSECOR6 = ZIGRSECOR * null(ANCSDED2 - V_ANREV + 6)
NAPCOROLIR = TOTIRCUM - NONMER - RECUMIR + NONREST * is_positive(20 - V_NOTRAIT) + max(0, TOTIRCUM - NONMER - RECUMIR + NONREST - V_TOTIRANT - V_NONMERANT - V_ANTREIR + V_NONRESTANT) * positif_ou_nul(V_NOTRAIT - 20)
IINET = max(0, NAPTEMPCX - TOTIRPSANT)
TOTIRPS = IRPSCUM - NONMER + NONREST - RECUM
ZIGRSECOR5 = ZIGRSECOR * null(ANCSDED2 - V_ANREV + 5)
COMPENSANV = is_positive(20 - V_NOTRAIT) * null(IND61PS - 2) * is_positive(SEUIL_12 - CSTOT + IRNET + TAXANET + TAXLOYNET + PCAPNET + HAUTREVNET - IRESTITIR) * max(0, NAPCRP - IRESTITIR) + is_positive(null(V_NOTRAIT - 26) + null(V_NOTRAIT - 36) + null(V_NOTRAIT - 46) + null(V_NOTRAIT - 56) + null(V_NOTRAIT - 66)) * max(0, min(NONMER, NAPCR61 - V_ANTCR))
LIGNETARECS = is_positive(IINET) * LIGPS * is_positive(ANNUL2042) * TYPE2
ZIGRSECOR2 = ZIGRSECOR * null(ANCSDED2 - V_ANREV + 2)
ZIGRSECOR4 = ZIGRSECOR * null(ANCSDED2 - V_ANREV + 4)
COMPENSACI = is_positive(NAPCRP) * null(IND61PS - 2) * is_positive(IRE) * null(PPETOTX) * is_positive(IRESTITIR - IRE) * min(NAPCRP, max(0, IRESTITIR - IRE)) + null(IRESTITIR - IRE) * min(NAPCRP, IRE) + is_positive(IRE - IRESTITIR) * min(NAPCRP, IRESTITIR) + is_positive(PPETOTX) * is_positive(IRE) * is_positive(IRESTITIR - IRE - PPETOTX) * min(NAPCRP, IRESTITIR - IRE - PPETOTX) + null(IRESTITIR - IRE - PPETOTX) * min(NAPCRP, IRE) + is_positive(PPETOTX + IRE - IRESTITIR) * positif_ou_nul(PPETOTX - IRESTITIR) * 0 + is_positive(IRESTITIR - PPETOTX) * min(NAPCRP, IRESTITIR - PPETOTX) * is_positive(20 - V_NOTRAIT) + is_positive(null(V_NOTRAIT - 26) + null(V_NOTRAIT - 36) + null(V_NOTRAIT - 46) + null(V_NOTRAIT - 56) + null(V_NOTRAIT - 66)) * max(0, min(min(0, TOTIRPSANT - V_ANTCR) - min(0, TOTIRPS - NAPCR61 + NONMER), RECUMIR - PPEREST2A))
LIG2053 = is_positive(V_NOTRAIT - 20) * is_positive(IDEGR) * is_positive(IREST - SEUIL_8) * TYPE2
INDRESTIT = is_positive(IREST + 0)
ZIGDRSED1 = ZIGIDRSE * null(ANCSDED2 - V_ANREV + 1)
ZIGIDGLO4 = ZIGIDGLO * null(ANCSDED2 - V_ANREV + 4)
ZIGDRSED5 = ZIGIDRSE * null(ANCSDED2 - V_ANREV + 5)
NAPT = NAPTEMPCX - TOTIRPSANT
ZIGRSECOR3 = ZIGRSECOR * null(ANCSDED2 - V_ANREV + 3)
IINETCALC = max(0, NAPTEMP - TOTIRPSANT)
ZIG_CSGDCOR = is_positive(ZIG_CSGDDO + ZIG_CSGDRS) * 1 - null(V_IDANT + DCSGD + 0) * 1 - null(V_IDANT - DCSGD) * is_positive(V_NOTRAIT - 20) * LIG2
NAT1 = 1 - is_positive(V_IND_TRAIT - 4) * is_positive(NAPT) + is_positive(V_IND_TRAIT - 4) * is_positive(positif_ou_nul(IRPSCUM - SEUIL_12) * null(NAPT) + is_positive(NAPT))
PPENATREST2 = is_positive(IREST - V_ANTRE + V_ANTIR) + is_positive(V_ANTRE - IINET) * is_positive(IRE) * 1 - null(2 - V_REGCO) * null(IRE - PPETOTX + PPERSA) * 1 * 1 + 1 - is_positive(PPETOTX - PPERSA) * 2 + null(IRE) * 1 - is_positive(PPETOTX - PPERSA) * 3 + is_positive(PPETOTX - PPERSA) * is_positive(IRE - PPETOTX + PPERSA) * 4 + 2 * null(2 - V_REGCO)
ZIGCSGDCOR3 = ZIG_CSGDCOR * null(ANCSDED2 - V_ANREV + 3)
BASPPEMENS = INDPPEMENS * min(max(IREST, -1 * ANCNAP * is_positive(-1 * ANCNAP)), PPETOTX - PPERSA) * null(V_IND_TRAIT - 4) + INDPPEMENS * max(0, min(IRESTIT - IRNET, PPETOTX - PPERSA)) * null(V_IND_TRAIT - 5)
ZIGCSGDCOR6 = ZIG_CSGDCOR * null(ANCSDED2 - V_ANREV + 6)
NAT21 = 21 * IND_REST * 1 - is_positive(IDEGR) * 1 - is_positive(IRE - IRESTIT) * 1 - is_positive(V_IND_TRAIT - 4) + 21 * is_positive(V_IND_TRAIT - 4) * is_positive(SEUIL_12 - V_IRPSANT) * is_positive(IRESTIT) * null(IRE - IRESTIT) * 1 - positif_ou_nul(NAPT)
ZIGCSGDCOR4 = ZIG_CSGDCOR * null(ANCSDED2 - V_ANREV + 4)
IMPNET = null(4 - V_IND_TRAIT) * IINET + IREST * -1 + null(5 - V_IND_TRAIT) * is_positive(IDEGR) * is_positive(IREST) * is_positive(SEUIL_8 - IREST) * IDEGR * -1 + 1 - is_positive(is_positive(IDEGR) * is_positive(IREST) * is_positive(SEUIL_8 - IREST)) * IINET - IREST - IDEGR
IND08 = is_positive(NAPT * -1) * is_positive(SEUIL_8 - abs(NAPT)) * 1 + 1 - is_positive(SEUIL_8 - abs(NAPT)) * 2
IMPNETIR = NAPTIR - V_ANTIR - V_PCAPANT - V_TAXANT - V_TAXLOYANT - V_CHRANT * null(4 - V_IND_TRAIT) + IMPNET - IMPNETPS * null(5 - V_IND_TRAIT)
LIGEMP = 1 - LIGNEMP
LIGTROPS = is_positive(V_ANTRE + V_ANTCR) * null(IINET) * positif_ou_nul(abs(NAPTOTA) - IRESTIT - IRANT) * 1 - positif_ou_nul(abs(NAPTOTA) - IRESTIT - IRANT - SEUIL_12) * null(IDRS2 - IDEC + IREP) * LIGPS * 1 - INDCTX
IND_REST50 = is_positive(SEUIL_8 - IREST) * is_positive(IREST) * 1 - is_positive(APPLI_OCEANS)
LIGNETAREC = is_positive(IINET) * 1 - LIGPS * is_positive(ANNUL2042) * TYPE2
COMPENSIR = 1 - INDCTX * max(0, max(0, TOTIRPSANT - V_ANTCR) - max(0, TOTIRPS - NAPCR61 + NONMER))
LIGTXMOYPS = is_positive(TXMOYIMP) * 1 - is_positive(V_CNR) * 1 - is_positive(null(2 - V_REGCO) + null(4 - V_REGCO) + is_positive(present(NRINET) + present(NRBASE) + present(IMPRET) + present(BASRET))) * IND_REV * LIG2 * is_positive(20 - V_NOTRAIT)
LIGIINETC = LIGSUP * null(NAPT) * is_positive(IINETCALC + 0)
GAINDBLELIQ = max(0, V_ANC_NAP - NAPT) * is_positive(null(MESGOUV - 1) + null(MESGOUV - 2) + null(MESGOUV2 - 4) + null(MESGOUV2 - 5))
LIG3750 = present(V_ZDC) * null(abs(V_ZDC - 1)) * is_positive(IREST) * LIG1
ZIGCSGDCOR5 = ZIG_CSGDCOR * null(ANCSDED2 - V_ANREV + 5)
ZIGCSGDCOR1 = ZIG_CSGDCOR * null(ANCSDED2 - V_ANREV + 1)
IND_NI = null(NAPT) * null(IRNET)
COMPENSPS = 1 - INDCTX * max(0, V_ANTCR - NAPCR61) * is_positive(NAPT)
INDNMR1 = 1 - is_positive(IAMD1 + 1 - SEUIL_61) * null(NAPT) * is_positive(IAMD1)
IND_IMP = is_positive(NAPT)
PPENATREST = is_positive(IRE) * is_positive(IREST) * 1 - null(2 - V_REGCO) * null(IRE - PPETOTX + PPERSA) * 1 * 1 + 1 - is_positive(PPETOTX - PPERSA) * 2 + null(IRE) * 1 - is_positive(PPETOTX - PPERSA) * 3 + is_positive(PPETOTX - PPERSA) * is_positive(IRE - PPETOTX + PPERSA) * 4 + 2 * null(2 - V_REGCO)
NAT71 = 71 * is_positive(NAPTEMPCX) * 1 - positif_ou_nul(NAPT)
LIGIRESTC = is_positive(LIGRES + LIGDEGRES) * is_positive(SEUIL_8 - IREST) * is_positive(IREST + 0)
LIGNMRS = LIGIINETC * 1 - is_positive(V_ANTRE - V_NONRESTANT)
INDNAP = 1 - positif_ou_nul(NAPT)
PPERESTA = is_positive(PPENATREST) * max(0, min(IREST, PPETOTX - PPERSA))
NAT70 = 70 * null(NAPTEMPCX) * 1 - positif_ou_nul(NAPT)
NAPALEG = abs(NAPT)
NAT81 = 81 * positif_ou_nul(V_IRPSANT - SEUIL_12) * is_positive(IRESTIT) * is_positive(IRE - IRESTIT) * 1 - positif_ou_nul(NAPT)
ZIGCSGDCOR2 = ZIG_CSGDCOR * null(ANCSDED2 - V_ANREV + 2)
NAT11 = 11 * IND_REST * 1 - is_positive(IDEGR) * is_positive(IRE - IRESTIT) * 1 - is_positive(V_IND_TRAIT - 4) + 11 * is_positive(V_IND_TRAIT - 4) * is_positive(SEUIL_12 - V_IRPSANT) * is_positive(IRESTIT) * is_positive(IRE - IRESTIT) * 1 - positif_ou_nul(NAPT)
LIGIINET = LIGSUP * is_positive(NAPT + 0) + null(IINETCALC)
GAINPOURCLIQ = 1 - null(V_ANC_NAP * 1 - 2 * V_IND_NAP) * V_ANC_NAP * 1 - 2 * V_IND_NAP - NAPT / V_ANC_NAP * 1 - 2 * V_IND_NAP * 1 - V_CNR2
COMPENSPPE = is_positive(NAPCRP) * null(IND61PS - 2) * is_positive(PPETOTX) * null(IRE) * is_positive(IRESTITIR - PPETOTX) * min(NAPCRP, max(0, IRESTITIR - PPETOTX)) + null(IRESTITIR - PPETOTX) * min(NAPCRP, PPETOTX) + is_positive(PPETOTX - IRESTITIR) * min(NAPCRP, IRESTITIR) + is_positive(PPETOTX) * is_positive(IRE) * is_positive(IRESTITIR - IRE - PPETOTX) * min(max(0, NAPCRP - COMPENSACI), PPETOTX) + null(IRESTITIR - IRE - PPETOTX) * min(max(0, NAPCRP - COMPENSACI), PPETOTX) + is_positive(PPETOTX + IRE - IRESTITIR) * positif_ou_nul(PPETOTX - IRESTITIR) * min(max(0, NAPCRP - COMPENSACI), IRESTITIR) + is_positive(IRESTITIR - PPETOTX) * min(max(0, NAPCRP - COMPENSACI), PPETOTX) * is_positive(20 - V_NOTRAIT) + is_positive(null(V_NOTRAIT - 26) + null(V_NOTRAIT - 36) + null(V_NOTRAIT - 46) + null(V_NOTRAIT - 56) + null(V_NOTRAIT - 66)) * max(0, min(0, TOTIRPSANT - V_ANTCR) - min(0, TOTIRPS - NAPCR61 + NONMER) - COMPENSACI)
LIGNMRR = LIGIINETC * is_positive(V_ANTRE - V_NONRESTANT + 0)
LIGTROP = is_positive(V_ANTRE + V_ANTCR) * null(IINET) * positif_ou_nul(abs(NAPTOTA) - IRESTIT - IRANT) * 1 - positif_ou_nul(abs(NAPTOTA) - IRESTIT - IRANT - SEUIL_12) * null(IDRS2 - IDEC + IREP) * 1 - LIGPS * 1 - INDCTX
NAT1BIS = is_positive(IRANT) * 1 - is_positive(NAT1) * 1 - is_positive(IDEGR) + 0
NAT91 = 91 * positif_ou_nul(V_IRPSANT - SEUIL_12) * is_positive(IRESTIT) * null(IRE - IRESTIT) * 1 - positif_ou_nul(NAPT)
LIG2161 = INDCTX * is_positive(IREST) * positif_ou_nul(IREST - SEUIL_8) * 1 - is_positive(IND_REST50)
NATIMP = NAT1 + NAT1BIS + 1 - is_positive(NAT1 + NAT1BIS) * NAT11 + NAT21 + NAT70 + NAT71 + NAT81 + NAT91
LIG2140 = (1 - INDCTX * INDREV1A8 * 1 - is_positive(IRANT) * null(NAPT) * LIG2 + null(IINET + NAPTOTA) * null(INDREV1A8) * is_positive(IND_REV) * is_positive(20 - V_NOTRAIT)) if (V_CR2 + 0 == 0 and NATIMP == 1 and IRNET + TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET + NRINET - NAPTOTA + NAPCR >= SEUIL_12 or V_CR2 + 0 == 1 and NATIMP == 1 or NATIMP == 0 or V_REGCO + 0 == 3 and NRINET + 0 < 12 and CSTOTSSPENA < 61 and LIG2141 + 0 == 0) else 0
LIGTROPRESTS = is_positive(V_ANTRE + V_ANTCR) * null(IINET) * positif_ou_nul(abs(NAPTOTA) - IRESTIT - IRANT) * 1 - positif_ou_nul(abs(NAPTOTA) - IRESTIT - IRANT - SEUIL_12) * 1 - is_positive(LIGTROP) * LIGPS * 1 - INDCTX
WMTAP = 1 - is_positive(V_ZDC + 0) * is_positive(NAT1 + NAT71) * IINET
PPENATIMPA = is_positive(PPETOTX - PPERSA) * is_positive(IINET - PPETOTX + PPERSA - ICREREVET) + is_positive(PPETOTX - PPERSA - PPERESTA)
LIGTROPREST = is_positive(V_ANTRE + V_ANTCR) * null(IINET) * positif_ou_nul(abs(NAPTOTA) - IRESTIT - IRANT) * 1 - positif_ou_nul(abs(NAPTOTA) - IRESTIT - IRANT - SEUIL_12) * 1 - is_positive(LIGTROP) * 1 - LIGPS * 1 - INDCTX
LIG0TSUP = INDNIRI * null(IRNETBIS) * positif_ou_nul(TAXASSUR + IPCAPTAXT + TAXLOY + CHRAPRES - SEUIL_61) * 1 - is_positive(IREP) * 1 - is_positive(IPROP) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * is_positive(V_NOTRAIT - 20) * 1 - is_positive(INDCTX) * LIG2
LIGPCAPDEG = is_positive(NATIMP - 71) * is_positive(PCAPDEG) * LIG2
LIGDIPLOI = is_positive(INDREV1A8) * is_positive(null(NATIMP - 1) + is_positive(NAPTEMP)) * is_positive(REVFONC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * LIG1
LIGRIDB = is_positive(INDNIRI * null(IBM23) * positif_ou_nul(TAXASSUR + IPCAPTAXTOT + TAXLOY + CHRAPRES - SEUIL_61) + positif_ou_nul(NAPCRP - SEUIL_61) * positif_ou_nul(NAPTIR + NAPCRP - SEUIL_12) * 1 - is_positive(IREP) * 1 - is_positive(IPROP) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * 1 - is_positive(NRINET) * LIG2)
INDNMR = null(NAPT) * null(NAT1BIS) * is_positive(IRNET + TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET)
MTAP = max(0, V_ACO_MTAP * null(2 - FLAG_ACO) + WMTAP * 1 - null(2 - FLAG_ACO) * 1 - INDTXMIN * 1 - INDTXMOY + V_ACO_MTAP * null(2 - FLAG_ACO) + WMTAP * 1 - null(2 - FLAG_ACO) * is_positive(INDTXMIN + INDTXMOY) * is_positive(V_ACO_MTAP * null(2 - FLAG_ACO) + WMTAP * 1 - null(2 - FLAG_ACO) - SEUIL_ACOMPTE))
CODINI = 99 * is_positive(NATIMP) + 0 * null(NATIMP)
LIG12ANT = is_positive(IRANT) * is_positive(SEUIL_12 - TOTNET) * is_positive(TOTNET) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(null(2 - V_REGCO) + 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO)) * is_positive(NRINET - SEUIL_12) * 1 - is_positive(IMPRET - SEUIL_12) * 1 - is_positive(NRINET - SEUIL_12) * is_positive(20 - V_NOTRAIT) * LIG2
LIGREVDEG = INDREV1A8 * is_positive(REVFONC) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * is_positive(INDCTX) * LIG2
LIG2150 = 1 - INDCTX * is_positive(IREST) * 1 - is_positive(LIG2140) * 1 - is_positive(IND_REST50) * is_positive(20 - V_NOTRAIT) * LIG2
LIG2171 = 1 - INDCTX * is_positive(IREST) * 1 - is_positive(LIG2140) * is_positive(IND_REST50) * is_positive(20 - V_NOTRAIT) * LIG2
INDCEX = null(1 - NATIMP) * 1 + is_positive(null(11 - NATIMP) + null(21 - NATIMP) + null(81 - NATIMP) + null(91 - NATIMP)) * 2 + null(0 - NATIMP) * 3
LIGLOYDEG = is_positive(NATIMP - 71) * is_positive(TAXLOYDEG) * LIG2
LIGRESINF = is_positive(LIGIDEGRC + LIGIRESTC)
LIG0TDEG = INDNIRI * null(IRNETBIS) * positif_ou_nul(TAXASSUR + IPCAPTAXT + TAXLOY + CHRAPRES - SEUIL_61) * 1 - is_positive(IREP) * 1 - is_positive(IPROP) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * is_positive(INDCTX) * LIG2
LIG2368 = INDCTX * is_positive(IREST) * is_positive(is_positive(IND_REST50) + is_positive(IDEGR))
INDNMR2 = is_positive(INDNMR) * 1 - is_positive(INDNMR1)
LIGIDB = INDNIRI * null(IBM23) * is_positive(TAXASSUR + IPCAPTAXTOT + TAXLOY + CHRAPRES + NAPCRP) * is_positive(SEUIL_61 - TAXASSUR - IPCAPTAXTOT - TAXLOY - CHRAPRES) * is_positive(SEUIL_61 - NAPCRP) * 1 - is_positive(IRESTIT) * 1 - is_positive(IREP) * 1 - is_positive(IPROP) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * 1 - is_positive(NRINET) * LIG2
LIGNIIRDEG = null(IDRS3 - IDEC) * null(IBM23) * 1 - is_positive(IRE) * null(TAXASSUR + IPCAPTAXT + TAXLOY + CHRAPRES + NAPCRP) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIG2501) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET - SEUIL_12) * 1 - is_positive(NRINET - SEUIL_12) * is_positive(1 + null(3 - INDIRPS)) * is_positive(V_NOTRAIT - 20) * LIG2
LIGNITSUP = positif_ou_nul(TAXASSUR + IPCAPTAXT + TAXLOY + CHRAPRES - SEUIL_61) * null(IDRS2 - IDEC + IREP) * positif_ou_nul(TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET - SEUIL_12) * 1 - is_positive(LIG0TSUP) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * is_positive(V_NOTRAIT - 20) * 1 - is_positive(INDCTX) * LIG2
LIG21402 = (1 - INDCTX * INDREV1A8 * 1 - is_positive(IRANT) * null(NAPT) * LIG2 + null(IINET + NAPTOTA) * null(INDREV1A8) * is_positive(IND_REV) * is_positive(V_NOTRAIT - 20)) if (V_CR2 + 0 == 0 and NATIMP == 1 and IRNET + TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET + NRINET - NAPTOTA + NAPCR >= SEUIL_12 or V_CR2 + 0 == 1 and NATIMP == 1 or NATIMP == 0 and LIG2141 + 0 == 0) else 0
LIG400DEG = is_positive(IAVIM + NAPCRPAVIM) * is_positive(SEUIL_61 - IAVIM + NAPCRPAVIM) * null(ITRED) * is_positive(IRNET) * 1 - is_positive(IRNET - SEUIL_61) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET - SEUIL_12) * 1 - is_positive(NRINET - SEUIL_12) * is_positive(V_NOTRAIT - 20) * LIG2
LIGREVSUP = INDREV1A8 * is_positive(REVFONC) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * is_positive(V_NOTRAIT - 20) * 1 - is_positive(INDCTX) * LIG2
LIGNIRIAF = INDNIRI * null(IBM23) * is_positive(is_positive(IRESTIT) + is_positive(V_NOTRAIT - 20)) * 1 - is_positive(LIGIDB) * 1 - is_positive(LIGRIDB) * 1 - is_positive(IREP) * 1 - is_positive(IPROP) * 1 - is_positive(IMPRET) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * LIG2
IND_IRINF80 = (1 - is_positive(INDCTX) * 1 - is_positive(IREST)) if (CODINI + 0 == 9 and NATIMP + 0 == 0 or CODINI + 0 == 99 and V_CR2 == 0 and IRNET + TAXASSUR + IPCAPTAXT + TAXLOY + CHRAPRES + NAPCR < SEUIL_12 and IAVIM + NAPCRPAVIM >= SEUIL_61) else 0
LIGRESINF50 = is_positive(is_positive(IND_REST50) * is_positive(IREST) + is_positive(RECUM) * 1 - positif_ou_nul(RECUM - SEUIL_8)) * is_positive(SEUIL_8 - IRESTIT) * null(LIGRESINF)
LIGDIPLONI = is_positive(INDREV1A8) * is_positive(null(NATIMP) + is_positive(IREST) + 1 - is_positive(NAPTEMP)) * is_positive(REVFONC) * 1 - null(2 - V_REGCO) * 1 - null(4 - V_REGCO) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - LIGDIPLOI * LIG1
LIGHAUTDEG = is_positive(NATIMP - 71) * is_positive(HAUTREVDEG) * LIG2
INDIMPOS = is_positive(null(1 - NATIMP) + 0)
INDNMRI = INDNMR * is_positive(RED)
LIGNITDEG = is_positive(TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET) * positif_ou_nul(IRB2 - SEUIL_61) * positif_ou_nul(TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET - SEUIL_12) * null(INDNIRI) * 1 - is_positive(IBM23) * is_positive(1 - null(2 - V_REGCO)) * INDREV1A8 * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * is_positive(INDCTX) * LIG2
LIGTAXADEG = is_positive(NATIMP - 71) * is_positive(TAXADEG) * LIG2
LIG2080 = is_positive(NATIMP - 71) * LIG2
LIGNIIRAF = null(IAD11) * is_positive(IRESTIT) * 1 - is_positive(INDNIRI) * 1 - is_positive(IREP) * 1 - is_positive(IPROP) * 1 - positif_ou_nul(NAPTIR) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * is_positive(1 + null(3 - INDIRPS)) * LIG2
LIG2380 = (IND_SPR * positif_ou_nul(V_8ZT - RBG) * is_positive(V_8ZT) * 1 - present(BRAS) * 1 - present(IPSOUR) * V_CR2 * LIG2) if (NATIMP == 0 or NATIMP == 21 or NATIMP == 70 or NATIMP == 91) else 0
LIG61NRSUP = is_positive(IBM23) * is_positive(ITRED) * is_positive(IAVIM + NAPCRPAVIM) * is_positive(SEUIL_61 - IAVIM + NAPCRPAVIM) * 1 - is_positive(INDNMR2) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * 1 - is_positive(NRINET) * is_positive(V_NOTRAIT - 20) * LIG2
IND_NIRED = (1 - INDCTX) if (CODINI == 3 or CODINI == 5 or CODINI == 13 and IAVIM + NAPCRPAVIM - TAXASSUR + IPCAPTAXT + TAXLOY + CHRAPRES == 0 and V_CR2 == 0) else 0
LIG61DEG = is_positive(ITRED) * is_positive(IAVIM) * is_positive(SEUIL_61 - IAVIM) * 1 - is_positive(INDNMR2) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * is_positive(INDCTX) * LIG2
LIG80F = is_positive(is_positive(SEUIL_12 - NAPTIR) * is_positive(NAPTIR) * is_positive(SEUIL_61 - NAPCRP) * positif_ou_nul(IAVIM - SEUIL_61) + is_positive(SEUIL_12 - NAPCRP + NAPTIR) * is_positive(NAPCRP + NAPTIR) * positif_ou_nul(NAPCRP - SEUIL_61) * 1 - is_positive(IRANT) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * is_positive(20 - V_NOTRAIT) * 1 - null(V_REGCO - 2) * LIG2)
LIG21401 = (1 - INDCTX * INDREV1A8 * 1 - is_positive(IRANT) * null(NAPT) * LIG2 + null(IINET + NAPTOTA) * null(INDREV1A8) * is_positive(IND_REV) * is_positive(20 - V_NOTRAIT)) if (V_CR2 + 0 == 0 and NATIMP == 1 and IRNET + TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET + NRINET - NAPTOTA + NAPCR >= SEUIL_12 or V_CR2 + 0 == 1 and NATIMP == 1 or NATIMP == 0 and LIG2141 + 0 == 0) else 0
IND_IRNMR = (1 - INDCTX) if (CODINI == 8 and NATIMP == 0 and V_CR2 == 0) else 0
LIGPERPI = is_positive(PERPIMPATRIE + 0) * is_positive(PERPINDV + PERPINDC + PERPINDP + PERPINDCV + PERPINDCC + PERPINDCP) * is_positive(PERPINDAFFV + PERPINDAFFC + PERPINDAFFP) * 1 - null(PERP_COTV + PERP_COTC + PERP_COTP + 0) * 1 - INDIMPOS * 1 - is_positive(PERP_COND1 + PERP_COND2) * 1 - is_positive(LIG8FV) * 1 - is_positive(LIG2501) * LIG1 * 1 - V_CNR * LIG2 + 0
LIGPERP = 1 - is_positive(PERPIMPATRIE + 0) * is_positive(PERPINDV + PERPINDC + PERPINDP + PERPINDCV + PERPINDCC + PERPINDCP) * is_positive(PERPINDAFFV + PERPINDAFFC + PERPINDAFFP) * 1 - null(PERP_COTV + PERP_COTC + PERP_COTP + 0) * 1 - INDIMPOS * 1 - is_positive(PERP_COND1 + PERP_COND2) * 1 - is_positive(LIG8FV) * 1 - is_positive(LIG2501) * LIG1 * 1 - V_CNR * LIG2 + 0
LIGPERPMI = is_positive(PERPIMPATRIE + 0) * is_positive(PERPINDV + PERPINDC + PERPINDP + PERPINDCV + PERPINDCC + PERPINDCP) * is_positive(PERPINDAFFV + PERPINDAFFC + PERPINDAFFP) * 1 - null(PERP_COTV + PERP_COTC + PERP_COTP + 0) * 1 - INDIMPOS * is_positive(PERP_MUT) * is_positive(PERP_COND1 + PERP_COND2) * 1 - is_positive(LIG8FV) * 1 - is_positive(LIG2501) * LIG1 * 1 - V_CNR * LIG2 + 0
PPEIMPA = is_positive(PPENATIMPA) * positif_ou_nul(PPERESTA) * PPETOTX - PPERSA - PPERESTA
LIG400RI = INDNMR1 * is_positive(ITRED) * 1 - null(IRB) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * is_positive(20 - V_NOTRAIT) * LIG2
LIGAUCUN = is_positive(positif_ou_nul(IAVIM - SEUIL_61) + positif_ou_nul(NAPCRP - SEUIL_61) * null(TOTNET) * null(NAPT) * 1 - is_positive(IREST) * 1 - is_positive(LIG80F) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * 1 - is_positive(NRINET) * 1 - null(V_REGCO - 2) * is_positive(20 - V_NOTRAIT) * LIG2)
LIGPERPM = 1 - is_positive(PERPIMPATRIE + 0) * is_positive(PERPINDV + PERPINDC + PERPINDP + PERPINDCV + PERPINDCC + PERPINDCP) * is_positive(PERPINDAFFV + PERPINDAFFC + PERPINDAFFP) * 1 - null(PERP_COTV + PERP_COTC + PERP_COTP + 0) * 1 - INDIMPOS * is_positive(PERP_MUT) * is_positive(PERP_COND1 + PERP_COND2) * 1 - is_positive(LIG8FV) * 1 - is_positive(LIG2501) * LIG1 * 1 - V_CNR * LIG2 + 0
LIGNIRI = INDNIRI * null(IRNETBIS) * null(NATIMP) * null(NAPCRP) * 1 - is_positive(IRE) * 1 - is_positive(LIGIDB) * 1 - is_positive(IREP) * 1 - is_positive(IPROP) * 1 - is_positive(AVFISCOPTER) * 1 - null(V_REGCO - 2) * 1 - is_positive(TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * 1 - is_positive(NRINET) * is_positive(20 - V_NOTRAIT) * LIG2
LIG2355 = is_positive(IND_NI * 1 - is_positive(V_ANTRE) + INDNMR1 + INDNMR2 + is_positive(NAT1BIS) * null(NAPT) * is_positive(IRNET + TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET) + is_positive(SEUIL_12 - IAN + RPEN - IAVT + TAXASSUR + IPCAPTAXT + TAXLOY + CHRAPRES - IRANT) * positif_ou_nul(IAN + RPEN - IAVT + TAXASSUR + IPCAPTAXT + TAXLOY + CHRAPRES - IRANT)) * is_positive(INDREV1A8) * 1 - null(NATIMP - 1) + null(NATIMP - 1) * is_positive(IRANT) * 1 - LIGPS * LIG2
LIGPERPVP = is_positive(PERPINDP + PERPINDCP) * is_positive(PERPINDAFFP) * is_positive(PERPINDV + PERPINDCV) * is_positive(PERPINDAFFV) * 1 - is_positive(PERPINDC + PERPINDCC) * is_positive(PERPINDAFFC) * LIG1 * 1 - V_CNR * LIG2 * is_positive(LIGPERP + LIGPERPI + LIGPERPM + LIGPERPMI)
LIGPERPMAR = is_positive(PERPINDV + PERPINDCV) * is_positive(PERPINDAFFV) * is_positive(PERPINDC + PERPINDCC) * is_positive(PERPINDAFFC) * 1 - is_positive(PERPINDP + PERPINDCP) * is_positive(PERPINDAFFP) * LIG1 * 1 - V_CNR * LIG2 * is_positive(LIGPERP + LIGPERPI + LIGPERPM + LIGPERPMI)
LIGPERPFAM = is_positive(PERPINDV + PERPINDCV) * is_positive(PERPINDAFFV) * is_positive(PERPINDC + PERPINDCC) * is_positive(PERPINDAFFC) * is_positive(PERPINDP + PERPINDCP) * is_positive(PERPINDAFFP) * LIG1 * 1 - V_CNR * LIG2 * is_positive(LIGPERP + LIGPERPI + LIGPERPM + LIGPERPMI)
LIGPERPCP = is_positive(PERPINDP + PERPINDCP) * is_positive(PERPINDAFFP) * is_positive(PERPINDC + PERPINDCC) * is_positive(PERPINDAFFV) * 1 - is_positive(PERPINDV + PERPINDCV) * is_positive(PERPINDAFFV) * LIG1 * 1 - V_CNR * LIG2 * is_positive(LIGPERP + LIGPERPI + LIGPERPM + LIGPERPMI)
LIGDEG61 = is_positive(IRNETBIS) * is_positive(SEUIL_61 - IAMD1) * is_positive(SEUIL_61 - NRINET) * is_positive(IBM23) * 1 - is_positive(LIG61DEG) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * is_positive(INDCTX) * LIG2
LIGPERPV = is_positive(PERPINDV + PERPINDCV) * is_positive(PERPINDAFFV) * 1 - is_positive(PERPINDC + PERPINDCC) * is_positive(PERPINDAFFC) * 1 - is_positive(PERPINDP + PERPINDCP) * is_positive(PERPINDAFFP) * LIG1 * 1 - V_CNR * LIG2 * is_positive(LIGPERP + LIGPERPI + LIGPERPM + LIGPERPMI)
LIGPERPC = is_positive(PERPINDC + PERPINDCC) * is_positive(PERPINDAFFC) * 1 - is_positive(PERPINDV + PERPINDCV) * is_positive(PERPINDAFFV) * 1 - is_positive(PERPINDP + PERPINDCP) * is_positive(PERPINDAFFP) * LIG1 * 1 - V_CNR * LIG2 * is_positive(LIGPERP + LIGPERPI + LIGPERPM + LIGPERPMI)
LIGPERPP = is_positive(PERPINDP + PERPINDCP) * is_positive(PERPINDAFFP) * 1 - is_positive(PERPINDV + PERPINDCV) * is_positive(PERPINDAFFV) * 1 - is_positive(PERPINDC + PERPINDCC) * is_positive(PERPINDAFFC) * LIG1 * 1 - V_CNR * LIG2 * is_positive(LIGPERP + LIGPERPI + LIGPERPM + LIGPERPMI)
LIGNIDB = null(IDOM11 - DEC11) * is_positive(SEUIL_61 - TAXASSUR - IPCAPTAXTOT - TAXLOY - CHRAPRES) * is_positive(SEUIL_61 - NAPCRP) * is_positive(TAXASSUR + IPCAPTAXTOT + TAXLOY + CHRAPRES + NAPCRP) * null(IRNETBIS) * 1 - is_positive(IRESTIT) * 1 - is_positive(IREP) * 1 - is_positive(IPROP) * 1 - is_positive(LIG80F) * 1 - is_positive(LIG400RI) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(NRINET) * 1 - is_positive(IMPRET) * 1 - null(V_REGCO - 2) * LIG2
LIGNIDEG = null(IDRS3 - IDEC) * null(IBM23) * is_positive(SEUIL_61 - TAXASSUR) * is_positive(SEUIL_61 - IPCAPTAXT) * is_positive(SEUIL_61 - TAXLOY) * is_positive(SEUIL_61 - CHRAPRES) * is_positive(SEUIL_12 - IRNET) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGDEG61) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * is_positive(INDCTX) * LIG2
LIGCBAIL = null(IDOM11 - DEC11) * 1 - is_positive(IBM23) * positif_ou_nul(TAXASSUR + IPCAPTAXTOT + TAXLOY + CHRAPRES + NAPCRP - SEUIL_61) * positif_ou_nul(NAPTIR + NAPCRP - SEUIL_12) * 1 - is_positive(LIGNIDB) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * 1 - is_positive(NRINET) * 1 - null(V_REGCO - 2) * LIG2
LIG400F = INDNMR1 * is_positive(IAMD2) * 1 - INDNIRI * positif_ou_nul(NAPTIR) * 1 - is_positive(LIG400RI) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGNIDB) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * 1 - is_positive(NRINET) * is_positive(20 - V_NOTRAIT) * LIG2
LIGIRNPS = is_positive(positif_ou_nul(IAVIM - SEUIL_61) * positif_ou_nul(NAPTIR - SEUIL_12) * is_positive(IBM23) + is_positive(IRESTIT + 0)) * is_positive(SEUIL_61 - NAPCRP) * is_positive(NAPCRP) * 1 - is_positive(LIG400RI) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGNIDB) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * 1 - is_positive(NRINET) * LIG2
LIGPSNIR = is_positive(IAVIM) * is_positive(SEUIL_61 - IAVIM) * is_positive(SEUIL_61 - NAPTIR) * positif_ou_nul(NAPCRP - SEUIL_61) * is_positive(IINET) * is_positive(20 - V_NOTRAIT) + is_positive(V_NOTRAIT - 20) * 1 - is_positive(LIG400RI) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGNIDB) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * 1 - is_positive(NRINET) * LIG2
LIGDEG12 = is_positive(IRNET + TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET) * is_positive(SEUIL_12 - IRNET - TAXANET - PCAPNET - TAXLOYNET - HAUTREVNET) * 1 - null(V_REGCO - 2) * 1 - is_positive(LIGNIDEG) * 1 - is_positive(LIGDEG61) * 1 - is_positive(LIG61DEG) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * is_positive(INDCTX) * LIG2
LIGNIIR = null(IRNETBIS) * null(NRINET + 0) * null(NATIMP + 0) * null(TAXANET + PCAPNET + TAXLOYNET + HAUTREVNET + NAPCRP + 0) * 1 - is_positive(IREP) * 1 - is_positive(IPROP) * 1 - is_positive(IRESTIT) * 1 - is_positive(IDEGR) * 1 - is_positive(LIGIDB) * 1 - is_positive(LIGNIRI) * 1 - is_positive(LIG80F) * 1 - is_positive(LIG400RI) * 1 - is_positive(LIG400F) * 1 - is_positive(LIGAUCUN) * 1 - is_positive(LIG2141) * 1 - is_positive(LIG2501) * 1 - is_positive(LIG8FV) * 1 - is_positive(LIGNIDB) * 1 - null(V_REGCO - 2 + 0) * 1 - is_positive(LIGTROP) * 1 - is_positive(LIGTROPREST) * 1 - is_positive(IMPRET) * 1 - is_positive(NRINET) * is_positive(20 - V_NOTRAIT) * LIG2

