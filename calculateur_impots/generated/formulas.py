# -*- coding: utf-8 -*-
# flake8: noqa
# WARNING: This file is automatically generated by a script. No not modify it by hand!

from ..formulas_helpers import *
from .constants import *

def compute(base_variables, saisie_variables):
    @cache_result
    def RASAR():
        """
        Montant de la retenue a la source de 12%
        """
        return arr((saisie_variables.get('BRAS', 0) and TX_RASAR and saisie_variables.get('BRAS', 0) * TX_RASAR / 100))

    @cache_result
    def V_CR2():
        """
        Code regime taux minimum
        """
        return ((saisie_variables.get('V_REGCO', 0) + 0)) in (2,)

    @cache_result
    def V_CNR():
        """
        Code non resident et regime taux minimum ou valeur locative
        """
        return ((saisie_variables.get('V_REGCO', 0) + 0)) in (2, 4)

    @cache_result
    def V_CNR2():
        """
        Code non resident du regime general
        """
        return ((saisie_variables.get('V_REGCO', 0) + 0)) in (2, 3, 4)

    @cache_result
    def TSBNV():
        """
        somme TS + allocation
        From TSBNi
        """
        return (saisie_variables.get('TSHALLOV', 0) + saisie_variables.get('ALLOV', 0))

    # WARNING: the variable "_2TSNV" is used in a formula at least, but is not defined.
    def _2TSNV(): return 0
    @cache_result
    def EXTSV():
        """
        Salaires totaux vous (1AJ + AAJ +BAJ + CAJ)
        """
        return (TSBNV() + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + _2TSNV())

    @cache_result
    def TSBV():
        """
        Salaires declares Vous
        """
        return (EXTSV() + somme([saisie_variables.get('GLD1V', 0), saisie_variables.get('GLD2V', 0), saisie_variables.get('GLD3V', 0)]) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0))

    @cache_result
    def DEDMINV():
        """
        Deduction minimale a appliquer sur salaires Vous
        From DEDMINi
        """
        return ((positif(saisie_variables.get('DETSV', 0)) and positif(saisie_variables.get('DETSV', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETSV', 0))) and (1 - positif(saisie_variables.get('DETSV', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TPS10V():
        """
        abattement 10% brut
        From TPS10i
        """
        return arr((TSBV() and TX_DEDFORFTS and TSBV() * TX_DEDFORFTS / 100))

    @cache_result
    def DFNV():
        """
        Deduction forfaitaire de 10%
        From DFNi
        """
        return min(PLAF_DEDFORFTS, TPS10V())

    # WARNING: the variable "_10MINSV" is used in a formula at least, but is not defined.
    def _10MINSV(): return 0
    @cache_result
    def FRDV():
        """
        Frais reels declares
        From FRDi
        """
        return (((1 - positif(base_variables['PREM8_11'])) and saisie_variables.get('FRNV', 0) and (1 - positif(base_variables['PREM8_11'])) * saisie_variables.get('FRNV', 0) * positif((saisie_variables.get('FRNV', 0) - _10MINSV()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min(saisie_variables.get('FRNV', 0), base_variables['FRDPROVV'])) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min(saisie_variables.get('FRNV', 0), min(base_variables['FRDPROVV'], max(base_variables['FRDPROVVP2'], base_variables['FRDPROVV1731'])))))

    @cache_result
    def IND_10V():
        """
        Indicateur d'affichage deduction 10%
        From IND_10i
        """
        return positif_ou_nul((_10MINSV() - FRDV()))

    @cache_result
    def IND_10MIN_0V():
        """
        booleen d'existence d'une deduction minimale hors D.A.
        From IND_10MIN_0i
        """
        return (positif((DEDMINV() - DFNV())) and positif((DEDMINV() - DFNV())) * positif(TSBV()))

    @cache_result
    def IND_MINV():
        """
    
        From IND_MINi
        """
        return (1 - positif(IND_10MIN_0V()))

    @cache_result
    def D10MV():
        """
        deduction 10% hors DA apres prise en compte de la deduction minimale
        From D10Mi
        """
        return ((IND_MINV() and IND_MINV() * DFNV()) + ((1 - IND_MINV()) and (1 - IND_MINV()) * _10MINSV()))

    @cache_result
    def FPTV():
        """
        deduction de 10% ou frais reels
        From FPTi
        """
        return max(FRDV(), _10MINSV())

    @cache_result
    def REP10V():
        """
        frais de 10% servant aux abtt. de 10% pour GL et SA
        From REP10i
        """
        return ((IND_10V() and IND_10V() * D10MV()) + ((1 - IND_10V()) and (1 - IND_10V()) * FPTV()))

    @cache_result
    def ABTS1AJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('TSHALLOV', 0)) and positif(saisie_variables.get('TSHALLOV', 0)) * arr((REP10V() and saisie_variables.get('TSHALLOV', 0) and REP10V() * saisie_variables.get('TSHALLOV', 0) / TSBV())))

    @cache_result
    def TSN1AJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLOV', 0) - ABTS1AJ())

    @cache_result
    def ABTS1AP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('ALLOV', 0)) and positif(saisie_variables.get('ALLOV', 0)) * ((positif((saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((REP10V() and saisie_variables.get('ALLOV', 0) and REP10V() * saisie_variables.get('ALLOV', 0) / TSBV()))) + ((1 - positif((saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (REP10V() - ABTS1AJ())))))

    @cache_result
    def TSN1AP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLOV', 0) - ABTS1AP())

    @cache_result
    def ABTS3VJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('BPCOSAV', 0)) and positif(saisie_variables.get('BPCOSAV', 0)) * ((positif((saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((REP10V() and saisie_variables.get('BPCOSAV', 0) and REP10V() * saisie_variables.get('BPCOSAV', 0) / TSBV()))) + ((1 - positif((saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (REP10V() - ABTS1AJ() - ABTS1AP())))))

    @cache_result
    def TSN3VJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('BPCOSAV', 0) - ABTS3VJ())

    @cache_result
    def ABTS1TT():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('GLDGRATV', 0)) and positif(saisie_variables.get('GLDGRATV', 0)) * ((positif((saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((REP10V() and saisie_variables.get('GLDGRATV', 0) and REP10V() * saisie_variables.get('GLDGRATV', 0) / TSBV()))) + ((1 - positif((saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (REP10V() - ABTS1AJ() - ABTS1AP() - ABTS3VJ())))))

    @cache_result
    def TSN1TT():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLDGRATV', 0) - ABTS1TT())

    @cache_result
    def ABTSRAJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('CARTSV', 0)) and positif(saisie_variables.get('CARTSV', 0)) * ((positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((REP10V() and saisie_variables.get('CARTSV', 0) and REP10V() * saisie_variables.get('CARTSV', 0) / TSBV()))) + ((1 - positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (REP10V() - ABTS1AJ() - ABTS1AP() - ABTS3VJ() - ABTS1TT())))))

    @cache_result
    def TSNRAJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSV', 0) - ABTSRAJ())

    @cache_result
    def ABTSRAP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('REMPLAV', 0)) and positif(saisie_variables.get('REMPLAV', 0)) * ((positif((saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((REP10V() and saisie_variables.get('REMPLAV', 0) and REP10V() * saisie_variables.get('REMPLAV', 0) / TSBV()))) + ((1 - positif((saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (REP10V() - ABTS1AJ() - ABTS1AP() - ABTS1TT() - ABTS3VJ() - ABTSRAJ())))))

    @cache_result
    def TSNRAP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAV', 0) - ABTSRAP())

    @cache_result
    def ABTSV():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (ABTS1AJ() + ABTS1AP() + ABTS3VJ() + ABTS1TT() + ABTSRAJ() + ABTSRAP())

    @cache_result
    def ABDOMDAJ():
        """
        Abattement frais pro proratise pour DAJ
        """
        return ((positif(saisie_variables.get('CODDAJ', 0)) and positif(saisie_variables.get('CODDAJ', 0)) * ((positif((saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((REP10V() and saisie_variables.get('CODDAJ', 0) and REP10V() * saisie_variables.get('CODDAJ', 0) / TSBV()))) + ((1 - positif((saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (REP10V() - ABTSV()))))) + 0)

    @cache_result
    def TSNDAJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CODDAJ', 0) - ABDOMDAJ())

    @cache_result
    def ABDOMEAJ():
        """
        Abattement frais pro proratise pour EAJ
        """
        return ((positif(saisie_variables.get('CODEAJ', 0)) and positif(saisie_variables.get('CODEAJ', 0)) * ((positif((saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((REP10V() and saisie_variables.get('CODEAJ', 0) and REP10V() * saisie_variables.get('CODEAJ', 0) / TSBV()))) + ((1 - positif((saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (REP10V() - ABTSV() - ABDOMDAJ()))))) + 0)

    @cache_result
    def TSNEAJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CODEAJ', 0) - ABDOMEAJ())

    @cache_result
    def ABGL1V():
        """
        part de l'abattement pour frais sur gains de levee d'option
        """
        return ((positif(saisie_variables.get('GLD1V', 0)) and positif(saisie_variables.get('GLD1V', 0)) * ((positif((saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((REP10V() and saisie_variables.get('GLD1V', 0) and REP10V() * saisie_variables.get('GLD1V', 0) / TSBV()))) + ((1 - positif((saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (REP10V() - ABTSV() - ABDOMDAJ() - ABDOMEAJ()))))) + 0)

    @cache_result
    def TSNGL1V():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD1V', 0) - ABGL1V())

    @cache_result
    def ABGL2V():
        """
        part de l'abattement pour frais sur gains de levee d'option
        """
        return ((positif(saisie_variables.get('GLD2V', 0)) and positif(saisie_variables.get('GLD2V', 0)) * ((positif(saisie_variables.get('GLD3V', 0)) and positif(saisie_variables.get('GLD3V', 0)) * arr((REP10V() and saisie_variables.get('GLD2V', 0) and REP10V() * saisie_variables.get('GLD2V', 0) / TSBV()))) + ((1 - positif(saisie_variables.get('GLD3V', 0))) and (1 - positif(saisie_variables.get('GLD3V', 0))) * max(0, (REP10V() - ABTSV() - ABDOMDAJ() - ABDOMEAJ() - ABGL1V()))))) + 0)

    @cache_result
    def TSNGL2V():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD2V', 0) - ABGL2V())

    @cache_result
    def ABGL3V():
        """
        part de l'abattement pour frais sur gains de levee d'option
        """
        return (max(0, (REP10V() - ABTSV() - ABDOMDAJ() - ABDOMEAJ() - ABGL1V() - ABGL2V())) + 0)

    @cache_result
    def TSNGL3V():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD3V', 0) - ABGL3V())

    @cache_result
    def TSNTV():
        """
        salaires apres deduction des frais professionnels
        """
        return (TSN1AJ() + TSN1AP() + TSN3VJ() + TSN1TT() + TSNRAJ() + TSNRAP() + TSNDAJ() + TSNEAJ() + TSNGL1V() + TSNGL2V() + TSNGL3V())

    @cache_result
    def PRBV():
        """
        Pensions brutes totales
        From PRBi
        """
        return (saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0) + saisie_variables.get('PENINV', 0))

    # WARNING: the variable "_2PRBV" is used in a formula at least, but is not defined.
    def _2PRBV(): return 0
    @cache_result
    def EXPRV():
        """
        Pensions totales vous (1AS + AAS +BAS + CAS)
        From EXPRi
        """
        return (PRBV() + _2PRBV() + saisie_variables.get('PEBFV', 0))

    @cache_result
    def PLRV():
        """
        Seuil calcule de l'abattement
        From PLRi
        """
        return min(MIN_DEDPR, EXPRV())

    @cache_result
    def IND_APBV():
        """
        booleen application deduction minimale pensions
        From IND_APBi
        """
        return positif_ou_nul((PLRV() - (EXPRV() and TX_DEDPER and EXPRV() * TX_DEDPER / 100)))

    @cache_result
    def APBV():
        """
        Minimum d'abattement 10% (PR)
        From APBi
        """
        return max(PLRV(), (EXPRV() and TX_DEDPER and EXPRV() * TX_DEDPER / 100))

    @cache_result
    def PRBC():
        """
        Pensions brutes totales
        From PRBi
        """
        return (saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0) + saisie_variables.get('PENINC', 0))

    # WARNING: the variable "_2PRBC" is used in a formula at least, but is not defined.
    def _2PRBC(): return 0
    @cache_result
    def EXPRC():
        """
        Pensions totales conjoint (1BS + ABS +BBS + CBS)
        From EXPRi
        """
        return (PRBC() + _2PRBC() + saisie_variables.get('PEBFC', 0))

    @cache_result
    def PLRC():
        """
        Seuil calcule de l'abattement
        From PLRi
        """
        return min(MIN_DEDPR, EXPRC())

    @cache_result
    def APBC():
        """
        Minimum d'abattement 10% (PR)
        From APBi
        """
        return max(PLRC(), (EXPRC() and TX_DEDPER and EXPRC() * TX_DEDPER / 100))

    @cache_result
    def IND_APBC():
        """
        booleen application deduction minimale pensions
        From IND_APBi
        """
        return positif_ou_nul((PLRC() - (EXPRC() and TX_DEDPER and EXPRC() * TX_DEDPER / 100)))

    @cache_result
    def PRB1():
        """
        Pensions brutes totales
        From PRBi
        """
        return (saisie_variables.get('PRBR1', 0) + saisie_variables.get('PALI1', 0) + saisie_variables.get('PENIN1', 0))

    # WARNING: the variable "_2PRB1" is used in a formula at least, but is not defined.
    def _2PRB1(): return 0
    @cache_result
    def EXPR1():
        """
        Pensions totales PAC (1CS + ACS +BCS + CCS)
        From EXPRi
        """
        return (PRB1() + _2PRB1() + saisie_variables.get('PEBF1', 0))

    @cache_result
    def PLR1():
        """
        Seuil calcule de l'abattement
        From PLRi
        """
        return min(MIN_DEDPR, EXPR1())

    @cache_result
    def APB1():
        """
        Minimum d'abattement 10% (PR)
        From APBi
        """
        return max(PLR1(), (EXPR1() and TX_DEDPER and EXPR1() * TX_DEDPER / 100))

    @cache_result
    def IND_APB1():
        """
        booleen application deduction minimale pensions
        From IND_APBi
        """
        return positif_ou_nul((PLR1() - (EXPR1() and TX_DEDPER and EXPR1() * TX_DEDPER / 100)))

    @cache_result
    def PRB2():
        """
        Pensions brutes totales
        From PRBi
        """
        return (saisie_variables.get('PRBR2', 0) + saisie_variables.get('PALI2', 0) + saisie_variables.get('PENIN2', 0))

    # WARNING: the variable "_2PRB2" is used in a formula at least, but is not defined.
    def _2PRB2(): return 0
    @cache_result
    def EXPR2():
        """
        Pensions totales PAC (1DS + ADS +BDS + CDS)
        From EXPRi
        """
        return (PRB2() + _2PRB2() + saisie_variables.get('PEBF2', 0))

    @cache_result
    def PLR2():
        """
        Seuil calcule de l'abattement
        From PLRi
        """
        return min(MIN_DEDPR, EXPR2())

    @cache_result
    def APB2():
        """
        Minimum d'abattement 10% (PR)
        From APBi
        """
        return max(PLR2(), (EXPR2() and TX_DEDPER and EXPR2() * TX_DEDPER / 100))

    @cache_result
    def IND_APB2():
        """
        booleen application deduction minimale pensions
        From IND_APBi
        """
        return positif_ou_nul((PLR2() - (EXPR2() and TX_DEDPER and EXPR2() * TX_DEDPER / 100)))

    @cache_result
    def PRB3():
        """
        Pensions brutes totales
        From PRBi
        """
        return (saisie_variables.get('PRBR3', 0) + saisie_variables.get('PALI3', 0) + saisie_variables.get('PENIN3', 0))

    # WARNING: the variable "_2PRB3" is used in a formula at least, but is not defined.
    def _2PRB3(): return 0
    @cache_result
    def EXPR3():
        """
        Pensions totales PAC (1RS + ARS +BRS + CRS)
        From EXPRi
        """
        return (PRB3() + _2PRB3() + saisie_variables.get('PEBF3', 0))

    @cache_result
    def PLR3():
        """
        Seuil calcule de l'abattement
        From PLRi
        """
        return min(MIN_DEDPR, EXPR3())

    @cache_result
    def APB3():
        """
        Minimum d'abattement 10% (PR)
        From APBi
        """
        return max(PLR3(), (EXPR3() and TX_DEDPER and EXPR3() * TX_DEDPER / 100))

    @cache_result
    def IND_APB3():
        """
        booleen application deduction minimale pensions
        From IND_APBi
        """
        return positif_ou_nul((PLR3() - (EXPR3() and TX_DEDPER and EXPR3() * TX_DEDPER / 100)))

    @cache_result
    def PRB4():
        """
        Pensions brutes totales
        From PRBi
        """
        return (saisie_variables.get('PRBR4', 0) + saisie_variables.get('PALI4', 0) + saisie_variables.get('PENIN4', 0))

    # WARNING: the variable "_2PRB4" is used in a formula at least, but is not defined.
    def _2PRB4(): return 0
    @cache_result
    def EXPR4():
        """
        Pensions totales PAC (1TS + ATS +BTS + CTS)
        From EXPRi
        """
        return (PRB4() + _2PRB4() + saisie_variables.get('PEBF4', 0))

    @cache_result
    def PLR4():
        """
        Seuil calcule de l'abattement
        From PLRi
        """
        return min(MIN_DEDPR, EXPR4())

    @cache_result
    def APB4():
        """
        Minimum d'abattement 10% (PR)
        From APBi
        """
        return max(PLR4(), (EXPR4() and TX_DEDPER and EXPR4() * TX_DEDPER / 100))

    @cache_result
    def IND_APB4():
        """
        booleen application deduction minimale pensions
        From IND_APBi
        """
        return positif_ou_nul((PLR4() - (EXPR4() and TX_DEDPER and EXPR4() * TX_DEDPER / 100)))

    @cache_result
    def PL_PB():
        """
        plafond pensions a repartir
        """
        return arr((PLAF_DEDPRFOYER - somme([(APBV() and APBV() * IND_APBV()), (APBC() and APBC() * IND_APBC()), (APB1() and APB1() * IND_APB1()), (APB2() and APB2() * IND_APB2()), (APB3() and APB3() * IND_APB3()), (APB4() and APB4() * IND_APB4())])))

    @cache_result
    def ABPRV():
        """
        Abattement brut avant ajustement (pensions retraites 10%)
        From ABPRi
        """
        return arr((((1 - IND_APBV()) and (1 - IND_APBV()) * min(APBV(), (PL_PB() and APBV() and PL_PB() * APBV() / somme([(APBV() and APBV() * (1 - IND_APBV())), (APBC() and APBC() * (1 - IND_APBC())), (APB1() and APB1() * (1 - IND_APB1())), (APB2() and APB2() * (1 - IND_APB2())), (APB3() and APB3() * (1 - IND_APB3())), (APB4() and APB4() * (1 - IND_APB4()))])))) + (IND_APBV() and IND_APBV() * APBV())))

    @cache_result
    def APRV():
        """
        Abattement pensions retraites 10%
        """
        return ((IND_APBV() and IND_APBV() * ABPRV()) + ((1 - IND_APBV()) and (1 - IND_APBV()) * min(ABPRV(), PL_PB())))

    @cache_result
    def PRNNV():
        """
        pensions nettes d'abattement de 10%
        From PRNNi
        """
        return (EXPRV() - APRV())

    @cache_result
    def TSNV():
        """
        Traitements et salaires nets de frais
        From TSNi
        """
        return ((positif(TSNTV()) and positif(TSNTV()) * min(0, (TSNTV() + PRNNV()))) + (positif_ou_nul(TSNTV()) and positif_ou_nul(TSNTV()) * TSNTV()))

    @cache_result
    def TSV():
        """
    
        """
        return (TSNV() - somme([max(0, (saisie_variables.get('GLD1V', 0) - ABGL1V())), max(0, (saisie_variables.get('GLD2V', 0) - ABGL2V())), max(0, (saisie_variables.get('GLD3V', 0) - ABGL3V()))]) - max((saisie_variables.get('CODDAJ', 0) - ABDOMDAJ()), 0) - max((saisie_variables.get('CODEAJ', 0) - ABDOMEAJ()), 0))

    @cache_result
    def TSNNV():
        """
        salaires normaux hors droits d'auteur imposables - Vous
        From TSNNi
        """
        return ((positif(TSV()) and positif(TSV()) * arr((TSV() and (TSBNV() + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0)) and TSV() * (TSBNV() + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0)) / EXTSV()))) + ((1 - positif(TSV())) and (1 - positif(TSV())) * TSV()))

    @cache_result
    def PRNV():
        """
        Pensions et rentes nettes
        From PRNi
        """
        return ((positif(TSNTV()) and positif((TSNTV() + PRNNV())) and positif(TSNTV()) * positif((TSNTV() + PRNNV())) * (TSNTV() + PRNNV())) + (positif_ou_nul(TSNTV()) and positif_ou_nul(TSNTV()) * PRNNV()))

    @cache_result
    def PRRV():
        """
        Pensions nettes ordinaires - Vous
        From PRRi
        """
        return arr((PRNV() and PRBV() and PRNV() * PRBV() / EXPRV()))

    @cache_result
    def TSBNC():
        """
        somme TS + allocation
        From TSBNi
        """
        return (saisie_variables.get('TSHALLOC', 0) + saisie_variables.get('ALLOC', 0))

    # WARNING: the variable "_2TSNC" is used in a formula at least, but is not defined.
    def _2TSNC(): return 0
    @cache_result
    def EXTSC():
        """
        Salaires totaux conjoint (1BJ + ABJ +BBJ + CBJ)
        """
        return (TSBNC() + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + _2TSNC())

    @cache_result
    def TSBC():
        """
        Salaires declares Conjoint
        """
        return (EXTSC() + somme([saisie_variables.get('GLD1C', 0), saisie_variables.get('GLD2C', 0), saisie_variables.get('GLD3C', 0)]) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0))

    @cache_result
    def DEDMINC():
        """
        Deduction minimale a appliquer sur salaires Conjoint
        From DEDMINi
        """
        return ((positif(saisie_variables.get('DETSC', 0)) and positif(saisie_variables.get('DETSC', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETSC', 0))) and (1 - positif(saisie_variables.get('DETSC', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TPS10C():
        """
        abattement 10% brut
        From TPS10i
        """
        return arr((TSBC() and TX_DEDFORFTS and TSBC() * TX_DEDFORFTS / 100))

    @cache_result
    def DFNC():
        """
        Deduction forfaitaire de 10%
        From DFNi
        """
        return min(PLAF_DEDFORFTS, TPS10C())

    # WARNING: the variable "_10MINSC" is used in a formula at least, but is not defined.
    def _10MINSC(): return 0
    @cache_result
    def FRDC():
        """
        Frais reels declares
        From FRDi
        """
        return (((1 - positif(base_variables['PREM8_11'])) and saisie_variables.get('FRNC', 0) and (1 - positif(base_variables['PREM8_11'])) * saisie_variables.get('FRNC', 0) * positif((saisie_variables.get('FRNC', 0) - _10MINSC()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min(saisie_variables.get('FRNC', 0), base_variables['FRDPROVC'])) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min(saisie_variables.get('FRNC', 0), min(base_variables['FRDPROVC'], max(base_variables['FRDPROVCP2'], base_variables['FRDPROVC1731'])))))

    @cache_result
    def IND_10C():
        """
        Indicateur d'affichage deduction 10%
        From IND_10i
        """
        return positif_ou_nul((_10MINSC() - FRDC()))

    @cache_result
    def IND_10MIN_0C():
        """
        booleen d'existence d'une deduction minimale hors D.A.
        From IND_10MIN_0i
        """
        return (positif((DEDMINC() - DFNC())) and positif((DEDMINC() - DFNC())) * positif(TSBC()))

    @cache_result
    def IND_MINC():
        """
    
        From IND_MINi
        """
        return (1 - positif(IND_10MIN_0C()))

    @cache_result
    def D10MC():
        """
        deduction 10% hors DA apres prise en compte de la deduction minimale
        From D10Mi
        """
        return ((IND_MINC() and IND_MINC() * DFNC()) + ((1 - IND_MINC()) and (1 - IND_MINC()) * _10MINSC()))

    @cache_result
    def FPTC():
        """
        deduction de 10% ou frais reels
        From FPTi
        """
        return max(FRDC(), _10MINSC())

    @cache_result
    def REP10C():
        """
        frais de 10% servant aux abtt. de 10% pour GL et SA
        From REP10i
        """
        return ((IND_10C() and IND_10C() * D10MC()) + ((1 - IND_10C()) and (1 - IND_10C()) * FPTC()))

    @cache_result
    def ABTS1BJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return arr((REP10C() and saisie_variables.get('TSHALLOC', 0) and REP10C() * saisie_variables.get('TSHALLOC', 0) / TSBC()))

    @cache_result
    def TSN1BJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLOC', 0) - ABTS1BJ())

    @cache_result
    def ABTS1BP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('ALLOC', 0)) and positif(saisie_variables.get('ALLOC', 0)) * ((positif((saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((REP10C() and saisie_variables.get('ALLOC', 0) and REP10C() * saisie_variables.get('ALLOC', 0) / TSBC()))) + ((1 - positif((saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (REP10C() - ABTS1BJ())))))

    @cache_result
    def TSN1BP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLOC', 0) - ABTS1BP())

    @cache_result
    def ABTS3VK():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('BPCOSAC', 0)) and positif(saisie_variables.get('BPCOSAC', 0)) * ((positif((saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((REP10C() and saisie_variables.get('BPCOSAC', 0) and REP10C() * saisie_variables.get('BPCOSAC', 0) / TSBC()))) + ((1 - positif((saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (REP10C() - ABTS1BJ() - ABTS1BP())))))

    @cache_result
    def TSN3VK():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('BPCOSAC', 0) - ABTS3VK())

    @cache_result
    def ABTS1UT():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('GLDGRATC', 0)) and positif(saisie_variables.get('GLDGRATC', 0)) * ((positif((saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((REP10C() and saisie_variables.get('GLDGRATC', 0) and REP10C() * saisie_variables.get('GLDGRATC', 0) / TSBC()))) + ((1 - positif((saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (REP10C() - ABTS1BJ() - ABTS1BP() - ABTS3VK())))))

    @cache_result
    def TSN1UT():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLDGRATC', 0) - ABTS1UT())

    @cache_result
    def ABTSRBJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('CARTSC', 0)) and positif(saisie_variables.get('CARTSC', 0)) * ((positif((saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((REP10C() and saisie_variables.get('CARTSC', 0) and REP10C() * saisie_variables.get('CARTSC', 0) / TSBC()))) + ((1 - positif((saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (REP10C() - ABTS1BJ() - ABTS1BP() - ABTS3VK() - ABTS1UT())))))

    @cache_result
    def TSNRBJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSC', 0) - ABTSRBJ())

    @cache_result
    def ABTSRBP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('REMPLAC', 0)) and positif(saisie_variables.get('REMPLAC', 0)) * ((positif((saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((REP10C() and saisie_variables.get('REMPLAC', 0) and REP10C() * saisie_variables.get('REMPLAC', 0) / TSBC()))) + ((1 - positif((saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (REP10C() - ABTS1BJ() - ABTS1BP() - ABTS3VK() - ABTS1UT() - ABTSRBJ())))))

    @cache_result
    def TSNRBP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAC', 0) - ABTSRBP())

    @cache_result
    def ABTSC():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (ABTS1BJ() + ABTS1BP() + ABTS3VK() + ABTS1UT() + ABTSRBJ() + ABTSRBP())

    @cache_result
    def ABDOMDBJ():
        """
        Abattement frais pro proratise pour DBJ
        """
        return ((positif(saisie_variables.get('CODDBJ', 0)) and positif(saisie_variables.get('CODDBJ', 0)) * ((positif((saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((REP10C() and saisie_variables.get('CODDBJ', 0) and REP10C() * saisie_variables.get('CODDBJ', 0) / TSBC()))) + ((1 - positif((saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (REP10C() - ABTSC()))))) + 0)

    @cache_result
    def TSNDBJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CODDBJ', 0) - ABDOMDBJ())

    @cache_result
    def ABDOMEBJ():
        """
        Abattement frais pro proratise pour EBJ
        """
        return ((positif(saisie_variables.get('CODEBJ', 0)) and positif(saisie_variables.get('CODEBJ', 0)) * ((positif((saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((REP10C() and saisie_variables.get('CODEBJ', 0) and REP10C() * saisie_variables.get('CODEBJ', 0) / TSBC()))) + ((1 - positif((saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (REP10C() - ABTSC() - ABDOMDBJ()))))) + 0)

    @cache_result
    def TSNEBJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CODEBJ', 0) - ABDOMEBJ())

    @cache_result
    def ABGL1C():
        """
        part de l'abattement pour frais sur gains de levee d'option
        """
        return ((positif(saisie_variables.get('GLD1C', 0)) and positif(saisie_variables.get('GLD1C', 0)) * ((positif((saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((REP10C() and saisie_variables.get('GLD1C', 0) and REP10C() * saisie_variables.get('GLD1C', 0) / TSBC()))) + ((1 - positif((saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (REP10C() - ABTSC() - ABDOMDBJ() - ABDOMEBJ()))))) + 0)

    @cache_result
    def TSNGL1C():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD1C', 0) - ABGL1C())

    @cache_result
    def ABGL2C():
        """
        part de l'abattement pour frais sur gains de levee d'option
        """
        return ((positif(saisie_variables.get('GLD2C', 0)) and positif(saisie_variables.get('GLD2C', 0)) * ((positif(saisie_variables.get('GLD3C', 0)) and positif(saisie_variables.get('GLD3C', 0)) * arr((REP10C() and saisie_variables.get('GLD2C', 0) and REP10C() * saisie_variables.get('GLD2C', 0) / TSBC()))) + ((1 - positif(saisie_variables.get('GLD3C', 0))) and (1 - positif(saisie_variables.get('GLD3C', 0))) * max(0, (REP10C() - ABTSC() - ABDOMDBJ() - ABDOMEBJ() - ABGL1C()))))) + 0)

    @cache_result
    def TSNGL2C():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD2C', 0) - ABGL2C())

    @cache_result
    def ABGL3C():
        """
        part de l'abattement pour frais sur gains de levee d'option
        """
        return (max(0, (REP10C() - ABTSC() - ABDOMDBJ() - ABDOMEBJ() - ABGL1C() - ABGL2C())) + 0)

    @cache_result
    def TSNGL3C():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD3C', 0) - ABGL3C())

    @cache_result
    def TSNTC():
        """
        salaires apres deduction des frais professionnels
        """
        return (TSN1BJ() + TSN1BP() + TSN3VK() + TSN1UT() + TSNRBJ() + TSNRBP() + TSNDBJ() + TSNEBJ() + TSNGL1C() + TSNGL2C() + TSNGL3C())

    @cache_result
    def ABPRC():
        """
        Abattement brut avant ajustement (pensions retraites 10%)
        From ABPRi
        """
        return arr((((1 - IND_APBC()) and (1 - IND_APBC()) * min(APBC(), (PL_PB() and APBC() and PL_PB() * APBC() / somme([(APBV() and APBV() * (1 - IND_APBV())), (APBC() and APBC() * (1 - IND_APBC())), (APB1() and APB1() * (1 - IND_APB1())), (APB2() and APB2() * (1 - IND_APB2())), (APB3() and APB3() * (1 - IND_APB3())), (APB4() and APB4() * (1 - IND_APB4()))])))) + (IND_APBC() and IND_APBC() * APBC())))

    @cache_result
    def APRC():
        """
        Abattement pensions retraites 10%
        """
        return ((IND_APBC() and IND_APBC() * ABPRC()) + ((1 - IND_APBC()) and (1 - IND_APBC()) * min(ABPRC(), (PL_PB() - ((1 - IND_APBV()) and (1 - IND_APBV()) * APRV())))))

    @cache_result
    def PRNNC():
        """
        pensions nettes d'abattement de 10%
        From PRNNi
        """
        return (EXPRC() - APRC())

    @cache_result
    def TSNC():
        """
        Traitements et salaires nets de frais
        From TSNi
        """
        return ((positif(TSNTC()) and positif(TSNTC()) * min(0, (TSNTC() + PRNNC()))) + (positif_ou_nul(TSNTC()) and positif_ou_nul(TSNTC()) * TSNTC()))

    @cache_result
    def TSC():
        """
    
        """
        return (TSNC() - somme([max(0, (saisie_variables.get('GLD1C', 0) - ABGL1C())), max(0, (saisie_variables.get('GLD2C', 0) - ABGL2C())), max(0, (saisie_variables.get('GLD3C', 0) - ABGL3C()))]) - max((saisie_variables.get('CODDBJ', 0) - ABDOMDBJ()), 0) - max((saisie_variables.get('CODEBJ', 0) - ABDOMEBJ()), 0))

    @cache_result
    def TSNNC():
        """
        salaires normaux hors droits d'auteur imposables - Cjt
        From TSNNi
        """
        return ((positif(TSC()) and positif(TSC()) * arr((TSC() and (TSBNC() + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0)) and TSC() * (TSBNC() + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0)) / EXTSC()))) + ((1 - positif(TSC())) and (1 - positif(TSC())) * TSC()))

    @cache_result
    def PRNC():
        """
        Pensions et rentes nettes
        From PRNi
        """
        return ((positif(TSNTC()) and positif((TSNTC() + PRNNC())) and positif(TSNTC()) * positif((TSNTC() + PRNNC())) * (TSNTC() + PRNNC())) + (positif_ou_nul(TSNTC()) and positif_ou_nul(TSNTC()) * PRNNC()))

    @cache_result
    def PRRC():
        """
        Pensions nettes ordinaires - Cjt
        From PRRi
        """
        return arr((PRNC() and PRBC() and PRNC() * PRBC() / EXPRC()))

    @cache_result
    def TSBN1():
        """
        somme TS + allocation  
        From TSBNi
        """
        return (saisie_variables.get('TSHALLO1', 0) + saisie_variables.get('ALLO1', 0))

    # WARNING: the variable "_2TSN1" is used in a formula at least, but is not defined.
    def _2TSN1(): return 0
    @cache_result
    def EXTS1():
        """
        Salaires totaux PAC (1CJ + ACJ +BCJ + CCJ)
        From EXTSi
        """
        return (TSBN1() + _2TSN1())

    @cache_result
    def TSB1():
        """
        Salaires declares
        From TSBi
        """
        return EXTS1()

    @cache_result
    def DEDMIN1():
        """
        Deduction minimale a appliquer sur salaires PAC
        From DEDMINi
        """
        return ((positif(saisie_variables.get('DETS1', 0)) and positif(saisie_variables.get('DETS1', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETS1', 0))) and (1 - positif(saisie_variables.get('DETS1', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TPS101():
        """
        abattement 10% brut
        From TPS10i
        """
        return arr((TSB1() and TX_DEDFORFTS and TSB1() * TX_DEDFORFTS / 100))

    @cache_result
    def DFN1():
        """
        Deduction forfaitaire de 10%
        From DFNi
        """
        return min(PLAF_DEDFORFTS, TPS101())

    # WARNING: the variable "_10MINS1" is used in a formula at least, but is not defined.
    def _10MINS1(): return 0
    @cache_result
    def FRNP():
        """
        frais reel des personnes a charge
        """
        return (saisie_variables.get('FRN1', 0) + saisie_variables.get('FRN2', 0) + saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0))

    @cache_result
    def TSBN2():
        """
        somme TS + allocation  
        From TSBNi
        """
        return (saisie_variables.get('TSHALLO2', 0) + saisie_variables.get('ALLO2', 0))

    # WARNING: the variable "_2TSN2" is used in a formula at least, but is not defined.
    def _2TSN2(): return 0
    @cache_result
    def EXTS2():
        """
        Salaires totaux PAC (1DJ + ADJ +BDJ + CDJ)
        From EXTSi
        """
        return (TSBN2() + _2TSN2())

    @cache_result
    def TSB2():
        """
        Salaires declares
        From TSBi
        """
        return EXTS2()

    @cache_result
    def DEDMIN2():
        """
        Deduction minimale a appliquer sur salaires PAC
        From DEDMINi
        """
        return ((positif(saisie_variables.get('DETS2', 0)) and positif(saisie_variables.get('DETS2', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETS2', 0))) and (1 - positif(saisie_variables.get('DETS2', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TPS102():
        """
        abattement 10% brut
        From TPS10i
        """
        return arr((TSB2() and TX_DEDFORFTS and TSB2() * TX_DEDFORFTS / 100))

    @cache_result
    def DFN2():
        """
        Deduction forfaitaire de 10%
        From DFNi
        """
        return min(PLAF_DEDFORFTS, TPS102())

    # WARNING: the variable "_10MINS2" is used in a formula at least, but is not defined.
    def _10MINS2(): return 0
    @cache_result
    def TSBN3():
        """
        somme TS + allocation  
        From TSBNi
        """
        return (saisie_variables.get('TSHALLO3', 0) + saisie_variables.get('ALLO3', 0))

    # WARNING: the variable "_2TSN3" is used in a formula at least, but is not defined.
    def _2TSN3(): return 0
    @cache_result
    def EXTS3():
        """
        Salaires totaux PAC (1EJ + AEJ +BEJ + CEJ)
        From EXTSi
        """
        return (TSBN3() + _2TSN3())

    @cache_result
    def TSB3():
        """
        Salaires declares
        From TSBi
        """
        return EXTS3()

    @cache_result
    def DEDMIN3():
        """
        Deduction minimale a appliquer sur salaires PAC
        From DEDMINi
        """
        return ((positif(saisie_variables.get('DETS3', 0)) and positif(saisie_variables.get('DETS3', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETS3', 0))) and (1 - positif(saisie_variables.get('DETS3', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TPS103():
        """
        abattement 10% brut
        From TPS10i
        """
        return arr((TSB3() and TX_DEDFORFTS and TSB3() * TX_DEDFORFTS / 100))

    @cache_result
    def DFN3():
        """
        Deduction forfaitaire de 10%
        From DFNi
        """
        return min(PLAF_DEDFORFTS, TPS103())

    # WARNING: the variable "_10MINS3" is used in a formula at least, but is not defined.
    def _10MINS3(): return 0
    @cache_result
    def TSBN4():
        """
        somme TS + allocation  
        From TSBNi
        """
        return (saisie_variables.get('TSHALLO4', 0) + saisie_variables.get('ALLO4', 0))

    # WARNING: the variable "_2TSN4" is used in a formula at least, but is not defined.
    def _2TSN4(): return 0
    @cache_result
    def EXTS4():
        """
        Salaires totaux PAC (1FJ + AFJ +BFJ + CFJ)
        From EXTSi
        """
        return (TSBN4() + _2TSN4())

    @cache_result
    def TSB4():
        """
        Salaires declares
        From TSBi
        """
        return EXTS4()

    @cache_result
    def DEDMIN4():
        """
        Deduction minimale a appliquer sur salaires PAC
        From DEDMINi
        """
        return ((positif(saisie_variables.get('DETS4', 0)) and positif(saisie_variables.get('DETS4', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETS4', 0))) and (1 - positif(saisie_variables.get('DETS4', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TPS104():
        """
        abattement 10% brut
        From TPS10i
        """
        return arr((TSB4() and TX_DEDFORFTS and TSB4() * TX_DEDFORFTS / 100))

    @cache_result
    def DFN4():
        """
        Deduction forfaitaire de 10%
        From DFNi
        """
        return min(PLAF_DEDFORFTS, TPS104())

    # WARNING: the variable "_10MINS4" is used in a formula at least, but is not defined.
    def _10MINS4(): return 0
    # WARNING: the variable "_10MINSP" is used in a formula at least, but is not defined.
    def _10MINSP(): return 0
    @cache_result
    def FRDP():
        """
        Frais reels declares pac
        """
        return (((1 - positif(base_variables['PREM8_11'])) and FRNP() and (1 - positif(base_variables['PREM8_11'])) * FRNP() * positif((FRNP() - _10MINSP()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min(FRNP(), base_variables['FRDPROVP'])) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min(FRNP(), max(base_variables['FRDPROVPP2'], base_variables['FRDPROVP1731']))))

    @cache_result
    def FRD1():
        """
        Frais reels declares
        """
        return (((1 - positif(base_variables['PREM8_11'])) and saisie_variables.get('FRN1', 0) and (1 - positif(base_variables['PREM8_11'])) * saisie_variables.get('FRN1', 0) * positif((saisie_variables.get('FRN1', 0) - _10MINS1()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min(saisie_variables.get('FRN1', 0), base_variables['FRDPROV1']) and positif(base_variables['PREM8_11']) * min(saisie_variables.get('FRN1', 0), base_variables['FRDPROV1']) * positif((saisie_variables.get('FRN2', 0) + saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0)))) + (positif(base_variables['PREM8_11']) and max(0, FRDP()) and positif(base_variables['PREM8_11']) * max(0, FRDP()) * (1 - positif((saisie_variables.get('FRN2', 0) + saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0))))))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min(saisie_variables.get('FRN1', 0), min(base_variables['FRDPROV1'], max(base_variables['FRDPROV1P2'], base_variables['FRDPROV11731']))) and positif(base_variables['PREM8_11']) * min(saisie_variables.get('FRN1', 0), min(base_variables['FRDPROV1'], max(base_variables['FRDPROV1P2'], base_variables['FRDPROV11731']))) * positif((saisie_variables.get('FRN2', 0) + saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0)))) + (positif(base_variables['PREM8_11']) and max(0, FRDP()) and positif(base_variables['PREM8_11']) * max(0, FRDP()) * (1 - positif((saisie_variables.get('FRN2', 0) + saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0))))))))

    @cache_result
    def IND_101():
        """
        Indicateur d'affichage deduction 10%
        From IND_10i
        """
        return positif_ou_nul((_10MINS1() - FRD1()))

    @cache_result
    def IND_10MIN_01():
        """
        booleen d'existence d'une deduction minimale hors D.A.
        From IND_10MIN_0i
        """
        return (positif((DEDMIN1() - DFN1())) and positif((DEDMIN1() - DFN1())) * positif(TSB1()))

    @cache_result
    def IND_MIN1():
        """
    
        From IND_MINi
        """
        return (1 - positif(IND_10MIN_01()))

    @cache_result
    def D10M1():
        """
        deduction 10%  apres prise en compte de la deduction minimale
        From D10Mi
        """
        return ((IND_MIN1() and IND_MIN1() * DFN1()) + ((1 - IND_MIN1()) and (1 - IND_MIN1()) * _10MINS1()))

    @cache_result
    def FPT1():
        """
        deduction de 10% ou frais reels
        From FPTi
        """
        return max(FRD1(), _10MINS1())

    @cache_result
    def REP101():
        """
        pour repartition frais de 10% servant aux abtt. de 10% pour GL et autr
        From REP10i
        """
        return ((IND_101() and IND_101() * D10M1()) + ((1 - IND_101()) and (1 - IND_101()) * FPT1()))

    @cache_result
    def ABTS1CJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return arr((REP101() and saisie_variables.get('TSHALLO1', 0) and REP101() * saisie_variables.get('TSHALLO1', 0) / TSB1()))

    @cache_result
    def TSN1CJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLO1', 0) - ABTS1CJ())

    @cache_result
    def ABTS1CP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('ALLO1', 0)) and positif(saisie_variables.get('ALLO1', 0)) * ((positif((saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0))) and positif((saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0))) * arr((REP101() and saisie_variables.get('ALLO1', 0) and REP101() * saisie_variables.get('ALLO1', 0) / TSB1()))) + ((1 - positif((saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0)))) and (1 - positif((saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0)))) * max(0, (REP101() - ABTS1CJ())))))

    @cache_result
    def TSN1CP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLO1', 0) - ABTS1CP())

    @cache_result
    def ABTSRCJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('CARTSP1', 0)) and positif(saisie_variables.get('CARTSP1', 0)) * ((positif(saisie_variables.get('REMPLAP1', 0)) and positif(saisie_variables.get('REMPLAP1', 0)) * arr((REP101() and saisie_variables.get('CARTSP1', 0) and REP101() * saisie_variables.get('CARTSP1', 0) / TSB1()))) + ((1 - positif(saisie_variables.get('REMPLAP1', 0))) and (1 - positif(saisie_variables.get('REMPLAP1', 0))) * max(0, (REP101() - ABTS1CJ() - ABTS1CP())))))

    @cache_result
    def TSNRCJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSP1', 0) - ABTSRCJ())

    @cache_result
    def ABTSRCP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (max(0, (REP101() - (ABTS1CJ() + ABTS1CP() + ABTSRCJ()))) + 0)

    @cache_result
    def TSNRCP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAP1', 0) - ABTSRCP())

    @cache_result
    def TSNT1():
        """
        salaires apres deduction des frais professionnels
        """
        return (TSN1CJ() + TSN1CP() + TSNRCJ() + TSNRCP())

    @cache_result
    def ABPR1():
        """
        Abattement brut avant ajustement (pensions retraites 10%)
        From ABPRi
        """
        return arr((((1 - IND_APB1()) and (1 - IND_APB1()) * min(APB1(), (PL_PB() and APB1() and PL_PB() * APB1() / somme([(APBV() and APBV() * (1 - IND_APBV())), (APBC() and APBC() * (1 - IND_APBC())), (APB1() and APB1() * (1 - IND_APB1())), (APB2() and APB2() * (1 - IND_APB2())), (APB3() and APB3() * (1 - IND_APB3())), (APB4() and APB4() * (1 - IND_APB4()))])))) + (IND_APB1() and IND_APB1() * APB1())))

    @cache_result
    def APR1():
        """
        Abattement pensions retraites 10%
        """
        return ((IND_APB1() and IND_APB1() * ABPR1()) + ((1 - IND_APB1()) and (1 - IND_APB1()) * min(ABPR1(), (PL_PB() - ((1 - IND_APBV()) and (1 - IND_APBV()) * APRV()) - ((1 - IND_APBC()) and (1 - IND_APBC()) * APRC())))))

    @cache_result
    def PRNN1():
        """
        pensions nettes d'abattement de 10%
        From PRNNi
        """
        return (EXPR1() - APR1())

    @cache_result
    def TSN1():
        """
        Traitements et salaires nets de frais
        From TSNi
        """
        return ((positif(TSNT1()) and positif(TSNT1()) * min(0, (TSNT1() + PRNN1()))) + (positif_ou_nul(TSNT1()) and positif_ou_nul(TSNT1()) * TSNT1()))

    @cache_result
    def TS1():
        """
    
        From TSi
        """
        return TSN1()

    @cache_result
    def TSNN1():
        """
        salaires normaux hors droits d'auteur imposables - PAC
        From TSNNi
        """
        return ((positif(TS1()) and positif(TS1()) * arr((TS1() and TSBN1() and TS1() * TSBN1() / EXTS1()))) + ((1 - positif(TS1())) and (1 - positif(TS1())) * TS1()))

    @cache_result
    def PRN1():
        """
        Pensions et rentes nettes
        From PRNi
        """
        return ((positif(TSNT1()) and positif((TSNT1() + PRNN1())) and positif(TSNT1()) * positif((TSNT1() + PRNN1())) * (TSNT1() + PRNN1())) + (positif_ou_nul(TSNT1()) and positif_ou_nul(TSNT1()) * PRNN1()))

    @cache_result
    def PRR1():
        """
        Pensions nettes ordinaires - PAC
        From PRRi
        """
        return arr((PRN1() and PRB1() and PRN1() * PRB1() / EXPR1()))

    @cache_result
    def FRD2():
        """
        Frais reels declares
        """
        return (((1 - positif(base_variables['PREM8_11'])) and saisie_variables.get('FRN2', 0) and (1 - positif(base_variables['PREM8_11'])) * saisie_variables.get('FRN2', 0) * positif((saisie_variables.get('FRN2', 0) - _10MINS2()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min(saisie_variables.get('FRN2', 0), base_variables['FRDPROV2']) and positif(base_variables['PREM8_11']) * min(saisie_variables.get('FRN2', 0), base_variables['FRDPROV2']) * positif((saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0)))) + (positif(base_variables['PREM8_11']) and max(0, (FRDP() - FRD1())) and positif(base_variables['PREM8_11']) * max(0, (FRDP() - FRD1())) * (1 - positif((saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0))))))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min(saisie_variables.get('FRN2', 0), min(base_variables['FRDPROV2'], max(base_variables['FRDPROV2P2'], base_variables['FRDPROV21731']))) and positif(base_variables['PREM8_11']) * min(saisie_variables.get('FRN2', 0), min(base_variables['FRDPROV2'], max(base_variables['FRDPROV2P2'], base_variables['FRDPROV21731']))) * positif((saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0)))) + (positif(base_variables['PREM8_11']) and max(0, (FRDP() - FRD1())) and positif(base_variables['PREM8_11']) * max(0, (FRDP() - FRD1())) * (1 - positif((saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0))))))))

    @cache_result
    def IND_102():
        """
        Indicateur d'affichage deduction 10%
        From IND_10i
        """
        return positif_ou_nul((_10MINS2() - FRD2()))

    @cache_result
    def IND_10MIN_02():
        """
        booleen d'existence d'une deduction minimale hors D.A.
        From IND_10MIN_0i
        """
        return (positif((DEDMIN2() - DFN2())) and positif((DEDMIN2() - DFN2())) * positif(TSB2()))

    @cache_result
    def IND_MIN2():
        """
    
        From IND_MINi
        """
        return (1 - positif(IND_10MIN_02()))

    @cache_result
    def D10M2():
        """
        deduction 10%  apres prise en compte de la deduction minimale
        From D10Mi
        """
        return ((IND_MIN2() and IND_MIN2() * DFN2()) + ((1 - IND_MIN2()) and (1 - IND_MIN2()) * _10MINS2()))

    @cache_result
    def FPT2():
        """
        deduction de 10% ou frais reels
        From FPTi
        """
        return max(FRD2(), _10MINS2())

    @cache_result
    def REP102():
        """
        pour repartition frais de 10% servant aux abtt. de 10% pour GL et autr
        From REP10i
        """
        return ((IND_102() and IND_102() * D10M2()) + ((1 - IND_102()) and (1 - IND_102()) * FPT2()))

    @cache_result
    def ABTS1DJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return arr((REP102() and saisie_variables.get('TSHALLO2', 0) and REP102() * saisie_variables.get('TSHALLO2', 0) / TSB2()))

    @cache_result
    def TSN1DJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLO2', 0) - ABTS1DJ())

    @cache_result
    def ABTS1DP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('ALLO2', 0)) and positif(saisie_variables.get('ALLO2', 0)) * ((positif((saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0))) and positif((saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0))) * arr((REP102() and saisie_variables.get('ALLO2', 0) and REP102() * saisie_variables.get('ALLO2', 0) / TSB2()))) + ((1 - positif((saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0)))) and (1 - positif((saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0)))) * max(0, (REP102() - ABTS1DJ())))))

    @cache_result
    def TSN1DP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLO2', 0) - ABTS1DP())

    @cache_result
    def ABTSRDJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('CARTSP2', 0)) and positif(saisie_variables.get('CARTSP2', 0)) * ((positif(saisie_variables.get('REMPLAP2', 0)) and positif(saisie_variables.get('REMPLAP2', 0)) * arr((REP102() and saisie_variables.get('CARTSP2', 0) and REP102() * saisie_variables.get('CARTSP2', 0) / TSB2()))) + ((1 - positif(saisie_variables.get('REMPLAP2', 0))) and (1 - positif(saisie_variables.get('REMPLAP2', 0))) * max(0, (REP102() - ABTS1DJ() - ABTS1DP())))))

    @cache_result
    def TSNRDJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSP2', 0) - ABTSRDJ())

    @cache_result
    def ABTSRDP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (max(0, (REP102() - (ABTS1DJ() + ABTS1DP() + ABTSRDJ()))) + 0)

    @cache_result
    def TSNRDP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAP2', 0) - ABTSRDP())

    @cache_result
    def TSNT2():
        """
        salaires apres deduction des frais professionnels
        """
        return (TSN1DJ() + TSN1DP() + TSNRDJ() + TSNRDP())

    @cache_result
    def ABPR2():
        """
        Abattement brut avant ajustement (pensions retraites 10%)
        From ABPRi
        """
        return arr((((1 - IND_APB2()) and (1 - IND_APB2()) * min(APB2(), (PL_PB() and APB2() and PL_PB() * APB2() / somme([(APBV() and APBV() * (1 - IND_APBV())), (APBC() and APBC() * (1 - IND_APBC())), (APB1() and APB1() * (1 - IND_APB1())), (APB2() and APB2() * (1 - IND_APB2())), (APB3() and APB3() * (1 - IND_APB3())), (APB4() and APB4() * (1 - IND_APB4()))])))) + (IND_APB2() and IND_APB2() * APB2())))

    @cache_result
    def APR2():
        """
        Abattement pensions retraites 10%
        """
        return ((IND_APB2() and IND_APB2() * ABPR2()) + ((1 - IND_APB2()) and (1 - IND_APB2()) * min(ABPR2(), (PL_PB() - ((1 - IND_APBV()) and (1 - IND_APBV()) * APRV()) - ((1 - IND_APBC()) and (1 - IND_APBC()) * APRC()) - ((1 - IND_APB1()) and (1 - IND_APB1()) * APR1())))))

    @cache_result
    def PRNN2():
        """
        pensions nettes d'abattement de 10%
        From PRNNi
        """
        return (EXPR2() - APR2())

    @cache_result
    def TSN2():
        """
        Traitements et salaires nets de frais
        From TSNi
        """
        return ((positif(TSNT2()) and positif(TSNT2()) * min(0, (TSNT2() + PRNN2()))) + (positif_ou_nul(TSNT2()) and positif_ou_nul(TSNT2()) * TSNT2()))

    @cache_result
    def TS2():
        """
    
        From TSi
        """
        return TSN2()

    @cache_result
    def TSNN2():
        """
        salaires normaux hors droits d'auteur imposables - PAC
        From TSNNi
        """
        return ((positif(TS2()) and positif(TS2()) * arr((TS2() and TSBN2() and TS2() * TSBN2() / EXTS2()))) + ((1 - positif(TS2())) and (1 - positif(TS2())) * TS2()))

    @cache_result
    def PRN2():
        """
        Pensions et rentes nettes
        From PRNi
        """
        return ((positif(TSNT2()) and positif((TSNT2() + PRNN2())) and positif(TSNT2()) * positif((TSNT2() + PRNN2())) * (TSNT2() + PRNN2())) + (positif_ou_nul(TSNT2()) and positif_ou_nul(TSNT2()) * PRNN2()))

    @cache_result
    def PRR2():
        """
        Pensions nettes ordinaires - PAC
        From PRRi
        """
        return arr((PRN2() and PRB2() and PRN2() * PRB2() / EXPR2()))

    @cache_result
    def FRD3():
        """
        Frais reels declares
        """
        return (((1 - positif(base_variables['PREM8_11'])) and saisie_variables.get('FRN3', 0) and (1 - positif(base_variables['PREM8_11'])) * saisie_variables.get('FRN3', 0) * positif((saisie_variables.get('FRN3', 0) - _10MINS3()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min(saisie_variables.get('FRN3', 0), base_variables['FRDPROV3']) and positif(base_variables['PREM8_11']) * min(saisie_variables.get('FRN3', 0), base_variables['FRDPROV3']) * positif(saisie_variables.get('FRN4', 0))) + (positif(base_variables['PREM8_11']) and max(0, (FRDP() - FRD1() - FRD2())) and positif(base_variables['PREM8_11']) * max(0, (FRDP() - FRD1() - FRD2())) * (1 - positif(saisie_variables.get('FRN4', 0)))))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min(saisie_variables.get('FRN3', 0), min(base_variables['FRDPROV3'], max(base_variables['FRDPROV3P2'], base_variables['FRDPROV31731']))) and positif(base_variables['PREM8_11']) * min(saisie_variables.get('FRN3', 0), min(base_variables['FRDPROV3'], max(base_variables['FRDPROV3P2'], base_variables['FRDPROV31731']))) * positif(saisie_variables.get('FRN4', 0))) + (positif(base_variables['PREM8_11']) and max(0, (FRDP() - FRD1() - FRD2())) and positif(base_variables['PREM8_11']) * max(0, (FRDP() - FRD1() - FRD2())) * (1 - positif(saisie_variables.get('FRN4', 0)))))))

    @cache_result
    def IND_103():
        """
        Indicateur d'affichage deduction 10%
        From IND_10i
        """
        return positif_ou_nul((_10MINS3() - FRD3()))

    @cache_result
    def IND_10MIN_03():
        """
        booleen d'existence d'une deduction minimale hors D.A.
        From IND_10MIN_0i
        """
        return (positif((DEDMIN3() - DFN3())) and positif((DEDMIN3() - DFN3())) * positif(TSB3()))

    @cache_result
    def IND_MIN3():
        """
    
        From IND_MINi
        """
        return (1 - positif(IND_10MIN_03()))

    @cache_result
    def D10M3():
        """
        deduction 10%  apres prise en compte de la deduction minimale
        From D10Mi
        """
        return ((IND_MIN3() and IND_MIN3() * DFN3()) + ((1 - IND_MIN3()) and (1 - IND_MIN3()) * _10MINS3()))

    @cache_result
    def FPT3():
        """
        deduction de 10% ou frais reels
        From FPTi
        """
        return max(FRD3(), _10MINS3())

    @cache_result
    def REP103():
        """
        pour repartition frais de 10% servant aux abtt. de 10% 
        From REP10i
        """
        return ((IND_103() and IND_103() * D10M3()) + ((1 - IND_103()) and (1 - IND_103()) * FPT3()))

    @cache_result
    def ABTS1EJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return arr((REP103() and saisie_variables.get('TSHALLO3', 0) and REP103() * saisie_variables.get('TSHALLO3', 0) / TSB3()))

    @cache_result
    def TSN1EJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLO3', 0) - ABTS1EJ())

    @cache_result
    def ABTS1EP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('ALLO3', 0)) and positif(saisie_variables.get('ALLO3', 0)) * ((positif((saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0))) and positif((saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0))) * arr((REP103() and saisie_variables.get('ALLO3', 0) and REP103() * saisie_variables.get('ALLO3', 0) / TSB3()))) + ((1 - positif((saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0)))) and (1 - positif((saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0)))) * max(0, (REP103() - ABTS1EJ())))))

    @cache_result
    def TSN1EP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLO3', 0) - ABTS1EP())

    @cache_result
    def ABTSREJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('CARTSP3', 0)) and positif(saisie_variables.get('CARTSP3', 0)) * ((positif(saisie_variables.get('REMPLAP3', 0)) and positif(saisie_variables.get('REMPLAP3', 0)) * arr((REP103() and saisie_variables.get('CARTSP3', 0) and REP103() * saisie_variables.get('CARTSP3', 0) / TSB3()))) + ((1 - positif(saisie_variables.get('REMPLAP3', 0))) and (1 - positif(saisie_variables.get('REMPLAP3', 0))) * max(0, (REP103() - ABTS1EJ() - ABTS1EP())))))

    @cache_result
    def TSNREJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSP3', 0) - ABTSREJ())

    @cache_result
    def ABTSREP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (max(0, (REP103() - (ABTS1EJ() + ABTS1EP() + ABTSREJ()))) + 0)

    @cache_result
    def TSNREP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAP3', 0) - ABTSREP())

    @cache_result
    def TSNT3():
        """
        salaires apres deduction des frais professionnels
        """
        return (TSN1EJ() + TSN1EP() + TSNREJ() + TSNREP())

    @cache_result
    def ABPR3():
        """
        Abattement brut avant ajustement (pensions retraites 10%)
        From ABPRi
        """
        return arr((((1 - IND_APB3()) and (1 - IND_APB3()) * min(APB3(), (PL_PB() and APB3() and PL_PB() * APB3() / somme([(APBV() and APBV() * (1 - IND_APBV())), (APBC() and APBC() * (1 - IND_APBC())), (APB1() and APB1() * (1 - IND_APB1())), (APB2() and APB2() * (1 - IND_APB2())), (APB3() and APB3() * (1 - IND_APB3())), (APB4() and APB4() * (1 - IND_APB4()))])))) + (IND_APB3() and IND_APB3() * APB3())))

    @cache_result
    def APR3():
        """
        Abattement pensions retraites 10%
        """
        return ((IND_APB3() and IND_APB3() * ABPR3()) + ((1 - IND_APB3()) and (1 - IND_APB3()) * min(ABPR3(), (PL_PB() - ((1 - IND_APBV()) and (1 - IND_APBV()) * APRV()) - ((1 - IND_APBC()) and (1 - IND_APBC()) * APRC()) - ((1 - IND_APB1()) and (1 - IND_APB1()) * APR1()) - ((1 - IND_APB2()) and (1 - IND_APB2()) * APR2())))))

    @cache_result
    def PRNN3():
        """
        pensions nettes d'abattement de 10%
        From PRNNi
        """
        return (EXPR3() - APR3())

    @cache_result
    def TSN3():
        """
        Traitements et salaires nets de frais
        From TSNi
        """
        return ((positif(TSNT3()) and positif(TSNT3()) * min(0, (TSNT3() + PRNN3()))) + (positif_ou_nul(TSNT3()) and positif_ou_nul(TSNT3()) * TSNT3()))

    @cache_result
    def TS3():
        """
    
        From TSi
        """
        return TSN3()

    @cache_result
    def TSNN3():
        """
        salaires normaux hors droits d'auteur imposables - PAC
        From TSNNi
        """
        return ((positif(TS3()) and positif(TS3()) * arr((TS3() and TSBN3() and TS3() * TSBN3() / EXTS3()))) + ((1 - positif(TS3())) and (1 - positif(TS3())) * TS3()))

    @cache_result
    def PRN3():
        """
        Pensions et rentes nettes
        From PRNi
        """
        return ((positif(TSNT3()) and positif((TSNT3() + PRNN3())) and positif(TSNT3()) * positif((TSNT3() + PRNN3())) * (TSNT3() + PRNN3())) + (positif_ou_nul(TSNT3()) and positif_ou_nul(TSNT3()) * PRNN3()))

    @cache_result
    def PRR3():
        """
        Pensions nettes ordinaires - PAC
        From PRRi
        """
        return arr((PRN3() and PRB3() and PRN3() * PRB3() / EXPR3()))

    @cache_result
    def FRD4():
        """
        Frais reels declares
        """
        return max(0, (FRDP() - FRD1() - FRD2() - FRD3()))

    @cache_result
    def IND_104():
        """
        Indicateur d'affichage deduction 10%
        From IND_10i
        """
        return positif_ou_nul((_10MINS4() - FRD4()))

    @cache_result
    def IND_10MIN_04():
        """
        booleen d'existence d'une deduction minimale hors D.A.
        From IND_10MIN_0i
        """
        return (positif((DEDMIN4() - DFN4())) and positif((DEDMIN4() - DFN4())) * positif(TSB4()))

    @cache_result
    def IND_MIN4():
        """
    
        From IND_MINi
        """
        return (1 - positif(IND_10MIN_04()))

    @cache_result
    def D10M4():
        """
        deduction 10%  apres prise en compte de la deduction minimale
        From D10Mi
        """
        return ((IND_MIN4() and IND_MIN4() * DFN4()) + ((1 - IND_MIN4()) and (1 - IND_MIN4()) * _10MINS4()))

    @cache_result
    def FPT4():
        """
        deduction de 10% ou frais reels
        From FPTi
        """
        return max(FRD4(), _10MINS4())

    @cache_result
    def REP104():
        """
        pour repartition frais de 10% servant aux abtt. de 10% 
        From REP10i
        """
        return ((IND_104() and IND_104() * D10M4()) + ((1 - IND_104()) and (1 - IND_104()) * FPT4()))

    @cache_result
    def ABTS1FJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return arr((REP104() and saisie_variables.get('TSHALLO4', 0) and REP104() * saisie_variables.get('TSHALLO4', 0) / TSB4()))

    @cache_result
    def TSN1FJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLO4', 0) - ABTS1FJ())

    @cache_result
    def ABTS1FP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('ALLO4', 0)) and positif(saisie_variables.get('ALLO4', 0)) * ((positif((saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0))) and positif((saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0))) * arr((REP104() and saisie_variables.get('ALLO4', 0) and REP104() * saisie_variables.get('ALLO4', 0) / TSB4()))) + ((1 - positif((saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0)))) and (1 - positif((saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0)))) * max(0, (REP104() - ABTS1FJ())))))

    @cache_result
    def TSN1FP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLO4', 0) - ABTS1FP())

    @cache_result
    def ABTSRFJ():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (positif(saisie_variables.get('CARTSP4', 0)) and positif(saisie_variables.get('CARTSP4', 0)) * ((positif(saisie_variables.get('REMPLAP4', 0)) and positif(saisie_variables.get('REMPLAP4', 0)) * arr((REP104() and saisie_variables.get('CARTSP4', 0) and REP104() * saisie_variables.get('CARTSP4', 0) / TSB4()))) + ((1 - positif(saisie_variables.get('REMPLAP4', 0))) and (1 - positif(saisie_variables.get('REMPLAP4', 0))) * max(0, (REP104() - ABTS1FJ() - ABTS1FP())))))

    @cache_result
    def TSNRFJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSP4', 0) - ABTSRFJ())

    @cache_result
    def ABTSRFP():
        """
        part de l'abattement pour frais sur TS normaux
        """
        return (max(0, (REP104() - (ABTS1FJ() + ABTS1FP() + ABTSRFJ()))) + 0)

    @cache_result
    def TSNRFP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAP4', 0) - ABTSRFP())

    @cache_result
    def TSNT4():
        """
        salaires apres deduction des frais professionnels
        """
        return (TSN1FJ() + TSN1FP() + TSNRFJ() + TSNRFP())

    @cache_result
    def ABPR4():
        """
        Abattement brut avant ajustement (pensions retraites 10%)
        From ABPRi
        """
        return arr((((1 - IND_APB4()) and (1 - IND_APB4()) * min(APB4(), (PL_PB() and APB4() and PL_PB() * APB4() / somme([(APBV() and APBV() * (1 - IND_APBV())), (APBC() and APBC() * (1 - IND_APBC())), (APB1() and APB1() * (1 - IND_APB1())), (APB2() and APB2() * (1 - IND_APB2())), (APB3() and APB3() * (1 - IND_APB3())), (APB4() and APB4() * (1 - IND_APB4()))])))) + (IND_APB4() and IND_APB4() * APB4())))

    @cache_result
    def APR4():
        """
        Abattement pensions retraites 10%
        """
        return ((IND_APB4() and IND_APB4() * ABPR4()) + ((1 - IND_APB4()) and (1 - IND_APB4()) * min(ABPR4(), (PL_PB() - ((1 - IND_APBV()) and (1 - IND_APBV()) * APRV()) - ((1 - IND_APBC()) and (1 - IND_APBC()) * APRC()) - ((1 - IND_APB1()) and (1 - IND_APB1()) * APR1()) - ((1 - IND_APB2()) and (1 - IND_APB2()) * APR2()) - ((1 - IND_APB3()) and (1 - IND_APB3()) * APR3())))))

    @cache_result
    def PRNN4():
        """
        pensions nettes d'abattement de 10%
        From PRNNi
        """
        return (EXPR4() - APR4())

    @cache_result
    def TSN4():
        """
        Traitements et salaires nets de frais
        From TSNi
        """
        return ((positif(TSNT4()) and positif(TSNT4()) * min(0, (TSNT4() + PRNN4()))) + (positif_ou_nul(TSNT4()) and positif_ou_nul(TSNT4()) * TSNT4()))

    @cache_result
    def TS4():
        """
    
        From TSi
        """
        return TSN4()

    @cache_result
    def TSNN4():
        """
        salaires normaux hors droits d'auteur imposables - PAC
        From TSNNi
        """
        return ((positif(TS4()) and positif(TS4()) * arr((TS4() and TSBN4() and TS4() * TSBN4() / EXTS4()))) + ((1 - positif(TS4())) and (1 - positif(TS4())) * TS4()))

    @cache_result
    def PRN4():
        """
        Pensions et rentes nettes
        From PRNi
        """
        return ((positif(TSNT4()) and positif((TSNT4() + PRNN4())) and positif(TSNT4()) * positif((TSNT4() + PRNN4())) * (TSNT4() + PRNN4())) + (positif_ou_nul(TSNT4()) and positif_ou_nul(TSNT4()) * PRNN4()))

    @cache_result
    def PRR4():
        """
        Pensions nettes ordinaires - PAC
        From PRRi
        """
        return arr((PRN4() and PRB4() and PRN4() * PRB4() / EXPR4()))

    @cache_result
    def TSPRT():
        """
        Salaires, pensions imposables TOTAL
        """
        return (TSNNV() + PRRV() + TSNNC() + PRRC() + TSNN1() + PRR1() + TSNN2() + PRR2() + TSNN3() + PRR3() + TSNN4() + PRR4())

    @cache_result
    def RV1():
        """
        Montant imposable des rentes viageres - de 50 ans
        From RVi
        """
        return arr((saisie_variables.get('RVB1', 0) and TXRVT1 and saisie_variables.get('RVB1', 0) * TXRVT1 / 100))

    @cache_result
    def RV2():
        """
        Montant imposable des rentes viageres de 50 a 59 ans
        From RVi
        """
        return arr((saisie_variables.get('RVB2', 0) and TXRVT2 and saisie_variables.get('RVB2', 0) * TXRVT2 / 100))

    @cache_result
    def RV3():
        """
        Montant imposable des rentes viageres de 60 a 69 ans
        From RVi
        """
        return arr((saisie_variables.get('RVB3', 0) and TXRVT3 and saisie_variables.get('RVB3', 0) * TXRVT3 / 100))

    @cache_result
    def RV4():
        """
        Montant imposable des rentes viageres a partir de 70 ans
        From RVi
        """
        return arr((saisie_variables.get('RVB4', 0) and TXRVT4 and saisie_variables.get('RVB4', 0) * TXRVT4 / 100))

    @cache_result
    def RVTOT():
        """
        Total Rentes Viageres a titre onereux
        """
        return (RV1() + RV2() + RV3() + RV4())

    @cache_result
    def TSPR():
        """
        Traitement salaire pension rentes imposables
        """
        return (TSPRT() + RVTOT())

    @cache_result
    def RCMRABD():
        """
        montant de la refaction sur 2DC
        """
        return arr((saisie_variables.get('RCMABD', 0) and 40 and saisie_variables.get('RCMABD', 0) * 40 / 100))

    @cache_result
    def RCMRNABD():
        """
        revenus nets de la refaction sur 2DC
        """
        return (saisie_variables.get('RCMABD', 0) - RCMRABD())

    # WARNING: the variable "_2RCMRABD" is used in a formula at least, but is not defined.
    def _2RCMRABD(): return 0
    # WARNING: the variable "_2RCMRNABD" is used in a formula at least, but is not defined.
    def _2RCMRNABD(): return 0
    @cache_result
    def RCMAB():
        """
        Revenus ouvrant droit a abattement unique 2CD+ACD+BCD+CCD
        """
        return (RCMRNABD() + _2RCMRNABD())

    @cache_result
    def RTCAR():
        """
        Revenu TOTAL des autres RCM n'ouvrant pas droit a abattement
        """
        return (saisie_variables.get('RCMHAB', 0) + saisie_variables.get('INTERE', 0))

    @cache_result
    def RCMNAB():
        """
        Revenus n'ouvrant pas droit a abattement unique 2LZ+ALZ+BLZ+CLZ
        """
        return (saisie_variables.get('RCMHAD', 0) + saisie_variables.get('DISQUO', 0))

    @cache_result
    def RCMRTNC():
        """
        montant de la refaction sur 2FU
        """
        return arr((saisie_variables.get('RCMTNC', 0) and 40 and saisie_variables.get('RCMTNC', 0) * 40 / 100))

    @cache_result
    def RCMRNTNC():
        """
        revenus nets de la refaction sur 2FU
        """
        return (saisie_variables.get('RCMTNC', 0) - RCMRTNC())

    # WARNING: the variable "_2RCMRTNC" is used in a formula at least, but is not defined.
    def _2RCMRTNC(): return 0
    # WARNING: the variable "_2RCMRNTNC" is used in a formula at least, but is not defined.
    def _2RCMRNTNC(): return 0
    @cache_result
    def RTNC():
        """
        Revenu TOTAL titres non cotes PEA
        """
        return (RCMRNTNC() + _2RCMRNTNC())

    @cache_result
    def RAVC():
        """
        Revenu TOTAL assurances vie et capitalisation
        """
        return (saisie_variables.get('RCMAV', 0) + saisie_variables.get('PROVIE', 0))

    @cache_result
    def REGPRIVM():
        """
        montant majore de GO
        """
        return arr((saisie_variables.get('REGPRIV', 0) and saisie_variables.get('REGPRIV', 0) * MAJREV))

    # WARNING: the variable "_2REGPRIVM" is used in a formula at least, but is not defined.
    def _2REGPRIVM(): return 0
    @cache_result
    def RCMPRIVM():
        """
        Revenu struct. reg fisc. priv. RCM apres majo
        """
        return (REGPRIVM() + _2REGPRIVM())

    @cache_result
    def BOOL_0AM():
        """
        Zone Situation de Famille - Veufs sans EAC
        """
        return positif((positif((saisie_variables.get('V_0AM', 0) + 0)) + positif((saisie_variables.get('V_0AO', 0) + 0))))

    @cache_result
    def ABTAV():
        """
        Abattement sur les RCM d'assurance-vie
        """
        return (PLAF_RCMAV1 and PLAF_RCMAV1 * (1 + BOOL_0AM()))

    @cache_result
    def ABRCM2():
        """
        Abattement RCM assurance-vie utilise
        """
        return min(ABTAV(), RAVC())

    @cache_result
    def ABAVC():
        """
        Abattement RCM sur ass-vie et capitalisation
        """
        return (positif(saisie_variables.get('RCMAV', 0)) and positif(saisie_variables.get('RCMAV', 0)) * arr((ABRCM2() and saisie_variables.get('RCMAV', 0) and ABRCM2() * saisie_variables.get('RCMAV', 0) / RAVC())))

    # WARNING: the variable "_2ABAVC" is used in a formula at least, but is not defined.
    def _2ABAVC(): return 0
    @cache_result
    def TABAVC():
        """
        Abattement RCM sur ass-vie et capitalisation.TOTAL
        """
        return (ABAVC() + _2ABAVC())

    @cache_result
    def DFRCMNBIS():
        """
        deficeit suite a imputaion 2CA
        """
        return ((positif((RCMAB() + RTCAR() + RCMNAB())) and (1 - positif((RTNC() + RAVC() + RCMPRIVM()))) and positif((RCMAB() + RTCAR() + RCMNAB())) * (1 - positif((RTNC() + RAVC() + RCMPRIVM()))) * max(0, (saisie_variables.get('RCMFR', 0) - RCMAB() - RTCAR() - RCMNAB()))) + ((1 - positif((RCMAB() + RTCAR() + RCMNAB()))) and positif((RTNC() + RAVC() + RCMPRIVM())) and (1 - positif((RCMAB() + RTCAR() + RCMNAB()))) * positif((RTNC() + RAVC() + RCMPRIVM())) * max(0, (saisie_variables.get('RCMFR', 0) - RTNC() - (RAVC() - TABAVC()) - RCMPRIVM()))) + (positif((RCMAB() + RTCAR() + RCMNAB())) and positif((RTNC() + RAVC() + RCMPRIVM())) and positif((RCMAB() + RTCAR() + RCMNAB())) * positif((RTNC() + RAVC() + RCMPRIVM())) * max(0, (saisie_variables.get('RCMFR', 0) - RCMAB() - RCMNAB() - RTNC() - (RAVC() - TABAVC()) - RTCAR() - RCMPRIVM()))) + ((1 - positif((RCMAB() + RTCAR() + RCMNAB()))) and (1 - positif((RTNC() + RAVC() + RCMPRIVM()))) and (1 - positif((RCMAB() + RTCAR() + RCMNAB()))) * (1 - positif((RTNC() + RAVC() + RCMPRIVM()))) * max(0, saisie_variables.get('RCMFR', 0))))

    @cache_result
    def DFRCMN():
        """
        deficeit suite a imputaion 2CA
        """
        return ((DFRCMNBIS() and DFRCMNBIS() * (1 - positif(base_variables['ART1731BIS']))) + ((saisie_variables.get('RCMFR', 0) - base_variables['RCMFRART1731']) and (saisie_variables.get('RCMFR', 0) - base_variables['RCMFRART1731']) * positif(base_variables['ART1731BIS'])))

    @cache_result
    def EXFR():
        """
        Excedent des frais de garde 2CA apres imputation sur xDC et xTS
        """
        return max(0, ((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) and min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) * base_variables['ART1731BIS']) - RCMAB() - RTCAR() - RCMNAB()))

    @cache_result
    def BRCMTOT():
        """
        Revenus de capitaux mobiliers declares
        """
        return (RCMAB() + RTNC() + RAVC() + RCMNAB() + RTCAR() + RCMPRIVM())

    @cache_result
    def TRCMABD():
        """
        total xDC avant refaction
        """
        return (saisie_variables.get('RCMABD', 0) + saisie_variables.get('REVACT', 0))

    @cache_result
    def FRAN():
        """
        Prorata des frais sur RCM ouvrant droit a abattement
        """
        return (positif(saisie_variables.get('RCMABD', 0)) and positif(saisie_variables.get('RCMABD', 0)) * ((null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif((saisie_variables.get('REVACT', 0) + RTCAR() + RCMNAB())) and positif((saisie_variables.get('REVACT', 0) + RTCAR() + RCMNAB())) * arr((((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) and min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) * base_variables['ART1731BIS'])) and saisie_variables.get('RCMABD', 0) and ((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) and min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) * base_variables['ART1731BIS'])) * saisie_variables.get('RCMABD', 0) / max(1, (TRCMABD() + RTCAR() + RCMNAB()))))) + ((1 - positif((saisie_variables.get('REVACT', 0) + RTCAR() + RCMNAB()))) and (1 - positif((saisie_variables.get('REVACT', 0) + RTCAR() + RCMNAB()))) * ((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) and min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) * base_variables['ART1731BIS']))))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif((saisie_variables.get('REVACT', 0) + RTCAR() + RCMNAB())) and positif((saisie_variables.get('REVACT', 0) + RTCAR() + RCMNAB())) * arr((((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) and min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) * base_variables['ART1731BIS'])) and saisie_variables.get('RCMABD', 0) and ((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) and min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) * base_variables['ART1731BIS'])) * saisie_variables.get('RCMABD', 0) / max(1, (TRCMABD() + RTCAR() + RCMNAB()))))) + ((1 - positif((saisie_variables.get('REVACT', 0) + RTCAR() + RCMNAB()))) and (1 - positif((saisie_variables.get('REVACT', 0) + RTCAR() + RCMNAB()))) * ((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) and min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) * base_variables['ART1731BIS'])))))))

    # WARNING: the variable "_1RAN" is used in a formula at least, but is not defined.
    def _1RAN(): return 0
    # WARNING: the variable "_1RIA" is used in a formula at least, but is not defined.
    def _1RIA(): return 0
    # WARNING: the variable "_1RNC" is used in a formula at least, but is not defined.
    def _1RNC(): return 0
    # WARNING: the variable "_2FRAN" is used in a formula at least, but is not defined.
    def _2FRAN(): return 0
    @cache_result
    def FRAR():
        """
        Prorata des frais sur RCM n'ouvrant pas droit a abattement
        """
        return (positif(saisie_variables.get('RCMHAB', 0)) and positif(saisie_variables.get('RCMHAB', 0)) * ((null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif((saisie_variables.get('INTERE', 0) + RCMNAB())) and positif((saisie_variables.get('INTERE', 0) + RCMNAB())) * arr((((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) and min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) * base_variables['ART1731BIS'])) and saisie_variables.get('RCMHAB', 0) and ((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) and min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) * base_variables['ART1731BIS'])) * saisie_variables.get('RCMHAB', 0) / max(1, (TRCMABD() + RTCAR() + RCMNAB()))))) + ((1 - positif((saisie_variables.get('INTERE', 0) + RCMNAB()))) and (1 - positif((saisie_variables.get('INTERE', 0) + RCMNAB()))) * (((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) and min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) * base_variables['ART1731BIS'])) - FRAN() - _2FRAN())))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif((saisie_variables.get('INTERE', 0) + RCMNAB())) and positif((saisie_variables.get('INTERE', 0) + RCMNAB())) * arr((((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) and min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) * base_variables['ART1731BIS'])) and saisie_variables.get('RCMHAB', 0) and ((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) and min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) * base_variables['ART1731BIS'])) * saisie_variables.get('RCMHAB', 0) / max(1, (TRCMABD() + RTCAR() + RCMNAB()))))) + ((1 - positif((saisie_variables.get('INTERE', 0) + RCMNAB()))) and (1 - positif((saisie_variables.get('INTERE', 0) + RCMNAB()))) * (((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) and min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) * base_variables['ART1731BIS'])) - FRAN() - _2FRAN()))))))

    # WARNING: the variable "_1RAR" is used in a formula at least, but is not defined.
    def _1RAR(): return 0
    # WARNING: the variable "_2FRAR" is used in a formula at least, but is not defined.
    def _2FRAR(): return 0
    @cache_result
    def FRAU():
        """
        Prorata des frais sur RCM n'ouvrant pas droit a abattement
        """
        return (positif(saisie_variables.get('RCMHAD', 0)) and positif(saisie_variables.get('RCMHAD', 0)) * ((null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(saisie_variables.get('DISQUO', 0)) and positif(saisie_variables.get('DISQUO', 0)) * arr((((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) and min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) * base_variables['ART1731BIS'])) and saisie_variables.get('RCMHAD', 0) and ((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) and min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) * base_variables['ART1731BIS'])) * saisie_variables.get('RCMHAD', 0) / max(1, (TRCMABD() + RTCAR() + RCMNAB()))))) + ((1 - positif(saisie_variables.get('DISQUO', 0))) and (1 - positif(saisie_variables.get('DISQUO', 0))) * (((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) and min(saisie_variables.get('RCMFR', 0), (BRCMTOT() + 0)) * base_variables['ART1731BIS'])) - FRAN() - _2FRAN() - FRAR() - _2FRAR())))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(saisie_variables.get('DISQUO', 0)) and positif(saisie_variables.get('DISQUO', 0)) * arr((((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) and min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) * base_variables['ART1731BIS'])) and saisie_variables.get('RCMHAD', 0) and ((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) and min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) * base_variables['ART1731BIS'])) * saisie_variables.get('RCMHAD', 0) / max(1, (TRCMABD() + RTCAR() + RCMNAB()))))) + ((1 - positif(saisie_variables.get('DISQUO', 0))) and (1 - positif(saisie_variables.get('DISQUO', 0))) * (((saisie_variables.get('RCMFR', 0) and saisie_variables.get('RCMFR', 0) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) and min(saisie_variables.get('RCMFR', 0), max(max(base_variables['BRCMTOTP2'], base_variables['BRCMTOT_P']), (base_variables['BRCMTOT1731'] + 0))) * base_variables['ART1731BIS'])) - FRAN() - _2FRAN() - FRAR() - _2FRAR()))))))

    # WARNING: the variable "_1RAU" is used in a formula at least, but is not defined.
    def _1RAU(): return 0
    # WARNING: the variable "_1RAO" is used in a formula at least, but is not defined.
    def _1RAO(): return 0
    @cache_result
    def RCAV():
        """
        Revenus ass-vie et capitalisation imposables
        """
        return max(0, (saisie_variables.get('RCMAV', 0) - ABAVC()))

    @cache_result
    def TRCM1():
        """
        cumul RCM Q1
        """
        return (_1RNC() + RCAV() + _1RAO())

    # WARNING: the variable "_2RNC" is used in a formula at least, but is not defined.
    def _2RNC(): return 0
    # WARNING: the variable "_2RCAV" is used in a formula at least, but is not defined.
    def _2RCAV(): return 0
    # WARNING: the variable "_2RAO" is used in a formula at least, but is not defined.
    def _2RAO(): return 0
    @cache_result
    def TRCM():
        """
        Total RCM + 2RCM +3RCM + 4RCM
        """
        return (TRCM1() + _2RNC() + _2RCAV() + _2RAO())

    @cache_result
    def FRG1():
        """
        Prorata des frais sur RCM ouvrant droit a abattement.Q1
        """
        return ((positif(EXFR()) and positif(EXFR()) * arr(((EXFR() and EXFR() * TRCM1()) and (EXFR() and EXFR() * TRCM1()) / TRCM()))) + ((1 - positif(EXFR())) and (1 - positif(EXFR())) * 0))

    # WARNING: the variable "_1RCM_I" is used in a formula at least, but is not defined.
    def _1RCM_I(): return 0
    # WARNING: the variable "_2RAN" is used in a formula at least, but is not defined.
    def _2RAN(): return 0
    # WARNING: the variable "_2RIA" is used in a formula at least, but is not defined.
    def _2RIA(): return 0
    # WARNING: the variable "_2RCM_I" is used in a formula at least, but is not defined.
    def _2RCM_I(): return 0
    @cache_result
    def FRG2():
        """
        Prorata des frais sur RCM ouvrant droit a abattement.Q2
        """
        return ((positif(EXFR()) and positif(EXFR()) * min(arr((EXFR() and _2RNC() and EXFR() * _2RNC() / TRCM())), (EXFR() - FRG1()))) + ((1 - positif(EXFR())) and (1 - positif(EXFR())) * 0))

    # WARNING: the variable "_3RCM_I" is used in a formula at least, but is not defined.
    def _3RCM_I(): return 0
    @cache_result
    def FRG3():
        """
        Prorata des frais sur RCM ouvrant droit a abattement.Q3
        """
        return ((positif(EXFR()) and positif(EXFR()) * min(arr((EXFR() and _2RCAV() and EXFR() * _2RCAV() / TRCM())), (EXFR() - FRG1() - FRG2()))) + ((1 - positif(EXFR())) and (1 - positif(EXFR())) * 0))

    # WARNING: the variable "_4RCM_I" is used in a formula at least, but is not defined.
    def _4RCM_I(): return 0
    # WARNING: the variable "_2FRAU" is used in a formula at least, but is not defined.
    def _2FRAU(): return 0
    # WARNING: the variable "_2RAU" is used in a formula at least, but is not defined.
    def _2RAU(): return 0
    # WARNING: the variable "_5RCM_I" is used in a formula at least, but is not defined.
    def _5RCM_I(): return 0
    @cache_result
    def FRG5():
        """
        Prorata des frais sur RCM ouvrant droit a abattement.Q1
        """
        return ((positif(EXFR()) and positif(EXFR()) * max(0, (EXFR() - FRG1() - FRG2() - FRG3()))) + ((1 - positif(EXFR())) and (1 - positif(EXFR())) * 0))

    # WARNING: the variable "_6RCM_I" is used in a formula at least, but is not defined.
    def _6RCM_I(): return 0
    # WARNING: the variable "_2RAR" is used in a formula at least, but is not defined.
    def _2RAR(): return 0
    # WARNING: the variable "_7RCM_I" is used in a formula at least, but is not defined.
    def _7RCM_I(): return 0
    @cache_result
    def RCM_I():
        """
        total xRCM_I
        """
        return (_1RCM_I() + _2RCM_I() + _3RCM_I() + _4RCM_I() + _5RCM_I() + _6RCM_I() + _7RCM_I())

    @cache_result
    def REPRCM():
        """
        Report deficit 2AA 2AL
        """
        return (saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) + saisie_variables.get('DEFRCM5', 0) + saisie_variables.get('DEFRCM6', 0))

    @cache_result
    def REPRCMBIS():
        """
        Report deficit 2AA 2AL apres art 1731
        """
        return (((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) + saisie_variables.get('DEFRCM5', 0) + saisie_variables.get('DEFRCM6', 0)) and (saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) + saisie_variables.get('DEFRCM5', 0) + saisie_variables.get('DEFRCM6', 0)) * (1 - positif(base_variables['ART1731BIS']))) + (min((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) + saisie_variables.get('DEFRCM5', 0) + saisie_variables.get('DEFRCM6', 0)), max(base_variables['REPRCM1731'], max(base_variables['REPRCM_P'], base_variables['REPRCMP2']))) and base_variables['ART1731BIS'] and min((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) + saisie_variables.get('DEFRCM5', 0) + saisie_variables.get('DEFRCM6', 0)), max(base_variables['REPRCM1731'], max(base_variables['REPRCM_P'], base_variables['REPRCMP2']))) * base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11'])) + (0 and base_variables['ART1731BIS'] and 0 * base_variables['ART1731BIS'] * base_variables['PREM8_11']))

    @cache_result
    def DFRCM5():
        """
        deficit suite a imputation 2AA, 2AL, 2AM , 2AN et 2AQ
        """
        return ((((saisie_variables.get('DEFRCM6', 0) and saisie_variables.get('DEFRCM6', 0) * positif(DFRCMN())) + (saisie_variables.get('DEFRCM6', 0) and positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) + saisie_variables.get('DEFRCM5', 0) - RCM_I())) and saisie_variables.get('DEFRCM6', 0) * positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) + saisie_variables.get('DEFRCM5', 0) - RCM_I())) * (1 - positif(DFRCMN()))) + (max(0, (saisie_variables.get('DEFRCM6', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0) - saisie_variables.get('DEFRCM5', 0)))) and positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0) - saisie_variables.get('DEFRCM5', 0))) and max(0, (saisie_variables.get('DEFRCM6', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0) - saisie_variables.get('DEFRCM5', 0)))) * positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0) - saisie_variables.get('DEFRCM5', 0))) * (1 - positif(DFRCMN())))) and ((saisie_variables.get('DEFRCM6', 0) and saisie_variables.get('DEFRCM6', 0) * positif(DFRCMN())) + (saisie_variables.get('DEFRCM6', 0) and positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) + saisie_variables.get('DEFRCM5', 0) - RCM_I())) and saisie_variables.get('DEFRCM6', 0) * positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) + saisie_variables.get('DEFRCM5', 0) - RCM_I())) * (1 - positif(DFRCMN()))) + (max(0, (saisie_variables.get('DEFRCM6', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0) - saisie_variables.get('DEFRCM5', 0)))) and positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0) - saisie_variables.get('DEFRCM5', 0))) and max(0, (saisie_variables.get('DEFRCM6', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0) - saisie_variables.get('DEFRCM5', 0)))) * positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0) - saisie_variables.get('DEFRCM5', 0))) * (1 - positif(DFRCMN())))) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('DEFRCM6', 0), (REPRCM() - REPRCMBIS())) and min(saisie_variables.get('DEFRCM6', 0), (REPRCM() - REPRCMBIS())) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11'])))) + (saisie_variables.get('DEFRCM6', 0) and saisie_variables.get('DEFRCM6', 0) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))

    @cache_result
    def DFRCM4():
        """
        deficit suite a imputation 2AA, 2AL, 2AM et 2AN
        """
        return ((((saisie_variables.get('DEFRCM5', 0) and saisie_variables.get('DEFRCM5', 0) * positif(DFRCMN())) + (saisie_variables.get('DEFRCM5', 0) and positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) - RCM_I())) and saisie_variables.get('DEFRCM5', 0) * positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) - RCM_I())) * (1 - positif(DFRCMN()))) + (max(0, (saisie_variables.get('DEFRCM5', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0)))) and positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0))) and max(0, (saisie_variables.get('DEFRCM5', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0)))) * positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0))) * (1 - positif(DFRCMN())))) and ((saisie_variables.get('DEFRCM5', 0) and saisie_variables.get('DEFRCM5', 0) * positif(DFRCMN())) + (saisie_variables.get('DEFRCM5', 0) and positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) - RCM_I())) and saisie_variables.get('DEFRCM5', 0) * positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) + saisie_variables.get('DEFRCM4', 0) - RCM_I())) * (1 - positif(DFRCMN()))) + (max(0, (saisie_variables.get('DEFRCM5', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0)))) and positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0))) and max(0, (saisie_variables.get('DEFRCM5', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0)))) * positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0) - saisie_variables.get('DEFRCM4', 0))) * (1 - positif(DFRCMN())))) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('DEFRCM5', 0), (REPRCM() - REPRCMBIS() - DFRCM5())) and min(saisie_variables.get('DEFRCM5', 0), (REPRCM() - REPRCMBIS() - DFRCM5())) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11'])))) + (saisie_variables.get('DEFRCM5', 0) and saisie_variables.get('DEFRCM5', 0) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))

    @cache_result
    def DFRCM3():
        """
        deficeit suite a imputaion 2AA, 2AL et 2AM
        """
        return ((((saisie_variables.get('DEFRCM4', 0) and saisie_variables.get('DEFRCM4', 0) * positif(DFRCMN())) + (saisie_variables.get('DEFRCM4', 0) and positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) - RCM_I())) and saisie_variables.get('DEFRCM4', 0) * positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) - RCM_I())) * (1 - positif(DFRCMN()))) + (max(0, (saisie_variables.get('DEFRCM4', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) and positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0))) and max(0, (saisie_variables.get('DEFRCM4', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) * positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0))) * (1 - positif(DFRCMN())))) and ((saisie_variables.get('DEFRCM4', 0) and saisie_variables.get('DEFRCM4', 0) * positif(DFRCMN())) + (saisie_variables.get('DEFRCM4', 0) and positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) - RCM_I())) and saisie_variables.get('DEFRCM4', 0) * positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) + saisie_variables.get('DEFRCM3', 0) - RCM_I())) * (1 - positif(DFRCMN()))) + (max(0, (saisie_variables.get('DEFRCM4', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) and positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0))) and max(0, (saisie_variables.get('DEFRCM4', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) * positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0) - saisie_variables.get('DEFRCM3', 0))) * (1 - positif(DFRCMN())))) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('DEFRCM4', 0), (REPRCM() - REPRCMBIS() - DFRCM5() - DFRCM4())) and min(saisie_variables.get('DEFRCM4', 0), (REPRCM() - REPRCMBIS() - DFRCM5() - DFRCM4())) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11'])))) + (saisie_variables.get('DEFRCM4', 0) and saisie_variables.get('DEFRCM4', 0) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))

    @cache_result
    def DFRCM2():
        """
        deficeit suite a imputaion 2AA et 2AL
        """
        return ((((saisie_variables.get('DEFRCM3', 0) and saisie_variables.get('DEFRCM3', 0) * positif(DFRCMN())) + (saisie_variables.get('DEFRCM3', 0) and positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) - RCM_I())) and saisie_variables.get('DEFRCM3', 0) * positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) - RCM_I())) * (1 - positif(DFRCMN()))) + (max(0, (saisie_variables.get('DEFRCM3', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) and positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0))) and max(0, (saisie_variables.get('DEFRCM3', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) * positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0))) * (1 - positif(DFRCMN())))) and ((saisie_variables.get('DEFRCM3', 0) and saisie_variables.get('DEFRCM3', 0) * positif(DFRCMN())) + (saisie_variables.get('DEFRCM3', 0) and positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) - RCM_I())) and saisie_variables.get('DEFRCM3', 0) * positif((saisie_variables.get('DEFRCM', 0) + saisie_variables.get('DEFRCM2', 0) - RCM_I())) * (1 - positif(DFRCMN()))) + (max(0, (saisie_variables.get('DEFRCM3', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) and positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0))) and max(0, (saisie_variables.get('DEFRCM3', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) * positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0) - saisie_variables.get('DEFRCM2', 0))) * (1 - positif(DFRCMN())))) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('DEFRCM3', 0), (REPRCM() - REPRCMBIS() - DFRCM5() - DFRCM4() - DFRCM3())) and min(saisie_variables.get('DEFRCM3', 0), (REPRCM() - REPRCMBIS() - DFRCM5() - DFRCM4() - DFRCM3())) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11'])))) + (saisie_variables.get('DEFRCM3', 0) and saisie_variables.get('DEFRCM3', 0) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))

    @cache_result
    def DFRCM1():
        """
        deficeit suite a imputaion 2AA
        """
        return ((((saisie_variables.get('DEFRCM2', 0) and saisie_variables.get('DEFRCM2', 0) * positif(DFRCMN())) + (saisie_variables.get('DEFRCM2', 0) and positif((saisie_variables.get('DEFRCM', 0) - RCM_I())) and saisie_variables.get('DEFRCM2', 0) * positif((saisie_variables.get('DEFRCM', 0) - RCM_I())) * (1 - positif(DFRCMN()))) + (max(0, (saisie_variables.get('DEFRCM2', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) and positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0))) and max(0, (saisie_variables.get('DEFRCM2', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) * positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0))) * (1 - positif(DFRCMN())))) and ((saisie_variables.get('DEFRCM2', 0) and saisie_variables.get('DEFRCM2', 0) * positif(DFRCMN())) + (saisie_variables.get('DEFRCM2', 0) and positif((saisie_variables.get('DEFRCM', 0) - RCM_I())) and saisie_variables.get('DEFRCM2', 0) * positif((saisie_variables.get('DEFRCM', 0) - RCM_I())) * (1 - positif(DFRCMN()))) + (max(0, (saisie_variables.get('DEFRCM2', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) and positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0))) and max(0, (saisie_variables.get('DEFRCM2', 0) - (RCM_I() - saisie_variables.get('DEFRCM', 0)))) * positif_ou_nul((RCM_I() - saisie_variables.get('DEFRCM', 0))) * (1 - positif(DFRCMN())))) * (1 - positif(base_variables['ART1731BIS']))) + (min(saisie_variables.get('DEFRCM2', 0), (REPRCM() - REPRCMBIS() - DFRCM5() - DFRCM4() - DFRCM3() - DFRCM2())) and min(saisie_variables.get('DEFRCM2', 0), (REPRCM() - REPRCMBIS() - DFRCM5() - DFRCM4() - DFRCM3() - DFRCM2())) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11'])))) + (saisie_variables.get('DEFRCM2', 0) and saisie_variables.get('DEFRCM2', 0) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))

    @cache_result
    def REPRCM1():
        """
        report Q1 suite a imputation 2AA
        """
        return ((positif(REPRCMBIS()) and positif(REPRCMBIS()) * arr(((REPRCMBIS() and REPRCMBIS() * _1RCM_I()) and (REPRCMBIS() and REPRCMBIS() * _1RCM_I()) / RCM_I()))) + ((1 - positif(REPRCMBIS())) and (1 - positif(REPRCMBIS())) * 0))

    @cache_result
    def RCM():
        """
        Revenus de capitaux mobiliers imposables
        """
        return ((((((1 - positif((DFRCM1() + DFRCM2() + DFRCM3() + DFRCM4() + DFRCM5()))) and (1 - positif((DFRCM1() + DFRCM2() + DFRCM3() + DFRCM4() + DFRCM5()))) * max(0, (_1RCM_I() - REPRCM1()))) - (positif((DFRCM1() + DFRCM2() + DFRCM3() + DFRCM4() + DFRCM5())) and positif((DFRCM1() + DFRCM2() + DFRCM3() + DFRCM4() + DFRCM5())) * 0)) and (((1 - positif((DFRCM1() + DFRCM2() + DFRCM3() + DFRCM4() + DFRCM5()))) and (1 - positif((DFRCM1() + DFRCM2() + DFRCM3() + DFRCM4() + DFRCM5()))) * max(0, (_1RCM_I() - REPRCM1()))) - (positif((DFRCM1() + DFRCM2() + DFRCM3() + DFRCM4() + DFRCM5())) and positif((DFRCM1() + DFRCM2() + DFRCM3() + DFRCM4() + DFRCM5())) * 0)) * (1 - positif(base_variables['ART1731BIS']))) + (positif(base_variables['ART1731BIS']) and positif(base_variables['ART1731BIS']) * max(0, (_1RCM_I() - REPRCM1()))))) if (((saisie_variables.get('V_REGCO', 0) + 0)) in (1, 3, 5, 6, 7)) else 0

    @cache_result
    def BIPTAV():
        """
        revenu professionnel BIC vous
        From BIPTAi
        """
        return (saisie_variables.get('BICNOV', 0) - (saisie_variables.get('BICDNV', 0) and saisie_variables.get('BICDNV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BIHTAV():
        """
        revenu  professionnel BIC vous hors CGA
        From BIHTAi
        """
        return (max(0, arr(((saisie_variables.get('BIHNOV', 0) - (saisie_variables.get('BIHDNV', 0) and saisie_variables.get('BIHDNV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('BIHNOV', 0) - (saisie_variables.get('BIHDNV', 0) and saisie_variables.get('BIHDNV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + min(0, (saisie_variables.get('BIHNOV', 0) - (saisie_variables.get('BIHDNV', 0) and saisie_variables.get('BIHDNV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))))

    @cache_result
    def MIB_TVENV():
        """
        le total rev prof et non prof  activit de vente de march
        From MIB_TVENi
        """
        return (saisie_variables.get('MIBVENV', 0) + saisie_variables.get('MIBNPVENV', 0) + saisie_variables.get('MIBGITEV', 0) + saisie_variables.get('LOCGITV', 0))

    @cache_result
    def MIB_AVV():
        """
        abattements vente de marchandise
        From MIB_AVi
        """
        return min(MIB_TVENV(), max(MIN_MBIC, arr((MIB_TVENV() and TX_MIBVEN and MIB_TVENV() * TX_MIBVEN / 100))))

    @cache_result
    def MIB_ABVV():
        """
        repartition de l abat rev professionnels vente de marchandise
        From MIB_ABVi
        """
        return max(0, arr((MIB_AVV() and saisie_variables.get('MIBVENV', 0) and MIB_AVV() * saisie_variables.get('MIBVENV', 0) / MIB_TVENV())))

    @cache_result
    def MIB_NETVV():
        """
        activit de vente de marchandises ou assimile
        From MIB_NETVi
        """
        return (saisie_variables.get('MIBVENV', 0) - MIB_ABVV())

    @cache_result
    def MIB_TPRESV():
        """
        le total rev prof et non prof prestations de services
        From MIB_TPRESi
        """
        return (saisie_variables.get('MIBPRESV', 0) + saisie_variables.get('MIBNPPRESV', 0) + saisie_variables.get('MIBMEUV', 0))

    @cache_result
    def MIB_APV():
        """
        Abattements prestations de service
        From MIB_APi
        """
        return min(MIB_TPRESV(), max(MIN_MBIC, arr((MIB_TPRESV() and TX_MIBPRES and MIB_TPRESV() * TX_MIBPRES / 100))))

    @cache_result
    def MIB_ABPV():
        """
        repartition de l abat rev  professionnels prestations
        From MIB_ABPi
        """
        return max(0, arr((MIB_APV() and saisie_variables.get('MIBPRESV', 0) and MIB_APV() * saisie_variables.get('MIBPRESV', 0) / MIB_TPRESV())))

    @cache_result
    def MIB_NETPV():
        """
        prestations de services net pro
        From MIB_NETPi
        """
        return (saisie_variables.get('MIBPRESV', 0) - MIB_ABPV())

    @cache_result
    def BIPTAC():
        """
        revenu professionnel BIC conjoint
        From BIPTAi
        """
        return (saisie_variables.get('BICNOC', 0) - (saisie_variables.get('BICDNC', 0) and saisie_variables.get('BICDNC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BIHTAC():
        """
        revenu  professionnel BIC cjt hors CGA
        From BIHTAi
        """
        return (max(0, arr(((saisie_variables.get('BIHNOC', 0) - (saisie_variables.get('BIHDNC', 0) and saisie_variables.get('BIHDNC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('BIHNOC', 0) - (saisie_variables.get('BIHDNC', 0) and saisie_variables.get('BIHDNC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + min(0, (saisie_variables.get('BIHNOC', 0) - (saisie_variables.get('BIHDNC', 0) and saisie_variables.get('BIHDNC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))))

    @cache_result
    def MIB_TVENC():
        """
        le total rev prof et non prof  activit de vente de march
        From MIB_TVENi
        """
        return (saisie_variables.get('MIBVENC', 0) + saisie_variables.get('MIBNPVENC', 0) + saisie_variables.get('MIBGITEC', 0) + saisie_variables.get('LOCGITC', 0))

    @cache_result
    def MIB_AVC():
        """
        abattements vente de marchandise
        From MIB_AVi
        """
        return min(MIB_TVENC(), max(MIN_MBIC, arr((MIB_TVENC() and TX_MIBVEN and MIB_TVENC() * TX_MIBVEN / 100))))

    @cache_result
    def MIB_ABVC():
        """
        repartition de l abat rev professionnels vente de marchandise
        From MIB_ABVi
        """
        return max(0, arr((MIB_AVC() and saisie_variables.get('MIBVENC', 0) and MIB_AVC() * saisie_variables.get('MIBVENC', 0) / MIB_TVENC())))

    @cache_result
    def MIB_NETVC():
        """
        activit de vente de marchandises ou assimile
        From MIB_NETVi
        """
        return (saisie_variables.get('MIBVENC', 0) - MIB_ABVC())

    @cache_result
    def MIB_TPRESC():
        """
        le total rev prof et non prof prestations de services
        From MIB_TPRESi
        """
        return (saisie_variables.get('MIBPRESC', 0) + saisie_variables.get('MIBNPPRESC', 0) + saisie_variables.get('MIBMEUC', 0))

    @cache_result
    def MIB_APC():
        """
        Abattements prestations de service
        From MIB_APi
        """
        return min(MIB_TPRESC(), max(MIN_MBIC, arr((MIB_TPRESC() and TX_MIBPRES and MIB_TPRESC() * TX_MIBPRES / 100))))

    @cache_result
    def MIB_ABPC():
        """
        repartition de l abat rev  professionnels prestations
        From MIB_ABPi
        """
        return max(0, arr((MIB_APC() and saisie_variables.get('MIBPRESC', 0) and MIB_APC() * saisie_variables.get('MIBPRESC', 0) / MIB_TPRESC())))

    @cache_result
    def MIB_NETPC():
        """
        prestations de services net pro
        From MIB_NETPi
        """
        return (saisie_variables.get('MIBPRESC', 0) - MIB_ABPC())

    @cache_result
    def BIPTAP():
        """
        revenu professionnel BIC PAC
        From BIPTAi
        """
        return (saisie_variables.get('BICNOP', 0) - (saisie_variables.get('BICDNP', 0) and saisie_variables.get('BICDNP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BIHTAP():
        """
        revenu  professionnel BIC PAC  hors CGA
        From BIHTAi
        """
        return (max(0, arr(((saisie_variables.get('BIHNOP', 0) - (saisie_variables.get('BIHDNP', 0) and saisie_variables.get('BIHDNP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('BIHNOP', 0) - (saisie_variables.get('BIHDNP', 0) and saisie_variables.get('BIHDNP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + min(0, (saisie_variables.get('BIHNOP', 0) - (saisie_variables.get('BIHDNP', 0) and saisie_variables.get('BIHDNP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))))

    @cache_result
    def MIB_TVENP():
        """
        le total rev prof et non prof  activit de vente de march 
        From MIB_TVENi
        """
        return (saisie_variables.get('MIBVENP', 0) + saisie_variables.get('MIBNPVENP', 0) + saisie_variables.get('MIBGITEP', 0) + saisie_variables.get('LOCGITP', 0))

    @cache_result
    def MIB_AVP():
        """
        abattements vente de marchandise
        From MIB_AVi
        """
        return min(MIB_TVENP(), max(MIN_MBIC, arr((MIB_TVENP() and TX_MIBVEN and MIB_TVENP() * TX_MIBVEN / 100))))

    @cache_result
    def MIB_ABVP():
        """
        repartition de l abat rev professionnels vente de marchandise
        From MIB_ABVi
        """
        return max(0, arr((MIB_AVP() and saisie_variables.get('MIBVENP', 0) and MIB_AVP() * saisie_variables.get('MIBVENP', 0) / MIB_TVENP())))

    @cache_result
    def MIB_NETVP():
        """
        activit de vente de marchandises ou assimile
        From MIB_NETVi
        """
        return (saisie_variables.get('MIBVENP', 0) - MIB_ABVP())

    @cache_result
    def MIB_TPRESP():
        """
        le total rev prof et non prof prestations de services
        From MIB_TPRESi
        """
        return (saisie_variables.get('MIBPRESP', 0) + saisie_variables.get('MIBNPPRESP', 0) + saisie_variables.get('MIBMEUP', 0))

    @cache_result
    def MIB_APP():
        """
        Abattements prestations de service
        From MIB_APi
        """
        return min(MIB_TPRESP(), max(MIN_MBIC, arr((MIB_TPRESP() and TX_MIBPRES and MIB_TPRESP() * TX_MIBPRES / 100))))

    @cache_result
    def MIB_ABPP():
        """
        repartition de l abat rev  professionnels prestations
        From MIB_ABPi
        """
        return max(0, arr((MIB_APP() and saisie_variables.get('MIBPRESP', 0) and MIB_APP() * saisie_variables.get('MIBPRESP', 0) / MIB_TPRESP())))

    @cache_result
    def MIB_NETPP():
        """
        prestations de services net pro
        From MIB_NETPi
        """
        return (saisie_variables.get('MIBPRESP', 0) - MIB_ABPP())

    @cache_result
    def MIB_NETCT():
        """
        BIC  plus ou moins values a court terme du foyer
        """
        return (saisie_variables.get('MIBPVV', 0) + saisie_variables.get('MIBPVC', 0) + saisie_variables.get('MIBPVP', 0) - saisie_variables.get('BICPMVCTV', 0) - saisie_variables.get('BICPMVCTC', 0) - saisie_variables.get('BICPMVCTP', 0))

    @cache_result
    def BICPF():
        """
        BIC pro imposables du foyer
        """
        return (somme([(BIPTAV() + BIHTAV() + MIB_NETVV() + MIB_NETPV()), (BIPTAC() + BIHTAC() + MIB_NETVC() + MIB_NETPC()), (BIPTAP() + BIHTAP() + MIB_NETVP() + MIB_NETPP())]) + MIB_NETCT())

    @cache_result
    def BINTAV():
        """
        revenu non professionnel BIC vous
        From BINTAi
        """
        return (saisie_variables.get('BICREV', 0) - (saisie_variables.get('BICDEV', 0) and saisie_variables.get('BICDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BINHTAV():
        """
        revenu non  professionnel BIC vous hors CGA
        From BINHTAi
        """
        return (max(0, arr(((saisie_variables.get('BICHREV', 0) - (saisie_variables.get('BICHDEV', 0) and saisie_variables.get('BICHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('BICHREV', 0) - (saisie_variables.get('BICHDEV', 0) and saisie_variables.get('BICHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + min(0, (saisie_variables.get('BICHREV', 0) - (saisie_variables.get('BICHDEV', 0) and saisie_variables.get('BICHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))))

    @cache_result
    def MIB_ABNPVV():
        """
        repartition de l abat rev  NON professionnels vente de march
        From MIB_ABNPVi
        """
        return ((max(0, arr((MIB_AVV() and saisie_variables.get('MIBNPVENV', 0) and MIB_AVV() * saisie_variables.get('MIBNPVENV', 0) / MIB_TVENV()))) and max(0, arr((MIB_AVV() and saisie_variables.get('MIBNPVENV', 0) and MIB_AVV() * saisie_variables.get('MIBNPVENV', 0) / MIB_TVENV()))) * positif((present(saisie_variables.get('MIBGITEV', 0)) + present(saisie_variables.get('LOCGITV', 0))))) + ((MIB_AVV() - MIB_ABVV()) and (MIB_AVV() - MIB_ABVV()) * (1 - positif((present(saisie_variables.get('MIBGITEV', 0)) + present(saisie_variables.get('LOCGITV', 0)))))))

    @cache_result
    def MIB_NETNPVV():
        """
        activit de vente de marchandises ou assimile NON prof
        From MIB_NETNPVi
        """
        return (saisie_variables.get('MIBNPVENV', 0) - MIB_ABNPVV())

    @cache_result
    def MIB_ABNPPV():
        """
        repartition de l abat rev  NON professionnels prestations
        From MIB_ABNPPi
        """
        return ((max(0, arr((MIB_APV() and saisie_variables.get('MIBNPPRESV', 0) and MIB_APV() * saisie_variables.get('MIBNPPRESV', 0) / MIB_TPRESV()))) and max(0, arr((MIB_APV() and saisie_variables.get('MIBNPPRESV', 0) and MIB_APV() * saisie_variables.get('MIBNPPRESV', 0) / MIB_TPRESV()))) * present(saisie_variables.get('MIBMEUV', 0))) + ((MIB_APV() - MIB_ABPV()) and (MIB_APV() - MIB_ABPV()) * (1 - present(saisie_variables.get('MIBMEUV', 0)))))

    @cache_result
    def MIB_NETNPPV():
        """
        prestations de services net  non pro
        From MIB_NETNPPi
        """
        return (saisie_variables.get('MIBNPPRESV', 0) - MIB_ABNPPV())

    @cache_result
    def BICNPV():
        """
        Montant net imposable BIC non pro
        From BICNPi
        """
        return (BINTAV() + BINHTAV() + MIB_NETNPVV() + MIB_NETNPPV())

    @cache_result
    def BINTAC():
        """
        revenu non professionnel BIC conjoint
        From BINTAi
        """
        return (saisie_variables.get('BICREC', 0) - (saisie_variables.get('BICDEC', 0) and saisie_variables.get('BICDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BINHTAC():
        """
        revenu non  professionnel BIC cjt  hors CGA
        From BINHTAi
        """
        return (max(0, arr(((saisie_variables.get('BICHREC', 0) - (saisie_variables.get('BICHDEC', 0) and saisie_variables.get('BICHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('BICHREC', 0) - (saisie_variables.get('BICHDEC', 0) and saisie_variables.get('BICHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + min(0, (saisie_variables.get('BICHREC', 0) - (saisie_variables.get('BICHDEC', 0) and saisie_variables.get('BICHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))))

    @cache_result
    def MIB_ABNPVC():
        """
        repartition de l abat rev  NON professionnels vente de march
        From MIB_ABNPVi
        """
        return ((max(0, arr((MIB_AVC() and saisie_variables.get('MIBNPVENC', 0) and MIB_AVC() * saisie_variables.get('MIBNPVENC', 0) / MIB_TVENC()))) and max(0, arr((MIB_AVC() and saisie_variables.get('MIBNPVENC', 0) and MIB_AVC() * saisie_variables.get('MIBNPVENC', 0) / MIB_TVENC()))) * positif((present(saisie_variables.get('MIBGITEC', 0)) + present(saisie_variables.get('LOCGITC', 0))))) + ((MIB_AVC() - MIB_ABVC()) and (MIB_AVC() - MIB_ABVC()) * (1 - positif((present(saisie_variables.get('MIBGITEC', 0)) + present(saisie_variables.get('LOCGITC', 0)))))))

    @cache_result
    def MIB_NETNPVC():
        """
        activit de vente de marchandises ou assimile NON prof
        From MIB_NETNPVi
        """
        return (saisie_variables.get('MIBNPVENC', 0) - MIB_ABNPVC())

    @cache_result
    def MIB_ABNPPC():
        """
        repartition de l abat rev  NON professionnels prestations
        From MIB_ABNPPi
        """
        return ((max(0, arr((MIB_APC() and saisie_variables.get('MIBNPPRESC', 0) and MIB_APC() * saisie_variables.get('MIBNPPRESC', 0) / MIB_TPRESC()))) and max(0, arr((MIB_APC() and saisie_variables.get('MIBNPPRESC', 0) and MIB_APC() * saisie_variables.get('MIBNPPRESC', 0) / MIB_TPRESC()))) * present(saisie_variables.get('MIBMEUC', 0))) + ((MIB_APC() - MIB_ABPC()) and (MIB_APC() - MIB_ABPC()) * (1 - present(saisie_variables.get('MIBMEUC', 0)))))

    @cache_result
    def MIB_NETNPPC():
        """
        prestations de services net  non pro
        From MIB_NETNPPi
        """
        return (saisie_variables.get('MIBNPPRESC', 0) - MIB_ABNPPC())

    @cache_result
    def BICNPC():
        """
        Montant net imposable BIC non pro
        From BICNPi
        """
        return (BINTAC() + BINHTAC() + MIB_NETNPVC() + MIB_NETNPPC())

    @cache_result
    def BINTAP():
        """
        revenu non professionnel BIC PAC
        From BINTAi
        """
        return (saisie_variables.get('BICREP', 0) - (saisie_variables.get('BICDEP', 0) and saisie_variables.get('BICDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BINHTAP():
        """
        revenu non professionnel BIC PAC hors CGA
        From BINHTAi
        """
        return (max(0, arr(((saisie_variables.get('BICHREP', 0) - (saisie_variables.get('BICHDEP', 0) and saisie_variables.get('BICHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('BICHREP', 0) - (saisie_variables.get('BICHDEP', 0) and saisie_variables.get('BICHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + min(0, (saisie_variables.get('BICHREP', 0) - (saisie_variables.get('BICHDEP', 0) and saisie_variables.get('BICHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))))

    @cache_result
    def MIB_ABNPVP():
        """
        repartition de l abat rev  NON professionnels vente de march
        From MIB_ABNPVi
        """
        return ((max(0, arr((MIB_AVP() and saisie_variables.get('MIBNPVENP', 0) and MIB_AVP() * saisie_variables.get('MIBNPVENP', 0) / MIB_TVENP()))) and max(0, arr((MIB_AVP() and saisie_variables.get('MIBNPVENP', 0) and MIB_AVP() * saisie_variables.get('MIBNPVENP', 0) / MIB_TVENP()))) * positif((present(saisie_variables.get('MIBGITEP', 0)) + present(saisie_variables.get('LOCGITP', 0))))) + ((MIB_AVP() - MIB_ABVP()) and (MIB_AVP() - MIB_ABVP()) * (1 - positif((present(saisie_variables.get('MIBGITEP', 0)) + present(saisie_variables.get('LOCGITP', 0)))))))

    @cache_result
    def MIB_NETNPVP():
        """
        activit de vente de marchandises ou assimile NON prof
        From MIB_NETNPVi
        """
        return (saisie_variables.get('MIBNPVENP', 0) - MIB_ABNPVP())

    @cache_result
    def MIB_ABNPPP():
        """
        repartition de l abat rev  NON professionnels prestations
        From MIB_ABNPPi
        """
        return ((max(0, arr((MIB_APP() and saisie_variables.get('MIBNPPRESP', 0) and MIB_APP() * saisie_variables.get('MIBNPPRESP', 0) / MIB_TPRESP()))) and max(0, arr((MIB_APP() and saisie_variables.get('MIBNPPRESP', 0) and MIB_APP() * saisie_variables.get('MIBNPPRESP', 0) / MIB_TPRESP()))) * present(saisie_variables.get('MIBMEUP', 0))) + ((MIB_APP() - MIB_ABPP()) and (MIB_APP() - MIB_ABPP()) * (1 - present(saisie_variables.get('MIBMEUP', 0)))))

    @cache_result
    def MIB_NETNPPP():
        """
        prestations de services net  non pro
        From MIB_NETNPPi
        """
        return (saisie_variables.get('MIBNPPRESP', 0) - MIB_ABNPPP())

    @cache_result
    def BICNPP():
        """
        Montant net imposable BIC non pro
        From BICNPi
        """
        return (BINTAP() + BINHTAP() + MIB_NETNPVP() + MIB_NETNPPP())

    @cache_result
    def MIB_NETNPCT():
        """
        BIC NON PROF plus ou moins values a court terme du foyer
        """
        return (saisie_variables.get('MIBNPPVV', 0) + saisie_variables.get('MIBNPPVC', 0) + saisie_variables.get('MIBNPPVP', 0) - saisie_variables.get('MIBNPDCT', 0))

    @cache_result
    def DEFNP():
        """
        BIC non professionnels (reel) - somme deficits anteri imputes en 97
        """
        return somme([((min(saisie_variables.get('DEFBIC1', 0), (base_variables['DEFBIC11731'] + 0)) and min(saisie_variables.get('DEFBIC1', 0), (base_variables['DEFBIC11731'] + 0)) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))) + (saisie_variables.get('DEFBIC1', 0) and saisie_variables.get('DEFBIC1', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))), ((min(saisie_variables.get('DEFBIC2', 0), (base_variables['DEFBIC21731'] + 0)) and min(saisie_variables.get('DEFBIC2', 0), (base_variables['DEFBIC21731'] + 0)) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))) + (saisie_variables.get('DEFBIC2', 0) and saisie_variables.get('DEFBIC2', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))), ((min(saisie_variables.get('DEFBIC3', 0), (base_variables['DEFBIC31731'] + 0)) and min(saisie_variables.get('DEFBIC3', 0), (base_variables['DEFBIC31731'] + 0)) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))) + (saisie_variables.get('DEFBIC3', 0) and saisie_variables.get('DEFBIC3', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))), ((min(saisie_variables.get('DEFBIC4', 0), (base_variables['DEFBIC41731'] + 0)) and min(saisie_variables.get('DEFBIC4', 0), (base_variables['DEFBIC41731'] + 0)) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))) + (saisie_variables.get('DEFBIC4', 0) and saisie_variables.get('DEFBIC4', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))), ((min(saisie_variables.get('DEFBIC5', 0), (base_variables['DEFBIC51731'] + 0)) and min(saisie_variables.get('DEFBIC5', 0), (base_variables['DEFBIC51731'] + 0)) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))) + (saisie_variables.get('DEFBIC5', 0) and saisie_variables.get('DEFBIC5', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))), ((min(saisie_variables.get('DEFBIC6', 0), (base_variables['DEFBIC61731'] + 0)) and min(saisie_variables.get('DEFBIC6', 0), (base_variables['DEFBIC61731'] + 0)) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))) + (saisie_variables.get('DEFBIC6', 0) and saisie_variables.get('DEFBIC6', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))])

    @cache_result
    def DEFNPI():
        """
        BIC non professionnels (reel) - deficits anterieurs imputes en 97
        """
        return ((abs(min(DEFNP(), (somme([(BICNPV() and BICNPV() * positif(BICNPV())), (BICNPC() and BICNPC() * positif(BICNPC())), (BICNPP() and BICNPP() * positif(BICNPP()))]) + MIB_NETNPCT()))) and positif((BICNPV() + BICNPC() + BICNPP() + MIB_NETNPCT())) and abs(min(DEFNP(), (somme([(BICNPV() and BICNPV() * positif(BICNPV())), (BICNPC() and BICNPC() * positif(BICNPC())), (BICNPP() and BICNPP() * positif(BICNPP()))]) + MIB_NETNPCT()))) * positif((BICNPV() + BICNPC() + BICNPP() + MIB_NETNPCT())) * (1 - positif(base_variables['ART1731BIS']))) + (base_variables['ART1731BIS'] and (1 - base_variables['PREM8_11']) and base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11']) * min((saisie_variables.get('DEFBIC6', 0) + saisie_variables.get('DEFBIC5', 0) + saisie_variables.get('DEFBIC4', 0) + saisie_variables.get('DEFBIC3', 0) + saisie_variables.get('DEFBIC2', 0) + saisie_variables.get('DEFBIC1', 0)), max(base_variables['DEFNPI1731'], max(base_variables['DEFNPI_P'], base_variables['DEFNPIP2'])))))

    @cache_result
    def DEFBICNPF():
        """
        BIC non professionnel deficit du foyer
        """
        return (base_variables['DEFRIBIC'] and (1 - base_variables['PREM8_11']) and base_variables['DEFRIBIC'] * (1 - base_variables['PREM8_11']) * max(0, min((saisie_variables.get('BICDEV', 0) + saisie_variables.get('BICDEC', 0) + saisie_variables.get('BICDEP', 0) + saisie_variables.get('BICHDEV', 0) + saisie_variables.get('BICHDEC', 0) + saisie_variables.get('BICHDEP', 0)), (max(base_variables['DFBICNPF1731'], max(base_variables['DFBICNPF_P'], base_variables['DFBICNPFP2'])) - saisie_variables.get('BICDEV', 0) - saisie_variables.get('BICDEC', 0) - saisie_variables.get('BICDEP', 0) - saisie_variables.get('BICHDEV', 0) - saisie_variables.get('BICHDEC', 0) - saisie_variables.get('BICHDEP', 0)))))

    @cache_result
    def BICNPF():
        """
        BIC non professionnel net imposable du foyer
        """
        return (((1 - (positif(base_variables['DEFRIBIC']) and positif(base_variables['DEFRIBIC']) * (1 - base_variables['PREM8_11']))) and (1 - (positif(base_variables['DEFRIBIC']) and positif(base_variables['DEFRIBIC']) * (1 - base_variables['PREM8_11']))) * max(0, (somme([BICNPV(), BICNPC(), BICNPP()]) + MIB_NETNPCT() - DEFNPI()))) + (positif(base_variables['DEFRIBIC']) and (1 - base_variables['PREM8_11']) and positif(base_variables['DEFRIBIC']) * (1 - base_variables['PREM8_11']) * max(0, (somme([BICNPV(), BICNPC(), BICNPP()]) + MIB_NETNPCT() - DEFNPI() + DEFBICNPF()))))

    @cache_result
    def BIN():
        """
        BIC a taux progressif
        """
        return (BICPF() + BICNPF())

    @cache_result
    def BNNSV():
        """
        BNC ne relevant pas d'une AA
        """
        return ((positif((saisie_variables.get('BNHREV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and positif((saisie_variables.get('BNHREV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * arr(((saisie_variables.get('BNHREV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('BNHREV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + ((1 - positif_ou_nul((saisie_variables.get('BNHREV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))) and (1 - positif_ou_nul((saisie_variables.get('BNHREV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))) * (saisie_variables.get('BNHREV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))))

    @cache_result
    def BNNAV():
        """
        BNC relevant d'une AA
        """
        return (saisie_variables.get('BNCREV', 0) - (saisie_variables.get('BNCDEV', 0) and saisie_variables.get('BNCDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BNRV():
        """
        BNC imposable suivant la declaration controlee Vous
        From BNRi
        """
        return (BNNSV() + BNNAV())

    @cache_result
    def BNNSC():
        """
        BNC ne relevant pas d'une AA
        """
        return ((positif((saisie_variables.get('BNHREC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and positif((saisie_variables.get('BNHREC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * arr(((saisie_variables.get('BNHREC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('BNHREC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + ((1 - positif_ou_nul((saisie_variables.get('BNHREC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))) and (1 - positif_ou_nul((saisie_variables.get('BNHREC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))) * (saisie_variables.get('BNHREC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))))

    @cache_result
    def BNNAC():
        """
        BNC relevant d'une AA
        """
        return (saisie_variables.get('BNCREC', 0) - (saisie_variables.get('BNCDEC', 0) and saisie_variables.get('BNCDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BNRC():
        """
        BNC imposable suivant la declaration controlee conjoint
        From BNRi
        """
        return (BNNSC() + BNNAC())

    @cache_result
    def BNNSP():
        """
        BNC ne relevant pas d'une AA
        """
        return ((positif((saisie_variables.get('BNHREP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and positif((saisie_variables.get('BNHREP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * arr(((saisie_variables.get('BNHREP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('BNHREP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + ((1 - positif_ou_nul((saisie_variables.get('BNHREP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))) and (1 - positif_ou_nul((saisie_variables.get('BNHREP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))) * (saisie_variables.get('BNHREP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))))

    @cache_result
    def BNNAP():
        """
        BNC relevant d'une AA
        """
        return (saisie_variables.get('BNCREP', 0) - (saisie_variables.get('BNCDEP', 0) and saisie_variables.get('BNCDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BNRP():
        """
        BNC imposable suivant la declaration controlee PAC
        From BNRi
        """
        return (BNNSP() + BNNAP())

    @cache_result
    def SPETOTV():
        """
        le rev total vous prof et non prof BNC regime special
        From SPETOTi
        """
        return (saisie_variables.get('BNCPROV', 0) + saisie_variables.get('BNCNPV', 0))

    @cache_result
    def SPEBASABV():
        """
        le rev total vous prof et non prof BNC reg spe base AB
        From SPEBASABi
        """
        return SPETOTV()

    @cache_result
    def SPEABV():
        """
        Abattement forfaitaire vous BNC regime special
        From SPEABi
        """
        return (arr((max(MIN_SPEBNC, (SPEBASABV() and SPETXAB and SPEBASABV() * SPETXAB / 100)) and max(MIN_SPEBNC, (SPEBASABV() and SPETXAB and SPEBASABV() * SPETXAB / 100)) * positif_ou_nul((SPETOTV() - MIN_SPEBNC)))) + arr((min(MIN_SPEBNC, SPEBASABV()) and min(MIN_SPEBNC, SPEBASABV()) * positif((MIN_SPEBNC - SPETOTV())))))

    @cache_result
    def SPEABPV():
        """
        Abattement forfaitaire vous BNC regime special professionnel
        From SPEABPi
        """
        return arr(((SPEABV() and SPEABV() * saisie_variables.get('BNCPROV', 0)) and (SPEABV() and SPEABV() * saisie_variables.get('BNCPROV', 0)) / SPETOTV()))

    @cache_result
    def SPENETPV():
        """
        Net imposable vous BNC regime special professionnel
        From SPENETPi
        """
        return max(0, (saisie_variables.get('BNCPROV', 0) - SPEABPV()))

    @cache_result
    def SPETOTC():
        """
        le rev total conj prof et non prof BNC regime special
        From SPETOTi
        """
        return (saisie_variables.get('BNCPROC', 0) + saisie_variables.get('BNCNPC', 0))

    @cache_result
    def SPEBASABC():
        """
        le rev total cjt prof et non prof BNC reg spe base AB
        From SPEBASABi
        """
        return SPETOTC()

    @cache_result
    def SPEABC():
        """
        Abattement forfaitaire conjoint BNC regime special
        From SPEABi
        """
        return (arr((max(MIN_SPEBNC, (SPEBASABC() and SPETXAB and SPEBASABC() * SPETXAB / 100)) and max(MIN_SPEBNC, (SPEBASABC() and SPETXAB and SPEBASABC() * SPETXAB / 100)) * positif_ou_nul((SPETOTC() - MIN_SPEBNC)))) + arr((min(MIN_SPEBNC, SPEBASABC()) and min(MIN_SPEBNC, SPEBASABC()) * positif((MIN_SPEBNC - SPETOTC())))))

    @cache_result
    def SPEABPC():
        """
        Abattement forfaitaire conjoint BNC regime special professionnel
        From SPEABPi
        """
        return arr(((SPEABC() and SPEABC() * saisie_variables.get('BNCPROC', 0)) and (SPEABC() and SPEABC() * saisie_variables.get('BNCPROC', 0)) / SPETOTC()))

    @cache_result
    def SPENETPC():
        """
        Net imposable conj BNC regime special professionnel
        From SPENETPi
        """
        return max(0, (saisie_variables.get('BNCPROC', 0) - SPEABPC()))

    @cache_result
    def SPETOTP():
        """
        le rev total pac prof et non prof BNC regime special
        From SPETOTi
        """
        return (saisie_variables.get('BNCPROP', 0) + saisie_variables.get('BNCNPP', 0))

    @cache_result
    def SPEBASABP():
        """
        le rev total pac prof et non prof BNC reg spe base AB
        From SPEBASABi
        """
        return SPETOTP()

    @cache_result
    def SPEABP():
        """
        Abattement forfaitaire pac BNC regime special
        From SPEABi
        """
        return (arr((max(MIN_SPEBNC, (SPEBASABP() and SPETXAB and SPEBASABP() * SPETXAB / 100)) and max(MIN_SPEBNC, (SPEBASABP() and SPETXAB and SPEBASABP() * SPETXAB / 100)) * positif_ou_nul((SPETOTP() - MIN_SPEBNC)))) + arr((min(MIN_SPEBNC, SPEBASABP()) and min(MIN_SPEBNC, SPEBASABP()) * positif((MIN_SPEBNC - SPETOTP())))))

    @cache_result
    def SPEABPP():
        """
        Abattement forfaitaire pac BNC regime special professionnel
        From SPEABPi
        """
        return arr(((SPEABP() and SPEABP() * saisie_variables.get('BNCPROP', 0)) and (SPEABP() and SPEABP() * saisie_variables.get('BNCPROP', 0)) / SPETOTP()))

    @cache_result
    def SPENETPP():
        """
        Net imposable pac BNC regime special professionnel
        From SPENETPi
        """
        return max(0, (saisie_variables.get('BNCPROP', 0) - SPEABPP()))

    @cache_result
    def SPENETCT():
        """
        Net imposable prof. BNC regime special PV a court terme
        """
        return (saisie_variables.get('BNCPROPVV', 0) + saisie_variables.get('BNCPROPVC', 0) + saisie_variables.get('BNCPROPVP', 0) - saisie_variables.get('BNCPMVCTV', 0) - saisie_variables.get('BNCPMVCTC', 0) - saisie_variables.get('BNCPMVCTP', 0))

    @cache_result
    def SPENETPF():
        """
        Net imposable prof. BNC regime special
        """
        return (somme([SPENETPV(), SPENETPC(), SPENETPP()]) + SPENETCT())

    @cache_result
    def SPEABNPV():
        """
        Abattement forfaitaire vous BNC regime special non professionnel
        From SPEABNPi
        """
        return (SPEABV() - SPEABPV())

    @cache_result
    def SPENETNPV():
        """
        Net imposable vous BNC regime special non professionnel
        From SPENETNPi
        """
        return max(0, (saisie_variables.get('BNCNPV', 0) - SPEABNPV()))

    @cache_result
    def SPEABNPC():
        """
        Abattement forfaitaire conj BNC regime special non professionnel
        From SPEABNPi
        """
        return (SPEABC() - SPEABPC())

    @cache_result
    def SPENETNPC():
        """
        Net imposable conj BNC regime special non professionnel
        From SPENETNPi
        """
        return max(0, (saisie_variables.get('BNCNPC', 0) - SPEABNPC()))

    @cache_result
    def SPEABNPP():
        """
        Abattement forfaitaire pac BNC regime special non professionnel
        From SPEABNPi
        """
        return (SPEABP() - SPEABPP())

    @cache_result
    def SPENETNPP():
        """
        Net imposable pac BNC regime special non professionnel
        From SPENETNPi
        """
        return max(0, (saisie_variables.get('BNCNPP', 0) - SPEABNPP()))

    @cache_result
    def SPENETNPCT():
        """
        Net imposable prof. BNC NON PRO regime special PV a court terme
        """
        return (saisie_variables.get('BNCNPPVV', 0) + saisie_variables.get('BNCNPPVC', 0) + saisie_variables.get('BNCNPPVP', 0) - saisie_variables.get('BNCNPDCT', 0))

    @cache_result
    def SPENETNPF():
        """
        Net imposable non prof. BNC regime special
        """
        return (somme([SPENETNPV(), SPENETNPC(), SPENETNPP()]) + SPENETNPCT())

    @cache_result
    def BNNAAV():
        """
        BNC non pro relevant d'une AA
        """
        return (saisie_variables.get('BNCAABV', 0) - (saisie_variables.get('BNCAADV', 0) and saisie_variables.get('BNCAADV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def NOCEPIMPV():
        """
        REV NON COMM NON PROF NETS IMPOSABLE MAJORES vous
        """
        return ((positif((saisie_variables.get('ANOCEP', 0) - (saisie_variables.get('DNOCEP', 0) and saisie_variables.get('DNOCEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and positif((saisie_variables.get('ANOCEP', 0) - (saisie_variables.get('DNOCEP', 0) and saisie_variables.get('DNOCEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * arr(((saisie_variables.get('ANOCEP', 0) - (saisie_variables.get('DNOCEP', 0) and saisie_variables.get('DNOCEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('ANOCEP', 0) - (saisie_variables.get('DNOCEP', 0) and saisie_variables.get('DNOCEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + (positif_ou_nul(((saisie_variables.get('DNOCEP', 0) and saisie_variables.get('DNOCEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('ANOCEP', 0))) and positif_ou_nul(((saisie_variables.get('DNOCEP', 0) and saisie_variables.get('DNOCEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('ANOCEP', 0))) * (saisie_variables.get('ANOCEP', 0) - (saisie_variables.get('DNOCEP', 0) and saisie_variables.get('DNOCEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) + BNNAAV())

    @cache_result
    def BNNAAC():
        """
        BNC non pro relevant d'une AA
        """
        return (saisie_variables.get('BNCAABC', 0) - (saisie_variables.get('BNCAADC', 0) and saisie_variables.get('BNCAADC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def NOCEPIMPC():
        """
        REV NON COMM NON PROF NETS IMPOSABLE MAJORES conj
        """
        return ((positif((saisie_variables.get('ANOVEP', 0) - (saisie_variables.get('DNOCEPC', 0) and saisie_variables.get('DNOCEPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and positif((saisie_variables.get('ANOVEP', 0) - (saisie_variables.get('DNOCEPC', 0) and saisie_variables.get('DNOCEPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * arr(((saisie_variables.get('ANOVEP', 0) - (saisie_variables.get('DNOCEPC', 0) and saisie_variables.get('DNOCEPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('ANOVEP', 0) - (saisie_variables.get('DNOCEPC', 0) and saisie_variables.get('DNOCEPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + (positif_ou_nul(((saisie_variables.get('DNOCEPC', 0) and saisie_variables.get('DNOCEPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('ANOVEP', 0))) and positif_ou_nul(((saisie_variables.get('DNOCEPC', 0) and saisie_variables.get('DNOCEPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('ANOVEP', 0))) * (saisie_variables.get('ANOVEP', 0) - (saisie_variables.get('DNOCEPC', 0) and saisie_variables.get('DNOCEPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) + BNNAAC())

    @cache_result
    def BNNAAP():
        """
        BNC non pro relevant d'une AA
        """
        return (saisie_variables.get('BNCAABP', 0) - (saisie_variables.get('BNCAADP', 0) and saisie_variables.get('BNCAADP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def NOCEPIMPP():
        """
        REV NON COMM NON PROF NETS IMPOSABLE MAJORES PAC
        """
        return ((positif((saisie_variables.get('ANOPEP', 0) - (saisie_variables.get('DNOCEPP', 0) and saisie_variables.get('DNOCEPP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and positif((saisie_variables.get('ANOPEP', 0) - (saisie_variables.get('DNOCEPP', 0) and saisie_variables.get('DNOCEPP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * arr(((saisie_variables.get('ANOPEP', 0) - (saisie_variables.get('DNOCEPP', 0) and saisie_variables.get('DNOCEPP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) and (saisie_variables.get('ANOPEP', 0) - (saisie_variables.get('DNOCEPP', 0) and saisie_variables.get('DNOCEPP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))) * MAJREV))) + (positif_ou_nul(((saisie_variables.get('DNOCEPP', 0) and saisie_variables.get('DNOCEPP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('ANOPEP', 0))) and positif_ou_nul(((saisie_variables.get('DNOCEPP', 0) and saisie_variables.get('DNOCEPP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('ANOPEP', 0))) * (saisie_variables.get('ANOPEP', 0) - (saisie_variables.get('DNOCEPP', 0) and saisie_variables.get('DNOCEPP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) + BNNAAP())

    @cache_result
    def NOCEPIMP():
        """
        REV NON COMMERCIAUX NON PROF NETS IMPOSABLE MAJORES
        """
        return (NOCEPIMPV() + NOCEPIMPC() + NOCEPIMPP())

    @cache_result
    def TOTDABNCNP():
        """
        def bnc impute art 1731
        """
        return ((null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and (saisie_variables.get('DABNCNP6', 0) + saisie_variables.get('DABNCNP5', 0) + saisie_variables.get('DABNCNP4', 0) + saisie_variables.get('DABNCNP3', 0) + saisie_variables.get('DABNCNP2', 0) + saisie_variables.get('DABNCNP1', 0)) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * (saisie_variables.get('DABNCNP6', 0) + saisie_variables.get('DABNCNP5', 0) + saisie_variables.get('DABNCNP4', 0) + saisie_variables.get('DABNCNP3', 0) + saisie_variables.get('DABNCNP2', 0) + saisie_variables.get('DABNCNP1', 0)) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * max(0, min((saisie_variables.get('DABNCNP6', 0) + saisie_variables.get('DABNCNP5', 0) + saisie_variables.get('DABNCNP4', 0) + saisie_variables.get('DABNCNP3', 0) + saisie_variables.get('DABNCNP2', 0) + saisie_variables.get('DABNCNP1', 0)), ((base_variables['TOTDABNCNP1731'] and base_variables['ART1731BIS'] and base_variables['TOTDABNCNP1731'] * base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11'])) + ((saisie_variables.get('DABNCNP6', 0) + saisie_variables.get('DABNCNP5', 0) + saisie_variables.get('DABNCNP4', 0) + saisie_variables.get('DABNCNP3', 0) + saisie_variables.get('DABNCNP2', 0) + saisie_variables.get('DABNCNP1', 0)) and (saisie_variables.get('DABNCNP6', 0) + saisie_variables.get('DABNCNP5', 0) + saisie_variables.get('DABNCNP4', 0) + saisie_variables.get('DABNCNP3', 0) + saisie_variables.get('DABNCNP2', 0) + saisie_variables.get('DABNCNP1', 0)) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))))))

    @cache_result
    def DIDABNCNP():
        """
        Act. non comm. non prof. : deficits ant. imput?s
        """
        return ((min((saisie_variables.get('DABNCNP1', 0) + saisie_variables.get('DABNCNP2', 0) + saisie_variables.get('DABNCNP3', 0) + saisie_variables.get('DABNCNP4', 0) + saisie_variables.get('DABNCNP5', 0) + saisie_variables.get('DABNCNP6', 0)), max(base_variables['DIDABNCNP11731'], max(base_variables['DIDABNCNP1_P'], base_variables['DIDABNCNP1P2']))) and positif(base_variables['DEFRIBNC']) and min((saisie_variables.get('DABNCNP1', 0) + saisie_variables.get('DABNCNP2', 0) + saisie_variables.get('DABNCNP3', 0) + saisie_variables.get('DABNCNP4', 0) + saisie_variables.get('DABNCNP5', 0) + saisie_variables.get('DABNCNP6', 0)), max(base_variables['DIDABNCNP11731'], max(base_variables['DIDABNCNP1_P'], base_variables['DIDABNCNP1P2']))) * positif(base_variables['DEFRIBNC']) * (1 - base_variables['PREM8_11'])) + (max(0, min((NOCEPIMP() + SPENETNPF()), (saisie_variables.get('DABNCNP1', 0) + saisie_variables.get('DABNCNP2', 0) + saisie_variables.get('DABNCNP3', 0) + saisie_variables.get('DABNCNP4', 0) + saisie_variables.get('DABNCNP5', 0) + saisie_variables.get('DABNCNP6', 0)))) and max(0, min((NOCEPIMP() + SPENETNPF()), (saisie_variables.get('DABNCNP1', 0) + saisie_variables.get('DABNCNP2', 0) + saisie_variables.get('DABNCNP3', 0) + saisie_variables.get('DABNCNP4', 0) + saisie_variables.get('DABNCNP5', 0) + saisie_variables.get('DABNCNP6', 0)))) * (1 - positif(base_variables['DEFRIBNC']))) + (0 and 0 * base_variables['PREM8_11']))

    @cache_result
    def BNN():
        """
        BNC imposables au taux progressif
        """
        return (((somme([BNRV(), BNRC(), BNRP()]) + SPENETPF() + max(0, (SPENETNPF() + NOCEPIMP() - TOTDABNCNP()))) and (somme([BNRV(), BNRC(), BNRP()]) + SPENETPF() + max(0, (SPENETNPF() + NOCEPIMP() - TOTDABNCNP()))) * (1 - base_variables['ART1731BIS'])) + ((somme([BNRV(), BNRC(), BNRP()]) + SPENETPF() + max(0, (SPENETNPF() + NOCEPIMP() - DIDABNCNP() + base_variables['DEFBNCNPF']))) and base_variables['ART1731BIS'] and (somme([BNRV(), BNRC(), BNRP()]) + SPENETPF() + max(0, (SPENETNPF() + NOCEPIMP() - DIDABNCNP() + base_variables['DEFBNCNPF']))) * base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11'])) + ((somme([BNRV(), BNRC(), BNRP()]) + SPENETPF() + max(0, (SPENETNPF() + NOCEPIMP()))) and base_variables['ART1731BIS'] and (somme([BNRV(), BNRC(), BNRP()]) + SPENETPF() + max(0, (SPENETNPF() + NOCEPIMP()))) * base_variables['ART1731BIS'] * base_variables['PREM8_11']))

    @cache_result
    def PLOCCGAV():
        """
        loctation meublee pro sous cga vous
        """
        return (saisie_variables.get('LOCPROCGAV', 0) - (saisie_variables.get('LOCDEFPROCGAV', 0) and saisie_variables.get('LOCDEFPROCGAV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def PLOCV():
        """
        loctation meublee pro hors cga vous
        """
        return ((min(0, (saisie_variables.get('LOCPROV', 0) - (saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and min(0, (saisie_variables.get('LOCPROV', 0) - (saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * positif_ou_nul(((saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('LOCPROV', 0)))) + (arr((max(0, (saisie_variables.get('LOCPROV', 0) - (saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCPROV', 0) - (saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) and arr((max(0, (saisie_variables.get('LOCPROV', 0) - (saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCPROV', 0) - (saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) * positif((saisie_variables.get('LOCPROV', 0) - (saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))))

    @cache_result
    def PLOCNETV():
        """
        loctation meublee pro sous et hors CGA vous
        """
        return (PLOCCGAV() + PLOCV())

    @cache_result
    def PLOCCGAC():
        """
        loctation meublee pro sous cga conjoint
        """
        return (saisie_variables.get('LOCPROCGAC', 0) - (saisie_variables.get('LOCDEFPROCGAC', 0) and saisie_variables.get('LOCDEFPROCGAC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def PLOCC():
        """
        loctation meublee pro hors cga conjoint
        """
        return ((min(0, (saisie_variables.get('LOCPROC', 0) - (saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and min(0, (saisie_variables.get('LOCPROC', 0) - (saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * positif_ou_nul(((saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('LOCPROC', 0)))) + (arr((max(0, (saisie_variables.get('LOCPROC', 0) - (saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCPROC', 0) - (saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) and arr((max(0, (saisie_variables.get('LOCPROC', 0) - (saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCPROC', 0) - (saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) * positif((saisie_variables.get('LOCPROC', 0) - (saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))))

    @cache_result
    def PLOCNETC():
        """
        loctation meublee pro sous et hors CGA conjoint
        """
        return (PLOCCGAC() + PLOCC())

    @cache_result
    def PLOCCGAPAC():
        """
        loctation meublee pro sous cga PAC
        """
        return (saisie_variables.get('LOCPROCGAP', 0) - (saisie_variables.get('LOCDEFPROCGAP', 0) and saisie_variables.get('LOCDEFPROCGAP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def PLOCPAC():
        """
        loctation meublee pro hors cga PAC
        """
        return ((min(0, (saisie_variables.get('LOCPROP', 0) - (saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and min(0, (saisie_variables.get('LOCPROP', 0) - (saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * positif_ou_nul(((saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('LOCPROP', 0)))) + (arr((max(0, (saisie_variables.get('LOCPROP', 0) - (saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCPROP', 0) - (saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) and arr((max(0, (saisie_variables.get('LOCPROP', 0) - (saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCPROP', 0) - (saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) * positif((saisie_variables.get('LOCPROP', 0) - (saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))))

    @cache_result
    def PLOCNETPAC():
        """
        loctation meublee pro sous et hors CGA PAC
        """
        return (PLOCCGAPAC() + PLOCPAC())

    @cache_result
    def PLOCNETF():
        """
        loctation meublee pro total foyer
        """
        return (PLOCNETV() + PLOCNETC() + PLOCNETPAC())

    @cache_result
    def NPLOCCGAV():
        """
        loctation meublee non pro sous cga vous
        """
        return (saisie_variables.get('LOCNPCGAV', 0) + saisie_variables.get('LOCGITCV', 0) - (saisie_variables.get('LOCDEFNPCGAV', 0) and saisie_variables.get('LOCDEFNPCGAV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def NPLOCV():
        """
        loctation meublee non pro hors cga vous
        """
        return ((min(0, (saisie_variables.get('LOCNPV', 0) + saisie_variables.get('LOCGITHCV', 0) - (saisie_variables.get('LOCDEFNPV', 0) and saisie_variables.get('LOCDEFNPV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and min(0, (saisie_variables.get('LOCNPV', 0) + saisie_variables.get('LOCGITHCV', 0) - (saisie_variables.get('LOCDEFNPV', 0) and saisie_variables.get('LOCDEFNPV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * positif_ou_nul(((saisie_variables.get('LOCDEFNPV', 0) and saisie_variables.get('LOCDEFNPV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('LOCNPV', 0) - saisie_variables.get('LOCGITHCV', 0)))) + (arr((max(0, (saisie_variables.get('LOCNPV', 0) + saisie_variables.get('LOCGITHCV', 0) - (saisie_variables.get('LOCDEFNPV', 0) and saisie_variables.get('LOCDEFNPV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCNPV', 0) + saisie_variables.get('LOCGITHCV', 0) - (saisie_variables.get('LOCDEFNPV', 0) and saisie_variables.get('LOCDEFNPV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) and arr((max(0, (saisie_variables.get('LOCNPV', 0) + saisie_variables.get('LOCGITHCV', 0) - (saisie_variables.get('LOCDEFNPV', 0) and saisie_variables.get('LOCDEFNPV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCNPV', 0) + saisie_variables.get('LOCGITHCV', 0) - (saisie_variables.get('LOCDEFNPV', 0) and saisie_variables.get('LOCDEFNPV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) * positif((saisie_variables.get('LOCNPV', 0) + saisie_variables.get('LOCGITHCV', 0) - (saisie_variables.get('LOCDEFNPV', 0) and saisie_variables.get('LOCDEFNPV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))))

    @cache_result
    def MIB_ABNPVLV():
        """
        repartition de l abat rev  NON professionnels loc gite
        From MIB_ABNPVLi
        """
        return ((MIB_AVV() - MIB_ABVV() - MIB_ABNPVV()) and (MIB_AVV() - MIB_ABVV() - MIB_ABNPVV()) * positif((present(saisie_variables.get('MIBGITEV', 0)) + present(saisie_variables.get('LOCGITV', 0)))))

    @cache_result
    def MIB_NETNPVLV():
        """
        prestations de services net  non pro
        From MIB_NETNPVLi
        """
        return (saisie_variables.get('MIBGITEV', 0) + saisie_variables.get('LOCGITV', 0) - MIB_ABNPVLV())

    @cache_result
    def MIB_ABNPPLV():
        """
        repartition de l abat rev  NON professionnels prestations
        From MIB_ABNPPLi
        """
        return ((MIB_APV() - MIB_ABPV() - MIB_ABNPPV()) and (MIB_APV() - MIB_ABPV() - MIB_ABNPPV()) * present(saisie_variables.get('MIBMEUV', 0)))

    @cache_result
    def MIB_NETNPPLV():
        """
        prestations de services net  non pro
        From MIB_NETNPPLi
        """
        return (saisie_variables.get('MIBMEUV', 0) - MIB_ABNPPLV())

    @cache_result
    def NPLOCNETTV():
        """
        loctation meublee non pro sous et hors CGA calcul vous
        """
        return (NPLOCCGAV() + NPLOCV() + MIB_NETNPVLV() + MIB_NETNPPLV())

    @cache_result
    def NPLOCCGAC():
        """
        loctation meublee non pro sous cga conjoint
        """
        return (saisie_variables.get('LOCNPCGAC', 0) + saisie_variables.get('LOCGITCC', 0) - (saisie_variables.get('LOCDEFNPCGAC', 0) and saisie_variables.get('LOCDEFNPCGAC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def NPLOCC():
        """
        loctation meublee non pro hors cga conjoint
        """
        return ((min(0, (saisie_variables.get('LOCNPC', 0) + saisie_variables.get('LOCGITHCC', 0) - (saisie_variables.get('LOCDEFNPC', 0) and saisie_variables.get('LOCDEFNPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and min(0, (saisie_variables.get('LOCNPC', 0) + saisie_variables.get('LOCGITHCC', 0) - (saisie_variables.get('LOCDEFNPC', 0) and saisie_variables.get('LOCDEFNPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * positif_ou_nul(((saisie_variables.get('LOCDEFNPC', 0) and saisie_variables.get('LOCDEFNPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('LOCNPC', 0) - saisie_variables.get('LOCGITHCC', 0)))) + (arr((max(0, (saisie_variables.get('LOCNPC', 0) + saisie_variables.get('LOCGITHCC', 0) - (saisie_variables.get('LOCDEFNPC', 0) and saisie_variables.get('LOCDEFNPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCNPC', 0) + saisie_variables.get('LOCGITHCC', 0) - (saisie_variables.get('LOCDEFNPC', 0) and saisie_variables.get('LOCDEFNPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) and arr((max(0, (saisie_variables.get('LOCNPC', 0) + saisie_variables.get('LOCGITHCC', 0) - (saisie_variables.get('LOCDEFNPC', 0) and saisie_variables.get('LOCDEFNPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCNPC', 0) + saisie_variables.get('LOCGITHCC', 0) - (saisie_variables.get('LOCDEFNPC', 0) and saisie_variables.get('LOCDEFNPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) * positif((saisie_variables.get('LOCNPC', 0) + saisie_variables.get('LOCGITHCC', 0) - (saisie_variables.get('LOCDEFNPC', 0) and saisie_variables.get('LOCDEFNPC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))))

    @cache_result
    def MIB_ABNPVLC():
        """
        repartition de l abat rev  NON professionnels loc gite
        From MIB_ABNPVLi
        """
        return ((MIB_AVC() - MIB_ABVC() - MIB_ABNPVC()) and (MIB_AVC() - MIB_ABVC() - MIB_ABNPVC()) * positif((present(saisie_variables.get('MIBGITEC', 0)) + present(saisie_variables.get('LOCGITC', 0)))))

    @cache_result
    def MIB_NETNPVLC():
        """
        prestations de services net  non pro
        From MIB_NETNPVLi
        """
        return (saisie_variables.get('MIBGITEC', 0) + saisie_variables.get('LOCGITC', 0) - MIB_ABNPVLC())

    @cache_result
    def MIB_ABNPPLC():
        """
        repartition de l abat rev  NON professionnels prestations
        From MIB_ABNPPLi
        """
        return ((MIB_APC() - MIB_ABPC() - MIB_ABNPPC()) and (MIB_APC() - MIB_ABPC() - MIB_ABNPPC()) * present(saisie_variables.get('MIBMEUC', 0)))

    @cache_result
    def MIB_NETNPPLC():
        """
        prestations de services net  non pro
        From MIB_NETNPPLi
        """
        return (saisie_variables.get('MIBMEUC', 0) - MIB_ABNPPLC())

    @cache_result
    def NPLOCNETTC():
        """
        loctation meublee non pro sous et hors CGA calcul conjoint 
        """
        return (NPLOCCGAC() + NPLOCC() + MIB_NETNPVLC() + MIB_NETNPPLC())

    @cache_result
    def NPLOCCGAPAC():
        """
        loctation meublee non pro sous cga PAC
        """
        return (saisie_variables.get('LOCNPCGAPAC', 0) + saisie_variables.get('LOCGITCP', 0) - (saisie_variables.get('LOCDEFNPCGAPAC', 0) and saisie_variables.get('LOCDEFNPCGAPAC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def NPLOCPAC():
        """
        loctation meublee non pro hors cga PAC
        """
        return ((min(0, (saisie_variables.get('LOCNPPAC', 0) + saisie_variables.get('LOCGITHCP', 0) - (saisie_variables.get('LOCDEFNPPAC', 0) and saisie_variables.get('LOCDEFNPPAC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and min(0, (saisie_variables.get('LOCNPPAC', 0) + saisie_variables.get('LOCGITHCP', 0) - (saisie_variables.get('LOCDEFNPPAC', 0) and saisie_variables.get('LOCDEFNPPAC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * positif_ou_nul(((saisie_variables.get('LOCDEFNPPAC', 0) and saisie_variables.get('LOCDEFNPPAC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) - saisie_variables.get('LOCNPPAC', 0) - saisie_variables.get('LOCGITHCP', 0)))) + (arr((max(0, (saisie_variables.get('LOCNPPAC', 0) + saisie_variables.get('LOCGITHCP', 0) - (saisie_variables.get('LOCDEFNPPAC', 0) and saisie_variables.get('LOCDEFNPPAC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCNPPAC', 0) + saisie_variables.get('LOCGITHCP', 0) - (saisie_variables.get('LOCDEFNPPAC', 0) and saisie_variables.get('LOCDEFNPPAC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) and arr((max(0, (saisie_variables.get('LOCNPPAC', 0) + saisie_variables.get('LOCGITHCP', 0) - (saisie_variables.get('LOCDEFNPPAC', 0) and saisie_variables.get('LOCDEFNPPAC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) and max(0, (saisie_variables.get('LOCNPPAC', 0) + saisie_variables.get('LOCGITHCP', 0) - (saisie_variables.get('LOCDEFNPPAC', 0) and saisie_variables.get('LOCDEFNPPAC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))) * MAJREV)) * positif((saisie_variables.get('LOCNPPAC', 0) + saisie_variables.get('LOCGITHCP', 0) - (saisie_variables.get('LOCDEFNPPAC', 0) and saisie_variables.get('LOCDEFNPPAC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))))

    @cache_result
    def MIB_ABNPVLP():
        """
        repartition de l abat rev  NON professionnels loc gite
        From MIB_ABNPVLi
        """
        return ((MIB_AVP() - MIB_ABVP() - MIB_ABNPVP()) and (MIB_AVP() - MIB_ABVP() - MIB_ABNPVP()) * positif((present(saisie_variables.get('MIBGITEP', 0)) + present(saisie_variables.get('LOCGITP', 0)))))

    @cache_result
    def MIB_NETNPVLP():
        """
        prestations de services net  non pro
        From MIB_NETNPVLi
        """
        return (saisie_variables.get('MIBGITEP', 0) + saisie_variables.get('LOCGITP', 0) - MIB_ABNPVLP())

    @cache_result
    def MIB_ABNPPLP():
        """
        repartition de l abat rev  NON professionnels prestations
        From MIB_ABNPPLi
        """
        return ((MIB_APP() - MIB_ABPP() - MIB_ABNPPP()) and (MIB_APP() - MIB_ABPP() - MIB_ABNPPP()) * present(saisie_variables.get('MIBMEUP', 0)))

    @cache_result
    def MIB_NETNPPLP():
        """
        prestations de services net  non pro
        From MIB_NETNPPLi
        """
        return (saisie_variables.get('MIBMEUP', 0) - MIB_ABNPPLP())

    @cache_result
    def NPLOCNETTPAC():
        """
        loctation meublee non pro sous et hors CGA calcul pac
        """
        return (NPLOCCGAPAC() + NPLOCPAC() + MIB_NETNPVLP() + MIB_NETNPPLP())

    @cache_result
    def TOTDEFLOCNP():
        """
        location meublee non pro deficit 
        """
        return (saisie_variables.get('LNPRODEF10', 0) + saisie_variables.get('LNPRODEF9', 0) + saisie_variables.get('LNPRODEF8', 0) + saisie_variables.get('LNPRODEF7', 0) + saisie_variables.get('LNPRODEF6', 0) + saisie_variables.get('LNPRODEF5', 0) + saisie_variables.get('LNPRODEF4', 0) + saisie_variables.get('LNPRODEF3', 0) + saisie_variables.get('LNPRODEF2', 0) + saisie_variables.get('LNPRODEF1', 0))

    @cache_result
    def DNPLOCIMPU():
        """
        location meublee non pro deficit ant impute 2010
        """
        return (((1 - base_variables['DEFRILOC']) and (1 - base_variables['PREM8_11']) and (1 - base_variables['DEFRILOC']) * (1 - base_variables['PREM8_11']) * max(0, min(TOTDEFLOCNP(), (NPLOCNETTV() + NPLOCNETTC() + NPLOCNETTPAC())))) + (positif(base_variables['DEFRILOC']) and (1 - base_variables['PREM8_11']) and positif(base_variables['DEFRILOC']) * (1 - base_variables['PREM8_11']) * min((saisie_variables.get('LNPRODEF10', 0) + saisie_variables.get('LNPRODEF9', 0) + saisie_variables.get('LNPRODEF8', 0) + saisie_variables.get('LNPRODEF7', 0) + saisie_variables.get('LNPRODEF6', 0) + saisie_variables.get('LNPRODEF5', 0) + saisie_variables.get('LNPRODEF4', 0) + saisie_variables.get('LNPRODEF3', 0) + saisie_variables.get('LNPRODEF2', 0) + saisie_variables.get('LNPRODEF1', 0)), max(base_variables['DNPLOCIMPU1731'], max(base_variables['DNPLOCIMPU_P'], base_variables['DNPLOCIMPUP2'])))))

    @cache_result
    def NPLOCNETF():
        """
        loctation meublee non pro total foyer
        """
        return ((positif(((1 - positif(base_variables['DEFRILOC'])) + base_variables['PREM8_11'])) and positif(((1 - positif(base_variables['DEFRILOC'])) + base_variables['PREM8_11'])) * max(0, (NPLOCNETTV() + NPLOCNETTC() + NPLOCNETTPAC() - DNPLOCIMPU()))) + (positif(base_variables['DEFRILOC']) and (1 - base_variables['PREM8_11']) and positif(base_variables['DEFRILOC']) * (1 - base_variables['PREM8_11']) * max(0, (NPLOCNETTV() + NPLOCNETTC() + NPLOCNETTPAC() - DNPLOCIMPU() + base_variables['DEFLOCNPF']))))

    @cache_result
    def RFCD():
        """
        Revenu foncier total declare
        """
        return (saisie_variables.get('RFORDI', 0) + saisie_variables.get('FONCI', 0) + saisie_variables.get('REAMOR', 0))

    @cache_result
    def DEFRF4BB():
        """
        deficeit suite a imputaion 2CA
        """
        return (min(saisie_variables.get('RFDORD', 0), max(base_variables['DEF4BB1731'], max(base_variables['DEF4BB_P'], base_variables['DEF4BBP2']))) and base_variables['DEFRIRF'] and min(saisie_variables.get('RFDORD', 0), max(base_variables['DEF4BB1731'], max(base_variables['DEF4BB_P'], base_variables['DEF4BBP2']))) * base_variables['DEFRIRF'] * (1 - base_variables['PREM8_11']))

    @cache_result
    def RFCE():
        """
        Revenu foncier total apres imputation deficits 3CE
        """
        return ((max(0, (RFCD() - saisie_variables.get('RFDORD', 0))) and max(0, (RFCD() - saisie_variables.get('RFDORD', 0))) * (1 - positif(base_variables['ART1731BIS']))) + (max(0, (RFCD() - DEFRF4BB())) and max(0, (RFCD() - DEFRF4BB())) * positif(base_variables['ART1731BIS'])))

    @cache_result
    def RFCF():
        """
        Revenu foncier total apres imputation deficits 3CF
        """
        return max(0, (RFCE() - (saisie_variables.get('RFDHIS', 0) and saisie_variables.get('RFDHIS', 0) * (1 - positif(base_variables['PREM8_11'])))))

    @cache_result
    def DEFRF4BD():
        """
        deficeit suite a imputaion 2CA
        """
        return (min(saisie_variables.get('RFDANT', 0), max(base_variables['DEF4BD1731'], max(base_variables['DEF4BD_P'], base_variables['DEF4BDP2']))) and base_variables['DEFRIRF'] and min(saisie_variables.get('RFDANT', 0), max(base_variables['DEF4BD1731'], max(base_variables['DEF4BD_P'], base_variables['DEF4BDP2']))) * base_variables['DEFRIRF'] * (1 - base_variables['PREM8_11']))

    @cache_result
    def RFCG():
        """
        Revenu foncier total apres imputation deficits (4CG)
        """
        return ((max(0, (RFCF() - saisie_variables.get('RFDANT', 0))) and max(0, (RFCF() - saisie_variables.get('RFDANT', 0))) * (1 - positif(base_variables['ART1731BIS']))) + (max(0, (RFCF() - DEFRF4BD())) and max(0, (RFCF() - DEFRF4BD())) * positif(base_variables['ART1731BIS'])))

    @cache_result
    def RFON():
        """
        Revenus fonciers
        """
        return arr((RFCG() and saisie_variables.get('RFORDI', 0) and RFCG() * saisie_variables.get('RFORDI', 0) / RFCD()))

    @cache_result
    def DRCF():
        """
        Deficit foncier imputable sur le RBG
        """
        return min(0, (RFCE() - (saisie_variables.get('RFDHIS', 0) and saisie_variables.get('RFDHIS', 0) * (1 - positif(base_variables['PREM8_11'])))))

    @cache_result
    def MICFR():
        """
        Frais forfaitaires Regime micro foncier
        """
        return (present(saisie_variables.get('RFMIC', 0)) and present(saisie_variables.get('RFMIC', 0)) * arr((saisie_variables.get('RFMIC', 0) and TX_MICFON and saisie_variables.get('RFMIC', 0) * TX_MICFON / 100)))

    @cache_result
    def RRFI():
        """
        Revenu foncier ordinaire imposable
        """
        return (((RFON() + DRCF() + max(0, (saisie_variables.get('RFMIC', 0) - MICFR() - saisie_variables.get('RFDANT', 0)))) and (RFON() + DRCF() + max(0, (saisie_variables.get('RFMIC', 0) - MICFR() - saisie_variables.get('RFDANT', 0)))) * (1 - positif(base_variables['ART1731BIS']))) + ((RFON() + DRCF() + max(0, (saisie_variables.get('RFMIC', 0) - MICFR() - DEFRF4BD()))) and (RFON() + DRCF() + max(0, (saisie_variables.get('RFMIC', 0) - MICFR() - DEFRF4BD()))) * positif(base_variables['ART1731BIS'])))

    @cache_result
    def RFNTEO():
        """
        Plaf. avantages fiscaux : rev. nets fonciers theoriq. hors benef. agr.
        """
        return (((saisie_variables.get('RFORDI', 0) + saisie_variables.get('RFROBOR', 0) - min(((min(saisie_variables.get('RFDORD', 0), (base_variables['RFDORD1731'] + 0)) and min(saisie_variables.get('RFDORD', 0), (base_variables['RFDORD1731'] + 0)) * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('RFDORD', 0) and saisie_variables.get('RFDORD', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('RFDANT', 0), (base_variables['RFDANT1731'] + 0)) and min(saisie_variables.get('RFDANT', 0), (base_variables['RFDANT1731'] + 0)) * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('RFDANT', 0) and saisie_variables.get('RFDANT', 0) * (1 - base_variables['ART1731BIS']))), (saisie_variables.get('RFORDI', 0) + saisie_variables.get('RFROBOR', 0))) - (saisie_variables.get('RFDHIS', 0) and saisie_variables.get('RFDHIS', 0) * (1 - base_variables['ART1731BIS']))) and (saisie_variables.get('RFORDI', 0) + saisie_variables.get('RFROBOR', 0) - min(((min(saisie_variables.get('RFDORD', 0), (base_variables['RFDORD1731'] + 0)) and min(saisie_variables.get('RFDORD', 0), (base_variables['RFDORD1731'] + 0)) * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('RFDORD', 0) and saisie_variables.get('RFDORD', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('RFDANT', 0), (base_variables['RFDANT1731'] + 0)) and min(saisie_variables.get('RFDANT', 0), (base_variables['RFDANT1731'] + 0)) * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('RFDANT', 0) and saisie_variables.get('RFDANT', 0) * (1 - base_variables['ART1731BIS']))), (saisie_variables.get('RFORDI', 0) + saisie_variables.get('RFROBOR', 0))) - (saisie_variables.get('RFDHIS', 0) and saisie_variables.get('RFDHIS', 0) * (1 - base_variables['ART1731BIS']))) * present(saisie_variables.get('RFROBOR', 0))) + (RRFI() and RRFI() * (1 - present(saisie_variables.get('RFROBOR', 0)))))

    @cache_result
    def RRFTEO():
        """
        Plaf. avantages fiscaux : Revenu foncier ordinaire th?orique imposable
        """
        return RFNTEO()

    @cache_result
    def SHBA():
        """
        Somme des revenus categoriels nets hors BA
        """
        return (((saisie_variables.get('ESFP', 0) + TSPR() + RCM() + BIN() + BNN() + PLOCNETF() + NPLOCNETF() + saisie_variables.get('COD3UV', 0) + saisie_variables.get('BPVRCM', 0) + saisie_variables.get('PVTAXSB', 0) + (saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + saisie_variables.get('COD3VE', 0) + ((saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) and (saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))) + ((RRFI() + 0) and (RRFI() + 0) * (1 - saisie_variables.get('V_INDTEO', 0))) + ((RRFTEO() + 0) and (RRFTEO() + 0) * saisie_variables.get('V_INDTEO', 0))) and (saisie_variables.get('ESFP', 0) + TSPR() + RCM() + BIN() + BNN() + PLOCNETF() + NPLOCNETF() + saisie_variables.get('COD3UV', 0) + saisie_variables.get('BPVRCM', 0) + saisie_variables.get('PVTAXSB', 0) + (saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + saisie_variables.get('COD3VE', 0) + ((saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) and (saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))) + ((RRFI() + 0) and (RRFI() + 0) * (1 - saisie_variables.get('V_INDTEO', 0))) + ((RRFTEO() + 0) and (RRFTEO() + 0) * saisie_variables.get('V_INDTEO', 0))) * (1 - base_variables['ART1731BIS'])) + ((saisie_variables.get('ESFP', 0) + TSPR() + RCM() + BIN() + BNN() + PLOCNETF() + NPLOCNETF() + saisie_variables.get('COD3UV', 0) + saisie_variables.get('BPVRCM', 0) + saisie_variables.get('PVTAXSB', 0) + (saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + saisie_variables.get('COD3VE', 0) + ((saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) and (saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))) + ((RRFI() + 0) and (RRFI() + 0) * (1 - saisie_variables.get('V_INDTEO', 0))) + ((RRFTEO() + 0) and (RRFTEO() + 0) * saisie_variables.get('V_INDTEO', 0))) and (saisie_variables.get('ESFP', 0) + TSPR() + RCM() + BIN() + BNN() + PLOCNETF() + NPLOCNETF() + saisie_variables.get('COD3UV', 0) + saisie_variables.get('BPVRCM', 0) + saisie_variables.get('PVTAXSB', 0) + (saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + saisie_variables.get('COD3VE', 0) + ((saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) and (saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))) + ((RRFI() + 0) and (RRFI() + 0) * (1 - saisie_variables.get('V_INDTEO', 0))) + ((RRFTEO() + 0) and (RRFTEO() + 0) * saisie_variables.get('V_INDTEO', 0))) * base_variables['ART1731BIS']))

    @cache_result
    def BARREVAV():
        """
        Benefices agricoles 'imposition normale' relevant d'un CGA
        """
        return (saisie_variables.get('BACREV', 0) + saisie_variables.get('4BACREV', 0))

    @cache_result
    def DEFBACREV():
        """
        Part du deficit sur code revenu
        From DEFBACREi
        """
        return ((positif(saisie_variables.get('4BACREV', 0)) and positif(saisie_variables.get('4BACREV', 0)) * arr((((saisie_variables.get('BACDEV', 0) and saisie_variables.get('BACDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BACDEV', 0) and saisie_variables.get('BACDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BACREV', 0)) and ((saisie_variables.get('BACDEV', 0) and saisie_variables.get('BACDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BACDEV', 0) and saisie_variables.get('BACDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BACREV', 0)) / BARREVAV()))) + ((1 - positif(saisie_variables.get('4BACREV', 0))) and (1 - positif(saisie_variables.get('4BACREV', 0))) * (saisie_variables.get('BACDEV', 0) and saisie_variables.get('BACDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))

    @cache_result
    def BARAV():
        """
        Benefices agricoles 'imposition normale' relevant d'un CGA
        """
        return (saisie_variables.get('BACREV', 0) + saisie_variables.get('4BACREV', 0) - (saisie_variables.get('BACDEV', 0) and saisie_variables.get('BACDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BANV():
        """
        Benefices agricoles 'imposition normale' d'un membre du foyer
        """
        return (((saisie_variables.get('BACREV', 0) - DEFBACREV()) and (saisie_variables.get('BACREV', 0) - DEFBACREV()) * positif_ou_nul(BARAV())) + (BARAV() and BARAV() * (1 - positif(BARAV()))))

    @cache_result
    def BARSREVV():
        """
        BA ne relevant pas d'un CGA sans deficit 
        """
        return (saisie_variables.get('BAHREV', 0) + saisie_variables.get('4BAHREV', 0))

    @cache_result
    def DEFBAHREV():
        """
        Part du deficit sur code revenu majore 
        From DEFBAHREi
        """
        return ((positif(saisie_variables.get('4BAHREV', 0)) and positif(saisie_variables.get('4BAHREV', 0)) * arr((((saisie_variables.get('BAHDEV', 0) and saisie_variables.get('BAHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BAHDEV', 0) and saisie_variables.get('BAHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BAHREV', 0)) and ((saisie_variables.get('BAHDEV', 0) and saisie_variables.get('BAHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BAHDEV', 0) and saisie_variables.get('BAHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BAHREV', 0)) / BARSREVV()))) + ((1 - positif(saisie_variables.get('4BAHREV', 0))) and (1 - positif(saisie_variables.get('4BAHREV', 0))) * (saisie_variables.get('BAHDEV', 0) and saisie_variables.get('BAHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))

    @cache_result
    def BARSV():
        """
        BA ne relevant pas d'un CGA
        """
        return (saisie_variables.get('BAHREV', 0) + saisie_variables.get('4BAHREV', 0) - (saisie_variables.get('BAHDEV', 0) and saisie_variables.get('BAHDEV', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BAMV():
        """
        ba majore vous
        """
        return ((arr(((saisie_variables.get('BAHREV', 0) - DEFBAHREV()) and (saisie_variables.get('BAHREV', 0) - DEFBAHREV()) * MAJREV)) and arr(((saisie_variables.get('BAHREV', 0) - DEFBAHREV()) and (saisie_variables.get('BAHREV', 0) - DEFBAHREV()) * MAJREV)) * positif_ou_nul(BARSV())) + (BARSV() and BARSV() * (1 - positif(BARSV()))))

    @cache_result
    def BAFORV():
        """
        ba forfaitaire majore vous
        """
        return (arr((saisie_variables.get('BAFV', 0) and saisie_variables.get('BAFV', 0) * MAJREV)) + saisie_variables.get('BAFORESTV', 0) + saisie_variables.get('BAFPVV', 0))

    @cache_result
    def BAHQV():
        """
        ba hors quotient vous
        """
        return (BANV() + BAMV() + BAFORV())

    @cache_result
    def BARREVAC():
        """
        Benefices agricoles 'imposition normale' relevant d'un CGA
        """
        return (saisie_variables.get('BACREC', 0) + saisie_variables.get('4BACREC', 0))

    @cache_result
    def DEFBACREC():
        """
        Part du deficit sur code revenu
        From DEFBACREi
        """
        return ((positif(saisie_variables.get('4BACREC', 0)) and positif(saisie_variables.get('4BACREC', 0)) * arr((((saisie_variables.get('BACDEC', 0) and saisie_variables.get('BACDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BACDEC', 0) and saisie_variables.get('BACDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BACREC', 0)) and ((saisie_variables.get('BACDEC', 0) and saisie_variables.get('BACDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BACDEC', 0) and saisie_variables.get('BACDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BACREC', 0)) / BARREVAC()))) + ((1 - positif(saisie_variables.get('4BACREC', 0))) and (1 - positif(saisie_variables.get('4BACREC', 0))) * (saisie_variables.get('BACDEC', 0) and saisie_variables.get('BACDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))

    @cache_result
    def BARAC():
        """
        Benefices agricoles 'imposition normale' relevant d'un CGA
        """
        return (saisie_variables.get('BACREC', 0) + saisie_variables.get('4BACREC', 0) - (saisie_variables.get('BACDEC', 0) and saisie_variables.get('BACDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BANC():
        """
        Benefices agricoles 'imposition normale' d'un membre du foyer
        """
        return (((saisie_variables.get('BACREC', 0) - DEFBACREC()) and (saisie_variables.get('BACREC', 0) - DEFBACREC()) * positif_ou_nul(BARAC())) + (BARAC() and BARAC() * (1 - positif(BARAC()))))

    @cache_result
    def BARSREVC():
        """
        BA ne relevant pas d'un CGA sans deficit 
        """
        return (saisie_variables.get('BAHREC', 0) + saisie_variables.get('4BAHREC', 0))

    @cache_result
    def DEFBAHREC():
        """
        Part du deficit sur code revenu majore 
        From DEFBAHREi
        """
        return ((positif(saisie_variables.get('4BAHREC', 0)) and positif(saisie_variables.get('4BAHREC', 0)) * arr((((saisie_variables.get('BAHDEC', 0) and saisie_variables.get('BAHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BAHDEC', 0) and saisie_variables.get('BAHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BAHREC', 0)) and ((saisie_variables.get('BAHDEC', 0) and saisie_variables.get('BAHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BAHDEC', 0) and saisie_variables.get('BAHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BAHREC', 0)) / BARSREVC()))) + ((1 - positif(saisie_variables.get('4BAHREC', 0))) and (1 - positif(saisie_variables.get('4BAHREC', 0))) * (saisie_variables.get('BAHDEC', 0) and saisie_variables.get('BAHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))

    @cache_result
    def BARSC():
        """
        BA ne relevant pas d'un CGA
        """
        return (saisie_variables.get('BAHREC', 0) + saisie_variables.get('4BAHREC', 0) - (saisie_variables.get('BAHDEC', 0) and saisie_variables.get('BAHDEC', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BAMC():
        """
        ba majore conj
        """
        return ((arr(((saisie_variables.get('BAHREC', 0) - DEFBAHREC()) and (saisie_variables.get('BAHREC', 0) - DEFBAHREC()) * MAJREV)) and arr(((saisie_variables.get('BAHREC', 0) - DEFBAHREC()) and (saisie_variables.get('BAHREC', 0) - DEFBAHREC()) * MAJREV)) * positif_ou_nul(BARSC())) + (BARSC() and BARSC() * (1 - positif(BARSC()))))

    @cache_result
    def BAFORC():
        """
        ba forfaitaire majore conj.
        """
        return (arr((saisie_variables.get('BAFC', 0) and saisie_variables.get('BAFC', 0) * MAJREV)) + saisie_variables.get('BAFORESTC', 0) + saisie_variables.get('BAFPVC', 0))

    @cache_result
    def BAHQC():
        """
        ba hors quotient conj
        """
        return (BANC() + BAMC() + BAFORC())

    @cache_result
    def BARREVAP():
        """
        Benefices agricoles 'imposition normale' relevant d'un CGA
        """
        return (saisie_variables.get('BACREP', 0) + saisie_variables.get('4BACREP', 0))

    @cache_result
    def DEFBACREP():
        """
        Part du deficit sur code revenu
        From DEFBACREi
        """
        return ((positif(saisie_variables.get('4BACREP', 0)) and positif(saisie_variables.get('4BACREP', 0)) * arr((((saisie_variables.get('BACDEP', 0) and saisie_variables.get('BACDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BACDEP', 0) and saisie_variables.get('BACDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BACREP', 0)) and ((saisie_variables.get('BACDEP', 0) and saisie_variables.get('BACDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BACDEP', 0) and saisie_variables.get('BACDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BACREP', 0)) / BARREVAP()))) + ((1 - positif(saisie_variables.get('4BACREP', 0))) and (1 - positif(saisie_variables.get('4BACREP', 0))) * (saisie_variables.get('BACDEP', 0) and saisie_variables.get('BACDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))

    @cache_result
    def BARAP():
        """
        Benefices agricoles 'imposition normale' relevant d'un CGA
        """
        return (saisie_variables.get('BACREP', 0) + saisie_variables.get('4BACREP', 0) - (saisie_variables.get('BACDEP', 0) and saisie_variables.get('BACDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BANP():
        """
        Benefices agricoles 'imposition normale' d'un membre du foyer
        """
        return (((saisie_variables.get('BACREP', 0) - DEFBACREP()) and (saisie_variables.get('BACREP', 0) - DEFBACREP()) * positif_ou_nul(BARAP())) + (BARAP() and BARAP() * (1 - positif(BARAP()))))

    @cache_result
    def BARSREVP():
        """
        BA ne relevant pas d'un CGA sans deficit 
        """
        return (saisie_variables.get('BAHREP', 0) + saisie_variables.get('4BAHREP', 0))

    @cache_result
    def DEFBAHREP():
        """
        Part du deficit sur code revenu majore 
        From DEFBAHREi
        """
        return ((positif(saisie_variables.get('4BAHREP', 0)) and positif(saisie_variables.get('4BAHREP', 0)) * arr((((saisie_variables.get('BAHDEP', 0) and saisie_variables.get('BAHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BAHDEP', 0) and saisie_variables.get('BAHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BAHREP', 0)) and ((saisie_variables.get('BAHDEP', 0) and saisie_variables.get('BAHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) and (saisie_variables.get('BAHDEP', 0) and saisie_variables.get('BAHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) * saisie_variables.get('BAHREP', 0)) / BARSREVP()))) + ((1 - positif(saisie_variables.get('4BAHREP', 0))) and (1 - positif(saisie_variables.get('4BAHREP', 0))) * (saisie_variables.get('BAHDEP', 0) and saisie_variables.get('BAHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))))

    @cache_result
    def BARSP():
        """
        BA ne relevant pas d'un CGA
        """
        return (saisie_variables.get('BAHREP', 0) + saisie_variables.get('4BAHREP', 0) - (saisie_variables.get('BAHDEP', 0) and saisie_variables.get('BAHDEP', 0) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))

    @cache_result
    def BAMP():
        """
        ba majore pac
        """
        return ((arr(((saisie_variables.get('BAHREP', 0) - DEFBAHREP()) and (saisie_variables.get('BAHREP', 0) - DEFBAHREP()) * MAJREV)) and arr(((saisie_variables.get('BAHREP', 0) - DEFBAHREP()) and (saisie_variables.get('BAHREP', 0) - DEFBAHREP()) * MAJREV)) * positif_ou_nul(BARSP())) + (BARSP() and BARSP() * (1 - positif(BARSP()))))

    @cache_result
    def BAFORP():
        """
        ba forfaitaire majore pac
        """
        return (arr((saisie_variables.get('BAFP', 0) and saisie_variables.get('BAFP', 0) * MAJREV)) + saisie_variables.get('BAFORESTP', 0) + saisie_variables.get('BAFPVP', 0))

    @cache_result
    def BAHQP():
        """
        ba hors quotient pac
        """
        return (BANP() + BAMP() + BAFORP())

    @cache_result
    def BAHQT():
        """
        ba  hors quotient total foyer sans def. ba anterieur
        """
        return (BAHQV() + BAHQC() + BAHQP())

    # WARNING: the variable "_4DEFBACREV" is used in a formula at least, but is not defined.
    def _4DEFBACREV(): return 0
    @cache_result
    def BAEV():
        """
        Benefices agricoles exceptionnels du declarant
        """
        return (((saisie_variables.get('4BACREV', 0) - _4DEFBACREV()) and (saisie_variables.get('4BACREV', 0) - _4DEFBACREV()) * positif_ou_nul(BARAV())) + 0)

    # WARNING: the variable "_4DEFBAHREV" is used in a formula at least, but is not defined.
    def _4DEFBAHREV(): return 0
    @cache_result
    def BAEMV():
        """
        ba except. majore vous
        """
        return ((arr(((saisie_variables.get('4BAHREV', 0) - _4DEFBAHREV()) and (saisie_variables.get('4BAHREV', 0) - _4DEFBAHREV()) * MAJREV)) and arr(((saisie_variables.get('4BAHREV', 0) - _4DEFBAHREV()) and (saisie_variables.get('4BAHREV', 0) - _4DEFBAHREV()) * MAJREV)) * positif_ou_nul(BARSV())) + 0)

    @cache_result
    def BAQV():
        """
        ba hors quotient vous
        """
        return (BAEV() + BAEMV())

    # WARNING: the variable "_4DEFBACREC" is used in a formula at least, but is not defined.
    def _4DEFBACREC(): return 0
    @cache_result
    def BAEC():
        """
        Benefices agricoles exceptionnels du conjoint
        """
        return (((saisie_variables.get('4BACREC', 0) - _4DEFBACREC()) and (saisie_variables.get('4BACREC', 0) - _4DEFBACREC()) * positif_ou_nul(BARAC())) + 0)

    # WARNING: the variable "_4DEFBAHREC" is used in a formula at least, but is not defined.
    def _4DEFBAHREC(): return 0
    @cache_result
    def BAEMC():
        """
        ba except. majore conj.
        """
        return ((arr(((saisie_variables.get('4BAHREC', 0) - _4DEFBAHREC()) and (saisie_variables.get('4BAHREC', 0) - _4DEFBAHREC()) * MAJREV)) and arr(((saisie_variables.get('4BAHREC', 0) - _4DEFBAHREC()) and (saisie_variables.get('4BAHREC', 0) - _4DEFBAHREC()) * MAJREV)) * positif_ou_nul(BARSC())) + 0)

    @cache_result
    def BAQC():
        """
        ba hors quotient conj 
        """
        return (BAEC() + BAEMC())

    # WARNING: the variable "_4DEFBACREP" is used in a formula at least, but is not defined.
    def _4DEFBACREP(): return 0
    @cache_result
    def BAEP():
        """
        Benefices agricoles exceptionnels des personnes a charge
        """
        return (((saisie_variables.get('4BACREP', 0) - _4DEFBACREP()) and (saisie_variables.get('4BACREP', 0) - _4DEFBACREP()) * positif_ou_nul(BARAP())) + 0)

    # WARNING: the variable "_4DEFBAHREP" is used in a formula at least, but is not defined.
    def _4DEFBAHREP(): return 0
    @cache_result
    def BAEMP():
        """
        ba except. majore pac
        """
        return ((arr(((saisie_variables.get('4BAHREP', 0) - _4DEFBAHREP()) and (saisie_variables.get('4BAHREP', 0) - _4DEFBAHREP()) * MAJREV)) and arr(((saisie_variables.get('4BAHREP', 0) - _4DEFBAHREP()) and (saisie_variables.get('4BAHREP', 0) - _4DEFBAHREP()) * MAJREV)) * positif_ou_nul(BARSP())) + 0)

    @cache_result
    def BAQP():
        """
        ba hors quotient pac
        """
        return (BAEP() + BAEMP())

    @cache_result
    def DAGRIIMP():
        """
        Deficits BA N-1 impute
        """
        return max(0, min((BAHQV() + BAHQC() + BAHQP() + BAQV() + BAQC() + BAQP()), (saisie_variables.get('DAGRI6', 0) + saisie_variables.get('DAGRI5', 0) + saisie_variables.get('DAGRI4', 0) + saisie_variables.get('DAGRI3', 0) + saisie_variables.get('DAGRI2', 0) + saisie_variables.get('DAGRI1', 0))))

    @cache_result
    def TOTDAGRI():
        """
        deficit agricole impute art 1731
        """
        return ((min((saisie_variables.get('DAGRI6', 0) + saisie_variables.get('DAGRI5', 0) + saisie_variables.get('DAGRI4', 0) + saisie_variables.get('DAGRI3', 0) + saisie_variables.get('DAGRI2', 0) + saisie_variables.get('DAGRI1', 0)), max(base_variables['DAGRIIMP1731'], max(base_variables['DAGRIIMP_P'], base_variables['DAGRIIMPP2']))) and min((saisie_variables.get('DAGRI6', 0) + saisie_variables.get('DAGRI5', 0) + saisie_variables.get('DAGRI4', 0) + saisie_variables.get('DAGRI3', 0) + saisie_variables.get('DAGRI2', 0) + saisie_variables.get('DAGRI1', 0)), max(base_variables['DAGRIIMP1731'], max(base_variables['DAGRIIMP_P'], base_variables['DAGRIIMPP2']))) * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11'])))) + (DAGRIIMP() and DAGRIIMP() * (1 - positif(base_variables['ART1731BIS']))) + (0 and 0 * positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))))

    @cache_result
    def BAHQTOTMAXP():
        """
        ba  hors quotient total foyer
        """
        return (positif_ou_nul(BAHQT()) and positif_ou_nul(BAHQT()) * max(0, (BAHQV() + BAHQC() + BAHQP() - TOTDAGRI())))

    @cache_result
    def BAHQTOTMIN():
        """
        ba  hors quotient total foyer
        """
        return (positif(BAHQT()) and positif(BAHQT()) * BAHQT())

    @cache_result
    def BAQTOTMIN():
        """
        ba  quotient total foyer neg. hors 5SQ
        """
        return min(0, (BAQV() + BAQC() + BAQP() + BAHQTOTMIN()))

    @cache_result
    def SOMBARET():
        """
        Somme  BA rev pour art 1731bis
        """
        return (saisie_variables.get('4BACREV', 0) + saisie_variables.get('4BACREC', 0) + saisie_variables.get('4BACREP', 0) + ((saisie_variables.get('4BAHREV', 0) + saisie_variables.get('4BAHREC', 0) + saisie_variables.get('4BAHREP', 0)) and (saisie_variables.get('4BAHREV', 0) + saisie_variables.get('4BAHREC', 0) + saisie_variables.get('4BAHREP', 0)) * MAJREV))

    # WARNING: the variable "_4BAQV" is used in a formula at least, but is not defined.
    def _4BAQV(): return 0
    # WARNING: the variable "_4BAQC" is used in a formula at least, but is not defined.
    def _4BAQC(): return 0
    # WARNING: the variable "_4BAQP" is used in a formula at least, but is not defined.
    def _4BAQP(): return 0
    @cache_result
    def SOMBARREVT():
        """
        Somme  BA rev norm + quot pour art 1731bis
        """
        return (_4BAQV() + _4BAQC() + _4BAQP())

    @cache_result
    def PROQDEFBAT():
        """
        Pro def a repartir  BA rev norm + quot pour art 1731bis
        """
        return ((max(0, (SOMBARET() - SOMBARREVT())) and max(0, (SOMBARET() - SOMBARREVT())) / base_variables['DEFBANIF']) and (max(0, (SOMBARET() - SOMBARREVT())) and max(0, (SOMBARET() - SOMBARREVT())) / base_variables['DEFBANIF']) * positif(base_variables['DEFBANIF']))

    @cache_result
    def BANOR():
        """
        Benefices agricoles taxes suivant l'imposition normale
        """
        return (((BAHQTOTMAXP() + BAQTOTMIN()) and (BAHQTOTMAXP() + BAQTOTMIN()) * (1 - base_variables['ART1731BIS'])) + ((BAHQTOTMAXP() + BAQTOTMIN() + arr((base_variables['DEFBANIF'] and base_variables['DEFBANIF'] * (1 - PROQDEFBAT())))) and base_variables['ART1731BIS'] and (BAHQTOTMAXP() + BAQTOTMIN() + arr((base_variables['DEFBANIF'] and base_variables['DEFBANIF'] * (1 - PROQDEFBAT())))) * base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11'])) + ((BAHQTOTMAXP() + BAQTOTMIN()) and base_variables['ART1731BIS'] and (BAHQTOTMAXP() + BAQTOTMIN()) * base_variables['ART1731BIS'] * base_variables['PREM8_11']))

    @cache_result
    def REB():
        """
        Reprises en base
        """
        return saisie_variables.get('REPSOF', 0)

    @cache_result
    def BTP2():
        """
        Base imposable a 22,5%
        """
        return (saisie_variables.get('PEA', 0) and saisie_variables.get('PEA', 0) * (1 - positif(saisie_variables.get('IPVLOC', 0))))

    @cache_result
    def BPTP2():
        """
        Revenus a taux proportionnel 22,5%
        """
        return (BTP2() and BTP2() * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def BTPVT():
        """
        Base imposable a 19%
        """
        return (saisie_variables.get('GAINPEA', 0) and saisie_variables.get('GAINPEA', 0) * (1 - positif(saisie_variables.get('IPVLOC', 0))))

    @cache_result
    def BPTPVT():
        """
        Revenus a taux proportionnel 19%
        """
        return (BTPVT() and BTPVT() * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def BPTP4():
        """
        Revenus au taux proportionnel 30%
        """
        return ((saisie_variables.get('BPCOPTV', 0) + saisie_variables.get('BPCOPTC', 0) + saisie_variables.get('BPVSK', 0)) and (1 - positif(saisie_variables.get('IPVLOC', 0))) and (saisie_variables.get('BPCOPTV', 0) + saisie_variables.get('BPCOPTC', 0) + saisie_variables.get('BPVSK', 0)) * (1 - positif(saisie_variables.get('IPVLOC', 0))) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def BN1V():
        """
        Plus-values BNC a 16% imposable vous
        From BN1i
        """
        return (saisie_variables.get('BN1AV', 0) + saisie_variables.get('PVINVE', 0) + saisie_variables.get('INVENTV', 0))

    @cache_result
    def BN1C():
        """
        Plus-values BNC a 16% imposable conjoint
        From BN1i
        """
        return (saisie_variables.get('BN1AC', 0) + saisie_variables.get('PVINCE', 0) + saisie_variables.get('INVENTC', 0))

    @cache_result
    def BN1P():
        """
        Plus-values BNC a 16% imposable PAC
        From BN1i
        """
        return (saisie_variables.get('BN1AP', 0) + saisie_variables.get('PVINPE', 0) + saisie_variables.get('INVENTP', 0))

    @cache_result
    def BN1():
        """
        BNC imposables a 16%
        """
        return somme([BN1V(), BN1C(), BN1P()])

    @cache_result
    def SPEPVPV():
        """
        Montant net vous BNC regime special prof
        From SPEPVPi
        """
        return (saisie_variables.get('BNCPRO1AV', 0) - saisie_variables.get('BNCPRODEV', 0))

    @cache_result
    def SPEPVNPV():
        """
        Montant net Plus Values vous BNC regime special non prof
        From SPEPVNPi
        """
        return (saisie_variables.get('BNCNP1AV', 0) - saisie_variables.get('BNCNPDEV', 0))

    @cache_result
    def SPEPVPC():
        """
        Montant net Plus Values conj BNC regime special prof
        From SPEPVPi
        """
        return (saisie_variables.get('BNCPRO1AC', 0) - saisie_variables.get('BNCPRODEC', 0))

    @cache_result
    def SPEPVNPC():
        """
        Montant net Plus Values conj BNC regime special non prof
        From SPEPVNPi
        """
        return (saisie_variables.get('BNCNP1AC', 0) - saisie_variables.get('BNCNPDEC', 0))

    @cache_result
    def SPEPVPP():
        """
        Montant net Plus Values pac BNC regime special prof
        From SPEPVPi
        """
        return (saisie_variables.get('BNCPRO1AP', 0) - saisie_variables.get('BNCPRODEP', 0))

    @cache_result
    def SPEPVNPP():
        """
        Montant net Plus Values pac BNC regime special non prof
        From SPEPVNPi
        """
        return (saisie_variables.get('BNCNP1AP', 0) - saisie_variables.get('BNCNPDEP', 0))

    @cache_result
    def SPEPV():
        """
        Montant net Plus Values total BNC regime special prof et non prof
        """
        return somme([max(0, (SPEPVPV() + SPEPVNPV())), max(0, (SPEPVPC() + SPEPVNPC())), max(0, (SPEPVPP() + SPEPVNPP()))])

    # WARNING: the variable "BIH1V" is used in a formula at least, but is not defined.
    def BIH1V(): return 0
    # WARNING: the variable "BIH2V" is used in a formula at least, but is not defined.
    def BIH2V(): return 0
    @cache_result
    def REVIBI12V():
        """
        BIC non pro nets d abattement CGA
        From REVIBI12i
        """
        return (BIH1V() + BIH2V() + saisie_variables.get('BI1AV', 0) + saisie_variables.get('BI2AV', 0))

    # WARNING: the variable "BIH1C" is used in a formula at least, but is not defined.
    def BIH1C(): return 0
    # WARNING: the variable "BIH2C" is used in a formula at least, but is not defined.
    def BIH2C(): return 0
    @cache_result
    def REVIBI12C():
        """
        BIC non pro nets d abattement CGA
        From REVIBI12i
        """
        return (BIH1C() + BIH2C() + saisie_variables.get('BI1AC', 0) + saisie_variables.get('BI2AC', 0))

    # WARNING: the variable "BIH1P" is used in a formula at least, but is not defined.
    def BIH1P(): return 0
    # WARNING: the variable "BIH2P" is used in a formula at least, but is not defined.
    def BIH2P(): return 0
    @cache_result
    def REVIBI12P():
        """
        BIC non pro nets d abattement CGA
        From REVIBI12i
        """
        return (BIH1P() + BIH2P() + saisie_variables.get('BI1AP', 0) + saisie_variables.get('BI2AP', 0))

    @cache_result
    def MIB_P1AV():
        """
        PV professionnelles
        From MIB_P1Ai
        """
        return (saisie_variables.get('MIB1AV', 0) - saisie_variables.get('MIBDEV', 0))

    @cache_result
    def MIB_NP1AV():
        """
        PV non professionnelles
        From MIB_NP1Ai
        """
        return (saisie_variables.get('MIBNP1AV', 0) - saisie_variables.get('MIBNPDEV', 0))

    @cache_result
    def MIB_1AV():
        """
        PV totales (prof et non professionnelles )
        From MIB_1Ai
        """
        return max(0, (MIB_P1AV() + MIB_NP1AV()))

    @cache_result
    def MIB_P1AC():
        """
        PV professionnelles
        From MIB_P1Ai
        """
        return (saisie_variables.get('MIB1AC', 0) - saisie_variables.get('MIBDEC', 0))

    @cache_result
    def MIB_NP1AC():
        """
        PV non professionnelles
        From MIB_NP1Ai
        """
        return (saisie_variables.get('MIBNP1AC', 0) - saisie_variables.get('MIBNPDEC', 0))

    @cache_result
    def MIB_1AC():
        """
        PV totales (prof et non professionnelles )
        From MIB_1Ai
        """
        return max(0, (MIB_P1AC() + MIB_NP1AC()))

    @cache_result
    def MIB_P1AP():
        """
        PV professionnelles
        From MIB_P1Ai
        """
        return (saisie_variables.get('MIB1AP', 0) - saisie_variables.get('MIBDEP', 0))

    @cache_result
    def MIB_NP1AP():
        """
        PV non professionnelles
        From MIB_NP1Ai
        """
        return (saisie_variables.get('MIBNP1AP', 0) - saisie_variables.get('MIBNPDEP', 0))

    @cache_result
    def MIB_1AP():
        """
        PV totales (prof et non professionnelles )
        From MIB_1Ai
        """
        return max(0, (MIB_P1AP() + MIB_NP1AP()))

    @cache_result
    def MIB_1AF():
        """
        PV nettes du foyer
        """
        return max(0, somme([MIB_1AV(), MIB_1AC(), MIB_1AP()]))

    @cache_result
    def BI12F():
        """
        BIC non pro nets d abattement CGA total
        """
        return (somme([REVIBI12V(), REVIBI12C(), REVIBI12P()]) + MIB_1AF())

    @cache_result
    def BA1V():
        """
        Plus-values BA CGA a 16% nettes d'abattement - vous
        """
        return (saisie_variables.get('BA1AV', 0) + saisie_variables.get('BAF1AV', 0))

    @cache_result
    def BA1C():
        """
        Plus-values BA CGA a 16% nettes d'abattement - cjt
        """
        return (saisie_variables.get('BA1AC', 0) + saisie_variables.get('BAF1AC', 0))

    @cache_result
    def BA1P():
        """
        Plus-values BA CGA a 16% nettes d'abattement - PAC
        """
        return (saisie_variables.get('BA1AP', 0) + saisie_variables.get('BAF1AP', 0))

    @cache_result
    def BA1():
        """
        Plus-values BA imposables pour le foyer
        """
        return (BA1V() + BA1C() + BA1P())

    @cache_result
    def BTP3A():
        """
        Base imposable a 16% ouvrant droit a abattement DOM
        """
        return ((BN1() + SPEPV() + BI12F() + BA1()) and (BN1() + SPEPV() + BI12F() + BA1()) * (1 - positif(saisie_variables.get('IPVLOC', 0))))

    @cache_result
    def BTP40():
        """
        Base imposable a 40%
        """
        return ((saisie_variables.get('BPV40V', 0) + saisie_variables.get('BPV40C', 0)) and (saisie_variables.get('BPV40V', 0) + saisie_variables.get('BPV40C', 0)) * (1 - positif(saisie_variables.get('IPVLOC', 0))))

    @cache_result
    def BPTP40():
        """
        Revenus au taux proportionnel 40%
        """
        return (BTP40() and BTP40() * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def RCM2FA():
        """
        Revenus de capitaux mobiliers 2FA imposables 
        """
        return (saisie_variables.get('COD2FA', 0) and saisie_variables.get('COD2FA', 0) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))))

    @cache_result
    def BPTP24():
        """
        Revenus au taux proportionnel 24%
        """
        return (RCM2FA() and (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))) and RCM2FA() * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))))

    @cache_result
    def BTP18():
        """
        Base imposable a 18%
        """
        return ((saisie_variables.get('BPV18V', 0) + saisie_variables.get('BPV18C', 0)) and (saisie_variables.get('BPV18V', 0) + saisie_variables.get('BPV18C', 0)) * (1 - positif(saisie_variables.get('IPVLOC', 0))))

    @cache_result
    def BPTP18():
        """
        Revenus au taux proportionnel 18%
        """
        return (BTP18() and BTP18() * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def BTPSJ():
        """
        Base imposable code 3SJ
        """
        return (saisie_variables.get('BPVSJ', 0) and saisie_variables.get('BPVSJ', 0) * (1 - positif(saisie_variables.get('IPVLOC', 0))))

    @cache_result
    def BPTPSJ():
        """
        Revenus au taux proportionnel 3SJ
        """
        return (BTPSJ() and BTPSJ() * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def REVTP():
        """
        Revenus au taux proportionnel ,en restitution (l9)
        """
        return (BPTP2() + BPTPVT() + BPTP4() + BTP3A() + BPTP40() + BPTP24() + BPTP18() + BPTPSJ())

    @cache_result
    def INDEFTSV():
        """
        indicateur deficit TS frais reel sup declare TS
        From INDEFTSi
        """
        return positif_ou_nul((TSBV() - FRDV()))

    @cache_result
    def GLN1V():
        """
        Gain de levee d'option net
        """
        return (max((saisie_variables.get('GLD1V', 0) - ABGL1V()), 0) and max((saisie_variables.get('GLD1V', 0) - ABGL1V()), 0) * INDEFTSV())

    @cache_result
    def INDEFTSC():
        """
        indicateur deficit TS frais reel sup declare TS
        From INDEFTSi
        """
        return positif_ou_nul((TSBC() - FRDC()))

    @cache_result
    def GLN1C():
        """
        Gain de levee d'option net
        """
        return (max((saisie_variables.get('GLD1C', 0) - ABGL1C()), 0) and max((saisie_variables.get('GLD1C', 0) - ABGL1C()), 0) * INDEFTSC())

    @cache_result
    def GLN1():
        """
        Gain de levee d'option net
        From GLNx
        """
        return (GLN1V() + GLN1C())

    @cache_result
    def GLN2V():
        """
        Gain de levee d'option net
        """
        return (max((saisie_variables.get('GLD2V', 0) - ABGL2V()), 0) and max((saisie_variables.get('GLD2V', 0) - ABGL2V()), 0) * INDEFTSV())

    @cache_result
    def GLN2C():
        """
        Gain de levee d'option net
        """
        return (max((saisie_variables.get('GLD2C', 0) - ABGL2C()), 0) and max((saisie_variables.get('GLD2C', 0) - ABGL2C()), 0) * INDEFTSC())

    @cache_result
    def GLN2():
        """
        Gain de levee d'option net
        From GLNx
        """
        return (GLN2V() + GLN2C())

    @cache_result
    def GLN3V():
        """
        Gain de levee d'option net
        """
        return (max((saisie_variables.get('GLD3V', 0) - ABGL3V()), 0) and max((saisie_variables.get('GLD3V', 0) - ABGL3V()), 0) * INDEFTSV())

    @cache_result
    def GLN3C():
        """
        Gain de levee d'option net
        """
        return (max((saisie_variables.get('GLD3C', 0) - ABGL3C()), 0) and max((saisie_variables.get('GLD3C', 0) - ABGL3C()), 0) * INDEFTSC())

    @cache_result
    def GLN3():
        """
        Gain de levee d'option net
        From GLNx
        """
        return (GLN3V() + GLN3C())

    # WARNING: the variable "_4BAQTOT" is used in a formula at least, but is not defined.
    def _4BAQTOT(): return 0
    @cache_result
    def BAHQTOTMAXN():
        """
        ba  hors quotient total foyer
        """
        return (positif_ou_nul(BAHQT()) and positif_ou_nul(BAHQT()) * min(0, (BAHQV() + BAHQC() + BAHQP() - (TOTDAGRI() and TOTDAGRI() * (1 - base_variables['ART1731BIS'])))))

    # WARNING: the variable "_4BAQTOTNET" is used in a formula at least, but is not defined.
    def _4BAQTOTNET(): return 0
    @cache_result
    def GLN4V():
        """
        Salaires DOM quotient 4
        """
        return ((max((saisie_variables.get('CODDAJ', 0) - ABDOMDAJ()), 0) + max((saisie_variables.get('CODEAJ', 0) - ABDOMEAJ()), 0)) and (max((saisie_variables.get('CODDAJ', 0) - ABDOMDAJ()), 0) + max((saisie_variables.get('CODEAJ', 0) - ABDOMEAJ()), 0)) * INDEFTSV())

    @cache_result
    def GLN4C():
        """
        Salaires DOM quotient 4
        """
        return ((max((saisie_variables.get('CODDBJ', 0) - ABDOMDBJ()), 0) + max((saisie_variables.get('CODEBJ', 0) - ABDOMEBJ()), 0)) and (max((saisie_variables.get('CODDBJ', 0) - ABDOMDBJ()), 0) + max((saisie_variables.get('CODEBJ', 0) - ABDOMEBJ()), 0)) * INDEFTSC())

    @cache_result
    def REV4():
        """
        revenus au quotient 4
        """
        return (_4BAQTOTNET() + GLN4V() + GLN4C())

    @cache_result
    def PRR2V():
        """
        Pensions nettes taxees au quotient 2 - Vous
        """
        return ((positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0) + saisie_variables.get('CODRAZ', 0))) and positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0) + saisie_variables.get('CODRAZ', 0))) * arr((PRNV() and saisie_variables.get('CARPEV', 0) and PRNV() * saisie_variables.get('CARPEV', 0) / EXPRV()))) + ((1 - positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0) + saisie_variables.get('CODRAZ', 0)))) and (1 - positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0) + saisie_variables.get('CODRAZ', 0)))) * (PRNV() - PRRV())))

    @cache_result
    def PRR2ZV():
        """
        Pensions nettes taxees au quotient  - code RxZ
        """
        return ((positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0))) and positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0))) * arr((PRNV() and saisie_variables.get('CODRAZ', 0) and PRNV() * saisie_variables.get('CODRAZ', 0) / EXPRV()))) + ((1 - positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0)))) and (1 - positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0)))) * (PRNV() - PRRV() - PRR2V())))

    @cache_result
    def PENFV():
        """
        Pensions nettes footballeurs - Vous
        From PENFi
        """
        return ((positif(saisie_variables.get('PENSALV', 0)) and positif(saisie_variables.get('PENSALV', 0)) * arr((PRNV() and saisie_variables.get('PEBFV', 0) and PRNV() * saisie_variables.get('PEBFV', 0) / EXPRV()))) + ((1 - positif(saisie_variables.get('PENSALV', 0))) and (1 - positif(saisie_variables.get('PENSALV', 0))) * max(0, (PRNV() - PRRV() - PRR2V() - PRR2ZV()))))

    @cache_result
    def PENALIMV():
        """
        pensions nettes  alimentaire
        From PENALIMi
        """
        return (positif(EXPRV()) and positif(EXPRV()) * (PRNV() - PRRV() - PRR2V() - PRR2ZV() - PENFV()))

    @cache_result
    def PRR2C():
        """
        Pensions nettes taxees au quotient 2 - Conjoint
        """
        return ((positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0) + saisie_variables.get('CODRBZ', 0))) and positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0) + saisie_variables.get('CODRBZ', 0))) * arr((PRNC() and saisie_variables.get('CARPEC', 0) and PRNC() * saisie_variables.get('CARPEC', 0) / EXPRC()))) + ((1 - positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0) + saisie_variables.get('CODRBZ', 0)))) and (1 - positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0) + saisie_variables.get('CODRBZ', 0)))) * (PRNC() - PRRC())))

    @cache_result
    def PRR2ZC():
        """
        Pensions nettes taxees au quotient  - code RxZ
        """
        return ((positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0))) and positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0))) * arr((PRNC() and saisie_variables.get('CODRBZ', 0) and PRNC() * saisie_variables.get('CODRBZ', 0) / EXPRC()))) + ((1 - positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0)))) and (1 - positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0)))) * (PRNC() - PRRC() - PRR2C())))

    @cache_result
    def PENFC():
        """
        Pensions nettes footballeurs - Conjoint
        From PENFi
        """
        return ((positif(saisie_variables.get('PENSALC', 0)) and positif(saisie_variables.get('PENSALC', 0)) * arr((PRNC() and saisie_variables.get('PEBFC', 0) and PRNC() * saisie_variables.get('PEBFC', 0) / EXPRC()))) + ((1 - positif(saisie_variables.get('PENSALC', 0))) and (1 - positif(saisie_variables.get('PENSALC', 0))) * max(0, (PRNC() - PRRC() - PRR2C() - PRR2ZC()))))

    @cache_result
    def PENALIMC():
        """
        pensions nettes  alimentaire
        From PENALIMi
        """
        return (positif(EXPRC()) and positif(EXPRC()) * (PRNC() - PRRC() - PRR2C() - PRR2ZC() - PENFC()))

    @cache_result
    def PRR21():
        """
        Pensions nettes taxees au quotient 2 - PAC
        """
        return ((positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0) + saisie_variables.get('CODRCZ', 0))) and positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0) + saisie_variables.get('CODRCZ', 0))) * arr((PRN1() and saisie_variables.get('CARPEP1', 0) and PRN1() * saisie_variables.get('CARPEP1', 0) / EXPR1()))) + ((1 - positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0) + saisie_variables.get('CODRCZ', 0)))) and (1 - positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0) + saisie_variables.get('CODRCZ', 0)))) * (PRN1() - PRR1())))

    @cache_result
    def PRR2Z1():
        """
        Pensions nettes taxees au quotient  - code RxZ
        """
        return ((positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0))) and positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0))) * arr((PRN1() and saisie_variables.get('CODRCZ', 0) and PRN1() * saisie_variables.get('CODRCZ', 0) / EXPR1()))) + ((1 - positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0)))) and (1 - positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0)))) * (PRN1() - PRR1() - PRR21())))

    @cache_result
    def PENF1():
        """
        Pensions nettes footballeurs - PAC
        From PENFi
        """
        return ((positif(saisie_variables.get('PENSALP1', 0)) and positif(saisie_variables.get('PENSALP1', 0)) * arr((PRN1() and saisie_variables.get('PEBF1', 0) and PRN1() * saisie_variables.get('PEBF1', 0) / EXPR1()))) + ((1 - positif(saisie_variables.get('PENSALP1', 0))) and (1 - positif(saisie_variables.get('PENSALP1', 0))) * (PRN1() - PRR1() - PRR21() - PRR2Z1())))

    @cache_result
    def PENALIM1():
        """
        pensions nettes  alimentaire
        From PENALIMi
        """
        return (positif(EXPR1()) and positif(EXPR1()) * (PRN1() - PRR1() - PRR21() - PRR2Z1() - PENF1()))

    @cache_result
    def PRR22():
        """
        Pensions nettes taxees au quotient 2 - PAC
        """
        return ((positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0) + saisie_variables.get('CODRDZ', 0))) and positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0) + saisie_variables.get('CODRDZ', 0))) * arr((PRN2() and saisie_variables.get('CARPEP2', 0) and PRN2() * saisie_variables.get('CARPEP2', 0) / EXPR2()))) + ((1 - positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0) + saisie_variables.get('CODRDZ', 0)))) and (1 - positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0) + saisie_variables.get('CODRDZ', 0)))) * (PRN2() - PRR2())))

    @cache_result
    def PRR2Z2():
        """
        Pensions nettes taxees au quotient  - code RxZ
        """
        return ((positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0))) and positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0))) * arr((PRN2() and saisie_variables.get('CODRDZ', 0) and PRN2() * saisie_variables.get('CODRDZ', 0) / EXPR2()))) + ((1 - positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0)))) and (1 - positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0)))) * (PRN2() - PRR2() - PRR22())))

    @cache_result
    def PENF2():
        """
        Pensions nettes footballeurs - PAC
        From PENFi
        """
        return ((positif(saisie_variables.get('PENSALP2', 0)) and positif(saisie_variables.get('PENSALP2', 0)) * arr((PRN2() and saisie_variables.get('PEBF2', 0) and PRN2() * saisie_variables.get('PEBF2', 0) / EXPR2()))) + ((1 - positif(saisie_variables.get('PENSALP2', 0))) and (1 - positif(saisie_variables.get('PENSALP2', 0))) * (PRN2() - PRR2() - PRR22() - PRR2Z2())))

    @cache_result
    def PENALIM2():
        """
        pensions nettes  alimentaire
        From PENALIMi
        """
        return (positif(EXPR2()) and positif(EXPR2()) * (PRN2() - PRR2() - PRR22() - PRR2Z2() - PENF2()))

    @cache_result
    def PRR23():
        """
        Pensions nettes taxees au quotient 2 - PAC
        """
        return ((positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0) + saisie_variables.get('CODREZ', 0))) and positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0) + saisie_variables.get('CODREZ', 0))) * arr((PRN3() and saisie_variables.get('CARPEP3', 0) and PRN3() * saisie_variables.get('CARPEP3', 0) / EXPR3()))) + ((1 - positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0) + saisie_variables.get('CODREZ', 0)))) and (1 - positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0) + saisie_variables.get('CODREZ', 0)))) * (PRN3() - PRR3())))

    @cache_result
    def PRR2Z3():
        """
        Pensions nettes taxees au quotient  - code RxZ
        """
        return ((positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0))) and positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0))) * arr((PRN3() and saisie_variables.get('CODREZ', 0) and PRN3() * saisie_variables.get('CODREZ', 0) / EXPR3()))) + ((1 - positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0)))) and (1 - positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0)))) * (PRN3() - PRR3() - PRR23())))

    @cache_result
    def PENF3():
        """
        Pensions nettes footballeurs - PAC
        From PENFi
        """
        return ((positif(saisie_variables.get('PENSALP3', 0)) and positif(saisie_variables.get('PENSALP3', 0)) * arr((PRN3() and saisie_variables.get('PEBF3', 0) and PRN3() * saisie_variables.get('PEBF3', 0) / EXPR3()))) + ((1 - positif(saisie_variables.get('PENSALP3', 0))) and (1 - positif(saisie_variables.get('PENSALP3', 0))) * (PRN3() - PRR3() - PRR23() - PRR2Z3())))

    @cache_result
    def PENALIM3():
        """
        pensions nettes  alimentaire
        From PENALIMi
        """
        return (positif(EXPR3()) and positif(EXPR3()) * (PRN3() - PRR3() - PRR23() - PRR2Z3() - PENF3()))

    @cache_result
    def PRR24():
        """
        Pensions nettes taxees au quotient 2 - PAC
        """
        return ((positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0) + saisie_variables.get('CODRFZ', 0))) and positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0) + saisie_variables.get('CODRFZ', 0))) * arr((PRN4() and saisie_variables.get('CARPEP4', 0) and PRN4() * saisie_variables.get('CARPEP4', 0) / EXPR4()))) + ((1 - positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0) + saisie_variables.get('CODRFZ', 0)))) and (1 - positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0) + saisie_variables.get('CODRFZ', 0)))) * (PRN4() - PRR4())))

    @cache_result
    def PRR2Z4():
        """
        Pensions nettes taxees au quotient  - code RxZ
        """
        return ((positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0))) and positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0))) * arr((PRN4() and saisie_variables.get('CODRFZ', 0) and PRN4() * saisie_variables.get('CODRFZ', 0) / EXPR4()))) + ((1 - positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0)))) and (1 - positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0)))) * (PRN4() - PRR4() - PRR24())))

    @cache_result
    def PENF4():
        """
        Pensions nettes footballeurs - PAC
        From PENFi
        """
        return ((positif(saisie_variables.get('PENSALP4', 0)) and positif(saisie_variables.get('PENSALP4', 0)) * arr((PRN4() and saisie_variables.get('PEBF4', 0) and PRN4() * saisie_variables.get('PEBF4', 0) / EXPR4()))) + ((1 - positif(saisie_variables.get('PENSALP4', 0))) and (1 - positif(saisie_variables.get('PENSALP4', 0))) * (PRN4() - PRR4() - PRR24() - PRR2Z4())))

    @cache_result
    def PENALIM4():
        """
        pensions nettes  alimentaire
        From PENALIMi
        """
        return (positif(EXPR4()) and positif(EXPR4()) * (PRN4() - PRR4() - PRR24() - PRR2Z4() - PENF4()))

    @cache_result
    def REVALIMQHT():
        """
        total hors tx eff
        """
        return somme([PENALIMV(), PENALIMC(), PENALIM1(), PENALIM2(), PENALIM3(), PENALIM4()])

    @cache_result
    def REVF():
        """
        total pensions nettes footballeurs
        """
        return somme([PENFV(), PENFC(), PENF1(), PENF2(), PENF3(), PENF4()])

    @cache_result
    def TSNN2TSV():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - Vous
        From TSNN2TSi
        """
        return (positif(TSV()) and positif(TSV()) * ((positif(saisie_variables.get('REMPLAV', 0)) and positif(saisie_variables.get('REMPLAV', 0)) * arr((TSV() and saisie_variables.get('CARTSV', 0) and TSV() * saisie_variables.get('CARTSV', 0) / EXTSV()))) + ((1 - positif(saisie_variables.get('REMPLAV', 0))) and (1 - positif(saisie_variables.get('REMPLAV', 0))) * (TSV() - TSNNV()))))

    @cache_result
    def TSNN2TSC():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - 
        From TSNN2TSi
        """
        return (positif(TSC()) and positif(TSC()) * ((positif(saisie_variables.get('REMPLAC', 0)) and positif(saisie_variables.get('REMPLAC', 0)) * arr((TSC() and saisie_variables.get('CARTSC', 0) and TSC() * saisie_variables.get('CARTSC', 0) / EXTSC()))) + ((1 - positif(saisie_variables.get('REMPLAC', 0))) and (1 - positif(saisie_variables.get('REMPLAC', 0))) * (TSC() - TSNNC()))))

    @cache_result
    def TSNN2TS1():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - 
        From TSNN2TSi
        """
        return (positif(TS1()) and positif(TS1()) * ((positif(saisie_variables.get('REMPLAP1', 0)) and positif(saisie_variables.get('REMPLAP1', 0)) * arr((TS1() and saisie_variables.get('CARTSP1', 0) and TS1() * saisie_variables.get('CARTSP1', 0) / EXTS1()))) + ((1 - positif(saisie_variables.get('REMPLAP1', 0))) and (1 - positif(saisie_variables.get('REMPLAP1', 0))) * (TS1() - TSNN1()))))

    @cache_result
    def TSNN2TS2():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - 
        From TSNN2TSi
        """
        return (positif(TS2()) and positif(TS2()) * ((positif(saisie_variables.get('REMPLAP2', 0)) and positif(saisie_variables.get('REMPLAP2', 0)) * arr((TS2() and saisie_variables.get('CARTSP2', 0) and TS2() * saisie_variables.get('CARTSP2', 0) / EXTS2()))) + ((1 - positif(saisie_variables.get('REMPLAP2', 0))) and (1 - positif(saisie_variables.get('REMPLAP2', 0))) * (TS2() - TSNN2()))))

    @cache_result
    def TSNN2TS3():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - 
        From TSNN2TSi
        """
        return (positif(TS3()) and positif(TS3()) * ((positif(saisie_variables.get('REMPLAP3', 0)) and positif(saisie_variables.get('REMPLAP3', 0)) * arr((TS3() and saisie_variables.get('CARTSP3', 0) and TS3() * saisie_variables.get('CARTSP3', 0) / EXTS3()))) + ((1 - positif(saisie_variables.get('REMPLAP3', 0))) and (1 - positif(saisie_variables.get('REMPLAP3', 0))) * (TS3() - TSNN3()))))

    @cache_result
    def TSNN2TS4():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - 
        From TSNN2TSi
        """
        return (positif(TS4()) and positif(TS4()) * ((positif(saisie_variables.get('REMPLAP4', 0)) and positif(saisie_variables.get('REMPLAP4', 0)) * arr((TS4() and saisie_variables.get('CARTSP4', 0) and TS4() * saisie_variables.get('CARTSP4', 0) / EXTS4()))) + ((1 - positif(saisie_variables.get('REMPLAP4', 0))) and (1 - positif(saisie_variables.get('REMPLAP4', 0))) * (TS4() - TSNN4()))))

    @cache_result
    def REVTSQHT():
        """
        total TS hors tx eff
        """
        return somme([TSNN2TSV(), TSNN2TSC(), TSNN2TS1(), TSNN2TS2(), TSNN2TS3(), TSNN2TS4()])

    @cache_result
    def TSNN2REMPV():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - 
        From TSNN2REMPi
        """
        return (positif(TSV()) and positif(TSV()) * (TSV() - TSNNV() - TSNN2TSV()))

    @cache_result
    def TSNN2REMPC():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - 
        From TSNN2REMPi
        """
        return (positif(TSC()) and positif(TSC()) * (TSC() - TSNNC() - TSNN2TSC()))

    @cache_result
    def TSNN2REMP1():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - 
        From TSNN2REMPi
        """
        return (positif(TS1()) and positif(TS1()) * (TS1() - TSNN1() - TSNN2TS1()))

    @cache_result
    def TSNN2REMP2():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - 
        From TSNN2REMPi
        """
        return (positif(TS2()) and positif(TS2()) * (TS2() - TSNN2() - TSNN2TS2()))

    @cache_result
    def TSNN2REMP3():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - 
        From TSNN2REMPi
        """
        return (positif(TS3()) and positif(TS3()) * (TS3() - TSNN3() - TSNN2TS3()))

    @cache_result
    def TSNN2REMP4():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables - 
        From TSNN2REMPi
        """
        return (positif(TS4()) and positif(TS4()) * (TS4() - TSNN4() - TSNN2TS4()))

    @cache_result
    def REVTSREMPQHT():
        """
        total TS remplacement hors tx eff
        """
        return somme([TSNN2REMPV(), TSNN2REMPC(), TSNN2REMP1(), TSNN2REMP2(), TSNN2REMP3(), TSNN2REMP4()])

    @cache_result
    def REVPRRQHT():
        """
        total  hors tx eff
        """
        return somme([(PRR2V() + PRR2ZV()), (PRR2C() + PRR2ZC()), (PRR21() + PRR2Z1()), (PRR22() + PRR2Z2()), (PRR23() + PRR2Z3()), (PRR24() + PRR2Z4())])

    # WARNING: the variable "_2RV1" is used in a formula at least, but is not defined.
    def _2RV1(): return 0
    # WARNING: the variable "_2RV2" is used in a formula at least, but is not defined.
    def _2RV2(): return 0
    # WARNING: the variable "_2RV3" is used in a formula at least, but is not defined.
    def _2RV3(): return 0
    # WARNING: the variable "_2RV4" is used in a formula at least, but is not defined.
    def _2RV4(): return 0
    @cache_result
    def T2RV():
        """
        Total imposable des rentes viageres du foyer: quotient 2
        """
        return (_2RV1() + _2RV2() + _2RV3() + _2RV4())

    @cache_result
    def REVRVO():
        """
        total 
        """
        return T2RV()

    @cache_result
    def REPRCM2():
        """
        report Q2 suite a imputation 2AA
        """
        return ((positif(REPRCMBIS()) and positif(REPRCMBIS()) * min(arr(((REPRCMBIS() and REPRCMBIS() * _2RCM_I()) and (REPRCMBIS() and REPRCMBIS() * _2RCM_I()) / RCM_I())), (REPRCMBIS() - REPRCM1()))) + ((1 - positif(REPRCMBIS())) and (1 - positif(REPRCMBIS())) * 0))

    # WARNING: the variable "_2RCM" is used in a formula at least, but is not defined.
    def _2RCM(): return 0
    @cache_result
    def REPRCM3():
        """
        report Q3 suite a imputation 2AA
        """
        return ((positif(REPRCMBIS()) and positif(REPRCMBIS()) * min(arr(((REPRCMBIS() and REPRCMBIS() * _3RCM_I()) and (REPRCMBIS() and REPRCMBIS() * _3RCM_I()) / RCM_I())), (REPRCMBIS() - REPRCM1() - REPRCM2()))) + ((1 - positif(REPRCMBIS())) and (1 - positif(REPRCMBIS())) * 0))

    # WARNING: the variable "_3RCM" is used in a formula at least, but is not defined.
    def _3RCM(): return 0
    @cache_result
    def REPRCM4():
        """
        report Q4 suite a imputation 2AA
        """
        return ((positif(REPRCMBIS()) and positif(REPRCMBIS()) * min(arr(((REPRCMBIS() and REPRCMBIS() * _4RCM_I()) and (REPRCMBIS() and REPRCMBIS() * _4RCM_I()) / RCM_I())), (REPRCMBIS() - REPRCM1() - REPRCM2() - REPRCM3()))) + ((1 - positif(REPRCMBIS())) and (1 - positif(REPRCMBIS())) * 0))

    # WARNING: the variable "_4RCM" is used in a formula at least, but is not defined.
    def _4RCM(): return 0
    @cache_result
    def REPRCM5():
        """
        report Q suite a imputation 2AA
        """
        return ((positif(REPRCMBIS()) and positif(REPRCMBIS()) * min(arr(((REPRCMBIS() and REPRCMBIS() * _5RCM_I()) and (REPRCMBIS() and REPRCMBIS() * _5RCM_I()) / RCM_I())), (REPRCMBIS() - REPRCM1() - REPRCM2() - REPRCM3() - REPRCM4()))) + ((1 - positif(REPRCMBIS())) and (1 - positif(REPRCMBIS())) * 0))

    # WARNING: the variable "_5RCM" is used in a formula at least, but is not defined.
    def _5RCM(): return 0
    @cache_result
    def REPRCM6():
        """
        report Q suite a imputation 2AA
        """
        return ((positif(REPRCMBIS()) and positif(REPRCMBIS()) * min(arr(((REPRCMBIS() and REPRCMBIS() * _6RCM_I()) and (REPRCMBIS() and REPRCMBIS() * _6RCM_I()) / RCM_I())), (REPRCMBIS() - REPRCM1() - REPRCM2() - REPRCM3() - REPRCM4() - REPRCM5()))) + ((1 - positif(REPRCMBIS())) and (1 - positif(REPRCMBIS())) * 0))

    # WARNING: the variable "_6RCM" is used in a formula at least, but is not defined.
    def _6RCM(): return 0
    @cache_result
    def REPRCM7():
        """
        report Q suite a imputation 2AA
        """
        return ((positif(REPRCMBIS()) and positif(REPRCMBIS()) * max(0, (REPRCMBIS() - REPRCM1() - REPRCM2() - REPRCM3() - REPRCM4() - REPRCM5() - REPRCM6()))) + ((1 - positif(REPRCMBIS())) and (1 - positif(REPRCMBIS())) * 0))

    # WARNING: the variable "_7RCM" is used in a formula at least, but is not defined.
    def _7RCM(): return 0
    @cache_result
    def REVRCM():
        """
        total 
        """
        return (_2RCM() + _3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM())

    # WARNING: the variable "_2REVF" is used in a formula at least, but is not defined.
    def _2REVF(): return 0
    # WARNING: the variable "_3REVF" is used in a formula at least, but is not defined.
    def _3REVF(): return 0
    @cache_result
    def REVRF():
        """
        total 
        """
        return (_2REVF() + _3REVF())

    @cache_result
    def REVQTOTQHT():
        """
        somme des revevus aux quotient :REVx REVAFN REVF hors tx eff
        """
        return ((saisie_variables.get('CODRWB', 0) and saisie_variables.get('CODRWB', 0) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((saisie_variables.get('CODRWB', 0) + saisie_variables.get('CODRWA', 0)) and (saisie_variables.get('CODRWB', 0) + saisie_variables.get('CODRWA', 0)) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))) + saisie_variables.get('CODRVG', 0) + somme([GLN1(), GLN2(), GLN3()]) + REV4() + REVALIMQHT() + REVF() + REVTSQHT() + REVTSREMPQHT() + REVPRRQHT() + REVRVO() + REVRCM() + REVRF())

    @cache_result
    def RG():
        """
        Revenu global
        """
        return (((1 - positif(saisie_variables.get('IPVLOC', 0))) and (1 - positif(saisie_variables.get('IPVLOC', 0))) * (SHBA() + max(BANOR(), 0) + REB() + (min(BANOR(), 0) and min(BANOR(), 0) * positif((SEUIL_IMPDEFBA + 1 - SHBA() - (REVTP() - BA1()) - REVQTOTQHT()))))) + (positif(saisie_variables.get('IPVLOC', 0)) and positif(saisie_variables.get('IPVLOC', 0)) * saisie_variables.get('IPVLOC', 0)))

    @cache_result
    def DAR():
        """
        Deficits anterieurs reportables
        """
        return ((saisie_variables.get('DEFAA5', 0) + saisie_variables.get('DEFAA4', 0) + saisie_variables.get('DEFAA3', 0) + saisie_variables.get('DEFAA2', 0) + saisie_variables.get('DEFAA1', 0) + saisie_variables.get('DEFAA0', 0)) and (1 - base_variables['PREM8_11']) and (saisie_variables.get('DEFAA5', 0) + saisie_variables.get('DEFAA4', 0) + saisie_variables.get('DEFAA3', 0) + saisie_variables.get('DEFAA2', 0) + saisie_variables.get('DEFAA1', 0) + saisie_variables.get('DEFAA0', 0)) * (1 - base_variables['PREM8_11']) * (1 - positif(saisie_variables.get('IPVLOC', 0))))

    @cache_result
    def VARIPTEFP():
        """
        8ZR recalcule suite art 1731 bis
        """
        return ((saisie_variables.get('IPTEFP', 0) + max(0, ((saisie_variables.get('DEFZU', 0) and positif(base_variables['SOMMEMOND_2']) and saisie_variables.get('DEFZU', 0) * positif(base_variables['SOMMEMOND_2']) * (1 - base_variables['PREM8_11'])) + (saisie_variables.get('DEFZU', 0) and saisie_variables.get('DEFZU', 0) * base_variables['PREM8_11']) - saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFP', 0) + max(0, ((saisie_variables.get('DEFZU', 0) and positif(base_variables['SOMMEMOND_2']) and saisie_variables.get('DEFZU', 0) * positif(base_variables['SOMMEMOND_2']) * (1 - base_variables['PREM8_11'])) + (saisie_variables.get('DEFZU', 0) and saisie_variables.get('DEFZU', 0) * base_variables['PREM8_11']) - saisie_variables.get('IPTEFN', 0)))) * positif((present(saisie_variables.get('IPTEFP', 0)) + present(saisie_variables.get('IPTEFN', 0)))))

    @cache_result
    def VARIPTEFN():
        """
        8ZN recalcule suite art 1731 bis
        """
        return (max(0, ((saisie_variables.get('IPTEFN', 0) and (1 - positif(base_variables['SOMMEMOND_2'])) and saisie_variables.get('IPTEFN', 0) * (1 - positif(base_variables['SOMMEMOND_2'])) * (1 - base_variables['PREM8_11'])) - (saisie_variables.get('DEFZU', 0) and positif(base_variables['SOMMEMOND_2']) and saisie_variables.get('DEFZU', 0) * positif(base_variables['SOMMEMOND_2']) * (1 - base_variables['PREM8_11'])) - (saisie_variables.get('DEFZU', 0) and saisie_variables.get('DEFZU', 0) * base_variables['PREM8_11']))) and max(0, ((saisie_variables.get('IPTEFN', 0) and (1 - positif(base_variables['SOMMEMOND_2'])) and saisie_variables.get('IPTEFN', 0) * (1 - positif(base_variables['SOMMEMOND_2'])) * (1 - base_variables['PREM8_11'])) - (saisie_variables.get('DEFZU', 0) and positif(base_variables['SOMMEMOND_2']) and saisie_variables.get('DEFZU', 0) * positif(base_variables['SOMMEMOND_2']) * (1 - base_variables['PREM8_11'])) - (saisie_variables.get('DEFZU', 0) and saisie_variables.get('DEFZU', 0) * base_variables['PREM8_11']))) * present(saisie_variables.get('IPTEFN', 0)))

    @cache_result
    def INDTEFF():
        """
        Indicateur d'existence de revenu pour tx eff automatique
        """
        return ((1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))) and (1 - positif((positif(((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS'])))) + positif(((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS']))))))) and (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))) * (1 - positif((positif(((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS'])))) + positif(((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS']))))))) * positif((positif(saisie_variables.get('AUTOBICVV', 0)) + positif(saisie_variables.get('AUTOBICPV', 0)) + positif(saisie_variables.get('AUTOBICVC', 0)) + positif(saisie_variables.get('AUTOBICPC', 0)) + positif(saisie_variables.get('AUTOBICVP', 0)) + positif(saisie_variables.get('AUTOBICPP', 0)) + positif(saisie_variables.get('AUTOBNCV', 0)) + positif(saisie_variables.get('AUTOBNCC', 0)) + positif(saisie_variables.get('AUTOBNCP', 0)) + positif(saisie_variables.get('XHONOAAV', 0)) + positif(saisie_variables.get('XHONOV', 0)) + positif(saisie_variables.get('XHONOAAC', 0)) + positif(saisie_variables.get('XHONOC', 0)) + positif(saisie_variables.get('XHONOAAP', 0)) + positif(saisie_variables.get('XHONOP', 0)) + positif(saisie_variables.get('SALEXTV', 0)) + positif(saisie_variables.get('COD1AD', 0)) + positif(saisie_variables.get('COD1AE', 0)) + positif(saisie_variables.get('COD1AH', 0)) + positif(saisie_variables.get('SALEXTC', 0)) + positif(saisie_variables.get('COD1BD', 0)) + positif(saisie_variables.get('COD1BE', 0)) + positif(saisie_variables.get('COD1BH', 0)) + positif(saisie_variables.get('SALEXT1', 0)) + positif(saisie_variables.get('COD1CD', 0)) + positif(saisie_variables.get('COD1CE', 0)) + positif(saisie_variables.get('COD1CH', 0)) + positif(saisie_variables.get('SALEXT2', 0)) + positif(saisie_variables.get('COD1DD', 0)) + positif(saisie_variables.get('COD1DE', 0)) + positif(saisie_variables.get('COD1DH', 0)) + positif(saisie_variables.get('SALEXT3', 0)) + positif(saisie_variables.get('COD1ED', 0)) + positif(saisie_variables.get('COD1EE', 0)) + positif(saisie_variables.get('COD1EH', 0)) + positif(saisie_variables.get('SALEXT4', 0)) + positif(saisie_variables.get('COD1FD', 0)) + positif(saisie_variables.get('COD1FE', 0)) + positif(saisie_variables.get('COD1FH', 0)))))

    @cache_result
    def TTSBNV():
        """
        Tx effectif : somme TS + allocation  
        """
        return (saisie_variables.get('TSHALLOV', 0) + saisie_variables.get('ALLOV', 0) + max(0, (saisie_variables.get('SALEXTV', 0) - saisie_variables.get('COD1AD', 0))))

    @cache_result
    def T2TSNV():
        """
        Tx effectif :  somme TS + allocation  
        From T2TSNi
        """
        return (saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0))

    @cache_result
    def TEXTSV():
        """
        Salaires totaux vous (1AJ + AAJ +BAJ + CAJ)
        """
        return (TTSBNV() + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + T2TSNV())

    @cache_result
    def TTSBV():
        """
        tx effectif  Salaires declares Vous
        """
        return (TEXTSV() + somme([saisie_variables.get('GLD1V', 0), saisie_variables.get('GLD2V', 0), saisie_variables.get('GLD3V', 0)]) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0))

    @cache_result
    def TDEDMINV():
        """
        Deduction minimale a appliquer sur salaires tx eff.
        From TDEDMINi
        """
        return ((positif(saisie_variables.get('DETSV', 0)) and positif(saisie_variables.get('DETSV', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETSV', 0))) and (1 - positif(saisie_variables.get('DETSV', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TTPS10V():
        """
        tx effectif abattement 10% brut
        From TTPS10i
        """
        return arr((TTSBV() and TX_DEDFORFTS and TTSBV() * TX_DEDFORFTS / 100))

    @cache_result
    def TDFNV():
        """
        tx effectif Deduction forfaitaire de 10%
        From TDFNi
        """
        return min(PLAF_DEDFORFTS, TTPS10V())

    @cache_result
    def T10MINSV():
        """
        tx eff. deductions plafonnees
        From T10MINSi
        """
        return max(min(TTSBV(), TDEDMINV()), TDFNV())

    @cache_result
    def TFRDV():
        """
        Frais reels declares tx effectif
        """
        return (((1 - positif(base_variables['PREM8_11'])) and (saisie_variables.get('FRNV', 0) + saisie_variables.get('COD1AE', 0)) and (1 - positif(base_variables['PREM8_11'])) * (saisie_variables.get('FRNV', 0) + saisie_variables.get('COD1AE', 0)) * positif((saisie_variables.get('FRNV', 0) + saisie_variables.get('COD1AE', 0) - T10MINSV()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min((saisie_variables.get('FRNV', 0) + saisie_variables.get('COD1AE', 0)), base_variables['TFRDPROVV'])) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min((saisie_variables.get('FRNV', 0) + saisie_variables.get('COD1AE', 0)), min(base_variables['TFRDPROVV'], max(base_variables['TFRDPROVVP2'], base_variables['TFRDPROVV1731'])))))

    @cache_result
    def TIND_10V():
        """
        Indicateur d'affichage deduction 10% tx eff.
        """
        return positif_ou_nul((T10MINSV() - (TFRDV() + saisie_variables.get('COD1AE', 0))))

    @cache_result
    def TIND_10MIN_0V():
        """
        booleen d'existence d'une deduction minimale tx eff.
        From TIND_10MIN_0i
        """
        return (positif((TDEDMINV() - TDFNV())) and positif((TDEDMINV() - TDFNV())) * positif(TTSBV()))

    @cache_result
    def TIND_MINV():
        """
        pour tx effectif 
        From TIND_MINi
        """
        return (1 - positif(TIND_10MIN_0V()))

    @cache_result
    def TD10MV():
        """
        deduction 10% apres prise en compte de la deduction minimale  effectif
        From TD10Mi
        """
        return ((TIND_MINV() and TIND_MINV() * TDFNV()) + ((1 - TIND_MINV()) and (1 - TIND_MINV()) * T10MINSV()))

    @cache_result
    def TFPTV():
        """
        deduction de 10% ou frais reels tx eff.
        From TFPTi
        """
        return max(TFRDV(), T10MINSV())

    @cache_result
    def TREP10V():
        """
        frais de 10% servant aux abtt. de 10% pour GL et SA eff.
        From TREP10i
        """
        return ((TIND_10V() and TIND_10V() * TD10MV()) + ((1 - TIND_10V()) and (1 - TIND_10V()) * TFPTV()))

    @cache_result
    def TABTS1AJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('SALEXTV', 0) + saisie_variables.get('ALLOV', 0) + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('SALEXTV', 0) + saisie_variables.get('ALLOV', 0) + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((TREP10V() and saisie_variables.get('TSHALLOV', 0) and TREP10V() * saisie_variables.get('TSHALLOV', 0) / TTSBV()))) + ((1 - positif((saisie_variables.get('SALEXTV', 0) + saisie_variables.get('ALLOV', 0) + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('SALEXTV', 0) + saisie_variables.get('ALLOV', 0) + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * TREP10V()))

    @cache_result
    def TABTS1AC():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('ALLOV', 0) + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('ALLOV', 0) + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((TREP10V() and max(0, (saisie_variables.get('SALEXTV', 0) - saisie_variables.get('COD1AD', 0))) and TREP10V() * max(0, (saisie_variables.get('SALEXTV', 0) - saisie_variables.get('COD1AD', 0))) / TTSBV()))) + ((1 - positif((saisie_variables.get('ALLOV', 0) + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('ALLOV', 0) + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (TREP10V() - TABTS1AJ()))))

    @cache_result
    def TABTS1AP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((TREP10V() and saisie_variables.get('ALLOV', 0) and TREP10V() * saisie_variables.get('ALLOV', 0) / TTSBV()))) + ((1 - positif((saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (TREP10V() - TABTS1AJ() - TABTS1AC()))))

    @cache_result
    def TABTS3VJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((TREP10V() and saisie_variables.get('BPCOSAV', 0) and TREP10V() * saisie_variables.get('BPCOSAV', 0) / TTSBV()))) + ((1 - positif((saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (TREP10V() - TABTS1AJ() - TABTS1AC() - TABTS1AP()))))

    @cache_result
    def TABTS1TT():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((TREP10V() and saisie_variables.get('GLDGRATV', 0) and TREP10V() * saisie_variables.get('GLDGRATV', 0) / TTSBV()))) + ((1 - positif((saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (TREP10V() - TABTS1AJ() - TABTS1AC() - TABTS1AP() - TABTS3VJ()))))

    @cache_result
    def TABTSRAJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((TREP10V() and saisie_variables.get('CARTSV', 0) and TREP10V() * saisie_variables.get('CARTSV', 0) / TTSBV()))) + ((1 - positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (TREP10V() - TABTS1AJ() - TABTS1AC() - TABTS1AP() - TABTS3VJ() - TABTS1TT()))))

    @cache_result
    def TABTSRAP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((TREP10V() and saisie_variables.get('REMPLAV', 0) and TREP10V() * saisie_variables.get('REMPLAV', 0) / TTSBV()))) + ((1 - positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (TREP10V() - TABTS1AJ() - TABTS1AC() - TABTS1AP() - TABTS3VJ() - TABTS1TT() - TABTSRAJ()))))

    @cache_result
    def TABTSV():
        """
        part de l'abattement pour frais sur TS normaux tx eff.
        """
        return (TABTS1AJ() + TABTS1AC() + TABTS1AP() + TABTS3VJ() + TABTS1TT() + TABTSRAJ() + TABTSRAP())

    @cache_result
    def TABDOMDAJ():
        """
        Abattement frais pro proratise pour EAJ tx eff.
        """
        return ((positif(saisie_variables.get('CODDAJ', 0)) and positif(saisie_variables.get('CODDAJ', 0)) * ((positif((saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((TREP10V() and saisie_variables.get('CODDAJ', 0) and TREP10V() * saisie_variables.get('CODDAJ', 0) / TTSBV()))) + ((1 - positif((saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('CODEAJ', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (TREP10V() - TABTSV()))))) + 0)

    @cache_result
    def TABDOMEAJ():
        """
        Abattement frais pro proratise pour EAJ tx eff.
        """
        return ((positif(saisie_variables.get('CODEAJ', 0)) and positif(saisie_variables.get('CODEAJ', 0)) * ((positif((saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((TREP10V() and saisie_variables.get('CODEAJ', 0) and TREP10V() * saisie_variables.get('CODEAJ', 0) / TTSBV()))) + ((1 - positif((saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (TREP10V() - TABTSV() - TABDOMDAJ()))))) + 0)

    @cache_result
    def TABGL1V():
        """
        part de l'abattement pour frais sur gains de levee d'option eff.
        """
        return ((positif(saisie_variables.get('GLD1V', 0)) and positif(saisie_variables.get('GLD1V', 0)) * ((positif((saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) and positif((saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0))) * arr((TREP10V() and saisie_variables.get('GLD1V', 0) and TREP10V() * saisie_variables.get('GLD1V', 0) / TTSBV()))) + ((1 - positif((saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) and (1 - positif((saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0)))) * max(0, (TREP10V() - TABTSV() - TABDOMDAJ() - TABDOMEAJ()))))) + 0)

    @cache_result
    def TGLN1V():
        """
        Gain de levee d'option net eff.
        """
        return max((saisie_variables.get('GLD1V', 0) - TABGL1V()), 0)

    @cache_result
    def TTSBNC():
        """
        Tx effectif : somme TS + allocation  
        """
        return (saisie_variables.get('TSHALLOC', 0) + saisie_variables.get('ALLOC', 0) + max(0, (saisie_variables.get('SALEXTC', 0) - saisie_variables.get('COD1BD', 0))))

    @cache_result
    def T2TSNC():
        """
        Tx effectif :  somme TS + allocation  
        From T2TSNi
        """
        return (saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0))

    @cache_result
    def TEXTSC():
        """
        Tx effectif  Salaires totaux conjoint (1BJ + ABJ +BBJ + CBJ)
        """
        return (TTSBNC() + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + T2TSNC())

    @cache_result
    def TTSBC():
        """
        tx effectif  Salaires declares conj.
        """
        return (TEXTSC() + somme([saisie_variables.get('GLD1C', 0), saisie_variables.get('GLD2C', 0), saisie_variables.get('GLD3C', 0)]) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0))

    @cache_result
    def TDEDMINC():
        """
        Deduction minimale a appliquer sur salaires tx eff.
        From TDEDMINi
        """
        return ((positif(saisie_variables.get('DETSC', 0)) and positif(saisie_variables.get('DETSC', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETSC', 0))) and (1 - positif(saisie_variables.get('DETSC', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TTPS10C():
        """
        tx effectif abattement 10% brut
        From TTPS10i
        """
        return arr((TTSBC() and TX_DEDFORFTS and TTSBC() * TX_DEDFORFTS / 100))

    @cache_result
    def TDFNC():
        """
        tx effectif Deduction forfaitaire de 10%
        From TDFNi
        """
        return min(PLAF_DEDFORFTS, TTPS10C())

    @cache_result
    def T10MINSC():
        """
        tx eff. deductions plafonnees
        From T10MINSi
        """
        return max(min(TTSBC(), TDEDMINC()), TDFNC())

    @cache_result
    def TFRDC():
        """
        Frais reels declares tx effectif
        """
        return (((1 - positif(base_variables['ART1731BIS'])) and (saisie_variables.get('FRNC', 0) + saisie_variables.get('COD1BE', 0)) and (1 - positif(base_variables['ART1731BIS'])) * (saisie_variables.get('FRNC', 0) + saisie_variables.get('COD1BE', 0)) * positif((saisie_variables.get('FRNC', 0) + saisie_variables.get('COD1BE', 0) - T10MINSC()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min((saisie_variables.get('FRNC', 0) + saisie_variables.get('COD1BE', 0)), base_variables['TFRDPROVC'])) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min((saisie_variables.get('FRNC', 0) + saisie_variables.get('COD1BE', 0)), min(base_variables['TFRDPROVC'], max(base_variables['TFRDPROVCP2'], base_variables['TFRDPROVC1731'])))))

    @cache_result
    def TIND_10C():
        """
        Indicateur d'affichage deduction 10% tx eff.
        """
        return positif_ou_nul((T10MINSC() - (TFRDC() + saisie_variables.get('COD1BE', 0))))

    @cache_result
    def TIND_10MIN_0C():
        """
        booleen d'existence d'une deduction minimale tx eff.
        From TIND_10MIN_0i
        """
        return (positif((TDEDMINC() - TDFNC())) and positif((TDEDMINC() - TDFNC())) * positif(TTSBC()))

    @cache_result
    def TIND_MINC():
        """
        pour tx effectif 
        From TIND_MINi
        """
        return (1 - positif(TIND_10MIN_0C()))

    @cache_result
    def TD10MC():
        """
        deduction 10% apres prise en compte de la deduction minimale  effectif
        From TD10Mi
        """
        return ((TIND_MINC() and TIND_MINC() * TDFNC()) + ((1 - TIND_MINC()) and (1 - TIND_MINC()) * T10MINSC()))

    @cache_result
    def TFPTC():
        """
        deduction de 10% ou frais reels tx eff.
        From TFPTi
        """
        return max(TFRDC(), T10MINSC())

    @cache_result
    def TREP10C():
        """
        frais de 10% servant aux abtt. de 10% pour GL et SA eff.
        From TREP10i
        """
        return ((TIND_10C() and TIND_10C() * TD10MC()) + ((1 - TIND_10C()) and (1 - TIND_10C()) * TFPTC()))

    @cache_result
    def TABTS1BJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('SALEXTC', 0) + saisie_variables.get('ALLOC', 0) + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('SALEXTC', 0) + saisie_variables.get('ALLOC', 0) + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((TREP10C() and saisie_variables.get('TSHALLOC', 0) and TREP10C() * saisie_variables.get('TSHALLOC', 0) / TTSBC()))) + ((1 - positif((saisie_variables.get('SALEXTC', 0) + saisie_variables.get('ALLOC', 0) + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('SALEXTC', 0) + saisie_variables.get('ALLOC', 0) + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * TREP10C()))

    @cache_result
    def TABTS1BC():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('ALLOC', 0) + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('ALLOC', 0) + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((TREP10C() and max(0, (saisie_variables.get('SALEXTC', 0) - saisie_variables.get('COD1BD', 0))) and TREP10C() * max(0, (saisie_variables.get('SALEXTC', 0) - saisie_variables.get('COD1BD', 0))) / TTSBC()))) + ((1 - positif((saisie_variables.get('ALLOC', 0) + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('ALLOC', 0) + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (TREP10C() - TABTS1BJ()))))

    @cache_result
    def TABTS1BP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((TREP10C() and saisie_variables.get('ALLOC', 0) and TREP10C() * saisie_variables.get('ALLOC', 0) / TTSBC()))) + ((1 - positif((saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (TREP10C() - TABTS1BJ() - TABTS1BC()))))

    @cache_result
    def TABTS3VK():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((TREP10C() and saisie_variables.get('BPCOSAC', 0) and TREP10C() * saisie_variables.get('BPCOSAC', 0) / TTSBC()))) + ((1 - positif((saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (TREP10C() - TABTS1BJ() - TABTS1BC() - TABTS1BP()))))

    @cache_result
    def TABTS1UT():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((TREP10C() and saisie_variables.get('GLDGRATC', 0) and TREP10C() * saisie_variables.get('GLDGRATC', 0) / TTSBC()))) + ((1 - positif((saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (TREP10C() - TABTS1BJ() - TABTS1BC() - TABTS1BP() - TABTS3VK()))))

    @cache_result
    def TABTSRBJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((TREP10C() and saisie_variables.get('CARTSC', 0) and TREP10C() * saisie_variables.get('CARTSC', 0) / TTSBC()))) + ((1 - positif((saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (TREP10C() - TABTS1BJ() - TABTS1BC() - TABTS1BP() - TABTS3VK() - TABTS1UT()))))

    @cache_result
    def TABTSRBP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((TREP10C() and saisie_variables.get('REMPLAC', 0) and TREP10C() * saisie_variables.get('REMPLAC', 0) / TTSBC()))) + ((1 - positif((saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (TREP10C() - TABTS1BJ() - TABTS1BC() - TABTS1BP() - TABTS3VK() - TABTS1UT() - TABTSRBJ()))))

    @cache_result
    def TABTSC():
        """
        part de l'abattement pour frais sur TS normaux tx eff.
        """
        return (TABTS1BJ() + TABTS1BC() + TABTS1BP() + TABTS3VK() + TABTS1UT() + TABTSRBJ() + TABTSRBP())

    @cache_result
    def TABDOMDBJ():
        """
        Abattement frais pro proratise pour EAJ tx eff.
        """
        return ((positif(saisie_variables.get('CODDBJ', 0)) and positif(saisie_variables.get('CODDBJ', 0)) * ((positif((saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((TREP10C() and saisie_variables.get('CODDBJ', 0) and TREP10C() * saisie_variables.get('CODDBJ', 0) / TTSBC()))) + ((1 - positif((saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('CODEBJ', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (TREP10C() - TABTSC()))))) + 0)

    @cache_result
    def TABDOMEBJ():
        """
        Abattement frais pro proratise pour EAJ tx eff.
        """
        return ((positif(saisie_variables.get('CODEBJ', 0)) and positif(saisie_variables.get('CODEBJ', 0)) * ((positif((saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((TREP10C() and saisie_variables.get('CODEBJ', 0) and TREP10C() * saisie_variables.get('CODEBJ', 0) / TTSBC()))) + ((1 - positif((saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (TREP10C() - TABTSC() - TABDOMDBJ()))))) + 0)

    @cache_result
    def TABGL1C():
        """
        part de l'abattement pour frais sur gains de levee d'option eff.
        """
        return ((positif(saisie_variables.get('GLD1C', 0)) and positif(saisie_variables.get('GLD1C', 0)) * ((positif((saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) and positif((saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0))) * arr((TREP10C() and saisie_variables.get('GLD1C', 0) and TREP10C() * saisie_variables.get('GLD1C', 0) / TTSBC()))) + ((1 - positif((saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) and (1 - positif((saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0)))) * max(0, (TREP10C() - TABTSC() - TABDOMDBJ() - TABDOMEBJ()))))) + 0)

    @cache_result
    def TGLN1C():
        """
        Gain de levee d'option net eff.
        """
        return max((saisie_variables.get('GLD1C', 0) - TABGL1C()), 0)

    @cache_result
    def TGLN1():
        """
        Gain de levee d'option net tx eff
        From TGLNx
        """
        return (TGLN1V() + TGLN1C())

    @cache_result
    def REV1():
        """
        revenus au quotient 1
        """
        return ((GLN1() and GLN1() * (1 - INDTEFF())) + (TGLN1() and TGLN1() * INDTEFF()))

    @cache_result
    def TABGL2V():
        """
        part de l'abattement pour frais sur gains de levee d'option eff.
        """
        return ((positif(saisie_variables.get('GLD2V', 0)) and positif(saisie_variables.get('GLD2V', 0)) * ((positif(saisie_variables.get('GLD3V', 0)) and positif(saisie_variables.get('GLD3V', 0)) * arr((TREP10V() and saisie_variables.get('GLD2V', 0) and TREP10V() * saisie_variables.get('GLD2V', 0) / TTSBV()))) + ((1 - positif(saisie_variables.get('GLD3V', 0))) and (1 - positif(saisie_variables.get('GLD3V', 0))) * max(0, (TREP10V() - TABTSV() - TABDOMDAJ() - TABDOMEAJ() - TABGL1V()))))) + 0)

    @cache_result
    def TGLN2V():
        """
        Gain de levee d'option net eff.
        """
        return max((saisie_variables.get('GLD2V', 0) - TABGL2V()), 0)

    @cache_result
    def TABGL2C():
        """
        part de l'abattement pour frais sur gains de levee d'option eff.
        """
        return ((positif(saisie_variables.get('GLD2C', 0)) and positif(saisie_variables.get('GLD2C', 0)) * ((positif(saisie_variables.get('GLD3C', 0)) and positif(saisie_variables.get('GLD3C', 0)) * arr((TREP10C() and saisie_variables.get('GLD2C', 0) and TREP10C() * saisie_variables.get('GLD2C', 0) / TTSBC()))) + ((1 - positif(saisie_variables.get('GLD3C', 0))) and (1 - positif(saisie_variables.get('GLD3C', 0))) * max(0, (TREP10C() - TABTSC() - TABDOMDBJ() - TABDOMEBJ() - TABGL1C()))))) + 0)

    @cache_result
    def TGLN2C():
        """
        Gain de levee d'option net eff.
        """
        return max((saisie_variables.get('GLD2C', 0) - TABGL2C()), 0)

    @cache_result
    def TGLN2():
        """
        Gain de levee d'option net tx eff
        From TGLNx
        """
        return (TGLN2V() + TGLN2C())

    @cache_result
    def REV2():
        """
        revenus au quotient 2
        """
        return ((GLN2() and GLN2() * (1 - INDTEFF())) + (TGLN2() and TGLN2() * INDTEFF()))

    @cache_result
    def TABGL3V():
        """
        part de l'abattement pour frais sur gains de levee d'option eff.
        """
        return ((positif(saisie_variables.get('GLD3V', 0)) and positif(saisie_variables.get('GLD3V', 0)) * max(0, (TREP10V() - TABTSV() - TABDOMDAJ() - TABDOMEAJ() - TABGL1V() - TABGL2V()))) + 0)

    @cache_result
    def TGLN3V():
        """
        Gain de levee d'option net eff.
        """
        return max((saisie_variables.get('GLD3V', 0) - TABGL3V()), 0)

    @cache_result
    def TABGL3C():
        """
        part de l'abattement pour frais sur gains de levee d'option eff.
        """
        return ((positif(saisie_variables.get('GLD3C', 0)) and positif(saisie_variables.get('GLD3C', 0)) * max(0, (TREP10C() - TABTSC() - TABDOMDBJ() - TABDOMEBJ() - TABGL1C() - TABGL2C()))) + 0)

    @cache_result
    def TGLN3C():
        """
        Gain de levee d'option net eff.
        """
        return max((saisie_variables.get('GLD3C', 0) - TABGL3C()), 0)

    @cache_result
    def TGLN3():
        """
        Gain de levee d'option net tx eff
        From TGLNx
        """
        return (TGLN3V() + TGLN3C())

    @cache_result
    def REV3():
        """
        revenus au quotient 3
        """
        return ((GLN3() and GLN3() * (1 - INDTEFF())) + (TGLN3() and TGLN3() * INDTEFF()))

    @cache_result
    def TPRBV():
        """
        Pensions brutes totales tx effectif
        From TPRBi
        """
        return (saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0) + saisie_variables.get('PENINV', 0))

    @cache_result
    def T2PRBV():
        """
        Tx effectif  Pensions brutes totales
        """
        return (saisie_variables.get('CARPEV', 0) + saisie_variables.get('PENSALV', 0) + saisie_variables.get('CODRAZ', 0))

    @cache_result
    def TEXPRV():
        """
        Tx effectif Pensions totales vous (1AS + AAS +BAS + CAS)
        """
        return (TPRBV() + saisie_variables.get('COD1AH', 0) + T2PRBV() + saisie_variables.get('PEBFV', 0))

    @cache_result
    def TTSN1AJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLOV', 0) - TABTS1AJ())

    @cache_result
    def TTSN1AC():
        """
        Traitements et salaires nets de frais
        """
        return (max(0, (saisie_variables.get('SALEXTV', 0) - saisie_variables.get('COD1AD', 0))) - TABTS1AC())

    @cache_result
    def TTSN1AP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLOV', 0) - TABTS1AP())

    @cache_result
    def TTSN3VJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('BPCOSAV', 0) - TABTS3VJ())

    @cache_result
    def TTSN1TT():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLDGRATV', 0) - TABTS1TT())

    @cache_result
    def TTSNRAJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSV', 0) - TABTSRAJ())

    @cache_result
    def TTSNRAP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAV', 0) - TABTSRAP())

    @cache_result
    def TTSNDAJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CODDAJ', 0) - TABDOMDAJ())

    @cache_result
    def TTSNEAJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CODEAJ', 0) - TABDOMEAJ())

    @cache_result
    def TTSNGL1V():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD1V', 0) - TABGL1V())

    @cache_result
    def TTSNGL2V():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD2V', 0) - TABGL2V())

    @cache_result
    def TTSNGL3V():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD3V', 0) - TABGL3V())

    @cache_result
    def TTSNTV():
        """
        salaires apres deduction des frais professionnels tx eff.
        """
        return (TTSN1AJ() + TTSN1AC() + TTSN1AP() + TTSN3VJ() + TTSN1TT() + TTSNRAJ() + TTSNRAP() + TTSNDAJ() + TTSNEAJ() + TTSNGL1V() + TTSNGL2V() + TTSNGL3V())

    @cache_result
    def TPLRV():
        """
        Seuil calcule de l'abattement tx eff.
        From TPLRi
        """
        return min(MIN_DEDPR, TEXPRV())

    @cache_result
    def TIND_APBV():
        """
        booleen application deduction minimale pensions tx eff.
        From TIND_APBi
        """
        return positif_ou_nul((TPLRV() - (TEXPRV() and TX_DEDPER and TEXPRV() * TX_DEDPER / 100)))

    @cache_result
    def TAPBV():
        """
        tx eff. Minimum d'abattement 10% (PR)
        From TAPBi
        """
        return max(TPLRV(), (TEXPRV() and TX_DEDPER and TEXPRV() * TX_DEDPER / 100))

    @cache_result
    def TPRBC():
        """
        Pensions brutes totales tx effectif
        From TPRBi
        """
        return (saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0) + saisie_variables.get('PENINC', 0))

    @cache_result
    def T2PRBC():
        """
        Tx effectif  Pensions brutes totales
        """
        return (saisie_variables.get('CARPEC', 0) + saisie_variables.get('PENSALC', 0) + saisie_variables.get('CODRBZ', 0))

    @cache_result
    def TEXPRC():
        """
        Tx effectif Pensions totales conjoint (1BS + ABS +BBS + CBS)
        """
        return (TPRBC() + saisie_variables.get('COD1BH', 0) + T2PRBC() + saisie_variables.get('PEBFC', 0))

    @cache_result
    def TPLRC():
        """
        Seuil calcule de l'abattement tx eff.
        From TPLRi
        """
        return min(MIN_DEDPR, TEXPRC())

    @cache_result
    def TAPBC():
        """
        tx eff. Minimum d'abattement 10% (PR)
        From TAPBi
        """
        return max(TPLRC(), (TEXPRC() and TX_DEDPER and TEXPRC() * TX_DEDPER / 100))

    @cache_result
    def TIND_APBC():
        """
        booleen application deduction minimale pensions tx eff.
        From TIND_APBi
        """
        return positif_ou_nul((TPLRC() - (TEXPRC() and TX_DEDPER and TEXPRC() * TX_DEDPER / 100)))

    @cache_result
    def TPRB1():
        """
        Pensions brutes totales tx effectif
        From TPRBi
        """
        return (saisie_variables.get('PRBR1', 0) + saisie_variables.get('PALI1', 0) + saisie_variables.get('PENIN1', 0))

    @cache_result
    def T2PRB1():
        """
        Tx effectif  Pensions brutes totales
        """
        return (saisie_variables.get('CARPEP1', 0) + saisie_variables.get('PENSALP1', 0) + saisie_variables.get('CODRCZ', 0))

    @cache_result
    def TEXPR1():
        """
        Tx effectif Pensions totales PAC (1CS + ACS +BCS + CCS)
        """
        return (TPRB1() + saisie_variables.get('COD1CH', 0) + T2PRB1() + saisie_variables.get('PEBF1', 0))

    @cache_result
    def TPLR1():
        """
        Seuil calcule de l'abattement tx eff.
        From TPLRi
        """
        return min(MIN_DEDPR, TEXPR1())

    @cache_result
    def TAPB1():
        """
        tx eff. Minimum d'abattement 10% (PR)
        From TAPBi
        """
        return max(TPLR1(), (TEXPR1() and TX_DEDPER and TEXPR1() * TX_DEDPER / 100))

    @cache_result
    def TIND_APB1():
        """
        booleen application deduction minimale pensions tx eff.
        From TIND_APBi
        """
        return positif_ou_nul((TPLR1() - (TEXPR1() and TX_DEDPER and TEXPR1() * TX_DEDPER / 100)))

    @cache_result
    def TPRB2():
        """
        Pensions brutes totales tx effectif
        From TPRBi
        """
        return (saisie_variables.get('PRBR2', 0) + saisie_variables.get('PALI2', 0) + saisie_variables.get('PENIN2', 0))

    @cache_result
    def T2PRB2():
        """
        Tx effectif  Pensions brutes totales
        """
        return (saisie_variables.get('CARPEP2', 0) + saisie_variables.get('PENSALP2', 0) + saisie_variables.get('CODRDZ', 0))

    @cache_result
    def TEXPR2():
        """
        Tx effecitf Pensions totales PAC (1DS + ADS +BDS + CDS)
        """
        return (TPRB2() + saisie_variables.get('COD1DH', 0) + T2PRB2() + saisie_variables.get('PEBF2', 0))

    @cache_result
    def TPLR2():
        """
        Seuil calcule de l'abattement tx eff.
        From TPLRi
        """
        return min(MIN_DEDPR, TEXPR2())

    @cache_result
    def TAPB2():
        """
        tx eff. Minimum d'abattement 10% (PR)
        From TAPBi
        """
        return max(TPLR2(), (TEXPR2() and TX_DEDPER and TEXPR2() * TX_DEDPER / 100))

    @cache_result
    def TIND_APB2():
        """
        booleen application deduction minimale pensions tx eff.
        From TIND_APBi
        """
        return positif_ou_nul((TPLR2() - (TEXPR2() and TX_DEDPER and TEXPR2() * TX_DEDPER / 100)))

    @cache_result
    def TPRB3():
        """
        Pensions brutes totales tx effectif
        From TPRBi
        """
        return (saisie_variables.get('PRBR3', 0) + saisie_variables.get('PALI3', 0) + saisie_variables.get('PENIN3', 0))

    @cache_result
    def T2PRB3():
        """
        Tx effectif  Pensions brutes totales
        """
        return (saisie_variables.get('CARPEP3', 0) + saisie_variables.get('PENSALP3', 0) + saisie_variables.get('CODREZ', 0))

    @cache_result
    def TEXPR3():
        """
        Tx effectif Pensions totales PAC (1RS + ARS +BRS + CRS)
        """
        return (TPRB3() + saisie_variables.get('COD1EH', 0) + T2PRB3() + saisie_variables.get('PEBF3', 0))

    @cache_result
    def TPLR3():
        """
        Seuil calcule de l'abattement tx eff.
        From TPLRi
        """
        return min(MIN_DEDPR, TEXPR3())

    @cache_result
    def TAPB3():
        """
        tx eff. Minimum d'abattement 10% (PR)
        From TAPBi
        """
        return max(TPLR3(), (TEXPR3() and TX_DEDPER and TEXPR3() * TX_DEDPER / 100))

    @cache_result
    def TIND_APB3():
        """
        booleen application deduction minimale pensions tx eff.
        From TIND_APBi
        """
        return positif_ou_nul((TPLR3() - (TEXPR3() and TX_DEDPER and TEXPR3() * TX_DEDPER / 100)))

    @cache_result
    def TPRB4():
        """
        Pensions brutes totales tx effectif
        From TPRBi
        """
        return (saisie_variables.get('PRBR4', 0) + saisie_variables.get('PALI4', 0) + saisie_variables.get('PENIN4', 0))

    @cache_result
    def T2PRB4():
        """
        Tx effectif  Pensions brutes totales
        """
        return (saisie_variables.get('CARPEP4', 0) + saisie_variables.get('PENSALP4', 0) + saisie_variables.get('CODRFZ', 0))

    @cache_result
    def TEXPR4():
        """
        Tx effectif Pensions totales PAC (1TS + ATS +BTS + CTS)
        """
        return (TPRB4() + saisie_variables.get('COD1FH', 0) + T2PRB4() + saisie_variables.get('PEBF4', 0))

    @cache_result
    def TPLR4():
        """
        Seuil calcule de l'abattement tx eff.
        From TPLRi
        """
        return min(MIN_DEDPR, TEXPR4())

    @cache_result
    def TAPB4():
        """
        tx eff. Minimum d'abattement 10% (PR)
        From TAPBi
        """
        return max(TPLR4(), (TEXPR4() and TX_DEDPER and TEXPR4() * TX_DEDPER / 100))

    @cache_result
    def TIND_APB4():
        """
        booleen application deduction minimale pensions tx eff.
        From TIND_APBi
        """
        return positif_ou_nul((TPLR4() - (TEXPR4() and TX_DEDPER and TEXPR4() * TX_DEDPER / 100)))

    @cache_result
    def TPL_PB():
        """
        plafond pensions a repartir tx eff.
        """
        return arr((PLAF_DEDPRFOYER - somme([(TAPBV() and TAPBV() * TIND_APBV()), (TAPBC() and TAPBC() * TIND_APBC()), (TAPB1() and TAPB1() * TIND_APB1()), (TAPB2() and TAPB2() * TIND_APB2()), (TAPB3() and TAPB3() * TIND_APB3()), (TAPB4() and TAPB4() * TIND_APB4())])))

    @cache_result
    def TABPRV():
        """
        Abattement brut avant ajustement (pensions retraites 10%) eff.
        """
        return arr((((1 - TIND_APBV()) and (1 - TIND_APBV()) * min(TAPBV(), (TPL_PB() and TAPBV() and TPL_PB() * TAPBV() / somme([(TAPBV() and TAPBV() * (1 - TIND_APBV())), (TAPBC() and TAPBC() * (1 - TIND_APBC())), (TAPB1() and TAPB1() * (1 - TIND_APB1())), (TAPB2() and TAPB2() * (1 - TIND_APB2())), (TAPB3() and TAPB3() * (1 - TIND_APB3())), (TAPB4() and TAPB4() * (1 - TIND_APB4()))])))) + (TIND_APBV() and TIND_APBV() * TAPBV())))

    @cache_result
    def TAPRV():
        """
        Abattement pensions retraites 10% tx eff.
        """
        return ((TIND_APBV() and TIND_APBV() * TABPRV()) + ((1 - TIND_APBV()) and (1 - TIND_APBV()) * min(TABPRV(), TPL_PB())))

    @cache_result
    def TPRNNV():
        """
        pensions nettes d'abattement de 10% tx eff.
        From TPRNNi
        """
        return (TEXPRV() - TAPRV())

    @cache_result
    def TPRNV():
        """
        Pensions et rentes nettes tx eff.
        From TPRNi
        """
        return ((positif(TTSNTV()) and positif((TTSNTV() + TPRNNV())) and positif(TTSNTV()) * positif((TTSNTV() + TPRNNV())) * (TTSNTV() + TPRNNV())) + (positif_ou_nul(TTSNTV()) and positif_ou_nul(TTSNTV()) * TPRNNV()))

    @cache_result
    def TPRRV():
        """
        Pensions nettes ordinaires - tx eff.
        """
        return (arr((TPRNV() and PRBV() and TPRNV() * PRBV() / TEXPRV())) + arr((TPRNV() and saisie_variables.get('COD1AH', 0) and TPRNV() * saisie_variables.get('COD1AH', 0) / TEXPRV())))

    @cache_result
    def TPRR2V():
        """
        tx efectif Pensions nettes taxees au quotient 2 
        """
        return ((positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0) + saisie_variables.get('CODRAZ', 0))) and positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0) + saisie_variables.get('CODRAZ', 0))) * arr((TPRNV() and saisie_variables.get('CARPEV', 0) and TPRNV() * saisie_variables.get('CARPEV', 0) / TEXPRV()))) + ((1 - positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0) + saisie_variables.get('CODRAZ', 0)))) and (1 - positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0) + saisie_variables.get('CODRAZ', 0)))) * (TPRNV() - TPRRV())))

    @cache_result
    def TPRR2ZV():
        """
        tx efectif Pensions nettes taxees au quotient code RxZ
        """
        return ((positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0))) and positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0))) * arr((TPRNV() and saisie_variables.get('CODRAZ', 0) and TPRNV() * saisie_variables.get('CODRAZ', 0) / TEXPRV()))) + ((1 - positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0)))) and (1 - positif((saisie_variables.get('PEBFV', 0) + saisie_variables.get('PENSALV', 0)))) * (TPRNV() - TPRRV() - TPRR2V())))

    @cache_result
    def TPENFV():
        """
        Pensions nettes footballeurs - tx eff.
        From TPENFi
        """
        return ((positif(saisie_variables.get('PENSALV', 0)) and positif(saisie_variables.get('PENSALV', 0)) * arr((TPRNV() and saisie_variables.get('PEBFV', 0) and TPRNV() * saisie_variables.get('PEBFV', 0) / TEXPRV()))) + ((1 - positif(saisie_variables.get('PENSALV', 0))) and (1 - positif(saisie_variables.get('PENSALV', 0))) * max(0, (TPRNV() - TPRRV() - TPRR2V() - TPRR2ZV()))))

    @cache_result
    def TPENALIMV():
        """
        pensions nettes  alimentaire tx eff.
        From TPENALIMi
        """
        return (positif(TEXPRV()) and positif(TEXPRV()) * (TPRNV() - TPRRV() - TPRR2V() - TPRR2ZV() - TPENFV()))

    @cache_result
    def TTSN1BJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLOC', 0) - TABTS1BJ())

    @cache_result
    def TTSN1BC():
        """
        Traitements et salaires nets de frais
        """
        return (max(0, (saisie_variables.get('SALEXTC', 0) - saisie_variables.get('COD1BD', 0))) - TABTS1BC())

    @cache_result
    def TTSN1BP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLOC', 0) - TABTS1BP())

    @cache_result
    def TTSN3VK():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('BPCOSAC', 0) - TABTS3VK())

    @cache_result
    def TTSN1UT():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLDGRATC', 0) - TABTS1UT())

    @cache_result
    def TTSNRBJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSC', 0) - TABTSRBJ())

    @cache_result
    def TTSNRBP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAC', 0) - TABTSRBP())

    @cache_result
    def TTSNDBJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CODDBJ', 0) - TABDOMDBJ())

    @cache_result
    def TTSNEBJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CODEBJ', 0) - TABDOMEBJ())

    @cache_result
    def TTSNGL1C():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD1C', 0) - TABGL1C())

    @cache_result
    def TTSNGL2C():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD2C', 0) - TABGL2C())

    @cache_result
    def TTSNGL3C():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('GLD3C', 0) - TABGL3C())

    @cache_result
    def TTSNTC():
        """
        salaires apres deduction des frais professionnels tx eff.
        """
        return (TTSN1BJ() + TTSN1BC() + TTSN1BP() + TTSN3VK() + TTSN1UT() + TTSNRBJ() + TTSNRBP() + TTSNDBJ() + TTSNEBJ() + TTSNGL1C() + TTSNGL2C() + TTSNGL3C())

    @cache_result
    def TABPRC():
        """
        Abattement brut avant ajustement (pensions retraites 10%) eff.
        """
        return arr((((1 - TIND_APBC()) and (1 - TIND_APBC()) * min(TAPBC(), ((positif((TEXPR1() + TEXPR2() + TEXPR3() + TEXPR4())) and positif((TEXPR1() + TEXPR2() + TEXPR3() + TEXPR4())) * (TPL_PB() and TAPBC() and TPL_PB() * TAPBC() / somme([(TAPBV() and TAPBV() * (1 - TIND_APBV())), (TAPBC() and TAPBC() * (1 - TIND_APBC())), (TAPB1() and TAPB1() * (1 - TIND_APB1())), (TAPB2() and TAPB2() * (1 - TIND_APB2())), (TAPB3() and TAPB3() * (1 - TIND_APB3())), (TAPB4() and TAPB4() * (1 - TIND_APB4()))]))) + ((1 - positif((TEXPR1() + TEXPR2() + TEXPR3() + TEXPR4()))) and (1 - positif((TEXPR1() + TEXPR2() + TEXPR3() + TEXPR4()))) * max(0, (TPL_PB() - TABPRV())))))) + (TIND_APBC() and TIND_APBC() * TAPBC())))

    @cache_result
    def TAPRC():
        """
        Abattement pensions retraites 10% tx eff.
        """
        return ((TIND_APBC() and TIND_APBC() * TABPRC()) + ((1 - TIND_APBC()) and (1 - TIND_APBC()) * min(TABPRC(), (TPL_PB() - ((1 - TIND_APBV()) and (1 - TIND_APBV()) * TAPRV())))))

    @cache_result
    def TPRNNC():
        """
        pensions nettes d'abattement de 10% tx eff.
        From TPRNNi
        """
        return (TEXPRC() - TAPRC())

    @cache_result
    def TPRNC():
        """
        Pensions et rentes nettes tx eff.
        From TPRNi
        """
        return ((positif(TTSNTC()) and positif((TTSNTC() + TPRNNC())) and positif(TTSNTC()) * positif((TTSNTC() + TPRNNC())) * (TTSNTC() + TPRNNC())) + (positif_ou_nul(TTSNTC()) and positif_ou_nul(TTSNTC()) * TPRNNC()))

    @cache_result
    def TPRRC():
        """
        Pensions nettes ordinaires - tx eff.
        """
        return (arr((TPRNC() and PRBC() and TPRNC() * PRBC() / TEXPRC())) + arr((TPRNC() and saisie_variables.get('COD1BH', 0) and TPRNC() * saisie_variables.get('COD1BH', 0) / TEXPRC())))

    @cache_result
    def TPRR2C():
        """
        tx efectif Pensions nettes taxees au quotient 2 
        """
        return ((positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0) + saisie_variables.get('CODRBZ', 0))) and positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0) + saisie_variables.get('CODRBZ', 0))) * arr((TPRNC() and saisie_variables.get('CARPEC', 0) and TPRNC() * saisie_variables.get('CARPEC', 0) / TEXPRC()))) + ((1 - positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0) + saisie_variables.get('CODRBZ', 0)))) and (1 - positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0) + saisie_variables.get('CODRBZ', 0)))) * (TPRNC() - TPRRC())))

    @cache_result
    def TPRR2ZC():
        """
        tx efectif Pensions nettes taxees au quotient code RxZ
        """
        return ((positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0))) and positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0))) * arr((TPRNC() and saisie_variables.get('CODRBZ', 0) and TPRNC() * saisie_variables.get('CODRBZ', 0) / TEXPRC()))) + ((1 - positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0)))) and (1 - positif((saisie_variables.get('PEBFC', 0) + saisie_variables.get('PENSALC', 0)))) * (TPRNC() - TPRRC() - TPRR2C())))

    @cache_result
    def TPENFC():
        """
        Pensions nettes footballeurs - tx eff.
        From TPENFi
        """
        return ((positif(saisie_variables.get('PENSALC', 0)) and positif(saisie_variables.get('PENSALC', 0)) * arr((TPRNC() and saisie_variables.get('PEBFC', 0) and TPRNC() * saisie_variables.get('PEBFC', 0) / TEXPRC()))) + ((1 - positif(saisie_variables.get('PENSALC', 0))) and (1 - positif(saisie_variables.get('PENSALC', 0))) * max(0, (TPRNC() - TPRRC() - TPRR2C() - TPRR2ZC()))))

    @cache_result
    def TPENALIMC():
        """
        pensions nettes  alimentaire tx eff.
        From TPENALIMi
        """
        return (positif(TEXPRC()) and positif(TEXPRC()) * (TPRNC() - TPRRC() - TPRR2C() - TPRR2ZC() - TPENFC()))

    @cache_result
    def TTSBN1():
        """
        Tx effectif : somme TS + allocation  
        """
        return (saisie_variables.get('TSHALLO1', 0) + saisie_variables.get('ALLO1', 0) + max(0, (saisie_variables.get('SALEXT1', 0) - saisie_variables.get('COD1CD', 0))))

    @cache_result
    def T2TSN1():
        """
        Tx effectif :  somme TS + allocation  
        From T2TSNi
        """
        return (saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0))

    @cache_result
    def TEXTS1():
        """
        Tx effectif Salaires totaux PAC (1CJ + ACJ +BCJ + CCJ)
        From TEXTSi
        """
        return (TTSBN1() + T2TSN1())

    @cache_result
    def TTSB1():
        """
        tx effectif  Salaires declares pac1
        From TTSBi
        """
        return TEXTS1()

    @cache_result
    def TDEDMIN1():
        """
        Deduction minimale a appliquer sur salaires tx eff.
        From TDEDMINi
        """
        return ((positif(saisie_variables.get('DETS1', 0)) and positif(saisie_variables.get('DETS1', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETS1', 0))) and (1 - positif(saisie_variables.get('DETS1', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TTPS101():
        """
        tx effectif abattement 10% brut
        From TTPS10i
        """
        return arr((TTSB1() and TX_DEDFORFTS and TTSB1() * TX_DEDFORFTS / 100))

    @cache_result
    def TDFN1():
        """
        tx effectif Deduction forfaitaire de 10%
        From TDFNi
        """
        return min(PLAF_DEDFORFTS, TTPS101())

    @cache_result
    def T10MINS1():
        """
        tx eff. deductions plafonnees
        From T10MINSi
        """
        return max(min(TTSB1(), TDEDMIN1()), TDFN1())

    @cache_result
    def TTSBN2():
        """
        Tx effectif : somme TS + allocation  
        """
        return (saisie_variables.get('TSHALLO2', 0) + saisie_variables.get('ALLO2', 0) + max(0, (saisie_variables.get('SALEXT2', 0) - saisie_variables.get('COD1DD', 0))))

    @cache_result
    def T2TSN2():
        """
        Tx effectif :  somme TS + allocation  
        From T2TSNi
        """
        return (saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0))

    @cache_result
    def TEXTS2():
        """
        Tx effectif  Salaires totaux PAC (1DJ + ADJ +BDJ + CDJ)
        From TEXTSi
        """
        return (TTSBN2() + T2TSN2())

    @cache_result
    def TTSB2():
        """
        tx effectif  Salaires declares pac2
        From TTSBi
        """
        return TEXTS2()

    @cache_result
    def TDEDMIN2():
        """
        Deduction minimale a appliquer sur salaires tx eff.
        From TDEDMINi
        """
        return ((positif(saisie_variables.get('DETS2', 0)) and positif(saisie_variables.get('DETS2', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETS2', 0))) and (1 - positif(saisie_variables.get('DETS2', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TTPS102():
        """
        tx effectif abattement 10% brut
        From TTPS10i
        """
        return arr((TTSB2() and TX_DEDFORFTS and TTSB2() * TX_DEDFORFTS / 100))

    @cache_result
    def TDFN2():
        """
        tx effectif Deduction forfaitaire de 10%
        From TDFNi
        """
        return min(PLAF_DEDFORFTS, TTPS102())

    @cache_result
    def T10MINS2():
        """
        tx eff. deductions plafonnees
        From T10MINSi
        """
        return max(min(TTSB2(), TDEDMIN2()), TDFN2())

    @cache_result
    def TTSBN3():
        """
        Tx effectif : somme TS + allocation  
        """
        return (saisie_variables.get('TSHALLO3', 0) + saisie_variables.get('ALLO3', 0) + max(0, (saisie_variables.get('SALEXT3', 0) - saisie_variables.get('COD1ED', 0))))

    @cache_result
    def T2TSN3():
        """
        Tx effectif :  somme TS + allocation  
        From T2TSNi
        """
        return (saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0))

    @cache_result
    def TEXTS3():
        """
        Tx effectif  Salaires totaux PAC (1EJ + AEJ +BEJ + CEJ)
        From TEXTSi
        """
        return (TTSBN3() + T2TSN3())

    @cache_result
    def TTSB3():
        """
        tx effectif  Salaires declares pac3
        From TTSBi
        """
        return TEXTS3()

    @cache_result
    def TDEDMIN3():
        """
        Deduction minimale a appliquer sur salaires tx eff.
        From TDEDMINi
        """
        return ((positif(saisie_variables.get('DETS3', 0)) and positif(saisie_variables.get('DETS3', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETS3', 0))) and (1 - positif(saisie_variables.get('DETS3', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TTPS103():
        """
        tx effectif abattement 10% brut
        From TTPS10i
        """
        return arr((TTSB3() and TX_DEDFORFTS and TTSB3() * TX_DEDFORFTS / 100))

    @cache_result
    def TDFN3():
        """
        tx effectif Deduction forfaitaire de 10%
        From TDFNi
        """
        return min(PLAF_DEDFORFTS, TTPS103())

    @cache_result
    def T10MINS3():
        """
        tx eff. deductions plafonnees
        From T10MINSi
        """
        return max(min(TTSB3(), TDEDMIN3()), TDFN3())

    @cache_result
    def TTSBN4():
        """
        Tx effectif : somme TS + allocation  
        """
        return (saisie_variables.get('TSHALLO4', 0) + saisie_variables.get('ALLO4', 0) + max(0, (saisie_variables.get('SALEXT4', 0) - saisie_variables.get('COD1FD', 0))))

    @cache_result
    def T2TSN4():
        """
        Tx effectif :  somme TS + allocation  
        From T2TSNi
        """
        return (saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0))

    @cache_result
    def TEXTS4():
        """
        Tx effectif  Salaires totaux PAC (1FJ + AFJ +BFJ + CFJ)
        From TEXTSi
        """
        return (TTSBN4() + T2TSN4())

    @cache_result
    def TTSB4():
        """
        tx effectif  Salaires declares pac4
        From TTSBi
        """
        return TEXTS4()

    @cache_result
    def TDEDMIN4():
        """
        Deduction minimale a appliquer sur salaires tx eff.
        From TDEDMINi
        """
        return ((positif(saisie_variables.get('DETS4', 0)) and positif(saisie_variables.get('DETS4', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETS4', 0))) and (1 - positif(saisie_variables.get('DETS4', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def TTPS104():
        """
        tx effectif abattement 10% brut
        From TTPS10i
        """
        return arr((TTSB4() and TX_DEDFORFTS and TTSB4() * TX_DEDFORFTS / 100))

    @cache_result
    def TDFN4():
        """
        tx effectif Deduction forfaitaire de 10%
        From TDFNi
        """
        return min(PLAF_DEDFORFTS, TTPS104())

    @cache_result
    def T10MINS4():
        """
        tx eff. deductions plafonnees
        From T10MINSi
        """
        return max(min(TTSB4(), TDEDMIN4()), TDFN4())

    @cache_result
    def T10MINSP():
        """
        deductions hors droits d'auteur plafonnees pour tx eff
        """
        return (T10MINS1() + T10MINS2() + T10MINS3() + T10MINS4())

    @cache_result
    def TFRDP():
        """
        Frais reels declares pac
        """
        return (((1 - positif(base_variables['PREM8_11'])) and (FRNP() + saisie_variables.get('COD1CE', 0) + saisie_variables.get('COD1DE', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0)) and (1 - positif(base_variables['PREM8_11'])) * (FRNP() + saisie_variables.get('COD1CE', 0) + saisie_variables.get('COD1DE', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0)) * positif((FRNP() + saisie_variables.get('COD1CE', 0) + saisie_variables.get('COD1DE', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0) - T10MINSP()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min((FRNP() + saisie_variables.get('COD1CE', 0) + saisie_variables.get('COD1DE', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0)), base_variables['TFRDPROVP'])) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and positif(base_variables['PREM8_11']) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * positif(base_variables['PREM8_11']) * min((FRNP() + saisie_variables.get('COD1CE', 0) + saisie_variables.get('COD1DE', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0)), max(base_variables['TFRDPROVPP2'], base_variables['TFRDPROVP1731']))))

    @cache_result
    def TFRD1():
        """
        Frais reels declares tx effectif
        """
        return (((1 - positif(base_variables['PREM8_11'])) and (saisie_variables.get('FRN1', 0) + saisie_variables.get('COD1CE', 0)) and (1 - positif(base_variables['PREM8_11'])) * (saisie_variables.get('FRN1', 0) + saisie_variables.get('COD1CE', 0)) * positif((saisie_variables.get('FRN1', 0) + saisie_variables.get('COD1CE', 0) - T10MINS1()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min((saisie_variables.get('FRN1', 0) + saisie_variables.get('COD1CE', 0)), base_variables['TFRDPROV1']) and positif(base_variables['PREM8_11']) * min((saisie_variables.get('FRN1', 0) + saisie_variables.get('COD1CE', 0)), base_variables['TFRDPROV1']) * positif((saisie_variables.get('FRN2', 0) + saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1DE', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0)))) + (positif(base_variables['PREM8_11']) and max(0, TFRDP()) and positif(base_variables['PREM8_11']) * max(0, TFRDP()) * (1 - positif((saisie_variables.get('FRN2', 0) + saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1DE', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0))))))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min((saisie_variables.get('FRN1', 0) + saisie_variables.get('COD1CE', 0)), min(base_variables['TFRDPROV1'], max(base_variables['TFRDPROV1P2'], base_variables['TFRDPROV11731']))) and positif(base_variables['PREM8_11']) * min((saisie_variables.get('FRN1', 0) + saisie_variables.get('COD1CE', 0)), min(base_variables['TFRDPROV1'], max(base_variables['TFRDPROV1P2'], base_variables['TFRDPROV11731']))) * positif((saisie_variables.get('FRN2', 0) + saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1DE', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0)))) + (positif(base_variables['PREM8_11']) and max(0, TFRDP()) and positif(base_variables['PREM8_11']) * max(0, TFRDP()) * (1 - positif((saisie_variables.get('FRN2', 0) + saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1DE', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0))))))))

    @cache_result
    def TIND_101():
        """
        Indicateur d'affichage deduction 10% tx eff.
        """
        return positif_ou_nul((T10MINS1() - (TFRD1() + saisie_variables.get('COD1CE', 0))))

    @cache_result
    def TIND_10MIN_01():
        """
        booleen d'existence d'une deduction minimale tx eff.
        From TIND_10MIN_0i
        """
        return (positif((TDEDMIN1() - TDFN1())) and positif((TDEDMIN1() - TDFN1())) * positif(TTSB1()))

    @cache_result
    def TIND_MIN1():
        """
        pour tx effectif 
        From TIND_MINi
        """
        return (1 - positif(TIND_10MIN_01()))

    @cache_result
    def TD10M1():
        """
        deduction 10% apres prise en compte de la deduction minimale  effectif
        From TD10Mi
        """
        return ((TIND_MIN1() and TIND_MIN1() * TDFN1()) + ((1 - TIND_MIN1()) and (1 - TIND_MIN1()) * T10MINS1()))

    @cache_result
    def TFPT1():
        """
        deduction de 10% ou frais reels tx eff.
        From TFPTi
        """
        return max(TFRD1(), T10MINS1())

    @cache_result
    def TREP101():
        """
        frais de 10% servant aux abtt. de 10% pour GL et SA
        From TREP10i
        """
        return ((TIND_101() and TIND_101() * TD10M1()) + ((1 - TIND_101()) and (1 - TIND_101()) * TFPT1()))

    @cache_result
    def TABTS1CJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return arr((TREP101() and saisie_variables.get('TSHALLO1', 0) and TREP101() * saisie_variables.get('TSHALLO1', 0) / TTSB1()))

    @cache_result
    def TTSN1CJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLO1', 0) - TABTS1CJ())

    @cache_result
    def TABTS1CC():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('ALLO1', 0) + saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0))) and positif((saisie_variables.get('ALLO1', 0) + saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0))) * arr((TREP101() and max(0, (saisie_variables.get('SALEXT1', 0) - saisie_variables.get('COD1CD', 0))) and TREP101() * max(0, (saisie_variables.get('SALEXT1', 0) - saisie_variables.get('COD1CD', 0))) / TTSB1()))) + ((1 - positif((saisie_variables.get('ALLO1', 0) + saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0)))) and (1 - positif((saisie_variables.get('ALLO1', 0) + saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0)))) * max(0, (TREP101() - TABTS1CJ()))))

    @cache_result
    def TTSN1CC():
        """
        Traitements et salaires nets de frais
        """
        return (max(0, (saisie_variables.get('SALEXT1', 0) - saisie_variables.get('COD1CD', 0))) - TABTS1CC())

    @cache_result
    def TABTS1CP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0))) and positif((saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0))) * arr((TREP101() and saisie_variables.get('ALLO1', 0) and TREP101() * saisie_variables.get('ALLO1', 0) / TTSB1()))) + ((1 - positif((saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0)))) and (1 - positif((saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0)))) * max(0, (TREP101() - TABTS1CJ() - TABTS1CC()))))

    @cache_result
    def TTSN1CP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLO1', 0) - TABTS1CP())

    @cache_result
    def TABTSRCJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif(saisie_variables.get('REMPLAP1', 0)) and positif(saisie_variables.get('REMPLAP1', 0)) * arr((TREP101() and saisie_variables.get('CARTSP1', 0) and TREP101() * saisie_variables.get('CARTSP1', 0) / TTSB1()))) + ((1 - positif(saisie_variables.get('REMPLAP1', 0))) and (1 - positif(saisie_variables.get('REMPLAP1', 0))) * max(0, (TREP101() - TABTS1CJ() - TABTS1CC() - TABTS1CP()))))

    @cache_result
    def TTSNRCJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSP1', 0) - TABTSRCJ())

    @cache_result
    def TABTSRCP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return max(0, (TREP101() - TABTS1CJ() - TABTS1CC() - TABTS1CP() - TABTSRCJ()))

    @cache_result
    def TTSNRCP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAP1', 0) - TABTSRCP())

    @cache_result
    def TTSNT1():
        """
        salaires apres deduction des frais professionnels tx eff.
        """
        return (TTSN1CJ() + TTSN1CC() + TTSN1CP() + TTSNRCJ() + TTSNRCP())

    @cache_result
    def TABPR1():
        """
        Abattement brut avant ajustement (pensions retraites 10%) eff.
        """
        return arr((((1 - TIND_APB1()) and (1 - TIND_APB1()) * min(TAPB1(), ((positif((TEXPR2() + TEXPR3() + TEXPR4())) and positif((TEXPR2() + TEXPR3() + TEXPR4())) * (TPL_PB() and TAPB1() and TPL_PB() * TAPB1() / somme([(TAPBV() and TAPBV() * (1 - TIND_APBV())), (TAPBC() and TAPBC() * (1 - TIND_APBC())), (TAPB1() and TAPB1() * (1 - TIND_APB1())), (TAPB2() and TAPB2() * (1 - TIND_APB2())), (TAPB3() and TAPB3() * (1 - TIND_APB3())), (TAPB4() and TAPB4() * (1 - TIND_APB4()))]))) + ((1 - positif((TEXPR2() + TEXPR3() + TEXPR4()))) and (1 - positif((TEXPR2() + TEXPR3() + TEXPR4()))) * max(0, (TPL_PB() - TABPRV() - TABPRC())))))) + (TIND_APB1() and TIND_APB1() * TAPB1())))

    @cache_result
    def TAPR1():
        """
        Abattement pensions retraites 10% tx eff.
        """
        return ((TIND_APB1() and TIND_APB1() * TABPR1()) + ((1 - TIND_APB1()) and (1 - TIND_APB1()) * min(TABPR1(), (TPL_PB() - ((1 - TIND_APBV()) and (1 - TIND_APBV()) * TAPRV()) - ((1 - TIND_APBC()) and (1 - TIND_APBC()) * TAPRC())))))

    @cache_result
    def TPRNN1():
        """
        pensions nettes d'abattement de 10% tx eff.
        From TPRNNi
        """
        return (TEXPR1() - TAPR1())

    @cache_result
    def TPRN1():
        """
        Pensions et rentes nettes tx eff.
        From TPRNi
        """
        return ((positif(TTSNT1()) and positif((TTSNT1() + TPRNN1())) and positif(TTSNT1()) * positif((TTSNT1() + TPRNN1())) * (TTSNT1() + TPRNN1())) + (positif_ou_nul(TTSNT1()) and positif_ou_nul(TTSNT1()) * TPRNN1()))

    @cache_result
    def TPRR1():
        """
        Pensions nettes ordinaires - tx eff.
        """
        return (arr((TPRN1() and PRB1() and TPRN1() * PRB1() / TEXPR1())) + arr((TPRN1() and saisie_variables.get('COD1CH', 0) and TPRN1() * saisie_variables.get('COD1CH', 0) / TEXPR1())))

    @cache_result
    def TPRR21():
        """
        tx efectif Pensions nettes taxees au quotient 2 
        """
        return ((positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0) + saisie_variables.get('CODRCZ', 0))) and positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0) + saisie_variables.get('CODRCZ', 0))) * arr((TPRN1() and saisie_variables.get('CARPEP1', 0) and TPRN1() * saisie_variables.get('CARPEP1', 0) / TEXPR1()))) + ((1 - positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0) + saisie_variables.get('CODRCZ', 0)))) and (1 - positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0) + saisie_variables.get('CODRCZ', 0)))) * (TPRN1() - TPRR1())))

    @cache_result
    def TPRR2Z1():
        """
        tx efectif Pensions nettes taxees au quotient code RxZ
        """
        return ((positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0))) and positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0))) * arr((TPRN1() and saisie_variables.get('CODRCZ', 0) and TPRN1() * saisie_variables.get('CODRCZ', 0) / TEXPR1()))) + ((1 - positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0)))) and (1 - positif((saisie_variables.get('PEBF1', 0) + saisie_variables.get('PENSALP1', 0)))) * (TPRN1() - TPRR1() - TPRR21())))

    @cache_result
    def TPENF1():
        """
        Pensions nettes footballeurs - tx eff.
        From TPENFi
        """
        return ((positif(saisie_variables.get('PENSALP1', 0)) and positif(saisie_variables.get('PENSALP1', 0)) * arr((TPRN1() and saisie_variables.get('PEBF1', 0) and TPRN1() * saisie_variables.get('PEBF1', 0) / TEXPR1()))) + ((1 - positif(saisie_variables.get('PENSALP1', 0))) and (1 - positif(saisie_variables.get('PENSALP1', 0))) * (TPRN1() - TPRR1() - TPRR21() - TPRR2Z1())))

    @cache_result
    def TPENALIM1():
        """
        pensions nettes  alimentaire tx eff.
        From TPENALIMi
        """
        return (positif(TEXPR1()) and positif(TEXPR1()) * (TPRN1() - TPRR1() - TPRR21() - TPRR2Z1() - TPENF1()))

    @cache_result
    def TFRD2():
        """
        Frais reels declares tx effectif
        """
        return (((1 - positif(base_variables['PREM8_11'])) and (saisie_variables.get('FRN2', 0) + saisie_variables.get('COD1DE', 0)) and (1 - positif(base_variables['PREM8_11'])) * (saisie_variables.get('FRN2', 0) + saisie_variables.get('COD1DE', 0)) * positif((saisie_variables.get('FRN2', 0) + saisie_variables.get('COD1DE', 0) - T10MINS2()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min((saisie_variables.get('FRN2', 0) + saisie_variables.get('COD1DE', 0)), base_variables['TFRDPROV2']) and positif(base_variables['PREM8_11']) * min((saisie_variables.get('FRN2', 0) + saisie_variables.get('COD1DE', 0)), base_variables['TFRDPROV2']) * positif((saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0)))) + (positif(base_variables['PREM8_11']) and max(0, (TFRDP() - TFRD1())) and positif(base_variables['PREM8_11']) * max(0, (TFRDP() - TFRD1())) * (1 - positif((saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0))))))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min((saisie_variables.get('FRN2', 0) + saisie_variables.get('COD1DE', 0)), min(base_variables['TFRDPROV2'], max(base_variables['TFRDPROV2P2'], base_variables['TFRDPROV21731']))) and positif(base_variables['PREM8_11']) * min((saisie_variables.get('FRN2', 0) + saisie_variables.get('COD1DE', 0)), min(base_variables['TFRDPROV2'], max(base_variables['TFRDPROV2P2'], base_variables['TFRDPROV21731']))) * positif((saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0)))) + (positif(base_variables['PREM8_11']) and max(0, (TFRDP() - TFRD1())) and positif(base_variables['PREM8_11']) * max(0, (TFRDP() - TFRD1())) * (1 - positif((saisie_variables.get('FRN3', 0) + saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1EE', 0) + saisie_variables.get('COD1FE', 0))))))))

    @cache_result
    def TIND_102():
        """
        Indicateur d'affichage deduction 10% tx eff.
        """
        return positif_ou_nul((T10MINS2() - (TFRD2() + saisie_variables.get('COD1DE', 0))))

    @cache_result
    def TIND_10MIN_02():
        """
        booleen d'existence d'une deduction minimale tx eff.
        From TIND_10MIN_0i
        """
        return (positif((TDEDMIN2() - TDFN2())) and positif((TDEDMIN2() - TDFN2())) * positif(TTSB2()))

    @cache_result
    def TIND_MIN2():
        """
        pour tx effectif 
        From TIND_MINi
        """
        return (1 - positif(TIND_10MIN_02()))

    @cache_result
    def TD10M2():
        """
        deduction 10% apres prise en compte de la deduction minimale  effectif
        From TD10Mi
        """
        return ((TIND_MIN2() and TIND_MIN2() * TDFN2()) + ((1 - TIND_MIN2()) and (1 - TIND_MIN2()) * T10MINS2()))

    @cache_result
    def TFPT2():
        """
        deduction de 10% ou frais reels tx eff.
        From TFPTi
        """
        return max(TFRD2(), T10MINS2())

    @cache_result
    def TREP102():
        """
        frais de 10% servant aux abtt. de 10% pour GL et SA
        From TREP10i
        """
        return ((TIND_102() and TIND_102() * TD10M2()) + ((1 - TIND_102()) and (1 - TIND_102()) * TFPT2()))

    @cache_result
    def TABTS1DJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return arr((TREP102() and saisie_variables.get('TSHALLO2', 0) and TREP102() * saisie_variables.get('TSHALLO2', 0) / TTSB2()))

    @cache_result
    def TTSN1DJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLO2', 0) - TABTS1DJ())

    @cache_result
    def TABTS1DC():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('ALLO2', 0) + saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0))) and positif((saisie_variables.get('ALLO2', 0) + saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0))) * arr((TREP102() and max(0, (saisie_variables.get('SALEXT2', 0) - saisie_variables.get('COD1DD', 0))) and TREP102() * max(0, (saisie_variables.get('SALEXT2', 0) - saisie_variables.get('COD1DD', 0))) / TTSB2()))) + ((1 - positif((saisie_variables.get('ALLO2', 0) + saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0)))) and (1 - positif((saisie_variables.get('ALLO2', 0) + saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0)))) * max(0, (TREP102() - TABTS1DJ()))))

    @cache_result
    def TTSN1DC():
        """
        Traitements et salaires nets de frais
        """
        return (max(0, (saisie_variables.get('SALEXT2', 0) - saisie_variables.get('COD1DD', 0))) - TABTS1DC())

    @cache_result
    def TABTS1DP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0))) and positif((saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0))) * arr((TREP102() and saisie_variables.get('ALLO2', 0) and TREP102() * saisie_variables.get('ALLO2', 0) / TTSB2()))) + ((1 - positif((saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0)))) and (1 - positif((saisie_variables.get('CARTSP2', 0) + saisie_variables.get('REMPLAP2', 0)))) * max(0, (TREP102() - TABTS1DJ() - TABTS1DC()))))

    @cache_result
    def TTSN1DP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLO2', 0) - TABTS1DP())

    @cache_result
    def TABTSRDJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif(saisie_variables.get('REMPLAP2', 0)) and positif(saisie_variables.get('REMPLAP2', 0)) * arr((TREP102() and saisie_variables.get('CARTSP2', 0) and TREP102() * saisie_variables.get('CARTSP2', 0) / TTSB2()))) + ((1 - positif(saisie_variables.get('REMPLAP2', 0))) and (1 - positif(saisie_variables.get('REMPLAP2', 0))) * max(0, (TREP102() - TABTS1DJ() - TABTS1DC() - TABTS1DP()))))

    @cache_result
    def TTSNRDJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSP2', 0) - TABTSRDJ())

    @cache_result
    def TABTSRDP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return max(0, (TREP102() - TABTS1DJ() - TABTS1DC() - TABTS1DP() - TABTSRDJ()))

    @cache_result
    def TTSNRDP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAP2', 0) - TABTSRDP())

    @cache_result
    def TTSNT2():
        """
        salaires apres deduction des frais professionnels tx eff.
        """
        return (TTSN1DJ() + TTSN1DC() + TTSN1DP() + TTSNRDJ() + TTSNRDP())

    @cache_result
    def TABPR2():
        """
        Abattement brut avant ajustement (pensions retraites 10%) eff.
        """
        return arr((((1 - TIND_APB2()) and (1 - TIND_APB2()) * min(TAPB2(), ((positif((TEXPR3() + TEXPR4())) and positif((TEXPR3() + TEXPR4())) * (TPL_PB() and TAPB2() and TPL_PB() * TAPB2() / somme([(TAPBV() and TAPBV() * (1 - TIND_APBV())), (TAPBC() and TAPBC() * (1 - TIND_APBC())), (TAPB1() and TAPB1() * (1 - TIND_APB1())), (TAPB2() and TAPB2() * (1 - TIND_APB2())), (TAPB3() and TAPB3() * (1 - TIND_APB3())), (TAPB4() and TAPB4() * (1 - TIND_APB4()))]))) + ((1 - positif((TEXPR3() + TEXPR4()))) and (1 - positif((TEXPR3() + TEXPR4()))) * max(0, (TPL_PB() - TABPRV() - TABPRC() - TABPR1())))))) + (TIND_APB2() and TIND_APB2() * TAPB2())))

    @cache_result
    def TAPR2():
        """
        Abattement pensions retraites 10% tx eff.
        """
        return ((TIND_APB2() and TIND_APB2() * TABPR2()) + ((1 - TIND_APB2()) and (1 - TIND_APB2()) * min(TABPR2(), (TPL_PB() - ((1 - TIND_APBV()) and (1 - TIND_APBV()) * TAPRV()) - ((1 - TIND_APBC()) and (1 - TIND_APBC()) * TAPRC()) - ((1 - TIND_APB1()) and (1 - TIND_APB1()) * TAPR1())))))

    @cache_result
    def TPRNN2():
        """
        pensions nettes d'abattement de 10% tx eff.
        From TPRNNi
        """
        return (TEXPR2() - TAPR2())

    @cache_result
    def TPRN2():
        """
        Pensions et rentes nettes tx eff.
        From TPRNi
        """
        return ((positif(TTSNT2()) and positif((TTSNT2() + TPRNN2())) and positif(TTSNT2()) * positif((TTSNT2() + TPRNN2())) * (TTSNT2() + TPRNN2())) + (positif_ou_nul(TTSNT2()) and positif_ou_nul(TTSNT2()) * TPRNN2()))

    @cache_result
    def TPRR2():
        """
        Pensions nettes ordinaires - tx eff.
        """
        return (arr((TPRN2() and PRB2() and TPRN2() * PRB2() / TEXPR2())) + arr((TPRN2() and saisie_variables.get('COD1DH', 0) and TPRN2() * saisie_variables.get('COD1DH', 0) / TEXPR2())))

    @cache_result
    def TPRR22():
        """
        tx efectif Pensions nettes taxees au quotient 2 
        """
        return ((positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0) + saisie_variables.get('CODRDZ', 0))) and positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0) + saisie_variables.get('CODRDZ', 0))) * arr((TPRN2() and saisie_variables.get('CARPEP2', 0) and TPRN2() * saisie_variables.get('CARPEP2', 0) / TEXPR2()))) + ((1 - positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0) + saisie_variables.get('CODRDZ', 0)))) and (1 - positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0) + saisie_variables.get('CODRDZ', 0)))) * (TPRN2() - TPRR2())))

    @cache_result
    def TPRR2Z2():
        """
        tx efectif Pensions nettes taxees au quotient code RxZ
        """
        return ((positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0))) and positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0))) * arr((TPRN2() and saisie_variables.get('CODRDZ', 0) and TPRN2() * saisie_variables.get('CODRDZ', 0) / TEXPR2()))) + ((1 - positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0)))) and (1 - positif((saisie_variables.get('PEBF2', 0) + saisie_variables.get('PENSALP2', 0)))) * (TPRN2() - TPRR2() - TPRR22())))

    @cache_result
    def TPENF2():
        """
        Pensions nettes footballeurs - tx eff.
        From TPENFi
        """
        return ((positif(saisie_variables.get('PENSALP2', 0)) and positif(saisie_variables.get('PENSALP2', 0)) * arr((TPRN2() and saisie_variables.get('PEBF2', 0) and TPRN2() * saisie_variables.get('PEBF2', 0) / TEXPR2()))) + ((1 - positif(saisie_variables.get('PENSALP2', 0))) and (1 - positif(saisie_variables.get('PENSALP2', 0))) * (TPRN2() - TPRR2() - TPRR22() - TPRR2Z2())))

    @cache_result
    def TPENALIM2():
        """
        pensions nettes  alimentaire tx eff.
        From TPENALIMi
        """
        return (positif(TEXPR2()) and positif(TEXPR2()) * (TPRN2() - TPRR2() - TPRR22() - TPRR2Z2() - TPENF2()))

    @cache_result
    def TFRD3():
        """
        Frais reels declares tx effectif
        """
        return (((1 - positif(base_variables['PREM8_11'])) and (saisie_variables.get('FRN3', 0) + saisie_variables.get('COD1EE', 0)) and (1 - positif(base_variables['PREM8_11'])) * (saisie_variables.get('FRN3', 0) + saisie_variables.get('COD1EE', 0)) * positif((saisie_variables.get('FRN3', 0) + saisie_variables.get('COD1EE', 0) - T10MINS3()))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min((saisie_variables.get('FRN3', 0) + saisie_variables.get('COD1EE', 0)), base_variables['TFRDPROV3']) and positif(base_variables['PREM8_11']) * min((saisie_variables.get('FRN3', 0) + saisie_variables.get('COD1EE', 0)), base_variables['TFRDPROV3']) * positif((saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1FE', 0)))) + (positif(base_variables['PREM8_11']) and max(0, (TFRDP() - TFRD1() - TFRD2())) and positif(base_variables['PREM8_11']) * max(0, (TFRDP() - TFRD1() - TFRD2())) * (1 - positif((saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1FE', 0))))))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * ((positif(base_variables['PREM8_11']) and min((saisie_variables.get('FRN3', 0) + saisie_variables.get('COD1EE', 0)), min(base_variables['TFRDPROV3'], max(base_variables['TFRDPROV3P2'], base_variables['TFRDPROV31731']))) and positif(base_variables['PREM8_11']) * min((saisie_variables.get('FRN3', 0) + saisie_variables.get('COD1EE', 0)), min(base_variables['TFRDPROV3'], max(base_variables['TFRDPROV3P2'], base_variables['TFRDPROV31731']))) * positif((saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1FE', 0)))) + (positif(base_variables['PREM8_11']) and max(0, (TFRDP() - TFRD1() - TFRD2())) and positif(base_variables['PREM8_11']) * max(0, (TFRDP() - TFRD1() - TFRD2())) * (1 - positif((saisie_variables.get('FRN4', 0) + saisie_variables.get('COD1FE', 0))))))))

    @cache_result
    def TIND_103():
        """
        Indicateur d'affichage deduction 10% tx eff.
        """
        return positif_ou_nul((T10MINS3() - (TFRD3() + saisie_variables.get('COD1EE', 0))))

    @cache_result
    def TIND_10MIN_03():
        """
        booleen d'existence d'une deduction minimale tx eff.
        From TIND_10MIN_0i
        """
        return (positif((TDEDMIN3() - TDFN3())) and positif((TDEDMIN3() - TDFN3())) * positif(TTSB3()))

    @cache_result
    def TIND_MIN3():
        """
        pour tx effectif 
        From TIND_MINi
        """
        return (1 - positif(TIND_10MIN_03()))

    @cache_result
    def TD10M3():
        """
        deduction 10% apres prise en compte de la deduction minimale  effectif
        From TD10Mi
        """
        return ((TIND_MIN3() and TIND_MIN3() * TDFN3()) + ((1 - TIND_MIN3()) and (1 - TIND_MIN3()) * T10MINS3()))

    @cache_result
    def TFPT3():
        """
        deduction de 10% ou frais reels tx eff.
        From TFPTi
        """
        return max(TFRD3(), T10MINS3())

    @cache_result
    def TREP103():
        """
        frais de 10% servant aux abtt. de 10% pour GL et SA
        From TREP10i
        """
        return ((TIND_103() and TIND_103() * TD10M3()) + ((1 - TIND_103()) and (1 - TIND_103()) * TFPT3()))

    @cache_result
    def TABTS1EJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return arr((TREP103() and saisie_variables.get('TSHALLO3', 0) and TREP103() * saisie_variables.get('TSHALLO3', 0) / TTSB3()))

    @cache_result
    def TTSN1EJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLO3', 0) - TABTS1EJ())

    @cache_result
    def TABTS1EC():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('ALLO3', 0) + saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0))) and positif((saisie_variables.get('ALLO3', 0) + saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0))) * arr((TREP103() and max(0, (saisie_variables.get('SALEXT3', 0) - saisie_variables.get('COD1ED', 0))) and TREP103() * max(0, (saisie_variables.get('SALEXT3', 0) - saisie_variables.get('COD1ED', 0))) / TTSB3()))) + ((1 - positif((saisie_variables.get('ALLO3', 0) + saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0)))) and (1 - positif((saisie_variables.get('ALLO3', 0) + saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0)))) * max(0, (TREP103() - TABTS1EJ()))))

    @cache_result
    def TTSN1EC():
        """
        Traitements et salaires nets de frais
        """
        return (max(0, (saisie_variables.get('SALEXT3', 0) - saisie_variables.get('COD1ED', 0))) - TABTS1EC())

    @cache_result
    def TABTS1EP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0))) and positif((saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0))) * arr((TREP103() and saisie_variables.get('ALLO3', 0) and TREP103() * saisie_variables.get('ALLO3', 0) / TTSB3()))) + ((1 - positif((saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0)))) and (1 - positif((saisie_variables.get('CARTSP3', 0) + saisie_variables.get('REMPLAP3', 0)))) * max(0, (TREP103() - TABTS1EJ() - TABTS1EC()))))

    @cache_result
    def TTSN1EP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLO3', 0) - TABTS1EP())

    @cache_result
    def TABTSREJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif(saisie_variables.get('REMPLAP3', 0)) and positif(saisie_variables.get('REMPLAP3', 0)) * arr((TREP103() and saisie_variables.get('CARTSP3', 0) and TREP103() * saisie_variables.get('CARTSP3', 0) / TTSB3()))) + ((1 - positif(saisie_variables.get('REMPLAP3', 0))) and (1 - positif(saisie_variables.get('REMPLAP3', 0))) * max(0, (TREP103() - TABTS1EJ() - TABTS1EC() - TABTS1EP()))))

    @cache_result
    def TTSNREJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSP3', 0) - TABTSREJ())

    @cache_result
    def TABTSREP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return max(0, (TREP103() - TABTS1EJ() - TABTS1EC() - TABTS1EP() - TABTSREJ()))

    @cache_result
    def TTSNREP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAP3', 0) - TABTSREP())

    @cache_result
    def TTSNT3():
        """
        salaires apres deduction des frais professionnels tx eff.
        """
        return (TTSN1EJ() + TTSN1EC() + TTSN1EP() + TTSNREJ() + TTSNREP())

    @cache_result
    def TABPR3():
        """
        Abattement brut avant ajustement (pensions retraites 10%) eff.
        """
        return arr((((1 - TIND_APB3()) and (1 - TIND_APB3()) * min(TAPB3(), ((positif(TEXPR4()) and positif(TEXPR4()) * (TPL_PB() and TAPB3() and TPL_PB() * TAPB3() / somme([(TAPBV() and TAPBV() * (1 - TIND_APBV())), (TAPBC() and TAPBC() * (1 - TIND_APBC())), (TAPB1() and TAPB1() * (1 - TIND_APB1())), (TAPB2() and TAPB2() * (1 - TIND_APB2())), (TAPB3() and TAPB3() * (1 - TIND_APB3())), (TAPB4() and TAPB4() * (1 - TIND_APB4()))]))) + ((1 - positif(TEXPR4())) and (1 - positif(TEXPR4())) * max(0, (TPL_PB() - TABPRV() - TABPRC() - TABPR1() - TABPR2())))))) + (TIND_APB3() and TIND_APB3() * TAPB3())))

    @cache_result
    def TAPR3():
        """
        Abattement pensions retraites 10% tx eff.
        """
        return ((TIND_APB3() and TIND_APB3() * TABPR3()) + ((1 - TIND_APB3()) and (1 - TIND_APB3()) * min(TABPR3(), (TPL_PB() - ((1 - TIND_APBV()) and (1 - TIND_APBV()) * TAPRV()) - ((1 - TIND_APBC()) and (1 - TIND_APBC()) * TAPRC()) - ((1 - TIND_APB1()) and (1 - TIND_APB1()) * TAPR1()) - ((1 - TIND_APB2()) and (1 - TIND_APB2()) * TAPR2())))))

    @cache_result
    def TPRNN3():
        """
        pensions nettes d'abattement de 10% tx eff.
        From TPRNNi
        """
        return (TEXPR3() - TAPR3())

    @cache_result
    def TPRN3():
        """
        Pensions et rentes nettes tx eff.
        From TPRNi
        """
        return ((positif(TTSNT3()) and positif((TTSNT3() + TPRNN3())) and positif(TTSNT3()) * positif((TTSNT3() + TPRNN3())) * (TTSNT3() + TPRNN3())) + (positif_ou_nul(TTSNT3()) and positif_ou_nul(TTSNT3()) * TPRNN3()))

    @cache_result
    def TPRR3():
        """
        Pensions nettes ordinaires - tx eff.
        """
        return (arr((TPRN3() and PRB3() and TPRN3() * PRB3() / TEXPR3())) + arr((TPRN3() and saisie_variables.get('COD1EH', 0) and TPRN3() * saisie_variables.get('COD1EH', 0) / TEXPR3())))

    @cache_result
    def TPRR23():
        """
        tx efectif Pensions nettes taxees au quotient 2 
        """
        return ((positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0) + saisie_variables.get('CODREZ', 0))) and positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0) + saisie_variables.get('CODREZ', 0))) * arr((TPRN3() and saisie_variables.get('CARPEP3', 0) and TPRN3() * saisie_variables.get('CARPEP3', 0) / TEXPR3()))) + ((1 - positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0) + saisie_variables.get('CODREZ', 0)))) and (1 - positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0) + saisie_variables.get('CODREZ', 0)))) * (TPRN3() - TPRR3())))

    @cache_result
    def TPRR2Z3():
        """
        tx efectif Pensions nettes taxees au quotient code RxZ
        """
        return ((positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0))) and positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0))) * arr((TPRN3() and saisie_variables.get('CODREZ', 0) and TPRN3() * saisie_variables.get('CODREZ', 0) / TEXPR3()))) + ((1 - positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0)))) and (1 - positif((saisie_variables.get('PEBF3', 0) + saisie_variables.get('PENSALP3', 0)))) * (TPRN3() - TPRR3() - TPRR23())))

    @cache_result
    def TPENF3():
        """
        Pensions nettes footballeurs - tx eff.
        From TPENFi
        """
        return ((positif(saisie_variables.get('PENSALP3', 0)) and positif(saisie_variables.get('PENSALP3', 0)) * arr((TPRN3() and saisie_variables.get('PEBF3', 0) and TPRN3() * saisie_variables.get('PEBF3', 0) / TEXPR3()))) + ((1 - positif(saisie_variables.get('PENSALP3', 0))) and (1 - positif(saisie_variables.get('PENSALP3', 0))) * (TPRN3() - TPRR3() - TPRR23() - TPRR2Z3())))

    @cache_result
    def TPENALIM3():
        """
        pensions nettes  alimentaire tx eff.
        From TPENALIMi
        """
        return (positif(TEXPR3()) and positif(TEXPR3()) * (TPRN3() - TPRR3() - TPRR23() - TPRR2Z3() - TPENF3()))

    @cache_result
    def TFRD4():
        """
        Frais reels declares tx effectif
        """
        return max(0, (TFRDP() - TFRD1() - TFRD2() - TFRD3()))

    @cache_result
    def TIND_104():
        """
        Indicateur d'affichage deduction 10% tx eff.
        """
        return positif_ou_nul((T10MINS4() - (TFRD4() + saisie_variables.get('COD1FE', 0))))

    @cache_result
    def TIND_10MIN_04():
        """
        booleen d'existence d'une deduction minimale tx eff.
        From TIND_10MIN_0i
        """
        return (positif((TDEDMIN4() - TDFN4())) and positif((TDEDMIN4() - TDFN4())) * positif(TTSB4()))

    @cache_result
    def TIND_MIN4():
        """
        pour tx effectif 
        From TIND_MINi
        """
        return (1 - positif(TIND_10MIN_04()))

    @cache_result
    def TD10M4():
        """
        deduction 10% apres prise en compte de la deduction minimale  effectif
        From TD10Mi
        """
        return ((TIND_MIN4() and TIND_MIN4() * TDFN4()) + ((1 - TIND_MIN4()) and (1 - TIND_MIN4()) * T10MINS4()))

    @cache_result
    def TFPT4():
        """
        deduction de 10% ou frais reels tx eff.
        From TFPTi
        """
        return max(TFRD4(), T10MINS4())

    @cache_result
    def TREP104():
        """
        frais de 10% servant aux abtt. de 10% pour GL et SA
        From TREP10i
        """
        return ((TIND_104() and TIND_104() * TD10M4()) + ((1 - TIND_104()) and (1 - TIND_104()) * TFPT4()))

    @cache_result
    def TABTS1FJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return arr((TREP104() and saisie_variables.get('TSHALLO4', 0) and TREP104() * saisie_variables.get('TSHALLO4', 0) / TTSB4()))

    @cache_result
    def TTSN1FJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('TSHALLO4', 0) - TABTS1FJ())

    @cache_result
    def TABTS1FC():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('ALLO4', 0) + saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0))) and positif((saisie_variables.get('ALLO4', 0) + saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0))) * arr((TREP104() and max(0, (saisie_variables.get('SALEXT4', 0) - saisie_variables.get('COD1FD', 0))) and TREP104() * max(0, (saisie_variables.get('SALEXT4', 0) - saisie_variables.get('COD1FD', 0))) / TTSB4()))) + ((1 - positif((saisie_variables.get('ALLO4', 0) + saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0)))) and (1 - positif((saisie_variables.get('ALLO4', 0) + saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0)))) * max(0, (TREP104() - TABTS1FJ()))))

    @cache_result
    def TTSN1FC():
        """
        Traitements et salaires nets de frais
        """
        return (max(0, (saisie_variables.get('SALEXT4', 0) - saisie_variables.get('COD1FD', 0))) - TABTS1FC())

    @cache_result
    def TABTS1FP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif((saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0))) and positif((saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0))) * arr((TREP104() and saisie_variables.get('ALLO4', 0) and TREP104() * saisie_variables.get('ALLO4', 0) / TTSB4()))) + ((1 - positif((saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0)))) and (1 - positif((saisie_variables.get('CARTSP4', 0) + saisie_variables.get('REMPLAP4', 0)))) * max(0, (TREP104() - TABTS1FJ() - TABTS1FC()))))

    @cache_result
    def TTSN1FP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('ALLO4', 0) - TABTS1FP())

    @cache_result
    def TABTSRFJ():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return ((positif(saisie_variables.get('REMPLAP4', 0)) and positif(saisie_variables.get('REMPLAP4', 0)) * arr((TREP104() and saisie_variables.get('CARTSP4', 0) and TREP104() * saisie_variables.get('CARTSP4', 0) / TTSB4()))) + ((1 - positif(saisie_variables.get('REMPLAP4', 0))) and (1 - positif(saisie_variables.get('REMPLAP4', 0))) * max(0, (TREP104() - TABTS1FJ() - TABTS1FC() - TABTS1FP()))))

    @cache_result
    def TTSNRFJ():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('CARTSP4', 0) - TABTSRFJ())

    @cache_result
    def TABTSRFP():
        """
        part de l'abattement pour frais sur TS normaux eff.
        """
        return max(0, (TREP104() - TABTS1FJ() - TABTS1FC() - TABTS1FP() - TABTSRFJ()))

    @cache_result
    def TTSNRFP():
        """
        Traitements et salaires nets de frais
        """
        return (saisie_variables.get('REMPLAP4', 0) - TABTSRFP())

    @cache_result
    def TTSNT4():
        """
        salaires apres deduction des frais professionnels tx eff.
        """
        return (TTSN1FJ() + TTSN1FC() + TTSN1FP() + TTSNRFJ() + TTSNRFP())

    @cache_result
    def TABPR4():
        """
        Abattement brut avant ajustement (pensions retraites 10%) eff.
        """
        return arr((((1 - TIND_APB4()) and (1 - TIND_APB4()) * min(TAPB4(), max(0, (TPL_PB() - TABPRV() - TABPRC() - TABPR1() - TABPR2() - TABPR3())))) + (TIND_APB4() and TIND_APB4() * TAPB4())))

    @cache_result
    def TAPR4():
        """
        Abattement pensions retraites 10% tx eff.
        """
        return ((TIND_APB4() and TIND_APB4() * TABPR4()) + ((1 - TIND_APB4()) and (1 - TIND_APB4()) * min(TABPR4(), (TPL_PB() - ((1 - TIND_APBV()) and (1 - TIND_APBV()) * TAPRV()) - ((1 - TIND_APBC()) and (1 - TIND_APBC()) * TAPRC()) - ((1 - TIND_APB1()) and (1 - TIND_APB1()) * TAPR1()) - ((1 - TIND_APB2()) and (1 - TIND_APB2()) * TAPR2()) - ((1 - TIND_APB3()) and (1 - TIND_APB3()) * TAPR3())))))

    @cache_result
    def TPRNN4():
        """
        pensions nettes d'abattement de 10% tx eff.
        From TPRNNi
        """
        return (TEXPR4() - TAPR4())

    @cache_result
    def TPRN4():
        """
        Pensions et rentes nettes tx eff.
        From TPRNi
        """
        return ((positif(TTSNT4()) and positif((TTSNT4() + TPRNN4())) and positif(TTSNT4()) * positif((TTSNT4() + TPRNN4())) * (TTSNT4() + TPRNN4())) + (positif_ou_nul(TTSNT4()) and positif_ou_nul(TTSNT4()) * TPRNN4()))

    @cache_result
    def TPRR4():
        """
        Pensions nettes ordinaires - tx eff.
        """
        return (arr((TPRN4() and PRB4() and TPRN4() * PRB4() / TEXPR4())) + arr((TPRN4() and saisie_variables.get('COD1FH', 0) and TPRN4() * saisie_variables.get('COD1FH', 0) / TEXPR4())))

    @cache_result
    def TPRR24():
        """
        tx efectif Pensions nettes taxees au quotient 2 
        """
        return ((positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0) + saisie_variables.get('CODRFZ', 0))) and positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0) + saisie_variables.get('CODRFZ', 0))) * arr((TPRN4() and saisie_variables.get('CARPEP4', 0) and TPRN4() * saisie_variables.get('CARPEP4', 0) / TEXPR4()))) + ((1 - positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0) + saisie_variables.get('CODRFZ', 0)))) and (1 - positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0) + saisie_variables.get('CODRFZ', 0)))) * (TPRN4() - TPRR4())))

    @cache_result
    def TPRR2Z4():
        """
        tx efectif Pensions nettes taxees au quotient code RxZ
        """
        return ((positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0))) and positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0))) * arr((TPRN4() and saisie_variables.get('CODRFZ', 0) and TPRN4() * saisie_variables.get('CODRFZ', 0) / TEXPR4()))) + ((1 - positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0)))) and (1 - positif((saisie_variables.get('PEBF4', 0) + saisie_variables.get('PENSALP4', 0)))) * (TPRN4() - TPRR4() - TPRR24())))

    @cache_result
    def TPENF4():
        """
        Pensions nettes footballeurs - tx eff.
        From TPENFi
        """
        return ((positif(saisie_variables.get('PENSALP4', 0)) and positif(saisie_variables.get('PENSALP4', 0)) * arr((TPRN4() and saisie_variables.get('PEBF4', 0) and TPRN4() * saisie_variables.get('PEBF4', 0) / TEXPR4()))) + ((1 - positif(saisie_variables.get('PENSALP4', 0))) and (1 - positif(saisie_variables.get('PENSALP4', 0))) * (TPRN4() - TPRR4() - TPRR24() - TPRR2Z4())))

    @cache_result
    def TPENALIM4():
        """
        pensions nettes  alimentaire tx eff.
        From TPENALIMi
        """
        return (positif(TEXPR4()) and positif(TEXPR4()) * (TPRN4() - TPRR4() - TPRR24() - TPRR2Z4() - TPENF4()))

    @cache_result
    def REVALIM():
        """
        total 
        """
        return ((somme([PENALIMV(), PENALIMC(), PENALIM1(), PENALIM2(), PENALIM3(), PENALIM4()]) and somme([PENALIMV(), PENALIMC(), PENALIM1(), PENALIM2(), PENALIM3(), PENALIM4()]) * (1 - INDTEFF())) + (somme([TPENALIMV(), TPENALIMC(), TPENALIM1(), TPENALIM2(), TPENALIM3(), TPENALIM4()]) and somme([TPENALIMV(), TPENALIMC(), TPENALIM1(), TPENALIM2(), TPENALIM3(), TPENALIM4()]) * INDTEFF()))

    @cache_result
    def TTSNV():
        """
        Traitements et salaires nets de frais tx eff.
        From TTSNi
        """
        return ((positif(TTSNTV()) and positif(TTSNTV()) * min(0, (TTSNTV() + TPRNNV()))) + (positif_ou_nul(TTSNTV()) and positif_ou_nul(TTSNTV()) * TTSNTV()))

    @cache_result
    def TTSV():
        """
        tx eff.
        """
        return (TTSNV() - somme([max(0, (saisie_variables.get('GLD1V', 0) - TABGL1V())), max(0, (saisie_variables.get('GLD2V', 0) - TABGL2V())), max(0, (saisie_variables.get('GLD3V', 0) - TABGL3V()))]) - max((saisie_variables.get('CODDAJ', 0) - TABDOMDAJ()), 0) - max((saisie_variables.get('CODEAJ', 0) - TABDOMEAJ()), 0))

    @cache_result
    def TTSNNV():
        """
        salaires normaux hors droits d'auteur imposables - tx eff.
        From TTSNNi
        """
        return ((positif(TTSV()) and positif(TTSV()) * arr((TTSV() and (TTSBNV() + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0)) and TTSV() * (TTSBNV() + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLDGRATV', 0)) / TEXTSV()))) + ((1 - positif(TTSV())) and (1 - positif(TTSV())) * TTSV()))

    @cache_result
    def TTSNN2TSV():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables  tx eff.
        From TTSNN2TSi
        """
        return (positif(TTSV()) and positif(TTSV()) * ((positif(saisie_variables.get('REMPLAV', 0)) and positif(saisie_variables.get('REMPLAV', 0)) * arr((TTSV() and saisie_variables.get('CARTSV', 0) and TTSV() * saisie_variables.get('CARTSV', 0) / TEXTSV()))) + ((1 - positif(saisie_variables.get('REMPLAV', 0))) and (1 - positif(saisie_variables.get('REMPLAV', 0))) * (TTSV() - TTSNNV()))))

    @cache_result
    def TTSNC():
        """
        Traitements et salaires nets de frais tx eff.
        From TTSNi
        """
        return ((positif(TTSNTC()) and positif(TTSNTC()) * min(0, (TTSNTC() + TPRNNC()))) + (positif_ou_nul(TTSNTC()) and positif_ou_nul(TTSNTC()) * TTSNTC()))

    @cache_result
    def TTSC():
        """
        tx eff.
        """
        return (TTSNC() - somme([max(0, (saisie_variables.get('GLD1C', 0) - TABGL1C())), max(0, (saisie_variables.get('GLD2C', 0) - TABGL2C())), max(0, (saisie_variables.get('GLD3C', 0) - TABGL3C()))]) - max((saisie_variables.get('CODDBJ', 0) - TABDOMDBJ()), 0) - max((saisie_variables.get('CODEBJ', 0) - TABDOMEBJ()), 0))

    @cache_result
    def TTSNNC():
        """
        salaires normaux hors droits d'auteur imposables - tx eff.
        From TTSNNi
        """
        return ((positif(TTSC()) and positif(TTSC()) * arr((TTSC() and (TTSBNC() + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0)) and TTSC() * (TTSBNC() + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLDGRATC', 0)) / TEXTSC()))) + ((1 - positif(TTSC())) and (1 - positif(TTSC())) * TTSC()))

    @cache_result
    def TTSNN2TSC():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables  tx eff.
        From TTSNN2TSi
        """
        return (positif(TTSC()) and positif(TTSC()) * ((positif(saisie_variables.get('REMPLAC', 0)) and positif(saisie_variables.get('REMPLAC', 0)) * arr((TTSC() and saisie_variables.get('CARTSC', 0) and TTSC() * saisie_variables.get('CARTSC', 0) / TEXTSC()))) + ((1 - positif(saisie_variables.get('REMPLAC', 0))) and (1 - positif(saisie_variables.get('REMPLAC', 0))) * (TTSC() - TTSNNC()))))

    @cache_result
    def TTSN1():
        """
        Traitements et salaires nets de frais tx eff.
        From TTSNi
        """
        return ((positif(TTSNT1()) and positif(TTSNT1()) * min(0, (TTSNT1() + TPRNN1()))) + (positif_ou_nul(TTSNT1()) and positif_ou_nul(TTSNT1()) * TTSNT1()))

    @cache_result
    def TTS1():
        """
        tx eff.
        From TTSi
        """
        return TTSN1()

    @cache_result
    def TTSNN1():
        """
        salaires normaux hors droits d'auteur imposables - tx eff.
        From TTSNNi
        """
        return ((positif(TTS1()) and positif(TTS1()) * arr((TTS1() and TTSBN1() and TTS1() * TTSBN1() / TEXTS1()))) + ((1 - positif(TTS1())) and (1 - positif(TTS1())) * TTS1()))

    @cache_result
    def TTSNN2TS1():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables  tx eff.
        From TTSNN2TSi
        """
        return (positif(TTS1()) and positif(TTS1()) * ((positif(saisie_variables.get('REMPLAP1', 0)) and positif(saisie_variables.get('REMPLAP1', 0)) * arr((TTS1() and saisie_variables.get('CARTSP1', 0) and TTS1() * saisie_variables.get('CARTSP1', 0) / TEXTS1()))) + ((1 - positif(saisie_variables.get('REMPLAP1', 0))) and (1 - positif(saisie_variables.get('REMPLAP1', 0))) * (TTS1() - TTSNN1()))))

    @cache_result
    def TTSN2():
        """
        Traitements et salaires nets de frais tx eff.
        From TTSNi
        """
        return ((positif(TTSNT2()) and positif(TTSNT2()) * min(0, (TTSNT2() + TPRNN2()))) + (positif_ou_nul(TTSNT2()) and positif_ou_nul(TTSNT2()) * TTSNT2()))

    @cache_result
    def TTS2():
        """
        tx eff.
        From TTSi
        """
        return TTSN2()

    @cache_result
    def TTSNN2():
        """
        salaires normaux hors droits d'auteur imposables - tx eff.
        From TTSNNi
        """
        return ((positif(TTS2()) and positif(TTS2()) * arr((TTS2() and TTSBN2() and TTS2() * TTSBN2() / TEXTS2()))) + ((1 - positif(TTS2())) and (1 - positif(TTS2())) * TTS2()))

    @cache_result
    def TTSNN2TS2():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables  tx eff.
        From TTSNN2TSi
        """
        return (positif(TTS2()) and positif(TTS2()) * ((positif(saisie_variables.get('REMPLAP2', 0)) and positif(saisie_variables.get('REMPLAP2', 0)) * arr((TTS2() and saisie_variables.get('CARTSP2', 0) and TTS2() * saisie_variables.get('CARTSP2', 0) / TEXTS2()))) + ((1 - positif(saisie_variables.get('REMPLAP2', 0))) and (1 - positif(saisie_variables.get('REMPLAP2', 0))) * (TTS2() - TTSNN2()))))

    @cache_result
    def TTSN3():
        """
        Traitements et salaires nets de frais tx eff.
        From TTSNi
        """
        return ((positif(TTSNT3()) and positif(TTSNT3()) * min(0, (TTSNT3() + TPRNN3()))) + (positif_ou_nul(TTSNT3()) and positif_ou_nul(TTSNT3()) * TTSNT3()))

    @cache_result
    def TTS3():
        """
        tx eff.
        From TTSi
        """
        return TTSN3()

    @cache_result
    def TTSNN3():
        """
        salaires normaux hors droits d'auteur imposables - tx eff.
        From TTSNNi
        """
        return ((positif(TTS3()) and positif(TTS3()) * arr((TTS3() and TTSBN3() and TTS3() * TTSBN3() / TEXTS3()))) + ((1 - positif(TTS3())) and (1 - positif(TTS3())) * TTS3()))

    @cache_result
    def TTSNN2TS3():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables  tx eff.
        From TTSNN2TSi
        """
        return (positif(TTS3()) and positif(TTS3()) * ((positif(saisie_variables.get('REMPLAP3', 0)) and positif(saisie_variables.get('REMPLAP3', 0)) * arr((TTS3() and saisie_variables.get('CARTSP3', 0) and TTS3() * saisie_variables.get('CARTSP3', 0) / TEXTS3()))) + ((1 - positif(saisie_variables.get('REMPLAP3', 0))) and (1 - positif(saisie_variables.get('REMPLAP3', 0))) * (TTS3() - TTSNN3()))))

    @cache_result
    def TTSN4():
        """
        Traitements et salaires nets de frais tx eff.
        From TTSNi
        """
        return ((positif(TTSNT4()) and positif(TTSNT4()) * min(0, (TTSNT4() + TPRNN4()))) + (positif_ou_nul(TTSNT4()) and positif_ou_nul(TTSNT4()) * TTSNT4()))

    @cache_result
    def TTS4():
        """
        tx eff.
        From TTSi
        """
        return TTSN4()

    @cache_result
    def TTSNN4():
        """
        salaires normaux hors droits d'auteur imposables - tx eff.
        From TTSNNi
        """
        return ((positif(TTS4()) and positif(TTS4()) * arr((TTS4() and TTSBN4() and TTS4() * TTSBN4() / TEXTS4()))) + ((1 - positif(TTS4())) and (1 - positif(TTS4())) * TTS4()))

    @cache_result
    def TTSNN2TS4():
        """
        salaires normaux quot. 2 hors droits d'auteur imposables  tx eff.
        From TTSNN2TSi
        """
        return (positif(TTS4()) and positif(TTS4()) * ((positif(saisie_variables.get('REMPLAP4', 0)) and positif(saisie_variables.get('REMPLAP4', 0)) * arr((TTS4() and saisie_variables.get('CARTSP4', 0) and TTS4() * saisie_variables.get('CARTSP4', 0) / TEXTS4()))) + ((1 - positif(saisie_variables.get('REMPLAP4', 0))) and (1 - positif(saisie_variables.get('REMPLAP4', 0))) * (TTS4() - TTSNN4()))))

    @cache_result
    def REVTS():
        """
        total TS 
        """
        return ((somme([TSNN2TSV(), TSNN2TSC(), TSNN2TS1(), TSNN2TS2(), TSNN2TS3(), TSNN2TS4()]) and somme([TSNN2TSV(), TSNN2TSC(), TSNN2TS1(), TSNN2TS2(), TSNN2TS3(), TSNN2TS4()]) * (1 - INDTEFF())) + (somme([TTSNN2TSV(), TTSNN2TSC(), TTSNN2TS1(), TTSNN2TS2(), TTSNN2TS3(), TTSNN2TS4()]) and somme([TTSNN2TSV(), TTSNN2TSC(), TTSNN2TS1(), TTSNN2TS2(), TTSNN2TS3(), TTSNN2TS4()]) * INDTEFF()))

    @cache_result
    def TTSNN2REMPV():
        """
        Tx effectif salaires normaux quot. 2 imposables - 
        From TTSNN2REMPi
        """
        return (positif(TTSV()) and positif(TTSV()) * (TTSV() - TTSNNV() - TTSNN2TSV()))

    @cache_result
    def TTSNN2REMPC():
        """
        Tx effectif salaires normaux quot. 2 imposables - 
        From TTSNN2REMPi
        """
        return (positif(TTSC()) and positif(TTSC()) * (TTSC() - TTSNNC() - TTSNN2TSC()))

    @cache_result
    def TTSNN2REMP1():
        """
        Tx effectif salaires normaux quot. 2 imposables - 
        From TTSNN2REMPi
        """
        return (positif(TTS1()) and positif(TTS1()) * (TTS1() - TTSNN1() - TTSNN2TS1()))

    @cache_result
    def TTSNN2REMP2():
        """
        Tx effectif salaires normaux quot. 2 imposables - 
        From TTSNN2REMPi
        """
        return (positif(TTS2()) and positif(TTS2()) * (TTS2() - TTSNN2() - TTSNN2TS2()))

    @cache_result
    def TTSNN2REMP3():
        """
        Tx effectif salaires normaux quot. 2 imposables - 
        From TTSNN2REMPi
        """
        return (positif(TTS3()) and positif(TTS3()) * (TTS3() - TTSNN3() - TTSNN2TS3()))

    @cache_result
    def TTSNN2REMP4():
        """
        Tx effectif salaires normaux quot. 2 imposables - 
        From TTSNN2REMPi
        """
        return (positif(TTS4()) and positif(TTS4()) * (TTS4() - TTSNN4() - TTSNN2TS4()))

    @cache_result
    def REVTSREMP():
        """
        total TS remplacement
        """
        return ((somme([TSNN2REMPV(), TSNN2REMPC(), TSNN2REMP1(), TSNN2REMP2(), TSNN2REMP3(), TSNN2REMP4()]) and somme([TSNN2REMPV(), TSNN2REMPC(), TSNN2REMP1(), TSNN2REMP2(), TSNN2REMP3(), TSNN2REMP4()]) * (1 - INDTEFF())) + (somme([TTSNN2REMPV(), TTSNN2REMPC(), TTSNN2REMP1(), TTSNN2REMP2(), TTSNN2REMP3(), TTSNN2REMP4()]) and somme([TTSNN2REMPV(), TTSNN2REMPC(), TTSNN2REMP1(), TTSNN2REMP2(), TTSNN2REMP3(), TTSNN2REMP4()]) * INDTEFF()))

    @cache_result
    def REVPRR():
        """
        total 
        """
        return ((somme([(PRR2V() + PRR2ZV()), (PRR2C() + PRR2ZC()), (PRR21() + PRR2Z1()), (PRR22() + PRR2Z2()), (PRR23() + PRR2Z3()), (PRR24() + PRR2Z4())]) and somme([(PRR2V() + PRR2ZV()), (PRR2C() + PRR2ZC()), (PRR21() + PRR2Z1()), (PRR22() + PRR2Z2()), (PRR23() + PRR2Z3()), (PRR24() + PRR2Z4())]) * (1 - INDTEFF())) + (somme([(TPRR2V() + TPRR2ZV()), (TPRR2C() + TPRR2ZC()), (TPRR21() + TPRR2Z1()), (TPRR22() + TPRR2Z2()), (TPRR23() + TPRR2Z3()), (TPRR24() + TPRR2Z4())]) and somme([(TPRR2V() + TPRR2ZV()), (TPRR2C() + TPRR2ZC()), (TPRR21() + TPRR2Z1()), (TPRR22() + TPRR2Z2()), (TPRR23() + TPRR2Z3()), (TPRR24() + TPRR2Z4())]) * INDTEFF()))

    @cache_result
    def REVQTOT():
        """
        somme des revevus aux quotient :REVx REVAFN REVF
        """
        return ((saisie_variables.get('CODRWB', 0) and saisie_variables.get('CODRWB', 0) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((saisie_variables.get('CODRWB', 0) + saisie_variables.get('CODRWA', 0)) and (saisie_variables.get('CODRWB', 0) + saisie_variables.get('CODRWA', 0)) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))) + saisie_variables.get('CODRVG', 0) + somme([REV1(), REV2(), REV3(), REV4()]) + REVALIM() + REVF() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())

    @cache_result
    def TOTALQUO():
        """
        Somme des revenus au quotient >=2
        """
        return ((1 - positif(saisie_variables.get('IPVLOC', 0))) and (1 - positif(saisie_variables.get('IPVLOC', 0))) * REVQTOT())

    @cache_result
    def SOMDEFANT():
        """
        Somme def  pour art 1731bis
        """
        return (saisie_variables.get('DEFAA5', 0) + saisie_variables.get('DEFAA4', 0) + saisie_variables.get('DEFAA3', 0) + saisie_variables.get('DEFAA2', 0) + saisie_variables.get('DEFAA1', 0) + saisie_variables.get('DEFAA0', 0))

    @cache_result
    def SOMDEFLOC():
        """
        Somme def  pour art 1731bis
        """
        return (saisie_variables.get('LOCDEFPROCGAV', 0) + saisie_variables.get('LOCDEFPROV', 0) + saisie_variables.get('LOCDEFPROCGAC', 0) + saisie_variables.get('LOCDEFPROC', 0) + saisie_variables.get('LOCDEFPROCGAP', 0) + saisie_variables.get('LOCDEFPROP', 0))

    @cache_result
    def SOMDEFBNC():
        """
        Somme def  pour art 1731bis
        """
        return (saisie_variables.get('BNCDEV', 0) + saisie_variables.get('BNHDEV', 0) + saisie_variables.get('BNCDEC', 0) + saisie_variables.get('BNHDEC', 0) + saisie_variables.get('BNCDEP', 0) + saisie_variables.get('BNHDEP', 0))

    @cache_result
    def SOMDEFBASUP():
        """
        Somme def  pour art 1731bis
        """
        return (((saisie_variables.get('BACDEV', 0) + saisie_variables.get('BAHDEV', 0) + saisie_variables.get('BACDEC', 0) + saisie_variables.get('BAHDEC', 0) + saisie_variables.get('BACDEP', 0) + saisie_variables.get('BAHDEP', 0)) and (saisie_variables.get('BACDEV', 0) + saisie_variables.get('BAHDEV', 0) + saisie_variables.get('BACDEC', 0) + saisie_variables.get('BAHDEC', 0) + saisie_variables.get('BACDEP', 0) + saisie_variables.get('BAHDEP', 0)) * positif((SEUIL_IMPDEFBA + 1 - SHBA() - (REVTP() - BA1()) - (somme([GLN1(), GLN2(), GLN3()]) + max(0, (_4BAQV() + _4BAQC() + _4BAQP() + BAHQTOTMIN() + BAHQTOTMAXN())) + GLN4V() + GLN4C() + somme([PENALIMV(), PENALIMC(), PENALIM1(), PENALIM2(), PENALIM3(), PENALIM4()]) + somme([PENFV(), PENFC(), PENF1(), PENF2(), PENF3(), PENF4()]) + somme([TSNN2TSV(), TSNN2TSC(), TSNN2TS1(), TSNN2TS2(), TSNN2TS3(), TSNN2TS4()]) + somme([TSNN2REMPV(), TSNN2REMPC(), TSNN2REMP1(), TSNN2REMP2(), TSNN2REMP3(), TSNN2REMP4()]) + somme([PRR2V(), PRR2C(), PRR21(), PRR22(), PRR23(), PRR24()]) + T2RV() + _2RCM() + _3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + _2REVF() + _3REVF())))) + 0 + ((saisie_variables.get('BACDEV', 0) + saisie_variables.get('BAHDEV', 0) + saisie_variables.get('BACDEC', 0) + saisie_variables.get('BAHDEC', 0) + saisie_variables.get('BACDEP', 0) + saisie_variables.get('BAHDEP', 0) - base_variables['DEFBANIF']) and (saisie_variables.get('BACDEV', 0) + saisie_variables.get('BAHDEV', 0) + saisie_variables.get('BACDEC', 0) + saisie_variables.get('BAHDEC', 0) + saisie_variables.get('BACDEP', 0) + saisie_variables.get('BAHDEP', 0) - base_variables['DEFBANIF']) * (1 - positif((SEUIL_IMPDEFBA + 1 - SHBA() - (REVTP() - BA1()) - (somme([GLN1(), GLN2(), GLN3()]) + max(0, (_4BAQV() + _4BAQC() + _4BAQP() + BAHQTOTMIN() + BAHQTOTMAXN())) + GLN4V() + GLN4C() + somme([PENALIMV(), PENALIMC(), PENALIM1(), PENALIM2(), PENALIM3(), PENALIM4()]) + somme([PENFV(), PENFC(), PENF1(), PENF2(), PENF3(), PENF4()]) + somme([TSNN2TSV(), TSNN2TSC(), TSNN2TS1(), TSNN2TS2(), TSNN2TS3(), TSNN2TS4()]) + somme([TSNN2REMPV(), TSNN2REMPC(), TSNN2REMP1(), TSNN2REMP2(), TSNN2REMP3(), TSNN2REMP4()]) + somme([PRR2V(), PRR2C(), PRR21(), PRR22(), PRR23(), PRR24()]) + T2RV() + _2RCM() + _3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + _2REVF() + _3REVF()))) + 0)))

    @cache_result
    def SOMDEFTS():
        """
        Somme def  pour art 1731bis
        """
        return ((saisie_variables.get('FRNV', 0) and saisie_variables.get('FRNV', 0) * positif((saisie_variables.get('FRNV', 0) - _10MINSV()))) + (saisie_variables.get('FRNC', 0) and saisie_variables.get('FRNC', 0) * positif((saisie_variables.get('FRNC', 0) - _10MINSC()))) + (saisie_variables.get('FRN1', 0) and saisie_variables.get('FRN1', 0) * positif((saisie_variables.get('FRN1', 0) - _10MINS1()))) + (saisie_variables.get('FRN2', 0) and saisie_variables.get('FRN2', 0) * positif((saisie_variables.get('FRN2', 0) - _10MINS2()))) + (saisie_variables.get('FRN3', 0) and saisie_variables.get('FRN3', 0) * positif((saisie_variables.get('FRN3', 0) - _10MINS3()))) + (saisie_variables.get('FRN4', 0) and saisie_variables.get('FRN4', 0) * positif((saisie_variables.get('FRN4', 0) - _10MINS4()))))

    @cache_result
    def SOMDEFBIC():
        """
        Somme def  pour art 1731bis
        """
        return (saisie_variables.get('BICDNV', 0) + saisie_variables.get('BIHDNV', 0) + saisie_variables.get('BICDNC', 0) + saisie_variables.get('BIHDNC', 0) + saisie_variables.get('BICDNP', 0) + saisie_variables.get('BIHDNP', 0))

    @cache_result
    def SOMDEFICIT():
        """
        Somme def  pour art 1731bis
        """
        return (SOMDEFANT() + SOMDEFLOC() + SOMDEFBNC() + SOMDEFBASUP() + SOMDEFTS() + SOMDEFBIC() + saisie_variables.get('RFDHIS', 0))

    @cache_result
    def DFANTIMPU():
        """
        Deficits globaux des annees anterieures imputes
        """
        return ((1 - positif(saisie_variables.get('IPVLOC', 0))) and (1 - positif(saisie_variables.get('IPVLOC', 0))) * (((saisie_variables.get('DEFAA5', 0) + saisie_variables.get('DEFAA4', 0) + saisie_variables.get('DEFAA3', 0) + saisie_variables.get('DEFAA2', 0) + saisie_variables.get('DEFAA1', 0) + saisie_variables.get('DEFAA0', 0)) and (saisie_variables.get('DEFAA5', 0) + saisie_variables.get('DEFAA4', 0) + saisie_variables.get('DEFAA3', 0) + saisie_variables.get('DEFAA2', 0) + saisie_variables.get('DEFAA1', 0) + saisie_variables.get('DEFAA0', 0)) * (1 - positif(base_variables['ART1731BIS']))) + (max(0, min(SOMDEFICIT(), (max(base_variables['DFANTPROV1731'], max(base_variables['DFANTPROV_P'], base_variables['DFANTPROVP2'])) + SOMDEFICIT()))) and positif((base_variables['DEFRIGLOBINF'] + base_variables['DEFRIGLOBSUP'])) and max(0, min(SOMDEFICIT(), (max(base_variables['DFANTPROV1731'], max(base_variables['DFANTPROV_P'], base_variables['DFANTPROVP2'])) + SOMDEFICIT()))) * positif((base_variables['DEFRIGLOBINF'] + base_variables['DEFRIGLOBSUP'])) * (1 - base_variables['PREM8_11']))))

    @cache_result
    def RBG():
        """
        Revenu brut global
        """
        return (((((1 - positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) and (1 - positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) * min(0, (RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR() + TOTALQUO()))) + (positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR())) and positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR())) * (RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) and (((1 - positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) and (1 - positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) * min(0, (RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR() + TOTALQUO()))) + (positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR())) and positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR())) * (RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) * (1 - positif(base_variables['ART1731BIS']))) + ((1 - positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU())))) and (1 - positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU())))) * min(0, (RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU()) + TOTALQUO()))) + (positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU()))) and (RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU())) and positif((RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU()))) * (RG() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU())) * base_variables['ART1731BIS']))

    @cache_result
    def DDCSG():
        """
        Libelle CSG deductible
        """
        return ((((saisie_variables.get('V_BTCSGDED', 0) and saisie_variables.get('V_BTCSGDED', 0) * (1 - present(saisie_variables.get('DCSG', 0)))) + saisie_variables.get('DCSG', 0)) and ((saisie_variables.get('V_BTCSGDED', 0) and saisie_variables.get('V_BTCSGDED', 0) * (1 - present(saisie_variables.get('DCSG', 0)))) + saisie_variables.get('DCSG', 0)) * (1 - null((4 - saisie_variables.get('V_REGCO', 0))))) + (positif((saisie_variables.get('RCMSOC', 0) + 0)) and (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))) and (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) and positif((saisie_variables.get('RCMSOC', 0) + 0)) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))) * (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) * arr((min(saisie_variables.get('RCMSOC', 0), (saisie_variables.get('RCMABD', 0) + saisie_variables.get('REVACT', 0) + saisie_variables.get('RCMAV', 0) + saisie_variables.get('PROVIE', 0) + saisie_variables.get('RCMHAD', 0) + saisie_variables.get('DISQUO', 0) + saisie_variables.get('RCMHAB', 0) + saisie_variables.get('INTERE', 0))) and TX051 and min(saisie_variables.get('RCMSOC', 0), (saisie_variables.get('RCMABD', 0) + saisie_variables.get('REVACT', 0) + saisie_variables.get('RCMAV', 0) + saisie_variables.get('PROVIE', 0) + saisie_variables.get('RCMHAD', 0) + saisie_variables.get('DISQUO', 0) + saisie_variables.get('RCMHAB', 0) + saisie_variables.get('INTERE', 0))) * TX051 / 100))))

    @cache_result
    def RBG2():
        """
        Revenu brut global moins la CSg deductible
        """
        return (RBG() - min(RBG(), DDCSG()))

    @cache_result
    def LIMDPAE():
        """
        Deduction pour pension alimentaire etudiant
        """
        return LIM_PENSALENF

    @cache_result
    def TOTPA():
        """
        Total  PA
        """
        return (arr((saisie_variables.get('PAAV', 0) and saisie_variables.get('PAAV', 0) * MAJREV)) + saisie_variables.get('PAAP', 0))

    @cache_result
    def DPA():
        """
        Deduction pour pensions alimentaires
        """
        return ((somme([(min(saisie_variables.get('NCHENF1', 0), LIMDPAE()) + min(arr((saisie_variables.get('CHENF1', 0) and saisie_variables.get('CHENF1', 0) * MAJREV)), LIMDPAE())), (min(saisie_variables.get('NCHENF2', 0), LIMDPAE()) + min(arr((saisie_variables.get('CHENF2', 0) and saisie_variables.get('CHENF2', 0) * MAJREV)), LIMDPAE())), (min(saisie_variables.get('NCHENF3', 0), LIMDPAE()) + min(arr((saisie_variables.get('CHENF3', 0) and saisie_variables.get('CHENF3', 0) * MAJREV)), LIMDPAE())), (min(saisie_variables.get('NCHENF4', 0), LIMDPAE()) + min(arr((saisie_variables.get('CHENF4', 0) and saisie_variables.get('CHENF4', 0) * MAJREV)), LIMDPAE()))]) + TOTPA()) and (1 - V_CNR()) and (somme([(min(saisie_variables.get('NCHENF1', 0), LIMDPAE()) + min(arr((saisie_variables.get('CHENF1', 0) and saisie_variables.get('CHENF1', 0) * MAJREV)), LIMDPAE())), (min(saisie_variables.get('NCHENF2', 0), LIMDPAE()) + min(arr((saisie_variables.get('CHENF2', 0) and saisie_variables.get('CHENF2', 0) * MAJREV)), LIMDPAE())), (min(saisie_variables.get('NCHENF3', 0), LIMDPAE()) + min(arr((saisie_variables.get('CHENF3', 0) and saisie_variables.get('CHENF3', 0) * MAJREV)), LIMDPAE())), (min(saisie_variables.get('NCHENF4', 0), LIMDPAE()) + min(arr((saisie_variables.get('CHENF4', 0) and saisie_variables.get('CHENF4', 0) * MAJREV)), LIMDPAE()))]) + TOTPA()) * (1 - V_CNR()) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def RPREC():
        """
        Frais d'accueil
        """
        return ((positif(saisie_variables.get('CHRFAC', 0)) and positif(saisie_variables.get('CHRFAC', 0)) * max(1, saisie_variables.get('CHNFAC', 0))) + (null(saisie_variables.get('CHRFAC', 0)) and null(saisie_variables.get('CHRFAC', 0)) * max(0, saisie_variables.get('CHNFAC', 0))))

    @cache_result
    def DFA():
        """
        Deduction pour frais d'accueil
        """
        return (min(saisie_variables.get('CHRFAC', 0), (RPREC() and RPREC() * LIM_FRACC)) and (1 - V_CNR()) and min(saisie_variables.get('CHRFAC', 0), (RPREC() and RPREC() * LIM_FRACC)) * (1 - V_CNR()) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def DEDIV():
        """
        Deductions diverses
        """
        return ((1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) and (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) * saisie_variables.get('CHRDED', 0))

    @cache_result
    def PERP_MUT():
        """
        PERP:BOOLEEN si mutualisation
        """
        return (positif(saisie_variables.get('PERPMUTU', 0)) and positif((saisie_variables.get('V_0AM', 0) + saisie_variables.get('V_0AO', 0))) and positif(saisie_variables.get('PERPMUTU', 0)) * positif((saisie_variables.get('V_0AM', 0) + saisie_variables.get('V_0AO', 0))) * (1 - positif((saisie_variables.get('V_0AC', 0) + saisie_variables.get('V_0AD', 0) + saisie_variables.get('V_0AV', 0)))))

    @cache_result
    def PERPPLATVANT():
        """
        plafond PERP total annee N
        From PERPPLATiANT
        """
        return (((1 - positif((present(saisie_variables.get('PERPPLAFCV', 0)) + present(saisie_variables.get('PERPPLAFNUV1', 0)) + present(saisie_variables.get('PERPPLAFNUV2', 0)) + present(saisie_variables.get('PERPPLAFNUV3', 0))))) and (1 - positif((present(saisie_variables.get('PERPPLAFCV', 0)) + present(saisie_variables.get('PERPPLAFNUV1', 0)) + present(saisie_variables.get('PERPPLAFNUV2', 0)) + present(saisie_variables.get('PERPPLAFNUV3', 0))))) * saisie_variables.get('V_BTPERPTOTV', 0)) + (positif((present(saisie_variables.get('PERPPLAFCV', 0)) + present(saisie_variables.get('PERPPLAFNUV1', 0)) + present(saisie_variables.get('PERPPLAFNUV2', 0)) + present(saisie_variables.get('PERPPLAFNUV3', 0)))) and positif((present(saisie_variables.get('PERPPLAFCV', 0)) + present(saisie_variables.get('PERPPLAFNUV1', 0)) + present(saisie_variables.get('PERPPLAFNUV2', 0)) + present(saisie_variables.get('PERPPLAFNUV3', 0)))) * (saisie_variables.get('PERPPLAFCV', 0) + saisie_variables.get('PERPPLAFNUV1', 0) + saisie_variables.get('PERPPLAFNUV2', 0) + saisie_variables.get('PERPPLAFNUV3', 0))))

    @cache_result
    def PERPPLATCANT():
        """
        plafond PERP total annee N
        From PERPPLATiANT
        """
        return (((1 - positif((present(saisie_variables.get('PERPPLAFCC', 0)) + present(saisie_variables.get('PERPPLAFNUC1', 0)) + present(saisie_variables.get('PERPPLAFNUC2', 0)) + present(saisie_variables.get('PERPPLAFNUC3', 0))))) and (1 - positif((present(saisie_variables.get('PERPPLAFCC', 0)) + present(saisie_variables.get('PERPPLAFNUC1', 0)) + present(saisie_variables.get('PERPPLAFNUC2', 0)) + present(saisie_variables.get('PERPPLAFNUC3', 0))))) * saisie_variables.get('V_BTPERPTOTC', 0)) + (positif((present(saisie_variables.get('PERPPLAFCC', 0)) + present(saisie_variables.get('PERPPLAFNUC1', 0)) + present(saisie_variables.get('PERPPLAFNUC2', 0)) + present(saisie_variables.get('PERPPLAFNUC3', 0)))) and positif((present(saisie_variables.get('PERPPLAFCC', 0)) + present(saisie_variables.get('PERPPLAFNUC1', 0)) + present(saisie_variables.get('PERPPLAFNUC2', 0)) + present(saisie_variables.get('PERPPLAFNUC3', 0)))) * (saisie_variables.get('PERPPLAFCC', 0) + saisie_variables.get('PERPPLAFNUC1', 0) + saisie_variables.get('PERPPLAFNUC2', 0) + saisie_variables.get('PERPPLAFNUC3', 0))))

    @cache_result
    def PERP_INDV():
        """
        indicateur PERP vous
        From PERP_INDi
        """
        return positif((0 + positif(saisie_variables.get('TSHALLOV', 0)) + positif(saisie_variables.get('ALLOV', 0)) + positif(saisie_variables.get('GLD1V', 0)) + positif(saisie_variables.get('GLD2V', 0)) + positif(saisie_variables.get('GLD3V', 0)) + positif(saisie_variables.get('GLDGRATV', 0)) + positif(saisie_variables.get('BPCOSAV', 0)) + positif(saisie_variables.get('TSASSUV', 0)) + positif(saisie_variables.get('CARTSV', 0)) + positif(saisie_variables.get('FEXV', 0)) + positif(saisie_variables.get('BAFV', 0)) + positif(saisie_variables.get('BAFPVV', 0)) + positif(saisie_variables.get('BAEXV', 0)) + positif(saisie_variables.get('BACREV', 0)) + positif(saisie_variables.get('4BACREV', 0)) + positif((saisie_variables.get('BACDEV', 0) and saisie_variables.get('BACDEV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BAHEXV', 0)) + positif(saisie_variables.get('BAHREV', 0)) + positif(saisie_variables.get('4BAHREV', 0)) + positif((saisie_variables.get('BAHDEV', 0) and saisie_variables.get('BAHDEV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BAPERPV', 0)) + positif(saisie_variables.get('MIBEXV', 0)) + positif(saisie_variables.get('MIBVENV', 0)) + positif(saisie_variables.get('MIBPRESV', 0)) + positif(saisie_variables.get('MIBPVV', 0)) + positif(saisie_variables.get('AUTOBICVV', 0)) + positif(saisie_variables.get('AUTOBICPV', 0)) + positif(saisie_variables.get('BICEXV', 0)) + positif(saisie_variables.get('BICNOV', 0)) + positif((saisie_variables.get('BICDNV', 0) and saisie_variables.get('BICDNV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BIHEXV', 0)) + positif(saisie_variables.get('BIHNOV', 0)) + positif((saisie_variables.get('BIHDNV', 0) and saisie_variables.get('BIHDNV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BIPERPV', 0)) + positif(saisie_variables.get('LOCPROCGAV', 0)) - positif((saisie_variables.get('LOCDEFPROCGAV', 0) and saisie_variables.get('LOCDEFPROCGAV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('LOCPROV', 0)) - positif((saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNCPROEXV', 0)) + positif(saisie_variables.get('BNCPROV', 0)) + positif(saisie_variables.get('BNCPROPVV', 0)) + positif(saisie_variables.get('AUTOBNCV', 0)) + positif(saisie_variables.get('BNCEXV', 0)) + positif(saisie_variables.get('BNCREV', 0)) + positif((saisie_variables.get('BNCDEV', 0) and saisie_variables.get('BNCDEV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNHEXV', 0)) + positif(saisie_variables.get('BNHREV', 0)) + positif((saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNCCRV', 0))))

    @cache_result
    def INDREV1A8IR():
        """
        Indicateur d'existence de revenu declare du point 1 a 8 sans CRL
        """
        return positif((positif(saisie_variables.get('4BACREC', 0)) + positif(saisie_variables.get('4BACREP', 0)) + positif(saisie_variables.get('4BACREV', 0)) + positif(saisie_variables.get('4BAHREC', 0)) + positif(saisie_variables.get('4BAHREP', 0)) + positif(saisie_variables.get('4BAHREV', 0)) + positif(saisie_variables.get('ABDETPLUS', 0)) + positif(saisie_variables.get('ABDETMOINS', 0)) + positif(saisie_variables.get('ALLO1', 0)) + positif(saisie_variables.get('ALLO2', 0)) + positif(saisie_variables.get('ALLO3', 0)) + positif(saisie_variables.get('ALLO4', 0)) + positif(saisie_variables.get('ALLOC', 0)) + positif(saisie_variables.get('ALLOV', 0)) + positif(saisie_variables.get('ANOCEP', 0)) + positif(saisie_variables.get('ANOPEP', 0)) + positif(saisie_variables.get('ANOVEP', 0)) + positif(saisie_variables.get('AUTOBICPC', 0)) + positif(saisie_variables.get('AUTOBICPP', 0)) + positif(saisie_variables.get('AUTOBICPV', 0)) + positif(saisie_variables.get('AUTOBICVC', 0)) + positif(saisie_variables.get('AUTOBICVP', 0)) + positif(saisie_variables.get('AUTOBICVV', 0)) + positif(saisie_variables.get('AUTOBNCC', 0)) + positif(saisie_variables.get('AUTOBNCP', 0)) + positif(saisie_variables.get('AUTOBNCV', 0)) + positif(saisie_variables.get('BA1AC', 0)) + positif(saisie_variables.get('BA1AP', 0)) + positif(saisie_variables.get('BA1AV', 0)) + positif(saisie_variables.get('BACDEC', 0)) + positif(saisie_variables.get('BACDEP', 0)) + positif(saisie_variables.get('BACDEV', 0)) + positif(saisie_variables.get('BACREC', 0)) + positif(saisie_variables.get('BACREP', 0)) + positif(saisie_variables.get('BACREV', 0)) + positif(saisie_variables.get('BAEXC', 0)) + positif(saisie_variables.get('BAEXP', 0)) + positif(saisie_variables.get('BAEXV', 0)) + positif(saisie_variables.get('BAF1AC', 0)) + positif(saisie_variables.get('BAF1AP', 0)) + positif(saisie_variables.get('BAF1AV', 0)) + positif(saisie_variables.get('BAFC', 0)) + positif(saisie_variables.get('BAFORESTC', 0)) + positif(saisie_variables.get('BAFORESTP', 0)) + positif(saisie_variables.get('BAFORESTV', 0)) + positif(saisie_variables.get('BAFP', 0)) + positif(saisie_variables.get('BAFPVC', 0)) + positif(saisie_variables.get('BAFPVP', 0)) + positif(saisie_variables.get('BAFPVV', 0)) + positif(saisie_variables.get('BAFV', 0)) + positif(saisie_variables.get('BAHDEC', 0)) + positif(saisie_variables.get('BAHDEP', 0)) + positif(saisie_variables.get('BAHDEV', 0)) + positif(saisie_variables.get('BAHEXC', 0)) + positif(saisie_variables.get('BAHEXP', 0)) + positif(saisie_variables.get('BAHEXV', 0)) + positif(saisie_variables.get('BAHREC', 0)) + positif(saisie_variables.get('BAHREP', 0)) + positif(saisie_variables.get('BAHREV', 0)) + positif(saisie_variables.get('BAILOC98', 0)) + positif(saisie_variables.get('BAPERPC', 0)) + positif(saisie_variables.get('BAPERPP', 0)) + positif(saisie_variables.get('BAPERPV', 0)) + positif(saisie_variables.get('BI1AC', 0)) + positif(saisie_variables.get('BI1AP', 0)) + positif(saisie_variables.get('BI1AV', 0)) + positif(saisie_variables.get('BI2AC', 0)) + positif(saisie_variables.get('BI2AP', 0)) + positif(saisie_variables.get('BI2AV', 0)) + positif(saisie_variables.get('BICDEC', 0)) + positif(saisie_variables.get('BICDEP', 0)) + positif(saisie_variables.get('BICDEV', 0)) + positif(saisie_variables.get('BICDNC', 0)) + positif(saisie_variables.get('BICDNP', 0)) + positif(saisie_variables.get('BICDNV', 0)) + positif(saisie_variables.get('BICEXC', 0)) + positif(saisie_variables.get('BICEXP', 0)) + positif(saisie_variables.get('BICEXV', 0)) + positif(saisie_variables.get('BICHDEC', 0)) + positif(saisie_variables.get('BICHDEP', 0)) + positif(saisie_variables.get('BICHDEV', 0)) + positif(saisie_variables.get('BICHREC', 0)) + positif(saisie_variables.get('BICHREP', 0)) + positif(saisie_variables.get('BICHREV', 0)) + positif(saisie_variables.get('BICNOC', 0)) + positif(saisie_variables.get('BICNOP', 0)) + positif(saisie_variables.get('BICNOV', 0)) + positif(saisie_variables.get('BICNPEXC', 0)) + positif(saisie_variables.get('BICNPEXP', 0)) + positif(saisie_variables.get('BICNPEXV', 0)) + positif(saisie_variables.get('BICNPHEXC', 0)) + positif(saisie_variables.get('BICNPHEXP', 0)) + positif(saisie_variables.get('BICNPHEXV', 0)) + positif(saisie_variables.get('BICREC', 0)) + positif(saisie_variables.get('BICREP', 0)) + positif(saisie_variables.get('BICREV', 0)) + positif(saisie_variables.get('BIHDNC', 0)) + positif(saisie_variables.get('BIHDNP', 0)) + positif(saisie_variables.get('BIHDNV', 0)) + positif(saisie_variables.get('BIHEXC', 0)) + positif(saisie_variables.get('BIHEXP', 0)) + positif(saisie_variables.get('BIHEXV', 0)) + positif(saisie_variables.get('BIHNOC', 0)) + positif(saisie_variables.get('BIHNOP', 0)) + positif(saisie_variables.get('BIHNOV', 0)) + positif(saisie_variables.get('BIPERPC', 0)) + positif(saisie_variables.get('BIPERPP', 0)) + positif(saisie_variables.get('BIPERPV', 0)) + positif(saisie_variables.get('BN1AC', 0)) + positif(saisie_variables.get('BN1AP', 0)) + positif(saisie_variables.get('BN1AV', 0)) + positif(saisie_variables.get('BNCAABC', 0)) + positif(saisie_variables.get('BNCAABP', 0)) + positif(saisie_variables.get('BNCAABV', 0)) + positif(saisie_variables.get('BNCAADC', 0)) + positif(saisie_variables.get('BNCAADP', 0)) + positif(saisie_variables.get('BNCAADV', 0)) + positif(saisie_variables.get('BNCCRC', 0)) + positif(saisie_variables.get('BNCCRFC', 0)) + positif(saisie_variables.get('BNCCRFP', 0)) + positif(saisie_variables.get('BNCCRFV', 0)) + positif(saisie_variables.get('BNCCRP', 0)) + positif(saisie_variables.get('BNCCRV', 0)) + positif(saisie_variables.get('BNCDEC', 0)) + positif(saisie_variables.get('BNCDEP', 0)) + positif(saisie_variables.get('BNCDEV', 0)) + positif(saisie_variables.get('BNCEXC', 0)) + positif(saisie_variables.get('BNCEXP', 0)) + positif(saisie_variables.get('BNCEXV', 0)) + positif(saisie_variables.get('BNCNP1AC', 0)) + positif(saisie_variables.get('BNCNP1AP', 0)) + positif(saisie_variables.get('BNCNP1AV', 0)) + positif(saisie_variables.get('BNCNPC', 0)) + positif(saisie_variables.get('BNCNPDCT', 0)) + positif(saisie_variables.get('BNCNPDEC', 0)) + positif(saisie_variables.get('BNCNPDEP', 0)) + positif(saisie_variables.get('BNCNPDEV', 0)) + positif(saisie_variables.get('BNCNPP', 0)) + positif(saisie_variables.get('BNCNPPVC', 0)) + positif(saisie_variables.get('BNCNPPVP', 0)) + positif(saisie_variables.get('BNCNPPVV', 0)) + positif(saisie_variables.get('BNCNPREXAAC', 0)) + positif(saisie_variables.get('BNCNPREXAAP', 0)) + positif(saisie_variables.get('BNCNPREXAAV', 0)) + positif(saisie_variables.get('BNCNPREXC', 0)) + positif(saisie_variables.get('BNCNPREXP', 0)) + positif(saisie_variables.get('BNCNPREXV', 0)) + positif(saisie_variables.get('BNCNPV', 0)) + positif(saisie_variables.get('BNCPRO1AC', 0)) + positif(saisie_variables.get('BNCPRO1AP', 0)) + positif(saisie_variables.get('BNCPRO1AV', 0)) + positif(saisie_variables.get('BNCPROC', 0)) + positif(saisie_variables.get('BNCPMVCTV', 0)) + positif(saisie_variables.get('BNCPMVCTC', 0)) + positif(saisie_variables.get('BNCPMVCTP', 0)) + positif(saisie_variables.get('BNCPRODEC', 0)) + positif(saisie_variables.get('BNCPRODEP', 0)) + positif(saisie_variables.get('BNCPRODEV', 0)) + positif(saisie_variables.get('BNCPROEXC', 0)) + positif(saisie_variables.get('BNCPROEXP', 0)) + positif(saisie_variables.get('BNCPROEXV', 0)) + positif(saisie_variables.get('BNCPROP', 0)) + positif(saisie_variables.get('BNCPROPVC', 0)) + positif(saisie_variables.get('BNCPROPVP', 0)) + positif(saisie_variables.get('BNCPROPVV', 0)) + positif(saisie_variables.get('BNCPROV', 0)) + positif(saisie_variables.get('BNCREC', 0)) + positif(saisie_variables.get('BNCREP', 0)) + positif(saisie_variables.get('BNCREV', 0)) + positif(saisie_variables.get('BNHDEC', 0)) + positif(saisie_variables.get('BNHDEP', 0)) + positif(saisie_variables.get('BNHDEV', 0)) + positif(saisie_variables.get('BNHEXC', 0)) + positif(saisie_variables.get('BNHEXP', 0)) + positif(saisie_variables.get('BNHEXV', 0)) + positif(saisie_variables.get('BNHREC', 0)) + positif(saisie_variables.get('BNHREP', 0)) + positif(saisie_variables.get('BNHREV', 0)) + positif(saisie_variables.get('BPCOPTV', 0)) + positif(saisie_variables.get('BPCOSAC', 0)) + positif(saisie_variables.get('BPCOSAV', 0)) + positif(saisie_variables.get('BPV18V', 0)) + positif(saisie_variables.get('BPV40V', 0)) + positif(saisie_variables.get('BPVRCM', 0)) + positif(saisie_variables.get('CARPEC', 0)) + positif(saisie_variables.get('CARPENBAC', 0)) + positif(saisie_variables.get('CARPENBAV', 0)) + positif(saisie_variables.get('CARPEV', 0)) + positif(saisie_variables.get('CARPEP1', 0)) + positif(saisie_variables.get('CARPEP2', 0)) + positif(saisie_variables.get('CARPEP3', 0)) + positif(saisie_variables.get('CARPEP4', 0)) + positif(saisie_variables.get('CARPENBAP1', 0)) + positif(saisie_variables.get('CARPENBAP2', 0)) + positif(saisie_variables.get('CARPENBAP3', 0)) + positif(saisie_variables.get('CARPENBAP4', 0)) + positif(saisie_variables.get('CARTSC', 0)) + positif(saisie_variables.get('CARTSNBAC', 0)) + positif(saisie_variables.get('CARTSNBAV', 0)) + positif(saisie_variables.get('CARTSV', 0)) + positif(saisie_variables.get('CARTSP1', 0)) + positif(saisie_variables.get('CARTSP2', 0)) + positif(saisie_variables.get('CARTSP3', 0)) + positif(saisie_variables.get('CARTSP4', 0)) + positif(saisie_variables.get('CARTSNBAP1', 0)) + positif(saisie_variables.get('CARTSNBAP2', 0)) + positif(saisie_variables.get('CARTSNBAP3', 0)) + positif(saisie_variables.get('CARTSNBAP4', 0)) + positif(saisie_variables.get('REMPLAV', 0)) + positif(saisie_variables.get('REMPLAC', 0)) + positif(saisie_variables.get('REMPLAP1', 0)) + positif(saisie_variables.get('REMPLAP2', 0)) + positif(saisie_variables.get('REMPLAP3', 0)) + positif(saisie_variables.get('REMPLAP4', 0)) + positif(saisie_variables.get('REMPLANBV', 0)) + positif(saisie_variables.get('REMPLANBC', 0)) + positif(saisie_variables.get('REMPLANBP1', 0)) + positif(saisie_variables.get('REMPLANBP2', 0)) + positif(saisie_variables.get('REMPLANBP3', 0)) + positif(saisie_variables.get('REMPLANBP4', 0)) + positif(saisie_variables.get('PENSALV', 0)) + positif(saisie_variables.get('PENSALC', 0)) + positif(saisie_variables.get('PENSALP1', 0)) + positif(saisie_variables.get('PENSALP2', 0)) + positif(saisie_variables.get('PENSALP3', 0)) + positif(saisie_variables.get('PENSALP4', 0)) + positif(saisie_variables.get('PENSALNBV', 0)) + positif(saisie_variables.get('PENSALNBC', 0)) + positif(saisie_variables.get('PENSALNBP1', 0)) + positif(saisie_variables.get('PENSALNBP2', 0)) + positif(saisie_variables.get('PENSALNBP3', 0)) + positif(saisie_variables.get('PENSALNBP4', 0)) + positif(saisie_variables.get('RENTAX', 0)) + positif(saisie_variables.get('RENTAX5', 0)) + positif(saisie_variables.get('RENTAX6', 0)) + positif(saisie_variables.get('RENTAX7', 0)) + positif(saisie_variables.get('RENTAXNB', 0)) + positif(saisie_variables.get('RENTAXNB5', 0)) + positif(saisie_variables.get('RENTAXNB6', 0)) + positif(saisie_variables.get('RENTAXNB7', 0)) + positif(saisie_variables.get('REVACT', 0)) + positif(saisie_variables.get('REVPEA', 0)) + positif(saisie_variables.get('PROVIE', 0)) + positif(saisie_variables.get('DISQUO', 0)) + positif(saisie_variables.get('RESTUC', 0)) + positif(saisie_variables.get('INTERE', 0)) + positif(saisie_variables.get('REVACTNB', 0)) + positif(saisie_variables.get('REVPEANB', 0)) + positif(saisie_variables.get('PROVIENB', 0)) + positif(saisie_variables.get('DISQUONB', 0)) + positif(saisie_variables.get('RESTUCNB', 0)) + positif(saisie_variables.get('INTERENB', 0)) + positif(saisie_variables.get('CESSASSC', 0)) + positif(saisie_variables.get('CESSASSV', 0)) + positif(saisie_variables.get('COTF1', 0)) + positif(saisie_variables.get('COTF2', 0)) + positif(saisie_variables.get('COTF3', 0)) + positif(saisie_variables.get('COTF4', 0)) + positif(saisie_variables.get('COTFC', 0)) + positif(saisie_variables.get('COTFV', 0)) + positif(saisie_variables.get('DABNCNP1', 0)) + positif(saisie_variables.get('DABNCNP2', 0)) + positif(saisie_variables.get('DABNCNP3', 0)) + positif(saisie_variables.get('DABNCNP4', 0)) + positif(saisie_variables.get('DABNCNP5', 0)) + positif(saisie_variables.get('DABNCNP6', 0)) + positif(saisie_variables.get('DAGRI1', 0)) + positif(saisie_variables.get('DAGRI2', 0)) + positif(saisie_variables.get('DAGRI3', 0)) + positif(saisie_variables.get('DAGRI4', 0)) + positif(saisie_variables.get('DAGRI5', 0)) + positif(saisie_variables.get('DAGRI6', 0)) + positif(saisie_variables.get('DEFBIC1', 0)) + positif(saisie_variables.get('DEFBIC2', 0)) + positif(saisie_variables.get('DEFBIC3', 0)) + positif(saisie_variables.get('DEFBIC4', 0)) + positif(saisie_variables.get('DEFBIC5', 0)) + positif(saisie_variables.get('DEFBIC6', 0)) + positif(saisie_variables.get('DETS1', 0)) + positif(saisie_variables.get('DETS2', 0)) + positif(saisie_variables.get('DETS3', 0)) + positif(saisie_variables.get('DETS4', 0)) + positif(saisie_variables.get('DETSC', 0)) + positif(saisie_variables.get('DETSV', 0)) + positif(saisie_variables.get('DIREPARGNE', 0)) + positif(saisie_variables.get('DNOCEP', 0)) + positif(saisie_variables.get('DNOCEPC', 0)) + positif(saisie_variables.get('DNOCEPP', 0)) + positif(saisie_variables.get('DPVRCM', 0)) + positif(saisie_variables.get('FEXC', 0)) + positif(saisie_variables.get('FEXP', 0)) + positif(saisie_variables.get('FEXV', 0)) + positif(saisie_variables.get('FRN1', 0)) + positif(saisie_variables.get('FRN2', 0)) + positif(saisie_variables.get('FRN3', 0)) + positif(saisie_variables.get('FRN4', 0)) + positif(saisie_variables.get('FRNC', 0)) + positif(saisie_variables.get('FRNV', 0)) + positif(saisie_variables.get('GAINABDET', 0)) + positif(saisie_variables.get('GLDGRATV', 0)) + positif(saisie_variables.get('GLDGRATC', 0)) + positif(saisie_variables.get('GLD1C', 0)) + positif(saisie_variables.get('GLD1V', 0)) + positif(saisie_variables.get('GLD2C', 0)) + positif(saisie_variables.get('GLD2V', 0)) + positif(saisie_variables.get('GLD3C', 0)) + positif(saisie_variables.get('GLD3V', 0)) + positif(saisie_variables.get('LOCDEFNPC', 0)) + positif(saisie_variables.get('LOCDEFNPCGAC', 0)) + positif(saisie_variables.get('LOCDEFNPCGAPAC', 0)) + positif(saisie_variables.get('LOCDEFNPCGAV', 0)) + positif(saisie_variables.get('LOCDEFNPPAC', 0)) + positif(saisie_variables.get('LOCDEFNPV', 0)) + positif(saisie_variables.get('LOCDEFPROC', 0)) + positif(saisie_variables.get('LOCDEFPROCGAC', 0)) + positif(saisie_variables.get('LOCDEFPROCGAP', 0)) + positif(saisie_variables.get('LOCDEFPROCGAV', 0)) + positif(saisie_variables.get('LOCDEFPROP', 0)) + positif(saisie_variables.get('LOCDEFPROV', 0)) + positif(saisie_variables.get('LOCNPC', 0)) + positif(saisie_variables.get('LOCNPCGAC', 0)) + positif(saisie_variables.get('LOCNPCGAPAC', 0)) + positif(saisie_variables.get('LOCNPCGAV', 0)) + positif(saisie_variables.get('LOCNPPAC', 0)) + positif(saisie_variables.get('LOCNPV', 0)) + positif(saisie_variables.get('LOCPROC', 0)) + positif(saisie_variables.get('LOCPROCGAC', 0)) + positif(saisie_variables.get('LOCPROCGAP', 0)) + positif(saisie_variables.get('LOCPROCGAV', 0)) + positif(saisie_variables.get('LOCPROP', 0)) + positif(saisie_variables.get('LOCPROV', 0)) + positif(saisie_variables.get('LOYIMP', 0)) + positif(saisie_variables.get('MIB1AC', 0)) + positif(saisie_variables.get('MIB1AP', 0)) + positif(saisie_variables.get('MIB1AV', 0)) + positif(saisie_variables.get('BICPMVCTV', 0)) + positif(saisie_variables.get('BICPMVCTC', 0)) + positif(saisie_variables.get('BICPMVCTP', 0)) + positif(saisie_variables.get('MIBDEC', 0)) + positif(saisie_variables.get('MIBDEP', 0)) + positif(saisie_variables.get('MIBDEV', 0)) + positif(saisie_variables.get('MIBEXC', 0)) + positif(saisie_variables.get('MIBEXP', 0)) + positif(saisie_variables.get('MIBEXV', 0)) + positif(saisie_variables.get('MIBNP1AC', 0)) + positif(saisie_variables.get('MIBNP1AP', 0)) + positif(saisie_variables.get('MIBNP1AV', 0)) + positif(saisie_variables.get('MIBNPDCT', 0)) + positif(saisie_variables.get('MIBNPDEC', 0)) + positif(saisie_variables.get('MIBNPDEP', 0)) + positif(saisie_variables.get('MIBNPDEV', 0)) + positif(saisie_variables.get('MIBNPEXC', 0)) + positif(saisie_variables.get('MIBNPEXP', 0)) + positif(saisie_variables.get('MIBNPEXV', 0)) + positif(saisie_variables.get('MIBNPPRESC', 0)) + positif(saisie_variables.get('MIBNPPRESP', 0)) + positif(saisie_variables.get('MIBNPPRESV', 0)) + positif(saisie_variables.get('MIBNPPVC', 0)) + positif(saisie_variables.get('MIBNPPVP', 0)) + positif(saisie_variables.get('MIBNPPVV', 0)) + positif(saisie_variables.get('MIBNPVENC', 0)) + positif(saisie_variables.get('MIBNPVENP', 0)) + positif(saisie_variables.get('MIBNPVENV', 0)) + positif(saisie_variables.get('MIBPRESC', 0)) + positif(saisie_variables.get('MIBPRESP', 0)) + positif(saisie_variables.get('MIBPRESV', 0)) + positif(saisie_variables.get('MIBPVC', 0)) + positif(saisie_variables.get('MIBPVP', 0)) + positif(saisie_variables.get('MIBPVV', 0)) + positif(saisie_variables.get('MIBVENC', 0)) + positif(saisie_variables.get('MIBVENP', 0)) + positif(saisie_variables.get('MIBVENV', 0)) + positif(saisie_variables.get('PALI1', 0)) + positif(saisie_variables.get('PALI2', 0)) + positif(saisie_variables.get('PALI3', 0)) + positif(saisie_variables.get('PALI4', 0)) + positif(saisie_variables.get('PALIC', 0)) + positif(saisie_variables.get('PALIV', 0)) + positif(saisie_variables.get('PEA', 0)) + positif(saisie_variables.get('PEBF1', 0)) + positif(saisie_variables.get('PEBF2', 0)) + positif(saisie_variables.get('PEBF3', 0)) + positif(saisie_variables.get('PEBF4', 0)) + positif(saisie_variables.get('PEBFC', 0)) + positif(saisie_variables.get('PEBFV', 0)) + positif(saisie_variables.get('PPEACC', 0)) + positif(saisie_variables.get('PPEACP', 0)) + positif(saisie_variables.get('PPEACV', 0)) + positif(saisie_variables.get('PPENHC', 0)) + positif(saisie_variables.get('PPENHP1', 0)) + positif(saisie_variables.get('PPENHP2', 0)) + positif(saisie_variables.get('PPENHP3', 0)) + positif(saisie_variables.get('PPENHP4', 0)) + positif(saisie_variables.get('PPENHV', 0)) + positif(saisie_variables.get('PPENJC', 0)) + positif(saisie_variables.get('PPENJP', 0)) + positif(saisie_variables.get('PPENJV', 0)) + positif(saisie_variables.get('PPETPC', 0)) + positif(saisie_variables.get('PPETPP1', 0)) + positif(saisie_variables.get('PPETPP2', 0)) + positif(saisie_variables.get('PPETPP3', 0)) + positif(saisie_variables.get('PPETPP4', 0)) + positif(saisie_variables.get('PPETPV', 0)) + positif(saisie_variables.get('PPLIB', 0)) + positif(saisie_variables.get('PRBR1', 0)) + positif(saisie_variables.get('PRBR2', 0)) + positif(saisie_variables.get('PRBR3', 0)) + positif(saisie_variables.get('PRBR4', 0)) + positif(saisie_variables.get('PRBRC', 0)) + positif(saisie_variables.get('PRBRV', 0)) + positif(saisie_variables.get('PVINCE', 0)) + positif(saisie_variables.get('PVINPE', 0)) + positif(saisie_variables.get('PVINVE', 0)) + positif(saisie_variables.get('PVREP8', 0)) + positif(saisie_variables.get('PVSOCC', 0)) + positif(saisie_variables.get('PVSOCV', 0)) + positif(saisie_variables.get('RCMABD', 0)) + positif(saisie_variables.get('RCMAV', 0)) + positif(saisie_variables.get('RCMAVFT', 0)) + positif(saisie_variables.get('RCMFR', 0)) + positif(saisie_variables.get('RCMHAB', 0)) + positif(saisie_variables.get('RCMHAD', 0)) + positif(saisie_variables.get('RCMLIB', 0)) + positif(saisie_variables.get('RCMRDS', 0)) + positif(saisie_variables.get('RCMSOC', 0)) + positif(saisie_variables.get('RCMTNC', 0)) + positif(saisie_variables.get('RCSC', 0)) + positif(saisie_variables.get('RCSP', 0)) + positif(saisie_variables.get('RCSV', 0)) + positif(saisie_variables.get('REGPRIV', 0)) + positif(saisie_variables.get('RFDANT', 0)) + positif(saisie_variables.get('RFDHIS', 0)) + positif(saisie_variables.get('RFDORD', 0)) + positif(saisie_variables.get('RFMIC', 0)) + positif(saisie_variables.get('RFORDI', 0)) + positif(saisie_variables.get('RFROBOR', 0)) + positif(saisie_variables.get('RSAFOYER', 0)) + positif(saisie_variables.get('RSAPAC1', 0)) + positif(saisie_variables.get('RSAPAC2', 0)) + positif(saisie_variables.get('RVB1', 0)) + positif(saisie_variables.get('RVB2', 0)) + positif(saisie_variables.get('RVB3', 0)) + positif(saisie_variables.get('RVB4', 0)) + positif(saisie_variables.get('TSASSUC', 0)) + positif(saisie_variables.get('TSASSUV', 0)) + positif(saisie_variables.get('TSHALLO1', 0)) + positif(saisie_variables.get('TSHALLO2', 0)) + positif(saisie_variables.get('TSHALLO3', 0)) + positif(saisie_variables.get('TSHALLO4', 0)) + positif(saisie_variables.get('TSHALLOC', 0)) + positif(saisie_variables.get('TSHALLOV', 0)) + positif(saisie_variables.get('XETRANC', 0)) + positif(saisie_variables.get('XETRANV', 0)) + positif(saisie_variables.get('XHONOAAC', 0)) + positif(saisie_variables.get('XHONOAAP', 0)) + positif(saisie_variables.get('XHONOAAV', 0)) + positif(saisie_variables.get('XHONOC', 0)) + positif(saisie_variables.get('XHONOP', 0)) + positif(saisie_variables.get('XHONOV', 0)) + positif(saisie_variables.get('XSPENPC', 0)) + positif(saisie_variables.get('XSPENPP', 0)) + positif(saisie_variables.get('XSPENPV', 0)) + positif(saisie_variables.get('GSALV', 0)) + positif(saisie_variables.get('GSALC', 0)) + positif(saisie_variables.get('LNPRODEF1', 0)) + positif(saisie_variables.get('LNPRODEF2', 0)) + positif(saisie_variables.get('LNPRODEF3', 0)) + positif(saisie_variables.get('LNPRODEF4', 0)) + positif(saisie_variables.get('LNPRODEF5', 0)) + positif(saisie_variables.get('LNPRODEF6', 0)) + positif(saisie_variables.get('LNPRODEF7', 0)) + positif(saisie_variables.get('LNPRODEF8', 0)) + positif(saisie_variables.get('LNPRODEF9', 0)) + positif(saisie_variables.get('LNPRODEF10', 0)) + positif(saisie_variables.get('FONCI', 0)) + positif(saisie_variables.get('REAMOR', 0)) + positif(saisie_variables.get('FONCINB', 0)) + positif(saisie_variables.get('REAMORNB', 0)) + positif(saisie_variables.get('MIBMEUV', 0)) + positif(saisie_variables.get('MIBMEUC', 0)) + positif(saisie_variables.get('MIBMEUP', 0)) + positif(saisie_variables.get('MIBGITEV', 0)) + positif(saisie_variables.get('MIBGITEC', 0)) + positif(saisie_variables.get('MIBGITEP', 0)) + positif(saisie_variables.get('PCAPTAXV', 0)) + positif(saisie_variables.get('PCAPTAXC', 0)) + positif(saisie_variables.get('PVIMMO', 0)) + positif(saisie_variables.get('PVSURSI', 0)) + positif(saisie_variables.get('PVIMPOS', 0)) + positif(saisie_variables.get('BANOCGAV', 0)) + positif(saisie_variables.get('BANOCGAC', 0)) + positif(saisie_variables.get('BANOCGAP', 0)) + positif(saisie_variables.get('INVENTV', 0)) + positif(saisie_variables.get('INVENTC', 0)) + positif(saisie_variables.get('INVENTP', 0)) + positif(saisie_variables.get('LOCGITV', 0)) + positif(saisie_variables.get('LOCGITC', 0)) + positif(saisie_variables.get('LOCGITP', 0)) + positif(saisie_variables.get('LOCGITCV', 0)) + positif(saisie_variables.get('LOCGITCC', 0)) + positif(saisie_variables.get('LOCGITCP', 0)) + positif(saisie_variables.get('LOCGITHCV', 0)) + positif(saisie_variables.get('LOCGITHCC', 0)) + positif(saisie_variables.get('LOCGITHCP', 0)) + positif(saisie_variables.get('PVTAXSB', 0)) + positif(saisie_variables.get('BPV18C', 0)) + positif(saisie_variables.get('PVMOBNR', 0)) + positif(saisie_variables.get('BPV40C', 0)) + positif(saisie_variables.get('BPCOPTC', 0)) + positif(saisie_variables.get('BPVSJ', 0)) + positif(saisie_variables.get('BPVSK', 0)) + positif(saisie_variables.get('CVNSALAC', 0)) + positif(saisie_variables.get('CVNSALAV', 0)) + positif(saisie_variables.get('GAINPEA', 0)) + positif(saisie_variables.get('PVEXOSEC', 0)) + positif(saisie_variables.get('ABPVNOSURSIS', 0)) + positif(saisie_variables.get('PVREPORT', 0)) + positif(saisie_variables.get('LOYELEV', 0)) + positif(saisie_variables.get('SALEXTV', 0)) + positif(saisie_variables.get('SALEXTC', 0)) + positif(saisie_variables.get('SALEXT1', 0)) + positif(saisie_variables.get('SALEXT2', 0)) + positif(saisie_variables.get('SALEXT3', 0)) + positif(saisie_variables.get('SALEXT4', 0)) + positif(saisie_variables.get('CODDAJ', 0)) + positif(saisie_variables.get('CODEAJ', 0)) + positif(saisie_variables.get('CODDBJ', 0)) + positif(saisie_variables.get('CODEBJ', 0)) + positif(saisie_variables.get('COD1AD', 0)) + positif(saisie_variables.get('COD1BD', 0)) + positif(saisie_variables.get('COD1CD', 0)) + positif(saisie_variables.get('COD1DD', 0)) + positif(saisie_variables.get('COD1ED', 0)) + positif(saisie_variables.get('COD1FD', 0)) + positif(saisie_variables.get('COD1AE', 0)) + positif(saisie_variables.get('COD1BE', 0)) + positif(saisie_variables.get('COD1CE', 0)) + positif(saisie_variables.get('COD1DE', 0)) + positif(saisie_variables.get('COD1EE', 0)) + positif(saisie_variables.get('COD1FE', 0)) + positif(saisie_variables.get('PPEXTV', 0)) + positif(saisie_variables.get('PPEXTC', 0)) + positif(saisie_variables.get('PPEXT1', 0)) + positif(saisie_variables.get('PPEXT2', 0)) + positif(saisie_variables.get('PPEXT3', 0)) + positif(saisie_variables.get('PPEXT4', 0)) + positif(saisie_variables.get('COD1AH', 0)) + positif(saisie_variables.get('COD1BH', 0)) + positif(saisie_variables.get('COD1CH', 0)) + positif(saisie_variables.get('COD1DH', 0)) + positif(saisie_variables.get('COD1EH', 0)) + positif(saisie_variables.get('COD1FH', 0)) + positif(saisie_variables.get('COD2CK', 0)) + positif(saisie_variables.get('COD2FA', 0)) + positif(saisie_variables.get('COD3SG', 0)) + positif(saisie_variables.get('COD3SH', 0)) + positif(saisie_variables.get('COD3SL', 0)) + positif(saisie_variables.get('COD3SM', 0)) + positif(saisie_variables.get('COD3VE', 0)) + positif(saisie_variables.get('PVTITRESOC', 0)) + positif(saisie_variables.get('PENIN1', 0)) + positif(saisie_variables.get('PENIN2', 0)) + positif(saisie_variables.get('PENIN3', 0)) + positif(saisie_variables.get('PENIN4', 0)) + positif(saisie_variables.get('PENINC', 0)) + positif(saisie_variables.get('PENINV', 0)) + positif(saisie_variables.get('CODNAZ', 0)) + positif(saisie_variables.get('CODNBZ', 0)) + positif(saisie_variables.get('CODNCZ', 0)) + positif(saisie_variables.get('CODNDZ', 0)) + positif(saisie_variables.get('CODNEZ', 0)) + positif(saisie_variables.get('CODNFZ', 0)) + positif(saisie_variables.get('CODRAZ', 0)) + positif(saisie_variables.get('CODRBZ', 0)) + positif(saisie_variables.get('CODRCZ', 0)) + positif(saisie_variables.get('CODRDZ', 0)) + positif(saisie_variables.get('CODREZ', 0)) + positif(saisie_variables.get('CODRFZ', 0)) + positif(saisie_variables.get('COD2LA', 0)) + positif(saisie_variables.get('COD2LB', 0)) + positif(saisie_variables.get('COD3UA', 0)) + positif(saisie_variables.get('COD3UL', 0)) + positif(saisie_variables.get('COD3UV', 0)) + positif(saisie_variables.get('COD3WM', 0)) + positif(saisie_variables.get('CODNVG', 0)) + positif(saisie_variables.get('CODRVG', 0)) + present(saisie_variables.get('ANNUL2042', 0)) + present(saisie_variables.get('ASCAPA', 0)) + present(saisie_variables.get('AUTOVERSLIB', 0)) + present(saisie_variables.get('BRAS', 0)) + present(saisie_variables.get('BULLRET', 0)) + present(saisie_variables.get('CASEPRETUD', 0)) + present(saisie_variables.get('CELLIERHK', 0)) + present(saisie_variables.get('CELLIERHJ', 0)) + present(saisie_variables.get('CELLIERHL', 0)) + present(saisie_variables.get('CELLIERHM', 0)) + present(saisie_variables.get('CELLIERHN', 0)) + present(saisie_variables.get('CELLIERHO', 0)) + present(saisie_variables.get('CELLIERNA', 0)) + present(saisie_variables.get('CELLIERNB', 0)) + present(saisie_variables.get('CELLIERNC', 0)) + present(saisie_variables.get('CELLIERND', 0)) + present(saisie_variables.get('CELLIERNE', 0)) + present(saisie_variables.get('CELLIERNF', 0)) + present(saisie_variables.get('CELLIERNG', 0)) + present(saisie_variables.get('CELLIERNH', 0)) + present(saisie_variables.get('CELLIERNI', 0)) + present(saisie_variables.get('CELLIERNJ', 0)) + present(saisie_variables.get('CELLIERNK', 0)) + present(saisie_variables.get('CELLIERNL', 0)) + present(saisie_variables.get('CELLIERNM', 0)) + present(saisie_variables.get('CELLIERNN', 0)) + present(saisie_variables.get('CELLIERNO', 0)) + present(saisie_variables.get('CELLIERNP', 0)) + present(saisie_variables.get('CELLIERNQ', 0)) + present(saisie_variables.get('CELLIERNR', 0)) + present(saisie_variables.get('CELLIERNS', 0)) + present(saisie_variables.get('CELLIERNT', 0)) + present(saisie_variables.get('CELLIERJA', 0)) + present(saisie_variables.get('CELLIERJB', 0)) + present(saisie_variables.get('CELLIERJD', 0)) + present(saisie_variables.get('CELLIERJE', 0)) + present(saisie_variables.get('CELLIERJF', 0)) + present(saisie_variables.get('CELLIERJG', 0)) + present(saisie_variables.get('CELLIERJH', 0)) + present(saisie_variables.get('CELLIERJJ', 0)) + present(saisie_variables.get('CELLIERJK', 0)) + present(saisie_variables.get('CELLIERJL', 0)) + present(saisie_variables.get('CELLIERJM', 0)) + present(saisie_variables.get('CELLIERJN', 0)) + present(saisie_variables.get('CELLIERJO', 0)) + present(saisie_variables.get('CELLIERJP', 0)) + present(saisie_variables.get('CELLIERJQ', 0)) + present(saisie_variables.get('CELLIERJR', 0)) + present(saisie_variables.get('CELLIERFA', 0)) + present(saisie_variables.get('CELLIERFB', 0)) + present(saisie_variables.get('CELLIERFC', 0)) + present(saisie_variables.get('CELLIERFD', 0)) + present(saisie_variables.get('DUFLOGH', 0)) + present(saisie_variables.get('DUFLOGI', 0)) + present(saisie_variables.get('CELREPGJ', 0)) + present(saisie_variables.get('CELREPGK', 0)) + present(saisie_variables.get('CELREPGL', 0)) + present(saisie_variables.get('CELREPGP', 0)) + present(saisie_variables.get('CELREPGS', 0)) + present(saisie_variables.get('CELREPGT', 0)) + present(saisie_variables.get('CELREPGU', 0)) + present(saisie_variables.get('CELREPGV', 0)) + present(saisie_variables.get('CELREPGW', 0)) + present(saisie_variables.get('CELREPGX', 0)) + present(saisie_variables.get('CELREPHR', 0)) + present(saisie_variables.get('CELREPHS', 0)) + present(saisie_variables.get('CHENF1', 0)) + present(saisie_variables.get('CELREPHT', 0)) + present(saisie_variables.get('CELREPHU', 0)) + present(saisie_variables.get('CELREPHV', 0)) + present(saisie_variables.get('CELREPHW', 0)) + present(saisie_variables.get('CELREPHX', 0)) + present(saisie_variables.get('CELREPHZ', 0)) + present(saisie_variables.get('CELREPHA', 0)) + present(saisie_variables.get('CELREPHB', 0)) + present(saisie_variables.get('CELREPHD', 0)) + present(saisie_variables.get('CELREPHE', 0)) + present(saisie_variables.get('CELREPHF', 0)) + present(saisie_variables.get('CELREPHG', 0)) + present(saisie_variables.get('CELREPHH', 0)) + present(saisie_variables.get('INVNPROF1', 0)) + present(saisie_variables.get('VIEUMEUB', 0)) + present(saisie_variables.get('INVREPMEU', 0)) + present(saisie_variables.get('INVREPNPRO', 0)) + present(saisie_variables.get('INVNPROREP', 0)) + present(saisie_variables.get('INVREDMEU', 0)) + present(saisie_variables.get('REDREPNPRO', 0)) + present(saisie_variables.get('INVNPROF2', 0)) + present(saisie_variables.get('RESIVIANT', 0)) + present(saisie_variables.get('CHENF2', 0)) + present(saisie_variables.get('CHENF3', 0)) + present(saisie_variables.get('CHENF4', 0)) + present(saisie_variables.get('CHNFAC', 0)) + present(saisie_variables.get('CHRDED', 0)) + present(saisie_variables.get('CHRFAC', 0)) + present(saisie_variables.get('CIAQCUL', 0)) + present(saisie_variables.get('CIBOIBAIL', 0)) + present(saisie_variables.get('CIIMPPRO', 0)) + present(saisie_variables.get('CIIMPPRO2', 0)) + present(saisie_variables.get('CIINVCORSE', 0)) + present(saisie_variables.get('CINE1', 0)) + present(saisie_variables.get('CINE2', 0)) + present(saisie_variables.get('CINRJBAIL', 0)) + present(saisie_variables.get('CIDEP15', 0)) + present(saisie_variables.get('CO35', 0)) + present(saisie_variables.get('RISKTEC', 0)) + present(saisie_variables.get('CINRJ', 0)) + present(saisie_variables.get('CRDSIM', 0)) + present(saisie_variables.get('CREAGRIBIO', 0)) + present(saisie_variables.get('CREAIDE', 0)) + present(saisie_variables.get('CREAPP', 0)) + present(saisie_variables.get('CREARTS', 0)) + present(saisie_variables.get('CRECHOBOI', 0)) + present(saisie_variables.get('CRECONGAGRI', 0)) + present(saisie_variables.get('CREDPVREP', 0)) + present(saisie_variables.get('CREFAM', 0)) + present(saisie_variables.get('CREFORMCHENT', 0)) + present(saisie_variables.get('CREINTERESSE', 0)) + present(saisie_variables.get('CREPROSP', 0)) + present(saisie_variables.get('CRERESTAU', 0)) + present(saisie_variables.get('CRIGA', 0)) + present(saisie_variables.get('CRENRJ', 0)) + present(saisie_variables.get('COD8YT', 0)) + present(saisie_variables.get('CDISPROV', 0)) + present(saisie_variables.get('CSGIM', 0)) + present(saisie_variables.get('COD8YL', 0)) + present(saisie_variables.get('DCSG', 0)) + present(saisie_variables.get('DCSGIM', 0)) + present(saisie_variables.get('DEFAA0', 0)) + present(saisie_variables.get('DEFAA1', 0)) + present(saisie_variables.get('DEFAA2', 0)) + present(saisie_variables.get('DEFAA3', 0)) + present(saisie_variables.get('DEFAA4', 0)) + present(saisie_variables.get('DEFAA5', 0)) + present(saisie_variables.get('DEPCHOBAS', 0)) + present(saisie_variables.get('DEPMOBIL', 0)) + present(saisie_variables.get('DMOND', 0)) + present(saisie_variables.get('ELURASC', 0)) + present(saisie_variables.get('ELURASV', 0)) + present(saisie_variables.get('ESFP', 0)) + present(saisie_variables.get('FCPI', 0)) + present(saisie_variables.get('FFIP', 0)) + present(saisie_variables.get('FIPCORSE', 0)) + present(saisie_variables.get('FORET', 0)) + present(saisie_variables.get('INAIDE', 0)) + present(saisie_variables.get('INTDIFAGRI', 0)) + present(saisie_variables.get('INVDIR2009', 0)) + present(saisie_variables.get('INVDOMRET50', 0)) + present(saisie_variables.get('INVDOMRET60', 0)) + present(saisie_variables.get('INVLGDEB2009', 0)) + present(saisie_variables.get('INVLOCHOTR', 0)) + present(saisie_variables.get('INVLOCXN', 0)) + present(saisie_variables.get('INVLOCXV', 0)) + present(saisie_variables.get('COD7UY', 0)) + present(saisie_variables.get('COD7UZ', 0)) + present(saisie_variables.get('INVLOG2008', 0)) + present(saisie_variables.get('INVLOG2009', 0)) + present(saisie_variables.get('INVLOGSOC', 0)) + present(saisie_variables.get('INVLGAUTRE', 0)) + present(saisie_variables.get('INVLGDEB2010', 0)) + present(saisie_variables.get('INVSOC2010', 0)) + present(saisie_variables.get('INVRETRO1', 0)) + present(saisie_variables.get('INVRETRO2', 0)) + present(saisie_variables.get('INVIMP', 0)) + present(saisie_variables.get('INVLGDEB', 0)) + present(saisie_variables.get('INVENDEB2009', 0)) + present(saisie_variables.get('PATNAT1', 0)) + present(saisie_variables.get('PATNAT2', 0)) + present(saisie_variables.get('PATNAT3', 0)) + present(saisie_variables.get('INVSOCNRET', 0)) + present(saisie_variables.get('INVENDI', 0)) + present(saisie_variables.get('CELRREDLA', 0)) + present(saisie_variables.get('CELRREDLB', 0)) + present(saisie_variables.get('CELRREDLC', 0)) + present(saisie_variables.get('CELRREDLD', 0)) + present(saisie_variables.get('CELRREDLE', 0)) + present(saisie_variables.get('CELRREDLF', 0)) + present(saisie_variables.get('CELRREDLM', 0)) + present(saisie_variables.get('CELRREDLS', 0)) + present(saisie_variables.get('CELRREDLZ', 0)) + present(saisie_variables.get('CELRREDMG', 0)) + present(saisie_variables.get('NRETROC50', 0)) + present(saisie_variables.get('NRETROC40', 0)) + present(saisie_variables.get('INVOMREP', 0)) + present(saisie_variables.get('RETROCOMMB', 0)) + present(saisie_variables.get('RETROCOMMC', 0)) + present(saisie_variables.get('RETROCOMLH', 0)) + present(saisie_variables.get('RETROCOMLI', 0)) + present(saisie_variables.get('INVOMSOCQU', 0)) + present(saisie_variables.get('INVOMQV', 0)) + present(saisie_variables.get('INVOMSOCKH', 0)) + present(saisie_variables.get('INVOMSOCKI', 0)) + present(saisie_variables.get('INVOMSOCQJ', 0)) + present(saisie_variables.get('INVOMSOCQS', 0)) + present(saisie_variables.get('INVOMSOCQW', 0)) + present(saisie_variables.get('INVOMSOCQX', 0)) + present(saisie_variables.get('INVOMENTRG', 0)) + present(saisie_variables.get('INVOMENTRI', 0)) + present(saisie_variables.get('INVOMENTRJ', 0)) + present(saisie_variables.get('INVOMENTRK', 0)) + present(saisie_variables.get('INVOMENTRL', 0)) + present(saisie_variables.get('INVOMENTRM', 0)) + present(saisie_variables.get('INVOMENTRO', 0)) + present(saisie_variables.get('INVOMENTRP', 0)) + present(saisie_variables.get('INVOMENTRQ', 0)) + present(saisie_variables.get('INVOMENTRR', 0)) + present(saisie_variables.get('INVOMENTRT', 0)) + present(saisie_variables.get('INVOMENTRU', 0)) + present(saisie_variables.get('INVOMENTRV', 0)) + present(saisie_variables.get('INVOMENTRW', 0)) + present(saisie_variables.get('INVOMENTRY', 0)) + present(saisie_variables.get('INVOMENTKT', 0)) + present(saisie_variables.get('INVOMENTKU', 0)) + present(saisie_variables.get('INVOMENTMN', 0)) + present(saisie_variables.get('INVOMENTNU', 0)) + present(saisie_variables.get('INVOMENTNV', 0)) + present(saisie_variables.get('INVOMENTNW', 0)) + present(saisie_variables.get('INVOMENTNY', 0)) + present(saisie_variables.get('INVOMRETPA', 0)) + present(saisie_variables.get('INVOMRETPB', 0)) + present(saisie_variables.get('INVOMRETPD', 0)) + present(saisie_variables.get('INVOMRETPE', 0)) + present(saisie_variables.get('INVOMRETPF', 0)) + present(saisie_variables.get('INVOMRETPH', 0)) + present(saisie_variables.get('INVOMRETPI', 0)) + present(saisie_variables.get('INVOMRETPJ', 0)) + present(saisie_variables.get('INVOMRETPL', 0)) + present(saisie_variables.get('INVOMRETPM', 0)) + present(saisie_variables.get('INVOMRETPN', 0)) + present(saisie_variables.get('INVOMRETPO', 0)) + present(saisie_variables.get('INVOMRETPP', 0)) + present(saisie_variables.get('INVOMRETPR', 0)) + present(saisie_variables.get('INVOMRETPS', 0)) + present(saisie_variables.get('INVOMRETPT', 0)) + present(saisie_variables.get('INVOMRETPU', 0)) + present(saisie_variables.get('INVOMRETPW', 0)) + present(saisie_variables.get('INVOMRETPX', 0)) + present(saisie_variables.get('INVOMRETPY', 0)) + present(saisie_variables.get('INVOMLOGOA', 0)) + present(saisie_variables.get('INVOMLOGOB', 0)) + present(saisie_variables.get('INVOMLOGOC', 0)) + present(saisie_variables.get('INVOMLOGOH', 0)) + present(saisie_variables.get('INVOMLOGOI', 0)) + present(saisie_variables.get('INVOMLOGOJ', 0)) + present(saisie_variables.get('INVOMLOGOK', 0)) + present(saisie_variables.get('INVOMLOGOL', 0)) + present(saisie_variables.get('INVOMLOGOM', 0)) + present(saisie_variables.get('INVOMLOGON', 0)) + present(saisie_variables.get('INVOMLOGOO', 0)) + present(saisie_variables.get('INVOMLOGOP', 0)) + present(saisie_variables.get('INVOMLOGOQ', 0)) + present(saisie_variables.get('INVOMLOGOR', 0)) + present(saisie_variables.get('INVOMLOGOS', 0)) + present(saisie_variables.get('INVOMLOGOT', 0)) + present(saisie_variables.get('INVOMLOGOU', 0)) + present(saisie_variables.get('INVOMLOGOV', 0)) + present(saisie_variables.get('INVOMLOGOW', 0)) + present(saisie_variables.get('CODHOD', 0)) + present(saisie_variables.get('CODHOE', 0)) + present(saisie_variables.get('CODHOF', 0)) + present(saisie_variables.get('CODHOG', 0)) + present(saisie_variables.get('CODHOX', 0)) + present(saisie_variables.get('CODHOY', 0)) + present(saisie_variables.get('CODHOZ', 0)) + present(saisie_variables.get('CODHRA', 0)) + present(saisie_variables.get('CODHRB', 0)) + present(saisie_variables.get('CODHRC', 0)) + present(saisie_variables.get('CODHRD', 0)) + present(saisie_variables.get('CODHSA', 0)) + present(saisie_variables.get('CODHSB', 0)) + present(saisie_variables.get('CODHSC', 0)) + present(saisie_variables.get('CODHSE', 0)) + present(saisie_variables.get('CODHSF', 0)) + present(saisie_variables.get('CODHSG', 0)) + present(saisie_variables.get('CODHSH', 0)) + present(saisie_variables.get('CODHSJ', 0)) + present(saisie_variables.get('CODHSK', 0)) + present(saisie_variables.get('CODHSL', 0)) + present(saisie_variables.get('CODHSM', 0)) + present(saisie_variables.get('CODHSO', 0)) + present(saisie_variables.get('CODHSP', 0)) + present(saisie_variables.get('CODHSQ', 0)) + present(saisie_variables.get('CODHSR', 0)) + present(saisie_variables.get('CODHST', 0)) + present(saisie_variables.get('CODHSU', 0)) + present(saisie_variables.get('CODHSV', 0)) + present(saisie_variables.get('CODHSW', 0)) + present(saisie_variables.get('CODHSY', 0)) + present(saisie_variables.get('CODHSZ', 0)) + present(saisie_variables.get('CODHTA', 0)) + present(saisie_variables.get('CODHTB', 0)) + present(saisie_variables.get('CODHTD', 0)) + present(saisie_variables.get('LOCMEUBIA', 0)) + present(saisie_variables.get('LOCMEUBIB', 0)) + present(saisie_variables.get('LOCMEUBIC', 0)) + present(saisie_variables.get('LOCMEUBID', 0)) + present(saisie_variables.get('LOCMEUBIE', 0)) + present(saisie_variables.get('LOCMEUBIF', 0)) + present(saisie_variables.get('LOCMEUBIG', 0)) + present(saisie_variables.get('LOCMEUBIH', 0)) + present(saisie_variables.get('LOCMEUBII', 0)) + present(saisie_variables.get('LOCMEUBIX', 0)) + present(saisie_variables.get('LOCMEUBIY', 0)) + present(saisie_variables.get('LOCMEUBIZ', 0)) + present(saisie_variables.get('LOCMEUBJC', 0)) + present(saisie_variables.get('LOCMEUBJI', 0)) + present(saisie_variables.get('LOCMEUBJS', 0)) + present(saisie_variables.get('LOCMEUBJT', 0)) + present(saisie_variables.get('LOCMEUBJU', 0)) + present(saisie_variables.get('LOCMEUBJV', 0)) + present(saisie_variables.get('LOCMEUBJW', 0)) + present(saisie_variables.get('LOCMEUBJX', 0)) + present(saisie_variables.get('LOCMEUBJY', 0)) + present(saisie_variables.get('IPBOCH', 0)) + present(saisie_variables.get('IPELUS', 0)) + present(saisie_variables.get('IPMOND', 0)) + present(saisie_variables.get('SALECS', 0)) + present(saisie_variables.get('SALECSG', 0)) + present(saisie_variables.get('CICORSENOW', 0)) + present(saisie_variables.get('PRESINTER', 0)) + present(saisie_variables.get('IPPNCS', 0)) + present(saisie_variables.get('IPPRICORSE', 0)) + present(saisie_variables.get('IPRECH', 0)) + present(saisie_variables.get('IPCHER', 0)) + present(saisie_variables.get('IPREP', 0)) + present(saisie_variables.get('IPREPCORSE', 0)) + present(saisie_variables.get('IPSOUR', 0)) + present(saisie_variables.get('IPSUIS', 0)) + present(saisie_variables.get('IPSUISC', 0)) + present(saisie_variables.get('IPSURSI', 0)) + present(saisie_variables.get('IPSURV', 0)) + present(saisie_variables.get('IPTEFN', 0)) + present(saisie_variables.get('IPTEFP', 0)) + present(saisie_variables.get('IPTXMO', 0)) + present(saisie_variables.get('IPVLOC', 0)) + present(saisie_variables.get('IRANT', 0)) + present(saisie_variables.get('LOCRESINEUV', 0)) + present(saisie_variables.get('REPMEUBLE', 0)) + present(saisie_variables.get('MEUBLENP', 0)) + present(saisie_variables.get('RESIVIEU', 0)) + present(saisie_variables.get('REDMEUBLE', 0)) + present(saisie_variables.get('NBACT', 0)) + present(saisie_variables.get('CONVCREA', 0)) + present(saisie_variables.get('CONVHAND', 0)) + present(saisie_variables.get('NCHENF1', 0)) + present(saisie_variables.get('NCHENF2', 0)) + present(saisie_variables.get('NCHENF3', 0)) + present(saisie_variables.get('NCHENF4', 0)) + present(saisie_variables.get('NRBASE', 0)) + present(saisie_variables.get('NRINET', 0)) + present(saisie_variables.get('IMPRET', 0)) + present(saisie_variables.get('BASRET', 0)) + present(saisie_variables.get('NUPROP', 0)) + present(saisie_variables.get('REPGROREP1', 0)) + present(saisie_variables.get('REPGROREP2', 0)) + present(saisie_variables.get('REPGROREP11', 0)) + present(saisie_variables.get('REPGROREP12', 0)) + present(saisie_variables.get('OPTPLAF15', 0)) + present(saisie_variables.get('PAAP', 0)) + present(saisie_variables.get('PAAV', 0)) + present(saisie_variables.get('PERPC', 0)) + present(saisie_variables.get('PERPP', 0)) + present(saisie_variables.get('PERPV', 0)) + present(saisie_variables.get('PERP_COTC', 0)) + present(saisie_variables.get('PERP_COTP', 0)) + present(saisie_variables.get('PERP_COTV', 0)) + present(saisie_variables.get('PLAF_PERPC', 0)) + present(saisie_variables.get('PLAF_PERPP', 0)) + present(saisie_variables.get('PLAF_PERPV', 0)) + present(saisie_variables.get('PREHABT', 0)) + present(saisie_variables.get('PREHABTN1', 0)) + present(saisie_variables.get('PREHABTN2', 0)) + present(saisie_variables.get('PREHABTVT', 0)) + present(saisie_variables.get('PREHABT2', 0)) + present(saisie_variables.get('PREHABTN', 0)) + present(saisie_variables.get('PREMAIDE', 0)) + present(saisie_variables.get('PRESCOMP2000', 0)) + present(saisie_variables.get('PRESCOMPJUGE', 0)) + present(saisie_variables.get('PRETUD', 0)) + present(saisie_variables.get('PRETUDANT', 0)) + present(saisie_variables.get('PRODOM', 0)) + present(saisie_variables.get('PROGUY', 0)) + present(saisie_variables.get('PRSPROV', 0)) + present(saisie_variables.get('PTZDEVDUR', 0)) + present(saisie_variables.get('R1649', 0)) + present(saisie_variables.get('PTZDEVDURN', 0)) + present(saisie_variables.get('PREREV', 0)) + present(saisie_variables.get('RACCOTC', 0)) + present(saisie_variables.get('RACCOTP', 0)) + present(saisie_variables.get('RACCOTV', 0)) + present(saisie_variables.get('RCCURE', 0)) + present(saisie_variables.get('RDCOM', 0)) + present(saisie_variables.get('RDDOUP', 0)) + present(saisie_variables.get('RDENL', 0)) + present(saisie_variables.get('RDENLQAR', 0)) + present(saisie_variables.get('RDENS', 0)) + present(saisie_variables.get('RDENSQAR', 0)) + present(saisie_variables.get('RDENU', 0)) + present(saisie_variables.get('RDENUQAR', 0)) + present(saisie_variables.get('RDEQPAHA', 0)) + present(saisie_variables.get('RDDOUP', 0)) + present(saisie_variables.get('RDFOREST', 0)) + present(saisie_variables.get('RDFORESTGES', 0)) + present(saisie_variables.get('RDFORESTRA', 0)) + present(saisie_variables.get('RDREP', 0)) + present(saisie_variables.get('COTFORET', 0)) + present(saisie_variables.get('REPFOR', 0)) + present(saisie_variables.get('REPSINFOR', 0)) + present(saisie_variables.get('REPSINFOR1', 0)) + present(saisie_variables.get('REPSINFOR2', 0)) + present(saisie_variables.get('REPSINFOR3', 0)) + present(saisie_variables.get('REPFOR1', 0)) + present(saisie_variables.get('REPFOR2', 0)) + present(saisie_variables.get('REPFOR3', 0)) + present(saisie_variables.get('RDGARD1', 0)) + present(saisie_variables.get('RDGARD1QAR', 0)) + present(saisie_variables.get('RDGARD2', 0)) + present(saisie_variables.get('RDGARD2QAR', 0)) + present(saisie_variables.get('RDGARD3', 0)) + present(saisie_variables.get('RDGARD3QAR', 0)) + present(saisie_variables.get('RDGARD4', 0)) + present(saisie_variables.get('RDGARD4QAR', 0)) + present(saisie_variables.get('RDTECH', 0)) + present(saisie_variables.get('RDMECENAT', 0)) + present(saisie_variables.get('RDPRESREPORT', 0)) + present(saisie_variables.get('RDREP', 0)) + present(saisie_variables.get('RDRESU', 0)) + present(saisie_variables.get('RDSNO', 0)) + present(saisie_variables.get('RDSYCJ', 0)) + present(saisie_variables.get('RDSYPP', 0)) + present(saisie_variables.get('RDSYVO', 0)) + present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('REGCI', 0)) + present(saisie_variables.get('REPDON03', 0)) + present(saisie_variables.get('REPDON04', 0)) + present(saisie_variables.get('REPDON05', 0)) + present(saisie_variables.get('REPDON06', 0)) + present(saisie_variables.get('REPDON07', 0)) + present(saisie_variables.get('RINVLOCINV', 0)) + present(saisie_variables.get('RINVLOCREA', 0)) + present(saisie_variables.get('REPSNO1', 0)) + present(saisie_variables.get('REPSNO2', 0)) + present(saisie_variables.get('REPINVTOU', 0)) + present(saisie_variables.get('INVLOGREHA', 0)) + present(saisie_variables.get('INVLOGHOT', 0)) + present(saisie_variables.get('REPSNO3', 0)) + present(saisie_variables.get('REPSNON', 0)) + present(saisie_variables.get('REPSOF', 0)) + present(saisie_variables.get('RESTIMOPPAU', 0)) + present(saisie_variables.get('RIMOPPAUANT', 0)) + present(saisie_variables.get('RIMOSAUVANT', 0)) + present(saisie_variables.get('RESTIMOSAUV', 0)) + present(saisie_variables.get('RIMOPPAURE', 0)) + present(saisie_variables.get('RIMOSAUVRF', 0)) + present(saisie_variables.get('COD7SY', 0)) + present(saisie_variables.get('COD7SX', 0)) + present(saisie_variables.get('COD7UH', 0)) + present(saisie_variables.get('COD7WD', 0)) + present(saisie_variables.get('REVMAR1', 0)) + present(saisie_variables.get('REVMAR2', 0)) + present(saisie_variables.get('REVMAR3', 0)) + present(saisie_variables.get('PETIPRISE', 0)) + present(saisie_variables.get('RMOND', 0)) + present(saisie_variables.get('RSOCREPRISE', 0)) + present(saisie_variables.get('RVAIDE', 0)) + present(saisie_variables.get('RVAIDAS', 0)) + present(saisie_variables.get('RVCURE', 0)) + present(saisie_variables.get('SINISFORET', 0)) + present(saisie_variables.get('SUBSTITRENTE', 0)) + present(saisie_variables.get('FIPDOMCOM', 0)) + present(saisie_variables.get('ALLECS', 0)) + present(saisie_variables.get('INDECS', 0)) + present(saisie_variables.get('PENECS', 0)) + present(saisie_variables.get('DONETRAN', 0)) + present(saisie_variables.get('DONAUTRE', 0)) + present(saisie_variables.get('MATISOSI', 0)) + present(saisie_variables.get('MATISOSJ', 0)) + present(saisie_variables.get('VOLISO', 0)) + present(saisie_variables.get('PORENT', 0)) + present(saisie_variables.get('CHAUBOISN', 0)) + present(saisie_variables.get('POMPESP', 0)) + present(saisie_variables.get('POMPESQ', 0)) + present(saisie_variables.get('POMPESR', 0)) + present(saisie_variables.get('CHAUFSOL', 0)) + present(saisie_variables.get('ENERGIEST', 0)) + present(saisie_variables.get('DIAGPERF', 0)) + present(saisie_variables.get('RESCHAL', 0)) + present(saisie_variables.get('TRATOIVG', 0)) + present(saisie_variables.get('TRAMURWC', 0)) + present(saisie_variables.get('TRAVITWT', 0)) + present(saisie_variables.get('RFRN2', 0)) + present(saisie_variables.get('RFRN3', 0)) + present(saisie_variables.get('RFRH1', 0)) + present(saisie_variables.get('RFRH2', 0)) + present(saisie_variables.get('COD8TL', 0)) + present(saisie_variables.get('COD8UW', 0)) + present(saisie_variables.get('V_8ZT', 0)) + present(saisie_variables.get('CELREPYA', 0)) + present(saisie_variables.get('CELREPYB', 0)) + present(saisie_variables.get('CELREPYC', 0)) + present(saisie_variables.get('CELREPYD', 0)) + present(saisie_variables.get('CELREPYE', 0)) + present(saisie_variables.get('CELREPYF', 0)) + present(saisie_variables.get('CELREPYG', 0)) + present(saisie_variables.get('CELREPYH', 0)) + present(saisie_variables.get('CELREPYI', 0)) + present(saisie_variables.get('CELREPYJ', 0)) + present(saisie_variables.get('CELREPYK', 0)) + present(saisie_variables.get('CELREPYL', 0)) + present(saisie_variables.get('CELRREDLN', 0)) + present(saisie_variables.get('CELRREDLX', 0)) + present(saisie_variables.get('CELRREDLZ', 0)) + present(saisie_variables.get('CELRREDMH', 0)) + present(saisie_variables.get('COD7CR', 0)) + present(saisie_variables.get('COD7CY', 0)) + present(saisie_variables.get('COD7OA', 0)) + present(saisie_variables.get('COD7OB', 0)) + present(saisie_variables.get('COD7OC', 0)) + present(saisie_variables.get('COD7OD', 0)) + present(saisie_variables.get('COD7OE', 0)) + present(saisie_variables.get('COD7OU', 0)) + present(saisie_variables.get('COD7PA', 0)) + present(saisie_variables.get('COD7PB', 0)) + present(saisie_variables.get('COD7PC', 0)) + present(saisie_variables.get('COD7PD', 0)) + present(saisie_variables.get('COD7PE', 0)) + present(saisie_variables.get('COD7RG', 0)) + present(saisie_variables.get('COD7RH', 0)) + present(saisie_variables.get('COD7RI', 0)) + present(saisie_variables.get('COD7RJ', 0)) + present(saisie_variables.get('COD7RK', 0)) + present(saisie_variables.get('COD7RL', 0)) + present(saisie_variables.get('COD7RN', 0)) + present(saisie_variables.get('COD7RP', 0)) + present(saisie_variables.get('COD7RQ', 0)) + present(saisie_variables.get('COD7RR', 0)) + present(saisie_variables.get('COD7RS', 0)) + present(saisie_variables.get('COD7RT', 0)) + present(saisie_variables.get('COD7RV', 0)) + present(saisie_variables.get('COD7RW', 0)) + present(saisie_variables.get('COD7RX', 0)) + present(saisie_variables.get('COD7RZ', 0)) + present(saisie_variables.get('COD7SA', 0)) + present(saisie_variables.get('COD7SB', 0)) + present(saisie_variables.get('COD7SC', 0)) + present(saisie_variables.get('COD7TV', 0)) + present(saisie_variables.get('COD7TW', 0)) + present(saisie_variables.get('COD7UA', 0)) + present(saisie_variables.get('COD7UB', 0)) + present(saisie_variables.get('COD7UI', 0)) + present(saisie_variables.get('COD7VH', 0)) + present(saisie_variables.get('COD7WB', 0)) + present(saisie_variables.get('COD7WU', 0)) + present(saisie_variables.get('COD7WX', 0)) + present(saisie_variables.get('COD8XY', 0)) + present(saisie_variables.get('COD8YM', 0)) + present(saisie_variables.get('CSPROVYN', 0)) + present(saisie_variables.get('CSPROVYP', 0)) + present(saisie_variables.get('CODHAA', 0)) + present(saisie_variables.get('CODHAB', 0)) + present(saisie_variables.get('CODHAC', 0)) + present(saisie_variables.get('CODHAD', 0)) + present(saisie_variables.get('CODHAE', 0)) + present(saisie_variables.get('CODHAF', 0)) + present(saisie_variables.get('CODHAG', 0)) + present(saisie_variables.get('CODHAH', 0)) + present(saisie_variables.get('CODHAI', 0)) + present(saisie_variables.get('CODHAJ', 0)) + present(saisie_variables.get('CODHAK', 0)) + present(saisie_variables.get('CODHAL', 0)) + present(saisie_variables.get('CODHAM', 0)) + present(saisie_variables.get('CODHAN', 0)) + present(saisie_variables.get('CODHAO', 0)) + present(saisie_variables.get('CODHAP', 0)) + present(saisie_variables.get('CODHAQ', 0)) + present(saisie_variables.get('CODHAR', 0)) + present(saisie_variables.get('CODHAS', 0)) + present(saisie_variables.get('CODHAT', 0)) + present(saisie_variables.get('CODHAU', 0)) + present(saisie_variables.get('CODHAV', 0)) + present(saisie_variables.get('CODHAW', 0)) + present(saisie_variables.get('CODHAX', 0)) + present(saisie_variables.get('CODHAY', 0)) + present(saisie_variables.get('CODHBA', 0)) + present(saisie_variables.get('CODHBB', 0)) + present(saisie_variables.get('CODHBE', 0)) + present(saisie_variables.get('CODHBF', 0)) + present(saisie_variables.get('CODHBG', 0)) + present(saisie_variables.get('CODHUA', 0)) + present(saisie_variables.get('CODHUB', 0)) + present(saisie_variables.get('CODHUC', 0)) + present(saisie_variables.get('CODHUD', 0)) + present(saisie_variables.get('CODHUE', 0)) + present(saisie_variables.get('CODHUF', 0)) + present(saisie_variables.get('CODHUG', 0)) + present(saisie_variables.get('CODHXA', 0)) + present(saisie_variables.get('CODHXB', 0)) + present(saisie_variables.get('CODHXC', 0)) + present(saisie_variables.get('CODHXE', 0)) + present(saisie_variables.get('COD8SA', 0)) + present(saisie_variables.get('COD8SB', 0)) + present(saisie_variables.get('COD8XI', 0)) + present(saisie_variables.get('COD8XJ', 0)) + present(saisie_variables.get('DUFLOFI', 0)) + present(saisie_variables.get('DUFLOGH', 0)) + present(saisie_variables.get('DUFLOGI', 0)) + present(saisie_variables.get('PATNAT4', 0)) + present(saisie_variables.get('PINELQA', 0)) + present(saisie_variables.get('PINELQB', 0)) + present(saisie_variables.get('PINELQC', 0)) + present(saisie_variables.get('PINELQD', 0)) + present(saisie_variables.get('REPGROREP13', 0)) + present(saisie_variables.get('REPSINFOR4', 0)) + present(saisie_variables.get('RFRN3', 0))))

    @cache_result
    def INDREV1A8():
        """
        Indicateur d'existence de revenu declare du point 1 a 8
        """
        return positif(INDREV1A8IR())

    @cache_result
    def PERP_INDC():
        """
        indicateur PERP conjoint
        From PERP_INDi
        """
        return positif((0 + positif(saisie_variables.get('TSHALLOC', 0)) + positif(saisie_variables.get('ALLOC', 0)) + positif(saisie_variables.get('GLD1C', 0)) + positif(saisie_variables.get('GLD2C', 0)) + positif(saisie_variables.get('GLD3C', 0)) + positif(saisie_variables.get('GLDGRATC', 0)) + positif(saisie_variables.get('BPCOSAC', 0)) + positif(saisie_variables.get('TSASSUC', 0)) + positif(saisie_variables.get('CARTSC', 0)) + positif(saisie_variables.get('FEXC', 0)) + positif(saisie_variables.get('BAFC', 0)) + positif(saisie_variables.get('BAFPVC', 0)) + positif(saisie_variables.get('BAEXC', 0)) + positif(saisie_variables.get('BACREC', 0)) + positif(saisie_variables.get('4BACREC', 0)) + positif((saisie_variables.get('BACDEC', 0) and saisie_variables.get('BACDEC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BAHEXC', 0)) + positif(saisie_variables.get('BAHREC', 0)) + positif(saisie_variables.get('4BAHREC', 0)) + positif((saisie_variables.get('BAHDEC', 0) and saisie_variables.get('BAHDEC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BAPERPC', 0)) + positif(saisie_variables.get('MIBEXC', 0)) + positif(saisie_variables.get('MIBVENC', 0)) + positif(saisie_variables.get('MIBPRESC', 0)) + positif(saisie_variables.get('MIBPVC', 0)) + positif(saisie_variables.get('AUTOBICVC', 0)) + positif(saisie_variables.get('AUTOBICPC', 0)) + positif(saisie_variables.get('BICEXC', 0)) + positif(saisie_variables.get('BICNOC', 0)) + positif((saisie_variables.get('BICDNC', 0) and saisie_variables.get('BICDNC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BIHEXC', 0)) + positif(saisie_variables.get('BIHNOC', 0)) + positif((saisie_variables.get('BIHDNC', 0) and saisie_variables.get('BIHDNC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BIPERPC', 0)) + positif(saisie_variables.get('LOCPROCGAC', 0)) - positif((saisie_variables.get('LOCDEFPROCGAC', 0) and saisie_variables.get('LOCDEFPROCGAC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('LOCPROC', 0)) - positif((saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNCPROEXC', 0)) + positif(saisie_variables.get('BNCPROC', 0)) + positif(saisie_variables.get('BNCPROPVC', 0)) + positif(saisie_variables.get('AUTOBNCC', 0)) + positif(saisie_variables.get('BNCEXC', 0)) + positif(saisie_variables.get('BNCREC', 0)) + positif((saisie_variables.get('BNCDEC', 0) and saisie_variables.get('BNCDEC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNHEXC', 0)) + positif(saisie_variables.get('BNHREC', 0)) + positif((saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNCCRC', 0))))

    @cache_result
    def PERP_NONV():
        """
        indicateur PERP Vous
        """
        return positif(((1 - positif(PERP_INDV())) and (1 - positif((saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0)))) and (1 - positif(saisie_variables.get('PERP_COTV', 0))) and (1 - positif(PERP_INDC())) and (1 - positif(PERP_INDV())) * (1 - positif((saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0)))) * (1 - positif(saisie_variables.get('PERP_COTV', 0))) * (1 - positif(PERP_INDC())) * positif((saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0)))))

    @cache_result
    def PERPINDV():
        """
        indicateur PERP vous
        """
        return (positif(((positif((positif(PERP_INDV()) + ((1 - positif(PERP_INDV())) and (1 - positif(PERP_INDV())) * (1 - positif((saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0))))))) and positif((positif(PERP_INDV()) + ((1 - positif(PERP_INDV())) and (1 - positif(PERP_INDV())) * (1 - positif((saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0))))))) * positif(INDREV1A8())) + ((1 - positif(PERP_INDV())) and positif((saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0))) and (1 - positif(PERP_INDV())) * positif((saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0))) * positif(saisie_variables.get('PERP_COTV', 0))) + (saisie_variables.get('PERPMUTU', 0) and saisie_variables.get('PERPMUTU', 0) * (1 - positif((PERP_INDV() + saisie_variables.get('PERP_COTV', 0))))))) and (1 - PERP_NONV()) and positif(((positif((positif(PERP_INDV()) + ((1 - positif(PERP_INDV())) and (1 - positif(PERP_INDV())) * (1 - positif((saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0))))))) and positif((positif(PERP_INDV()) + ((1 - positif(PERP_INDV())) and (1 - positif(PERP_INDV())) * (1 - positif((saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0))))))) * positif(INDREV1A8())) + ((1 - positif(PERP_INDV())) and positif((saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0))) and (1 - positif(PERP_INDV())) * positif((saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0))) * positif(saisie_variables.get('PERP_COTV', 0))) + (saisie_variables.get('PERPMUTU', 0) and saisie_variables.get('PERPMUTU', 0) * (1 - positif((PERP_INDV() + saisie_variables.get('PERP_COTV', 0))))))) * (1 - PERP_NONV()) * (1 - V_CNR()))

    @cache_result
    def PERPSALV():
        """
        PERP:REVENUS D ACTIVITE SALARIALE - VOUS -
        """
        return (saisie_variables.get('TSHALLOV', 0) + saisie_variables.get('ALLOV', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('TSASSUV', 0) + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + max(0, (saisie_variables.get('SALEXTV', 0) - saisie_variables.get('COD1AD', 0))))

    @cache_result
    def PDEDMINV():
        """
        Deduction minimale a appliquer sur salaires pour le PERP
        From PDEDMINi
        """
        return DEDMINV()

    @cache_result
    def PTPS10V():
        """
        abattement 10% brut pour le PERP
        From PTPS10i
        """
        return arr((PERPSALV() and TX_DEDFORFTS and PERPSALV() * TX_DEDFORFTS / 100))

    @cache_result
    def PDFNV():
        """
        Deduction forfaitaire de 10% pour le PERP
        From PDFNi
        """
        return min(PLAF_DEDFORFTS, PTPS10V())

    @cache_result
    def P10MINSV():
        """
        deductions hors droits d'auteur plafonnees pour le PERP
        From P10MINSi
        """
        return max(min(PERPSALV(), PDEDMINV()), PDFNV())

    @cache_result
    def PIND_10V():
        """
        Indicateur d'affichage deduction 10%
        """
        return positif_ou_nul((P10MINSV() - (FRDV() + saisie_variables.get('COD1AE', 0))))

    @cache_result
    def PIND_10MIN_0V():
        """
        booleen d'existence d'une deduction minimale hors D.A. pour le PERP
        From PIND_10MIN_0i
        """
        return (positif((PDEDMINV() - PDFNV())) and positif((PDEDMINV() - PDFNV())) * positif(PERPSALV()))

    @cache_result
    def PIND_MINV():
        """
        pour le PERP
        From PIND_MINi
        """
        return (1 - positif(PIND_10MIN_0V()))

    @cache_result
    def PD10MV():
        """
        deduction 10% hors DA apres prise en compte de la deduction minimale 
        From PD10Mi
        """
        return ((PIND_MINV() and PIND_MINV() * PDFNV()) + ((1 - PIND_MINV()) and (1 - PIND_MINV()) * P10MINSV()))

    @cache_result
    def PFRDV():
        """
        Frais reels declares pour le PERP
        """
        return ((FRDV() + saisie_variables.get('COD1AE', 0)) and (FRDV() + saisie_variables.get('COD1AE', 0)) * positif(((FRDV() + saisie_variables.get('COD1AE', 0)) - P10MINSV())))

    @cache_result
    def PFPTV():
        """
        deduction de 10% ou frais reels pour le PERP
        From PFPTi
        """
        return max(PFRDV(), P10MINSV())

    @cache_result
    def PREP10V():
        """
        frais de 10% servant aux abtt. de 10% pour GL et SA pour le PERP
        From PREP10i
        """
        return ((PIND_10V() and PIND_10V() * PD10MV()) + ((1 - PIND_10V()) and (1 - PIND_10V()) * PFPTV()))

    @cache_result
    def PERPSALDV():
        """
        PERP:Deduction forfaitaire D ACTIVITE SALARIALE - VOUS -
        """
        return PREP10V()

    @cache_result
    def PERPSALNV():
        """
        PERP:Revenus nets D ACTIVITE SALARIALE - VOUS -
        """
        return (PERPSALV() - PERPSALDV() + saisie_variables.get('ELURASV', 0))

    @cache_result
    def PERPBANV():
        """
        PERP:Revenus agricoles - VOUS -
        """
        return (saisie_variables.get('FEXV', 0) + saisie_variables.get('BAFV', 0) + saisie_variables.get('BAFPVV', 0) + saisie_variables.get('BAEXV', 0) + saisie_variables.get('BACREV', 0) - (saisie_variables.get('BACDEV', 0) and saisie_variables.get('BACDEV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BAHEXV', 0) + saisie_variables.get('BAHREV', 0) - (saisie_variables.get('BAHDEV', 0) and saisie_variables.get('BAHDEV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BAPERPV', 0) + saisie_variables.get('4BACREV', 0) + saisie_variables.get('4BAHREV', 0) + saisie_variables.get('BAFORESTV', 0) + saisie_variables.get('BANOCGAV', 0))

    @cache_result
    def TPMIB_APV():
        """
        Abattements prestations de service PERP tx eff. auto
        From TPMIB_APi
        """
        return min((saisie_variables.get('MIBPRESV', 0) + saisie_variables.get('AUTOBICPV', 0)), max(MIN_MBIC, arr(((saisie_variables.get('MIBPRESV', 0) + saisie_variables.get('AUTOBICPV', 0)) and TX_MIBPRES and (saisie_variables.get('MIBPRESV', 0) + saisie_variables.get('AUTOBICPV', 0)) * TX_MIBPRES / 100))))

    @cache_result
    def TPMIB_NETPV():
        """
        prestations de services net pro PERP tx eff auto
        From TPMIB_NETPi
        """
        return (saisie_variables.get('MIBPRESV', 0) + saisie_variables.get('AUTOBICPV', 0) - TPMIB_APV())

    @cache_result
    def TPMIB_AVV():
        """
        abattements vente de marchandise PERP tx eff. auto
        From TPMIB_AVi
        """
        return min((saisie_variables.get('MIBVENV', 0) + saisie_variables.get('AUTOBICVV', 0)), max(MIN_MBIC, arr(((saisie_variables.get('MIBVENV', 0) + saisie_variables.get('AUTOBICVV', 0)) and TX_MIBVEN and (saisie_variables.get('MIBVENV', 0) + saisie_variables.get('AUTOBICVV', 0)) * TX_MIBVEN / 100))))

    @cache_result
    def TPMIB_NETVV():
        """
        activit de vente de marchandises ou assimile PERP tx eff. auto
        From TPMIB_NETVi
        """
        return (saisie_variables.get('MIBVENV', 0) + saisie_variables.get('AUTOBICVV', 0) - TPMIB_AVV())

    @cache_result
    def PERPBICMNV():
        """
        PERP:Revenus BIC micro  - VOUS -
        """
        return (TPMIB_NETPV() + TPMIB_NETVV() + saisie_variables.get('MIBEXV', 0) + saisie_variables.get('MIBPVV', 0) - saisie_variables.get('BICPMVCTV', 0))

    @cache_result
    def PERPBICPNV():
        """
        PERP:Revenus BIC reel  - VOUS -
        """
        return (saisie_variables.get('BICEXV', 0) + saisie_variables.get('BICNOV', 0) - (saisie_variables.get('BICDNV', 0) and saisie_variables.get('BICDNV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BIHEXV', 0) + saisie_variables.get('BIHNOV', 0) - (saisie_variables.get('BIHDNV', 0) and saisie_variables.get('BIHDNV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BIPERPV', 0) + saisie_variables.get('LOCPROCGAV', 0) - (saisie_variables.get('LOCDEFPROCGAV', 0) and saisie_variables.get('LOCDEFPROCGAV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('LOCPROV', 0) - (saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif(base_variables['ART1731BIS']))))

    @cache_result
    def PERPBNCMNV():
        """
        PERP:Revenus BNC micro  - VOUS -
        """
        return (saisie_variables.get('BNCPROEXV', 0) + max(0, ((saisie_variables.get('BNCPROV', 0) + saisie_variables.get('AUTOBNCV', 0)) - max(arr(((saisie_variables.get('BNCPROV', 0) + saisie_variables.get('AUTOBNCV', 0)) and SPETXAB and (saisie_variables.get('BNCPROV', 0) + saisie_variables.get('AUTOBNCV', 0)) * SPETXAB / 100)), MIN_SPEBNC))) + saisie_variables.get('BNCPROPVV', 0) - saisie_variables.get('BNCPMVCTV', 0))

    @cache_result
    def PERPBNCPNV():
        """
        PERP:Revenus BNC professionnel  - VOUS -
        """
        return (saisie_variables.get('BNCEXV', 0) + saisie_variables.get('BNCREV', 0) - (saisie_variables.get('BNCDEV', 0) and saisie_variables.get('BNCDEV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNHEXV', 0) + saisie_variables.get('BNHREV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNCCRV', 0))

    @cache_result
    def PERPNONSALV():
        """
        PERP:REVENUS D ACTIVITE NON SALARIALE - VOUS -
        """
        return (PERPBANV() + PERPBICMNV() + PERPBICPNV() + PERPBNCMNV() + PERPBNCPNV())

    @cache_result
    def PERPREVTOTV():
        """
        PERP:Revenus total sal + non sal - VOUS -
        """
        return max(0, (PERPSALNV() + PERPNONSALV()))

    @cache_result
    def PERPPLAFV():
        """
        PERP:plafond global de deductibilite - VOUS -
        """
        return (positif(PERPINDV()) and max(0, ((positif(PERPREVTOTV()) and positif(PERPREVTOTV()) * (max(min(arr((PERPREVTOTV() and TX_PERPPLAF and PERPREVTOTV() * TX_PERPPLAF / 100)), LIM_PERPMAX), LIM_PERPMIN) - saisie_variables.get('PERPV', 0))) + ((1 - positif(PERPREVTOTV())) and (1 - positif(PERPREVTOTV())) * (LIM_PERPMIN - saisie_variables.get('PERPV', 0))))) and positif(PERPINDV()) * max(0, ((positif(PERPREVTOTV()) and positif(PERPREVTOTV()) * (max(min(arr((PERPREVTOTV() and TX_PERPPLAF and PERPREVTOTV() * TX_PERPPLAF / 100)), LIM_PERPMAX), LIM_PERPMIN) - saisie_variables.get('PERPV', 0))) + ((1 - positif(PERPREVTOTV())) and (1 - positif(PERPREVTOTV())) * (LIM_PERPMIN - saisie_variables.get('PERPV', 0))))) * (1 - V_CNR()))

    @cache_result
    def PERPPLAFCOMV():
        """
        PERP:plafond complementaire impatries
        From PERPPLAFCOMi
        """
        return ((positif(saisie_variables.get('PERPIMPATRIE', 0)) and PERPPLAFV() and positif(saisie_variables.get('PERPIMPATRIE', 0)) * PERPPLAFV() * 3) + ((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * 0))

    @cache_result
    def PERPPLAFIMPV():
        """
        PERP:plafond  impatries
        From PERPPLAFIMPi
        """
        return ((positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * (PERPPLAFCOMV() + PERPPLAFV())) + ((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * 0))

    @cache_result
    def PERP_NONC():
        """
        indicateur PERP cjt
        """
        return (BOOL_0AM() and BOOL_0AM() * positif(((1 - positif(PERP_INDC())) and (1 - positif((saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0)))) and (1 - positif(saisie_variables.get('PERP_COTC', 0))) and (1 - positif(PERP_INDV())) and (1 - positif(PERP_INDC())) * (1 - positif((saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0)))) * (1 - positif(saisie_variables.get('PERP_COTC', 0))) * (1 - positif(PERP_INDV())) * positif((saisie_variables.get('PRBRV', 0) + saisie_variables.get('PALIV', 0))))))

    @cache_result
    def PERPINDC():
        """
        indicateur PERP conjoint
        """
        return (positif(((positif((positif(PERP_INDC()) + ((1 - positif(PERP_INDC())) and (1 - positif(PERP_INDC())) * (1 - positif((saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0))))))) and positif((positif(PERP_INDC()) + ((1 - positif(PERP_INDC())) and (1 - positif(PERP_INDC())) * (1 - positif((saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0))))))) * positif(INDREV1A8())) + ((1 - positif(PERP_INDC())) and positif((saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0))) and (1 - positif(PERP_INDC())) * positif((saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0))) * positif(saisie_variables.get('PERP_COTC', 0))) + (saisie_variables.get('PERPMUTU', 0) and saisie_variables.get('PERPMUTU', 0) * (1 - positif((PERP_INDC() + saisie_variables.get('PERP_COTC', 0))))))) and (1 - PERP_NONC()) and BOOL_0AM() and positif(((positif((positif(PERP_INDC()) + ((1 - positif(PERP_INDC())) and (1 - positif(PERP_INDC())) * (1 - positif((saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0))))))) and positif((positif(PERP_INDC()) + ((1 - positif(PERP_INDC())) and (1 - positif(PERP_INDC())) * (1 - positif((saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0))))))) * positif(INDREV1A8())) + ((1 - positif(PERP_INDC())) and positif((saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0))) and (1 - positif(PERP_INDC())) * positif((saisie_variables.get('PRBRC', 0) + saisie_variables.get('PALIC', 0))) * positif(saisie_variables.get('PERP_COTC', 0))) + (saisie_variables.get('PERPMUTU', 0) and saisie_variables.get('PERPMUTU', 0) * (1 - positif((PERP_INDC() + saisie_variables.get('PERP_COTC', 0))))))) * (1 - PERP_NONC()) * BOOL_0AM() * (1 - V_CNR()))

    @cache_result
    def PERPSALC():
        """
        PERP:REVENUS D ACTIVITE SALARIALE - CJT -
        """
        return (saisie_variables.get('TSHALLOC', 0) + saisie_variables.get('ALLOC', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0) + saisie_variables.get('GLDGRATC', 0) + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('TSASSUC', 0) + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + max(0, (saisie_variables.get('SALEXTC', 0) - saisie_variables.get('COD1BD', 0))))

    @cache_result
    def PDEDMINC():
        """
        Deduction minimale a appliquer sur salaires pour le PERP
        From PDEDMINi
        """
        return DEDMINC()

    @cache_result
    def PTPS10C():
        """
        abattement 10% brut pour le PERP
        From PTPS10i
        """
        return arr((PERPSALC() and TX_DEDFORFTS and PERPSALC() * TX_DEDFORFTS / 100))

    @cache_result
    def PDFNC():
        """
        Deduction forfaitaire de 10% pour le PERP
        From PDFNi
        """
        return min(PLAF_DEDFORFTS, PTPS10C())

    @cache_result
    def P10MINSC():
        """
        deductions hors droits d'auteur plafonnees pour le PERP
        From P10MINSi
        """
        return max(min(PERPSALC(), PDEDMINC()), PDFNC())

    @cache_result
    def PIND_10C():
        """
        Indicateur d'affichage deduction 10%
        """
        return positif_ou_nul((P10MINSC() - (FRDC() + saisie_variables.get('COD1BE', 0))))

    @cache_result
    def PIND_10MIN_0C():
        """
        booleen d'existence d'une deduction minimale hors D.A. pour le PERP
        From PIND_10MIN_0i
        """
        return (positif((PDEDMINC() - PDFNC())) and positif((PDEDMINC() - PDFNC())) * positif(PERPSALC()))

    @cache_result
    def PIND_MINC():
        """
        pour le PERP
        From PIND_MINi
        """
        return (1 - positif(PIND_10MIN_0C()))

    @cache_result
    def PD10MC():
        """
        deduction 10% hors DA apres prise en compte de la deduction minimale 
        From PD10Mi
        """
        return ((PIND_MINC() and PIND_MINC() * PDFNC()) + ((1 - PIND_MINC()) and (1 - PIND_MINC()) * P10MINSC()))

    @cache_result
    def PFRDC():
        """
        Frais reels declares pour le PERP
        """
        return ((FRDC() + saisie_variables.get('COD1BE', 0)) and (FRDC() + saisie_variables.get('COD1BE', 0)) * positif(((FRDC() + saisie_variables.get('COD1BE', 0)) - P10MINSC())))

    @cache_result
    def PFPTC():
        """
        deduction de 10% ou frais reels pour le PERP
        From PFPTi
        """
        return max(PFRDC(), P10MINSC())

    @cache_result
    def PREP10C():
        """
        frais de 10% servant aux abtt. de 10% pour GL et SA pour le PERP
        From PREP10i
        """
        return ((PIND_10C() and PIND_10C() * PD10MC()) + ((1 - PIND_10C()) and (1 - PIND_10C()) * PFPTC()))

    @cache_result
    def PERPSALDC():
        """
        PERP:Deduction forfaitaire D ACTIVITE SALARIALE - CJT -
        """
        return PREP10C()

    @cache_result
    def PERPSALNC():
        """
        PERP:Revenus nets D ACTIVITE SALARIALE - CJT -
        """
        return (PERPSALC() - PERPSALDC() + saisie_variables.get('ELURASC', 0))

    @cache_result
    def PERPBANC():
        """
        PERP:Revenus agricoles - CJT -
        """
        return (saisie_variables.get('FEXC', 0) + saisie_variables.get('BAFC', 0) + saisie_variables.get('BAFPVC', 0) + saisie_variables.get('BAEXC', 0) + saisie_variables.get('BACREC', 0) - (saisie_variables.get('BACDEC', 0) and saisie_variables.get('BACDEC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BAHEXC', 0) + saisie_variables.get('BAHREC', 0) - (saisie_variables.get('BAHDEC', 0) and saisie_variables.get('BAHDEC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BAPERPC', 0) + saisie_variables.get('4BACREC', 0) + saisie_variables.get('4BAHREC', 0) + saisie_variables.get('BAFORESTC', 0) + saisie_variables.get('BANOCGAC', 0))

    @cache_result
    def TPMIB_APC():
        """
        Abattements prestations de service PERP tx eff. auto
        From TPMIB_APi
        """
        return min((saisie_variables.get('MIBPRESC', 0) + saisie_variables.get('AUTOBICPC', 0)), max(MIN_MBIC, arr(((saisie_variables.get('MIBPRESC', 0) + saisie_variables.get('AUTOBICPC', 0)) and TX_MIBPRES and (saisie_variables.get('MIBPRESC', 0) + saisie_variables.get('AUTOBICPC', 0)) * TX_MIBPRES / 100))))

    @cache_result
    def TPMIB_NETPC():
        """
        prestations de services net pro PERP tx eff auto
        From TPMIB_NETPi
        """
        return (saisie_variables.get('MIBPRESC', 0) + saisie_variables.get('AUTOBICPC', 0) - TPMIB_APC())

    @cache_result
    def TPMIB_AVC():
        """
        abattements vente de marchandise PERP tx eff. auto
        From TPMIB_AVi
        """
        return min((saisie_variables.get('MIBVENC', 0) + saisie_variables.get('AUTOBICVC', 0)), max(MIN_MBIC, arr(((saisie_variables.get('MIBVENC', 0) + saisie_variables.get('AUTOBICVC', 0)) and TX_MIBVEN and (saisie_variables.get('MIBVENC', 0) + saisie_variables.get('AUTOBICVC', 0)) * TX_MIBVEN / 100))))

    @cache_result
    def TPMIB_NETVC():
        """
        activit de vente de marchandises ou assimile PERP tx eff. auto
        From TPMIB_NETVi
        """
        return (saisie_variables.get('MIBVENC', 0) + saisie_variables.get('AUTOBICVC', 0) - TPMIB_AVC())

    @cache_result
    def PERPBICMNC():
        """
        PERP:Revenus BIC micro  - CJT -
        """
        return (TPMIB_NETPC() + TPMIB_NETVC() + saisie_variables.get('MIBEXC', 0) + saisie_variables.get('MIBPVC', 0) - saisie_variables.get('BICPMVCTC', 0))

    @cache_result
    def PERPBICPNC():
        """
        PERP:Revenus BIC reel  - CJT -
        """
        return (saisie_variables.get('BICEXC', 0) + saisie_variables.get('BICNOC', 0) - (saisie_variables.get('BICDNC', 0) and saisie_variables.get('BICDNC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BIHEXC', 0) + saisie_variables.get('BIHNOC', 0) - (saisie_variables.get('BIHDNC', 0) and saisie_variables.get('BIHDNC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BIPERPC', 0) + saisie_variables.get('LOCPROCGAC', 0) - (saisie_variables.get('LOCDEFPROCGAC', 0) and saisie_variables.get('LOCDEFPROCGAC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('LOCPROC', 0) - (saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif(base_variables['ART1731BIS']))))

    @cache_result
    def PERPBNCMNC():
        """
        PERP:Revenus BNC micro  - CJT -
        """
        return (saisie_variables.get('BNCPROEXC', 0) + max(0, ((saisie_variables.get('BNCPROC', 0) + saisie_variables.get('AUTOBNCC', 0)) - max(arr(((saisie_variables.get('BNCPROC', 0) + saisie_variables.get('AUTOBNCC', 0)) and SPETXAB and (saisie_variables.get('BNCPROC', 0) + saisie_variables.get('AUTOBNCC', 0)) * SPETXAB / 100)), MIN_SPEBNC))) + saisie_variables.get('BNCPROPVC', 0) - saisie_variables.get('BNCPMVCTC', 0))

    @cache_result
    def PERPBNCPNC():
        """
        PERP:Revenus BNC professionnel  - CJT -
        """
        return (saisie_variables.get('BNCEXC', 0) + saisie_variables.get('BNCREC', 0) - (saisie_variables.get('BNCDEC', 0) and saisie_variables.get('BNCDEC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNHEXC', 0) + saisie_variables.get('BNHREC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNCCRC', 0))

    @cache_result
    def PERPNONSALC():
        """
        PERP:REVENUS D ACTIVITE NON SALARIALE - CJT -
        """
        return (PERPBANC() + PERPBICMNC() + PERPBICPNC() + PERPBNCMNC() + PERPBNCPNC())

    @cache_result
    def PERPREVTOTC():
        """
        PERP:Revenus total sal + non sal - CJT -
        """
        return max(0, (PERPSALNC() + PERPNONSALC()))

    @cache_result
    def PERPPLAFC():
        """
        PERP:plafond global de deductibilite - CJT -
        """
        return (positif(PERPINDC()) and BOOL_0AM() and max(0, ((positif(PERPREVTOTC()) and positif(PERPREVTOTC()) * (max(min(arr((PERPREVTOTC() and TX_PERPPLAF and PERPREVTOTC() * TX_PERPPLAF / 100)), LIM_PERPMAX), LIM_PERPMIN) - saisie_variables.get('PERPC', 0))) + ((1 - positif(PERPREVTOTC())) and (1 - positif(PERPREVTOTC())) * (LIM_PERPMIN - saisie_variables.get('PERPC', 0))))) and positif(PERPINDC()) * BOOL_0AM() * max(0, ((positif(PERPREVTOTC()) and positif(PERPREVTOTC()) * (max(min(arr((PERPREVTOTC() and TX_PERPPLAF and PERPREVTOTC() * TX_PERPPLAF / 100)), LIM_PERPMAX), LIM_PERPMIN) - saisie_variables.get('PERPC', 0))) + ((1 - positif(PERPREVTOTC())) and (1 - positif(PERPREVTOTC())) * (LIM_PERPMIN - saisie_variables.get('PERPC', 0))))) * (1 - V_CNR()))

    @cache_result
    def PERPPLAFCOMC():
        """
        PERP:plafond complementaire impatries
        From PERPPLAFCOMi
        """
        return ((positif(saisie_variables.get('PERPIMPATRIE', 0)) and PERPPLAFC() and positif(saisie_variables.get('PERPIMPATRIE', 0)) * PERPPLAFC() * 3) + ((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * 0))

    @cache_result
    def PERPPLAFIMPC():
        """
        PERP:plafond  impatries
        From PERPPLAFIMPi
        """
        return ((positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * (PERPPLAFCOMC() + PERPPLAFC())) + ((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * 0))

    @cache_result
    def PERP_COND1():
        """
        PERP:mutualisation situation1
        """
        return (positif(PERP_MUT()) and positif(PERP_MUT()) * (((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and positif((saisie_variables.get('PERP_COTV', 0) - PERPPLATVANT())) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * positif((saisie_variables.get('PERP_COTV', 0) - PERPPLATVANT())) * positif((PERPPLATCANT() - saisie_variables.get('PERP_COTC', 0)))) + (positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif((saisie_variables.get('PERP_COTV', 0) - PERPPLAFIMPV())) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * positif((saisie_variables.get('PERP_COTV', 0) - PERPPLAFIMPV())) * positif((PERPPLAFIMPC() - saisie_variables.get('PERP_COTC', 0))))))

    @cache_result
    def PERP_COND2():
        """
        PERP:mutualisation situation2
        """
        return (positif(PERP_MUT()) and positif(PERP_MUT()) * (((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and positif((saisie_variables.get('PERP_COTC', 0) - PERPPLATCANT())) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * positif((saisie_variables.get('PERP_COTC', 0) - PERPPLATCANT())) * positif((PERPPLATVANT() - saisie_variables.get('PERP_COTV', 0)))) + (positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif((saisie_variables.get('PERP_COTC', 0) - PERPPLAFIMPC())) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * positif((saisie_variables.get('PERP_COTC', 0) - PERPPLAFIMPC())) * positif((PERPPLAFIMPV() - saisie_variables.get('PERP_COTV', 0))))))

    @cache_result
    def PERPPLAFMUTV():
        """
        plafond PERP mutualise Vous
        """
        return (positif(PERP_COND1()) and positif(PERP_COND1()) * (((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * (PERPPLATVANT() + max(0, (PERPPLATCANT() - saisie_variables.get('PERP_COTC', 0))))) + (positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * (PERPPLAFIMPV() + max(0, (PERPPLAFIMPC() - saisie_variables.get('PERP_COTC', 0)))))))

    @cache_result
    def RPERPV():
        """
        bse retenu PERP
        """
        return (((1 - positif(PERP_COND1())) and (1 - positif(PERP_COND2())) and (1 - positif(PERP_COND1())) * (1 - positif(PERP_COND2())) * (((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * max(0, (min(saisie_variables.get('PERP_COTV', 0), PERPPLATVANT()) + saisie_variables.get('RACCOTV', 0)))) + (positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * max(0, (min(saisie_variables.get('PERP_COTV', 0), PERPPLAFIMPV()) + saisie_variables.get('RACCOTV', 0)))))) + (positif(PERP_COND1()) and positif(PERP_COND1()) * (min(saisie_variables.get('PERP_COTV', 0), PERPPLAFMUTV()) + saisie_variables.get('RACCOTV', 0))) + (positif(PERP_COND2()) and positif(PERP_COND2()) * (((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * max(0, (min(saisie_variables.get('PERP_COTV', 0), PERPPLATVANT()) + saisie_variables.get('RACCOTV', 0)))) + (positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * max(0, (min(saisie_variables.get('PERP_COTV', 0), PERPPLAFIMPV()) + saisie_variables.get('RACCOTV', 0)))))))

    @cache_result
    def SDD():
        """
        solde deficits non imputes sur RG
        """
        return max(0, (DAR() - RG()))

    @cache_result
    def RPALE():
        """
        Pension enfants majeurs : montant retenu
        """
        return (max(0, min(somme([(min(saisie_variables.get('NCHENF1', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF1', 0) and saisie_variables.get('CHENF1', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF2', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF2', 0) and saisie_variables.get('CHENF2', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF3', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF3', 0) and saisie_variables.get('CHENF3', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF4', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF4', 0) and saisie_variables.get('CHENF4', 0) * MAJREV)), LIM_PENSALENF))]), (RBG() - DDCSG() + TOTALQUO() - SDD()))) and max(0, min(somme([(min(saisie_variables.get('NCHENF1', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF1', 0) and saisie_variables.get('CHENF1', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF2', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF2', 0) and saisie_variables.get('CHENF2', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF3', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF3', 0) and saisie_variables.get('CHENF3', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF4', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF4', 0) and saisie_variables.get('CHENF4', 0) * MAJREV)), LIM_PENSALENF))]), (RBG() - DDCSG() + TOTALQUO() - SDD()))) * (1 - V_CNR()))

    @cache_result
    def RPALP():
        """
        Autres pensions alimentaires
        """
        return (max(min(TOTPA(), (RBG() - RPALE() - DDCSG() + TOTALQUO() - SDD())), 0) and max(min(TOTPA(), (RBG() - RPALE() - DDCSG() + TOTALQUO() - SDD())), 0) * (1 - V_CNR()))

    @cache_result
    def RFACC():
        """
        Frais d'accueil retenu
        """
        return max(min(DFA(), (RBG() - RPALE() - RPALP() - DDCSG() + TOTALQUO() - SDD())), 0)

    @cache_result
    def RDDIV():
        """
        Deductions diverses
        """
        return max(min((DEDIV() and DEDIV() * (1 - V_CNR())), (RBG() - RPALE() - RPALP() - RFACC() - DDCSG() + TOTALQUO() - SDD())), 0)

    @cache_result
    def APERPV():
        """
        bse retenu PERP
        """
        return ((1 - V_CNR()) and (1 - V_CNR()) * max(min(RPERPV(), (RBG() - RPALE() - RPALP() - RFACC() - RDDIV() - DDCSG() + TOTALQUO() - SDD())), 0))

    @cache_result
    def PERPPLAFMUTC():
        """
        plafond PERP mutualise Cjt
        """
        return (positif(PERP_COND2()) and positif(PERP_COND2()) * (((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * (PERPPLATCANT() + max(0, (PERPPLATVANT() - saisie_variables.get('PERP_COTV', 0))))) + (positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * (PERPPLAFIMPC() + max(0, (PERPPLAFIMPV() - saisie_variables.get('PERP_COTV', 0)))))))

    @cache_result
    def RPERPC():
        """
        bse retenu PERP
        """
        return (((1 - positif(PERP_COND1())) and (1 - positif(PERP_COND2())) and (1 - positif(PERP_COND1())) * (1 - positif(PERP_COND2())) * (((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * max(0, (min(saisie_variables.get('PERP_COTC', 0), PERPPLATCANT()) + saisie_variables.get('RACCOTC', 0)))) + (positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * max(0, (min(saisie_variables.get('PERP_COTC', 0), PERPPLAFIMPC()) + saisie_variables.get('RACCOTC', 0)))))) + (positif(PERP_COND1()) and positif(PERP_COND1()) * (((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * max(0, (min(saisie_variables.get('PERP_COTC', 0), PERPPLATCANT()) + saisie_variables.get('RACCOTC', 0)))) + (positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * max(0, (min(saisie_variables.get('PERP_COTC', 0), PERPPLAFIMPC()) + saisie_variables.get('RACCOTC', 0)))))) + (positif(PERP_COND2()) and positif(PERP_COND2()) * (min(saisie_variables.get('PERP_COTC', 0), PERPPLAFMUTC()) + saisie_variables.get('RACCOTC', 0))))

    @cache_result
    def APERPC():
        """
        bse retenu PERP
        """
        return ((1 - V_CNR()) and (1 - V_CNR()) * max(min(RPERPC(), (RBG() - RPALE() - RPALP() - RFACC() - RDDIV() - DDCSG() + TOTALQUO() - SDD() - APERPV())), 0))

    @cache_result
    def PERPPLATPANT():
        """
        plafond PERP total annee N
        From PERPPLATiANT
        """
        return (((1 - positif((present(saisie_variables.get('PERPPLAFCP', 0)) + present(saisie_variables.get('PERPPLAFNUP1', 0)) + present(saisie_variables.get('PERPPLAFNUP2', 0)) + present(saisie_variables.get('PERPPLAFNUP3', 0))))) and (1 - positif((present(saisie_variables.get('PERPPLAFCP', 0)) + present(saisie_variables.get('PERPPLAFNUP1', 0)) + present(saisie_variables.get('PERPPLAFNUP2', 0)) + present(saisie_variables.get('PERPPLAFNUP3', 0))))) * saisie_variables.get('V_BTPERPTOTP', 0)) + (positif((present(saisie_variables.get('PERPPLAFCP', 0)) + present(saisie_variables.get('PERPPLAFNUP1', 0)) + present(saisie_variables.get('PERPPLAFNUP2', 0)) + present(saisie_variables.get('PERPPLAFNUP3', 0)))) and positif((present(saisie_variables.get('PERPPLAFCP', 0)) + present(saisie_variables.get('PERPPLAFNUP1', 0)) + present(saisie_variables.get('PERPPLAFNUP2', 0)) + present(saisie_variables.get('PERPPLAFNUP3', 0)))) * (saisie_variables.get('PERPPLAFCP', 0) + saisie_variables.get('PERPPLAFNUP1', 0) + saisie_variables.get('PERPPLAFNUP2', 0) + saisie_variables.get('PERPPLAFNUP3', 0))))

    @cache_result
    def PERP_INDP():
        """
        indicateur PERP PAP
        """
        return positif((0 + positif(saisie_variables.get('TSHALLO1', 0)) + positif(saisie_variables.get('ALLO1', 0)) + positif(saisie_variables.get('FEXP', 0)) + positif(saisie_variables.get('BAFP', 0)) + positif(saisie_variables.get('BAFPVP', 0)) + positif(saisie_variables.get('BAEXP', 0)) + positif(saisie_variables.get('BACREP', 0)) + positif(saisie_variables.get('4BACREP', 0)) + positif((saisie_variables.get('BACDEP', 0) and saisie_variables.get('BACDEP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BAHEXP', 0)) + positif(saisie_variables.get('BAHREP', 0)) + positif(saisie_variables.get('4BAHREP', 0)) + positif((saisie_variables.get('BAHDEP', 0) and saisie_variables.get('BAHDEP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BAPERPP', 0)) + positif(saisie_variables.get('MIBEXP', 0)) + positif(saisie_variables.get('MIBVENP', 0)) + positif(saisie_variables.get('MIBPRESP', 0)) + positif(saisie_variables.get('MIBPVP', 0)) + positif(saisie_variables.get('AUTOBICVP', 0)) + positif(saisie_variables.get('AUTOBICPP', 0)) + positif(saisie_variables.get('BICEXP', 0)) + positif(saisie_variables.get('BICNOP', 0)) + positif((saisie_variables.get('BICDNP', 0) and saisie_variables.get('BICDNP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BIHEXP', 0)) + positif(saisie_variables.get('BIHNOP', 0)) + positif((saisie_variables.get('BIHDNP', 0) and saisie_variables.get('BIHDNP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BIPERPP', 0)) + positif(saisie_variables.get('LOCPROCGAP', 0)) - positif((saisie_variables.get('LOCDEFPROCGAP', 0) and saisie_variables.get('LOCDEFPROCGAP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('LOCPROP', 0)) - positif((saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNCPROEXP', 0)) + positif(saisie_variables.get('BNCPROP', 0)) + positif(saisie_variables.get('BNCPROPVP', 0)) + positif(saisie_variables.get('AUTOBNCP', 0)) + positif(saisie_variables.get('BNCEXP', 0)) + positif(saisie_variables.get('BNCREP', 0)) + positif((saisie_variables.get('BNCDEP', 0) and saisie_variables.get('BNCDEP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNHEXP', 0)) + positif(saisie_variables.get('BNHREP', 0)) + positif((saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNCCRP', 0))))

    @cache_result
    def PALIP():
        """
        Pensions alimentaires des personbnes a charges
        """
        return (saisie_variables.get('PALI1', 0) + saisie_variables.get('PALI2', 0) + saisie_variables.get('PALI3', 0) + saisie_variables.get('PALI4', 0))

    @cache_result
    def PERP_BOOL():
        """
        PERP:BOOLEEN perp pour PAC
        """
        return positif((null((1 - (saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + saisie_variables.get('V_0DP', 0)))) and null((1 - (saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + saisie_variables.get('V_0DP', 0)))) * null((present(saisie_variables.get('TSHALLO2', 0)) + present(saisie_variables.get('ALLO2', 0)) + present(saisie_variables.get('TSHALLO3', 0)) + present(saisie_variables.get('ALLO3', 0)) + present(saisie_variables.get('TSHALLO4', 0)) + present(saisie_variables.get('ALLO4', 0)) + present(saisie_variables.get('FRN2', 0)) + present(saisie_variables.get('FRN3', 0)) + present(saisie_variables.get('FRN4', 0)) + present(saisie_variables.get('CARTSP2', 0)) + present(saisie_variables.get('CARTSP3', 0)) + present(saisie_variables.get('CARTSP4', 0)) + present(saisie_variables.get('REMPLAP2', 0)) + present(saisie_variables.get('REMPLAP3', 0)) + present(saisie_variables.get('REMPLAP4', 0))))))

    @cache_result
    def PERPINDP():
        """
        indicateur PERP PAC
        """
        return (positif(((positif((positif(PERP_INDP()) + ((1 - positif(PERP_INDP())) and (1 - positif(PERP_INDP())) * (1 - positif((saisie_variables.get('PRBR1', 0) + PALIP())))))) and positif((positif(PERP_INDP()) + ((1 - positif(PERP_INDP())) and (1 - positif(PERP_INDP())) * (1 - positif((saisie_variables.get('PRBR1', 0) + PALIP())))))) * positif(INDREV1A8())) + ((1 - positif(PERP_INDP())) and positif((saisie_variables.get('PRBR1', 0) + PALIP())) and (1 - positif(PERP_INDP())) * positif((saisie_variables.get('PRBR1', 0) + PALIP())) * positif(saisie_variables.get('PERP_COTP', 0))))) and PERP_BOOL() and positif(((positif((positif(PERP_INDP()) + ((1 - positif(PERP_INDP())) and (1 - positif(PERP_INDP())) * (1 - positif((saisie_variables.get('PRBR1', 0) + PALIP())))))) and positif((positif(PERP_INDP()) + ((1 - positif(PERP_INDP())) and (1 - positif(PERP_INDP())) * (1 - positif((saisie_variables.get('PRBR1', 0) + PALIP())))))) * positif(INDREV1A8())) + ((1 - positif(PERP_INDP())) and positif((saisie_variables.get('PRBR1', 0) + PALIP())) and (1 - positif(PERP_INDP())) * positif((saisie_variables.get('PRBR1', 0) + PALIP())) * positif(saisie_variables.get('PERP_COTP', 0))))) * PERP_BOOL() * (1 - V_CNR()))

    @cache_result
    def PERPSALP():
        """
        PERP:REVENUS D ACTIVITE SALARIALE - PAC -
        """
        return (PERP_BOOL() and PERP_BOOL() * (saisie_variables.get('TSHALLO1', 0) + saisie_variables.get('ALLO1', 0) + saisie_variables.get('CARTSP1', 0) + saisie_variables.get('REMPLAP1', 0) + max(0, (saisie_variables.get('SALEXT1', 0) - saisie_variables.get('COD1CD', 0)))))

    @cache_result
    def PDEDMINP():
        """
        Deduction minimale a appliquer sur salaires pour le PERP
        """
        return ((positif(saisie_variables.get('DETS1', 0)) and positif(saisie_variables.get('DETS1', 0)) * MIN_DEMEMPLOI) + ((1 - positif(saisie_variables.get('DETS1', 0))) and (1 - positif(saisie_variables.get('DETS1', 0))) * MIN_DEDSFORFTS))

    @cache_result
    def PTPS10P():
        """
        abattement 10% brut pour le PERP
        From PTPS10i
        """
        return arr((PERPSALP() and TX_DEDFORFTS and PERPSALP() * TX_DEDFORFTS / 100))

    @cache_result
    def PDFNP():
        """
        Deduction forfaitaire de 10% pour le PERP
        From PDFNi
        """
        return min(PLAF_DEDFORFTS, PTPS10P())

    @cache_result
    def P10MINSP():
        """
        deductions hors droits d'auteur plafonnees pour le PERP
        From P10MINSi
        """
        return max(min(PERPSALP(), PDEDMINP()), PDFNP())

    @cache_result
    def PIND_10P():
        """
        Indicateur d'affichage deduction 10%
        """
        return positif_ou_nul((P10MINSP() - (FRD1() + saisie_variables.get('COD1CE', 0))))

    @cache_result
    def PIND_10MIN_0P():
        """
        booleen d'existence d'une deduction minimale hors D.A. pour le PERP
        From PIND_10MIN_0i
        """
        return (positif((PDEDMINP() - PDFNP())) and positif((PDEDMINP() - PDFNP())) * positif(PERPSALP()))

    @cache_result
    def PIND_MINP():
        """
        pour le PERP
        From PIND_MINi
        """
        return (1 - positif(PIND_10MIN_0P()))

    @cache_result
    def PD10MP():
        """
        deduction 10% hors DA apres prise en compte de la deduction minimale 
        From PD10Mi
        """
        return ((PIND_MINP() and PIND_MINP() * PDFNP()) + ((1 - PIND_MINP()) and (1 - PIND_MINP()) * P10MINSP()))

    @cache_result
    def PFRDP():
        """
        Frais reels declares pour le PERP
        """
        return ((FRD1() + saisie_variables.get('COD1CE', 0)) and (FRD1() + saisie_variables.get('COD1CE', 0)) * positif(((FRD1() + saisie_variables.get('COD1CE', 0)) - P10MINSP())))

    @cache_result
    def PFPTP():
        """
        deduction de 10% ou frais reels pour le PERP
        From PFPTi
        """
        return max(PFRDP(), P10MINSP())

    @cache_result
    def PREP10P():
        """
        frais de 10% servant aux abtt. de 10% pour GL et SA pour le PERP
        From PREP10i
        """
        return ((PIND_10P() and PIND_10P() * PD10MP()) + ((1 - PIND_10P()) and (1 - PIND_10P()) * PFPTP()))

    @cache_result
    def PERPSALDP():
        """
        PERP:Deduction forfaitaire D ACTIVITE SALARIALE - PAC -
        """
        return (PREP10P() and PREP10P() * PERP_BOOL())

    @cache_result
    def PERPSALNP():
        """
        PERP:Revenus nets D ACTIVITE SALARIALE - PAC -
        """
        return (PERPSALP() - PERPSALDP())

    @cache_result
    def PERPBANP():
        """
        PERP:Revenus agricoles - PAC -
        """
        return ((PERP_BOOL() and PERP_BOOL() * (saisie_variables.get('FEXP', 0) + saisie_variables.get('BAFP', 0) + saisie_variables.get('BAFPVP', 0) + saisie_variables.get('BAEXP', 0) + saisie_variables.get('BACREP', 0) - (saisie_variables.get('BACDEP', 0) and saisie_variables.get('BACDEP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BAHEXP', 0) + saisie_variables.get('BAHREP', 0) - (saisie_variables.get('BAHDEP', 0) and saisie_variables.get('BAHDEP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BAPERPP', 0) + saisie_variables.get('4BACREP', 0) + saisie_variables.get('4BAHREP', 0))) + saisie_variables.get('BAFORESTP', 0) + saisie_variables.get('BANOCGAP', 0))

    @cache_result
    def TPMIB_APP():
        """
        Abattements prestations de service PERP tx eff. auto
        From TPMIB_APi
        """
        return min((saisie_variables.get('MIBPRESP', 0) + saisie_variables.get('AUTOBICPP', 0)), max(MIN_MBIC, arr(((saisie_variables.get('MIBPRESP', 0) + saisie_variables.get('AUTOBICPP', 0)) and TX_MIBPRES and (saisie_variables.get('MIBPRESP', 0) + saisie_variables.get('AUTOBICPP', 0)) * TX_MIBPRES / 100))))

    @cache_result
    def TPMIB_NETPP():
        """
        prestations de services net pro PERP tx eff auto
        From TPMIB_NETPi
        """
        return (saisie_variables.get('MIBPRESP', 0) + saisie_variables.get('AUTOBICPP', 0) - TPMIB_APP())

    @cache_result
    def TPMIB_AVP():
        """
        abattements vente de marchandise PERP tx eff. auto
        From TPMIB_AVi
        """
        return min((saisie_variables.get('MIBVENP', 0) + saisie_variables.get('AUTOBICVP', 0)), max(MIN_MBIC, arr(((saisie_variables.get('MIBVENP', 0) + saisie_variables.get('AUTOBICVP', 0)) and TX_MIBVEN and (saisie_variables.get('MIBVENP', 0) + saisie_variables.get('AUTOBICVP', 0)) * TX_MIBVEN / 100))))

    @cache_result
    def TPMIB_NETVP():
        """
        activit de vente de marchandises ou assimile PERP tx eff. auto
        From TPMIB_NETVi
        """
        return (saisie_variables.get('MIBVENP', 0) + saisie_variables.get('AUTOBICVP', 0) - TPMIB_AVP())

    @cache_result
    def PERPBICMNP():
        """
        PERP:Revenus BIC micro  - PAC -
        """
        return ((TPMIB_NETPP() + TPMIB_NETVP() + saisie_variables.get('MIBEXP', 0) + saisie_variables.get('MIBPVP', 0) - saisie_variables.get('BICPMVCTP', 0)) and (TPMIB_NETPP() + TPMIB_NETVP() + saisie_variables.get('MIBEXP', 0) + saisie_variables.get('MIBPVP', 0) - saisie_variables.get('BICPMVCTP', 0)) * PERP_BOOL())

    @cache_result
    def PERPBICPNP():
        """
        PERP:Revenus BIC reel  - PAC -
        """
        return (PERP_BOOL() and PERP_BOOL() * (saisie_variables.get('BICEXP', 0) + saisie_variables.get('BICNOP', 0) - (saisie_variables.get('BICDNP', 0) and saisie_variables.get('BICDNP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BIHEXP', 0) + saisie_variables.get('BIHNOP', 0) - (saisie_variables.get('BIHDNP', 0) and saisie_variables.get('BIHDNP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BIPERPP', 0) + saisie_variables.get('LOCPROCGAP', 0) - (saisie_variables.get('LOCDEFPROCGAP', 0) and saisie_variables.get('LOCDEFPROCGAP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('LOCPROP', 0) - (saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif(base_variables['ART1731BIS'])))))

    @cache_result
    def PERPBNCMNP():
        """
        PERP:Revenus BNC micro  - PAC -
        """
        return (PERP_BOOL() and PERP_BOOL() * (saisie_variables.get('BNCPROEXP', 0) + max(0, ((saisie_variables.get('BNCPROP', 0) + saisie_variables.get('AUTOBNCP', 0)) - max(arr(((saisie_variables.get('BNCPROP', 0) + saisie_variables.get('AUTOBNCP', 0)) and SPETXAB and (saisie_variables.get('BNCPROP', 0) + saisie_variables.get('AUTOBNCP', 0)) * SPETXAB / 100)), MIN_SPEBNC))) + saisie_variables.get('BNCPROPVP', 0) - saisie_variables.get('BNCPMVCTP', 0)))

    @cache_result
    def PERPBNCPNP():
        """
        PERP:Revenus BNC professionnel  - PAC -
        """
        return (PERP_BOOL() and PERP_BOOL() * (saisie_variables.get('BNCEXP', 0) + saisie_variables.get('BNCREP', 0) - (saisie_variables.get('BNCDEP', 0) and saisie_variables.get('BNCDEP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNHEXP', 0) + saisie_variables.get('BNHREP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNCCRP', 0)))

    @cache_result
    def PERPNONSALP():
        """
        PERP:REVENUS D ACTIVITE NON SALARIALE - PAC -
        """
        return (PERPBANP() + PERPBICMNP() + PERPBICPNP() + PERPBNCMNP() + PERPBNCPNP())

    @cache_result
    def PERPREVTOTP():
        """
        PERP:Revenus total sal + non sal - PAC -
        """
        return max(0, (PERPSALNP() + PERPNONSALP()))

    @cache_result
    def PERPPLAFP():
        """
        PERP:plafond global de deductibilite - PAC -
        """
        return (positif(PERPINDP()) and max(0, ((positif(PERPREVTOTP()) and positif(PERPREVTOTP()) * (max(min(arr((PERPREVTOTP() and TX_PERPPLAF and PERPREVTOTP() * TX_PERPPLAF / 100)), LIM_PERPMAX), LIM_PERPMIN) - saisie_variables.get('PERPP', 0))) + ((1 - positif(PERPREVTOTP())) and (1 - positif(PERPREVTOTP())) * (LIM_PERPMIN - saisie_variables.get('PERPP', 0))))) and positif(PERPINDP()) * max(0, ((positif(PERPREVTOTP()) and positif(PERPREVTOTP()) * (max(min(arr((PERPREVTOTP() and TX_PERPPLAF and PERPREVTOTP() * TX_PERPPLAF / 100)), LIM_PERPMAX), LIM_PERPMIN) - saisie_variables.get('PERPP', 0))) + ((1 - positif(PERPREVTOTP())) and (1 - positif(PERPREVTOTP())) * (LIM_PERPMIN - saisie_variables.get('PERPP', 0))))) * (1 - V_CNR()))

    @cache_result
    def PERPPLAFCOMP():
        """
        PERP:plafond complementaire impatries
        From PERPPLAFCOMi
        """
        return ((positif(saisie_variables.get('PERPIMPATRIE', 0)) and PERPPLAFP() and positif(saisie_variables.get('PERPIMPATRIE', 0)) * PERPPLAFP() * 3) + ((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * 0))

    @cache_result
    def PERPPLAFIMPP():
        """
        PERP:plafond  impatries
        From PERPPLAFIMPi
        """
        return ((positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * (PERPPLAFCOMP() + PERPPLAFP())) + ((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * 0))

    @cache_result
    def RPERPP():
        """
        bse retenu PERP
        """
        return (((1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) and (1 - positif(saisie_variables.get('PERPIMPATRIE', 0))) * max(0, (min(saisie_variables.get('PERP_COTP', 0), PERPPLATPANT()) + saisie_variables.get('RACCOTP', 0)))) + (positif(saisie_variables.get('PERPIMPATRIE', 0)) and positif(saisie_variables.get('PERPIMPATRIE', 0)) * max(0, (min(saisie_variables.get('PERP_COTP', 0), PERPPLAFIMPP()) + saisie_variables.get('RACCOTP', 0)))))

    @cache_result
    def APERPP():
        """
        bse retenu PERP
        """
        return ((1 - V_CNR()) and (1 - V_CNR()) * max(min(RPERPP(), (RBG() - RPALE() - RPALP() - RFACC() - RDDIV() - DDCSG() + TOTALQUO() - SDD() - APERPV() - APERPC())), 0))

    @cache_result
    def NUPROPT():
        """
        Grosses reparations 
        """
        return (saisie_variables.get('REPGROREP2', 0) + saisie_variables.get('REPGROREP1', 0) + saisie_variables.get('REPGROREP11', 0) + saisie_variables.get('REPGROREP12', 0) + saisie_variables.get('REPGROREP13', 0) + saisie_variables.get('NUPROP', 0))

    @cache_result
    def RRBG():
        """
        Revenu global
        """
        return (((((RG() - DAR()) and (RG() - DAR()) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))))) + (positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) and positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) * (saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) and (((RG() - DAR()) and (RG() - DAR()) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))))) + (positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) and positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) * (saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) * (1 - base_variables['ART1731BIS'])) + ((((RG() - (DAR() - DFANTIMPU())) and (RG() - (DAR() - DFANTIMPU())) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))))) + (positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) and positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) * (saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) and (((RG() - (DAR() - DFANTIMPU())) and (RG() - (DAR() - DFANTIMPU())) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))))) + (positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) and positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) * (saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) * base_variables['ART1731BIS']))

    @cache_result
    def NUREPAR():
        """
        Deduction grosses reparations nus-proprietaires
        """
        return (min(NUPROPT(), max(0, min(PLAF_NUREPAR, (RRBG() - RPALE() - RPALP() - RFACC() - RDDIV() - APERPV() - APERPC() - APERPP() - DDCSG() + TOTALQUO() - SDD())))) and min(NUPROPT(), max(0, min(PLAF_NUREPAR, (RRBG() - RPALE() - RPALP() - RFACC() - RDDIV() - APERPV() - APERPC() - APERPP() - DDCSG() + TOTALQUO() - SDD())))) * ((saisie_variables.get('V_REGCO', 0) + 0)) in (1, 3, 5, 6, 7))

    @cache_result
    def RBL():
        """
        Revenu base des limitations de charges deductibles
        """
        return ((RBG2() - (min(RBG2(), (DPA() + DFA() + DEDIV() + APERPV() + APERPC() + APERPP() + NUREPAR())) and min(RBG2(), (DPA() + DFA() + DEDIV() + APERPV() + APERPC() + APERPP() + NUREPAR())) * (1 - V_CNR())) - (min(RBG2(), saisie_variables.get('V_8ZT', 0)) and min(RBG2(), saisie_variables.get('V_8ZT', 0)) * V_CR2())) and (RBG2() - (min(RBG2(), (DPA() + DFA() + DEDIV() + APERPV() + APERPC() + APERPP() + NUREPAR())) and min(RBG2(), (DPA() + DFA() + DEDIV() + APERPV() + APERPC() + APERPP() + NUREPAR())) * (1 - V_CNR())) - (min(RBG2(), saisie_variables.get('V_8ZT', 0)) and min(RBG2(), saisie_variables.get('V_8ZT', 0)) * V_CR2())) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def RNG():
        """
        Revenu net global
        """
        return ((null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((V_CR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)) * saisie_variables.get('IPVLOC', 0)) + ((1 - (null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)))) and (1 - (null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)))) * RBL()))

    @cache_result
    def AGV():
        """
        Age du declarant
        """
        return ((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0)) and (saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0)) * min(1, saisie_variables.get('V_0DA', 0)))

    @cache_result
    def AGC():
        """
        Age du conjoint
        """
        return ((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0)) and (saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0)) * min(1, saisie_variables.get('V_0DB', 0)))

    @cache_result
    def NDA():
        """
        Nombre de personnes ages
        """
        return (min(max((AGV() + 1 - LIM_AGE_ABVIEUX), saisie_variables.get('V_0AP', 0)), 1) + min(max(((AGC() and AGC() * BOOL_0AM()) + 1 - LIM_AGE_ABVIEUX), (saisie_variables.get('V_0AF', 0) and saisie_variables.get('V_0AF', 0) * BOOL_0AM())), 1))

    @cache_result
    def SDC():
        """
        solde charges non imputees sur RG
        """
        return ((max(0, (DDCSG() + DPA() + DFA() + DEDIV() + APERPV() + APERPC() + APERPP() + NUREPAR() - max(0, RBG()))) and max(0, (DDCSG() + DPA() + DFA() + DEDIV() + APERPV() + APERPC() + APERPP() + NUREPAR() - max(0, RBG()))) * (1 - V_CNR())) + (max(0, (saisie_variables.get('V_8ZT', 0) - max(0, RBG()))) and max(0, (saisie_variables.get('V_8ZT', 0) - max(0, RBG()))) * V_CR2()))

    @cache_result
    def NAB():
        """
        Nombre abattements personnes agees
        """
        return (min(max((LIM_ABTRNGDBL + 1 - (RNG() + TOTALQUO() - SDD() - SDC())), 0), 1) + min(max((LIM_ABTRNGSIMP + 1 - (RNG() + TOTALQUO() - SDD() - SDC())), 0), 1))

    @cache_result
    def ABTPA():
        """
        Abattement personnes agees ou invalides
        """
        return (NDA() and NAB() and ABAT_UNVIEUX and NDA() * NAB() * ABAT_UNVIEUX * (1 - V_CNR()))

    @cache_result
    def ABTMA():
        """
        Abattement pour enfants maries a charge
        """
        return ((saisie_variables.get('V_0DN', 0) and saisie_variables.get('V_0DN', 0) * ABAT_ENF_MARIES) + arr((saisie_variables.get('V_0DP', 0) and ABAT_ENF_MARIES and saisie_variables.get('V_0DP', 0) * ABAT_ENF_MARIES / 2)))

    @cache_result
    def RI1():
        """
        Revenu imposable
        """
        return max((RNG() - ((1 - min(1, saisie_variables.get('IPVLOC', 0))) and (1 - min(1, saisie_variables.get('IPVLOC', 0))) * ABTPA()) - ABTMA()), 0)

    @cache_result
    def ZONIPTEFP():
        """
        8ZR recalcule avec 1731 ou non 
        """
        return ((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS'])))

    @cache_result
    def ZONIPTEFN():
        """
        8ZN recalcule avec 1731 ou non 
        """
        return ((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS'])))

    @cache_result
    def TMIB_TVENV():
        """
        le total rev prof et non prof  activit de vente de march tx eff. auto
        From TMIB_TVENi
        """
        return (saisie_variables.get('MIBVENV', 0) + saisie_variables.get('AUTOBICVV', 0) + saisie_variables.get('MIBNPVENV', 0) + saisie_variables.get('MIBGITEV', 0) + saisie_variables.get('LOCGITV', 0))

    @cache_result
    def TMIB_AVV():
        """
        abattements vente de marchandise tx eff.auto 
        From TMIB_AVi
        """
        return min(TMIB_TVENV(), max(MIN_MBIC, arr((TMIB_TVENV() and TX_MIBVEN and TMIB_TVENV() * TX_MIBVEN / 100))))

    @cache_result
    def TMIB_ABVV():
        """
        repartition de l abat rev professionnels vente de marchandise tx eff.
        From TMIB_ABVi
        """
        return max(0, arr((TMIB_AVV() and (saisie_variables.get('MIBVENV', 0) + saisie_variables.get('AUTOBICVV', 0)) and TMIB_AVV() * (saisie_variables.get('MIBVENV', 0) + saisie_variables.get('AUTOBICVV', 0)) / TMIB_TVENV())))

    @cache_result
    def TMIB_NETVV():
        """
        activit de vente de marchandises ou assimile tx eff. auto
        From TMIB_NETVi
        """
        return (saisie_variables.get('MIBVENV', 0) + saisie_variables.get('AUTOBICVV', 0) - TMIB_ABVV())

    @cache_result
    def TMIB_TVENC():
        """
        le total rev prof et non prof  activit de vente de march tx eff. auto
        From TMIB_TVENi
        """
        return (saisie_variables.get('MIBVENC', 0) + saisie_variables.get('AUTOBICVC', 0) + saisie_variables.get('MIBNPVENC', 0) + saisie_variables.get('MIBGITEC', 0) + saisie_variables.get('LOCGITC', 0))

    @cache_result
    def TMIB_AVC():
        """
        abattements vente de marchandise tx eff. auto
        From TMIB_AVi
        """
        return min(TMIB_TVENC(), max(MIN_MBIC, arr((TMIB_TVENC() and TX_MIBVEN and TMIB_TVENC() * TX_MIBVEN / 100))))

    @cache_result
    def TMIB_ABVC():
        """
        repartition de l abat rev professionnels vente de marchandise tx eff.
        From TMIB_ABVi
        """
        return max(0, arr((TMIB_AVC() and (saisie_variables.get('MIBVENC', 0) + saisie_variables.get('AUTOBICVC', 0)) and TMIB_AVC() * (saisie_variables.get('MIBVENC', 0) + saisie_variables.get('AUTOBICVC', 0)) / TMIB_TVENC())))

    @cache_result
    def TMIB_NETVC():
        """
        activit de vente de marchandises ou assimile tx eff. auto
        From TMIB_NETVi
        """
        return (saisie_variables.get('MIBVENC', 0) + saisie_variables.get('AUTOBICVC', 0) - TMIB_ABVC())

    @cache_result
    def TMIB_TVENP():
        """
        le total rev prof et non prof  activit de vente de march tx eff. auto
        From TMIB_TVENi
        """
        return (saisie_variables.get('MIBVENP', 0) + saisie_variables.get('AUTOBICVP', 0) + saisie_variables.get('MIBNPVENP', 0) + saisie_variables.get('MIBGITEP', 0) + saisie_variables.get('LOCGITP', 0))

    @cache_result
    def TMIB_AVP():
        """
        abattements vente de marchandise tx eff. auto
        From TMIB_AVi
        """
        return min(TMIB_TVENP(), max(MIN_MBIC, arr((TMIB_TVENP() and TX_MIBVEN and TMIB_TVENP() * TX_MIBVEN / 100))))

    @cache_result
    def TMIB_ABVP():
        """
        repartition de l abat rev professionnels vente de marchandise tx eff.
        From TMIB_ABVi
        """
        return max(0, arr((TMIB_AVP() and (saisie_variables.get('MIBVENP', 0) + saisie_variables.get('AUTOBICVP', 0)) and TMIB_AVP() * (saisie_variables.get('MIBVENP', 0) + saisie_variables.get('AUTOBICVP', 0)) / TMIB_TVENP())))

    @cache_result
    def TMIB_NETVP():
        """
        activit de vente de marchandises ou assimile tx eff. auto
        From TMIB_NETVi
        """
        return (saisie_variables.get('MIBVENP', 0) + saisie_variables.get('AUTOBICVP', 0) - TMIB_ABVP())

    @cache_result
    def TMIBNETVF():
        """
        activit de vente de marchandises prof. pour le foyer agregat IR tx eff
        """
        return somme([TMIB_NETVV(), TMIB_NETVC(), TMIB_NETVP()])

    @cache_result
    def TMIB_TPRESV():
        """
        le total rev prof et non prof prestations de services tx. eff. auto
        From TMIB_TPRESi
        """
        return (saisie_variables.get('MIBPRESV', 0) + saisie_variables.get('AUTOBICPV', 0) + saisie_variables.get('MIBNPPRESV', 0) + saisie_variables.get('MIBMEUV', 0))

    @cache_result
    def TMIB_APV():
        """
        Abattements prestations de service tx eff. auto
        From TMIB_APi
        """
        return min(TMIB_TPRESV(), max(MIN_MBIC, arr((TMIB_TPRESV() and TX_MIBPRES and TMIB_TPRESV() * TX_MIBPRES / 100))))

    @cache_result
    def TMIB_ABPV():
        """
        repartition de l abat rev  professionnels prestations tx eff. auto
        From TMIB_ABPi
        """
        return max(0, arr((TMIB_APV() and (saisie_variables.get('MIBPRESV', 0) + saisie_variables.get('AUTOBICPV', 0)) and TMIB_APV() * (saisie_variables.get('MIBPRESV', 0) + saisie_variables.get('AUTOBICPV', 0)) / TMIB_TPRESV())))

    @cache_result
    def TMIB_NETPV():
        """
        prestations de services net pro tx eff auto
        From TMIB_NETPi
        """
        return (saisie_variables.get('MIBPRESV', 0) + saisie_variables.get('AUTOBICPV', 0) - TMIB_ABPV())

    @cache_result
    def TMIB_TPRESC():
        """
        le total rev prof et non prof prestations de services tx eff. auto
        From TMIB_TPRESi
        """
        return (saisie_variables.get('MIBPRESC', 0) + saisie_variables.get('AUTOBICPC', 0) + saisie_variables.get('MIBNPPRESC', 0) + saisie_variables.get('MIBMEUC', 0))

    @cache_result
    def TMIB_APC():
        """
        Abattements prestations de service tx eff. auto
        From TMIB_APi
        """
        return min(TMIB_TPRESC(), max(MIN_MBIC, arr((TMIB_TPRESC() and TX_MIBPRES and TMIB_TPRESC() * TX_MIBPRES / 100))))

    @cache_result
    def TMIB_ABPC():
        """
        repartition de l abat rev  professionnels prestations tx eff. auto
        From TMIB_ABPi
        """
        return max(0, arr((TMIB_APC() and (saisie_variables.get('MIBPRESC', 0) + saisie_variables.get('AUTOBICPC', 0)) and TMIB_APC() * (saisie_variables.get('MIBPRESC', 0) + saisie_variables.get('AUTOBICPC', 0)) / TMIB_TPRESC())))

    @cache_result
    def TMIB_NETPC():
        """
        prestations de services net pro tx eff auto
        From TMIB_NETPi
        """
        return (saisie_variables.get('MIBPRESC', 0) + saisie_variables.get('AUTOBICPC', 0) - TMIB_ABPC())

    @cache_result
    def TMIB_TPRESP():
        """
        le total rev prof et non prof prestations de services  tx eff. auto
        From TMIB_TPRESi
        """
        return (saisie_variables.get('MIBPRESP', 0) + saisie_variables.get('AUTOBICPP', 0) + saisie_variables.get('MIBNPPRESP', 0) + saisie_variables.get('MIBMEUP', 0))

    @cache_result
    def TMIB_APP():
        """
        Abattements prestations de service tx eff. auto
        From TMIB_APi
        """
        return min(TMIB_TPRESP(), max(MIN_MBIC, arr((TMIB_TPRESP() and TX_MIBPRES and TMIB_TPRESP() * TX_MIBPRES / 100))))

    @cache_result
    def TMIB_ABPP():
        """
        repartition de l abat rev  professionnels prestations tx eff. auto
        From TMIB_ABPi
        """
        return max(0, arr((TMIB_APP() and (saisie_variables.get('MIBPRESP', 0) + saisie_variables.get('AUTOBICPP', 0)) and TMIB_APP() * (saisie_variables.get('MIBPRESP', 0) + saisie_variables.get('AUTOBICPP', 0)) / TMIB_TPRESP())))

    @cache_result
    def TMIB_NETPP():
        """
        prestations de services net pro tx eff auto
        From TMIB_NETPi
        """
        return (saisie_variables.get('MIBPRESP', 0) + saisie_variables.get('AUTOBICPP', 0) - TMIB_ABPP())

    @cache_result
    def TMIBNETPF():
        """
        activit de prest services profes. pour le foyer agr. IR tx eff auto
        """
        return somme([TMIB_NETPV(), TMIB_NETPC(), TMIB_NETPP()])

    @cache_result
    def TBICPF():
        """
        Revenu tot BIC mic. tx eff. auto
        """
        return (TMIBNETVF() + TMIBNETPF() + MIB_NETCT())

    @cache_result
    def TMIB_ABNPVV():
        """
        repartition de l abat rev  NON professionnels vente de march tx eff.
        From TMIB_ABNPVi
        """
        return ((max(0, arr((TMIB_AVV() and saisie_variables.get('MIBNPVENV', 0) and TMIB_AVV() * saisie_variables.get('MIBNPVENV', 0) / TMIB_TVENV()))) and max(0, arr((TMIB_AVV() and saisie_variables.get('MIBNPVENV', 0) and TMIB_AVV() * saisie_variables.get('MIBNPVENV', 0) / TMIB_TVENV()))) * positif((present(saisie_variables.get('MIBGITEV', 0)) + present(saisie_variables.get('LOCGITV', 0))))) + ((TMIB_AVV() - TMIB_ABVV()) and (TMIB_AVV() - TMIB_ABVV()) * (1 - positif((present(saisie_variables.get('MIBGITEV', 0)) + present(saisie_variables.get('LOCGITV', 0)))))))

    @cache_result
    def TMIB_NETNPVV():
        """
        activit de vente de marchandises ou assimile NON prof tx eff auto
        From TMIB_NETNPVi
        """
        return (saisie_variables.get('MIBNPVENV', 0) - TMIB_ABNPVV())

    @cache_result
    def TMIB_ABNPVC():
        """
        repartition de l abat rev  NON professionnels vente de march tx eff.
        From TMIB_ABNPVi
        """
        return ((max(0, arr((TMIB_AVC() and saisie_variables.get('MIBNPVENC', 0) and TMIB_AVC() * saisie_variables.get('MIBNPVENC', 0) / TMIB_TVENC()))) and max(0, arr((TMIB_AVC() and saisie_variables.get('MIBNPVENC', 0) and TMIB_AVC() * saisie_variables.get('MIBNPVENC', 0) / TMIB_TVENC()))) * positif((present(saisie_variables.get('MIBGITEC', 0)) + present(saisie_variables.get('LOCGITC', 0))))) + ((TMIB_AVC() - TMIB_ABVC()) and (TMIB_AVC() - TMIB_ABVC()) * (1 - positif((present(saisie_variables.get('MIBGITEC', 0)) + present(saisie_variables.get('LOCGITC', 0)))))))

    @cache_result
    def TMIB_NETNPVC():
        """
        activit de vente de marchandises ou assimile NON prof tx eff. auto
        From TMIB_NETNPVi
        """
        return (saisie_variables.get('MIBNPVENC', 0) - TMIB_ABNPVC())

    @cache_result
    def TMIB_ABNPVP():
        """
        repartition de l abat rev  NON professionnels vente de march tx eff.
        From TMIB_ABNPVi
        """
        return ((max(0, arr((TMIB_AVP() and saisie_variables.get('MIBNPVENP', 0) and TMIB_AVP() * saisie_variables.get('MIBNPVENP', 0) / TMIB_TVENP()))) and max(0, arr((TMIB_AVP() and saisie_variables.get('MIBNPVENP', 0) and TMIB_AVP() * saisie_variables.get('MIBNPVENP', 0) / TMIB_TVENP()))) * positif((present(saisie_variables.get('MIBGITEP', 0)) + present(saisie_variables.get('LOCGITP', 0))))) + ((TMIB_AVP() - TMIB_ABVP()) and (TMIB_AVP() - TMIB_ABVP()) * (1 - positif((present(saisie_variables.get('MIBGITEP', 0)) + present(saisie_variables.get('LOCGITP', 0)))))))

    @cache_result
    def TMIB_NETNPVP():
        """
        activit de vente de marchandises ou assimile NON prof tx eff. auto
        From TMIB_NETNPVi
        """
        return (saisie_variables.get('MIBNPVENP', 0) - TMIB_ABNPVP())

    @cache_result
    def TMIBNETNPVF():
        """
        activit de ventes non prof. pour le foyer agregat IR tx eff auto
        """
        return somme([TMIB_NETNPVV(), TMIB_NETNPVC(), TMIB_NETNPVP()])

    @cache_result
    def TMIB_ABNPPV():
        """
        repartition de l abat rev  NON professionnels prestations tx eff. auto
        From TMIB_ABNPPi
        """
        return ((max(0, arr((TMIB_APV() and saisie_variables.get('MIBNPPRESV', 0) and TMIB_APV() * saisie_variables.get('MIBNPPRESV', 0) / TMIB_TPRESV()))) and max(0, arr((TMIB_APV() and saisie_variables.get('MIBNPPRESV', 0) and TMIB_APV() * saisie_variables.get('MIBNPPRESV', 0) / TMIB_TPRESV()))) * present(saisie_variables.get('MIBMEUV', 0))) + ((TMIB_APV() - TMIB_ABPV()) and (TMIB_APV() - TMIB_ABPV()) * (1 - present(saisie_variables.get('MIBMEUV', 0)))))

    @cache_result
    def TMIB_NETNPPV():
        """
        prestations de services net  non pro tx eff auto
        From TMIB_NETNPPi
        """
        return (saisie_variables.get('MIBNPPRESV', 0) - TMIB_ABNPPV())

    @cache_result
    def TMIB_ABNPPC():
        """
        repartition de l abat rev  NON professionnels prestations tx eff. auto
        From TMIB_ABNPPi
        """
        return ((max(0, arr((TMIB_APC() and saisie_variables.get('MIBNPPRESC', 0) and TMIB_APC() * saisie_variables.get('MIBNPPRESC', 0) / TMIB_TPRESC()))) and max(0, arr((TMIB_APC() and saisie_variables.get('MIBNPPRESC', 0) and TMIB_APC() * saisie_variables.get('MIBNPPRESC', 0) / TMIB_TPRESC()))) * present(saisie_variables.get('MIBMEUC', 0))) + ((TMIB_APC() - TMIB_ABPC()) and (TMIB_APC() - TMIB_ABPC()) * (1 - present(saisie_variables.get('MIBMEUC', 0)))))

    @cache_result
    def TMIB_NETNPPC():
        """
        prestations de services net  non pro tx eff auto
        From TMIB_NETNPPi
        """
        return (saisie_variables.get('MIBNPPRESC', 0) - TMIB_ABNPPC())

    @cache_result
    def TMIB_ABNPPP():
        """
        repartition de l abat rev  NON professionnels prestations tx eff. auto
        From TMIB_ABNPPi
        """
        return ((max(0, arr((TMIB_APP() and saisie_variables.get('MIBNPPRESP', 0) and TMIB_APP() * saisie_variables.get('MIBNPPRESP', 0) / TMIB_TPRESP()))) and max(0, arr((TMIB_APP() and saisie_variables.get('MIBNPPRESP', 0) and TMIB_APP() * saisie_variables.get('MIBNPPRESP', 0) / TMIB_TPRESP()))) * present(saisie_variables.get('MIBMEUP', 0))) + ((TMIB_APP() - TMIB_ABPP()) and (TMIB_APP() - TMIB_ABPP()) * (1 - present(saisie_variables.get('MIBMEUP', 0)))))

    @cache_result
    def TMIB_NETNPPP():
        """
        prestations de services net  non pro tx eff auto
        From TMIB_NETNPPi
        """
        return (saisie_variables.get('MIBNPPRESP', 0) - TMIB_ABNPPP())

    @cache_result
    def TMIBNETNPPF():
        """
        activit de prest services non prof. pour le foyer agregat IR tx eff au
        """
        return somme([TMIB_NETNPPV(), TMIB_NETNPPC(), TMIB_NETNPPP()])

    @cache_result
    def TBICNPF():
        """
        Revenu tot BIC mic. tx eff. auto
        """
        return max(0, (somme([(BINTAV() + BINHTAV()), (BINTAC() + BINHTAC()), (BINTAP() + BINHTAP())]) + TMIBNETNPVF() + TMIBNETNPPF() + MIB_NETNPCT() - DEFNP()))

    @cache_result
    def TSPETOTV():
        """
        le rev total vous prof et non prof BNC regime special tx eff auto
        From TSPETOTi
        """
        return (saisie_variables.get('BNCPROV', 0) + saisie_variables.get('AUTOBNCV', 0) + saisie_variables.get('BNCNPV', 0))

    @cache_result
    def TSPEBASABV():
        """
        le rev total vous prof et non prof BNC reg spe base AB tx eff auto
        From TSPEBASABi
        """
        return TSPETOTV()

    @cache_result
    def TSPEABV():
        """
        Abattement forfaitaire vous BNC regime special tx eff auto
        From TSPEABi
        """
        return (arr((max(MIN_SPEBNC, (TSPEBASABV() and SPETXAB and TSPEBASABV() * SPETXAB / 100)) and max(MIN_SPEBNC, (TSPEBASABV() and SPETXAB and TSPEBASABV() * SPETXAB / 100)) * positif_ou_nul((TSPETOTV() - MIN_SPEBNC)))) + arr((min(MIN_SPEBNC, TSPEBASABV()) and min(MIN_SPEBNC, TSPEBASABV()) * positif((MIN_SPEBNC - TSPETOTV())))))

    @cache_result
    def TSPEABPV():
        """
        Abattement forfaitaire vous BNC regime special pro tx eff auto
        From TSPEABPi
        """
        return arr(((TSPEABV() and TSPEABV() * (saisie_variables.get('BNCPROV', 0) + saisie_variables.get('AUTOBNCV', 0))) and (TSPEABV() and TSPEABV() * (saisie_variables.get('BNCPROV', 0) + saisie_variables.get('AUTOBNCV', 0))) / TSPETOTV()))

    @cache_result
    def TSPENETPV():
        """
        Net imposable vous BNC regime special pro tx eff auto
        From TSPENETPi
        """
        return max(0, (saisie_variables.get('BNCPROV', 0) + saisie_variables.get('AUTOBNCV', 0) - TSPEABPV()))

    @cache_result
    def TSPETOTC():
        """
        le rev total conj prof et non prof BNC regime special tx eff auto
        From TSPETOTi
        """
        return (saisie_variables.get('BNCPROC', 0) + saisie_variables.get('AUTOBNCC', 0) + saisie_variables.get('BNCNPC', 0))

    @cache_result
    def TSPEBASABC():
        """
        le rev total cjt prof et non prof BNC reg spe base AB tx eff auto
        From TSPEBASABi
        """
        return TSPETOTC()

    @cache_result
    def TSPEABC():
        """
        Abattement forfaitaire conjoint BNC regime special tx eff auto
        From TSPEABi
        """
        return (arr((max(MIN_SPEBNC, (TSPEBASABC() and SPETXAB and TSPEBASABC() * SPETXAB / 100)) and max(MIN_SPEBNC, (TSPEBASABC() and SPETXAB and TSPEBASABC() * SPETXAB / 100)) * positif_ou_nul((TSPETOTC() - MIN_SPEBNC)))) + arr((min(MIN_SPEBNC, TSPEBASABC()) and min(MIN_SPEBNC, TSPEBASABC()) * positif((MIN_SPEBNC - TSPETOTC())))))

    @cache_result
    def TSPEABPC():
        """
        Abattement forfaitaire conjoint BNC regime special pro tx eff auto
        From TSPEABPi
        """
        return arr(((TSPEABC() and TSPEABC() * (saisie_variables.get('BNCPROC', 0) + saisie_variables.get('AUTOBNCC', 0))) and (TSPEABC() and TSPEABC() * (saisie_variables.get('BNCPROC', 0) + saisie_variables.get('AUTOBNCC', 0))) / TSPETOTC()))

    @cache_result
    def TSPENETPC():
        """
        Net imposable conj BNC regime special pro tx eff auto
        From TSPENETPi
        """
        return max(0, (saisie_variables.get('BNCPROC', 0) + saisie_variables.get('AUTOBNCC', 0) - TSPEABPC()))

    @cache_result
    def TSPETOTP():
        """
        le rev total pac prof et non prof BNC regime special tx eff auto
        From TSPETOTi
        """
        return (saisie_variables.get('BNCPROP', 0) + saisie_variables.get('AUTOBNCP', 0) + saisie_variables.get('BNCNPP', 0))

    @cache_result
    def TSPEBASABP():
        """
        le rev total pac prof et non prof BNC reg spe base AB tx eff auto
        From TSPEBASABi
        """
        return TSPETOTP()

    @cache_result
    def TSPEABP():
        """
        Abattement forfaitaire pac BNC regime special tx eff auto
        From TSPEABi
        """
        return (arr((max(MIN_SPEBNC, (TSPEBASABP() and SPETXAB and TSPEBASABP() * SPETXAB / 100)) and max(MIN_SPEBNC, (TSPEBASABP() and SPETXAB and TSPEBASABP() * SPETXAB / 100)) * positif_ou_nul((TSPETOTP() - MIN_SPEBNC)))) + arr((min(MIN_SPEBNC, TSPEBASABP()) and min(MIN_SPEBNC, TSPEBASABP()) * positif((MIN_SPEBNC - TSPETOTP())))))

    @cache_result
    def TSPEABPP():
        """
        Abattement forfaitaire pac BNC regime special pro tx eff auto
        From TSPEABPi
        """
        return arr(((TSPEABP() and TSPEABP() * (saisie_variables.get('BNCPROP', 0) + saisie_variables.get('AUTOBNCP', 0))) and (TSPEABP() and TSPEABP() * (saisie_variables.get('BNCPROP', 0) + saisie_variables.get('AUTOBNCP', 0))) / TSPETOTP()))

    @cache_result
    def TSPENETPP():
        """
        Net imposable pac BNC regime special pro tx eff auto
        From TSPENETPi
        """
        return max(0, (saisie_variables.get('BNCPROP', 0) + saisie_variables.get('AUTOBNCP', 0) - TSPEABPP()))

    @cache_result
    def TXSPEAAV():
        """
        Rev non comm. pro vous regime special tx eff auto
        From TXSPEAAi
        """
        return (saisie_variables.get('BNCREV', 0) + saisie_variables.get('XHONOAAV', 0) - (saisie_variables.get('BNCDEV', 0) and saisie_variables.get('BNCDEV', 0) * (1 - positif(base_variables['ART1731BIS']))))

    @cache_result
    def TXSPEHV():
        """
        Net imposable vous BNC regime special (prof.) exo tx eff
        From TXSPEHi
        """
        return (max(0, arr(((saisie_variables.get('BNHREV', 0) + saisie_variables.get('XHONOV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif(base_variables['ART1731BIS'])))) and (saisie_variables.get('BNHREV', 0) + saisie_variables.get('XHONOV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif(base_variables['ART1731BIS'])))) * MAJREV))) + min(0, (saisie_variables.get('BNHREV', 0) + saisie_variables.get('XHONOV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif(base_variables['ART1731BIS']))))))

    @cache_result
    def TXSPENETV():
        """
        Net imposable vous BNC regime special (prof. + non prof.) tx eff
        From TXSPENETi
        """
        return (TXSPEAAV() + TXSPEHV())

    @cache_result
    def TXSPEAAC():
        """
        Rev non comm. pro conjoint regime special tx eff auto
        From TXSPEAAi
        """
        return (saisie_variables.get('BNCREC', 0) + saisie_variables.get('XHONOAAC', 0) - (saisie_variables.get('BNCDEC', 0) and saisie_variables.get('BNCDEC', 0) * (1 - positif(base_variables['ART1731BIS']))))

    @cache_result
    def TXSPEHC():
        """
        Net imposable conjoint BNC regime special (prof.) exo tx eff
        From TXSPEHi
        """
        return (max(0, arr(((saisie_variables.get('BNHREC', 0) + saisie_variables.get('XHONOC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif(base_variables['ART1731BIS'])))) and (saisie_variables.get('BNHREC', 0) + saisie_variables.get('XHONOC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif(base_variables['ART1731BIS'])))) * MAJREV))) + min(0, (saisie_variables.get('BNHREC', 0) + saisie_variables.get('XHONOC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif(base_variables['ART1731BIS']))))))

    @cache_result
    def TXSPENETC():
        """
        Net imposable conjoint BNC regime special (prof. + non prof.) tx eff
        From TXSPENETi
        """
        return (TXSPEAAC() + TXSPEHC())

    @cache_result
    def TXSPEAAP():
        """
        Rev non comm. pro PAC regime special tx eff auto
        From TXSPEAAi
        """
        return (saisie_variables.get('BNCREP', 0) + saisie_variables.get('XHONOAAP', 0) - (saisie_variables.get('BNCDEP', 0) and saisie_variables.get('BNCDEP', 0) * (1 - positif(base_variables['ART1731BIS']))))

    @cache_result
    def TXSPEHP():
        """
        Net imposable pac BNC regime special (prof.) exo tx eff
        From TXSPEHi
        """
        return (max(0, arr(((saisie_variables.get('BNHREP', 0) + saisie_variables.get('XHONOP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif(base_variables['ART1731BIS'])))) and (saisie_variables.get('BNHREP', 0) + saisie_variables.get('XHONOP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif(base_variables['ART1731BIS'])))) * MAJREV))) + min(0, (saisie_variables.get('BNHREP', 0) + saisie_variables.get('XHONOP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif(base_variables['ART1731BIS']))))))

    @cache_result
    def TXSPENETP():
        """
        Net imposable pac BNC regime special (prof. + non prof.) tx eff
        From TXSPENETi
        """
        return (TXSPEAAP() + TXSPEHP())

    @cache_result
    def TXSPENET():
        """
        Net imposable total BNC regime special prof avec exo tx eff auto
        """
        return somme([TXSPENETV(), TXSPENETC(), TXSPENETP()])

    @cache_result
    def TSPEABNPV():
        """
        Abattement forfaitaire vous BNC regime special non pro tx eff auto
        From TSPEABNPi
        """
        return (TSPEABV() - TSPEABPV())

    @cache_result
    def TSPENETNPV():
        """
        Net imposable vous BNC regime special non pro tx eff auto
        From TSPENETNPi
        """
        return max(0, (saisie_variables.get('BNCNPV', 0) - TSPEABNPV()))

    @cache_result
    def TSPEABNPC():
        """
        Abattement forfaitaire conj BNC regime special non pro tx eff auto
        From TSPEABNPi
        """
        return (TSPEABC() - TSPEABPC())

    @cache_result
    def TSPENETNPC():
        """
        Net imposable conj BNC regime special non pro tx eff auto
        From TSPENETNPi
        """
        return max(0, (saisie_variables.get('BNCNPC', 0) - TSPEABNPC()))

    @cache_result
    def TSPEABNPP():
        """
        Abattement forfaitaire pac BNC regime special non pro tx eff auto
        From TSPEABNPi
        """
        return (TSPEABP() - TSPEABPP())

    @cache_result
    def TSPENETNPP():
        """
        Net imposable pac BNC regime special non pro tx eff auto
        From TSPENETNPi
        """
        return max(0, (saisie_variables.get('BNCNPP', 0) - TSPEABNPP()))

    @cache_result
    def TBNN():
        """
        Revenu tot BNC mic. tx eff. auto
        """
        return (somme([TSPENETPV(), TSPENETPC(), TSPENETPP()]) + TXSPENET() + max(0, (somme([TSPENETNPV(), TSPENETNPC(), TSPENETNPP()]) + NOCEPIMP() - ((min(saisie_variables.get('DABNCNP6', 0), (base_variables['DABNCNP61731'] + 0)) and min(saisie_variables.get('DABNCNP6', 0), (base_variables['DABNCNP61731'] + 0)) * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('DABNCNP6', 0) and saisie_variables.get('DABNCNP6', 0) * (1 - base_variables['ART1731BIS']))) - ((min(saisie_variables.get('DABNCNP5', 0), (base_variables['DABNCNP51731'] + 0)) and min(saisie_variables.get('DABNCNP5', 0), (base_variables['DABNCNP51731'] + 0)) * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('DABNCNP5', 0) and saisie_variables.get('DABNCNP5', 0) * (1 - base_variables['ART1731BIS']))) - ((min(saisie_variables.get('DABNCNP4', 0), (base_variables['DABNCNP41731'] + 0)) and min(saisie_variables.get('DABNCNP4', 0), (base_variables['DABNCNP41731'] + 0)) * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('DABNCNP4', 0) and saisie_variables.get('DABNCNP4', 0) * (1 - base_variables['ART1731BIS']))) - ((min(saisie_variables.get('DABNCNP3', 0), (base_variables['DABNCNP31731'] + 0)) and min(saisie_variables.get('DABNCNP3', 0), (base_variables['DABNCNP31731'] + 0)) * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('DABNCNP3', 0) and saisie_variables.get('DABNCNP3', 0) * (1 - base_variables['ART1731BIS']))) - ((min(saisie_variables.get('DABNCNP2', 0), (base_variables['DABNCNP21731'] + 0)) and min(saisie_variables.get('DABNCNP2', 0), (base_variables['DABNCNP21731'] + 0)) * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('DABNCNP2', 0) and saisie_variables.get('DABNCNP2', 0) * (1 - base_variables['ART1731BIS']))) - ((min(saisie_variables.get('DABNCNP1', 0), (base_variables['DABNCNP11731'] + 0)) and min(saisie_variables.get('DABNCNP1', 0), (base_variables['DABNCNP11731'] + 0)) * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('DABNCNP1', 0) and saisie_variables.get('DABNCNP1', 0) * (1 - base_variables['ART1731BIS']))))) + SPENETCT() + SPENETNPCT())

    @cache_result
    def TTSPRT():
        """
        Salaires, pensions imposables TOTAL tx eff.
        """
        return (TTSNNV() + TPRRV() + TTSNNC() + TPRRC() + TTSNN1() + TPRR1() + TTSNN2() + TPRR2() + TTSNN3() + TPRR3() + TTSNN4() + TPRR4())

    @cache_result
    def TTSPR():
        """
        Traitement salaire pension rentes imposables tx eff.
        """
        return ((TTSPRT() and TTSPRT() * (1 - base_variables['ART1731BIS'])) + (base_variables['TTSPRT1731'] and base_variables['TTSPRT1731'] * base_variables['ART1731BIS']) + RVTOT())

    @cache_result
    def PVBAR():
        """
        Partie de PV passant au bareme 
        """
        return max(0, ((saisie_variables.get('BPVRCM', 0) + saisie_variables.get('COD3SG', 0) + saisie_variables.get('COD3SL', 0) + saisie_variables.get('ABDETPLUS', 0) + saisie_variables.get('ABIMPPV', 0) + inf((saisie_variables.get('CODRVG', 0) and saisie_variables.get('CODRVG', 0) / saisie_variables.get('CODNVG', 0)))) - (saisie_variables.get('DPVRCM', 0) + saisie_variables.get('COD3SH', 0) + saisie_variables.get('COD3SM', 0) + saisie_variables.get('ABDETMOINS', 0) + saisie_variables.get('ABIMPMV', 0))))

    @cache_result
    def TEFFREVINTER():
        """
        Revenu intermediaire tx eff. auto
        """
        return (INDTEFF() and INDTEFF() * ((TBICPF() + TBICNPF() + TBNN() + BIHTAV() + BIHTAC() + BIHTAP() + BIPTAV() + BIPTAC() + BIPTAP() + saisie_variables.get('ESFP', 0) + TTSPR() + RCM() + PLOCNETF() + NPLOCNETF() + (RFNTEO() and RFNTEO() * saisie_variables.get('V_INDTEO', 0)) + (RRFI() and RRFI() * (1 - saisie_variables.get('V_INDTEO', 0))) + PVBAR() + max(BANOR(), 0) + REB() + (min(BANOR(), 0) and min(BANOR(), 0) * positif((SEUIL_IMPDEFBA + 1 - SHBA() - (REVTP() - BA1()) - REVQTOTQHT())))) + saisie_variables.get('R1649', 0) - DAR()))

    @cache_result
    def TEFFREV():
        """
        Revenu tot BIC mic. BNC reg. spec. tx eff. auto
        """
        return (INDTEFF() and INDTEFF() * ((TBICPF() + TBICNPF() + TBNN() + BIHTAV() + BIHTAC() + BIHTAP() + BIPTAV() + BIPTAC() + BIPTAP() + saisie_variables.get('ESFP', 0) + TTSPR() + RCM() + PLOCNETF() + NPLOCNETF() + (RFNTEO() and RFNTEO() * saisie_variables.get('V_INDTEO', 0)) + (RRFI() and RRFI() * (1 - saisie_variables.get('V_INDTEO', 0))) + saisie_variables.get('BPVRCM', 0) + saisie_variables.get('PVTAXSB', 0) + (saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + saisie_variables.get('COD3VE', 0) + ((saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) and (saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))) + max(BANOR(), 0) + REB() + (min(BANOR(), 0) and min(BANOR(), 0) * positif((SEUIL_IMPDEFBA + 1 - SHBA() - (REVTP() - BA1()) - REVQTOTQHT())))) + saisie_variables.get('R1649', 0)))

    @cache_result
    def RBGTEF():
        """
        Revenu brut global tx effectif
        """
        return (((1 - positif((TEFFREV() + saisie_variables.get('PREREV', 0) - DAR()))) and (1 - positif((TEFFREV() + saisie_variables.get('PREREV', 0) - DAR()))) * min(0, (TEFFREV() + saisie_variables.get('PREREV', 0) - DAR() + TOTALQUO()))) + (positif((TEFFREV() + saisie_variables.get('PREREV', 0) - DAR())) and positif((TEFFREV() + saisie_variables.get('PREREV', 0) - DAR())) * (TEFFREV() + saisie_variables.get('PREREV', 0) - DAR())))

    @cache_result
    def RPALETEF():
        """
        Pension enfants majeurs : montant retenu tx eff
        """
        return (max(0, min(somme([(min(saisie_variables.get('NCHENF1', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF1', 0) and saisie_variables.get('CHENF1', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF2', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF2', 0) and saisie_variables.get('CHENF2', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF3', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF3', 0) and saisie_variables.get('CHENF3', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF4', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF4', 0) and saisie_variables.get('CHENF4', 0) * MAJREV)), LIM_PENSALENF))]), (RBGTEF() - DDCSG() + TOTALQUO() - SDD()))) and max(0, min(somme([(min(saisie_variables.get('NCHENF1', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF1', 0) and saisie_variables.get('CHENF1', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF2', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF2', 0) and saisie_variables.get('CHENF2', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF3', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF3', 0) and saisie_variables.get('CHENF3', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF4', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF4', 0) and saisie_variables.get('CHENF4', 0) * MAJREV)), LIM_PENSALENF))]), (RBGTEF() - DDCSG() + TOTALQUO() - SDD()))) * (1 - V_CNR()))

    @cache_result
    def RPALPTEF():
        """
        Autres pensions alimentaires tx eff
        """
        return (max(min(TOTPA(), (RBGTEF() - RPALETEF() - DDCSG() + TOTALQUO() - SDD())), 0) and max(min(TOTPA(), (RBGTEF() - RPALETEF() - DDCSG() + TOTALQUO() - SDD())), 0) * (1 - V_CNR()))

    @cache_result
    def RFACCTEF():
        """
        Frais d'accueil retenu tx eff.
        """
        return max(min(DFA(), (RBGTEF() - RPALETEF() - RPALPTEF() - DDCSG() + TOTALQUO() - SDD())), 0)

    @cache_result
    def RDDIVTEF():
        """
        Deductions diverses
        """
        return max(min((DEDIV() and DEDIV() * (1 - V_CNR())), (RBGTEF() - RPALETEF() - RPALPTEF() - RFACCTEF() - DDCSG() + TOTALQUO() - SDD())), 0)

    @cache_result
    def APERPVTEF():
        """
        bse retenu PERP tx eff
        """
        return ((1 - V_CNR()) and (1 - V_CNR()) * max(min(RPERPV(), (RBGTEF() - RPALETEF() - RPALPTEF() - RFACCTEF() - RDDIVTEF() - DDCSG() + TOTALQUO() - SDD())), 0))

    @cache_result
    def APERPCTEF():
        """
        bse retenu PERP tx eff
        """
        return ((1 - V_CNR()) and (1 - V_CNR()) * max(min(RPERPC(), (RBGTEF() - RPALETEF() - RPALPTEF() - RFACCTEF() - RDDIVTEF() - DDCSG() + TOTALQUO() - SDD() - APERPVTEF())), 0))

    @cache_result
    def APERPPTEF():
        """
        bse retenu PERP tx eff
        """
        return ((1 - V_CNR()) and (1 - V_CNR()) * max(min(RPERPP(), (RBGTEF() - RPALETEF() - RPALPTEF() - RFACCTEF() - RDDIVTEF() - DDCSG() + TOTALQUO() - SDD() - APERPVTEF() - APERPCTEF())), 0))

    @cache_result
    def RRBGTEF():
        """
        Revenu global tx eff
        """
        return (((TEFFREV() - DAR()) and (TEFFREV() - DAR()) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))))) + (positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) and positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) * (saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))))

    @cache_result
    def NUREPARTEF():
        """
        Deduction grosses reparations nus-proprietaires tx eff
        """
        return (min(NUPROPT(), max(0, min(PLAF_NUREPAR, (RRBGTEF() - RPALETEF() - RPALPTEF() - RFACCTEF() - RDDIVTEF() - APERPVTEF() - APERPCTEF() - APERPPTEF() - DDCSG() + TOTALQUO() - SDD())))) and min(NUPROPT(), max(0, min(PLAF_NUREPAR, (RRBGTEF() - RPALETEF() - RPALPTEF() - RFACCTEF() - RDDIVTEF() - APERPVTEF() - APERPCTEF() - APERPPTEF() - DDCSG() + TOTALQUO() - SDD())))) * (1 - V_CNR()))

    @cache_result
    def RBG2TEF():
        """
        Revenu brut  tx effectif
        """
        return (RBGTEF() - max(0, min(RBGTEF(), DDCSG())))

    @cache_result
    def RBLTEF():
        """
        Revenu brut  tx effectif
        """
        return ((RBG2TEF() - (max(0, min(RBG2TEF(), (DPA() + DFA() + DEDIV() + APERPVTEF() + APERPCTEF() + APERPPTEF() + NUREPARTEF()))) and max(0, min(RBG2TEF(), (DPA() + DFA() + DEDIV() + APERPVTEF() + APERPCTEF() + APERPPTEF() + NUREPARTEF()))) * (1 - V_CNR())) - (min(RBG2TEF(), saisie_variables.get('V_8ZT', 0)) and min(RBG2TEF(), saisie_variables.get('V_8ZT', 0)) * V_CR2())) and (RBG2TEF() - (max(0, min(RBG2TEF(), (DPA() + DFA() + DEDIV() + APERPVTEF() + APERPCTEF() + APERPPTEF() + NUREPARTEF()))) and max(0, min(RBG2TEF(), (DPA() + DFA() + DEDIV() + APERPVTEF() + APERPCTEF() + APERPPTEF() + NUREPARTEF()))) * (1 - V_CNR())) - (min(RBG2TEF(), saisie_variables.get('V_8ZT', 0)) and min(RBG2TEF(), saisie_variables.get('V_8ZT', 0)) * V_CR2())) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def RNGTEF():
        """
        Revenu net global tx effectif
        """
        return ((null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((V_CR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)) * saisie_variables.get('IPVLOC', 0)) + ((1 - (null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)))) and (1 - (null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)))) * RBLTEF()))

    @cache_result
    def NABTEF():
        """
        Nombre abattements personnes agees tx eff
        """
        return (min(max((LIM_ABTRNGDBL + 1 - (RNGTEF() + TOTALQUO() - SDD() - SDC())), 0), 1) + min(max((LIM_ABTRNGSIMP + 1 - (RNGTEF() + TOTALQUO() - SDD() - SDC())), 0), 1))

    @cache_result
    def ABTPATEF():
        """
        Abattement personnes agees ou invalides tx eff
        """
        return (NDA() and NABTEF() and ABAT_UNVIEUX and NDA() * NABTEF() * ABAT_UNVIEUX * (1 - V_CNR()))

    @cache_result
    def TEFFREVTOT():
        """
        Revenu tot BIC mic. BNC reg. spec. tx eff. auto
        """
        return (INDTEFF() and INDTEFF() * ((TBICPF() + TBICNPF() + TBNN() + BIHTAV() + BIHTAC() + BIHTAP() + BIPTAV() + BIPTAC() + BIPTAP() + saisie_variables.get('ESFP', 0) + TTSPR() + RCM() + PLOCNETF() + NPLOCNETF() + (RFNTEO() and RFNTEO() * saisie_variables.get('V_INDTEO', 0)) + (RRFI() and RRFI() * (1 - saisie_variables.get('V_INDTEO', 0))) + saisie_variables.get('BPVRCM', 0) + saisie_variables.get('PVTAXSB', 0) + (saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + saisie_variables.get('COD3VE', 0) + ((saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) and (saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))) + max(BANOR(), 0) + REB() + (min(BANOR(), 0) and min(BANOR(), 0) * positif((SEUIL_IMPDEFBA + 1 - SHBA() - (REVTP() - BA1()) - REVQTOTQHT())))) + saisie_variables.get('R1649', 0) - DAR() - max(0, min(TEFFREVINTER(), (DPA() + DFA() + DEDIV() + APERPVTEF() + APERPCTEF() + APERPPTEF() + NUREPARTEF() + ABTPATEF() + ABTMA() + DDCSG())))))

    @cache_result
    def RB01():
        """
        Revenu imposable pour le calcul du quotient familial
        """
        return ((RI1() and RI1() * (1 - positif((((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS']))) + ((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS']))) + INDTEFF())))) + (ZONIPTEFP() + (((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) and ((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((((saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) and (saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) and (((saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) and (saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))) + (saisie_variables.get('RFROBOR', 0) and saisie_variables.get('V_INDTEO', 0) and saisie_variables.get('RFROBOR', 0) * saisie_variables.get('V_INDTEO', 0) * positif(ZONIPTEFP()))) + (TEFFREVTOT() and (1 - positif((ZONIPTEFP() + (((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) and ((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((((saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) and (saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) and (((saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) and (saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) * null((2 - saisie_variables.get('FLAG_EXIT', 0))))))) and TEFFREVTOT() * (1 - positif((ZONIPTEFP() + (((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) and ((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((((saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) and (saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) and (((saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) and (saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) * null((2 - saisie_variables.get('FLAG_EXIT', 0))))))) * INDTEFF()))

    @cache_result
    def BOOL_0AZ():
        """
        booleen : vaut 1 si vauf dans  l annee
        """
        return null(((saisie_variables.get('V_0AZ', 0) - (inf((saisie_variables.get('V_0AZ', 0) and saisie_variables.get('V_0AZ', 0) / 10000)) and inf((saisie_variables.get('V_0AZ', 0) and saisie_variables.get('V_0AZ', 0) / 10000)) * 10000)) - saisie_variables.get('V_ANREV', 0)))

    @cache_result
    def EAC():
        """
        Nombre d'enfants a charge pour calcul du nombre de parts
        """
        return (saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0))

    @cache_result
    def NSM():
        """
        Nombre de parts du @ la situation matrimoniale
        """
        return (1 + BOOL_0AM() + (saisie_variables.get('V_0AV', 0) and saisie_variables.get('V_0AV', 0) * min((BOOL_0AZ() + EAC() + saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0CR', 0)), 1)) + (saisie_variables.get('V_0AV', 0) and BOOL_0AZ() and saisie_variables.get('V_0AW', 0) and (1 - saisie_variables.get('V_0AP', 0)) and (1 - saisie_variables.get('V_0AF', 0)) and saisie_variables.get('V_0AV', 0) * BOOL_0AZ() * saisie_variables.get('V_0AW', 0) * (1 - saisie_variables.get('V_0AP', 0)) * (1 - saisie_variables.get('V_0AF', 0)) / 2))

    @cache_result
    def PAC():
        """
        Nombre de personnes a charge
        """
        return (EAC() + saisie_variables.get('V_0CR', 0))

    @cache_result
    def NPA():
        """
        Nombre de parts du aux personnes @ charge
        """
        return (PAC() - (0.5 and 0.5 * min(PAC(), 2)))

    @cache_result
    def NIN():
        """
        Nombre de parts du aux invalides
        """
        return ((saisie_variables.get('V_0AP', 0) + saisie_variables.get('V_0AF', 0) + saisie_variables.get('V_0CG', 0) + saisie_variables.get('V_0CR', 0)) and (saisie_variables.get('V_0AP', 0) + saisie_variables.get('V_0AF', 0) + saisie_variables.get('V_0CG', 0) + saisie_variables.get('V_0CR', 0)) * 0.5)

    @cache_result
    def NPS():
        """
        1/2 part supplementaire pour personnes seules avec personnes a charge
        """
        return (positif(PAC()) and saisie_variables.get('V_0BT', 0) and positif((2 - NSM())) and positif(PAC()) * saisie_variables.get('V_0BT', 0) * positif((2 - NSM())) * 0.5)

    @cache_result
    def NSA():
        """
        1/2 part supplementaire correspondant au plafond de 6100F
        """
        return ((1 - positif((PAC() + saisie_variables.get('V_0CH', 0)))) and min((saisie_variables.get('V_0AG', 0) + ((saisie_variables.get('V_0AL', 0) and saisie_variables.get('V_0AL', 0) * (1 - positif(saisie_variables.get('V_0AN', 0)))) and (saisie_variables.get('V_0AL', 0) and saisie_variables.get('V_0AL', 0) * (1 - positif(saisie_variables.get('V_0AN', 0)))) * (1 - positif((positif(saisie_variables.get('V_0AW', 0)) and positif(saisie_variables.get('V_0AW', 0)) * positif_ou_nul((AGV() - LIM_AGE_LET_S)))))) + (saisie_variables.get('V_0AW', 0) and saisie_variables.get('V_0AW', 0) * positif(max((AGV() + 1 - LIM_AGE_LET_S), (AGC() + 1 - LIM_AGE_LET_S))))), 1) and (1 - saisie_variables.get('V_0AP', 0)) and positif((2 - NSM())) and (1 - positif((PAC() + saisie_variables.get('V_0CH', 0)))) * min((saisie_variables.get('V_0AG', 0) + ((saisie_variables.get('V_0AL', 0) and saisie_variables.get('V_0AL', 0) * (1 - positif(saisie_variables.get('V_0AN', 0)))) and (saisie_variables.get('V_0AL', 0) and saisie_variables.get('V_0AL', 0) * (1 - positif(saisie_variables.get('V_0AN', 0)))) * (1 - positif((positif(saisie_variables.get('V_0AW', 0)) and positif(saisie_variables.get('V_0AW', 0)) * positif_ou_nul((AGV() - LIM_AGE_LET_S)))))) + (saisie_variables.get('V_0AW', 0) and saisie_variables.get('V_0AW', 0) * positif(max((AGV() + 1 - LIM_AGE_LET_S), (AGC() + 1 - LIM_AGE_LET_S))))), 1) * (1 - saisie_variables.get('V_0AP', 0)) * positif((2 - NSM())) * 0.5)

    @cache_result
    def NCC():
        """
        1/2 part pour carte de combattant
        """
        return (saisie_variables.get('V_0AS', 0) and BOOL_0AM() and (1 - positif((saisie_variables.get('V_0AP', 0) + saisie_variables.get('V_0AF', 0)))) and 0.5 and saisie_variables.get('V_0AS', 0) * BOOL_0AM() * (1 - positif((saisie_variables.get('V_0AP', 0) + saisie_variables.get('V_0AF', 0)))) * 0.5 * positif(max((AGV() + 1 - LIM_AGE_LET_S), (AGC() + 1 - LIM_AGE_LET_S))))

    @cache_result
    def NSP():
        """
        Nombre de parts du @ diverses situations particuli}res
        """
        return (NPS() + NSA() + NCC())

    @cache_result
    def NBQAR1():
        """
        composant de NBQAR(NBP residence alternee)
        """
        return (null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) + 0)) and null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) + 0)) * ((1 and 2 and (saisie_variables.get('V_0CH', 0) - 2) and 1 / 2 * (saisie_variables.get('V_0CH', 0) - 2) * positif((saisie_variables.get('V_0CH', 0) - 2))) + (1 and 4 and 1 / 4 * positif((saisie_variables.get('V_0CH', 0) + 0))) + (1 and 4 and 1 / 4 * positif((saisie_variables.get('V_0CH', 0) - 1)))))

    @cache_result
    def NBQAR2():
        """
        composant de NBQAR(NBP residence alternee)
        """
        return (null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) - 1)) and null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) - 1)) * ((1 and 2 and (saisie_variables.get('V_0CH', 0) - 1) and 1 / 2 * (saisie_variables.get('V_0CH', 0) - 1) * positif((saisie_variables.get('V_0CH', 0) - 1))) + (1 and 4 and 1 / 4 * positif((saisie_variables.get('V_0CH', 0) + 0)))))

    @cache_result
    def NBQAR3():
        """
        composant de NBQAR(NBP residence alternee)
        """
        return (positif_ou_nul((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) - 2)) and 1 and 2 and positif_ou_nul((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) - 2)) * 1 / 2 * saisie_variables.get('V_0CH', 0))

    @cache_result
    def NBQAR4():
        """
        composant de NBQAR(NBP residence alternee)
        """
        return (1 and 4 and 1 / 4 * saisie_variables.get('V_0CI', 0))

    @cache_result
    def BOOL_0BT():
        """
        booleen : case OBT retenue
        """
        return (positif((saisie_variables.get('V_0BT', 0) + 0)) and positif((saisie_variables.get('V_0BT', 0) + 0)) * positif((saisie_variables.get('V_0AC', 0) + saisie_variables.get('V_0AD', 0) + 0)))

    @cache_result
    def NBQART():
        """
        composant de NBQAR: cas case OBT (NBP residence alternee)
        """
        return (BOOL_0BT() and null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) + 0)) and BOOL_0BT() * null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) + 0)) * ((1 and 4 and 1 / 4 * null((saisie_variables.get('V_0CH', 0) - 1))) + (1 and 2 and 1 / 2 * positif_ou_nul((saisie_variables.get('V_0CH', 0) - 2)))))

    @cache_result
    def NBQAR():
        """
        Nombre de parts relatif a la residence alternee
        """
        return (NBQAR1() + NBQAR2() + NBQAR3() + NBQAR4() + NBQART())

    @cache_result
    def NBPT():
        """
        Nombre de parts
        """
        return (((NSM() + NPA() + NIN() + NSP() + NBQAR()) and (NSM() + NPA() + NIN() + NSP() + NBQAR()) * 10) and ((NSM() + NPA() + NIN() + NSP() + NBQAR()) and (NSM() + NPA() + NIN() + NSP() + NBQAR()) * 10) / 10)

    @cache_result
    def NB1():
        """
        Nombre de parts NBP
        """
        return NBPT()

    @cache_result
    def QF011():
        """
        Quotient familial
        From QF0yz
        """
        return (arr(RB01()) and arr(RB01()) / NB1())

    @cache_result
    def TAUX1():
        """
        calcul des droits simple: TAUX 1 tranche
        """
        return (((TX_BAR1 and TX_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (TX_BAR1A and TX_BAR1A * saisie_variables.get('V_ANC_BAR', 0))) - TX_BAR0)

    @cache_result
    def TAUX2():
        """
        calcul des droits simple: TAUX 2 tranche
        """
        return (TX_BAR2 - ((TX_BAR1 and TX_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (TX_BAR1A and TX_BAR1A * saisie_variables.get('V_ANC_BAR', 0))))

    @cache_result
    def TAUX3():
        """
        calcul des droits simple: TAUX 3 tranche
        """
        return (TX_BAR3 - TX_BAR2)

    @cache_result
    def TAUX4():
        """
        calcul des droits simple: TAUX 4 tranche
        """
        return (TX_BAR4 - TX_BAR3)

    @cache_result
    def TAUX5():
        """
        calcul des droits simple: TAUX 5 tranche
        """
        return (TX_BAR5 - TX_BAR4)

    @cache_result
    def DS011():
        """
        Droits simples issus du bareme
        From DSxyz
        """
        return ((max((QF011() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF011() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX1() and TAUX1() / 100)) + (max((QF011() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF011() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX2() and TAUX2() / 100)) + (max((QF011() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF011() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX3() and TAUX3() / 100)) + (max((QF011() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF011() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX4() and TAUX4() / 100)) + (max((QF011() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF011() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX5() and TAUX5() / 100)))

    @cache_result
    def IS011():
        """
        Droits simples avant plafonnement du quotient familial
        From ISxyz
        """
        return arr((DS011() and DS011() * NB1()))

    @cache_result
    def NB2():
        """
        Nombre de parts situation de famille
        """
        return (1 + BOOL_0AM() + (BOOL_0AZ() and BOOL_0AZ() * saisie_variables.get('V_0AV', 0)))

    @cache_result
    def QF021():
        """
        Quotient familial
        From QF0yz
        """
        return (arr(RB01()) and arr(RB01()) / NB2())

    @cache_result
    def DS021():
        """
        Droits simples issus du bareme
        From DSxyz
        """
        return ((max((QF021() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF021() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX1() and TAUX1() / 100)) + (max((QF021() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF021() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX2() and TAUX2() / 100)) + (max((QF021() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF021() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX3() and TAUX3() / 100)) + (max((QF021() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF021() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX4() and TAUX4() / 100)) + (max((QF021() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF021() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX5() and TAUX5() / 100)))

    @cache_result
    def IS021():
        """
        Droits simples avant plafonnement du quotient familial
        From ISxyz
        """
        return arr((DS021() and DS021() * NB2()))

    @cache_result
    def VAR0BT():
        """
        variable 0bt saisie seule ou avec indication veuf
        """
        return (1 - positif((null((saisie_variables.get('V_0BT', 0) + 0)) + positif((saisie_variables.get('V_0BT', 0) and saisie_variables.get('V_0BT', 0) * saisie_variables.get('V_0AV', 0))))))

    @cache_result
    def NBMIQAR():
        """
        nb de quarts de part supplementiare pour les couples
        """
        return (null(VAR0BT()) and null(VAR0BT()) * ((null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) + 0)) and null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) + 0)) * ((2 and (saisie_variables.get('V_0CH', 0) - 2) and 2 * (saisie_variables.get('V_0CH', 0) - 2) * positif((saisie_variables.get('V_0CH', 0) - 2))) + (1 and 1 * positif((saisie_variables.get('V_0CH', 0) + 0))) + (1 and 1 * positif((saisie_variables.get('V_0CH', 0) - 1))))) + (null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) - 1)) and null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) - 1)) * ((2 and (saisie_variables.get('V_0CH', 0) - 1) and 2 * (saisie_variables.get('V_0CH', 0) - 1) * positif((saisie_variables.get('V_0CH', 0) - 1))) + (1 and 1 * positif((saisie_variables.get('V_0CH', 0) + 0))))) + (positif_ou_nul((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) - 2)) and 2 and positif_ou_nul((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) - 2)) * 2 * saisie_variables.get('V_0CH', 0))))

    @cache_result
    def NB0BTMIQAR():
        """
        nb de quarts de part supplementiare pour les 0BT garde alt 1 2em enf
        """
        return (null((1 - VAR0BT())) and null((1 - VAR0BT())) * (null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) + 0)) and 2 and (saisie_variables.get('V_0CH', 0) - 2) and null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) + 0)) * 2 * (saisie_variables.get('V_0CH', 0) - 2) * positif((saisie_variables.get('V_0CH', 0) - 2))))

    @cache_result
    def NB0BTQAR():
        """
        nb de quarts de part supplementiare pour les 0BT garde alt et exclus
        """
        return (null((1 - VAR0BT())) and null((1 - VAR0BT())) * ((null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) - 1)) and null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) - 1)) * ((2 and (saisie_variables.get('V_0CH', 0) - 1) and 2 * (saisie_variables.get('V_0CH', 0) - 1) * positif((saisie_variables.get('V_0CH', 0) - 1))) + (1 and 1 * positif((saisie_variables.get('V_0CH', 0) + 0))))) + (positif_ou_nul((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) - 2)) and 2 and positif_ou_nul((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) - 2)) * 2 * saisie_variables.get('V_0CH', 0))))

    @cache_result
    def NB0BT2MIQAR():
        """
        nb de quarts de part supplementiare pour les 0BT garde alt +2 enfants
        """
        return (null((1 - VAR0BT())) and null((1 - VAR0BT())) * (null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) + 0)) and null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) + 0)) * (positif((saisie_variables.get('V_0CH', 0) + 0)) + positif((saisie_variables.get('V_0CH', 0) - 1)))))

    @cache_result
    def PLAQAR():
        """
        Montant total du plafonnement QF QuARt de part (residence alternee)
        """
        return arr(((PLAF_DEMIPART and 2 and PLAF_DEMIPART / 2 * (NBMIQAR() + NB0BTMIQAR() + NB0BTQAR() + saisie_variables.get('V_0CI', 0))) + (PLAF_COMPPART and 2 and PLAF_COMPPART / 2 * NB0BT2MIQAR())))

    @cache_result
    def PLAFCDPART():
        """
        Plafond calcule de l avantage fiscal procure par la demi part sup
        """
        return (positif(saisie_variables.get('V_0AL', 0)) and positif(saisie_variables.get('V_0AL', 0)) * PLAF_CDPART)

    @cache_result
    def PLANT():
        """
        Plafond de l'avantage QF anterieur a 98
        """
        return (PLAQAR() + (PLAF_DEMIPART and 2 and PLAF_DEMIPART * 2 * ((NBPT() - NBQAR()) - 1 - BOOL_0AM() - (BOOL_0AZ() and BOOL_0AZ() * saisie_variables.get('V_0AV', 0)))) - (((2 and 2 * PLAF_DEMIPART) - PLAF_COMPPART) and 2 and NPS() and (saisie_variables.get('V_0AC', 0) + saisie_variables.get('V_0AD', 0) + (saisie_variables.get('V_0AV', 0) and saisie_variables.get('V_0AV', 0) * (1 - positif(saisie_variables.get('V_0BT', 0))))) and ((2 and 2 * PLAF_DEMIPART) - PLAF_COMPPART) * 2 * NPS() * (saisie_variables.get('V_0AC', 0) + saisie_variables.get('V_0AD', 0) + (saisie_variables.get('V_0AV', 0) and saisie_variables.get('V_0AV', 0) * (1 - positif(saisie_variables.get('V_0BT', 0))))) * min(1, EAC())) - ((PLAF_DEMIPART - PLAFCDPART()) and (1 - BOOL_0AM()) and 2 and NSA() and (1 - (positif(saisie_variables.get('V_0AW', 0)) and positif(saisie_variables.get('V_0AW', 0)) * positif_ou_nul((AGV() - LIM_AGE_LET_S)))) and (PLAF_DEMIPART - PLAFCDPART()) * (1 - BOOL_0AM()) * 2 * NSA() * (1 - (positif(saisie_variables.get('V_0AW', 0)) and positif(saisie_variables.get('V_0AW', 0)) * positif_ou_nul((AGV() - LIM_AGE_LET_S)))) * (1 - saisie_variables.get('V_0AG', 0))))

    @cache_result
    def SFM():
        """
        Zone Situation de Famille - Maries
        """
        return ((1 if (((saisie_variables.get('V_0AF', 0) + 0)) == 1) else 2) if (((saisie_variables.get('V_0AP', 0) + 0)) == 1) else (3 if (((saisie_variables.get('V_0AF', 0) + 0)) == 1) else (4 if ((((saisie_variables.get('V_0AS', 0) + 0)) == 1 and (AGV() >= LIM_AGE_LET_S or AGC() >= LIM_AGE_LET_S))) else 0))) if (BOOL_0AM() == 1) else 0

    @cache_result
    def BOOL_W():
        """
        Booleen - vaut 1 si  W et personne d au moins 75 ans
        """
        return (positif((saisie_variables.get('V_0AW', 0) + 0)) and positif((saisie_variables.get('V_0AW', 0) + 0)) * positif_ou_nul((AGV() - LIM_AGE_LET_S)))

    @cache_result
    def BOOL_V():
        """
        Zone Situation de Famille - Veufs sans EAC
        """
        return (positif((saisie_variables.get('V_0AV', 0) + 0)) and positif((1 - BOOL_0AZ())) and positif((saisie_variables.get('V_0AV', 0) + 0)) * positif((1 - BOOL_0AZ())) * ((1 - positif((PAC() + saisie_variables.get('V_0CH', 0) + 0))) + (positif((PAC() + saisie_variables.get('V_0CH', 0) + 0)) and positif((PAC() + saisie_variables.get('V_0CH', 0) + 0)) * (3 - null((EAC() + saisie_variables.get('V_0CH', 0) + 0))))))

    @cache_result
    def BOOL_CDV():
        """
        Booleen - vaut 1 si  celibataire, divorce, separe ou veuf.
        """
        return positif((BOOL_V() + saisie_variables.get('V_0AC', 0) + saisie_variables.get('V_0AD', 0) + 0))

    @cache_result
    def BOOL_PACSFL():
        """
        Booleen - vaut 0 si  PAC ou 0CH
        """
        return (1 - positif((PAC() + saisie_variables.get('V_0CH', 0) + 0)))

    @cache_result
    def SFCD1():
        """
        Zone Situation de Famille - Celibataires,Divorces sans PAC
        """
        return (((15 and positif((saisie_variables.get('V_0AN', 0) + 0)) and (1 - positif((saisie_variables.get('V_0AP', 0) + 0))) and (1 - positif((saisie_variables.get('V_0AG', 0) + 0))) and 15 * positif((saisie_variables.get('V_0AN', 0) + 0)) * (1 - positif((saisie_variables.get('V_0AP', 0) + 0))) * (1 - positif((saisie_variables.get('V_0AG', 0) + 0))) * (1 - BOOL_W())) + (2 and positif((saisie_variables.get('V_0AP', 0) + 0)) and 2 * positif((saisie_variables.get('V_0AP', 0) + 0)) * (1 - positif((saisie_variables.get('V_0AL', 0) + 0)))) + (14 and positif((saisie_variables.get('V_0AG', 0) + 0)) and (1 - positif((saisie_variables.get('V_0AP', 0) + 0))) and 14 * positif((saisie_variables.get('V_0AG', 0) + 0)) * (1 - positif((saisie_variables.get('V_0AP', 0) + 0))) * (1 - BOOL_W())) + (7 and BOOL_W() and 7 * BOOL_W() * (1 - positif((saisie_variables.get('V_0AP', 0) + 0))))) and (1 - positif((saisie_variables.get('V_0AL', 0) + 0))) and BOOL_CDV() and ((15 and positif((saisie_variables.get('V_0AN', 0) + 0)) and (1 - positif((saisie_variables.get('V_0AP', 0) + 0))) and (1 - positif((saisie_variables.get('V_0AG', 0) + 0))) and 15 * positif((saisie_variables.get('V_0AN', 0) + 0)) * (1 - positif((saisie_variables.get('V_0AP', 0) + 0))) * (1 - positif((saisie_variables.get('V_0AG', 0) + 0))) * (1 - BOOL_W())) + (2 and positif((saisie_variables.get('V_0AP', 0) + 0)) and 2 * positif((saisie_variables.get('V_0AP', 0) + 0)) * (1 - positif((saisie_variables.get('V_0AL', 0) + 0)))) + (14 and positif((saisie_variables.get('V_0AG', 0) + 0)) and (1 - positif((saisie_variables.get('V_0AP', 0) + 0))) and 14 * positif((saisie_variables.get('V_0AG', 0) + 0)) * (1 - positif((saisie_variables.get('V_0AP', 0) + 0))) * (1 - BOOL_W())) + (7 and BOOL_W() and 7 * BOOL_W() * (1 - positif((saisie_variables.get('V_0AP', 0) + 0))))) * (1 - positif((saisie_variables.get('V_0AL', 0) + 0))) * BOOL_CDV() * BOOL_PACSFL())

    @cache_result
    def SFCD2():
        """
        Zone Situation de Famille - Celibataires,Divorces avec PAC
        """
        return (positif((PAC() + saisie_variables.get('V_0CH', 0))) and positif((saisie_variables.get('V_0AC', 0) + saisie_variables.get('V_0AD', 0) + null((2 - BOOL_V())))) and positif((PAC() + saisie_variables.get('V_0CH', 0))) * positif((saisie_variables.get('V_0AC', 0) + saisie_variables.get('V_0AD', 0) + null((2 - BOOL_V())))) * ((positif((saisie_variables.get('V_0AP', 0) + 0)) and positif((saisie_variables.get('V_0AP', 0) + 0)) * ((10 and positif((saisie_variables.get('V_0BT', 0) + 0)) and 10 * positif((saisie_variables.get('V_0BT', 0) + 0)) * (1 - positif(saisie_variables.get('V_0AV', 0)))) + (2 and 2 * positif(saisie_variables.get('V_0AV', 0))) + (2 and (1 - positif(saisie_variables.get('V_0AV', 0))) and 2 * (1 - positif(saisie_variables.get('V_0AV', 0))) * (1 - positif((saisie_variables.get('V_0BT', 0) + 0)))))) + ((1 - positif((saisie_variables.get('V_0AP', 0) + 0))) and (11 and 11 * positif((saisie_variables.get('V_0BT', 0) + 0))) and (1 - positif((saisie_variables.get('V_0AP', 0) + 0))) * (11 and 11 * positif((saisie_variables.get('V_0BT', 0) + 0))) * (1 - positif((saisie_variables.get('V_0AV', 0) + 0))))))

    @cache_result
    def SFV1():
        """
        Zone Situation de Famille - Veufs annee veuvage differente
        """
        return (2 and positif((saisie_variables.get('V_0AP', 0) + 0)) and 2 * positif((saisie_variables.get('V_0AP', 0) + 0)) * null((BOOL_V() - 3)))

    @cache_result
    def SFV2():
        """
        Zone Situation de Famille - Veufs annee veuvage
        """
        return ((1 if (((saisie_variables.get('V_0AF', 0) + 0)) == 1) else 2) if (((saisie_variables.get('V_0AP', 0) + 0)) == 1) else (3 if (((saisie_variables.get('V_0AF', 0) + 0)) == 1) else (7 if (((saisie_variables.get('V_0AW', 0) + 0)) == 1) else 0))) if ((((saisie_variables.get('V_0AV', 0) + 0)) == 1 and BOOL_0AZ() == 1)) else 0

    @cache_result
    def SFL():
        """
        Zone Situation de Famille - C,D,V avec case L
        """
        return (positif((saisie_variables.get('V_0AL', 0) + 0)) and BOOL_CDV() and BOOL_PACSFL() and positif((saisie_variables.get('V_0AL', 0) + 0)) * BOOL_CDV() * BOOL_PACSFL() * ((2 and 2 * positif((saisie_variables.get('V_0AP', 0) + 0))) + (9 and (1 - BOOL_W()) and positif((1 - saisie_variables.get('V_0AP', 0) + 0)) and positif((1 - (saisie_variables.get('V_0AG', 0) + 0))) and 9 * (1 - BOOL_W()) * positif((1 - saisie_variables.get('V_0AP', 0) + 0)) * positif((1 - (saisie_variables.get('V_0AG', 0) + 0))) * positif((1 - (saisie_variables.get('V_0AN', 0) + 0)))) + (7 and BOOL_W() and 7 * BOOL_W() * positif((1 - (saisie_variables.get('V_0AP', 0) + 0)))) + (15 and positif((saisie_variables.get('V_0AN', 0) + 0)) and (1 - BOOL_W()) and positif((1 - (saisie_variables.get('V_0AG', 0) + 0))) and 15 * positif((saisie_variables.get('V_0AN', 0) + 0)) * (1 - BOOL_W()) * positif((1 - (saisie_variables.get('V_0AG', 0) + 0))) * positif((1 - (saisie_variables.get('V_0AP', 0) + 0)))) + (14 and positif((saisie_variables.get('V_0AG', 0) + 0)) and (1 - BOOL_W()) and 14 * positif((saisie_variables.get('V_0AG', 0) + 0)) * (1 - BOOL_W()) * positif((1 - (saisie_variables.get('V_0AP', 0) + 0))))))

    @cache_result
    def SFUTILE():
        """
        Zone Situation de Famille
        """
        return (SFM() + SFCD1() + SFCD2() + SFV1() + SFV2() + SFL())

    @cache_result
    def NSA2():
        """
        1/2 part supplementaire correspondant au plafond de 6100F
        """
        return (min((((1 - positif((PAC() + saisie_variables.get('V_0CH', 0)))) and (1 - positif((PAC() + saisie_variables.get('V_0CH', 0)))) * (null((SFUTILE() - 14)) + null((SFUTILE() - 7)) + (null((SFUTILE() - 15)) and null((SFUTILE() - 15)) * (1 - positif(NIN()))))) + (null((SFUTILE() - 7)) and BOOL_0AZ() and null((SFUTILE() - 7)) * BOOL_0AZ() * saisie_variables.get('V_0AV', 0))), 1) and min((((1 - positif((PAC() + saisie_variables.get('V_0CH', 0)))) and (1 - positif((PAC() + saisie_variables.get('V_0CH', 0)))) * (null((SFUTILE() - 14)) + null((SFUTILE() - 7)) + (null((SFUTILE() - 15)) and null((SFUTILE() - 15)) * (1 - positif(NIN()))))) + (null((SFUTILE() - 7)) and BOOL_0AZ() and null((SFUTILE() - 7)) * BOOL_0AZ() * saisie_variables.get('V_0AV', 0))), 1) * 0.5)

    @cache_result
    def PLACOMP():
        """
        Plafond complementaire de l'avantage QF (invalides,sit.part.)
        """
        return ((PLAFIMP and PLAFIMP * positif((saisie_variables.get('V_0AV', 0) and (saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_9XX', 0)) and saisie_variables.get('V_0AV', 0) * (saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_9XX', 0)) * (1 - positif(saisie_variables.get('V_0AZ', 0)))))) + (2 and PLAF_PLACOMP and 2 * PLAF_PLACOMP * max(0, (NIN() + NSA2() + NCC()))) + arr((PLAF_PLACOMP and 2 and PLAF_PLACOMP / 2 * saisie_variables.get('V_0CI', 0))))

    @cache_result
    def PLA():
        """
        Montant total du plafonnement QF
        """
        return (PLANT() + PLACOMP())

    @cache_result
    def IN01():
        """
        Droits simples apres plafonnement QF
        From INxz
        """
        return max(IS011(), (IS021() - PLA()))

    @cache_result
    def IPQ01():
        """
        Droit sur les revenus hors quotient
        From IPQ0z
        """
        return IN01()

    # WARNING: the variable "AB" is used in a formula at least, but is not defined.
    def AB(): return 0
    @cache_result
    def SEUILEXO():
        """
        Seuil d'exoneration des revenus faibles
        """
        return (SEUIL_EXO1 + ((SEUIL_EXO2 - SEUIL_EXO1) and (SEUIL_EXO2 - SEUIL_EXO1) * positif_ou_nul((max(AGV(), AGC()) - LIM_AGE_EXO))))

    @cache_result
    def EXO1():
        """
        Indicateur d'exoneration pour revenus faibles
        """
        return (((1 - base_variables['ART1731BIS']) and (1 - base_variables['ART1731BIS']) * (((1 - min((abs(((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS'])))) + ((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS']))) + INDTEFF()), 1)) and (1 - min((abs(((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS'])))) + ((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS']))) + INDTEFF()), 1)) * positif((saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) + RG() + TOTALQUO() + (AB() and AB() * (1 - present(saisie_variables.get('IPVLOC', 0)))) - SEUILEXO()))) + min((abs(((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS'])))) + ((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS']))) + INDTEFF()), 1))) + (base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * (((1 - min((abs(((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS'])))) + ((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS']))) + INDTEFF()), 1)) and (1 - min((abs(((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS'])))) + ((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS']))) + INDTEFF()), 1)) * positif((saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) + RG() + SOMDEFICIT() + TOTALQUO() + (AB() and AB() * (1 - present(saisie_variables.get('IPVLOC', 0)))) - SEUILEXO()))) + min((abs(((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS'])))) + ((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS']))) + INDTEFF()), 1))))

    @cache_result
    def TOTALQUOHT():
        """
        Somme des revenus au quotient >=2 hors tx eff
        """
        return ((1 - positif(saisie_variables.get('IPVLOC', 0))) and (1 - positif(saisie_variables.get('IPVLOC', 0))) * REVQTOTQHT())

    @cache_result
    def SDV():
        """
        solde abattements APA non imputes sur RNG
        """
        return max(0, (ABTPA() - RNG()))

    @cache_result
    def SDM():
        """
        solde abattements APA et AMA non imputes sur RNG
        """
        return max(0, (ABTMA() - max(0, (RNG() - ABTPA()))))

    @cache_result
    def TONEQUOHT():
        """
        revenus au quotient >=2 nets tx eff
        """
        return max(0, (TOTALQUOHT() - ((SDD() + SDC() + SDV() + SDM()) and (SDD() + SDC() + SDV() + SDM()) * (1 - positif((((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS']))) + ((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS']))) + (TEFFREVTOT() and TEFFREVTOT() * INDTEFF()))))) - ((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS'])))))

    @cache_result
    def GLRWB():
        """
        Revenus au quotient NWB hors revenus footballeurs nets imposables
        """
        return (((positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and saisie_variables.get('CODRWB', 0) and TONEQUOHT() * saisie_variables.get('CODRWB', 0) / TOTALQUOHT()))) + ((1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * TONEQUOHT())) and ((positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and saisie_variables.get('CODRWB', 0) and TONEQUOHT() * saisie_variables.get('CODRWB', 0) / TOTALQUOHT()))) + ((1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * TONEQUOHT())) * positif((null((1 - saisie_variables.get('FLAG_EXIT', 0))) + null((2 - saisie_variables.get('FLAG_EXIT', 0))))))

    @cache_result
    def GLRWA():
        """
        Revenus au quotient NWA hors revenus footballeurs nets imposables
        """
        return (((positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and saisie_variables.get('CODRWA', 0) and TONEQUOHT() * saisie_variables.get('CODRWA', 0) / TOTALQUOHT()))) + ((1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLRWB()))) and ((positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and saisie_variables.get('CODRWA', 0) and TONEQUOHT() * saisie_variables.get('CODRWA', 0) / TOTALQUOHT()))) + ((1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLRWB()))) * null((2 - saisie_variables.get('FLAG_EXIT', 0))))

    @cache_result
    def TONEQUO():
        """
        revenus au quotient >=2 nets
        """
        return max(0, (TOTALQUO() - ((SDD() + SDC() + SDV() + SDM()) and (SDD() + SDC() + SDV() + SDM()) * (1 - positif((((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS']))) + ((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS']))) + (TEFFREVTOT() and TEFFREVTOT() * INDTEFF()))))) - ((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS'])))))

    @cache_result
    def TGLRWB():
        """
        Revenus au quotient NWA hors revenus footballeurs nets imposables
        """
        return (((positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and saisie_variables.get('CODRWB', 0) and TONEQUO() * saisie_variables.get('CODRWB', 0) / TOTALQUO()))) + ((1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * TONEQUO())) and ((positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and saisie_variables.get('CODRWB', 0) and TONEQUO() * saisie_variables.get('CODRWB', 0) / TOTALQUO()))) + ((1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * TONEQUO())) * positif((null((1 - saisie_variables.get('FLAG_EXIT', 0))) + null((2 - saisie_variables.get('FLAG_EXIT', 0))))))

    @cache_result
    def TGLRWA():
        """
        Revenus au quotient NWA hors revenus footballeurs nets imposables
        """
        return (((positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and saisie_variables.get('CODRWA', 0) and TONEQUO() * saisie_variables.get('CODRWA', 0) / TOTALQUO()))) + ((1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLRWB()))) and ((positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and saisie_variables.get('CODRWA', 0) and TONEQUO() * saisie_variables.get('CODRWA', 0) / TOTALQUO()))) + ((1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLRWB()))) * null((2 - saisie_variables.get('FLAG_EXIT', 0))))

    @cache_result
    def TEGLRWA():
        """
        Revenus au quotient  hors revenus footballeurs nets imposables
        """
        return ((GLRWA() and GLRWA() * (1 - positif(INDTEFF()))) + (TGLRWA() and TGLRWA() * positif(INDTEFF())))

    @cache_result
    def GLRVG():
        """
        Revenus au quotient NVG hors revenus footballeurs nets imposables
        """
        return ((positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and saisie_variables.get('CODRVG', 0) and TONEQUOHT() * saisie_variables.get('CODRVG', 0) / TOTALQUOHT()))) + ((1 - positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLRWB() - GLRWA())))

    @cache_result
    def TGLRVG():
        """
        Revenus au quotient NVG hors revenus footballeurs nets imposables
        """
        return ((positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and saisie_variables.get('CODRVG', 0) and TONEQUO() * saisie_variables.get('CODRVG', 0) / TOTALQUO()))) + ((1 - positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLRWB() - TGLRWA())))

    @cache_result
    def TEGLRVG():
        """
        Revenus au quotient  hors revenus footballeurs nets imposables
        """
        return ((GLRVG() and GLRVG() * (1 - positif(INDTEFF()))) + (TGLRVG() and TGLRVG() * positif(INDTEFF())))

    @cache_result
    def GL1():
        """
        Revenus au quotient 1 hors revenus footballeurs nets imposables
        """
        return ((positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and GLN1() and TONEQUOHT() * GLN1() / TOTALQUOHT()))) + ((1 - positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLRVG() - GLRWB() - GLRWA())))

    @cache_result
    def TGL1():
        """
        Revenus au quotient 1 hors revenus footballeurs nets imposables
        """
        return ((positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TGLN1() and TONEQUO() * TGLN1() / TOTALQUO()))) + ((1 - positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLRWB() - TGLRWA() - TGLRVG())))

    @cache_result
    def TEGL1():
        """
        Revenus au quotient  hors revenus footballeurs nets imposables
        """
        return ((GL1() and GL1() * (1 - positif(INDTEFF()))) + (TGL1() and TGL1() * positif(INDTEFF())))

    @cache_result
    def GL2():
        """
        Revenus au quotient 2 hors revenus footballeurs nets imposables
        """
        return ((positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and GLN2() and TONEQUOHT() * GLN2() / TOTALQUOHT()))) + ((1 - positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLRWB() - GLRWA() - GLRVG() - GL1())))

    @cache_result
    def TGL2():
        """
        Revenus au quotient 1 hors revenus footballeurs nets imposables
        """
        return ((positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TGLN2() and TONEQUO() * TGLN2() / TOTALQUO()))) + ((1 - positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLRWB() - TGLRWA() - TGLRVG() - TGL1())))

    @cache_result
    def TEGL2():
        """
        Revenus au quotient  hors revenus footballeurs nets imposables
        """
        return ((GL2() and GL2() * (1 - positif(INDTEFF()))) + (TGL2() and TGL2() * positif(INDTEFF())))

    @cache_result
    def GL3():
        """
        Revenus au quotient 3 hors revenus footballeurs nets imposables
        """
        return ((positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and GLN3() and TONEQUOHT() * GLN3() / TOTALQUOHT()))) + ((1 - positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLRWB() - GLRWA() - GLRVG() - GL1() - GL2())))

    @cache_result
    def TGL3():
        """
        Revenus au quotient 1 hors revenus footballeurs nets imposables
        """
        return ((positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TGLN3() and TONEQUO() * TGLN3() / TOTALQUO()))) + ((1 - positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLRWB() - TGLRWA() - TGLRVG() - TGL1() - TGL2())))

    @cache_result
    def TEGL3():
        """
        Revenus au quotient  hors revenus footballeurs nets imposables
        """
        return ((GL3() and GL3() * (1 - positif(INDTEFF()))) + (TGL3() and TGL3() * positif(INDTEFF())))

    @cache_result
    def GL4():
        """
        Revenus au quotient 4 hors revenus footballeurs nets imposables
        """
        return ((positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and REV4() and TONEQUOHT() * REV4() / TOTALQUOHT()))) + ((1 - positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLRWB() - GLRWA() - GLRVG() - GL1() - GL2() - GL3())))

    @cache_result
    def TGL4():
        """
        Revenus au quotient 1 hors revenus footballeurs nets imposables
        """
        return ((positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and REV4() and TONEQUO() * REV4() / TOTALQUO()))) + ((1 - positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLRWB() - TGLRWA() - TGLRVG() - TGL1() - TGL2() - TGL3())))

    @cache_result
    def TEGL4():
        """
        Revenus au quotient  hors revenus footballeurs nets imposables
        """
        return ((GL4() and GL4() * (1 - positif(INDTEFF()))) + (TGL4() and TGL4() * positif(INDTEFF())))

    @cache_result
    def GLTOT():
        """
        gain levee  quotient total foyer 
        """
        return (somme([GL1(), GL2(), GL3(), GL4()]) + GLRVG() + GLRWB() + GLRWA())

    @cache_result
    def GLFV():
        """
        pensions footballeurs imposables - Vous
        """
        return ((positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENFV() and TONEQUOHT() * PENFV() / TOTALQUOHT()))) + ((1 - positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT())))

    @cache_result
    def TGLTOT():
        """
        Revenus au quotient 1 hors revenus footballeurs nets imposables
        """
        return (somme([TGL1(), TGL2(), TGL3(), TGL4()]) + TGLRVG() + TGLRWB() + TGLRWA())

    @cache_result
    def TGLFV():
        """
        pensions footballeurs imposables - Vous
        """
        return ((positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and PENFV() and TONEQUO() * PENFV() / TOTALQUO()))) + ((1 - positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT())))

    @cache_result
    def TEGLFV():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLFV() and GLFV() * (1 - positif(INDTEFF()))) + (TGLFV() and TGLFV() * positif(INDTEFF())))

    @cache_result
    def GLFC():
        """
        pensions footballeurs imposables - Conjoint
        """
        return ((positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENFC() and TONEQUOHT() * PENFC() / TOTALQUOHT()))) + ((1 - positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFV())))

    @cache_result
    def TGLFC():
        """
        pensions footballeurs imposables - 
        """
        return ((positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and PENFC() and TONEQUO() * PENFC() / TOTALQUO()))) + ((1 - positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFV())))

    @cache_result
    def TEGLFC():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLFC() and GLFC() * (1 - positif(INDTEFF()))) + (TGLFC() and TGLFC() * positif(INDTEFF())))

    @cache_result
    def GLF1():
        """
        pensions footballeurs imposables - PAC
        """
        return ((positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENF1() and TONEQUOHT() * PENF1() / TOTALQUOHT()))) + ((1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFV() - GLFC())))

    @cache_result
    def TGLF1():
        """
        pensions footballeurs imposables - 
        """
        return ((positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and PENF1() and TONEQUO() * PENF1() / TOTALQUO()))) + ((1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFV() - TGLFC())))

    @cache_result
    def TEGLF1():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLF1() and GLF1() * (1 - positif(INDTEFF()))) + (TGLF1() and TGLF1() * positif(INDTEFF())))

    @cache_result
    def GLF2():
        """
        pensions footballeurs imposables - PAC
        """
        return ((positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENF2() and TONEQUOHT() * PENF2() / TOTALQUOHT()))) + ((1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFV() - GLFC() - GLF1())))

    @cache_result
    def TGLF2():
        """
        pensions footballeurs imposables - 
        """
        return ((positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and PENF2() and TONEQUO() * PENF2() / TOTALQUO()))) + ((1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFV() - TGLFC() - TGLF1())))

    @cache_result
    def TEGLF2():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLF2() and GLF2() * (1 - positif(INDTEFF()))) + (TGLF2() and TGLF2() * positif(INDTEFF())))

    @cache_result
    def GLF3():
        """
        pensions footballeurs imposables - PAC
        """
        return ((positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENF3() and TONEQUOHT() * PENF3() / TOTALQUOHT()))) + ((1 - positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFV() - GLFC() - GLF1() - GLF2())))

    @cache_result
    def TGLF3():
        """
        pensions footballeurs imposables - 
        """
        return ((positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and PENF3() and TONEQUO() * PENF3() / TOTALQUO()))) + ((1 - positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFV() - TGLFC() - TGLF1() - TGLF2())))

    @cache_result
    def TEGLF3():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLF3() and GLF3() * (1 - positif(INDTEFF()))) + (TGLF3() and TGLF3() * positif(INDTEFF())))

    @cache_result
    def GLF4():
        """
        pensions footballeurs imposables - PAC
        """
        return ((positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENF4() and TONEQUOHT() * PENF4() / TOTALQUOHT()))) + ((1 - positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFV() - GLFC() - GLF1() - GLF2() - GLF3())))

    @cache_result
    def TGLF4():
        """
        pensions footballeurs imposables - 
        """
        return ((positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and PENF4() and TONEQUO() * PENF4() / TOTALQUO()))) + ((1 - positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFV() - TGLFC() - TGLF1() - TGLF2() - TGLF3())))

    @cache_result
    def TEGLF4():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLF4() and GLF4() * (1 - positif(INDTEFF()))) + (TGLF4() and TGLF4() * positif(INDTEFF())))

    @cache_result
    def TEGLFTOT():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLFV() + TEGLFC() + TEGLF1() + TEGLF2() + TEGLF3() + TEGLF4())

    @cache_result
    def GLFTOT():
        """
        gain levee  quotient total foyer 
        """
        return somme([GLFV(), GLFC(), GLF1(), GLF2(), GLF3(), GLF4()])

    @cache_result
    def GLPALIMV():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((PENALIMC() + PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENALIMC() + PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENALIMV() and TONEQUOHT() * PENALIMV() / TOTALQUOHT()))) + ((1 - positif((PENALIMC() + PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENALIMC() + PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT())))

    @cache_result
    def TGLFTOT():
        """
        pensions footballeurs imposables - 
        """
        return somme([TGLFV(), TGLFC(), TGLF1(), TGLF2(), TGLF3(), TGLF4()])

    @cache_result
    def TGLPALIMV():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((TPENALIMC() + TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TPENALIMC() + TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPENALIMV() and TONEQUO() * TPENALIMV() / TOTALQUO()))) + ((1 - positif((TPENALIMC() + TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPENALIMC() + TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT())))

    @cache_result
    def TEGLPALIMV():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIMV() and GLPALIMV() * (1 - positif(INDTEFF()))) + (TGLPALIMV() and TGLPALIMV() * positif(INDTEFF())))

    @cache_result
    def GLPALIMC():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENALIMC() and TONEQUOHT() * PENALIMC() / TOTALQUOHT()))) + ((1 - positif((PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMV())))

    @cache_result
    def TGLPALIMC():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPENALIMC() and TONEQUO() * TPENALIMC() / TOTALQUO()))) + ((1 - positif((TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMV())))

    @cache_result
    def TEGLPALIMC():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIMC() and GLPALIMC() * (1 - positif(INDTEFF()))) + (TGLPALIMC() and TGLPALIMC() * positif(INDTEFF())))

    @cache_result
    def GLPALIM1():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENALIM1() and TONEQUOHT() * PENALIM1() / TOTALQUOHT()))) + ((1 - positif((PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMV() - GLPALIMC())))

    @cache_result
    def TGLPALIM1():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPENALIM1() and TONEQUO() * TPENALIM1() / TOTALQUO()))) + ((1 - positif((TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMV() - TGLPALIMC())))

    @cache_result
    def TEGLPALIM1():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIM1() and GLPALIM1() * (1 - positif(INDTEFF()))) + (TGLPALIM1() and TGLPALIM1() * positif(INDTEFF())))

    @cache_result
    def GLPALIM2():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENALIM2() and TONEQUOHT() * PENALIM2() / TOTALQUOHT()))) + ((1 - positif((PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMV() - GLPALIMC() - GLPALIM1())))

    @cache_result
    def TGLPALIM2():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPENALIM2() and TONEQUO() * TPENALIM2() / TOTALQUO()))) + ((1 - positif((TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMV() - TGLPALIMC() - TGLPALIM1())))

    @cache_result
    def TEGLPALIM2():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIM2() and GLPALIM2() * (1 - positif(INDTEFF()))) + (TGLPALIM2() and TGLPALIM2() * positif(INDTEFF())))

    @cache_result
    def GLPALIM3():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENALIM3() and TONEQUOHT() * PENALIM3() / TOTALQUOHT()))) + ((1 - positif((PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMV() - GLPALIMC() - GLPALIM1() - GLPALIM2())))

    @cache_result
    def TGLPALIM3():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPENALIM3() and TONEQUO() * TPENALIM3() / TOTALQUO()))) + ((1 - positif((TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMV() - TGLPALIMC() - TGLPALIM1() - TGLPALIM2())))

    @cache_result
    def TEGLPALIM3():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIM3() and GLPALIM3() * (1 - positif(INDTEFF()))) + (TGLPALIM3() and TGLPALIM3() * positif(INDTEFF())))

    @cache_result
    def GLPALIM4():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PENALIM4() and TONEQUOHT() * PENALIM4() / TOTALQUOHT()))) + ((1 - positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMV() - GLPALIMC() - GLPALIM1() - GLPALIM2() - GLPALIM3())))

    @cache_result
    def TGLPALIM4():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPENALIM4() and TONEQUO() * TPENALIM4() / TOTALQUO()))) + ((1 - positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMV() - TGLPALIMC() - TGLPALIM1() - TGLPALIM2() - TGLPALIM3())))

    @cache_result
    def TEGLPALIM4():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIM4() and GLPALIM4() * (1 - positif(INDTEFF()))) + (TGLPALIM4() and TGLPALIM4() * positif(INDTEFF())))

    @cache_result
    def TEGLPALIMTOT():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLPALIMV() + TEGLPALIMC() + TEGLPALIM1() + TEGLPALIM2() + TEGLPALIM3() + TEGLPALIM4())

    @cache_result
    def GLPALIMTOT():
        """
        gain levee  quotient total foyer pension alimentaire
        """
        return somme([GLPALIMV(), GLPALIMC(), GLPALIM1(), GLPALIM2(), GLPALIM3(), GLPALIM4()])

    @cache_result
    def GLTSV():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TSNN2TSC() + TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2TSC() + TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2TSV() and TONEQUOHT() * TSNN2TSV() / TOTALQUOHT()))) + ((1 - positif((TSNN2TSC() + TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2TSC() + TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT())))

    @cache_result
    def TGLPALIMTOT():
        """
        Revenus au quotient pension alimentaire
        """
        return somme([TGLPALIMV(), TGLPALIMC(), TGLPALIM1(), TGLPALIM2(), TGLPALIM3(), TGLPALIM4()])

    @cache_result
    def TGLTSV():
        """
        Traitements AFN imposables tx effectif
        """
        return ((positif((TTSNN2TSC() + TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2TSC() + TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2TSV() and TONEQUO() * TTSNN2TSV() / TOTALQUO()))) + ((1 - positif((TTSNN2TSC() + TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2TSC() + TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT())))

    @cache_result
    def TEGLTSV():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTSV() and GLTSV() * (1 - positif(INDTEFF()))) + (TGLTSV() and TGLTSV() * positif(INDTEFF())))

    @cache_result
    def GLTSC():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2TSC() and TONEQUOHT() * TSNN2TSC() / TOTALQUOHT()))) + ((1 - positif((TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSV())))

    @cache_result
    def TGLTSC():
        """
        Traitements AFN imposables tx effectif
        """
        return ((positif((TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2TSC() and TONEQUO() * TTSNN2TSC() / TOTALQUO()))) + ((1 - positif((TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSV())))

    @cache_result
    def TEGLTSC():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTSC() and GLTSC() * (1 - positif(INDTEFF()))) + (TGLTSC() and TGLTSC() * positif(INDTEFF())))

    @cache_result
    def GLTS1():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2TS1() and TONEQUOHT() * TSNN2TS1() / TOTALQUOHT()))) + ((1 - positif((TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSV() - GLTSC())))

    @cache_result
    def TGLTS1():
        """
        Traitements AFN imposables tx effectif
        """
        return ((positif((TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2TS1() and TONEQUO() * TTSNN2TS1() / TOTALQUO()))) + ((1 - positif((TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - GLTOT() - GLFTOT() - GLPALIMTOT() - TGLTSV() - TGLTSC())))

    @cache_result
    def TEGLTS1():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTS1() and GLTS1() * (1 - positif(INDTEFF()))) + (TGLTS1() and TGLTS1() * positif(INDTEFF())))

    @cache_result
    def GLTS2():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2TS2() and TONEQUOHT() * TSNN2TS2() / TOTALQUOHT()))) + ((1 - positif((TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSV() - GLTSC() - GLTS1())))

    @cache_result
    def TGLTS2():
        """
        Traitements AFN imposables tx effectif
        """
        return ((positif((TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2TS2() and TONEQUO() * TTSNN2TS2() / TOTALQUO()))) + ((1 - positif((TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSV() - TGLTSC() - TGLTS1())))

    @cache_result
    def TEGLTS2():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTS2() and GLTS2() * (1 - positif(INDTEFF()))) + (TGLTS2() and TGLTS2() * positif(INDTEFF())))

    @cache_result
    def GLTS3():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2TS3() and TONEQUOHT() * TSNN2TS3() / TOTALQUOHT()))) + ((1 - positif((TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSV() - GLTSC() - GLTS1() - GLTS2())))

    @cache_result
    def TGLTS3():
        """
        Traitements AFN imposables tx effectif
        """
        return ((positif((TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2TS3() and TONEQUO() * TTSNN2TS3() / TOTALQUO()))) + ((1 - positif((TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSV() - TGLTSC() - TGLTS1() - TGLTS2())))

    @cache_result
    def TEGLTS3():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTS3() and GLTS3() * (1 - positif(INDTEFF()))) + (TGLTS3() and TGLTS3() * positif(INDTEFF())))

    @cache_result
    def GLTS4():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2TS4() and TONEQUOHT() * TSNN2TS4() / TOTALQUOHT()))) + ((1 - positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSV() - GLTSC() - GLTS1() - GLTS2() - GLTS3())))

    @cache_result
    def TGLTS4():
        """
        Traitements AFN imposables tx effectif
        """
        return ((positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2TS4() and TONEQUO() * TTSNN2TS4() / TOTALQUO()))) + ((1 - positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSV() - TGLTSC() - TGLTS1() - TGLTS2() - TGLTS3())))

    @cache_result
    def TEGLTS4():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTS4() and GLTS4() * (1 - positif(INDTEFF()))) + (TGLTS4() and TGLTS4() * positif(INDTEFF())))

    @cache_result
    def TEGLTSTOT():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLTSV() + TEGLTSC() + TEGLTS1() + TEGLTS2() + TEGLTS3() + TEGLTS4())

    @cache_result
    def GLTSTOT():
        """
        gain levee  quotient total foyer 
        """
        return somme([GLTSV(), GLTSC(), GLTS1(), GLTS2(), GLTS3(), GLTS4()])

    @cache_result
    def GLTSREMPV():
        """
        Traitements  imposables quotient
        """
        return ((positif((TSNN2REMPC() + TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2REMPC() + TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2REMPV() and TONEQUOHT() * TSNN2REMPV() / TOTALQUOHT()))) + ((1 - positif((TSNN2REMPC() + TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2REMPC() + TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLTSTOT() - GLPALIMTOT())))

    @cache_result
    def TGLTSTOT():
        """
        gain levee  quotient total foyer  tx eff
        """
        return somme([TGLTSV(), TGLTSC(), TGLTS1(), TGLTS2(), TGLTS3(), TGLTS4()])

    @cache_result
    def TGLTSREMPV():
        """
        Traitements  imposables quotient tx effectif
        """
        return ((positif((TTSNN2REMPC() + TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2REMPC() + TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2REMPV() and TONEQUO() * TTSNN2REMPV() / TOTALQUO()))) + ((1 - positif((TTSNN2REMPC() + TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2REMPC() + TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLTSTOT() - GLPALIMTOT())))

    @cache_result
    def TEGLTSREMPV():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMPV() and GLTSREMPV() * (1 - positif(INDTEFF()))) + (TGLTSREMPV() and TGLTSREMPV() * positif(INDTEFF())))

    @cache_result
    def GLTSREMPC():
        """
        Traitements  imposables quotient
        """
        return ((positif((TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2REMPC() and TONEQUOHT() * TSNN2REMPC() / TOTALQUOHT()))) + ((1 - positif((TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPV())))

    @cache_result
    def TGLTSREMPC():
        """
        Traitements  imposables quotient tx effectif
        """
        return ((positif((TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2REMPC() and TONEQUO() * TTSNN2REMPC() / TOTALQUO()))) + ((1 - positif((TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPV())))

    @cache_result
    def TEGLTSREMPC():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMPC() and GLTSREMPC() * (1 - positif(INDTEFF()))) + (TGLTSREMPC() and TGLTSREMPC() * positif(INDTEFF())))

    @cache_result
    def GLTSREMP1():
        """
        Traitements  imposables quotient
        """
        return ((positif((TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2REMP1() and TONEQUOHT() * TSNN2REMP1() / TOTALQUOHT()))) + ((1 - positif((TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPV() - GLTSREMPC())))

    @cache_result
    def TGLTSREMP1():
        """
        Traitements  imposables quotient tx effectif
        """
        return ((positif((TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2REMP1() and TONEQUO() * TTSNN2REMP1() / TOTALQUO()))) + ((1 - positif((TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPV() - TGLTSREMPC())))

    @cache_result
    def TEGLTSREMP1():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMP1() and GLTSREMP1() * (1 - positif(INDTEFF()))) + (TGLTSREMP1() and TGLTSREMP1() * positif(INDTEFF())))

    @cache_result
    def GLTSREMP2():
        """
        Traitements  imposables quotient
        """
        return ((positif((TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2REMP2() and TONEQUOHT() * TSNN2REMP2() / TOTALQUOHT()))) + ((1 - positif((TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPV() - GLTSREMPC() - GLTSREMP1())))

    @cache_result
    def TGLTSREMP2():
        """
        Traitements  imposables quotient tx effectif
        """
        return ((positif((TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2REMP2() and TONEQUO() * TTSNN2REMP2() / TOTALQUO()))) + ((1 - positif((TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPV() - TGLTSREMPC() - TGLTSREMP1())))

    @cache_result
    def TEGLTSREMP2():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMP2() and GLTSREMP2() * (1 - positif(INDTEFF()))) + (TGLTSREMP2() and TGLTSREMP2() * positif(INDTEFF())))

    @cache_result
    def GLTSREMP3():
        """
        Traitements  imposables quotient
        """
        return ((positif((TSNN2REMP4() + TSNN2REMPC() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2REMP4() + TSNN2REMPC() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2REMP3() and TONEQUOHT() * TSNN2REMP3() / TOTALQUOHT()))) + ((1 - positif((TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPV() - GLTSREMPC() - GLTSREMP1() - GLTSREMP2())))

    @cache_result
    def TGLTSREMP3():
        """
        Traitements  imposables quotient tx effectif
        """
        return ((positif((TTSNN2REMP4() + TTSNN2REMPC() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2REMP4() + TTSNN2REMPC() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2REMP3() and TONEQUO() * TTSNN2REMP3() / TOTALQUO()))) + ((1 - positif((TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPV() - TGLTSREMPC() - TGLTSREMP1() - TGLTSREMP2())))

    @cache_result
    def TEGLTSREMP3():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMP3() and GLTSREMP3() * (1 - positif(INDTEFF()))) + (TGLTSREMP3() and TGLTSREMP3() * positif(INDTEFF())))

    @cache_result
    def GLTSREMP4():
        """
        Traitements  imposables quotient
        """
        return ((positif((REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and TSNN2REMP4() and TONEQUOHT() * TSNN2REMP4() / TOTALQUOHT()))) + ((1 - positif((REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPV() - GLTSREMPC() - GLTSREMP1() - GLTSREMP2() - GLTSREMP3())))

    @cache_result
    def TGLTSREMP4():
        """
        Traitements  imposables quotient tx effectif
        """
        return ((positif((REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TTSNN2REMP4() and TONEQUO() * TTSNN2REMP4() / TOTALQUO()))) + ((1 - positif((REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPV() - TGLTSREMPC() - TGLTSREMP1() - TGLTSREMP2() - TGLTSREMP3())))

    @cache_result
    def TEGLTSREMP4():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMP4() and GLTSREMP4() * (1 - positif(INDTEFF()))) + (TGLTSREMP4() and TGLTSREMP4() * positif(INDTEFF())))

    @cache_result
    def TEGLTSREMPTOT():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLTSREMPV() + TEGLTSREMPC() + TEGLTSREMP1() + TEGLTSREMP2() + TEGLTSREMP3() + TEGLTSREMP4())

    @cache_result
    def GLTSREMPTOT():
        """
        gain levee  quotient total foyer 
        """
        return somme([GLTSREMPV(), GLTSREMPC(), GLTSREMP1(), GLTSREMP2(), GLTSREMP3(), GLTSREMP4()])

    @cache_result
    def GLPRRV():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR2C() + PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2C() + PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR2V() and TONEQUOHT() * PRR2V() / TOTALQUOHT()))) + ((1 - positif((PRR2C() + PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2C() + PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT())))

    @cache_result
    def TGLTSREMPTOT():
        """
        gain levee  quotient total foyer  tx eff
        """
        return somme([TGLTSREMPV(), TGLTSREMPC(), TGLTSREMP1(), TGLTSREMP2(), TGLTSREMP3(), TGLTSREMP4()])

    @cache_result
    def TGLPRRV():
        """
        Revenus au quotient pension normale tx effectif
        """
        return ((positif((TPRR2C() + TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2C() + TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR2V() and TONEQUO() * TPRR2V() / TOTALQUO()))) + ((1 - positif((TPRR2C() + TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2C() + TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT())))

    @cache_result
    def TEGLPRRV():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRV() and GLPRRV() * (1 - positif(INDTEFF()))) + (TGLPRRV() and TGLPRRV() * positif(INDTEFF())))

    @cache_result
    def GLPRRC():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR2C() and TONEQUOHT() * PRR2C() / TOTALQUOHT()))) + ((1 - positif((PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRV())))

    @cache_result
    def TGLPRRC():
        """
        Revenus au quotient pension normale tx effectif
        """
        return ((positif((TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR2C() and TONEQUO() * TPRR2C() / TOTALQUO()))) + ((1 - positif((TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRV())))

    @cache_result
    def TEGLPRRC():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRC() and GLPRRC() * (1 - positif(INDTEFF()))) + (TGLPRRC() and TGLPRRC() * positif(INDTEFF())))

    @cache_result
    def GLPRR1():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR21() and TONEQUOHT() * PRR21() / TOTALQUOHT()))) + ((1 - positif((PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRV() - GLPRRC())))

    @cache_result
    def TGLPRR1():
        """
        Revenus au quotient pension normale tx effectif
        """
        return ((positif((TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR21() and TONEQUO() * TPRR21() / TOTALQUO()))) + ((1 - positif((TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRV() - TGLPRRC())))

    @cache_result
    def TEGLPRR1():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRR1() and GLPRR1() * (1 - positif(INDTEFF()))) + (TGLPRR1() and TGLPRR1() * positif(INDTEFF())))

    @cache_result
    def GLPRR2():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR22() and TONEQUOHT() * PRR22() / TOTALQUOHT()))) + ((1 - positif((PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRV() - GLPRRC() - GLPRR1())))

    @cache_result
    def TGLPRR2():
        """
        Revenus au quotient pension normale tx effectif
        """
        return ((positif((TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR22() and TONEQUO() * TPRR22() / TOTALQUO()))) + ((1 - positif((TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRV() - TGLPRRC() - TGLPRR1())))

    @cache_result
    def TEGLPRR2():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRR2() and GLPRR2() * (1 - positif(INDTEFF()))) + (TGLPRR2() and TGLPRR2() * positif(INDTEFF())))

    @cache_result
    def GLPRR3():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR23() and TONEQUOHT() * PRR23() / TOTALQUOHT()))) + ((1 - positif((PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRV() - GLPRRC() - GLPRR1() - GLPRR2())))

    @cache_result
    def TGLPRR3():
        """
        Revenus au quotient pension normale tx effectif
        """
        return ((positif((TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR23() and TONEQUO() * TPRR23() / TOTALQUO()))) + ((1 - positif((TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRV() - TGLPRRC() - TGLPRR1() - TGLPRR2())))

    @cache_result
    def TEGLPRR3():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRR3() and GLPRR3() * (1 - positif(INDTEFF()))) + (TGLPRR3() and TGLPRR3() * positif(INDTEFF())))

    @cache_result
    def GLPRR4():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR24() and TONEQUOHT() * PRR24() / TOTALQUOHT()))) + ((1 - positif((PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRV() - GLPRRC() - GLPRR1() - GLPRR2() - GLPRR3())))

    @cache_result
    def TGLPRR4():
        """
        Revenus au quotient pension normale tx effectif
        """
        return ((positif((TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR24() and TONEQUO() * TPRR24() / TOTALQUO()))) + ((1 - positif((TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRV() - TGLPRRC() - TGLPRR1() - TGLPRR2() - TGLPRR3())))

    @cache_result
    def TEGLPRR4():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRR4() and GLPRR4() * (1 - positif(INDTEFF()))) + (TGLPRR4() and TGLPRR4() * positif(INDTEFF())))

    @cache_result
    def TEGLPRRTOT():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLPRRV() + TEGLPRRC() + TEGLPRR1() + TEGLPRR2() + TEGLPRR3() + TEGLPRR4())

    @cache_result
    def GLPRRZV():
        """
        Revenus au quotient pension normale code RxZ
        """
        return ((positif((PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR2ZV() and TONEQUOHT() * PRR2ZV() / TOTALQUOHT()))) + ((1 - positif((PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRV() - GLPRRC() - GLPRR1() - GLPRR2() - GLPRR3() - GLPRR4())))

    @cache_result
    def TGLPRRZV():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR2ZV() and TONEQUO() * TPRR2ZV() / TOTALQUO()))) + ((1 - positif((TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRV() - TGLPRRC() - TGLPRR1() - TGLPRR2() - TGLPRR3() - TGLPRR4())))

    @cache_result
    def TEGLPRRZV():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZV() and GLPRRZV() * (1 - positif(INDTEFF()))) + (TGLPRRZV() and TGLPRRZV() * positif(INDTEFF())))

    @cache_result
    def GLPRRZC():
        """
        Revenus au quotient pension normale code RxZ
        """
        return ((positif((PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR2ZC() and TONEQUOHT() * PRR2ZC() / TOTALQUOHT()))) + ((1 - positif((PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRV() - GLPRRC() - GLPRR1() - GLPRR2() - GLPRR3() - GLPRR4() - GLPRRZV())))

    @cache_result
    def TGLPRRZC():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR2ZC() and TONEQUO() * TPRR2ZC() / TOTALQUO()))) + ((1 - positif((TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRV() - TGLPRRC() - TGLPRR1() - TGLPRR2() - TGLPRR3() - TGLPRR4() - TGLPRRZV())))

    @cache_result
    def TEGLPRRZC():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZC() and GLPRRZC() * (1 - positif(INDTEFF()))) + (TGLPRRZC() and TGLPRRZC() * positif(INDTEFF())))

    @cache_result
    def GLPRRZ1():
        """
        Revenus au quotient pension normale code RxZ
        """
        return ((positif((PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR2Z1() and TONEQUOHT() * PRR2Z1() / TOTALQUOHT()))) + ((1 - positif((PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRV() - GLPRRC() - GLPRR1() - GLPRR2() - GLPRR3() - GLPRR4() - GLPRRZV() - GLPRRZC())))

    @cache_result
    def TGLPRRZ1():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR2Z1() and TONEQUO() * TPRR2Z1() / TOTALQUO()))) + ((1 - positif((TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRV() - TGLPRRC() - TGLPRR1() - TGLPRR2() - TGLPRR3() - TGLPRR4() - TGLPRRZV() - TGLPRRZC())))

    @cache_result
    def TEGLPRRZ1():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZ1() and GLPRRZ1() * (1 - positif(INDTEFF()))) + (TGLPRRZ1() and TGLPRRZ1() * positif(INDTEFF())))

    @cache_result
    def GLPRRZ2():
        """
        Revenus au quotient pension normale code RxZ
        """
        return ((positif((PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR2Z2() and TONEQUOHT() * PRR2Z2() / TOTALQUOHT()))) + ((1 - positif((PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRV() - GLPRRC() - GLPRR1() - GLPRR2() - GLPRR3() - GLPRR4() - GLPRRZV() - GLPRRZC() - GLPRRZ1())))

    @cache_result
    def TGLPRRZ2():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR2Z2() and TONEQUO() * TPRR2Z2() / TOTALQUO()))) + ((1 - positif((TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRV() - TGLPRRC() - TGLPRR1() - TGLPRR2() - TGLPRR3() - TGLPRR4() - TGLPRRZV() - TGLPRRZC() - TGLPRRZ1())))

    @cache_result
    def TEGLPRRZ2():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZ2() and GLPRRZ2() * (1 - positif(INDTEFF()))) + (TGLPRRZ2() and TGLPRRZ2() * positif(INDTEFF())))

    @cache_result
    def GLPRRZ3():
        """
        Revenus au quotient pension normale code RxZ
        """
        return ((positif((PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR2Z3() and TONEQUOHT() * PRR2Z3() / TOTALQUOHT()))) + ((1 - positif((PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRV() - GLPRRC() - GLPRR1() - GLPRR2() - GLPRR3() - GLPRR4() - GLPRRZV() - GLPRRZC() - GLPRRZ1() - GLPRRZ2())))

    @cache_result
    def TGLPRRZ3():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR2Z3() and TONEQUO() * TPRR2Z3() / TOTALQUO()))) + ((1 - positif((TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRV() - TGLPRRC() - TGLPRR1() - TGLPRR2() - TGLPRR3() - TGLPRR4() - TGLPRRZV() - TGLPRRZC() - TGLPRRZ1() - TGLPRRZ2())))

    @cache_result
    def TEGLPRRZ3():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZ3() and GLPRRZ3() * (1 - positif(INDTEFF()))) + (TGLPRRZ3() and TGLPRRZ3() * positif(INDTEFF())))

    @cache_result
    def GLPRRZ4():
        """
        Revenus au quotient pension normale code RxZ
        """
        return ((positif((REVRVO() + REVRCM() + REVRF())) and positif((REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOHT() and PRR2Z4() and TONEQUOHT() * PRR2Z4() / TOTALQUOHT()))) + ((1 - positif((REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVRVO() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRV() - GLPRRC() - GLPRR1() - GLPRR2() - GLPRR3() - GLPRR4() - GLPRRZV() - GLPRRZC() - GLPRRZ1() - GLPRRZ2() - GLPRRZ3())))

    @cache_result
    def TGLPRRZ4():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((REVRVO() + REVRCM() + REVRF())) and positif((REVRVO() + REVRCM() + REVRF())) * arr((TONEQUO() and TPRR2Z4() and TONEQUO() * TPRR2Z4() / TOTALQUO()))) + ((1 - positif((REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVRVO() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRV() - TGLPRRC() - TGLPRR1() - TGLPRR2() - TGLPRR3() - TGLPRR4() - TGLPRRZV() - TGLPRRZC() - TGLPRRZ1() - TGLPRRZ2() - TGLPRRZ3())))

    @cache_result
    def TEGLPRRZ4():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZ4() and GLPRRZ4() * (1 - positif(INDTEFF()))) + (TGLPRRZ4() and TGLPRRZ4() * positif(INDTEFF())))

    @cache_result
    def TEGLPRRZTOT():
        """
        Rev foncier   imposables tx effectif corde RxZ
        """
        return (TEGLPRRZV() + TEGLPRRZC() + TEGLPRRZ1() + TEGLPRRZ2() + TEGLPRRZ3() + TEGLPRRZ4())

    @cache_result
    def GLPRRTOT():
        """
        gain levee  quotient total foyer pension normale
        """
        return somme([(GLPRRV() + GLPRRZV()), (GLPRRC() + GLPRRZC()), (GLPRR1() + GLPRRZ1()), (GLPRR2() + GLPRRZ2()), (GLPRR3() + GLPRRZ3()), (GLPRR4() + GLPRRZ4())])

    @cache_result
    def GLRVO():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return ((positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF())) and positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF())) * arr((TONEQUOHT() and _2RV1() and TONEQUOHT() * _2RV1() / TOTALQUOHT()))) + ((1 - positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRTOT())))

    @cache_result
    def TGLPRRTOT():
        """
        gain levee  quotient total foyer  tx eff
        """
        return somme([(TGLPRRV() + TGLPRRZV()), (TGLPRRC() + TGLPRRZC()), (TGLPRR1() + TGLPRRZ1()), (TGLPRR2() + TGLPRRZ2()), (TGLPRR3() + TGLPRRZ3()), (TGLPRR4() + TGLPRRZ4())])

    @cache_result
    def TGLRVO():
        """
        gain levee  quotient total foyer  tx eff
        """
        return ((positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF())) and positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF())) * arr((TONEQUO() and _2RV1() and TONEQUO() * _2RV1() / TOTALQUO()))) + ((1 - positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRTOT())))

    @cache_result
    def TEGLRVO():
        """
        Rent viagere  imposables tx effectif
        """
        return ((GLRVO() and GLRVO() * (1 - positif(INDTEFF()))) + (TGLRVO() and TGLRVO() * positif(INDTEFF())))

    @cache_result
    def GLRVO5():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return ((positif((_2RV3() + _2RV4() + REVRCM() + REVRF())) and positif((_2RV3() + _2RV4() + REVRCM() + REVRF())) * arr((TONEQUOHT() and _2RV2() and TONEQUOHT() * _2RV2() / TOTALQUOHT()))) + ((1 - positif((_2RV3() + _2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV3() + _2RV4() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRTOT() - GLRVO())))

    @cache_result
    def TGLRVO5():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return ((positif((_2RV3() + _2RV4() + REVRCM() + REVRF())) and positif((_2RV3() + _2RV4() + REVRCM() + REVRF())) * arr((TONEQUO() and _2RV2() and TONEQUO() * _2RV2() / TOTALQUO()))) + ((1 - positif((_2RV3() + _2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV3() + _2RV4() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRTOT() - TGLRVO())))

    @cache_result
    def TEGLRVO5():
        """
        Rent viagere  imposables tx effectif
        """
        return ((GLRVO5() and GLRVO5() * (1 - positif(INDTEFF()))) + (TGLRVO5() and TGLRVO5() * positif(INDTEFF())))

    @cache_result
    def GLRVO6():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return ((positif((_2RV4() + REVRCM() + REVRF())) and positif((_2RV4() + REVRCM() + REVRF())) * arr((TONEQUOHT() and _2RV3() and TONEQUOHT() * _2RV3() / TOTALQUOHT()))) + ((1 - positif((_2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV4() + REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLPRRTOT() - GLTSREMPTOT() - GLRVO() - GLRVO5())))

    @cache_result
    def TGLRVO6():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return ((positif((_2RV4() + REVRCM() + REVRF())) and positif((_2RV4() + REVRCM() + REVRF())) * arr((TONEQUO() and _2RV3() and TONEQUO() * _2RV3() / TOTALQUO()))) + ((1 - positif((_2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV4() + REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLPRRTOT() - TGLTSREMPTOT() - TGLRVO() - TGLRVO5())))

    @cache_result
    def TEGLRVO6():
        """
        Rent viagere  imposables tx effectif
        """
        return ((GLRVO6() and GLRVO6() * (1 - positif(INDTEFF()))) + (TGLRVO6() and TGLRVO6() * positif(INDTEFF())))

    @cache_result
    def GLRVO7():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return ((positif((REVRCM() + REVRF())) and positif((REVRCM() + REVRF())) * arr((TONEQUOHT() and _2RV4() and TONEQUOHT() * _2RV4() / TOTALQUOHT()))) + ((1 - positif((REVRCM() + REVRF()))) and (1 - positif((REVRCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRTOT() - GLRVO() - GLRVO5() - GLRVO6())))

    @cache_result
    def TGLRVO7():
        """
        Revenus au quotient hors rev foot nets imposables tx eff
        """
        return ((positif((REVRCM() + REVRF())) and positif((REVRCM() + REVRF())) * arr((TONEQUO() and _2RV4() and TONEQUO() * _2RV4() / TOTALQUO()))) + ((1 - positif((REVRCM() + REVRF()))) and (1 - positif((REVRCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRTOT() - TGLRVO() - TGLRVO5() - TGLRVO6())))

    @cache_result
    def TEGLRVO7():
        """
        Rent viagere  imposables tx effectif
        """
        return ((GLRVO7() and GLRVO7() * (1 - positif(INDTEFF()))) + (TGLRVO7() and TGLRVO7() * positif(INDTEFF())))

    @cache_result
    def TEGLRVOTOT():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLRVO() + TEGLRVO5() + TEGLRVO6() + TEGLRVO7())

    @cache_result
    def GLRVOTOT():
        """
        gain levee  quotient total foyer 
        """
        return (GLRVO() + GLRVO5() + GLRVO6() + GLRVO7())

    @cache_result
    def GLRCMDC():
        """
        Revenus au quotient 
        """
        return ((positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUOHT() and _2RCM() and TONEQUOHT() * _2RCM() / TOTALQUOHT()))) + ((1 - positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRTOT() - GLRVOTOT())))

    @cache_result
    def TGLRVOTOT():
        """
        gain levee  quotient total foyer  tx eff
        """
        return (TGLRVO() + TGLRVO5() + TGLRVO6() + TGLRVO7())

    @cache_result
    def TGLRCMDC():
        """
        Revenus au quotient  tx eff
        """
        return ((positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUO() and _2RCM() and TONEQUO() * _2RCM() / TOTALQUO()))) + ((1 - positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRTOT() - TGLRVOTOT())))

    @cache_result
    def TEGLRCMDC():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMDC() and GLRCMDC() * (1 - positif(INDTEFF()))) + (TGLRCMDC() and TGLRCMDC() * positif(INDTEFF())))

    @cache_result
    def GLRCMFU():
        """
        Revenus au quotient 
        """
        return ((positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUOHT() and _3RCM() and TONEQUOHT() * _3RCM() / TOTALQUOHT()))) + ((1 - positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRTOT() - GLRVOTOT() - GLRCMDC())))

    @cache_result
    def TGLRCMFU():
        """
        Revenus au quotient  tx eff
        """
        return ((positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUO() and _3RCM() and TONEQUO() * _3RCM() / TOTALQUO()))) + ((1 - positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRTOT() - TGLRVOTOT() - TGLRCMDC())))

    @cache_result
    def TEGLRCMFU():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMFU() and GLRCMFU() * (1 - positif(INDTEFF()))) + (TGLRCMFU() and TGLRCMFU() * positif(INDTEFF())))

    @cache_result
    def GLRCMCH():
        """
        Revenus au quotient 
        """
        return ((positif((_5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUOHT() and _4RCM() and TONEQUOHT() * _4RCM() / TOTALQUOHT()))) + ((1 - positif((_5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRTOT() - GLRVOTOT() - GLRCMDC() - GLRCMFU())))

    @cache_result
    def TGLRCMCH():
        """
        Revenus au quotient  tx eff
        """
        return ((positif((_5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUO() and _4RCM() and TONEQUO() * _4RCM() / TOTALQUO()))) + ((1 - positif((_5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRTOT() - TGLRVOTOT() - TGLRCMDC() - TGLRCMFU())))

    @cache_result
    def TEGLRCMCH():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMCH() and GLRCMCH() * (1 - positif(INDTEFF()))) + (TGLRCMCH() and TGLRCMCH() * positif(INDTEFF())))

    @cache_result
    def GLRCMTS():
        """
        Revenus au quotient 
        """
        return ((positif((_6RCM() + _7RCM() + REVRF())) and positif((_6RCM() + _7RCM() + REVRF())) * arr((TONEQUOHT() and _5RCM() and TONEQUOHT() * _5RCM() / TOTALQUOHT()))) + ((1 - positif((_6RCM() + _7RCM() + REVRF()))) and (1 - positif((_6RCM() + _7RCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRTOT() - GLRVOTOT() - GLRCMDC() - GLRCMFU() - GLRCMCH())))

    @cache_result
    def GLRCMGO():
        """
        Revenus au quotient 
        """
        return ((positif((_7RCM() + REVRF())) and positif((_7RCM() + REVRF())) * arr((TONEQUOHT() and _6RCM() and TONEQUOHT() * _6RCM() / TOTALQUOHT()))) + ((1 - positif((_7RCM() + REVRF()))) and (1 - positif((_7RCM() + REVRF()))) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRTOT() - GLRVOTOT() - GLRCMDC() - GLRCMFU() - GLRCMCH() - GLRCMTS())))

    @cache_result
    def TGLRCMTS():
        """
        Revenus au quotient  tx eff
        """
        return ((positif((_6RCM() + _7RCM() + REVRF())) and positif((_6RCM() + _7RCM() + REVRF())) * arr((TONEQUO() and _5RCM() and TONEQUO() * _5RCM() / TOTALQUO()))) + ((1 - positif((_6RCM() + _7RCM() + REVRF()))) and (1 - positif((_6RCM() + _7RCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRTOT() - TGLRVOTOT() - TGLRCMDC() - TGLRCMFU() - TGLRCMCH())))

    @cache_result
    def TGLRCMGO():
        """
        Revenus au quotient  tx eff
        """
        return ((positif((_7RCM() + REVRF())) and positif((_7RCM() + REVRF())) * arr((TONEQUO() and _6RCM() and TONEQUO() * _6RCM() / TOTALQUO()))) + ((1 - positif((_7RCM() + REVRF()))) and (1 - positif((_7RCM() + REVRF()))) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRTOT() - TGLRVOTOT() - TGLRCMDC() - TGLRCMFU() - TGLRCMCH() - TGLRCMTS())))

    @cache_result
    def TEGLRCMGO():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMGO() and GLRCMGO() * (1 - positif(INDTEFF()))) + (TGLRCMGO() and TGLRCMGO() * positif(INDTEFF())))

    @cache_result
    def GLRCMTR():
        """
        Revenus au quotient 
        """
        return ((positif(REVRF()) and positif(REVRF()) * arr((TONEQUOHT() and _7RCM() and TONEQUOHT() * _7RCM() / TOTALQUOHT()))) + ((1 - positif(REVRF())) and (1 - positif(REVRF())) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRTOT() - GLRVOTOT() - GLRCMDC() - GLRCMFU() - GLRCMCH() - GLRCMGO() - GLRCMTS())))

    @cache_result
    def TGLRCMTR():
        """
        Revenus au quotient  tx eff
        """
        return ((positif(REVRF()) and positif(REVRF()) * arr((TONEQUO() and _7RCM() and TONEQUO() * _7RCM() / TOTALQUO()))) + ((1 - positif(REVRF())) and (1 - positif(REVRF())) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRTOT() - TGLRVOTOT() - TGLRCMDC() - TGLRCMFU() - TGLRCMCH() - TGLRCMGO() - TGLRCMTS())))

    @cache_result
    def TEGLRCMTR():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMTR() and GLRCMTR() * (1 - positif(INDTEFF()))) + (TGLRCMTR() and TGLRCMTR() * positif(INDTEFF())))

    @cache_result
    def TEGLRCMTS():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMTS() and GLRCMTS() * (1 - positif(INDTEFF()))) + (TGLRCMTS() and TGLRCMTS() * positif(INDTEFF())))

    @cache_result
    def TEGLRCMTOT():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLRCMDC() + TEGLRCMFU() + TEGLRCMCH() + TEGLRCMGO() + TEGLRCMTR() + TEGLRCMTS())

    @cache_result
    def GLRCMTOT():
        """
        gain levee  quotient total foyer 
        """
        return (GLRCMDC() + GLRCMFU() + GLRCMCH() + GLRCMGO() + GLRCMTR() + GLRCMTS())

    @cache_result
    def GLRF1():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return ((positif(_3REVF()) and positif(_3REVF()) * arr((TONEQUOHT() and _2REVF() and TONEQUOHT() * _2REVF() / TOTALQUOHT()))) + ((1 - positif(_3REVF())) and (1 - positif(_3REVF())) * (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRTOT() - GLRVOTOT() - GLRCMTOT())))

    @cache_result
    def TGLRCMTOT():
        """
        gain levee  quotient total foyer  tx eff
        """
        return (TGLRCMDC() + TGLRCMFU() + TGLRCMCH() + TGLRCMGO() + TGLRCMTR() + TGLRCMTS())

    @cache_result
    def TGLRF1():
        """
        Revenus au quotient hors rev foot nets imposables tx eff
        """
        return ((positif(_3REVF()) and positif(_3REVF()) * arr((TONEQUO() and _2REVF() and TONEQUO() * _2REVF() / TOTALQUO()))) + ((1 - positif(_3REVF())) and (1 - positif(_3REVF())) * (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRTOT() - TGLRVOTOT() - TGLRCMTOT())))

    @cache_result
    def TEGLRF1():
        """
        Rev foncier   imposables tx effectif
        """
        return ((GLRF1() and GLRF1() * (1 - positif(INDTEFF()))) + (TGLRF1() and TGLRF1() * positif(INDTEFF())))

    @cache_result
    def GLRF2():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return (TONEQUOHT() - GLTOT() - GLFTOT() - GLPALIMTOT() - GLTSTOT() - GLTSREMPTOT() - GLPRRTOT() - GLRVOTOT() - GLRCMTOT() - GLRF1())

    @cache_result
    def TGLRF2():
        """
        Revenus au quotient hors rev foot nets imposables tx eff
        """
        return (TONEQUO() - TGLTOT() - TGLFTOT() - TGLPALIMTOT() - TGLTSTOT() - TGLTSREMPTOT() - TGLPRRTOT() - TGLRVOTOT() - TGLRCMTOT() - TGLRF1())

    @cache_result
    def TEGLRF2():
        """
        Rev foncier   imposables tx effectif
        """
        return ((GLRF2() and GLRF2() * (1 - positif(INDTEFF()))) + (TGLRF2() and TGLRF2() * positif(INDTEFF())))

    @cache_result
    def TEGLRFTOT():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLRF1() + TEGLRF2())

    @cache_result
    def RPQ1():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        """
        return (inf((GL1() and GL1() / DIVGL1)) + 0)

    @cache_result
    def RPQ2():
        """
        Revenu imposable suivant le quotient soumis au bar}me
        """
        return (inf((GL2() and GL2() / DIVGL2)) + 0)

    @cache_result
    def RPQ3():
        """
        Revenu imposable suivant le quotient soumis au bar}me
        """
        return (inf((GL3() and GL3() / DIVGL3)) + 0)

    @cache_result
    def RPQ4():
        """
        Revenu imposable suivant le quotient soumis au bar}me
        """
        return (inf((GL4() and GL4() / DIVGL4)) + 0)

    @cache_result
    def RPQFV():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From RPQFx
        """
        return inf((GLFV() and GLFV() / saisie_variables.get('COTFV', 0)))

    @cache_result
    def RPQFC():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From RPQFx
        """
        return inf((GLFC() and GLFC() / saisie_variables.get('COTFC', 0)))

    @cache_result
    def RPQF1():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From RPQFx
        """
        return inf((GLF1() and GLF1() / saisie_variables.get('COTF1', 0)))

    @cache_result
    def RPQF2():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From RPQFx
        """
        return inf((GLF2() and GLF2() / saisie_variables.get('COTF2', 0)))

    @cache_result
    def RPQF3():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From RPQFx
        """
        return inf((GLF3() and GLF3() / saisie_variables.get('COTF3', 0)))

    @cache_result
    def RPQF4():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From RPQFx
        """
        return inf((GLF4() and GLF4() / saisie_variables.get('COTF4', 0)))

    @cache_result
    def RPQPALIMV():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMx
        """
        return inf((GLPALIMV() and GLPALIMV() / saisie_variables.get('PENSALNBV', 0)))

    @cache_result
    def RPQPALIMC():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMx
        """
        return inf((GLPALIMC() and GLPALIMC() / saisie_variables.get('PENSALNBC', 0)))

    @cache_result
    def RPQPALIM1():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMx
        """
        return inf((GLPALIM1() and GLPALIM1() / saisie_variables.get('PENSALNBP1', 0)))

    @cache_result
    def RPQPALIM2():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMx
        """
        return inf((GLPALIM2() and GLPALIM2() / saisie_variables.get('PENSALNBP2', 0)))

    @cache_result
    def RPQPALIM3():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMx
        """
        return inf((GLPALIM3() and GLPALIM3() / saisie_variables.get('PENSALNBP3', 0)))

    @cache_result
    def RPQPALIM4():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMx
        """
        return inf((GLPALIM4() and GLPALIM4() / saisie_variables.get('PENSALNBP4', 0)))

    @cache_result
    def RPQRF1():
        """
        rev. foncier imposables suivant le quotient soumis au bareme
        """
        return inf((GLRF1() and GLRF1() / saisie_variables.get('FONCINB', 0)))

    @cache_result
    def RPQRF2():
        """
        rev. foncier imposables suivant le quotient soumis au bareme
        """
        return inf((GLRF2() and GLRF2() / saisie_variables.get('REAMORNB', 0)))

    @cache_result
    def RPQRCMDC():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMDC() and GLRCMDC() / saisie_variables.get('REVACTNB', 0)))

    @cache_result
    def RPQRCMFU():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMFU() and GLRCMFU() / saisie_variables.get('REVPEANB', 0)))

    @cache_result
    def RPQRCMCH():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMCH() and GLRCMCH() / saisie_variables.get('PROVIENB', 0)))

    @cache_result
    def RPQRCMTR():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMTR() and GLRCMTR() / saisie_variables.get('INTERENB', 0)))

    @cache_result
    def RPQRCMTS():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMTS() and GLRCMTS() / saisie_variables.get('DISQUONB', 0)))

    @cache_result
    def RPQRCMGO():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMGO() and GLRCMGO() / saisie_variables.get('RESTUCNB', 0)))

    @cache_result
    def RPQPRRV():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRi
        """
        return inf((GLPRRV() and GLPRRV() / saisie_variables.get('CARPENBAV', 0)))

    @cache_result
    def RPQPRRC():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRi
        """
        return inf((GLPRRC() and GLPRRC() / saisie_variables.get('CARPENBAC', 0)))

    @cache_result
    def RPQPRR1():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRi
        """
        return inf((GLPRR1() and GLPRR1() / saisie_variables.get('CARPENBAP1', 0)))

    @cache_result
    def RPQPRR2():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRi
        """
        return inf((GLPRR2() and GLPRR2() / saisie_variables.get('CARPENBAP2', 0)))

    @cache_result
    def RPQPRR3():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRi
        """
        return inf((GLPRR3() and GLPRR3() / saisie_variables.get('CARPENBAP3', 0)))

    @cache_result
    def RPQPRR4():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRi
        """
        return inf((GLPRR4() and GLPRR4() / saisie_variables.get('CARPENBAP4', 0)))

    @cache_result
    def RPQPRRZV():
        """
        pensions  alim imposables suivant le quotient code RxZ
        """
        return inf((GLPRRZV() and GLPRRZV() / saisie_variables.get('CODNAZ', 0)))

    @cache_result
    def RPQPRRZC():
        """
        pensions  alim imposables suivant le quotient code RxZ
        """
        return inf((GLPRRZC() and GLPRRZC() / saisie_variables.get('CODNBZ', 0)))

    @cache_result
    def RPQPRRZ1():
        """
        pensions  alim imposables suivant le quotient code RxZ
        """
        return inf((GLPRRZ1() and GLPRRZ1() / saisie_variables.get('CODNCZ', 0)))

    @cache_result
    def RPQPRRZ2():
        """
        pensions  alim imposables suivant le quotient code RxZ
        """
        return inf((GLPRRZ2() and GLPRRZ2() / saisie_variables.get('CODNDZ', 0)))

    @cache_result
    def RPQPRRZ3():
        """
        pensions  alim imposables suivant le quotient code RxZ
        """
        return inf((GLPRRZ3() and GLPRRZ3() / saisie_variables.get('CODNEZ', 0)))

    @cache_result
    def RPQPRRZ4():
        """
        pensions  alim imposables suivant le quotient code RxZ
        """
        return inf((GLPRRZ4() and GLPRRZ4() / saisie_variables.get('CODNFZ', 0)))

    @cache_result
    def RPQRVO():
        """
        rente viagere imposables suivant le quotient soumis au bareme
        """
        return inf((GLRVO() and GLRVO() / saisie_variables.get('RENTAXNB', 0)))

    @cache_result
    def RPQRVO5():
        """
        rente viagere imposables suivant le quotient soumis au bareme
        """
        return inf((GLRVO5() and GLRVO5() / saisie_variables.get('RENTAXNB5', 0)))

    @cache_result
    def RPQRVO6():
        """
        rente viagere imposables suivant le quotient soumis au bareme
        """
        return inf((GLRVO6() and GLRVO6() / saisie_variables.get('RENTAXNB6', 0)))

    @cache_result
    def RPQRVO7():
        """
        rente viagere imposables suivant le quotient soumis au bareme
        """
        return inf((GLRVO7() and GLRVO7() / saisie_variables.get('RENTAXNB7', 0)))

    @cache_result
    def RPQTSV():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSi
        """
        return inf((GLTSV() and GLTSV() / saisie_variables.get('CARTSNBAV', 0)))

    @cache_result
    def RPQTSC():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSi
        """
        return inf((GLTSC() and GLTSC() / saisie_variables.get('CARTSNBAC', 0)))

    @cache_result
    def RPQTS1():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSi
        """
        return inf((GLTS1() and GLTS1() / saisie_variables.get('CARTSNBAP1', 0)))

    @cache_result
    def RPQTS2():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSi
        """
        return inf((GLTS2() and GLTS2() / saisie_variables.get('CARTSNBAP2', 0)))

    @cache_result
    def RPQTS3():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSi
        """
        return inf((GLTS3() and GLTS3() / saisie_variables.get('CARTSNBAP3', 0)))

    @cache_result
    def RPQTS4():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSi
        """
        return inf((GLTS4() and GLTS4() / saisie_variables.get('CARTSNBAP4', 0)))

    @cache_result
    def RPQTSREMPV():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPi
        """
        return inf((GLTSREMPV() and GLTSREMPV() / saisie_variables.get('REMPLANBV', 0)))

    @cache_result
    def RPQTSREMPC():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPi
        """
        return inf((GLTSREMPC() and GLTSREMPC() / saisie_variables.get('REMPLANBC', 0)))

    @cache_result
    def RPQTSREMP1():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPi
        """
        return inf((GLTSREMP1() and GLTSREMP1() / saisie_variables.get('REMPLANBP1', 0)))

    @cache_result
    def RPQTSREMP2():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPi
        """
        return inf((GLTSREMP2() and GLTSREMP2() / saisie_variables.get('REMPLANBP2', 0)))

    @cache_result
    def RPQTSREMP3():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPi
        """
        return inf((GLTSREMP3() and GLTSREMP3() / saisie_variables.get('REMPLANBP3', 0)))

    @cache_result
    def RPQTSREMP4():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPi
        """
        return inf((GLTSREMP4() and GLTSREMP4() / saisie_variables.get('REMPLANBP4', 0)))

    @cache_result
    def RPQRVG():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NVG
        """
        return (inf((GLRVG() and GLRVG() / saisie_variables.get('CODNVG', 0))) + 0)

    @cache_result
    def RPQRWB():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NWB
        """
        return (inf((GLRWB() and GLRWB() / saisie_variables.get('CODNWB', 0))) + 0)

    @cache_result
    def RPQRWA():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NWA
        """
        return (inf((GLRWA() and GLRWA() / saisie_variables.get('CODNWA', 0))) + 0)

    @cache_result
    def TONEQUO1():
        """
        somme des revenus au quotient divises par leur quotient respectif
        """
        return (somme([RPQ1(), RPQ2(), RPQ3(), RPQ4()]) + somme([RPQFV(), RPQFC(), RPQF1(), RPQF2(), RPQF3(), RPQF4()]) + somme([RPQPALIMV(), RPQPALIMC(), RPQPALIM1(), RPQPALIM2(), RPQPALIM3(), RPQPALIM4()]) + somme([RPQRF1(), RPQRF2()]) + RPQRCMDC() + RPQRCMFU() + RPQRCMCH() + RPQRCMTR() + RPQRCMTS() + RPQRCMGO() + somme([RPQPRRV(), RPQPRRC(), RPQPRR1(), RPQPRR2(), RPQPRR3(), RPQPRR4()]) + somme([RPQPRRZV(), RPQPRRZC(), RPQPRRZ1(), RPQPRRZ2(), RPQPRRZ3(), RPQPRRZ4()]) + RPQRVO() + RPQRVO5() + RPQRVO6() + RPQRVO7() + somme([RPQTSV(), RPQTSC(), RPQTS1(), RPQTS2(), RPQTS3(), RPQTS4()]) + somme([RPQTSREMPV(), RPQTSREMPC(), RPQTSREMP1(), RPQTSREMP2(), RPQTSREMP3(), RPQTSREMP4()]) + RPQRVG() + (RPQRWB() and RPQRWB() * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((RPQRWB() + RPQRWA()) and (RPQRWB() + RPQRWA()) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))))

    @cache_result
    def TRPQ1():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        """
        return (inf((TGL1() and TGL1() / DIVGL1)) + 0)

    @cache_result
    def TRPQ2():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        """
        return (inf((TGL2() and TGL2() / DIVGL2)) + 0)

    @cache_result
    def TRPQ3():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        """
        return (inf((TGL3() and TGL3() / DIVGL3)) + 0)

    @cache_result
    def TRPQ4():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        """
        return (inf((TGL4() and TGL4() / DIVGL4)) + 0)

    @cache_result
    def TRPQFV():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From TRPQFx
        """
        return inf((TGLFV() and TGLFV() / saisie_variables.get('COTFV', 0)))

    @cache_result
    def TRPQFC():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From TRPQFx
        """
        return inf((TGLFC() and TGLFC() / saisie_variables.get('COTFC', 0)))

    @cache_result
    def TRPQF1():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From TRPQFx
        """
        return inf((TGLF1() and TGLF1() / saisie_variables.get('COTF1', 0)))

    @cache_result
    def TRPQF2():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From TRPQFx
        """
        return inf((TGLF2() and TGLF2() / saisie_variables.get('COTF2', 0)))

    @cache_result
    def TRPQF3():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From TRPQFx
        """
        return inf((TGLF3() and TGLF3() / saisie_variables.get('COTF3', 0)))

    @cache_result
    def TRPQF4():
        """
        pensions footballeurs imposables suivant le quotient soumis au bareme
        From TRPQFx
        """
        return inf((TGLF4() and TGLF4() / saisie_variables.get('COTF4', 0)))

    @cache_result
    def TRPQPALIMV():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMx
        """
        return inf((TGLPALIMV() and TGLPALIMV() / saisie_variables.get('PENSALNBV', 0)))

    @cache_result
    def TRPQPALIMC():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMx
        """
        return inf((TGLPALIMC() and TGLPALIMC() / saisie_variables.get('PENSALNBC', 0)))

    @cache_result
    def TRPQPALIM1():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMx
        """
        return inf((TGLPALIM1() and TGLPALIM1() / saisie_variables.get('PENSALNBP1', 0)))

    @cache_result
    def TRPQPALIM2():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMx
        """
        return inf((TGLPALIM2() and TGLPALIM2() / saisie_variables.get('PENSALNBP2', 0)))

    @cache_result
    def TRPQPALIM3():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMx
        """
        return inf((TGLPALIM3() and TGLPALIM3() / saisie_variables.get('PENSALNBP3', 0)))

    @cache_result
    def TRPQPALIM4():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMx
        """
        return inf((TGLPALIM4() and TGLPALIM4() / saisie_variables.get('PENSALNBP4', 0)))

    @cache_result
    def TRPQRF1():
        """
        rev. foncier imposables suivant le quotient tx eff
        """
        return inf((TGLRF1() and TGLRF1() / saisie_variables.get('FONCINB', 0)))

    @cache_result
    def TRPQRF2():
        """
        rev. foncier imposables suivant le quotient tx eff
        """
        return inf((TGLRF2() and TGLRF2() / saisie_variables.get('REAMORNB', 0)))

    @cache_result
    def TRPQRCMDC():
        """
        Revenu imposable suivant le quotient  tx eff
        """
        return inf((TGLRCMDC() and TGLRCMDC() / saisie_variables.get('REVACTNB', 0)))

    @cache_result
    def TRPQRCMFU():
        """
        Revenu imposable suivant le quotient  tx eff
        """
        return inf((TGLRCMFU() and TGLRCMFU() / saisie_variables.get('REVPEANB', 0)))

    @cache_result
    def TRPQRCMCH():
        """
        Revenu imposable suivant le quotient  tx eff
        """
        return inf((TGLRCMCH() and TGLRCMCH() / saisie_variables.get('PROVIENB', 0)))

    @cache_result
    def TRPQRCMTR():
        """
        Revenu imposable suivant le quotient  tx eff
        """
        return inf((TGLRCMTR() and TGLRCMTR() / saisie_variables.get('INTERENB', 0)))

    @cache_result
    def TRPQRCMTS():
        """
        Revenu imposable suivant le quotient  tx eff
        """
        return inf((TGLRCMTS() and TGLRCMTS() / saisie_variables.get('DISQUONB', 0)))

    @cache_result
    def TRPQRCMGO():
        """
        Revenu imposable suivant le quotient  tx eff
        """
        return inf((TGLRCMGO() and TGLRCMGO() / saisie_variables.get('RESTUCNB', 0)))

    @cache_result
    def TRPQPRRV():
        """
        pensions  alim imposables suivant le quotient tx eff
        From TRPQPRRi
        """
        return inf((TGLPRRV() and TGLPRRV() / saisie_variables.get('CARPENBAV', 0)))

    @cache_result
    def TRPQPRRC():
        """
        pensions  alim imposables suivant le quotient tx eff
        From TRPQPRRi
        """
        return inf((TGLPRRC() and TGLPRRC() / saisie_variables.get('CARPENBAC', 0)))

    @cache_result
    def TRPQPRR1():
        """
        pensions  alim imposables suivant le quotient tx eff
        From TRPQPRRi
        """
        return inf((TGLPRR1() and TGLPRR1() / saisie_variables.get('CARPENBAP1', 0)))

    @cache_result
    def TRPQPRR2():
        """
        pensions  alim imposables suivant le quotient tx eff
        From TRPQPRRi
        """
        return inf((TGLPRR2() and TGLPRR2() / saisie_variables.get('CARPENBAP2', 0)))

    @cache_result
    def TRPQPRR3():
        """
        pensions  alim imposables suivant le quotient tx eff
        From TRPQPRRi
        """
        return inf((TGLPRR3() and TGLPRR3() / saisie_variables.get('CARPENBAP3', 0)))

    @cache_result
    def TRPQPRR4():
        """
        pensions  alim imposables suivant le quotient tx eff
        From TRPQPRRi
        """
        return inf((TGLPRR4() and TGLPRR4() / saisie_variables.get('CARPENBAP4', 0)))

    @cache_result
    def TRPQPRRZV():
        """
        pensions  alim imposables suivant le quotient tx eff
        """
        return inf((TGLPRRZV() and TGLPRRZV() / saisie_variables.get('CODNAZ', 0)))

    @cache_result
    def TRPQPRRZC():
        """
        pensions  alim imposables suivant le quotient tx eff
        """
        return inf((TGLPRRZC() and TGLPRRZC() / saisie_variables.get('CODNBZ', 0)))

    @cache_result
    def TRPQPRRZ1():
        """
        pensions  alim imposables suivant le quotient tx eff
        """
        return inf((TGLPRRZ1() and TGLPRRZ1() / saisie_variables.get('CODNCZ', 0)))

    @cache_result
    def TRPQPRRZ2():
        """
        pensions  alim imposables suivant le quotient tx eff
        """
        return inf((TGLPRRZ2() and TGLPRRZ2() / saisie_variables.get('CODNDZ', 0)))

    @cache_result
    def TRPQPRRZ3():
        """
        pensions  alim imposables suivant le quotient tx eff
        """
        return inf((TGLPRRZ3() and TGLPRRZ3() / saisie_variables.get('CODNEZ', 0)))

    @cache_result
    def TRPQPRRZ4():
        """
        pensions  alim imposables suivant le quotient tx eff
        """
        return inf((TGLPRRZ4() and TGLPRRZ4() / saisie_variables.get('CODNFZ', 0)))

    @cache_result
    def TRPQRVO():
        """
        rente viagere imposables suivant le quotient tx eff
        """
        return inf((TGLRVO() and TGLRVO() / saisie_variables.get('RENTAXNB', 0)))

    @cache_result
    def TRPQRVO5():
        """
        rente viagere imposables suivant le quotient tx eff
        """
        return inf((TGLRVO5() and TGLRVO5() / saisie_variables.get('RENTAXNB5', 0)))

    @cache_result
    def TRPQRVO6():
        """
        rente viagere imposables suivant le quotient tx eff
        """
        return inf((TGLRVO6() and TGLRVO6() / saisie_variables.get('RENTAXNB6', 0)))

    @cache_result
    def TRPQRVO7():
        """
        rente viagere imposables suivant le quotient tx eff
        """
        return inf((TGLRVO7() and TGLRVO7() / saisie_variables.get('RENTAXNB7', 0)))

    @cache_result
    def TRPQTSV():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSi
        """
        return inf((TGLTSV() and TGLTSV() / saisie_variables.get('CARTSNBAV', 0)))

    @cache_result
    def TRPQTSC():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSi
        """
        return inf((TGLTSC() and TGLTSC() / saisie_variables.get('CARTSNBAC', 0)))

    @cache_result
    def TRPQTS1():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSi
        """
        return inf((TGLTS1() and TGLTS1() / saisie_variables.get('CARTSNBAP1', 0)))

    @cache_result
    def TRPQTS2():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSi
        """
        return inf((TGLTS2() and TGLTS2() / saisie_variables.get('CARTSNBAP2', 0)))

    @cache_result
    def TRPQTS3():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSi
        """
        return inf((TGLTS3() and TGLTS3() / saisie_variables.get('CARTSNBAP3', 0)))

    @cache_result
    def TRPQTS4():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSi
        """
        return inf((TGLTS4() and TGLTS4() / saisie_variables.get('CARTSNBAP4', 0)))

    @cache_result
    def TRPQTSREMPV():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSREMPi
        """
        return inf((TGLTSREMPV() and TGLTSREMPV() / saisie_variables.get('REMPLANBV', 0)))

    @cache_result
    def TRPQTSREMPC():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSREMPi
        """
        return inf((TGLTSREMPC() and TGLTSREMPC() / saisie_variables.get('REMPLANBC', 0)))

    @cache_result
    def TRPQTSREMP1():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSREMPi
        """
        return inf((TGLTSREMP1() and TGLTSREMP1() / saisie_variables.get('REMPLANBP1', 0)))

    @cache_result
    def TRPQTSREMP2():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSREMPi
        """
        return inf((TGLTSREMP2() and TGLTSREMP2() / saisie_variables.get('REMPLANBP2', 0)))

    @cache_result
    def TRPQTSREMP3():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSREMPi
        """
        return inf((TGLTSREMP3() and TGLTSREMP3() / saisie_variables.get('REMPLANBP3', 0)))

    @cache_result
    def TRPQTSREMP4():
        """
        TS imposables suivant le quotient tx eff
        From TRPQTSREMPi
        """
        return inf((TGLTSREMP4() and TGLTSREMP4() / saisie_variables.get('REMPLANBP4', 0)))

    @cache_result
    def TRPQRVG():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NVG
        """
        return (inf((TGLRVG() and TGLRVG() / saisie_variables.get('CODNVG', 0))) + 0)

    @cache_result
    def TRPQRWB():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NWB
        """
        return (inf((TGLRWB() and TGLRWB() / saisie_variables.get('CODNWB', 0))) + 0)

    @cache_result
    def TRPQRWA():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NWA
        """
        return (inf((TGLRWA() and TGLRWA() / saisie_variables.get('CODNWA', 0))) + 0)

    @cache_result
    def TONEQUO1T():
        """
        somme des revenus au quot divises par leur quotient respectif tx eff
        """
        return (somme([TRPQ1(), TRPQ2(), TRPQ3(), TRPQ4()]) + somme([TRPQFV(), TRPQFC(), TRPQF1(), TRPQF2(), TRPQF3(), TRPQF4()]) + somme([TRPQPALIMV(), TRPQPALIMC(), TRPQPALIM1(), TRPQPALIM2(), TRPQPALIM3(), TRPQPALIM4()]) + somme([TRPQRF1(), TRPQRF2()]) + TRPQRCMDC() + TRPQRCMFU() + TRPQRCMCH() + TRPQRCMTR() + TRPQRCMTS() + TRPQRCMGO() + somme([TRPQPRRV(), TRPQPRRC(), TRPQPRR1(), TRPQPRR2(), TRPQPRR3(), TRPQPRR4()]) + somme([TRPQPRRZV(), TRPQPRRZC(), TRPQPRRZ1(), TRPQPRRZ2(), TRPQPRRZ3(), TRPQPRRZ4()]) + TRPQRVO() + TRPQRVO5() + TRPQRVO6() + TRPQRVO7() + somme([TRPQTSV(), TRPQTSC(), TRPQTS1(), TRPQTS2(), TRPQTS3(), TRPQTS4()]) + somme([TRPQTSREMPV(), TRPQTSREMPC(), TRPQTSREMP1(), TRPQTSREMP2(), TRPQTSREMP3(), TRPQTSREMP4()]) + TRPQRVG() + (TRPQRWB() and TRPQRWB() * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((TRPQRWB() + TRPQRWA()) and (TRPQRWB() + TRPQRWA()) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))))

    @cache_result
    def TETONEQUO1():
        """
        somme des revenus au quot divises par leur quotient respectif tx eff
        """
        return ((TONEQUO1() and TONEQUO1() * (1 - positif(INDTEFF()))) + (TONEQUO1T() and TONEQUO1T() * positif(INDTEFF())))

    @cache_result
    def RB51():
        """
        Revenu imposable pour le calcul du quotient familial
        From RB5z
        """
        return max(0, (RB01() + TETONEQUO1()))

    @cache_result
    def QF511():
        """
        Quotient familial
        From QF5yz
        """
        return (arr(RB51()) and arr(RB51()) / NB1())

    @cache_result
    def DS511():
        """
        Droits simples issus du bareme
        From DSxyz
        """
        return ((max((QF511() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF511() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX1() and TAUX1() / 100)) + (max((QF511() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF511() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX2() and TAUX2() / 100)) + (max((QF511() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF511() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX3() and TAUX3() / 100)) + (max((QF511() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF511() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX4() and TAUX4() / 100)) + (max((QF511() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF511() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX5() and TAUX5() / 100)))

    @cache_result
    def IS511():
        """
        Droits simples avant plafonnement du quotient familial
        From ISxyz
        """
        return arr((DS511() and DS511() * NB1()))

    @cache_result
    def QF521():
        """
        Quotient familial
        From QF5yz
        """
        return (arr(RB51()) and arr(RB51()) / NB2())

    @cache_result
    def DS521():
        """
        Droits simples issus du bareme
        From DSxyz
        """
        return ((max((QF521() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF521() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX1() and TAUX1() / 100)) + (max((QF521() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF521() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX2() and TAUX2() / 100)) + (max((QF521() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF521() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX3() and TAUX3() / 100)) + (max((QF521() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF521() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX4() and TAUX4() / 100)) + (max((QF521() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF521() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX5() and TAUX5() / 100)))

    @cache_result
    def IS521():
        """
        Droits simples avant plafonnement du quotient familial
        From ISxyz
        """
        return arr((DS521() and DS521() * NB2()))

    @cache_result
    def IN51():
        """
        Droits simples apres plafonnement QF pour calcul reduc compl.
        From INxz
        """
        return max(IS511(), (IS521() - PLA()))

    @cache_result
    def IQUOTOT1():
        """
        Impot au quotient tous quotients confondus
        From IQUOTOTz
        """
        return (IN51() - IN01())

    @cache_result
    def TERPQRWB():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot.  code RWB
        """
        return ((RPQRWB() and RPQRWB() * (1 - positif(INDTEFF()))) + (TRPQRWB() and TRPQRWB() * positif(INDTEFF())))

    @cache_result
    def ZIPQRWB1():
        """
        Droit sur les bases de quotient RWB
        From ZIPQRWBz
        """
        return ((positif((TEGLRWA() + TEGLRVG() + somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((TEGLRWA() + TEGLRVG() + somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQRWB() and IQUOTOT1() * TERPQRWB() / TETONEQUO1()))) + ((1 - positif((TEGLRWA() + TEGLRVG() + somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((TEGLRWA() + TEGLRVG() + somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * IQUOTOT1()))

    @cache_result
    def IPQRWB1():
        """
        Droit sur tous les revenus au quotient code RWB
        From IPQRWBz
        """
        return (ZIPQRWB1() and ZIPQRWB1() * saisie_variables.get('CODNWB', 0))

    @cache_result
    def TERPQRWA():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot.  code RWA
        """
        return ((RPQRWA() and RPQRWA() * (1 - positif(INDTEFF()))) + (TRPQRWA() and TRPQRWA() * positif(INDTEFF())))

    @cache_result
    def ZIPQRWA1():
        """
        Droit sur les bases de quotient RWA
        From ZIPQRWAz
        """
        return ((positif((TEGLRVG() + somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((TEGLRVG() + somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQRWA() and IQUOTOT1() * TERPQRWA() / TETONEQUO1()))) + ((1 - positif((TEGLRVG() + somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((TEGLRVG() + somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQRWB1())))

    @cache_result
    def IPQRWA1():
        """
        Droit sur tous les revenus au quotient code RWA
        From IPQRWAz
        """
        return (ZIPQRWA1() and ZIPQRWA1() * saisie_variables.get('CODNWA', 0))

    @cache_result
    def TERPQRVG():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot.  code RVG
        """
        return ((RPQRVG() and RPQRVG() * (1 - positif(INDTEFF()))) + (TRPQRVG() and TRPQRVG() * positif(INDTEFF())))

    @cache_result
    def ZIPQRVG1():
        """
        Droit sur les bases de quotient RVG 
        From ZIPQRVGz
        """
        return ((positif((somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQRVG() and IQUOTOT1() * TERPQRVG() / TETONEQUO1()))) + ((1 - positif((somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGL1(), TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQRWB1() - ZIPQRWA1())))

    @cache_result
    def IPQRVG1():
        """
        Droit sur tous les revenus au quotient code RVG
        From IPQRVGz
        """
        return (ZIPQRVG1() and ZIPQRVG1() * saisie_variables.get('CODNVG', 0))

    @cache_result
    def TERPQ1():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQ1() and RPQ1() * (1 - positif(INDTEFF()))) + (TRPQ1() and TRPQ1() * positif(INDTEFF())))

    @cache_result
    def ZIPQ11():
        """
        Droit sur les bases de quotient 1 @ x
        From ZIPQ1z
        """
        return ((positif((somme([TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((somme([TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQ1() and IQUOTOT1() * TERPQ1() / TETONEQUO1()))) + ((1 - positif((somme([TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGL2(), TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQRWB1() - ZIPQRWA1() - ZIPQRVG1())))

    @cache_result
    def IPQ11():
        """
        Droit sur tous les revenus au quotient
        From IPQ1z
        """
        return (ZIPQ11() and ZIPQ11() * 1)

    @cache_result
    def TERPQ2():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQ2() and RPQ2() * (1 - positif(INDTEFF()))) + (TRPQ2() and TRPQ2() * positif(INDTEFF())))

    @cache_result
    def ZIPQ21():
        """
        Droit sur les bases de quotient 1 @ x
        From ZIPQ2z
        """
        return ((positif((somme([TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((somme([TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQ2() and IQUOTOT1() * TERPQ2() / TETONEQUO1()))) + ((1 - positif((somme([TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGL3(), TEGL4()]) + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQRWB1() - ZIPQRWA1() - ZIPQRVG1() - ZIPQ11())))

    @cache_result
    def IPQ21():
        """
        Droit sur les bases de quotient 1 a x
        From IPQ2z
        """
        return (ZIPQ21() and ZIPQ21() * 2)

    @cache_result
    def TERPQ3():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQ3() and RPQ3() * (1 - positif(INDTEFF()))) + (TRPQ3() and TRPQ3() * positif(INDTEFF())))

    @cache_result
    def ZIPQ31():
        """
        Droit sur les bases de quotient 1 @ x
        From ZIPQ3z
        """
        return ((positif((TEGL4() + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((TEGL4() + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQ3() and IQUOTOT1() * TERPQ3() / TETONEQUO1()))) + ((1 - positif((TEGL4() + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((TEGL4() + TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQRWB1() - ZIPQRWA1() - ZIPQRVG1() - somme([ZIPQ11(), ZIPQ21()]))))

    @cache_result
    def IPQ31():
        """
        Droit sur les bases de quotient 1 a x
        From IPQ3z
        """
        return (ZIPQ31() and ZIPQ31() * 3)

    @cache_result
    def TERPQ4():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQ4() and RPQ4() * (1 - positif(INDTEFF()))) + (TRPQ4() and TRPQ4() * positif(INDTEFF())))

    @cache_result
    def ZIPQ41():
        """
        Droit sur les bases de quotient 1 @ x
        From ZIPQ4z
        """
        return ((positif((TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQ4() and IQUOTOT1() * TERPQ4() / TETONEQUO1()))) + ((1 - positif((TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((TEGLFTOT() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQRWB1() - ZIPQRWA1() - ZIPQRVG1() - somme([ZIPQ11(), ZIPQ21(), ZIPQ31()]))))

    @cache_result
    def IPQ41():
        """
        Droit sur les bases de quotient 1 a x
        From IPQ4z
        """
        return (ZIPQ41() and ZIPQ41() * 4)

    @cache_result
    def TERPQFV():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQFV() and RPQFV() * (1 - positif(INDTEFF()))) + (TRPQFV() and TRPQFV() * positif(INDTEFF())))

    @cache_result
    def ZIPQ1TOT():
        """
        somme des ZIPQi1
        """
        return (somme([ZIPQ11(), ZIPQ21(), ZIPQ31(), ZIPQ41()]) + ZIPQRVG1() + ZIPQRWB1() + ZIPQRWA1())

    @cache_result
    def ZIPQFV1():
        """
        Droit sur les pensions footballeurs  VOUS    avant x par le quotient
        From ZIPQFVz
        """
        return ((positif((somme([TEGLFC(), TEGLF1(), TEGLF2(), TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((somme([TEGLFC(), TEGLF1(), TEGLF2(), TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQFV() and IQUOTOT1() * TERPQFV() / TETONEQUO1()))) + ((1 - positif((somme([TEGLFC(), TEGLF1(), TEGLF2(), TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLFC(), TEGLF1(), TEGLF2(), TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT())))

    @cache_result
    def IPQFV1():
        """
        Droit sur les pensions footballeurs VOUS
        From IPQFiz
        """
        return (ZIPQFV1() and ZIPQFV1() * saisie_variables.get('COTFV', 0))

    @cache_result
    def TERPQFC():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQFC() and RPQFC() * (1 - positif(INDTEFF()))) + (TRPQFC() and TRPQFC() * positif(INDTEFF())))

    @cache_result
    def ZIPQFC1():
        """
        Droit sur les pensions footballeurs CONJOINT avant x par le quotient
        From ZIPQFCz
        """
        return ((positif((somme([TEGLF1(), TEGLF2(), TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((somme([TEGLF1(), TEGLF2(), TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQFC() and IQUOTOT1() * TERPQFC() / TETONEQUO1()))) + ((1 - positif((somme([TEGLF1(), TEGLF2(), TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLF1(), TEGLF2(), TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQFV1())))

    @cache_result
    def IPQFC1():
        """
        Droit sur les pensions footballeurs CONJOINT
        From IPQFiz
        """
        return (ZIPQFC1() and ZIPQFC1() * saisie_variables.get('COTFC', 0))

    @cache_result
    def TERPQF1():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQF1() and RPQF1() * (1 - positif(INDTEFF()))) + (TRPQF1() and TRPQF1() * positif(INDTEFF())))

    @cache_result
    def VARDMOND():
        """
        8ZY recalcule suite art 1731 bis
        """
        return (max(0, (((saisie_variables.get('DMOND', 0) and saisie_variables.get('DMOND', 0) * (1 - positif(base_variables['SOMMEMOND_2']))) and (saisie_variables.get('DMOND', 0) and saisie_variables.get('DMOND', 0) * (1 - positif(base_variables['SOMMEMOND_2']))) * (1 - base_variables['PREM8_11'])) - (saisie_variables.get('DEFZU', 0) and positif(base_variables['SOMMEMOND_2']) and saisie_variables.get('DEFZU', 0) * positif(base_variables['SOMMEMOND_2']) * (1 - base_variables['PREM8_11'])) - (saisie_variables.get('DEFZU', 0) and saisie_variables.get('DEFZU', 0) * base_variables['PREM8_11']))) and max(0, (((saisie_variables.get('DMOND', 0) and saisie_variables.get('DMOND', 0) * (1 - positif(base_variables['SOMMEMOND_2']))) and (saisie_variables.get('DMOND', 0) and saisie_variables.get('DMOND', 0) * (1 - positif(base_variables['SOMMEMOND_2']))) * (1 - base_variables['PREM8_11'])) - (saisie_variables.get('DEFZU', 0) and positif(base_variables['SOMMEMOND_2']) and saisie_variables.get('DEFZU', 0) * positif(base_variables['SOMMEMOND_2']) * (1 - base_variables['PREM8_11'])) - (saisie_variables.get('DEFZU', 0) and saisie_variables.get('DEFZU', 0) * base_variables['PREM8_11']))) * present(saisie_variables.get('DMOND', 0)))

    @cache_result
    def TONEQUOMHT():
        """
        revenus au quotient >=2 nets tx eff
        """
        return max(0, (TOTALQUOHT() - ((VARDMOND() and VARDMOND() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('DMOND', 0) and saisie_variables.get('DMOND', 0) * (1 - base_variables['ART1731BIS'])))))

    @cache_result
    def GLRWBM():
        """
        Revenus au quotient NWB hors revenus footballeurs nets imposables
        """
        return (((positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and saisie_variables.get('CODRWB', 0) and TONEQUOMHT() * saisie_variables.get('CODRWB', 0) / TOTALQUOHT()))) + ((1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * TONEQUOMHT())) and ((positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and saisie_variables.get('CODRWB', 0) and TONEQUOMHT() * saisie_variables.get('CODRWB', 0) / TOTALQUOHT()))) + ((1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * TONEQUOMHT())) * positif((null((1 - saisie_variables.get('FLAG_EXIT', 0))) + null((2 - saisie_variables.get('FLAG_EXIT', 0))))))

    @cache_result
    def GLRWAM():
        """
        Revenus au quotient NWA hors revenus footballeurs nets imposables
        """
        return (((positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and saisie_variables.get('CODRWA', 0) and TONEQUOMHT() * saisie_variables.get('CODRWA', 0) / TOTALQUOHT()))) + ((1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLRWBM()))) and ((positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and saisie_variables.get('CODRWA', 0) and TONEQUOMHT() * saisie_variables.get('CODRWA', 0) / TOTALQUOHT()))) + ((1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLRWBM()))) * null((2 - saisie_variables.get('FLAG_EXIT', 0))))

    @cache_result
    def GLRVGM():
        """
        Revenus au quotient NVG hors revenus footballeurs nets imposables
        """
        return ((positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and saisie_variables.get('CODRVG', 0) and TONEQUOMHT() * saisie_variables.get('CODRVG', 0) / TOTALQUOHT()))) + ((1 - positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLRWBM() - GLRWAM())))

    @cache_result
    def GL1M():
        """
        Revenus au quotient 1 hors rev foot nets imposablesTXMOY
        """
        return ((positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and GLN1() and TONEQUOMHT() * GLN1() / TOTALQUOHT()))) + ((1 - positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLRWBM() - GLRWAM() - GLRVGM())))

    @cache_result
    def GL2M():
        """
        Revenus au quotient 2 hors rev foot nets imposablesTXMOY
        """
        return ((positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and GLN2() and TONEQUOMHT() * GLN2() / TOTALQUOHT()))) + ((1 - positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLRWBM() - GLRWAM() - GLRVGM() - GL1M())))

    @cache_result
    def GL3M():
        """
        Revenus au quotient 3 hors rev foot nets imposablesTXMOY
        """
        return ((positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and GLN3() and TONEQUOMHT() * GLN3() / TOTALQUOHT()))) + ((1 - positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLRWBM() - GLRWAM() - GLRVGM() - GL1M() - GL2M())))

    @cache_result
    def GL4M():
        """
        Revenus au quotient 4 hors rev foot nets imposablesTXMOY
        """
        return ((positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and REV4() and TONEQUOMHT() * REV4() / TOTALQUOHT()))) + ((1 - positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLRWBM() - GLRWAM() - GLRVGM() - GL1M() - GL2M() - GL3M())))

    @cache_result
    def GLTOTM():
        """
        gain levee  quotient total foyer 
        """
        return (somme([GL1M(), GL2M(), GL3M(), GL4M()]) + GLRVGM() + GLRWBM() + GLRWAM())

    @cache_result
    def GLFVM():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENFV() and TONEQUOMHT() * PENFV() / TOTALQUOHT()))) + ((1 - positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM())))

    @cache_result
    def GLFCM():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENFC() and TONEQUOMHT() * PENFC() / TOTALQUOHT()))) + ((1 - positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFVM())))

    @cache_result
    def GLF1M():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENF1() and TONEQUOMHT() * PENF1() / TOTALQUOHT()))) + ((1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFVM() - GLFCM())))

    @cache_result
    def GLF2M():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENF2() and TONEQUOMHT() * PENF2() / TOTALQUOHT()))) + ((1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFVM() - GLFCM() - GLF1M())))

    @cache_result
    def TONEQUOM():
        """
        revenus au quotient >=2 nets TXMOY
        """
        return max(0, (TOTALQUO() - ((VARDMOND() and VARDMOND() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('DMOND', 0) and saisie_variables.get('DMOND', 0) * (1 - base_variables['ART1731BIS'])))))

    @cache_result
    def TGLRWBM():
        """
        Revenus au quotient NWB hors revenus footballeurs nets imposables
        """
        return (((positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and saisie_variables.get('CODRWB', 0) and TONEQUOM() * saisie_variables.get('CODRWB', 0) / TOTALQUO()))) + ((1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * TONEQUOM())) and ((positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and saisie_variables.get('CODRWB', 0) and TONEQUOM() * saisie_variables.get('CODRWB', 0) / TOTALQUO()))) + ((1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRWA', 0) + saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * TONEQUOM())) * positif((null((1 - saisie_variables.get('FLAG_EXIT', 0))) + null((2 - saisie_variables.get('FLAG_EXIT', 0))))))

    @cache_result
    def TGLRWAM():
        """
        Revenus au quotient NWA hors revenus footballeurs nets imposables
        """
        return (((positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and saisie_variables.get('CODRWA', 0) and TONEQUOM() * saisie_variables.get('CODRWA', 0) / TOTALQUO()))) + ((1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLRWBM()))) and ((positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and saisie_variables.get('CODRWA', 0) and TONEQUOM() * saisie_variables.get('CODRWA', 0) / TOTALQUO()))) + ((1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((saisie_variables.get('CODRVG', 0) + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLRWBM()))) * null((2 - saisie_variables.get('FLAG_EXIT', 0))))

    @cache_result
    def TGLRVGM():
        """
        Revenus au quotient NVG hors revenus footballeurs nets imposables
        """
        return ((positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and saisie_variables.get('CODRVG', 0) and TONEQUOM() * saisie_variables.get('CODRVG', 0) / TOTALQUO()))) + ((1 - positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLRWBM() - TGLRWAM())))

    @cache_result
    def TGL1M():
        """
        Revenus au quotient 1 hors rev foot nets imposablesTXMOY
        """
        return ((positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TGLN1() and TONEQUOM() * TGLN1() / TOTALQUO()))) + ((1 - positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLRWBM() - TGLRWAM() - TGLRVGM())))

    @cache_result
    def TGL2M():
        """
        Revenus au quotient 1 hors rev foot nets imposablesTXMOY
        """
        return ((positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TGLN2() and TONEQUOM() * TGLN2() / TOTALQUO()))) + ((1 - positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLRWBM() - TGLRWAM() - TGLRVGM() - TGL1M())))

    @cache_result
    def TGL3M():
        """
        Revenus au quotient 1 hors rev foot nets imposablesTXMOY
        """
        return ((positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TGLN3() and TONEQUOM() * TGLN3() / TOTALQUO()))) + ((1 - positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLRWBM() - TGLRWAM() - TGLRVGM() - TGL1M() - TGL2M())))

    @cache_result
    def TGL4M():
        """
        Revenus au quotient 1 hors rev foot nets imposablesTXMOY
        """
        return ((positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and REV4() and TONEQUOM() * REV4() / TOTALQUO()))) + ((1 - positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLRWBM() - TGLRWAM() - TGLRVGM() - TGL1M() - TGL2M() - TGL3M())))

    @cache_result
    def TGLTOTM():
        """
        gain levee  quotient total foyer 
        """
        return (somme([TGL1M(), TGL2M(), TGL3M(), TGL4M()]) + TGLRVGM() + TGLRWBM() + TGLRWAM())

    @cache_result
    def TGLFVM():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and PENFV() and TONEQUOM() * PENFV() / TOTALQUO()))) + ((1 - positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENFC() + PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM())))

    @cache_result
    def TGLFCM():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and PENFC() and TONEQUOM() * PENFC() / TOTALQUO()))) + ((1 - positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF1() + PENF2() + PENF3() + PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFVM())))

    @cache_result
    def TGLF1M():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and PENF1() and TONEQUOM() * PENF1() / TOTALQUO()))) + ((1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFVM() - TGLFCM())))

    @cache_result
    def TGLF2M():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and PENF2() and TONEQUOM() * PENF2() / TOTALQUO()))) + ((1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF2() + PENF3() + PENF4() + REV1() + REV2() + REV3() + REV4() + REVF() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFVM() - TGLFCM() - TGLF1M())))

    @cache_result
    def TEGLF2M():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLF2M() and GLF2M() * (1 - positif(INDTEFF()))) + (TGLF2M() and TGLF2M() * positif(INDTEFF())))

    @cache_result
    def GLF3M():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENF3() and TONEQUOMHT() * PENF3() / TOTALQUOHT()))) + ((1 - positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFVM() - GLFCM() - GLF1M() - GLF2M())))

    @cache_result
    def TGLF3M():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and PENF3() and TONEQUOM() * PENF3() / TOTALQUO()))) + ((1 - positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENF4() + REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFVM() - TGLFCM() - TGLF1M() - TGLF2M())))

    @cache_result
    def TEGLF3M():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLF3M() and GLF3M() * (1 - positif(INDTEFF()))) + (TGLF3M() and TGLF3M() * positif(INDTEFF())))

    @cache_result
    def GLF4M():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENF4() and TONEQUOMHT() * PENF4() / TOTALQUOHT()))) + ((1 - positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOT() - GLFVM() - GLFCM() - GLF1M() - GLF2M() - GLF3M())))

    @cache_result
    def TGLF4M():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return ((positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and PENF4() and TONEQUOM() * PENF4() / TOTALQUO()))) + ((1 - positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVALIM() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOT() - TGLFVM() - TGLFCM() - TGLF1M() - TGLF2M() - TGLF3M())))

    @cache_result
    def TEGLF4M():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLF4M() and GLF4M() * (1 - positif(INDTEFF()))) + (TGLF4M() and TGLF4M() * positif(INDTEFF())))

    @cache_result
    def ZIPQF11():
        """
        Droit sur les pensions footballeurs PAC avant x par le quotient
        From ZIPQF1z
        """
        return ((positif((somme([TEGLF2(), TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((somme([TEGLF2(), TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQF1() and IQUOTOT1() * TERPQF1() / TETONEQUO1()))) + ((1 - positif((somme([TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - somme([ZIPQFV1(), ZIPQFC1()]))))

    @cache_result
    def IPQF11():
        """
        Droit sur les pensions footballeurs PAC
        From IPQFiz
        """
        return (ZIPQF11() and ZIPQF11() * saisie_variables.get('COTF1', 0))

    @cache_result
    def TERPQF2():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQF2() and RPQF2() * (1 - positif(INDTEFF()))) + (TRPQF2() and TRPQF2() * positif(INDTEFF())))

    @cache_result
    def ZIPQF21():
        """
        Droit sur les pensions footballeurs PAC avant x par le quotient
        From ZIPQF2z
        """
        return ((positif((somme([TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((somme([TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQF2() and IQUOTOT1() * TERPQF2() / TETONEQUO1()))) + ((1 - positif((somme([TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLF3(), TEGLF4()]) + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - somme([ZIPQF11(), ZIPQFV1(), ZIPQFC1()]))))

    @cache_result
    def IPQF21():
        """
        Droit sur les pensions footballeurs PAC
        From IPQFiz
        """
        return (ZIPQF21() and ZIPQF21() * saisie_variables.get('COTF2', 0))

    @cache_result
    def TERPQF3():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQF3() and RPQF3() * (1 - positif(INDTEFF()))) + (TRPQF3() and TRPQF3() * positif(INDTEFF())))

    @cache_result
    def ZIPQF31():
        """
        Droit sur les pensions footballeurs PAC avant x par le quotient
        From ZIPQF3z
        """
        return ((positif((TEGLF4() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((TEGLF4() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQF3() and IQUOTOT1() * TERPQF3() / TETONEQUO1()))) + ((1 - positif((TEGLF4() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((TEGLF4() + TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - somme([ZIPQF11(), ZIPQF21(), ZIPQFV1(), ZIPQFC1()]))))

    @cache_result
    def IPQF31():
        """
        Droit sur les pensions footballeurs PAC
        From IPQFiz
        """
        return (ZIPQF31() and ZIPQF31() * saisie_variables.get('COTF3', 0))

    @cache_result
    def TERPQF4():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQF4() and RPQF4() * (1 - positif(INDTEFF()))) + (TRPQF4() and TRPQF4() * positif(INDTEFF())))

    @cache_result
    def ZIPQF41():
        """
        Droit sur les pensions foot PAC avant x par le quotient
        From ZIPQF4z
        """
        return ((positif((TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQF4() and IQUOTOT1() * TERPQF4() / TETONEQUO1()))) + ((1 - positif((TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((TEGLPALIMTOT() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - somme([ZIPQFV1(), ZIPQFC1(), ZIPQF11(), ZIPQF21(), ZIPQF31()]))))

    @cache_result
    def IPQF41():
        """
        Droit sur les pensions footballeurs PAC
        From IPQFiz
        """
        return (ZIPQF41() and ZIPQF41() * saisie_variables.get('COTF4', 0))

    @cache_result
    def TERPQPALIMV():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIMV() and RPQPALIMV() * (1 - positif(INDTEFF()))) + (TRPQPALIMV() and TRPQPALIMV() * positif(INDTEFF())))

    @cache_result
    def ZIPQF1TOT():
        """
        somme des ZIPQ
        """
        return somme([ZIPQFV1(), ZIPQFC1(), ZIPQF11(), ZIPQF21(), ZIPQF31(), ZIPQF41()])

    @cache_result
    def ZIPQPALIMV1():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPALIMVz
        """
        return ((positif((somme([TEGLPALIMC(), TEGLPALIM1(), TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((somme([TEGLPALIMC(), TEGLPALIM1(), TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPALIMV() and IQUOTOT1() * TERPQPALIMV() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPALIMC(), TEGLPALIM1(), TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPALIMC(), TEGLPALIM1(), TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT())))

    @cache_result
    def IPQPALIMV1():
        """
        ancien plafqf : droits quotient
        From IPQPALIMiz
        """
        return (ZIPQPALIMV1() and ZIPQPALIMV1() * saisie_variables.get('PENSALNBV', 0))

    @cache_result
    def TERPQPALIMC():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIMC() and RPQPALIMC() * (1 - positif(INDTEFF()))) + (TRPQPALIMC() and TRPQPALIMC() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIMC1():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPALIMCz
        """
        return ((positif((somme([TEGLPALIM1(), TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((somme([TEGLPALIM1(), TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPALIMC() and IQUOTOT1() * TERPQPALIMC() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPALIM1(), TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPALIM1(), TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIMV1())))

    @cache_result
    def IPQPALIMC1():
        """
        ancien plafqf : droits quotient
        From IPQPALIMiz
        """
        return (ZIPQPALIMC1() and ZIPQPALIMC1() * saisie_variables.get('PENSALNBC', 0))

    @cache_result
    def TERPQPALIM1():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIM1() and RPQPALIM1() * (1 - positif(INDTEFF()))) + (TRPQPALIM1() and TRPQPALIM1() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIM11():
        """
        droit sur les pensions Alim Conjoint avant x par le quotient
        From ZIPQPALIM1z
        """
        return ((positif((somme([TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((somme([TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPALIM1() and IQUOTOT1() * TERPQPALIM1() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPALIM2(), TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - somme([ZIPQPALIMV1(), ZIPQPALIMC1()]))))

    @cache_result
    def IPQPALIM11():
        """
        ancien plafqf : droits quotient
        From IPQPALIMiz
        """
        return (ZIPQPALIM11() and ZIPQPALIM11() * saisie_variables.get('PENSALNBP1', 0))

    @cache_result
    def TERPQPALIM2():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIM2() and RPQPALIM2() * (1 - positif(INDTEFF()))) + (TRPQPALIM2() and TRPQPALIM2() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIM21():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPALIM2z
        """
        return ((positif((somme([TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((somme([TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPALIM2() and IQUOTOT1() * TERPQPALIM2() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPALIM3(), TEGLPALIM4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - somme([ZIPQPALIM11(), ZIPQPALIMV1(), ZIPQPALIMC1()]))))

    @cache_result
    def IPQPALIM21():
        """
        ancien plafqf : droits quotient
        From IPQPALIMiz
        """
        return (ZIPQPALIM21() and ZIPQPALIM21() * saisie_variables.get('PENSALNBP2', 0))

    @cache_result
    def TERPQPALIM3():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIM3() and RPQPALIM3() * (1 - positif(INDTEFF()))) + (TRPQPALIM3() and TRPQPALIM3() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIM31():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPALIM3z
        """
        return ((positif((TEGLPALIM4() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((TEGLPALIM4() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPALIM3() and IQUOTOT1() * TERPQPALIM3() / TETONEQUO1()))) + ((1 - positif((TEGLPALIM4() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((TEGLPALIM4() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - somme([ZIPQPALIMV1(), ZIPQPALIMC1(), ZIPQPALIM11(), ZIPQPALIM21()]))))

    @cache_result
    def IPQPALIM31():
        """
        ancien plafqf : droits quotient
        From IPQPALIMiz
        """
        return (ZIPQPALIM31() and ZIPQPALIM31() * saisie_variables.get('PENSALNBP3', 0))

    @cache_result
    def TERPQPALIM4():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIM4() and RPQPALIM4() * (1 - positif(INDTEFF()))) + (TRPQPALIM4() and TRPQPALIM4() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIM41():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPALIM4z
        """
        return ((positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) and positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPALIM4() and IQUOTOT1() * TERPQPALIM4() / TETONEQUO1()))) + ((1 - positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) and (1 - positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRCMTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - somme([ZIPQPALIMV1(), ZIPQPALIMC1(), ZIPQPALIM11(), ZIPQPALIM21(), ZIPQPALIM31()]))))

    @cache_result
    def IPQPALIM41():
        """
        ancien plafqf : droits quotient
        From IPQPALIMiz
        """
        return (ZIPQPALIM41() and ZIPQPALIM41() * saisie_variables.get('PENSALNBP4', 0))

    @cache_result
    def TERPQTSV():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSV() and RPQTSV() * (1 - positif(INDTEFF()))) + (TRPQTSV() and TRPQTSV() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIM1TOT():
        """
        somme des ZIPQi1
        """
        return somme([ZIPQPALIMV1(), ZIPQPALIMC1(), ZIPQPALIM11(), ZIPQPALIM21(), ZIPQPALIM31(), ZIPQPALIM41()])

    @cache_result
    def TERPQRCMDC():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMDC() and RPQRCMDC() * (1 - positif(INDTEFF()))) + (TRPQRCMDC() and TRPQRCMDC() * positif(INDTEFF())))

    @cache_result
    def ZIPQRCMDC1():
        """
        droit sur les rcm  avant x par le quotient
        From ZIPQRCMDCz
        """
        return ((positif((TEGLRCMFU() + TEGLRCMCH() + TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((TEGLRCMFU() + TEGLRCMCH() + TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQRCMDC() and IQUOTOT1() * TERPQRCMDC() / TETONEQUO1()))) + ((1 - positif((TEGLRCMFU() + TEGLRCMCH() + TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((TEGLRCMFU() + TEGLRCMCH() + TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT())))

    @cache_result
    def TERPQRCMFU():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMFU() and RPQRCMFU() * (1 - positif(INDTEFF()))) + (TRPQRCMFU() and TRPQRCMFU() * positif(INDTEFF())))

    @cache_result
    def ZIPQRCMFU1():
        """
        droit sur les rcm  avant x par le quotient
        From ZIPQRCMFUz
        """
        return ((positif((TEGLRCMCH() + TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((TEGLRCMCH() + TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQRCMFU() and IQUOTOT1() * TERPQRCMFU() / TETONEQUO1()))) + ((1 - positif((TEGLRCMCH() + TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((TEGLRCMCH() + TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCMDC1())))

    @cache_result
    def TERPQRCMCH():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMCH() and RPQRCMCH() * (1 - positif(INDTEFF()))) + (TRPQRCMCH() and TRPQRCMCH() * positif(INDTEFF())))

    @cache_result
    def ZIPQRCMCH1():
        """
        droit sur les rcm  avant x par le quotient
        From ZIPQRCMCHz
        """
        return ((positif((TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQRCMCH() and IQUOTOT1() * TERPQRCMCH() / TETONEQUO1()))) + ((1 - positif((TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((TEGLRCMTS() + TEGLRCMGO() + TEGLRCMTR() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCMDC1() - ZIPQRCMFU1())))

    @cache_result
    def TERPQRCMTS():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMTS() and RPQRCMTS() * (1 - positif(INDTEFF()))) + (TRPQRCMTS() and TRPQRCMTS() * positif(INDTEFF())))

    @cache_result
    def TERPQRCMTR():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMTR() and RPQRCMTR() * (1 - positif(INDTEFF()))) + (TRPQRCMTR() and TRPQRCMTR() * positif(INDTEFF())))

    @cache_result
    def ZIPQRCMTR1():
        """
        droit sur les rcm  avant x par le quotient
        From ZIPQRCMTRz
        """
        return ((positif((TEGLRCMGO() + TEGLRCMTS() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((TEGLRCMGO() + TEGLRCMTS() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQRCMTR() and IQUOTOT1() * TERPQRCMTR() / TETONEQUO1()))) + ((1 - positif((TEGLRCMGO() + TEGLRCMTS() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((TEGLRCMGO() + TEGLRCMTS() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCMDC1() - ZIPQRCMFU1() - ZIPQRCMCH1())))

    @cache_result
    def TERPQRCMGO():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMGO() and RPQRCMGO() * (1 - positif(INDTEFF()))) + (TRPQRCMGO() and TRPQRCMGO() * positif(INDTEFF())))

    @cache_result
    def ZIPQRCMGO1():
        """
        droit sur les rcm  avant x par le quotient
        From ZIPQRCMGOz
        """
        return ((positif((TEGLRCMTS() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((TEGLRCMTS() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQRCMGO() and IQUOTOT1() * TERPQRCMGO() / TETONEQUO1()))) + ((1 - positif((TEGLRCMTS() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((TEGLRCMTS() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCMDC1() - ZIPQRCMFU1() - ZIPQRCMCH1() - ZIPQRCMTR1())))

    @cache_result
    def ZIPQRCMTS1():
        """
        droit sur les rcm  avant x par le quotient
        From ZIPQRCMTSz
        """
        return ((positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQRCMTS() and IQUOTOT1() * TERPQRCMTS() / TETONEQUO1()))) + ((1 - positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLPRRTOT() + TEGLPRRZTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCMDC1() - ZIPQRCMFU1() - ZIPQRCMCH1() - ZIPQRCMTR1() - ZIPQRCMGO1())))

    @cache_result
    def ZIPQRCM1TOT():
        """
        droit sur les rcm  avant x par le quotient
        """
        return (ZIPQRCMDC1() + ZIPQRCMFU1() + ZIPQRCMCH1() + ZIPQRCMTS1() + ZIPQRCMGO1() + ZIPQRCMTR1())

    @cache_result
    def TERPQPRRV():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRV() and RPQPRRV() * (1 - positif(INDTEFF()))) + (TRPQPRRV() and TRPQPRRV() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRV1():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPRRVz
        """
        return ((positif((somme([TEGLPRRC(), TEGLPRR1(), TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((somme([TEGLPRRC(), TEGLPRR1(), TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRRV() and IQUOTOT1() * TERPQPRRV() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPRRC(), TEGLPRR1(), TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPRRC(), TEGLPRR1(), TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT())))

    @cache_result
    def TERPQPRRC():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRC() and RPQPRRC() * (1 - positif(INDTEFF()))) + (TRPQPRRC() and TRPQPRRC() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRC1():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPRRCz
        """
        return ((positif((somme([TEGLPRR1(), TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((somme([TEGLPRR1(), TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRRC() and IQUOTOT1() * TERPQPRRC() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPRR1(), TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPRR1(), TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRRV1())))

    @cache_result
    def TERPQPRR1():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRR1() and RPQPRR1() * (1 - positif(INDTEFF()))) + (TRPQPRR1() and TRPQPRR1() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRR11():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPRR1z
        """
        return ((positif((somme([TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((somme([TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRR1() and IQUOTOT1() * TERPQPRR1() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPRR2(), TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRRV1() - ZIPQPRRC1())))

    @cache_result
    def TERPQPRR2():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRR2() and RPQPRR2() * (1 - positif(INDTEFF()))) + (TRPQPRR2() and TRPQPRR2() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRR21():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPRR2z
        """
        return ((positif((somme([TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((somme([TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRR2() and IQUOTOT1() * TERPQPRR2() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPRR3(), TEGLPRR4()]) + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRRV1() - ZIPQPRRC1() - ZIPQPRR11())))

    @cache_result
    def TERPQPRR3():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRR3() and RPQPRR3() * (1 - positif(INDTEFF()))) + (TRPQPRR3() and TRPQPRR3() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRR31():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPRR3z
        """
        return ((positif((TEGLPRR4() + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((TEGLPRR4() + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRR3() and IQUOTOT1() * TERPQPRR3() / TETONEQUO1()))) + ((1 - positif((TEGLPRR4() + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((TEGLPRR4() + somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRRV1() - ZIPQPRRC1() - ZIPQPRR11() - ZIPQPRR21())))

    @cache_result
    def TERPQPRR4():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRR4() and RPQPRR4() * (1 - positif(INDTEFF()))) + (TRPQPRR4() and TRPQPRR4() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRR41():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPRR4z
        """
        return ((positif((somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRR4() and IQUOTOT1() * TERPQPRR4() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPRRZV(), TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRRV1() - ZIPQPRRC1() - ZIPQPRR11() - ZIPQPRR21() - ZIPQPRR31())))

    @cache_result
    def ZIPQPRR1TOT():
        """
        somme des ZIPQi1
        """
        return somme([ZIPQPRRV1(), ZIPQPRRC1(), ZIPQPRR11(), ZIPQPRR21(), ZIPQPRR31(), ZIPQPRR41()])

    @cache_result
    def TERPQRF1():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRF1() and RPQRF1() * (1 - positif(INDTEFF()))) + (TRPQRF1() and TRPQRF1() * positif(INDTEFF())))

    @cache_result
    def TERPQPRRZV():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZV() and RPQPRRZV() * (1 - positif(INDTEFF()))) + (TRPQPRRZV() and TRPQPRRZV() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZV1():
        """
        droit sur les pensions RAZ  avant x par le quotient
        From ZIPQPRRZVz
        """
        return ((positif((somme([TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((somme([TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRRZV() and IQUOTOT1() * TERPQPRRZV() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPRRZC(), TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT())))

    @cache_result
    def TERPQPRRZC():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZC() and RPQPRRZC() * (1 - positif(INDTEFF()))) + (TRPQPRRZC() and TRPQPRRZC() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZC1():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPRRZCz
        """
        return ((positif((somme([TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((somme([TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRRZC() and IQUOTOT1() * TERPQPRRZC() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPRRZ1(), TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRRZV1())))

    @cache_result
    def TERPQPRRZ1():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZ1() and RPQPRRZ1() * (1 - positif(INDTEFF()))) + (TRPQPRRZ1() and TRPQPRRZ1() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZ11():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPRRZ1z
        """
        return ((positif((somme([TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((somme([TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRRZ1() and IQUOTOT1() * TERPQPRRZ1() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPRRZ2(), TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRRZV1() - ZIPQPRRZC1())))

    @cache_result
    def TERPQPRRZ2():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZ2() and RPQPRRZ2() * (1 - positif(INDTEFF()))) + (TRPQPRRZ2() and TRPQPRRZ2() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZ21():
        """
        droit sur les pensions Alim  avant x par le quotient
        From ZIPQPRRZ2z
        """
        return ((positif((somme([TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((somme([TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRRZ2() and IQUOTOT1() * TERPQPRRZ2() / TETONEQUO1()))) + ((1 - positif((somme([TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((somme([TEGLPRRZ3(), TEGLPRRZ4()]) + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRRZV1() - ZIPQPRRZC1() - ZIPQPRRZ11())))

    @cache_result
    def TERPQPRRZ3():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZ3() and RPQPRRZ3() * (1 - positif(INDTEFF()))) + (TRPQPRRZ3() and TRPQPRRZ3() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZ31():
        """
        droit sur les pensions  avant x par le quotient
        From ZIPQPRRZ3z
        """
        return ((positif((TEGLPRRZ4() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((TEGLPRRZ4() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRRZ3() and IQUOTOT1() * TERPQPRRZ3() / TETONEQUO1()))) + ((1 - positif((TEGLPRRZ4() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((TEGLPRRZ4() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRRZV1() - ZIPQPRRZC1() - ZIPQPRRZ11() - ZIPQPRRZ21())))

    @cache_result
    def TERPQPRRZ4():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZ4() and RPQPRRZ4() * (1 - positif(INDTEFF()))) + (TRPQPRRZ4() and TRPQPRRZ4() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZ41():
        """
        droit sur les pensions  avant x par le quotient
        From ZIPQPRRZ4z
        """
        return ((positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) and positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT())) * arr((IQUOTOT1() and TERPQPRRZ4() and IQUOTOT1() * TERPQPRRZ4() / TETONEQUO1()))) + ((1 - positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) and (1 - positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT() + TEGLRFTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRRZV1() - ZIPQPRRZC1() - ZIPQPRRZ11() - ZIPQPRRZ21() - ZIPQPRRZ31())))

    @cache_result
    def ZIPQPRRZ1TOT():
        """
        somme des ZIPQZi1
        """
        return somme([ZIPQPRRZV1(), ZIPQPRRZC1(), ZIPQPRRZ11(), ZIPQPRRZ21(), ZIPQPRRZ31(), ZIPQPRRZ41()])

    @cache_result
    def ZIPQRF11():
        """
        droit sur les rev fonc  avant x par le quotient
        From ZIPQRF1z
        """
        return ((positif((TEGLRF2() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT())) and positif((TEGLRF2() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT())) * arr((IQUOTOT1() and TERPQRF1() and IQUOTOT1() * TERPQRF1() / TETONEQUO1()))) + ((1 - positif((TEGLRF2() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT()))) and (1 - positif((TEGLRF2() + TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQPRRZ1TOT())))

    @cache_result
    def TERPQRF2():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRF2() and RPQRF2() * (1 - positif(INDTEFF()))) + (TRPQRF2() and TRPQRF2() * positif(INDTEFF())))

    @cache_result
    def ZIPQRF21():
        """
        droit sur les rev fonc  avant x par le quotient
        From ZIPQRF2z
        """
        return ((positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT())) and positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT())) * arr((IQUOTOT1() and TERPQRF2() and IQUOTOT1() * TERPQRF2() / TETONEQUO1()))) + ((1 - positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT()))) and (1 - positif((TEGLTSTOT() + TEGLTSREMPTOT() + TEGLRVOTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQRF11() - ZIPQPRRZ1TOT())))

    @cache_result
    def ZIPQRF1TOT():
        """
        droit sur les rev fonc  avant x par le quotient
        """
        return somme([ZIPQRF11(), ZIPQRF21()])

    @cache_result
    def TERPQRVO():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRVO() and RPQRVO() * (1 - positif(INDTEFF()))) + (TRPQRVO() and TRPQRVO() * positif(INDTEFF())))

    @cache_result
    def ZIPQRVO1():
        """
        droit sur les rvo  avant x par le quotient
        From ZIPQRVOz
        """
        return ((positif((TEGLRVO5() + TEGLRVO6() + TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT())) and positif((TEGLRVO5() + TEGLRVO6() + TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT())) * arr((IQUOTOT1() and TERPQRVO() and IQUOTOT1() * TERPQRVO() / TETONEQUO1()))) + ((1 - positif((TEGLRVO5() + TEGLRVO6() + TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT()))) and (1 - positif((TEGLRVO5() + TEGLRVO6() + TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQRF1TOT() - ZIPQPRRZ1TOT())))

    @cache_result
    def TERPQRVO5():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRVO5() and RPQRVO5() * (1 - positif(INDTEFF()))) + (TRPQRVO5() and TRPQRVO5() * positif(INDTEFF())))

    @cache_result
    def ZIPQRVO51():
        """
        droit sur les rvo  avant x par le quotient
        From ZIPQRVO5z
        """
        return ((positif((TEGLRVO6() + TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT())) and positif((TEGLRVO6() + TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT())) * arr((IQUOTOT1() and TERPQRVO5() and IQUOTOT1() * TERPQRVO5() / TETONEQUO1()))) + ((1 - positif((TEGLRVO6() + TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT()))) and (1 - positif((TEGLRVO6() + TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQRF1TOT() - ZIPQRVO1() - ZIPQPRRZ1TOT())))

    @cache_result
    def TERPQRVO6():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRVO6() and RPQRVO6() * (1 - positif(INDTEFF()))) + (TRPQRVO6() and TRPQRVO6() * positif(INDTEFF())))

    @cache_result
    def ZIPQRVO61():
        """
        droit sur les rvo  avant x par le quotient
        From ZIPQRVO6z
        """
        return ((positif((TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT())) and positif((TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT())) * arr((IQUOTOT1() and TERPQRVO6() and IQUOTOT1() * TERPQRVO6() / TETONEQUO1()))) + ((1 - positif((TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT()))) and (1 - positif((TEGLRVO7() + TEGLTSTOT() + TEGLTSREMPTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQRF1TOT() - ZIPQRVO1() - ZIPQRVO51() - ZIPQPRRZ1TOT())))

    @cache_result
    def TERPQRVO7():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRVO7() and RPQRVO7() * (1 - positif(INDTEFF()))) + (TRPQRVO7() and TRPQRVO7() * positif(INDTEFF())))

    @cache_result
    def ZIPQRVO71():
        """
        droit sur les rvo  avant x par le quotient
        From ZIPQRVO7z
        """
        return ((positif((TEGLTSTOT() + TEGLTSREMPTOT())) and positif((TEGLTSTOT() + TEGLTSREMPTOT())) * arr((IQUOTOT1() and TERPQRVO7() and IQUOTOT1() * TERPQRVO7() / TETONEQUO1()))) + ((1 - positif((TEGLTSTOT() + TEGLTSREMPTOT()))) and (1 - positif((TEGLTSTOT() + TEGLTSREMPTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQRF1TOT() - ZIPQPRRZ1TOT() - ZIPQRVO1() - ZIPQRVO51() - ZIPQRVO61())))

    @cache_result
    def ZIPQRVO1TOT():
        """
        droit sur les rvo  avant x par le quotient
        """
        return (ZIPQRVO1() + ZIPQRVO51() + ZIPQRVO61() + ZIPQRVO71())

    @cache_result
    def ZIPQTSV1():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTSVz
        """
        return ((positif((somme([TEGLTSC(), TEGLTS1(), TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT())) and positif((somme([TEGLTSC(), TEGLTS1(), TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT())) * arr((IQUOTOT1() and TERPQTSV() and IQUOTOT1() * TERPQTSV() / TETONEQUO1()))) + ((1 - positif((somme([TEGLTSC(), TEGLTS1(), TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT()))) and (1 - positif((somme([TEGLTSC(), TEGLTS1(), TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQPRRZ1TOT())))

    @cache_result
    def IPQTSV1():
        """
        ancien plafqf : droits quotient
        From IPQTSiz
        """
        return (ZIPQTSV1() and ZIPQTSV1() * saisie_variables.get('CARTSNBAV', 0))

    @cache_result
    def TERPQTSC():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSC() and RPQTSC() * (1 - positif(INDTEFF()))) + (TRPQTSC() and TRPQTSC() * positif(INDTEFF())))

    @cache_result
    def ZIPQTSC1():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTSCz
        """
        return ((positif((somme([TEGLTS1(), TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT())) and positif((somme([TEGLTS1(), TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT())) * arr((IQUOTOT1() and TERPQTSC() and IQUOTOT1() * TERPQTSC() / TETONEQUO1()))) + ((1 - positif((somme([TEGLTS1(), TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT()))) and (1 - positif((somme([TEGLTS1(), TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQPRRZ1TOT() - ZIPQTSV1())))

    @cache_result
    def IPQTSC1():
        """
        ancien plafqf : droits quotient
        From IPQTSiz
        """
        return (ZIPQTSC1() and ZIPQTSC1() * saisie_variables.get('CARTSNBAC', 0))

    @cache_result
    def TERPQTS1():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTS1() and RPQTS1() * (1 - positif(INDTEFF()))) + (TRPQTS1() and TRPQTS1() * positif(INDTEFF())))

    @cache_result
    def ZIPQTS11():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTS1z
        """
        return ((positif((somme([TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT())) and positif((somme([TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT())) * arr((IQUOTOT1() and TERPQTS1() and IQUOTOT1() * TERPQTS1() / TETONEQUO1()))) + ((1 - positif((somme([TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT()))) and (1 - positif((somme([TEGLTS2(), TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQPRRZ1TOT() - ZIPQTSV1() - ZIPQTSC1())))

    @cache_result
    def IPQTS11():
        """
        ancien plafqf : droits quotient
        From IPQTSiz
        """
        return (ZIPQTS11() and ZIPQTS11() * saisie_variables.get('CARTSNBAP1', 0))

    @cache_result
    def TERPQTS2():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTS2() and RPQTS2() * (1 - positif(INDTEFF()))) + (TRPQTS2() and TRPQTS2() * positif(INDTEFF())))

    @cache_result
    def ZIPQTS21():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTS2z
        """
        return ((positif((somme([TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT())) and positif((somme([TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT())) * arr((IQUOTOT1() and TERPQTS2() and IQUOTOT1() * TERPQTS2() / TETONEQUO1()))) + ((1 - positif((somme([TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT()))) and (1 - positif((somme([TEGLTS3(), TEGLTS4()]) + TEGLTSREMPTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQPRRZ1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQTSV1() - ZIPQTSC1() - ZIPQTS11())))

    @cache_result
    def IPQTS21():
        """
        ancien plafqf : droits quotient
        From IPQTSiz
        """
        return (ZIPQTS21() and ZIPQTS21() * saisie_variables.get('CARTSNBAP2', 0))

    @cache_result
    def TERPQTS3():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTS3() and RPQTS3() * (1 - positif(INDTEFF()))) + (TRPQTS3() and TRPQTS3() * positif(INDTEFF())))

    @cache_result
    def ZIPQTS31():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTS3z
        """
        return ((positif((TEGLTS4() + TEGLTSREMPTOT())) and positif((TEGLTS4() + TEGLTSREMPTOT())) * arr((IQUOTOT1() and TERPQTS3() and IQUOTOT1() * TERPQTS3() / TETONEQUO1()))) + ((1 - positif((TEGLTS4() + TEGLTSREMPTOT()))) and (1 - positif((TEGLTS4() + TEGLTSREMPTOT()))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQPRRZ1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQTSV1() - ZIPQTSC1() - ZIPQTS11() - ZIPQTS21())))

    @cache_result
    def IPQTS31():
        """
        ancien plafqf : droits quotient
        From IPQTSiz
        """
        return (ZIPQTS31() and ZIPQTS31() * saisie_variables.get('CARTSNBAP3', 0))

    @cache_result
    def TERPQTS4():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTS4() and RPQTS4() * (1 - positif(INDTEFF()))) + (TRPQTS4() and TRPQTS4() * positif(INDTEFF())))

    @cache_result
    def ZIPQTS41():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTS4z
        """
        return ((positif(TEGLTSREMPTOT()) and positif(TEGLTSREMPTOT()) * arr((IQUOTOT1() and TERPQTS4() and IQUOTOT1() * TERPQTS4() / TETONEQUO1()))) + ((1 - positif(TEGLTSREMPTOT())) and (1 - positif(TEGLTSREMPTOT())) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQPRRZ1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQTSV1() - ZIPQTSC1() - ZIPQTS11() - ZIPQTS21() - ZIPQTS31())))

    @cache_result
    def IPQTS41():
        """
        ancien plafqf : droits quotient
        From IPQTSiz
        """
        return (ZIPQTS41() and ZIPQTS41() * saisie_variables.get('CARTSNBAP4', 0))

    @cache_result
    def TERPQTSREMPV():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSREMPV() and RPQTSREMPV() * (1 - positif(INDTEFF()))) + (TRPQTSREMPV() and TRPQTSREMPV() * positif(INDTEFF())))

    @cache_result
    def ZIPQTS1TOT():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return somme([ZIPQTSV1(), ZIPQTSC1(), ZIPQTS11(), ZIPQTS21(), ZIPQTS31(), ZIPQTS41()])

    @cache_result
    def ZIPQTSREMPV1():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTSREMPVz
        """
        return ((positif(somme([TEGLTSREMPC(), TEGLTSREMP1(), TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()])) and positif(somme([TEGLTSREMPC(), TEGLTSREMP1(), TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()])) * arr((IQUOTOT1() and TERPQTSREMPV() and IQUOTOT1() * TERPQTSREMPV() / TETONEQUO1()))) + ((1 - positif(somme([TEGLTSREMPC(), TEGLTSREMP1(), TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()]))) and (1 - positif(somme([TEGLTSREMPC(), TEGLTSREMP1(), TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()]))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQPRRZ1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQTS1TOT())))

    @cache_result
    def IPQTSREMPV1():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPiz
        """
        return (ZIPQTSREMPV1() and ZIPQTSREMPV1() * saisie_variables.get('REMPLANBV', 0))

    @cache_result
    def TERPQTSREMPC():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSREMPC() and RPQTSREMPC() * (1 - positif(INDTEFF()))) + (TRPQTSREMPC() and TRPQTSREMPC() * positif(INDTEFF())))

    @cache_result
    def ZIPQTSREMPC1():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTSREMPCz
        """
        return ((positif(somme([TEGLTSREMP1(), TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()])) and positif(somme([TEGLTSREMP1(), TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()])) * arr((IQUOTOT1() and TERPQTSREMPC() and IQUOTOT1() * TERPQTSREMPC() / TETONEQUO1()))) + ((1 - positif(somme([TEGLTSREMP1(), TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()]))) and (1 - positif(somme([TEGLTSREMP1(), TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()]))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQPRRZ1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQTS1TOT() - ZIPQTSREMPV1())))

    @cache_result
    def IPQTSREMPC1():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPiz
        """
        return (ZIPQTSREMPC1() and ZIPQTSREMPC1() * saisie_variables.get('REMPLANBC', 0))

    @cache_result
    def TERPQTSREMP1():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSREMP1() and RPQTSREMP1() * (1 - positif(INDTEFF()))) + (TRPQTSREMP1() and TRPQTSREMP1() * positif(INDTEFF())))

    @cache_result
    def ZIPQTSREMP11():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTSREMP1z
        """
        return ((positif(somme([TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()])) and positif(somme([TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()])) * arr((IQUOTOT1() and TERPQTSREMP1() and IQUOTOT1() * TERPQTSREMP1() / TETONEQUO1()))) + ((1 - positif(somme([TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()]))) and (1 - positif(somme([TEGLTSREMP2(), TEGLTSREMP3(), TEGLTSREMP4()]))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQPRRZ1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQTS1TOT() - ZIPQTSREMPV1() - ZIPQTSREMPC1())))

    @cache_result
    def IPQTSREMP11():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPiz
        """
        return (ZIPQTSREMP11() and ZIPQTSREMP11() * saisie_variables.get('REMPLANBP1', 0))

    @cache_result
    def TERPQTSREMP2():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSREMP2() and RPQTSREMP2() * (1 - positif(INDTEFF()))) + (TRPQTSREMP2() and TRPQTSREMP2() * positif(INDTEFF())))

    @cache_result
    def ZIPQTSREMP21():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTSREMP2z
        """
        return ((positif(somme([TEGLTSREMP3(), TEGLTSREMP4()])) and positif(somme([TEGLTSREMP3(), TEGLTSREMP4()])) * arr((IQUOTOT1() and TERPQTSREMP2() and IQUOTOT1() * TERPQTSREMP2() / TETONEQUO1()))) + ((1 - positif(somme([TEGLTSREMP3(), TEGLTSREMP4()]))) and (1 - positif(somme([TEGLTSREMP3(), TEGLTSREMP4()]))) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQPRRZ1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQTS1TOT() - ZIPQTSREMPV1() - ZIPQTSREMPC1() - ZIPQTSREMP11())))

    @cache_result
    def IPQTSREMP21():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPiz
        """
        return (ZIPQTSREMP21() and ZIPQTSREMP21() * saisie_variables.get('REMPLANBP2', 0))

    @cache_result
    def TERPQTSREMP3():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSREMP3() and RPQTSREMP3() * (1 - positif(INDTEFF()))) + (TRPQTSREMP3() and TRPQTSREMP3() * positif(INDTEFF())))

    @cache_result
    def ZIPQTSREMP31():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTSREMP3z
        """
        return ((positif(TEGLTSREMP4()) and positif(TEGLTSREMP4()) * arr((IQUOTOT1() and TERPQTSREMP3() and IQUOTOT1() * TERPQTSREMP3() / TETONEQUO1()))) + ((1 - positif(TEGLTSREMP4())) and (1 - positif(TEGLTSREMP4())) * (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQPRRZ1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQTS1TOT() - ZIPQTSREMPV1() - ZIPQTSREMPC1() - ZIPQTSREMP11() - ZIPQTSREMP21())))

    @cache_result
    def IPQTSREMP31():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPiz
        """
        return (ZIPQTSREMP31() and ZIPQTSREMP31() * saisie_variables.get('REMPLANBP3', 0))

    @cache_result
    def ZIPQTSREMP41():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        From ZIPQTSREMP4z
        """
        return (IQUOTOT1() - ZIPQ1TOT() - ZIPQF1TOT() - ZIPQPALIM1TOT() - ZIPQRCM1TOT() - ZIPQPRR1TOT() - ZIPQPRRZ1TOT() - ZIPQRF1TOT() - ZIPQRVO1TOT() - ZIPQTS1TOT() - ZIPQTSREMPV1() - ZIPQTSREMPC1() - ZIPQTSREMP11() - ZIPQTSREMP21() - ZIPQTSREMP31())

    @cache_result
    def IPQTSREMP41():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPiz
        """
        return (ZIPQTSREMP41() and ZIPQTSREMP41() * saisie_variables.get('REMPLANBP4', 0))

    @cache_result
    def IPQRF11():
        """
        ancien plafqf : droits quotient
        From IPQRF1z
        """
        return (ZIPQRF11() and ZIPQRF11() * saisie_variables.get('FONCINB', 0))

    @cache_result
    def IPQRF21():
        """
        ancien plafqf : droits quotient
        From IPQRF2z
        """
        return (ZIPQRF21() and ZIPQRF21() * saisie_variables.get('REAMORNB', 0))

    @cache_result
    def IPQPRRV1():
        """
        ancien plafqf : droits quotient
        From IPQPRRiz
        """
        return (ZIPQPRRV1() and ZIPQPRRV1() * saisie_variables.get('CARPENBAV', 0))

    @cache_result
    def IPQPRRZV1():
        """
        ancien plafqf : droits quotient
        From IPQPRRZVz
        """
        return (ZIPQPRRZV1() and ZIPQPRRZV1() * saisie_variables.get('CODNAZ', 0))

    @cache_result
    def IPQPRRC1():
        """
        ancien plafqf : droits quotient
        From IPQPRRiz
        """
        return (ZIPQPRRC1() and ZIPQPRRC1() * saisie_variables.get('CARPENBAC', 0))

    @cache_result
    def IPQPRRZC1():
        """
        ancien plafqf : droits quotient
        From IPQPRRZCz
        """
        return (ZIPQPRRZC1() and ZIPQPRRZC1() * saisie_variables.get('CODNBZ', 0))

    @cache_result
    def IPQPRR11():
        """
        ancien plafqf : droits quotient
        From IPQPRRiz
        """
        return (ZIPQPRR11() and ZIPQPRR11() * saisie_variables.get('CARPENBAP1', 0))

    @cache_result
    def IPQPRRZ11():
        """
        ancien plafqf : droits quotient
        From IPQPRRZ1z
        """
        return (ZIPQPRRZ11() and ZIPQPRRZ11() * saisie_variables.get('CODNCZ', 0))

    @cache_result
    def IPQPRR21():
        """
        ancien plafqf : droits quotient
        From IPQPRRiz
        """
        return (ZIPQPRR21() and ZIPQPRR21() * saisie_variables.get('CARPENBAP2', 0))

    @cache_result
    def IPQPRRZ21():
        """
        ancien plafqf : droits quotient
        From IPQPRRZ2z
        """
        return (ZIPQPRRZ21() and ZIPQPRRZ21() * saisie_variables.get('CODNDZ', 0))

    @cache_result
    def IPQPRR31():
        """
        ancien plafqf : droits quotient
        From IPQPRRiz
        """
        return (ZIPQPRR31() and ZIPQPRR31() * saisie_variables.get('CARPENBAP3', 0))

    @cache_result
    def IPQPRRZ31():
        """
        ancien plafqf : droits quotient
        From IPQPRRZ3z
        """
        return (ZIPQPRRZ31() and ZIPQPRRZ31() * saisie_variables.get('CODNEZ', 0))

    @cache_result
    def IPQPRR41():
        """
        ancien plafqf : droits quotient
        From IPQPRRiz
        """
        return (ZIPQPRR41() and ZIPQPRR41() * saisie_variables.get('CARPENBAP4', 0))

    @cache_result
    def IPQPRRZ41():
        """
        ancien plafqf : droits quotient
        From IPQPRRZ4z
        """
        return (ZIPQPRRZ41() and ZIPQPRRZ41() * saisie_variables.get('CODNFZ', 0))

    @cache_result
    def IPQRCMDC1():
        """
        ancien plafqf : droits quotient
        From IPQRCMDCz
        """
        return (ZIPQRCMDC1() and ZIPQRCMDC1() * saisie_variables.get('REVACTNB', 0))

    @cache_result
    def IPQRCMFU1():
        """
        ancien plafqf : droits quotient
        From IPQRCMFUz
        """
        return (ZIPQRCMFU1() and ZIPQRCMFU1() * saisie_variables.get('REVPEANB', 0))

    @cache_result
    def IPQRCMCH1():
        """
        ancien plafqf : droits quotient
        From IPQRCMCHz
        """
        return (ZIPQRCMCH1() and ZIPQRCMCH1() * saisie_variables.get('PROVIENB', 0))

    @cache_result
    def IPQRCMTS1():
        """
        ancien plafqf : droits quotient
        From IPQRCMTSz
        """
        return (ZIPQRCMTS1() and ZIPQRCMTS1() * saisie_variables.get('DISQUONB', 0))

    @cache_result
    def IPQRCMGO1():
        """
        ancien plafqf : droits quotient
        From IPQRCMGOz
        """
        return (ZIPQRCMGO1() and ZIPQRCMGO1() * saisie_variables.get('RESTUCNB', 0))

    @cache_result
    def IPQRCMTR1():
        """
        ancien plafqf : droits quotient
        From IPQRCMTRz
        """
        return (ZIPQRCMTR1() and ZIPQRCMTR1() * saisie_variables.get('INTERENB', 0))

    @cache_result
    def IPQRVO1():
        """
        ancien plafqf : droits quotient
        From IPQRVOz
        """
        return (ZIPQRVO1() and ZIPQRVO1() * saisie_variables.get('RENTAXNB', 0))

    @cache_result
    def IPQRVO51():
        """
        ancien plafqf : droits quotient
        From IPQRVO5z
        """
        return (ZIPQRVO51() and ZIPQRVO51() * saisie_variables.get('RENTAXNB5', 0))

    @cache_result
    def IPQRVO61():
        """
        ancien plafqf : droits quotient
        From IPQRVO6z
        """
        return (ZIPQRVO61() and ZIPQRVO61() * saisie_variables.get('RENTAXNB6', 0))

    @cache_result
    def IPQRVO71():
        """
        ancien plafqf : droits quotient
        From IPQRVO7z
        """
        return (ZIPQRVO71() and ZIPQRVO71() * saisie_variables.get('RENTAXNB7', 0))

    @cache_result
    def IPQ1001():
        """
        Droit sur les bases de quotient 1 a x
        From IPQ100z
        """
        return (IPQRWB1() + IPQRWA1() + IPQRVG1() + somme([IPQ11(), IPQ21(), IPQ31(), IPQ41()]) + somme([IPQFV1(), IPQFC1(), IPQF11(), IPQF21(), IPQF31(), IPQF41()]) + somme([IPQPALIMV1(), IPQPALIMC1(), IPQPALIM11(), IPQPALIM21(), IPQPALIM31(), IPQPALIM41()]) + somme([IPQTSV1(), IPQTSC1(), IPQTS11(), IPQTS21(), IPQTS31(), IPQTS41()]) + somme([IPQTSREMPV1(), IPQTSREMPC1(), IPQTSREMP11(), IPQTSREMP21(), IPQTSREMP31(), IPQTSREMP41()]) + IPQRF11() + IPQRF21() + somme([(IPQPRRV1() + IPQPRRZV1()), (IPQPRRC1() + IPQPRRZC1()), (IPQPRR11() + IPQPRRZ11()), (IPQPRR21() + IPQPRRZ21()), (IPQPRR31() + IPQPRRZ31()), (IPQPRR41() + IPQPRRZ41())]) + IPQRCMDC1() + IPQRCMFU1() + IPQRCMCH1() + IPQRCMTS1() + IPQRCMGO1() + IPQRCMTR1() + IPQRVO1() + IPQRVO51() + IPQRVO61() + IPQRVO71())

    @cache_result
    def IPQ1():
        """
        Droits simples totaux
        From IPQz
        """
        return ((IPQ01() and IPQ01() * EXO1()) + IPQ1001())

    @cache_result
    def REVQUOQHT():
        """
        revenus au quotient >=2 nets hors tx eff
        """
        return max(0, (TOTALQUOHT() - SDD() - SDC() - SDV() - SDM()))

    @cache_result
    def ID11():
        """
        Droits simples avant abattement DOM
        From ID1z
        """
        return arr((IPQ1() and arr((RI1() + REVQUOQHT())) and IPQ1() * arr((RI1() + REVQUOQHT())) / arr((RB01() + TONEQUO()))))

    @cache_result
    def V_EAD():
        """
        Contribuable residant dans un DOM
        """
        return ((saisie_variables.get('V_REGCO', 0) + 0)) in (5,)

    @cache_result
    def V_EAG():
        """
        Contribuable residant en Guyane
        """
        return ((saisie_variables.get('V_REGCO', 0) + 0)) in (6, 7)

    @cache_result
    def ABADON1():
        """
        Abattement DOM
        From ABADONz
        """
        return (arr(min((ID11() and (TX_RABDOM and TX_RABDOM / 100) and ID11() * (TX_RABDOM and TX_RABDOM / 100) * ((saisie_variables.get('PRODOM', 0) and max(0, (1 - V_EAD() - V_EAG())) and saisie_variables.get('PRODOM', 0) * max(0, (1 - V_EAD() - V_EAG())) / RG()) + V_EAD())), PLAF_RABDOM)) + arr(min((ID11() and (TX_RABGUY and TX_RABGUY / 100) and ID11() * (TX_RABGUY and TX_RABGUY / 100) * ((saisie_variables.get('PROGUY', 0) and max(0, (1 - V_EAD() - V_EAG())) and saisie_variables.get('PROGUY', 0) * max(0, (1 - V_EAD() - V_EAG())) / RG()) + V_EAG())), PLAF_RABGUY)))

    @cache_result
    def IPRODOM1():
        """
        Impot proportionnel dom
        From IPRODOMz
        """
        return arr((IPQ01() and EXO1() and saisie_variables.get('PRODOM', 0) and IPQ01() * EXO1() * saisie_variables.get('PRODOM', 0) / RG()))

    @cache_result
    def GLN4DAJV():
        """
        Salaires DOM quotient 4
        """
        return (max((saisie_variables.get('CODDAJ', 0) - ABDOMDAJ()), 0) and max((saisie_variables.get('CODDAJ', 0) - ABDOMDAJ()), 0) * INDEFTSV())

    @cache_result
    def REV4V():
        """
        revenus au quotient 4 vous 
        """
        return GLN4DAJV()

    @cache_result
    def GL4V():
        """
        Revenus au quotient 4 hors revenus footballeurs nets imposables
        """
        return arr((TONEQUOHT() and REV4V() and TONEQUOHT() * REV4V() / TOTALQUOHT()))

    @cache_result
    def RPQ4V():
        """
        Revenu imposable suivant le quotient soumis au bar}me
        """
        return (arr((GL4V() and GL4V() / DIVGL4)) + 0)

    @cache_result
    def TGL4V():
        """
        Revenus au quotient 1 hors revenus footballeurs nets imposables
        """
        return arr((TONEQUO() and REV4V() and TONEQUO() * REV4V() / TOTALQUO()))

    @cache_result
    def TRPQ4V():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        """
        return (arr((TGL4V() and TGL4V() / DIVGL4)) + 0)

    @cache_result
    def TERPQ4V():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot.  vous
        """
        return ((RPQ4V() and RPQ4V() * (1 - positif(INDTEFF()))) + (TRPQ4V() and TRPQ4V() * positif(INDTEFF())))

    @cache_result
    def GLN4DBJC():
        """
        Salaires DOM quotient 4
        """
        return (max((saisie_variables.get('CODDBJ', 0) - ABDOMDBJ()), 0) and max((saisie_variables.get('CODDBJ', 0) - ABDOMDBJ()), 0) * INDEFTSC())

    @cache_result
    def REV4C():
        """
        revenus au quotient 4 conj
        """
        return GLN4DBJC()

    @cache_result
    def GL4C():
        """
        Revenus au quotient 4 hors revenus footballeurs nets imposables
        """
        return arr((TONEQUOHT() and REV4C() and TONEQUOHT() * REV4C() / TOTALQUOHT()))

    @cache_result
    def RPQ4C():
        """
        Revenu imposable suivant le quotient soumis au bar}me
        """
        return (arr((GL4C() and GL4C() / DIVGL4)) + 0)

    @cache_result
    def TGL4C():
        """
        Revenus au quotient 1 hors revenus footballeurs nets imposables
        """
        return arr((TONEQUO() and REV4C() and TONEQUO() * REV4C() / TOTALQUO()))

    @cache_result
    def TRPQ4C():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        """
        return (arr((TGL4C() and TGL4C() / DIVGL4)) + 0)

    @cache_result
    def TERPQ4C():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot.  conj
        """
        return ((RPQ4C() and RPQ4C() * (1 - positif(INDTEFF()))) + (TRPQ4C() and TRPQ4C() * positif(INDTEFF())))

    @cache_result
    def REV4TVC():
        """
        revenus au quotient 4 vous conj
        """
        return (GLN4V() + GLN4C())

    @cache_result
    def GL4TVC():
        """
        Revenus au quotient 4 hors revenus footballeurs nets imposables
        """
        return arr((TONEQUOHT() and REV4TVC() and TONEQUOHT() * REV4TVC() / TOTALQUOHT()))

    @cache_result
    def RPQ4TVC():
        """
        Revenu imposable suivant le quotient soumis au bar}me
        """
        return (arr((GL4TVC() and GL4TVC() / DIVGL4)) + 0)

    @cache_result
    def TGL4TVC():
        """
        Revenus au quotient 1 hors revenus footballeurs nets imposables
        """
        return arr((TONEQUO() and REV4TVC() and TONEQUO() * REV4TVC() / TOTALQUO()))

    @cache_result
    def TRPQ4TVC():
        """
        Revenu imposable suivant le quotient soumis au bar}me
        """
        return (arr((TGL4TVC() and TGL4TVC() / DIVGL4)) + 0)

    @cache_result
    def TERPQ4TVC():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot.  vous conj
        """
        return ((RPQ4TVC() and RPQ4TVC() * (1 - positif(INDTEFF()))) + (TRPQ4TVC() and TRPQ4TVC() * positif(INDTEFF())))

    @cache_result
    def IQUODAJ1():
        """
        Impot quotient DAJ 30% dom
        From IQUODAJz
        """
        return arr((IPQ1001() and (TERPQ4V() + TERPQ4C()) and IPQ1001() * (TERPQ4V() + TERPQ4C()) / (TERPQ4TVC() + TERPQTSV() + TERPQTSC())))

    @cache_result
    def ABADO1():
        """
        Abattement en impot sur les revenus DOM
        From ABADOz
        """
        return arr(min(((IPRODOM1() + IQUODAJ1()) and TX_RABDOM and (IPRODOM1() + IQUODAJ1()) * TX_RABDOM / 100), PLAF_RABDOM))

    @cache_result
    def IPROGUY1():
        """
        Impot proportionnel guy
        From IPROGUYz
        """
        return arr((IPQ01() and EXO1() and saisie_variables.get('PROGUY', 0) and IPQ01() * EXO1() * saisie_variables.get('PROGUY', 0) / RG()))

    @cache_result
    def REV4RAJV():
        """
        revenus au quotient 4 vous raj
        """
        return max((saisie_variables.get('CARTSV', 0) - ABTSRAJ()), 0)

    @cache_result
    def GL4RAJV():
        """
        Revenus au quotient 4 hors nets imposables RAJ
        """
        return arr((TONEQUOHT() and REV4RAJV() and TONEQUOHT() * REV4RAJV() / TOTALQUOHT()))

    @cache_result
    def RPQ4RAJV():
        """
        Revenu imposable suivant le quotient soumis au bar}me RAJ
        """
        return (arr((GL4RAJV() and GL4RAJV() / DIVGL4)) + 0)

    @cache_result
    def TGL4RAJV():
        """
        Revenus au quotient 1 RAJ nets imposables
        """
        return arr((TONEQUO() and REV4RAJV() and TONEQUO() * REV4RAJV() / TOTALQUO()))

    @cache_result
    def TRPQ4RAJV():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1 RAJ
        """
        return (arr((TGL4RAJV() and TGL4RAJV() / DIVGL4)) + 0)

    @cache_result
    def TERPQ4RAJV():
        """
        Revenu imposable suivant le quotient soumis au bareme quot.  RAJ vous 
        """
        return ((RPQ4RAJV() and RPQ4RAJV() * (1 - positif(INDTEFF()))) + (TRPQ4RAJV() and TRPQ4RAJV() * positif(INDTEFF())))

    @cache_result
    def REV4RBJC():
        """
        revenus au quotient 4 vous rbj
        """
        return max((saisie_variables.get('CARTSC', 0) - ABTSRBJ()), 0)

    @cache_result
    def GL4RBJC():
        """
        Revenus au quotient 4 hors nets imposables RBJ
        """
        return arr((TONEQUOHT() and REV4RBJC() and TONEQUOHT() * REV4RBJC() / TOTALQUOHT()))

    @cache_result
    def RPQ4RBJC():
        """
        Revenu imposable suivant le quotient soumis au bar}me RBJ
        """
        return (arr((GL4RBJC() and GL4RBJC() / DIVGL4)) + 0)

    @cache_result
    def TGL4RBJC():
        """
        Revenus au quotient 1 RBJ nets imposables
        """
        return arr((TONEQUO() and REV4RBJC() and TONEQUO() * REV4RBJC() / TOTALQUO()))

    @cache_result
    def TRPQ4RBJC():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1 RBJ
        """
        return (arr((TGL4RBJC() and TGL4RBJC() / DIVGL4)) + 0)

    @cache_result
    def TERPQ4RBJC():
        """
        Revenu imposable suivant le quotient soumis au bareme quot.  RBJ cjt
        """
        return ((RPQ4RBJC() and RPQ4RBJC() * (1 - positif(INDTEFF()))) + (TRPQ4RBJC() and TRPQ4RBJC() * positif(INDTEFF())))

    @cache_result
    def IQUORAJ1():
        """
        Impot quotient RAJ RBJ metro
        From IQUORAJz
        """
        return arr((IPQ1001() and (TERPQ4RAJV() + TERPQ4RBJC()) and IPQ1001() * (TERPQ4RAJV() + TERPQ4RBJC()) / (TERPQ4TVC() + TERPQTSV() + TERPQTSC())))

    @cache_result
    def IQUOEAJ1():
        """
        Impot quotient EAJ 40% dom
        From IQUOEAJz
        """
        return max(0, (IPQ1001() - IQUODAJ1() - IQUORAJ1()))

    @cache_result
    def ABAGU1():
        """
        Abattement en impot sur les revenus GUY
        From ABAGUz
        """
        return arr(min(((IPROGUY1() + IQUOEAJ1()) and TX_RABGUY and (IPROGUY1() + IQUOEAJ1()) * TX_RABGUY / 100), PLAF_RABGUY))

    @cache_result
    def ABATOT1():
        """
        Abattement DOM
        From ABATOTz
        """
        return (ABADO1() + ABAGU1())

    @cache_result
    def ADO1():
        """
        Abattement DOM
        From ADOz
        """
        return ((ABADON1() and ABADON1() * (1 - positif((present(saisie_variables.get('CODDAJ', 0)) + present(saisie_variables.get('CODEAJ', 0)) + present(saisie_variables.get('CODDBJ', 0)) + present(saisie_variables.get('CODEBJ', 0)))))) + (ABATOT1() and ABATOT1() * positif((present(saisie_variables.get('CODDAJ', 0)) + present(saisie_variables.get('CODEAJ', 0)) + present(saisie_variables.get('CODDBJ', 0)) + present(saisie_variables.get('CODEBJ', 0))))))

    @cache_result
    def INDCODDAJ():
        """
        Indicateur d'existence de revenu declare salaire DOM pour prorata
        """
        return positif((present(saisie_variables.get('CODDAJ', 0)) + present(saisie_variables.get('CODDBJ', 0)) + present(saisie_variables.get('CODEAJ', 0)) + present(saisie_variables.get('CODEBJ', 0))))

    @cache_result
    def REVMETRO():
        """
        Revenu metro
        """
        return max(0, (RG() - saisie_variables.get('PRODOM', 0) - saisie_variables.get('PROGUY', 0)))

    @cache_result
    def IMETRO1():
        """
        Impot sur Revenu metro
        From IMETROz
        """
        return arr((IPQ01() and EXO1() and REVMETRO() and IPQ01() * EXO1() * REVMETRO() / RG()))

    @cache_result
    def INETABADAJ1():
        """
        Impot proportionnel dom
        From INETABADAJz
        """
        return max(0, (IPRODOM1() + IQUODAJ1() - ABADO1()))

    @cache_result
    def INETABAEAJ1():
        """
        Impot proportionnel dom
        From INETABAEAJz
        """
        return max(0, (IPROGUY1() + IQUOEAJ1() - ABAGU1()))

    @cache_result
    def ITOTDOM1():
        """
        Impot proportionnel dom
        From ITOTDOMz
        """
        return (IMETRO1() + IQUORAJ1() + INETABADAJ1() + INETABAEAJ1())

    @cache_result
    def REVQUO():
        """
        revenus au quotient >=2 nets
        """
        return max(0, (TOTALQUO() - SDD() - SDC() - SDV() - SDM()))

    @cache_result
    def BMI():
        """
        Base taux minimum metropole
        """
        return arr((RI1() + REVQUO() - saisie_variables.get('PRODOM', 0) - saisie_variables.get('PROGUY', 0)))

    @cache_result
    def IMI():
        """
        Impot au taux minimum
        """
        return (arr(((BMI() and TX_MIN_MET and BMI() * TX_MIN_MET / 100) + (arr((saisie_variables.get('PRODOM', 0) + saisie_variables.get('PROGUY', 0))) and TX_MIN_DOM and arr((saisie_variables.get('PRODOM', 0) + saisie_variables.get('PROGUY', 0))) * TX_MIN_DOM / 100))) and arr(((BMI() and TX_MIN_MET and BMI() * TX_MIN_MET / 100) + (arr((saisie_variables.get('PRODOM', 0) + saisie_variables.get('PROGUY', 0))) and TX_MIN_DOM and arr((saisie_variables.get('PRODOM', 0) + saisie_variables.get('PROGUY', 0))) * TX_MIN_DOM / 100))) * V_CR2())

    @cache_result
    def VARRMOND():
        """
        8ZW recalcule suite art 1731 bis
        """
        return ((saisie_variables.get('RMOND', 0) + max(0, ((saisie_variables.get('DEFZU', 0) and positif(base_variables['SOMMEMOND_2']) and saisie_variables.get('DEFZU', 0) * positif(base_variables['SOMMEMOND_2']) * (1 - base_variables['PREM8_11'])) + (saisie_variables.get('DEFZU', 0) and saisie_variables.get('DEFZU', 0) * base_variables['PREM8_11']) - saisie_variables.get('DMOND', 0)))) and (saisie_variables.get('RMOND', 0) + max(0, ((saisie_variables.get('DEFZU', 0) and positif(base_variables['SOMMEMOND_2']) and saisie_variables.get('DEFZU', 0) * positif(base_variables['SOMMEMOND_2']) * (1 - base_variables['PREM8_11'])) + (saisie_variables.get('DEFZU', 0) and saisie_variables.get('DEFZU', 0) * base_variables['PREM8_11']) - saisie_variables.get('DMOND', 0)))) * positif((present(saisie_variables.get('RMOND', 0)) + present(saisie_variables.get('DMOND', 0)))))

    @cache_result
    def RB05():
        """
        Revenu imposable pour le calcul du taux moyen
        """
        return ((VARRMOND() and VARRMOND() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('RMOND', 0) and saisie_variables.get('RMOND', 0) * (1 - base_variables['ART1731BIS'])))

    @cache_result
    def QF015():
        """
        Quotient familial
        From QFxy5
        """
        return (arr(RB05()) and arr(RB05()) / NB1())

    @cache_result
    def DS015():
        """
        Droits simples issus du bareme
        From DSxy5
        """
        return ((max((QF015() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF015() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX1() and TAUX1() / 100)) + (max((QF015() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF015() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX2() and TAUX2() / 100)) + (max((QF015() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF015() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX3() and TAUX3() / 100)) + (max((QF015() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF015() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX4() and TAUX4() / 100)) + (max((QF015() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF015() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX5() and TAUX5() / 100)))

    @cache_result
    def IS015():
        """
        Droits simples avant plafonnement du quotient familial
        From ISxy5
        """
        return arr((DS015() and DS015() * NB1()))

    @cache_result
    def QF025():
        """
        Quotient familial tx moyen 2 parts tx moyen
        From QFxy5
        """
        return (arr(RB05()) and arr(RB05()) / NB2())

    @cache_result
    def DS025():
        """
        Droits simples issus du bareme tx moyen
        From DSxy5
        """
        return ((max((QF025() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF025() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX1() and TAUX1() / 100)) + (max((QF025() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF025() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX2() and TAUX2() / 100)) + (max((QF025() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF025() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX3() and TAUX3() / 100)) + (max((QF025() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF025() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX4() and TAUX4() / 100)) + (max((QF025() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF025() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX5() and TAUX5() / 100)))

    @cache_result
    def IS025():
        """
        Droits simples avant plafonnement du quotient familial Tx moyen
        From ISxy5
        """
        return arr((DS025() and DS025() * NB2()))

    @cache_result
    def IN05():
        """
        Droits simples apres plafonnement QF
        From INx5
        """
        return max(IS015(), (IS025() - PLA()))

    @cache_result
    def IPQ05():
        """
        Droit sur les revenus hors quotient
        """
        return IN05()

    @cache_result
    def TEGL1M():
        """
        Revenus au quotient  hors revenus footballeurs nets imposables
        """
        return ((GL1M() and GL1M() * (1 - positif(INDTEFF()))) + (TGL1M() and TGL1M() * positif(INDTEFF())))

    @cache_result
    def TEGL2M():
        """
        Revenus au quotient  hors revenus footballeurs nets imposables
        """
        return ((GL2M() and GL2M() * (1 - positif(INDTEFF()))) + (TGL2M() and TGL2M() * positif(INDTEFF())))

    @cache_result
    def TEGL3M():
        """
        Revenus au quotient  hors revenus footballeurs nets imposables
        """
        return ((GL3M() and GL3M() * (1 - positif(INDTEFF()))) + (TGL3M() and TGL3M() * positif(INDTEFF())))

    @cache_result
    def TEGL4M():
        """
        Revenus au quotient  hors revenus footballeurs nets imposables
        """
        return ((GL4M() and GL4M() * (1 - positif(INDTEFF()))) + (TGL4M() and TGL4M() * positif(INDTEFF())))

    @cache_result
    def TEGLFVM():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLFVM() and GLFVM() * (1 - positif(INDTEFF()))) + (TGLFVM() and TGLFVM() * positif(INDTEFF())))

    @cache_result
    def TEGLFCM():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLFCM() and GLFCM() * (1 - positif(INDTEFF()))) + (TGLFCM() and TGLFCM() * positif(INDTEFF())))

    @cache_result
    def TEGLF1M():
        """
        pensions footballeurs imposables - tx eff
        """
        return ((GLF1M() and GLF1M() * (1 - positif(INDTEFF()))) + (TGLF1M() and TGLF1M() * positif(INDTEFF())))

    @cache_result
    def TEGLFTOTM():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLFVM() + TEGLFCM() + TEGLF1M() + TEGLF2M() + TEGLF3M() + TEGLF4M())

    @cache_result
    def GLFTOTM():
        """
        gain levee  quotient total foyer 
        """
        return somme([GLFVM(), GLFCM(), GLF1M(), GLF2M(), GLF3M(), GLF4M()])

    @cache_result
    def GLPALIMVM():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((PENALIMC() + PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENALIMC() + PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENALIMV() and TONEQUOMHT() * PENALIMV() / TOTALQUOHT()))) + ((1 - positif((PENALIMC() + PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENALIMC() + PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM())))

    @cache_result
    def TGLFTOTM():
        """
        Revenus  foot nets imposablesTXMOY
        """
        return somme([TGLFVM(), TGLFCM(), TGLF1M(), TGLF2M(), TGLF3M(), TGLF4M()])

    @cache_result
    def TGLPALIMVM():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((TPENALIMC() + TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TPENALIMC() + TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPENALIMV() and TONEQUOM() * TPENALIMV() / TOTALQUO()))) + ((1 - positif((TPENALIMC() + TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPENALIMC() + TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM())))

    @cache_result
    def TEGLPALIMVM():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIMVM() and GLPALIMVM() * (1 - positif(INDTEFF()))) + (TGLPALIMVM() and TGLPALIMVM() * positif(INDTEFF())))

    @cache_result
    def GLPALIMCM():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENALIMC() and TONEQUOMHT() * PENALIMC() / TOTALQUOHT()))) + ((1 - positif((PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENALIM1() + PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMVM())))

    @cache_result
    def TGLPALIMCM():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPENALIMC() and TONEQUOM() * TPENALIMC() / TOTALQUO()))) + ((1 - positif((TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPENALIM1() + TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMVM())))

    @cache_result
    def TEGLPALIMCM():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIMCM() and GLPALIMCM() * (1 - positif(INDTEFF()))) + (TGLPALIMCM() and TGLPALIMCM() * positif(INDTEFF())))

    @cache_result
    def GLPALIM1M():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENALIM1() and TONEQUOMHT() * PENALIM1() / TOTALQUOHT()))) + ((1 - positif((PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENALIM2() + PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMVM() - GLPALIMCM())))

    @cache_result
    def TGLPALIM1M():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPENALIM1() and TONEQUOM() * TPENALIM1() / TOTALQUO()))) + ((1 - positif((TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPENALIM2() + TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMVM() - TGLPALIMCM())))

    @cache_result
    def TEGLPALIM1M():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIM1M() and GLPALIM1M() * (1 - positif(INDTEFF()))) + (TGLPALIM1M() and TGLPALIM1M() * positif(INDTEFF())))

    @cache_result
    def GLPALIM2M():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENALIM2() and TONEQUOMHT() * PENALIM2() / TOTALQUOHT()))) + ((1 - positif((PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENALIM3() + PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMVM() - GLPALIMCM() - GLPALIM1M())))

    @cache_result
    def TGLPALIM2M():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPENALIM2() and TONEQUOM() * TPENALIM2() / TOTALQUO()))) + ((1 - positif((TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPENALIM3() + TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMVM() - TGLPALIMCM() - TGLPALIM1M())))

    @cache_result
    def TEGLPALIM2M():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIM2M() and GLPALIM2M() * (1 - positif(INDTEFF()))) + (TGLPALIM2M() and TGLPALIM2M() * positif(INDTEFF())))

    @cache_result
    def GLPALIM3M():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENALIM3() and TONEQUOMHT() * PENALIM3() / TOTALQUOHT()))) + ((1 - positif((PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMVM() - GLPALIMCM() - GLPALIM1M() - GLPALIM2M())))

    @cache_result
    def TGLPALIM3M():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and PENALIM3() and TONEQUOM() * PENALIM3() / TOTALQUO()))) + ((1 - positif((TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPENALIM4() + REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMVM() - TGLPALIMCM() - TGLPALIM1M() - TGLPALIM2M())))

    @cache_result
    def TEGLPALIM3M():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIM3M() and GLPALIM3M() * (1 - positif(INDTEFF()))) + (TGLPALIM3M() and TGLPALIM3M() * positif(INDTEFF())))

    @cache_result
    def GLPALIM4M():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PENALIM4() and TONEQUOMHT() * PENALIM4() / TOTALQUOHT()))) + ((1 - positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMVM() - GLPALIMCM() - GLPALIM1M() - GLPALIM2M() - GLPALIM3M())))

    @cache_result
    def TGLPALIM4M():
        """
        Revenus au quotient pension alimentaire
        """
        return ((positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPENALIM4() and TONEQUOM() * TPENALIM4() / TOTALQUO()))) + ((1 - positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVTS() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMVM() - TGLPALIMCM() - TGLPALIM1M() - TGLPALIM2M() - TGLPALIM3M())))

    @cache_result
    def TEGLPALIM4M():
        """
        Revenus au quotient pension alimentaire tx eff
        """
        return ((GLPALIM4M() and GLPALIM4M() * (1 - positif(INDTEFF()))) + (TGLPALIM4M() and TGLPALIM4M() * positif(INDTEFF())))

    @cache_result
    def TEGLPALIMTOTM():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLPALIMVM() + TEGLPALIMCM() + TEGLPALIM1M() + TEGLPALIM2M() + TEGLPALIM3M() + TEGLPALIM4M())

    @cache_result
    def GLPALIMTOTM():
        """
        gain levee  quotient total foyer pension alimentaire
        """
        return somme([GLPALIMVM(), GLPALIMCM(), GLPALIM1M(), GLPALIM2M(), GLPALIM3M(), GLPALIM4M()])

    @cache_result
    def GLTSVM():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TSNN2TSC() + TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2TSC() + TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2TSV() and TONEQUOMHT() * TSNN2TSV() / TOTALQUOHT()))) + ((1 - positif((TSNN2TSC() + TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2TSC() + TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM())))

    @cache_result
    def TGLPALIMTOTM():
        """
        Revenus au quotient pension alimentaire
        """
        return somme([TGLPALIMVM(), TGLPALIMCM(), TGLPALIM1M(), TGLPALIM2M(), TGLPALIM3M(), TGLPALIM4M()])

    @cache_result
    def TGLTSVM():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TTSNN2TSC() + TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2TSC() + TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2TSV() and TONEQUOM() * TTSNN2TSV() / TOTALQUO()))) + ((1 - positif((TTSNN2TSC() + TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2TSC() + TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM())))

    @cache_result
    def TEGLTSVM():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTSVM() and GLTSVM() * (1 - positif(INDTEFF()))) + (TGLTSVM() and TGLTSVM() * positif(INDTEFF())))

    @cache_result
    def GLTSCM():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2TSC() and TONEQUOMHT() * TSNN2TSC() / TOTALQUOHT()))) + ((1 - positif((TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2TS1() + TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSVM())))

    @cache_result
    def TGLTSCM():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2TSC() and TONEQUOM() * TTSNN2TSC() / TOTALQUO()))) + ((1 - positif((TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2TS1() + TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSVM())))

    @cache_result
    def TEGLTSCM():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTSCM() and GLTSCM() * (1 - positif(INDTEFF()))) + (TGLTSCM() and TGLTSCM() * positif(INDTEFF())))

    @cache_result
    def GLTS1M():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2TS1() and TONEQUOMHT() * TSNN2TS1() / TOTALQUOHT()))) + ((1 - positif((TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2TS2() + TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSVM() - GLTSCM())))

    @cache_result
    def TGLTS1M():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2TS1() and TONEQUOM() * TTSNN2TS1() / TOTALQUO()))) + ((1 - positif((TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2TS2() + TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSVM() - TGLTSCM())))

    @cache_result
    def TEGLTS1M():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTS1M() and GLTS1M() * (1 - positif(INDTEFF()))) + (TGLTS1M() and TGLTS1M() * positif(INDTEFF())))

    @cache_result
    def GLTS2M():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2TS2() and TONEQUOMHT() * TSNN2TS2() / TOTALQUOHT()))) + ((1 - positif((TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2TS3() + TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSVM() - GLTSCM() - GLTS1M())))

    @cache_result
    def TGLTS2M():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2TS2() and TONEQUOM() * TTSNN2TS2() / TOTALQUO()))) + ((1 - positif((TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2TS3() + TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSVM() - TGLTSCM() - TGLTS1M())))

    @cache_result
    def TEGLTS2M():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTS2M() and GLTS2M() * (1 - positif(INDTEFF()))) + (TGLTS2M() and TGLTS2M() * positif(INDTEFF())))

    @cache_result
    def GLTS3M():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2TS3() and TONEQUOMHT() * TSNN2TS3() / TOTALQUOHT()))) + ((1 - positif((TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSVM() - GLTSCM() - GLTS1M() - GLTS2M())))

    @cache_result
    def TGLTS3M():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2TS3() and TONEQUOM() * TTSNN2TS3() / TOTALQUO()))) + ((1 - positif((TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2TS4() + REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSVM() - TGLTSCM() - TGLTS1M() - TGLTS2M())))

    @cache_result
    def TEGLTS3M():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTS3M() and GLTS3M() * (1 - positif(INDTEFF()))) + (TGLTS3M() and TGLTS3M() * positif(INDTEFF())))

    @cache_result
    def GLTS4M():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2TS4() and TONEQUOMHT() * TSNN2TS4() / TOTALQUOHT()))) + ((1 - positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSVM() - GLTSCM() - GLTS1M() - GLTS2M() - GLTS3M())))

    @cache_result
    def TGLTS4M():
        """
        Traitements AFN imposables Conjoint
        """
        return ((positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2TS4() and TONEQUOM() * TTSNN2TS4() / TOTALQUO()))) + ((1 - positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVTSREMP() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSVM() - TGLTSCM() - TGLTS1M() - TGLTS2M() - TGLTS3M())))

    @cache_result
    def TEGLTS4M():
        """
        Traitements AFN imposables tx effectif
        """
        return ((GLTS4M() and GLTS4M() * (1 - positif(INDTEFF()))) + (TGLTS4M() and TGLTS4M() * positif(INDTEFF())))

    @cache_result
    def TEGLTSTOTM():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLTSVM() + TEGLTSCM() + TEGLTS1M() + TEGLTS2M() + TEGLTS3M() + TEGLTS4M())

    @cache_result
    def GLTSTOTM():
        """
        gain levee  quotient total foyer 
        """
        return somme([GLTSVM(), GLTSCM(), GLTS1M(), GLTS2M(), GLTS3M(), GLTS4M()])

    @cache_result
    def GLTSREMPVM():
        """
        Traitements  imposables quotient
        """
        return ((positif((TSNN2REMPC() + TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2REMPC() + TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2REMPV() and TONEQUOMHT() * TSNN2REMPV() / TOTALQUOHT()))) + ((1 - positif((TSNN2REMPC() + TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2REMPC() + TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM())))

    @cache_result
    def TGLTSTOTM():
        """
        gain levee  quotient total foyer 
        """
        return somme([TGLTSVM(), TGLTSCM(), TGLTS1M(), TGLTS2M(), TGLTS3M(), TGLTS4M()])

    @cache_result
    def TGLTSREMPVM():
        """
        Traitements  imposables quotient
        """
        return ((positif((TTSNN2REMPC() + TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2REMPC() + TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2REMPV() and TONEQUOM() * TTSNN2REMPV() / TOTALQUO()))) + ((1 - positif((TTSNN2REMPC() + TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2REMPC() + TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM())))

    @cache_result
    def TEGLTSREMPVM():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMPVM() and GLTSREMPVM() * (1 - positif(INDTEFF()))) + (TGLTSREMPVM() and TGLTSREMPVM() * positif(INDTEFF())))

    @cache_result
    def GLTSREMPCM():
        """
        Traitements  imposables quotient
        """
        return ((positif((TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2REMPC() and TONEQUOMHT() * TSNN2REMPC() / TOTALQUOHT()))) + ((1 - positif((TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2REMP1() + TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPVM())))

    @cache_result
    def TGLTSREMPCM():
        """
        Traitements  imposables quotient
        """
        return ((positif((TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2REMPC() and TONEQUOM() * TTSNN2REMPC() / TOTALQUO()))) + ((1 - positif((TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2REMP1() + TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPVM())))

    @cache_result
    def TEGLTSREMPCM():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMPCM() and GLTSREMPCM() * (1 - positif(INDTEFF()))) + (TGLTSREMPCM() and TGLTSREMPCM() * positif(INDTEFF())))

    @cache_result
    def GLTSREMP1M():
        """
        Traitements  imposables quotient
        """
        return ((positif((TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2REMP1() and TONEQUOMHT() * TSNN2REMP1() / TOTALQUOHT()))) + ((1 - positif((TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2REMP2() + TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPVM() - GLTSREMPCM())))

    @cache_result
    def TGLTSREMP1M():
        """
        Traitements  imposables quotient
        """
        return ((positif((TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2REMP1() and TONEQUOM() * TTSNN2REMP1() / TOTALQUO()))) + ((1 - positif((TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2REMP2() + TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPVM() - TGLTSREMPCM())))

    @cache_result
    def TEGLTSREMP1M():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMP1M() and GLTSREMP1M() * (1 - positif(INDTEFF()))) + (TGLTSREMP1M() and TGLTSREMP1M() * positif(INDTEFF())))

    @cache_result
    def GLTSREMP2M():
        """
        Traitements  imposables quotient
        """
        return ((positif((TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2REMP2() and TONEQUOMHT() * TSNN2REMP2() / TOTALQUOHT()))) + ((1 - positif((TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2REMP3() + TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPVM() - GLTSREMPCM() - GLTSREMP1M())))

    @cache_result
    def TGLTSREMP2M():
        """
        Traitements  imposables quotient
        """
        return ((positif((TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2REMP2() and TONEQUOM() * TTSNN2REMP2() / TOTALQUO()))) + ((1 - positif((TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2REMP3() + TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPVM() - TGLTSREMPCM() - TGLTSREMP1M())))

    @cache_result
    def TEGLTSREMP2M():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMP2M() and GLTSREMP2M() * (1 - positif(INDTEFF()))) + (TGLTSREMP2M() and TGLTSREMP2M() * positif(INDTEFF())))

    @cache_result
    def GLTSREMP3M():
        """
        Traitements  imposables quotient
        """
        return ((positif((TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2REMP3() and TONEQUOMHT() * TSNN2REMP3() / TOTALQUOHT()))) + ((1 - positif((TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPVM() - GLTSREMPCM() - GLTSREMP1M() - GLTSREMP2M())))

    @cache_result
    def TGLTSREMP3M():
        """
        Traitements  imposables quotient
        """
        return ((positif((TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2REMP3() and TONEQUOM() * TTSNN2REMP3() / TOTALQUO()))) + ((1 - positif((TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TTSNN2REMP4() + REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPVM() - TGLTSREMPCM() - TGLTSREMP1M() - TGLTSREMP2M())))

    @cache_result
    def TEGLTSREMP3M():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMP3M() and GLTSREMP3M() * (1 - positif(INDTEFF()))) + (TGLTSREMP3M() and TGLTSREMP3M() * positif(INDTEFF())))

    @cache_result
    def GLTSREMP4M():
        """
        Traitements  imposables quotient
        """
        return ((positif((REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and TSNN2REMP4() and TONEQUOMHT() * TSNN2REMP4() / TOTALQUOHT()))) + ((1 - positif((REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPVM() - GLTSREMPCM() - GLTSREMP1M() - GLTSREMP2M() - GLTSREMP3M())))

    @cache_result
    def TGLTSREMP4M():
        """
        Traitements  imposables quotient
        """
        return ((positif((REVPRR() + REVRVO() + REVRCM() + REVRF())) and positif((REVPRR() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TTSNN2REMP4() and TONEQUOM() * TTSNN2REMP4() / TOTALQUO()))) + ((1 - positif((REVPRR() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVPRR() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPVM() - TGLTSREMPCM() - TGLTSREMP1M() - TGLTSREMP2M() - TGLTSREMP3M())))

    @cache_result
    def TEGLTSREMP4M():
        """
        Traitements ts remp imposables tx effectif
        """
        return ((GLTSREMP4M() and GLTSREMP4M() * (1 - positif(INDTEFF()))) + (TGLTSREMP4M() and TGLTSREMP4M() * positif(INDTEFF())))

    @cache_result
    def TEGLTSREMPTOTM():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLTSREMPVM() + TEGLTSREMPCM() + TEGLTSREMP1M() + TEGLTSREMP2M() + TEGLTSREMP3M() + TEGLTSREMP4M())

    @cache_result
    def GLTSREMPTOTM():
        """
        gain levee  quotient total foyer 
        """
        return somme([GLTSREMPVM(), GLTSREMPCM(), GLTSREMP1M(), GLTSREMP2M(), GLTSREMP3M(), GLTSREMP4M()])

    @cache_result
    def GLPRRVM():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR2C() + PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2C() + PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR2V() and TONEQUOMHT() * PRR2V() / TOTALQUOHT()))) + ((1 - positif((PRR2C() + PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2C() + PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM())))

    @cache_result
    def TGLTSREMPTOTM():
        """
        gain levee  quotient total foyer 
        """
        return somme([TGLTSREMPVM(), TGLTSREMPCM(), TGLTSREMP1M(), TGLTSREMP2M(), TGLTSREMP3M(), TGLTSREMP4M()])

    @cache_result
    def TGLPRRVM():
        """
        Revenus au quotient pension normale
        """
        return ((positif((TPRR2C() + TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2C() + TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR2V() and TONEQUOM() * TPRR2V() / TOTALQUO()))) + ((1 - positif((TPRR2C() + TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2C() + TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM())))

    @cache_result
    def TEGLPRRVM():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRVM() and GLPRRVM() * (1 - positif(INDTEFF()))) + (TGLPRRVM() and TGLPRRVM() * positif(INDTEFF())))

    @cache_result
    def GLPRRCM():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR2C() and TONEQUOMHT() * PRR2C() / TOTALQUOHT()))) + ((1 - positif((PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR21() + PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRVM())))

    @cache_result
    def TGLPRRCM():
        """
        Revenus au quotient pension normale
        """
        return ((positif((TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR2C() and TONEQUOM() * TPRR2C() / TOTALQUO()))) + ((1 - positif((TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR21() + TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRVM())))

    @cache_result
    def TEGLPRRCM():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRCM() and GLPRRCM() * (1 - positif(INDTEFF()))) + (TGLPRRCM() and TGLPRRCM() * positif(INDTEFF())))

    @cache_result
    def GLPRR1M():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR21() and TONEQUOMHT() * PRR21() / TOTALQUOHT()))) + ((1 - positif((PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR22() + PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRVM() - GLPRRCM())))

    @cache_result
    def TGLPRR1M():
        """
        Revenus au quotient pension normale
        """
        return ((positif((TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR21() and TONEQUOM() * TPRR21() / TOTALQUO()))) + ((1 - positif((TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR22() + TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRVM() - TGLPRRCM())))

    @cache_result
    def TEGLPRR1M():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRR1M() and GLPRR1M() * (1 - positif(INDTEFF()))) + (TGLPRR1M() and TGLPRR1M() * positif(INDTEFF())))

    @cache_result
    def GLPRR2M():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR22() and TONEQUOMHT() * PRR22() / TOTALQUOHT()))) + ((1 - positif((PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR23() + PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRVM() - GLPRRCM() - GLPRR1M())))

    @cache_result
    def TGLPRR2M():
        """
        Revenus au quotient pension normale
        """
        return ((positif((TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR22() and TONEQUOM() * TPRR22() / TOTALQUO()))) + ((1 - positif((TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR23() + TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRVM() - TGLPRRCM() - TGLPRR1M())))

    @cache_result
    def TEGLPRR2M():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRR2M() and GLPRR2M() * (1 - positif(INDTEFF()))) + (TGLPRR2M() and TGLPRR2M() * positif(INDTEFF())))

    @cache_result
    def GLPRR3M():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR23() and TONEQUOMHT() * PRR23() / TOTALQUOHT()))) + ((1 - positif((PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR24() + PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRVM() - GLPRRCM() - GLPRR1M() - GLPRR2M())))

    @cache_result
    def TGLPRR3M():
        """
        Revenus au quotient pension normale
        """
        return ((positif((TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR23() and TONEQUOM() * TPRR23() / TOTALQUO()))) + ((1 - positif((TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR24() + TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRVM() - TGLPRRCM() - TGLPRR1M() - TGLPRR2M())))

    @cache_result
    def TEGLPRR3M():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRR3M() and GLPRR3M() * (1 - positif(INDTEFF()))) + (TGLPRR3M() and TGLPRR3M() * positif(INDTEFF())))

    @cache_result
    def GLPRR4M():
        """
        Revenus au quotient pension normale
        """
        return ((positif((PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR24() and TONEQUOMHT() * PRR24() / TOTALQUOHT()))) + ((1 - positif((PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2ZV() + PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRVM() - GLPRRCM() - GLPRR1M() - GLPRR2M() - GLPRR3M())))

    @cache_result
    def TGLPRR4M():
        """
        Revenus au quotient pension normale
        """
        return ((positif((TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR24() and TONEQUOM() * TPRR24() / TOTALQUO()))) + ((1 - positif((TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2ZV() + TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRVM() - TGLPRRCM() - TGLPRR1M() - TGLPRR2M() - TGLPRR3M())))

    @cache_result
    def TEGLPRR4M():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRR4M() and GLPRR4M() * (1 - positif(INDTEFF()))) + (TGLPRR4M() and TGLPRR4M() * positif(INDTEFF())))

    @cache_result
    def TEGLPRRTOTM():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLPRRVM() + TEGLPRRCM() + TEGLPRR1M() + TEGLPRR2M() + TEGLPRR3M() + TEGLPRR4M())

    @cache_result
    def GLPRRZVM():
        """
        Revenus au quotient pension normale code RxZ 
        """
        return ((positif((PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR2ZV() and TONEQUOMHT() * PRR2ZV() / TOTALQUOHT()))) + ((1 - positif((PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2ZC() + PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRVM() - GLPRRCM() - GLPRR1M() - GLPRR2M() - GLPRR3M() - GLPRR4M())))

    @cache_result
    def TGLPRRZVM():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR2ZV() and TONEQUOM() * TPRR2ZV() / TOTALQUO()))) + ((1 - positif((TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2ZC() + TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRVM() - TGLPRRCM() - TGLPRR1M() - TGLPRR2M() - TGLPRR3M() - TGLPRR4M())))

    @cache_result
    def TEGLPRRZVM():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZVM() and GLPRRZVM() * (1 - positif(INDTEFF()))) + (TGLPRRZVM() and TGLPRRZVM() * positif(INDTEFF())))

    @cache_result
    def GLPRRZCM():
        """
        Revenus au quotient pension normale code RxZ 
        """
        return ((positif((PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR2ZC() and TONEQUOMHT() * PRR2ZC() / TOTALQUOHT()))) + ((1 - positif((PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2Z1() + PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRVM() - GLPRRCM() - GLPRR1M() - GLPRR2M() - GLPRR3M() - GLPRR4M() - GLPRRZVM())))

    @cache_result
    def TGLPRRZCM():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR2ZC() and TONEQUOM() * TPRR2ZC() / TOTALQUO()))) + ((1 - positif((TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2Z1() + TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRVM() - TGLPRRCM() - TGLPRR1M() - TGLPRR2M() - TGLPRR3M() - TGLPRR4M() - TGLPRRZVM())))

    @cache_result
    def TEGLPRRZCM():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZCM() and GLPRRZCM() * (1 - positif(INDTEFF()))) + (TGLPRRZCM() and TGLPRRZCM() * positif(INDTEFF())))

    @cache_result
    def GLPRRZ1M():
        """
        Revenus au quotient pension normale code RxZ 
        """
        return ((positif((PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR2Z1() and TONEQUOMHT() * PRR2Z1() / TOTALQUOHT()))) + ((1 - positif((PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2Z2() + PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRVM() - GLPRRCM() - GLPRR1M() - GLPRR2M() - GLPRR3M() - GLPRR4M() - GLPRRZVM() - GLPRRZCM())))

    @cache_result
    def TGLPRRZ1M():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR2Z1() and TONEQUOM() * TPRR2Z1() / TOTALQUO()))) + ((1 - positif((TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2Z2() + TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRVM() - TGLPRRCM() - TGLPRR1M() - TGLPRR2M() - TGLPRR3M() - TGLPRR4M() - TGLPRRZVM() - TGLPRRZCM())))

    @cache_result
    def TEGLPRRZ1M():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZ1M() and GLPRRZ1M() * (1 - positif(INDTEFF()))) + (TGLPRRZ1M() and TGLPRRZ1M() * positif(INDTEFF())))

    @cache_result
    def GLPRRZ2M():
        """
        Revenus au quotient pension normale code RxZ 
        """
        return ((positif((PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR2Z2() and TONEQUOMHT() * PRR2Z2() / TOTALQUOHT()))) + ((1 - positif((PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2Z3() + PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRVM() - GLPRRCM() - GLPRR1M() - GLPRR2M() - GLPRR3M() - GLPRR4M() - GLPRRZVM() - GLPRRZCM() - GLPRRZ1M())))

    @cache_result
    def TGLPRRZ2M():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR2Z2() and TONEQUOM() * TPRR2Z2() / TOTALQUO()))) + ((1 - positif((TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2Z3() + TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRVM() - TGLPRRCM() - TGLPRR1M() - TGLPRR2M() - TGLPRR3M() - TGLPRR4M() - TGLPRRZVM() - TGLPRRZCM() - TGLPRRZ1M())))

    @cache_result
    def TEGLPRRZ2M():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZ2M() and GLPRRZ2M() * (1 - positif(INDTEFF()))) + (TGLPRRZ2M() and TGLPRRZ2M() * positif(INDTEFF())))

    @cache_result
    def GLPRRZ3M():
        """
        Revenus au quotient pension normale code RxZ 
        """
        return ((positif((PRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((PRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR2Z3() and TONEQUOMHT() * PRR2Z3() / TOTALQUOHT()))) + ((1 - positif((PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((PRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRVM() - GLPRRCM() - GLPRR1M() - GLPRR2M() - GLPRR3M() - GLPRR4M() - GLPRRZVM() - GLPRRZCM() - GLPRRZ1M() - GLPRRZ2M())))

    @cache_result
    def TGLPRRZ3M():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) and positif((TPRR2Z4() + REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR2Z3() and TONEQUOM() * TPRR2Z3() / TOTALQUO()))) + ((1 - positif((TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) and (1 - positif((TPRR2Z4() + REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRVM() - TGLPRRCM() - TGLPRR1M() - TGLPRR2M() - TGLPRR3M() - TGLPRR4M() - TGLPRRZVM() - TGLPRRZCM() - TGLPRRZ1M() - TGLPRRZ2M())))

    @cache_result
    def TEGLPRRZ3M():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZ3M() and GLPRRZ3M() * (1 - positif(INDTEFF()))) + (TGLPRRZ3M() and TGLPRRZ3M() * positif(INDTEFF())))

    @cache_result
    def GLPRRZ4M():
        """
        Revenus au quotient pension normale code RxZ 
        """
        return ((positif((REVRVO() + REVRCM() + REVRF())) and positif((REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and PRR2Z4() and TONEQUOMHT() * PRR2Z4() / TOTALQUOHT()))) + ((1 - positif((REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVRVO() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRVM() - GLPRRCM() - GLPRR1M() - GLPRR2M() - GLPRR3M() - GLPRR4M() - GLPRRZVM() - GLPRRZCM() - GLPRRZ1M() - GLPRRZ2M() - GLPRRZ3M())))

    @cache_result
    def TGLPRRZ4M():
        """
        Revenus au quotient pension normale code RxZ tx eff
        """
        return ((positif((REVRVO() + REVRCM() + REVRF())) and positif((REVRVO() + REVRCM() + REVRF())) * arr((TONEQUOM() and TPRR2Z4() and TONEQUOM() * TPRR2Z4() / TOTALQUO()))) + ((1 - positif((REVRVO() + REVRCM() + REVRF()))) and (1 - positif((REVRVO() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRVM() - TGLPRRCM() - TGLPRR1M() - TGLPRR2M() - TGLPRR3M() - TGLPRR4M() - TGLPRRZVM() - TGLPRRZCM() - TGLPRRZ1M() - TGLPRRZ2M() - TGLPRRZ3M())))

    @cache_result
    def TEGLPRRZ4M():
        """
        Traitements pens imposables tx effectif
        """
        return ((GLPRRZ4M() and GLPRRZ4M() * (1 - positif(INDTEFF()))) + (TGLPRRZ4M() and TGLPRRZ4M() * positif(INDTEFF())))

    @cache_result
    def TEGLPRRZTOTM():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLPRRZVM() + TEGLPRRZCM() + TEGLPRRZ1M() + TEGLPRRZ2M() + TEGLPRRZ3M() + TEGLPRRZ4M())

    @cache_result
    def GLPRRTOTM():
        """
        gain levee  quotient total foyer pension normale
        """
        return somme([(GLPRRVM() + GLPRRZVM()), (GLPRRCM() + GLPRRZCM()), (GLPRR1M() + GLPRRZ1M()), (GLPRR2M() + GLPRRZ2M()), (GLPRR3M() + GLPRRZ3M()), (GLPRR4M() + GLPRRZ4M())])

    @cache_result
    def GLRVOM():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return ((positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF())) and positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and _2RV1() and TONEQUOMHT() * _2RV1() / TOTALQUOHT()))) + ((1 - positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM())))

    @cache_result
    def TGLPRRTOTM():
        """
        Revenus au quotient pension normale
        """
        return somme([(TGLPRRVM() + TGLPRRZVM()), (TGLPRRCM() + TGLPRRZCM()), (TGLPRR1M() + TGLPRRZ1M()), (TGLPRR2M() + TGLPRRZ2M()), (TGLPRR3M() + TGLPRRZ3M()), (TGLPRR4M() + TGLPRRZ4M())])

    @cache_result
    def TGLRVOM():
        """
        gain levee  quotient total foyer 
        """
        return ((positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF())) and positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF())) * arr((TONEQUOM() and _2RV1() and TONEQUOM() * _2RV1() / TOTALQUO()))) + ((1 - positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV2() + _2RV3() + _2RV4() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM())))

    @cache_result
    def TEGLRVOM():
        """
        Rent viagere  imposables tx effectif
        """
        return ((GLRVOM() and GLRVOM() * (1 - positif(INDTEFF()))) + (TGLRVOM() and TGLRVOM() * positif(INDTEFF())))

    @cache_result
    def GLRVO5M():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return ((positif((_2RV3() + _2RV4() + REVRCM() + REVRF())) and positif((_2RV3() + _2RV4() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and _2RV2() and TONEQUOMHT() * _2RV2() / TOTALQUOHT()))) + ((1 - positif((_2RV3() + _2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV3() + _2RV4() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM() - GLRVOM())))

    @cache_result
    def TGLRVO5M():
        """
        gain levee  quotient total foyer 
        """
        return ((positif((_2RV3() + _2RV4() + REVRCM() + REVRF())) and positif((_2RV3() + _2RV4() + REVRCM() + REVRF())) * arr((TONEQUOM() and _2RV2() and TONEQUOM() * _2RV2() / TOTALQUO()))) + ((1 - positif((_2RV3() + _2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV3() + _2RV4() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM() - TGLRVOM())))

    @cache_result
    def TEGLRVO5M():
        """
        Rent viagere  imposables tx effectif
        """
        return ((GLRVO5M() and GLRVO5M() * (1 - positif(INDTEFF()))) + (TGLRVO5M() and TGLRVO5M() * positif(INDTEFF())))

    @cache_result
    def GLRVO6M():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return ((positif((_2RV4() + REVRCM() + REVRF())) and positif((_2RV4() + REVRCM() + REVRF())) * arr((TONEQUOMHT() and _2RV3() and TONEQUOMHT() * _2RV3() / TOTALQUOHT()))) + ((1 - positif((_2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV4() + REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM() - GLRVOM() - GLRVO5M())))

    @cache_result
    def TGLRVO6M():
        """
        gain levee  quotient total foyer 
        """
        return ((positif((_2RV4() + REVRCM() + REVRF())) and positif((_2RV4() + REVRCM() + REVRF())) * arr((TONEQUOM() and _2RV3() and TONEQUOM() * _2RV3() / TOTALQUO()))) + ((1 - positif((_2RV4() + REVRCM() + REVRF()))) and (1 - positif((_2RV4() + REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM() - TGLRVOM() - TGLRVO5M())))

    @cache_result
    def TEGLRVO6M():
        """
        Rent viagere  imposables tx effectif
        """
        return ((GLRVO6M() and GLRVO6M() * (1 - positif(INDTEFF()))) + (TGLRVO6M() and TGLRVO6M() * positif(INDTEFF())))

    @cache_result
    def GLRVO7M():
        """
        Revenus au quotient hors rev foot nets imposables
        """
        return ((positif((REVRCM() + REVRF())) and positif((REVRCM() + REVRF())) * arr((TONEQUOMHT() and _2RV4() and TONEQUOMHT() * _2RV4() / TOTALQUOHT()))) + ((1 - positif((REVRCM() + REVRF()))) and (1 - positif((REVRCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM() - GLRVOM() - GLRVO5M() - GLRVO6M())))

    @cache_result
    def TGLRVO7M():
        """
        gain levee  quotient total foyer 
        """
        return ((positif((REVRCM() + REVRF())) and positif((REVRCM() + REVRF())) * arr((TONEQUOM() and _2RV4() and TONEQUOM() * _2RV4() / TOTALQUO()))) + ((1 - positif((REVRCM() + REVRF()))) and (1 - positif((REVRCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM() - TGLRVOM() - TGLRVO5M() - TGLRVO6M())))

    @cache_result
    def TEGLRVO7M():
        """
        Rent viagere  imposables tx effectif
        """
        return ((GLRVO7M() and GLRVO7M() * (1 - positif(INDTEFF()))) + (TGLRVO7M() and TGLRVO7M() * positif(INDTEFF())))

    @cache_result
    def TEGLRVOTOTM():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLRVOM() + TEGLRVO5M() + TEGLRVO6M() + TEGLRVO7M())

    @cache_result
    def GLRVOTOTM():
        """
        gain levee  quotient total foyer 
        """
        return (GLRVOM() + GLRVO5M() + GLRVO6M() + GLRVO7M())

    @cache_result
    def GLRCMDCM():
        """
        Revenus au quotient 
        """
        return ((positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUOMHT() and _2RCM() and TONEQUOMHT() * _2RCM() / TOTALQUOHT()))) + ((1 - positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM() - GLRVOTOTM())))

    @cache_result
    def TGLRVOTOTM():
        """
        gain levee  quotient total foyer 
        """
        return (TGLRVOM() + TGLRVO5M() + TGLRVO6M() + TGLRVO7M())

    @cache_result
    def TGLRCMDCM():
        """
        Revenus au quotient 
        """
        return ((positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUOM() and _2RCM() and TONEQUOM() * _2RCM() / TOTALQUO()))) + ((1 - positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM() - TGLRVOTOTM())))

    @cache_result
    def TEGLRCMDCM():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMDCM() and GLRCMDCM() * (1 - positif(INDTEFF()))) + (TGLRCMDCM() and TGLRCMDCM() * positif(INDTEFF())))

    @cache_result
    def GLRCMFUM():
        """
        Revenus au quotient 
        """
        return ((positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUOMHT() and _3RCM() and TONEQUOMHT() * _3RCM() / TOTALQUOHT()))) + ((1 - positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM() - GLRVOTOTM() - GLRCMDCM())))

    @cache_result
    def TGLRCMFUM():
        """
        Revenus au quotient 
        """
        return ((positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUOM() and _3RCM() and TONEQUOM() * _3RCM() / TOTALQUO()))) + ((1 - positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_4RCM() + _5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM() - TGLRVOTOTM() - TGLRCMDCM())))

    @cache_result
    def TEGLRCMFUM():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMFUM() and GLRCMFUM() * (1 - positif(INDTEFF()))) + (TGLRCMFUM() and TGLRCMFUM() * positif(INDTEFF())))

    @cache_result
    def GLRCMCHM():
        """
        Revenus au quotient 
        """
        return ((positif((_5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUOMHT() and _4RCM() and TONEQUOMHT() * _4RCM() / TOTALQUOHT()))) + ((1 - positif((_5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM() - GLRVOTOTM() - GLRCMDCM() - GLRCMFUM())))

    @cache_result
    def TGLRCMCHM():
        """
        Revenus au quotient 
        """
        return ((positif((_5RCM() + _6RCM() + _7RCM() + REVRF())) and positif((_5RCM() + _6RCM() + _7RCM() + REVRF())) * arr((TONEQUOM() and _4RCM() and TONEQUOM() * _4RCM() / TOTALQUO()))) + ((1 - positif((_5RCM() + _6RCM() + _7RCM() + REVRF()))) and (1 - positif((_5RCM() + _6RCM() + _7RCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM() - TGLRVOTOTM() - TGLRCMDCM() - TGLRCMFUM())))

    @cache_result
    def TEGLRCMCHM():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMCHM() and GLRCMCHM() * (1 - positif(INDTEFF()))) + (TGLRCMCHM() and TGLRCMCHM() * positif(INDTEFF())))

    @cache_result
    def GLRCMTSM():
        """
        Revenus au quotient 
        """
        return ((positif((_6RCM() + _7RCM() + REVRF())) and positif((_6RCM() + _7RCM() + REVRF())) * arr((TONEQUOMHT() and _5RCM() and TONEQUOMHT() * _5RCM() / TOTALQUOHT()))) + ((1 - positif((_6RCM() + _7RCM() + REVRF()))) and (1 - positif((_6RCM() + _7RCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM() - GLRVOTOTM() - GLRCMDCM() - GLRCMFUM() - GLRCMCHM())))

    @cache_result
    def GLRCMGOM():
        """
        Revenus au quotient 
        """
        return ((positif((_7RCM() + REVRF())) and positif((_7RCM() + REVRF())) * arr((TONEQUOMHT() and _6RCM() and TONEQUOMHT() * _6RCM() / TOTALQUOHT()))) + ((1 - positif((_7RCM() + REVRF()))) and (1 - positif((_7RCM() + REVRF()))) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM() - GLRVOTOTM() - GLRCMDCM() - GLRCMFUM() - GLRCMCHM() - GLRCMTSM())))

    @cache_result
    def TGLRCMTSM():
        """
        Revenus au quotient 
        """
        return ((positif((_6RCM() + _7RCM() + REVRF())) and positif((_6RCM() + _7RCM() + REVRF())) * arr((TONEQUOM() and _5RCM() and TONEQUOM() * _5RCM() / TOTALQUO()))) + ((1 - positif((_6RCM() + _7RCM() + REVRF()))) and (1 - positif((_6RCM() + _7RCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM() - TGLRVOTOTM() - TGLRCMDCM() - TGLRCMFUM() - TGLRCMCHM())))

    @cache_result
    def TGLRCMGOM():
        """
        Revenus au quotient 
        """
        return ((positif((_7RCM() + REVRF())) and positif((_7RCM() + REVRF())) * arr((TONEQUOM() and _6RCM() and TONEQUOM() * _6RCM() / TOTALQUO()))) + ((1 - positif((_7RCM() + REVRF()))) and (1 - positif((_7RCM() + REVRF()))) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM() - TGLRVOTOTM() - TGLRCMDCM() - TGLRCMFUM() - TGLRCMCHM() - TGLRCMTSM())))

    @cache_result
    def TEGLRCMGOM():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMGOM() and GLRCMGOM() * (1 - positif(INDTEFF()))) + (TGLRCMGOM() and TGLRCMGOM() * positif(INDTEFF())))

    @cache_result
    def GLRCMTRM():
        """
        Revenus au quotient 
        """
        return ((positif(REVRF()) and positif(REVRF()) * arr((TONEQUOMHT() and _7RCM() and TONEQUOMHT() * _7RCM() / TOTALQUOHT()))) + ((1 - positif(REVRF())) and (1 - positif(REVRF())) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM() - GLRVOTOTM() - GLRCMDCM() - GLRCMFUM() - GLRCMCHM() - GLRCMGOM() - GLRCMTSM())))

    @cache_result
    def TGLRCMTRM():
        """
        Revenus au quotient 
        """
        return ((positif(REVRF()) and positif(REVRF()) * arr((TONEQUOM() and _7RCM() and TONEQUOM() * _7RCM() / TOTALQUO()))) + ((1 - positif(REVRF())) and (1 - positif(REVRF())) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM() - TGLRVOTOTM() - TGLRCMDCM() - TGLRCMFUM() - TGLRCMCHM() - TGLRCMGOM() - TGLRCMTSM())))

    @cache_result
    def TEGLRCMTRM():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMTRM() and GLRCMTRM() * (1 - positif(INDTEFF()))) + (TGLRCMTRM() and TGLRCMTRM() * positif(INDTEFF())))

    @cache_result
    def TEGLRCMTSM():
        """
        RCM   imposables tx effectif
        """
        return ((GLRCMTSM() and GLRCMTSM() * (1 - positif(INDTEFF()))) + (TGLRCMTSM() and TGLRCMTSM() * positif(INDTEFF())))

    @cache_result
    def TEGLRCMTOTM():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLRCMDCM() + TEGLRCMFUM() + TEGLRCMCHM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLRCMTSM())

    @cache_result
    def GLRCMTOTM():
        """
        gain levee  quotient total foyer 
        """
        return (GLRCMDCM() + GLRCMFUM() + GLRCMCHM() + GLRCMGOM() + GLRCMTRM() + GLRCMTSM())

    @cache_result
    def GLRF1M():
        """
        Revenus au quotient hors rev foot nets imposablesTXMOY
        """
        return ((positif(_3REVF()) and positif(_3REVF()) * arr((TONEQUOMHT() and _2REVF() and TONEQUOMHT() * _2REVF() / TOTALQUOHT()))) + ((1 - positif(_3REVF())) and (1 - positif(_3REVF())) * (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM() - GLRVOTOTM() - GLRCMTOTM())))

    @cache_result
    def TGLRCMTOTM():
        """
        gain levee  quotient total foyer 
        """
        return (TGLRCMDCM() + TGLRCMFUM() + TGLRCMCHM() + TGLRCMGOM() + TGLRCMTRM() + TGLRCMTSM())

    @cache_result
    def TGLRF1M():
        """
        gain levee  quotient total foyer 
        """
        return ((positif(_3REVF()) and positif(_3REVF()) * arr((TONEQUOM() and _2REVF() and TONEQUOM() * _2REVF() / TOTALQUO()))) + ((1 - positif(_3REVF())) and (1 - positif(_3REVF())) * (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM() - TGLRVOTOTM() - TGLRCMTOTM())))

    @cache_result
    def TEGLRF1M():
        """
        Rev foncier   imposables tx effectif
        """
        return ((GLRF1M() and GLRF1M() * (1 - positif(INDTEFF()))) + (TGLRF1M() and TGLRF1M() * positif(INDTEFF())))

    @cache_result
    def GLRF2M():
        """
        Revenus au quotient hors rev foot nets imposablesTXMOY
        """
        return (TONEQUOMHT() - GLTOTM() - GLFTOTM() - GLPALIMTOTM() - GLTSTOTM() - GLTSREMPTOTM() - GLPRRTOTM() - GLRVOTOTM() - GLRCMTOTM() - GLRF1M())

    @cache_result
    def TGLRF2M():
        """
        gain levee  quotient total foyer 
        """
        return (TONEQUOM() - TGLTOTM() - TGLFTOTM() - TGLPALIMTOTM() - TGLTSTOTM() - TGLTSREMPTOTM() - TGLPRRTOTM() - TGLRVOTOTM() - TGLRCMTOTM() - TGLRF1M())

    @cache_result
    def TEGLRF2M():
        """
        Rev foncier   imposables tx effectif
        """
        return ((GLRF2M() and GLRF2M() * (1 - positif(INDTEFF()))) + (TGLRF2M() and TGLRF2M() * positif(INDTEFF())))

    @cache_result
    def TEGLRFTOTM():
        """
        Rev foncier   imposables tx effectif
        """
        return (TEGLRF1M() + TEGLRF2M())

    @cache_result
    def RPQ1M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        From RPQiM
        """
        return inf((GL1M() and GL1M() / DIVGL1))

    @cache_result
    def RPQ2M():
        """
        Revenu imposable suivant le quotient soumis au bar}me
        From RPQiM
        """
        return inf((GL2M() and GL2M() / DIVGL2))

    @cache_result
    def RPQ3M():
        """
        Revenu imposable suivant le quotient soumis au bar}me
        From RPQiM
        """
        return inf((GL3M() and GL3M() / DIVGL3))

    @cache_result
    def RPQ4M():
        """
        Revenu imposable suivant le quotient soumis au bar}me
        From RPQiM
        """
        return inf((GL4M() and GL4M() / DIVGL4))

    @cache_result
    def RPQFVM():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From RPQFiM
        """
        return inf((GLFVM() and GLFVM() / saisie_variables.get('COTFV', 0)))

    @cache_result
    def RPQFCM():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From RPQFiM
        """
        return inf((GLFCM() and GLFCM() / saisie_variables.get('COTFC', 0)))

    @cache_result
    def RPQF1M():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From RPQFiM
        """
        return inf((GLF1M() and GLF1M() / saisie_variables.get('COTF1', 0)))

    @cache_result
    def RPQF2M():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From RPQFiM
        """
        return inf((GLF2M() and GLF2M() / saisie_variables.get('COTF2', 0)))

    @cache_result
    def RPQF3M():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From RPQFiM
        """
        return inf((GLF3M() and GLF3M() / saisie_variables.get('COTF3', 0)))

    @cache_result
    def RPQF4M():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From RPQFiM
        """
        return inf((GLF4M() and GLF4M() / saisie_variables.get('COTF4', 0)))

    @cache_result
    def RPQPALIMVM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMiM
        """
        return inf((GLPALIMVM() and GLPALIMVM() / saisie_variables.get('PENSALNBV', 0)))

    @cache_result
    def RPQPALIMCM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMiM
        """
        return inf((GLPALIMCM() and GLPALIMCM() / saisie_variables.get('PENSALNBC', 0)))

    @cache_result
    def RPQPALIM1M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMiM
        """
        return inf((GLPALIM1M() and GLPALIM1M() / saisie_variables.get('PENSALNBP1', 0)))

    @cache_result
    def RPQPALIM2M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMiM
        """
        return inf((GLPALIM2M() and GLPALIM2M() / saisie_variables.get('PENSALNBP2', 0)))

    @cache_result
    def RPQPALIM3M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMiM
        """
        return inf((GLPALIM3M() and GLPALIM3M() / saisie_variables.get('PENSALNBP3', 0)))

    @cache_result
    def RPQPALIM4M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPALIMiM
        """
        return inf((GLPALIM4M() and GLPALIM4M() / saisie_variables.get('PENSALNBP4', 0)))

    @cache_result
    def RPQRF1M():
        """
        rev. foncier imposables suivant le quotient soumis au bareme
        """
        return inf((GLRF1M() and GLRF1M() / saisie_variables.get('FONCINB', 0)))

    @cache_result
    def RPQRF2M():
        """
        rev. foncier imposables suivant le quotient soumis au bareme
        """
        return inf((GLRF2M() and GLRF2M() / saisie_variables.get('REAMORNB', 0)))

    @cache_result
    def RPQRCMDCM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMDCM() and GLRCMDCM() / saisie_variables.get('REVACTNB', 0)))

    @cache_result
    def RPQRCMFUM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMFUM() and GLRCMFUM() / saisie_variables.get('REVPEANB', 0)))

    @cache_result
    def RPQRCMCHM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMCHM() and GLRCMCHM() / saisie_variables.get('PROVIENB', 0)))

    @cache_result
    def RPQRCMTRM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMTRM() and GLRCMTRM() / saisie_variables.get('INTERENB', 0)))

    @cache_result
    def RPQRCMTSM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMTSM() and GLRCMTSM() / saisie_variables.get('DISQUONB', 0)))

    @cache_result
    def RPQRCMGOM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((GLRCMGOM() and GLRCMGOM() / saisie_variables.get('RESTUCNB', 0)))

    @cache_result
    def RPQPRRVM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRiM
        """
        return inf((GLPRRVM() and GLPRRVM() / saisie_variables.get('CARPENBAV', 0)))

    @cache_result
    def RPQPRRCM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRiM
        """
        return inf((GLPRRCM() and GLPRRCM() / saisie_variables.get('CARPENBAC', 0)))

    @cache_result
    def RPQPRR1M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRiM
        """
        return inf((GLPRR1M() and GLPRR1M() / saisie_variables.get('CARPENBAP1', 0)))

    @cache_result
    def RPQPRR2M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRiM
        """
        return inf((GLPRR2M() and GLPRR2M() / saisie_variables.get('CARPENBAP2', 0)))

    @cache_result
    def RPQPRR3M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRiM
        """
        return inf((GLPRR3M() and GLPRR3M() / saisie_variables.get('CARPENBAP3', 0)))

    @cache_result
    def RPQPRR4M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From RPQPRRiM
        """
        return inf((GLPRR4M() and GLPRR4M() / saisie_variables.get('CARPENBAP4', 0)))

    @cache_result
    def RPQPRRZVM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((GLPRRZVM() and GLPRRZVM() / saisie_variables.get('CODNAZ', 0)))

    @cache_result
    def RPQPRRZCM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((GLPRRZCM() and GLPRRZCM() / saisie_variables.get('CODNBZ', 0)))

    @cache_result
    def RPQPRRZ1M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((GLPRRZ1M() and GLPRRZ1M() / saisie_variables.get('CODNCZ', 0)))

    @cache_result
    def RPQPRRZ2M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((GLPRRZ2M() and GLPRRZ2M() / saisie_variables.get('CODNDZ', 0)))

    @cache_result
    def RPQPRRZ3M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((GLPRRZ3M() and GLPRRZ3M() / saisie_variables.get('CODNEZ', 0)))

    @cache_result
    def RPQPRRZ4M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((GLPRRZ4M() and GLPRRZ4M() / saisie_variables.get('CODNFZ', 0)))

    @cache_result
    def RPQRVOM():
        """
        rente viagere imposables suivant le quotient soumis au bareme
        """
        return inf((GLRVOM() and GLRVOM() / saisie_variables.get('RENTAXNB', 0)))

    @cache_result
    def RPQRVO5M():
        """
        rente viagere imposables suivant le quotient soumis au bareme
        """
        return inf((GLRVO5M() and GLRVO5M() / saisie_variables.get('RENTAXNB5', 0)))

    @cache_result
    def RPQRVO6M():
        """
        rente viagere imposables suivant le quotient soumis au bareme
        """
        return inf((GLRVO6M() and GLRVO6M() / saisie_variables.get('RENTAXNB6', 0)))

    @cache_result
    def RPQRVO7M():
        """
        rente viagere imposables suivant le quotient soumis au bareme
        """
        return inf((GLRVO7M() and GLRVO7M() / saisie_variables.get('RENTAXNB7', 0)))

    @cache_result
    def RPQTSVM():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSiM
        """
        return inf((GLTSVM() and GLTSVM() / saisie_variables.get('CARTSNBAV', 0)))

    @cache_result
    def RPQTSCM():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSiM
        """
        return inf((GLTSCM() and GLTSCM() / saisie_variables.get('CARTSNBAC', 0)))

    @cache_result
    def RPQTS1M():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSiM
        """
        return inf((GLTS1M() and GLTS1M() / saisie_variables.get('CARTSNBAP1', 0)))

    @cache_result
    def RPQTS2M():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSiM
        """
        return inf((GLTS2M() and GLTS2M() / saisie_variables.get('CARTSNBAP2', 0)))

    @cache_result
    def RPQTS3M():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSiM
        """
        return inf((GLTS3M() and GLTS3M() / saisie_variables.get('CARTSNBAP3', 0)))

    @cache_result
    def RPQTS4M():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSiM
        """
        return inf((GLTS4M() and GLTS4M() / saisie_variables.get('CARTSNBAP4', 0)))

    @cache_result
    def RPQTSREMPVM():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPiM
        """
        return inf((GLTSREMPVM() and GLTSREMPVM() / saisie_variables.get('REMPLANBV', 0)))

    @cache_result
    def RPQTSREMPCM():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPiM
        """
        return inf((GLTSREMPCM() and GLTSREMPCM() / saisie_variables.get('REMPLANBC', 0)))

    @cache_result
    def RPQTSREMP1M():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPiM
        """
        return inf((GLTSREMP1M() and GLTSREMP1M() / saisie_variables.get('REMPLANBP1', 0)))

    @cache_result
    def RPQTSREMP2M():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPiM
        """
        return inf((GLTSREMP2M() and GLTSREMP2M() / saisie_variables.get('REMPLANBP2', 0)))

    @cache_result
    def RPQTSREMP3M():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPiM
        """
        return inf((GLTSREMP3M() and GLTSREMP3M() / saisie_variables.get('REMPLANBP3', 0)))

    @cache_result
    def RPQTSREMP4M():
        """
        TS imposables suivant le quotient soumis au bareme
        From RPQTSREMPiM
        """
        return inf((GLTSREMP4M() and GLTSREMP4M() / saisie_variables.get('REMPLANBP4', 0)))

    @cache_result
    def RPQRVGM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NVG
        """
        return inf((GLRVGM() and GLRVGM() / saisie_variables.get('CODNVG', 0)))

    @cache_result
    def RPQRWBM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NWB
        """
        return inf((GLRWBM() and GLRWBM() / saisie_variables.get('CODNWB', 0)))

    @cache_result
    def RPQRWAM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NWA
        """
        return inf((GLRWAM() and GLRWAM() / saisie_variables.get('CODNWA', 0)))

    @cache_result
    def TONEQUOM1():
        """
        somme des revenus au quotient divises par leur quot. respectif TXMOY
        """
        return (somme([RPQ1M(), RPQ2M(), RPQ3M(), RPQ4M()]) + somme([RPQFVM(), RPQFCM(), RPQF1M(), RPQF2M(), RPQF3M(), RPQF4M()]) + somme([RPQPALIMVM(), RPQPALIMCM(), RPQPALIM1M(), RPQPALIM2M(), RPQPALIM3M(), RPQPALIM4M()]) + somme([RPQRF1M(), RPQRF2M()]) + RPQRCMDCM() + RPQRCMFUM() + RPQRCMCHM() + RPQRCMTRM() + RPQRCMTSM() + RPQRCMGOM() + somme([RPQPRRVM(), RPQPRRCM(), RPQPRR1M(), RPQPRR2M(), RPQPRR3M(), RPQPRR4M()]) + somme([RPQPRRZVM(), RPQPRRZCM(), RPQPRRZ1M(), RPQPRRZ2M(), RPQPRRZ3M(), RPQPRRZ4M()]) + RPQRVOM() + RPQRVO5M() + RPQRVO6M() + RPQRVO7M() + somme([RPQTSVM(), RPQTSCM(), RPQTS1M(), RPQTS2M(), RPQTS3M(), RPQTS4M()]) + somme([RPQTSREMPVM(), RPQTSREMPCM(), RPQTSREMP1M(), RPQTSREMP2M(), RPQTSREMP3M(), RPQTSREMP4M()]) + RPQRVGM() + (RPQRWBM() and RPQRWBM() * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((RPQRWBM() + RPQRWAM()) and (RPQRWBM() + RPQRWAM()) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))))

    @cache_result
    def TRPQ1M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        From TRPQiM
        """
        return inf((TGL1M() and TGL1M() / DIVGL1))

    @cache_result
    def TRPQ2M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        From TRPQiM
        """
        return inf((TGL2M() and TGL2M() / DIVGL2))

    @cache_result
    def TRPQ3M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        From TRPQiM
        """
        return inf((TGL3M() and TGL3M() / DIVGL3))

    @cache_result
    def TRPQ4M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 1
        From TRPQiM
        """
        return inf((TGL4M() and TGL4M() / DIVGL4))

    @cache_result
    def TRPQFVM():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From TRPQFiM
        """
        return inf((TGLFVM() and TGLFVM() / saisie_variables.get('COTFV', 0)))

    @cache_result
    def TRPQFCM():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From TRPQFiM
        """
        return inf((TGLFCM() and TGLFCM() / saisie_variables.get('COTFC', 0)))

    @cache_result
    def TRPQF1M():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From TRPQFiM
        """
        return inf((TGLF1M() and TGLF1M() / saisie_variables.get('COTF1', 0)))

    @cache_result
    def TRPQF2M():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From TRPQFiM
        """
        return inf((TGLF2M() and TGLF2M() / saisie_variables.get('COTF2', 0)))

    @cache_result
    def TRPQF3M():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From TRPQFiM
        """
        return inf((TGLF3M() and TGLF3M() / saisie_variables.get('COTF3', 0)))

    @cache_result
    def TRPQF4M():
        """
        pensions footballeurs imposables suivant le quotient soumis au bar}me
        From TRPQFiM
        """
        return inf((TGLF4M() and TGLF4M() / saisie_variables.get('COTF4', 0)))

    @cache_result
    def TRPQPALIMVM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMiM
        """
        return inf((TGLPALIMVM() and TGLPALIMVM() / saisie_variables.get('PENSALNBV', 0)))

    @cache_result
    def TRPQPALIMCM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMiM
        """
        return inf((TGLPALIMCM() and TGLPALIMCM() / saisie_variables.get('PENSALNBC', 0)))

    @cache_result
    def TRPQPALIM1M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMiM
        """
        return inf((TGLPALIM1M() and TGLPALIM1M() / saisie_variables.get('PENSALNBP1', 0)))

    @cache_result
    def TRPQPALIM2M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMiM
        """
        return inf((TGLPALIM2M() and TGLPALIM2M() / saisie_variables.get('PENSALNBP2', 0)))

    @cache_result
    def TRPQPALIM3M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMiM
        """
        return inf((TGLPALIM3M() and TGLPALIM3M() / saisie_variables.get('PENSALNBP3', 0)))

    @cache_result
    def TRPQPALIM4M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPALIMiM
        """
        return inf((TGLPALIM4M() and TGLPALIM4M() / saisie_variables.get('PENSALNBP4', 0)))

    @cache_result
    def TRPQRF1M():
        """
        rev. foncier imposables suivant le quotient soumis au bareme
        """
        return inf((TGLRF1M() and TGLRF1M() / saisie_variables.get('FONCINB', 0)))

    @cache_result
    def TRPQRF2M():
        """
        rev. foncier imposables suivant le quotient soumis au bareme
        """
        return inf((TGLRF2M() and TGLRF2M() / saisie_variables.get('REAMORNB', 0)))

    @cache_result
    def TRPQRCMDCM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((TGLRCMDCM() and TGLRCMDCM() / saisie_variables.get('REVACTNB', 0)))

    @cache_result
    def TRPQRCMFUM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((TGLRCMFUM() and TGLRCMFUM() / saisie_variables.get('REVPEANB', 0)))

    @cache_result
    def TRPQRCMCHM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((TGLRCMCHM() and TGLRCMCHM() / saisie_variables.get('PROVIENB', 0)))

    @cache_result
    def TRPQRCMTRM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((TGLRCMTRM() and TGLRCMTRM() / saisie_variables.get('INTERENB', 0)))

    @cache_result
    def TRPQRCMTSM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((TGLRCMTSM() and TGLRCMTSM() / saisie_variables.get('DISQUONB', 0)))

    @cache_result
    def TRPQRCMGOM():
        """
        Revenu imposable suivant le quotient 
        """
        return inf((TGLRCMGOM() and TGLRCMGOM() / saisie_variables.get('RESTUCNB', 0)))

    @cache_result
    def TRPQPRRVM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPRRiM
        """
        return inf((TGLPRRVM() and TGLPRRVM() / saisie_variables.get('CARPENBAV', 0)))

    @cache_result
    def TRPQPRRCM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPRRiM
        """
        return inf((TGLPRRCM() and TGLPRRCM() / saisie_variables.get('CARPENBAC', 0)))

    @cache_result
    def TRPQPRR1M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPRRiM
        """
        return inf((TGLPRR1M() and TGLPRR1M() / saisie_variables.get('CARPENBAP1', 0)))

    @cache_result
    def TRPQPRR2M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPRRiM
        """
        return inf((TGLPRR2M() and TGLPRR2M() / saisie_variables.get('CARPENBAP2', 0)))

    @cache_result
    def TRPQPRR3M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPRRiM
        """
        return inf((TGLPRR3M() and TGLPRR3M() / saisie_variables.get('CARPENBAP3', 0)))

    @cache_result
    def TRPQPRR4M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        From TRPQPRRiM
        """
        return inf((TGLPRR4M() and TGLPRR4M() / saisie_variables.get('CARPENBAP4', 0)))

    @cache_result
    def TRPQPRRZVM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((TGLPRRZVM() and TGLPRRZVM() / saisie_variables.get('CODNAZ', 0)))

    @cache_result
    def TRPQPRRZCM():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((TGLPRRZCM() and TGLPRRZCM() / saisie_variables.get('CODNBZ', 0)))

    @cache_result
    def TRPQPRRZ1M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((TGLPRRZ1M() and TGLPRRZ1M() / saisie_variables.get('CODNCZ', 0)))

    @cache_result
    def TRPQPRRZ2M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((TGLPRRZ2M() and TGLPRRZ2M() / saisie_variables.get('CODNDZ', 0)))

    @cache_result
    def TRPQPRRZ3M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((TGLPRRZ3M() and TGLPRRZ3M() / saisie_variables.get('CODNEZ', 0)))

    @cache_result
    def TRPQPRRZ4M():
        """
        pensions  alim imposables suivant le quotient soumis au bareme
        """
        return inf((TGLPRRZ4M() and TGLPRRZ4M() / saisie_variables.get('CODNFZ', 0)))

    @cache_result
    def TRPQRVOM():
        """
        rente viagere imposables suivant le quotient soumis au bareme
        """
        return inf((TGLRVOM() and TGLRVOM() / saisie_variables.get('RENTAXNB', 0)))

    # WARNING: the variable "TRPQRVO5M" is used in a formula at least, but is not defined.
    def TRPQRVO5M(): return 0
    @cache_result
    def TRPQRVO6M():
        """
        rente viagere imposables suivant le quotient soumis au bareme
        """
        return inf((TGLRVO6M() and TGLRVO6M() / saisie_variables.get('RENTAXNB6', 0)))

    @cache_result
    def TRPQRVO7M():
        """
        rente viagere imposables suivant le quotient soumis au bareme
        """
        return inf((TGLRVO7M() and TGLRVO7M() / saisie_variables.get('RENTAXNB7', 0)))

    @cache_result
    def TRPQTSVM():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSiM
        """
        return inf((TGLTSVM() and TGLTSVM() / saisie_variables.get('CARTSNBAV', 0)))

    @cache_result
    def TRPQTSCM():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSiM
        """
        return inf((TGLTSCM() and TGLTSCM() / saisie_variables.get('CARTSNBAC', 0)))

    @cache_result
    def TRPQTS1M():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSiM
        """
        return inf((TGLTS1M() and TGLTS1M() / saisie_variables.get('CARTSNBAP1', 0)))

    @cache_result
    def TRPQTS2M():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSiM
        """
        return inf((TGLTS2M() and TGLTS2M() / saisie_variables.get('CARTSNBAP2', 0)))

    @cache_result
    def TRPQTS3M():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSiM
        """
        return inf((TGLTS3M() and TGLTS3M() / saisie_variables.get('CARTSNBAP3', 0)))

    @cache_result
    def TRPQTS4M():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSiM
        """
        return inf((TGLTS4M() and TGLTS4M() / saisie_variables.get('CARTSNBAP4', 0)))

    @cache_result
    def TRPQTSREMPVM():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSREMPiM
        """
        return inf((TGLTSREMPVM() and TGLTSREMPVM() / saisie_variables.get('REMPLANBV', 0)))

    @cache_result
    def TRPQTSREMPCM():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSREMPiM
        """
        return inf((TGLTSREMPCM() and TGLTSREMPCM() / saisie_variables.get('REMPLANBC', 0)))

    @cache_result
    def TRPQTSREMP1M():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSREMPiM
        """
        return inf((TGLTSREMP1M() and TGLTSREMP1M() / saisie_variables.get('REMPLANBP1', 0)))

    @cache_result
    def TRPQTSREMP2M():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSREMPiM
        """
        return inf((TGLTSREMP2M() and TGLTSREMP2M() / saisie_variables.get('REMPLANBP2', 0)))

    @cache_result
    def TRPQTSREMP3M():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSREMPiM
        """
        return inf((TGLTSREMP3M() and TGLTSREMP3M() / saisie_variables.get('REMPLANBP3', 0)))

    @cache_result
    def TRPQTSREMP4M():
        """
        TS imposables suivant le quotient soumis au bareme
        From TRPQTSREMPiM
        """
        return inf((TGLTSREMP4M() and TGLTSREMP4M() / saisie_variables.get('REMPLANBP4', 0)))

    @cache_result
    def TRPQRVGM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NVG
        """
        return inf((TGLRVGM() and TGLRVGM() / saisie_variables.get('CODNVG', 0)))

    @cache_result
    def TRPQRWBM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NWB
        """
        return inf((TGLRWBM() and TGLRWBM() / saisie_variables.get('CODNWB', 0)))

    @cache_result
    def TRPQRWAM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. NWA
        """
        return inf((TGLRWAM() and TGLRWAM() / saisie_variables.get('CODNWA', 0)))

    @cache_result
    def TONEQUOM1T():
        """
        somme des revenus au quot divises par leur quotient respectif tx eff
        """
        return (somme([TRPQ1M(), TRPQ2M(), TRPQ3M(), TRPQ4M()]) + somme([TRPQFVM(), TRPQFCM(), TRPQF1M(), TRPQF2M(), TRPQF3M(), TRPQF4M()]) + somme([TRPQPALIMVM(), TRPQPALIMCM(), TRPQPALIM1M(), TRPQPALIM2M(), TRPQPALIM3M(), TRPQPALIM4M()]) + somme([TRPQRF1M(), TRPQRF2M()]) + TRPQRCMDCM() + TRPQRCMFUM() + TRPQRCMCHM() + TRPQRCMTRM() + TRPQRCMTSM() + TRPQRCMGOM() + somme([TRPQPRRVM(), TRPQPRRCM(), TRPQPRR1M(), TRPQPRR2M(), TRPQPRR3M(), TRPQPRR4M()]) + somme([TRPQPRRZVM(), TRPQPRRZCM(), TRPQPRRZ1M(), TRPQPRRZ2M(), TRPQPRRZ3M(), TRPQPRRZ4M()]) + TRPQRVOM() + TRPQRVO5M() + TRPQRVO6M() + TRPQRVO7M() + somme([TRPQTSVM(), TRPQTSCM(), TRPQTS1M(), TRPQTS2M(), TRPQTS3M(), TRPQTS4M()]) + somme([TRPQTSREMPVM(), TRPQTSREMPCM(), TRPQTSREMP1M(), TRPQTSREMP2M(), TRPQTSREMP3M(), TRPQTSREMP4M()]) + TRPQRVGM() + (TRPQRWBM() and TRPQRWBM() * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((TRPQRWBM() + TRPQRWAM()) and (TRPQRWBM() + TRPQRWAM()) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))))

    @cache_result
    def TETONEQUOM1():
        """
        somme des revenus au quot divises par leur quotient respectif tx eff
        """
        return ((TONEQUOM1() and TONEQUOM1() * (1 - positif(INDTEFF()))) + (TONEQUOM1T() and TONEQUOM1T() * positif(INDTEFF())))

    @cache_result
    def RB55():
        """
        Revenu imposable pour le calcul du quotient familial taux moyen
        """
        return max(0, (RB05() + TETONEQUOM1()))

    @cache_result
    def QF515():
        """
        Quotient familial
        From QFxy5
        """
        return (arr(RB55()) and arr(RB55()) / NB1())

    @cache_result
    def DS515():
        """
        Droits simples issus du bareme
        From DSxy5
        """
        return ((max((QF515() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF515() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX1() and TAUX1() / 100)) + (max((QF515() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF515() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX2() and TAUX2() / 100)) + (max((QF515() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF515() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX3() and TAUX3() / 100)) + (max((QF515() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF515() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX4() and TAUX4() / 100)) + (max((QF515() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF515() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX5() and TAUX5() / 100)))

    @cache_result
    def IS515():
        """
        Droits simples avant plafonnement du quotient familial
        From ISxy5
        """
        return arr((DS515() and DS515() * NB1()))

    @cache_result
    def QF525():
        """
        Quotient familial tx moyen 2 parts
        From QFxy5
        """
        return (arr(RB55()) and arr(RB55()) / NB2())

    @cache_result
    def DS525():
        """
        Droits simples issus du bareme avant plaf. quotient fam tx moyen
        From DSxy5
        """
        return ((max((QF525() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF525() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX1() and TAUX1() / 100)) + (max((QF525() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF525() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX2() and TAUX2() / 100)) + (max((QF525() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF525() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX3() and TAUX3() / 100)) + (max((QF525() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF525() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX4() and TAUX4() / 100)) + (max((QF525() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF525() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX5() and TAUX5() / 100)))

    @cache_result
    def IS525():
        """
        Droits simples avant plafonnement du quotient familial Tx moyen
        From ISxy5
        """
        return arr((DS525() and DS525() * NB2()))

    @cache_result
    def IN55():
        """
        Droits simples apres plafonnement QF
        From INx5
        """
        return max(IS515(), (IS525() - PLA()))

    @cache_result
    def IQUOTOT5():
        """
        Impot au quotient tous quotients confondus
        From IQUOTOTz
        """
        return (IN55() - IN05())

    @cache_result
    def TERPQRWBM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot.  RWB
        """
        return ((RPQRWBM() and RPQRWBM() * (1 - positif(INDTEFF()))) + (TRPQRWBM() and TRPQRWBM() * positif(INDTEFF())))

    # WARNING: the variable "IN57" is used in a formula at least, but is not defined.
    def IN57(): return 0
    # WARNING: the variable "IN07" is used in a formula at least, but is not defined.
    def IN07(): return 0
    @cache_result
    def IQUOTOT7():
        """
        Impot au quotient tous quotients confondus
        From IQUOTOTz
        """
        return (IN57() - IN07())

    @cache_result
    def ZIPQRWB5():
        """
        Droit sur les bases de quotient RWA
        """
        return ((positif((TEGLRWA() + TEGLRVG() + somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((TEGLRWA() + TEGLRVG() + somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQRWBM() and IQUOTOT5() * TERPQRWBM() / TETONEQUOM1()))) + ((1 - positif((TEGLRWA() + TEGLRVG() + somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLRWA() + TEGLRVG() + somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * IQUOTOT7()))

    @cache_result
    def IPQRWB5():
        """
        ancien plafqf:Droits simples totaux
        """
        return (ZIPQRWB5() and ZIPQRWB5() * saisie_variables.get('CODNWB', 0))

    @cache_result
    def TERPQRWAM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot.  RWA
        """
        return ((RPQRWAM() and RPQRWAM() * (1 - positif(INDTEFF()))) + (TRPQRWAM() and TRPQRWAM() * positif(INDTEFF())))

    @cache_result
    def ZIPQRWA5():
        """
        Droit sur les bases de quotient RWA
        """
        return ((positif((TEGLRVG() + somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((TEGLRVG() + somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQRWAM() and IQUOTOT5() * TERPQRWAM() / TETONEQUOM1()))) + ((1 - positif((TEGLRVG() + somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLRVG() + somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT7() - ZIPQRWB5())))

    @cache_result
    def IPQRWA5():
        """
        ancien plafqf:Droits simples totaux
        """
        return (ZIPQRWA5() and ZIPQRWA5() * saisie_variables.get('CODNWA', 0))

    @cache_result
    def TERPQRVGM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot.  RVG
        """
        return ((RPQRVGM() and RPQRVGM() * (1 - positif(INDTEFF()))) + (TRPQRVGM() and TRPQRVGM() * positif(INDTEFF())))

    @cache_result
    def ZIPQRVG5():
        """
        Droit sur les bases de quotient RVG 
        """
        return ((positif((somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQRVGM() and IQUOTOT5() * TERPQRVGM() / TETONEQUOM1()))) + ((1 - positif((somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGL1M(), TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT7() - ZIPQRWB5() - ZIPQRWA5())))

    @cache_result
    def IPQRVG5():
        """
        ancien plafqf:Droits simples totaux
        """
        return (ZIPQRVG5() and ZIPQRVG5() * saisie_variables.get('CODNVG', 0))

    @cache_result
    def TERPQ1M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQ1M() and RPQ1M() * (1 - positif(INDTEFF()))) + (TRPQ1M() and TRPQ1M() * positif(INDTEFF())))

    @cache_result
    def ZIPQ15():
        """
        Droit sur les bases de quotient 1 @ x
        """
        return ((positif((somme([TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((somme([TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQ1M() and IQUOTOT5() * TERPQ1M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGL2M(), TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT7() - ZIPQRWB5() - ZIPQRWA5() - ZIPQRVG5())))

    @cache_result
    def IPQ15():
        """
        Droit sur tous les revenus au quotient
        """
        return (ZIPQ15() and ZIPQ15() * 1)

    @cache_result
    def TERPQ2M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQ2M() and RPQ2M() * (1 - positif(INDTEFF()))) + (TRPQ2M() and TRPQ2M() * positif(INDTEFF())))

    @cache_result
    def ZIPQ25():
        """
        Droit sur les bases de quotient 1 @ x
        """
        return ((positif((somme([TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((somme([TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQ2M() and IQUOTOT5() * TERPQ2M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGL3M(), TEGL4M()]) + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT7() - ZIPQRWB5() - ZIPQRWA5() - ZIPQRVG5() - ZIPQ15())))

    @cache_result
    def IPQ25():
        """
        Droit sur les bases de quotient 1 @ x
        """
        return (ZIPQ25() and ZIPQ25() * 2)

    @cache_result
    def TERPQ3M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQ3M() and RPQ3M() * (1 - positif(INDTEFF()))) + (TRPQ3M() and TRPQ3M() * positif(INDTEFF())))

    @cache_result
    def ZIPQ35():
        """
        Droit sur les bases de quotient 1 @ x
        """
        return ((positif((TEGL4M() + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((TEGL4M() + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQ3M() and IQUOTOT5() * TERPQ3M() / TETONEQUOM1()))) + ((1 - positif((TEGL4M() + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGL4M() + TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT7() - ZIPQRWB5() - ZIPQRWA5() - ZIPQRVG5() - somme([ZIPQ15(), ZIPQ25()]))))

    @cache_result
    def IPQ35():
        """
        Droit sur les bases de quotient 1 @ x
        """
        return (ZIPQ35() and ZIPQ35() * 3)

    @cache_result
    def TERPQ4M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQ4M() and RPQ4M() * (1 - positif(INDTEFF()))) + (TRPQ4M() and TRPQ4M() * positif(INDTEFF())))

    @cache_result
    def ZIPQ45():
        """
        Droit sur les bases de quotient 1 @ x
        """
        return ((positif((TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQ4M() and IQUOTOT5() * TERPQ4M() / TETONEQUOM1()))) + ((1 - positif((TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLFTOTM() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT7() - ZIPQRWB5() - ZIPQRWA5() - ZIPQRVG5() - somme([ZIPQ15(), ZIPQ25(), ZIPQ35()]))))

    @cache_result
    def IPQ45():
        """
        Droit sur les bases de quotient 1 @ x
        """
        return (ZIPQ45() and ZIPQ45() * 4)

    @cache_result
    def TERPQFVM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQFVM() and RPQFVM() * (1 - positif(INDTEFF()))) + (TRPQFVM() and TRPQFVM() * positif(INDTEFF())))

    @cache_result
    def ZIPQ5TOT():
        """
        somme des ZIPQi5
        """
        return (somme([ZIPQ15(), ZIPQ25(), ZIPQ35(), ZIPQ45()]) + ZIPQRVG5() + ZIPQRWB5() + ZIPQRWA5())

    @cache_result
    def ZIPQFV5():
        """
        Droit sur les pensions footballeurs VOUS avant x par le quotient
        """
        return ((positif((somme([TEGLFCM(), TEGLF1M(), TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((somme([TEGLFCM(), TEGLF1M(), TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQFVM() and IQUOTOT5() * TERPQFVM() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLFCM(), TEGLF1M(), TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLFCM(), TEGLF1M(), TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT())))

    @cache_result
    def IPQFV5():
        """
        Droit sur les pensions footballeurs VOUS
        From IPQFi5
        """
        return (ZIPQFV5() and ZIPQFV5() * saisie_variables.get('COTFV', 0))

    @cache_result
    def TERPQFCM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQFCM() and RPQFCM() * (1 - positif(INDTEFF()))) + (TRPQFCM() and TRPQFCM() * positif(INDTEFF())))

    @cache_result
    def ZIPQFC5():
        """
        Droit sur les pensions footballeurs CJT  avant x par le quotient
        """
        return ((positif((somme([TEGLF1M(), TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((somme([TEGLF1M(), TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQFCM() and IQUOTOT5() * TERPQFCM() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLFCM(), TEGLF1M(), TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLFCM(), TEGLF1M(), TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQFV5())))

    @cache_result
    def IPQFC5():
        """
        Droit sur les pensions footballeurs CJT
        From IPQFi5
        """
        return (ZIPQFC5() and ZIPQFC5() * saisie_variables.get('COTFC', 0))

    @cache_result
    def TERPQF1M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQF1M() and RPQF1M() * (1 - positif(INDTEFF()))) + (TRPQF1M() and TRPQF1M() * positif(INDTEFF())))

    @cache_result
    def ZIPQF15():
        """
        Droit sur les pensions footballeurs PAC  avant x par le quotient
        """
        return ((positif((somme([TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((somme([TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQF1M() and IQUOTOT5() * TERPQF1M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLF2M(), TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - somme([ZIPQFV5(), ZIPQFC5()]))))

    @cache_result
    def IPQF15():
        """
        Droit sur les pensions footballeurs PAC
        From IPQFi5
        """
        return (ZIPQF15() and ZIPQF15() * saisie_variables.get('COTF1', 0))

    @cache_result
    def TERPQF2M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQF2M() and RPQF2M() * (1 - positif(INDTEFF()))) + (TRPQF2M() and TRPQF2M() * positif(INDTEFF())))

    @cache_result
    def ZIPQF25():
        """
        Droit sur les pensions footballeurs PAC  avant x par le quotient
        """
        return ((positif((somme([TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((somme([TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQF2M() and IQUOTOT5() * TERPQF2M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLF3M(), TEGLF4M()]) + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - somme([ZIPQF15(), ZIPQFV5(), ZIPQFC5()]))))

    @cache_result
    def IPQF25():
        """
        Droit sur les pensions footballeurs PAC
        From IPQFi5
        """
        return (ZIPQF25() and ZIPQF25() * saisie_variables.get('COTF2', 0))

    @cache_result
    def TERPQF3M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQF3M() and RPQF3M() * (1 - positif(INDTEFF()))) + (TRPQF3M() and TRPQF3M() * positif(INDTEFF())))

    @cache_result
    def ZIPQF35():
        """
        Droit sur les pensions footballeurs PAC  avant x par le quotient
        """
        return ((positif((TEGLF4M() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((TEGLF4M() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQF3M() and IQUOTOT5() * TERPQF3M() / TETONEQUOM1()))) + ((1 - positif((TEGLF4M() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLF4M() + TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - somme([ZIPQF15(), ZIPQF25(), ZIPQFV5(), ZIPQFC5()]))))

    @cache_result
    def IPQF35():
        """
        Droit sur les pensions footballeurs PAC
        From IPQFi5
        """
        return (ZIPQF35() and ZIPQF35() * saisie_variables.get('COTF3', 0))

    @cache_result
    def TERPQF4M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQF4M() and RPQF4M() * (1 - positif(INDTEFF()))) + (TRPQF4M() and TRPQF4M() * positif(INDTEFF())))

    @cache_result
    def ZIPQF45():
        """
        Droit sur les pensions footballeurs PAC  avant x par le quotient
        """
        return ((positif((TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQF4M() and IQUOTOT5() * TERPQF4M() / TETONEQUOM1()))) + ((1 - positif((TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLPALIMTOTM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - somme([ZIPQFV5(), ZIPQFC5(), ZIPQF15(), ZIPQF25(), ZIPQF35()]))))

    @cache_result
    def IPQF45():
        """
        Droit sur les pensions footballeurs PAC
        From IPQFi5
        """
        return (ZIPQF45() and ZIPQF45() * saisie_variables.get('COTF4', 0))

    @cache_result
    def TERPQPALIMVM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIMVM() and RPQPALIMVM() * (1 - positif(INDTEFF()))) + (TRPQPALIMVM() and TRPQPALIMVM() * positif(INDTEFF())))

    @cache_result
    def ZIPQF5TOT():
        """
        somme des ZIPQ
        """
        return somme([ZIPQFV5(), ZIPQFC5(), ZIPQF15(), ZIPQF25(), ZIPQF35(), ZIPQF45()])

    @cache_result
    def ZIPQPALIMV5():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPALIMCM(), TEGLPALIM1M(), TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPALIMCM(), TEGLPALIM1M(), TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPALIMVM() and IQUOTOT5() * TERPQPALIMVM() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPALIMCM(), TEGLPALIM1M(), TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPALIMCM(), TEGLPALIM1M(), TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT())))

    @cache_result
    def IPQPALIMV5():
        """
        ancien plafqf : droits quotient
        From IPQPALIMi5
        """
        return (ZIPQPALIMV5() and ZIPQPALIMV5() * saisie_variables.get('PENSALNBV', 0))

    @cache_result
    def TERPQPALIMCM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIMCM() and RPQPALIMCM() * (1 - positif(INDTEFF()))) + (TRPQPALIMCM() and TRPQPALIMCM() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIMC5():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPALIM1M(), TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPALIM1M(), TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPALIMCM() and IQUOTOT5() * TERPQPALIMCM() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPALIM1M(), TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPALIM1M(), TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIMV5())))

    @cache_result
    def IPQPALIMC5():
        """
        ancien plafqf : droits quotient
        From IPQPALIMi5
        """
        return (ZIPQPALIMC5() and ZIPQPALIMC5() * saisie_variables.get('PENSALNBC', 0))

    @cache_result
    def TERPQPALIM1M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIM1M() and RPQPALIM1M() * (1 - positif(INDTEFF()))) + (TRPQPALIM1M() and TRPQPALIM1M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIM15():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPALIM1M() and IQUOTOT5() * TERPQPALIM1M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPALIM2M(), TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - somme([ZIPQPALIMV5(), ZIPQPALIMC5()]))))

    @cache_result
    def IPQPALIM15():
        """
        ancien plafqf : droits quotient
        From IPQPALIMi5
        """
        return (ZIPQPALIM15() and ZIPQPALIM15() * saisie_variables.get('PENSALNBP1', 0))

    @cache_result
    def TERPQPALIM2M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIM2M() and RPQPALIM2M() * (1 - positif(INDTEFF()))) + (TRPQPALIM2M() and TRPQPALIM2M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIM25():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPALIM2M() and IQUOTOT5() * TERPQPALIM2M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPALIM3M(), TEGLPALIM4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - somme([ZIPQPALIM15(), ZIPQPALIMV5(), ZIPQPALIMC5()]))))

    @cache_result
    def IPQPALIM25():
        """
        ancien plafqf : droits quotient
        From IPQPALIMi5
        """
        return (ZIPQPALIM25() and ZIPQPALIM25() * saisie_variables.get('PENSALNBP2', 0))

    @cache_result
    def TERPQPALIM3M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIM3M() and RPQPALIM3M() * (1 - positif(INDTEFF()))) + (TRPQPALIM3M() and TRPQPALIM3M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIM35():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((TEGLPALIM4M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((TEGLPALIM4M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPALIM3M() and IQUOTOT5() * TERPQPALIM3M() / TETONEQUOM1()))) + ((1 - positif((TEGLPALIM4M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLPALIM4M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - somme([ZIPQPALIMV5(), ZIPQPALIMC5(), ZIPQPALIM15(), ZIPQPALIM25()]))))

    @cache_result
    def IPQPALIM35():
        """
        ancien plafqf : droits quotient
        From IPQPALIMi5
        """
        return (ZIPQPALIM35() and ZIPQPALIM35() * saisie_variables.get('PENSALNBP3', 0))

    @cache_result
    def TERPQPALIM4M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPALIM4M() and RPQPALIM4M() * (1 - positif(INDTEFF()))) + (TRPQPALIM4M() and TRPQPALIM4M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIM45():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) and positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPALIM4M() and IQUOTOT5() * TERPQPALIM4M() / TETONEQUOM1()))) + ((1 - positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - somme([ZIPQPALIMV5(), ZIPQPALIMC5(), ZIPQPALIM15(), ZIPQPALIM25(), ZIPQPALIM35()]))))

    @cache_result
    def IPQPALIM45():
        """
        ancien plafqf : droits quotient
        From IPQPALIMi5
        """
        return (ZIPQPALIM45() and ZIPQPALIM45() * saisie_variables.get('PENSALNBP4', 0))

    @cache_result
    def TERPQTSVM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSVM() and RPQTSVM() * (1 - positif(INDTEFF()))) + (TRPQTSVM() and TRPQTSVM() * positif(INDTEFF())))

    @cache_result
    def ZIPQPALIM5TOT():
        """
        somme des ZIPQi5
        """
        return somme([ZIPQPALIMV5(), ZIPQPALIMC5(), ZIPQPALIM15(), ZIPQPALIM25(), ZIPQPALIM35(), ZIPQPALIM45()])

    @cache_result
    def TERPQRCMDCM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMDCM() and RPQRCMDCM() * (1 - positif(INDTEFF()))) + (TRPQRCMDCM() and TRPQRCMDCM() * positif(INDTEFF())))

    @cache_result
    def ZIPQRCMDC5():
        """
        droit sur les rcm  avant x par le quotient
        """
        return ((positif((TEGLRCMFUM() + TEGLRCMCHM() + TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((TEGLRCMFUM() + TEGLRCMCHM() + TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQRCMDCM() and IQUOTOT5() * TERPQRCMDCM() / TETONEQUOM1()))) + ((1 - positif((TEGLRCMFUM() + TEGLRCMCHM() + TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLRCMFUM() + TEGLRCMCHM() + TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRCMTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT())))

    @cache_result
    def TERPQRCMFUM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMFUM() and RPQRCMFUM() * (1 - positif(INDTEFF()))) + (TRPQRCMFUM() and TRPQRCMFUM() * positif(INDTEFF())))

    @cache_result
    def ZIPQRCMFU5():
        """
        droit sur les rcm  avant x par le quotient
        """
        return ((positif((TEGLRCMCHM() + TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((TEGLRCMCHM() + TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQRCMFUM() and IQUOTOT5() * TERPQRCMFUM() / TETONEQUOM1()))) + ((1 - positif((TEGLRCMCHM() + TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLRCMCHM() + TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCMDC5())))

    @cache_result
    def TERPQRCMCHM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMCHM() and RPQRCMCHM() * (1 - positif(INDTEFF()))) + (TRPQRCMCHM() and TRPQRCMCHM() * positif(INDTEFF())))

    @cache_result
    def ZIPQRCMCH5():
        """
        droit sur les rcm  avant x par le quotient
        """
        return ((positif((TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQRCMCHM() and IQUOTOT5() * TERPQRCMCHM() / TETONEQUOM1()))) + ((1 - positif((TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLRCMTSM() + TEGLRCMGOM() + TEGLRCMTRM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCMDC5() - ZIPQRCMFU5())))

    @cache_result
    def TERPQRCMTSM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMTSM() and RPQRCMTSM() * (1 - positif(INDTEFF()))) + (TRPQRCMTSM() and TRPQRCMTSM() * positif(INDTEFF())))

    @cache_result
    def TERPQRCMTRM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMTRM() and RPQRCMTRM() * (1 - positif(INDTEFF()))) + (TRPQRCMTRM() and TRPQRCMTRM() * positif(INDTEFF())))

    @cache_result
    def ZIPQRCMTR5():
        """
        droit sur les rcm  avant x par le quotient
        """
        return ((positif((TEGLRCMGOM() + TEGLRCMTSM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((TEGLRCMGOM() + TEGLRCMTSM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQRCMTRM() and IQUOTOT5() * TERPQRCMTRM() / TETONEQUOM1()))) + ((1 - positif((TEGLRCMGOM() + TEGLRCMTSM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLRCMGOM() + TEGLRCMTSM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCMDC5() - ZIPQRCMFU5() - ZIPQRCMCH5())))

    @cache_result
    def TERPQRCMGOM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRCMGOM() and RPQRCMGOM() * (1 - positif(INDTEFF()))) + (TRPQRCMGOM() and TRPQRCMGOM() * positif(INDTEFF())))

    @cache_result
    def ZIPQRCMGO5():
        """
        droit sur les rcm  avant x par le quotient
        """
        return ((positif((TEGLRCMTSM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((TEGLRCMTSM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQRCMGOM() and IQUOTOT5() * TERPQRCMGOM() / TETONEQUOM1()))) + ((1 - positif((TEGLRCMTSM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLRCMTSM() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCMDC5() - ZIPQRCMFU5() - ZIPQRCMCH5() - ZIPQRCMTR5())))

    @cache_result
    def ZIPQRCMTS5():
        """
        droit sur les rcm  avant x par le quotient
        """
        return ((positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQRCMTSM() and IQUOTOT5() * TERPQRCMTSM() / TETONEQUOM1()))) + ((1 - positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLPRRTOTM() + TEGLPRRZTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCMDC5() - ZIPQRCMFU5() - ZIPQRCMCH5() - ZIPQRCMTR5() - ZIPQRCMGO5())))

    @cache_result
    def ZIPQRCM5TOT():
        """
        droit sur les rcm  avant x par le quotient
        """
        return (ZIPQRCMDC5() + ZIPQRCMFU5() + ZIPQRCMCH5() + ZIPQRCMTS5() + ZIPQRCMGO5() + ZIPQRCMTR5())

    @cache_result
    def TERPQPRRVM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRVM() and RPQPRRVM() * (1 - positif(INDTEFF()))) + (TRPQPRRVM() and TRPQPRRVM() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRV5():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPRRCM(), TEGLPRR1M(), TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPRRCM(), TEGLPRR1M(), TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRRVM() and IQUOTOT5() * TERPQPRRVM() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPRRCM(), TEGLPRR1M(), TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPRRCM(), TEGLPRR1M(), TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT())))

    @cache_result
    def TERPQPRRCM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRCM() and RPQPRRCM() * (1 - positif(INDTEFF()))) + (TRPQPRRCM() and TRPQPRRCM() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRC5():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPRR1M(), TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPRR1M(), TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRRCM() and IQUOTOT5() * TERPQPRRCM() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPRR1M(), TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPRR1M(), TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRRV5())))

    @cache_result
    def TERPQPRR1M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRR1M() and RPQPRR1M() * (1 - positif(INDTEFF()))) + (TRPQPRR1M() and TRPQPRR1M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRR15():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRR1M() and IQUOTOT5() * TERPQPRR1M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPRR2M(), TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRRV5() - ZIPQPRRC5())))

    @cache_result
    def TERPQPRR2M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRR2M() and RPQPRR2M() * (1 - positif(INDTEFF()))) + (TRPQPRR2M() and TRPQPRR2M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRR25():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRR2M() and IQUOTOT5() * TERPQPRR2M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPRR3M(), TEGLPRR4M()]) + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRRV5() - ZIPQPRRC5() - ZIPQPRR15())))

    @cache_result
    def TERPQPRR3M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRR3M() and RPQPRR3M() * (1 - positif(INDTEFF()))) + (TRPQPRR3M() and TRPQPRR3M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRR35():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((TEGLPRR4M() + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((TEGLPRR4M() + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRR3M() and IQUOTOT5() * TERPQPRR3M() / TETONEQUOM1()))) + ((1 - positif((TEGLPRR4M() + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLPRR4M() + somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRRV5() - ZIPQPRRC5() - ZIPQPRR15() - ZIPQPRR25())))

    @cache_result
    def TERPQPRR4M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRR4M() and RPQPRR4M() * (1 - positif(INDTEFF()))) + (TRPQPRR4M() and TRPQPRR4M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRR45():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRR4M() and IQUOTOT5() * TERPQPRR4M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPRRZVM(), TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRRV5() - ZIPQPRRC5() - ZIPQPRR15() - ZIPQPRR25() - ZIPQPRR35())))

    @cache_result
    def ZIPQPRR5TOT():
        """
        somme des ZIPQi5
        """
        return somme([ZIPQPRRV5(), ZIPQPRRC5(), ZIPQPRR15(), ZIPQPRR25(), ZIPQPRR35(), ZIPQPRR45()])

    @cache_result
    def TERPQRF1M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRF1M() and RPQRF1M() * (1 - positif(INDTEFF()))) + (TRPQRF1M() and TRPQRF1M() * positif(INDTEFF())))

    @cache_result
    def TERPQPRRZVM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZVM() and RPQPRRZVM() * (1 - positif(INDTEFF()))) + (TRPQPRRZVM() and TRPQPRRZVM() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZV5():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRRZVM() and IQUOTOT5() * TERPQPRRZVM() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPRRZCM(), TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT())))

    @cache_result
    def TERPQPRRZCM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZCM() and RPQPRRZCM() * (1 - positif(INDTEFF()))) + (TRPQPRRZCM() and TRPQPRRZCM() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZC5():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRRZCM() and IQUOTOT5() * TERPQPRRZCM() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPRRZ1M(), TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZV5())))

    @cache_result
    def TERPQPRRZ1M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZ1M() and RPQPRRZ1M() * (1 - positif(INDTEFF()))) + (TRPQPRRZ1M() and TRPQPRRZ1M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZ15():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRRZ1M() and IQUOTOT5() * TERPQPRRZ1M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPRRZ2M(), TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZV5() - ZIPQPRRZC5())))

    @cache_result
    def TERPQPRRZ2M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZ2M() and RPQPRRZ2M() * (1 - positif(INDTEFF()))) + (TRPQPRRZ2M() and TRPQPRRZ2M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZ25():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((somme([TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((somme([TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRRZ2M() and IQUOTOT5() * TERPQPRRZ2M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((somme([TEGLPRRZ3M(), TEGLPRRZ4M()]) + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZV5() - ZIPQPRRZC5() - ZIPQPRRZ15())))

    @cache_result
    def TERPQPRRZ3M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZ3M() and RPQPRRZ3M() * (1 - positif(INDTEFF()))) + (TRPQPRRZ3M() and TRPQPRRZ3M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZ35():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((TEGLPRRZ4M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((TEGLPRRZ4M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRRZ3M() and IQUOTOT5() * TERPQPRRZ3M() / TETONEQUOM1()))) + ((1 - positif((TEGLPRRZ4M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLPRRZ4M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZV5() - ZIPQPRRZC5() - ZIPQPRRZ15() - ZIPQPRRZ25())))

    @cache_result
    def TERPQPRRZ4M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQPRRZ4M() and RPQPRRZ4M() * (1 - positif(INDTEFF()))) + (TRPQPRRZ4M() and TRPQPRRZ4M() * positif(INDTEFF())))

    @cache_result
    def ZIPQPRRZ45():
        """
        droit sur les pensions avant x par le quotient
        """
        return ((positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) and positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM())) * arr((IQUOTOT5() and TERPQPRRZ4M() and IQUOTOT5() * TERPQPRRZ4M() / TETONEQUOM1()))) + ((1 - positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) and (1 - positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM() + TEGLRFTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZV5() - ZIPQPRRZC5() - ZIPQPRRZ15() - ZIPQPRRZ25() - ZIPQPRRZ35())))

    @cache_result
    def ZIPQPRRZ5TOT():
        """
        somme des ZIPQZi5 
        """
        return somme([ZIPQPRRZV5(), ZIPQPRRZC5(), ZIPQPRRZ15(), ZIPQPRRZ25(), ZIPQPRRZ35(), ZIPQPRRZ45()])

    @cache_result
    def ZIPQRF15():
        """
        droit sur les rev fonc  avant x par le quotient
        """
        return ((positif((TEGLRF2M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM())) and positif((TEGLRF2M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM())) * arr((IQUOTOT5() and TERPQRF1M() and IQUOTOT5() * TERPQRF1M() / TETONEQUOM1()))) + ((1 - positif((TEGLRF2M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM()))) and (1 - positif((TEGLRF2M() + TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZ5TOT())))

    @cache_result
    def TERPQRF2M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRF2M() and RPQRF2M() * (1 - positif(INDTEFF()))) + (TRPQRF2M() and TRPQRF2M() * positif(INDTEFF())))

    @cache_result
    def ZIPQRF25():
        """
        droit sur les rev fonc  avant x par le quotient
        """
        return ((positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM())) and positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM())) * arr((IQUOTOT5() and TERPQRF2M() and IQUOTOT5() * TERPQRF2M() / TETONEQUOM1()))) + ((1 - positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM()))) and (1 - positif((TEGLTSTOTM() + TEGLTSREMPTOTM() + TEGLRVOTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQRF15() - ZIPQPRRZ5TOT())))

    @cache_result
    def ZIPQRF5TOT():
        """
        droit sur les rev fonc  avant x par le quotient
        """
        return somme([ZIPQRF15(), ZIPQRF25()])

    @cache_result
    def TERPQRVOM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRVOM() and RPQRVOM() * (1 - positif(INDTEFF()))) + (TRPQRVOM() and TRPQRVOM() * positif(INDTEFF())))

    @cache_result
    def ZIPQRVO5():
        """
        droit sur les rvo  avant x par le quotient
        """
        return ((positif((TEGLRVO5M() + TEGLRVO6M() + TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM())) and positif((TEGLRVO5M() + TEGLRVO6M() + TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM())) * arr((IQUOTOT5() and TERPQRVOM() and IQUOTOT5() * TERPQRVOM() / TETONEQUOM1()))) + ((1 - positif((TEGLRVO5M() + TEGLRVO6M() + TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM()))) and (1 - positif((TEGLRVO5M() + TEGLRVO6M() + TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQRF5TOT() - ZIPQPRRZ5TOT())))

    @cache_result
    def TERPQRVO5M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRVO5M() and RPQRVO5M() * (1 - positif(INDTEFF()))) + (TRPQRVO5M() and TRPQRVO5M() * positif(INDTEFF())))

    @cache_result
    def ZIPQRVO55():
        """
        droit sur les rvo  avant x par le quotient
        """
        return ((positif((TEGLRVO6M() + TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM())) and positif((TEGLRVO6M() + TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM())) * arr((IQUOTOT5() and TERPQRVO5M() and IQUOTOT5() * TERPQRVO5M() / TETONEQUOM1()))) + ((1 - positif((TEGLRVO6M() + TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM()))) and (1 - positif((TEGLRVO6M() + TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQRF5TOT() - ZIPQRVO5() - ZIPQPRRZ5TOT())))

    @cache_result
    def TERPQRVO6M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRVO6M() and RPQRVO6M() * (1 - positif(INDTEFF()))) + (TRPQRVO6M() and TRPQRVO6M() * positif(INDTEFF())))

    @cache_result
    def ZIPQRVO65():
        """
        droit sur les rvo  avant x par le quotient
        """
        return ((positif((TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM())) and positif((TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM())) * arr((IQUOTOT5() and TERPQRVO6M() and IQUOTOT5() * TERPQRVO6M() / TETONEQUOM1()))) + ((1 - positif((TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM()))) and (1 - positif((TEGLRVO7M() + TEGLTSTOTM() + TEGLTSREMPTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQRF5TOT() - ZIPQRVO5() - ZIPQRVO55() - ZIPQPRRZ5TOT())))

    @cache_result
    def TERPQRVO7M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQRVO7M() and RPQRVO7M() * (1 - positif(INDTEFF()))) + (TRPQRVO7M() and TRPQRVO7M() * positif(INDTEFF())))

    @cache_result
    def ZIPQRVO75():
        """
        droit sur les rvo  avant x par le quotient
        """
        return ((positif((TEGLTSTOTM() + TEGLTSREMPTOTM())) and positif((TEGLTSTOTM() + TEGLTSREMPTOTM())) * arr((IQUOTOT5() and TERPQRVO7M() and IQUOTOT5() * TERPQRVO7M() / TETONEQUOM1()))) + ((1 - positif((TEGLTSTOTM() + TEGLTSREMPTOTM()))) and (1 - positif((TEGLTSTOTM() + TEGLTSREMPTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQRF5TOT() - ZIPQRVO5() - ZIPQRVO55() - ZIPQRVO65() - ZIPQPRRZ5TOT())))

    @cache_result
    def ZIPQRVO5TOT():
        """
        droit sur les rvo  avant x par le quotient
        """
        return (ZIPQRVO5() + ZIPQRVO55() + ZIPQRVO65() + ZIPQRVO75())

    @cache_result
    def ZIPQTSV5():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return ((positif((somme([TEGLTSCM(), TEGLTS1M(), TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM())) and positif((somme([TEGLTSCM(), TEGLTS1M(), TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM())) * arr((IQUOTOT5() and TERPQTSVM() and IQUOTOT5() * TERPQTSVM() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLTSCM(), TEGLTS1M(), TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM()))) and (1 - positif((somme([TEGLTSCM(), TEGLTS1M(), TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQPRRZ5TOT())))

    @cache_result
    def IPQTSV5():
        """
        ancien plafqf : droits quotient
        From IPQTSi5
        """
        return (ZIPQTSV5() and ZIPQTSV5() * saisie_variables.get('CARTSNBAV', 0))

    @cache_result
    def TERPQTSCM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSCM() and RPQTSCM() * (1 - positif(INDTEFF()))) + (TRPQTSCM() and TRPQTSCM() * positif(INDTEFF())))

    @cache_result
    def ZIPQTSC5():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return ((positif((somme([TEGLTS1M(), TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM())) and positif((somme([TEGLTS1M(), TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM())) * arr((IQUOTOT5() and TERPQTSCM() and IQUOTOT5() * TERPQTSCM() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLTS1M(), TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM()))) and (1 - positif((somme([TEGLTS1M(), TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQPRRZ5TOT() - ZIPQTSV5())))

    @cache_result
    def IPQTSC5():
        """
        ancien plafqf : droits quotient
        From IPQTSi5
        """
        return (ZIPQTSC5() and ZIPQTSC5() * saisie_variables.get('CARTSNBAC', 0))

    @cache_result
    def TERPQTS1M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTS1M() and RPQTS1M() * (1 - positif(INDTEFF()))) + (TRPQTS1M() and TRPQTS1M() * positif(INDTEFF())))

    @cache_result
    def ZIPQTS15():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return ((positif((somme([TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM())) and positif((somme([TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM())) * arr((IQUOTOT5() and TERPQTS1M() and IQUOTOT5() * TERPQTS1M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM()))) and (1 - positif((somme([TEGLTS2M(), TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQPRRZ5TOT() - ZIPQTSV5() - ZIPQTSC5())))

    @cache_result
    def IPQTS15():
        """
        ancien plafqf : droits quotient
        From IPQTSi5
        """
        return (ZIPQTS15() and ZIPQTS15() * saisie_variables.get('CARTSNBAP1', 0))

    @cache_result
    def TERPQTS2M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTS2M() and RPQTS2M() * (1 - positif(INDTEFF()))) + (TRPQTS2M() and TRPQTS2M() * positif(INDTEFF())))

    @cache_result
    def ZIPQTS25():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return ((positif((somme([TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM())) and positif((somme([TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM())) * arr((IQUOTOT5() and TERPQTS2M() and IQUOTOT5() * TERPQTS2M() / TETONEQUOM1()))) + ((1 - positif((somme([TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM()))) and (1 - positif((somme([TEGLTS3M(), TEGLTS4M()]) + TEGLTSREMPTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQPRRZ5TOT() - ZIPQTSV5() - ZIPQTSC5() - ZIPQTS15())))

    @cache_result
    def IPQTS25():
        """
        ancien plafqf : droits quotient
        From IPQTSi5
        """
        return (ZIPQTS25() and ZIPQTS25() * saisie_variables.get('CARTSNBAP2', 0))

    @cache_result
    def TERPQTS3M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTS3M() and RPQTS3M() * (1 - positif(INDTEFF()))) + (TRPQTS3M() and TRPQTS3M() * positif(INDTEFF())))

    @cache_result
    def ZIPQTS35():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return ((positif((TEGLTS4M() + TEGLTSREMPTOTM())) and positif((TEGLTS4M() + TEGLTSREMPTOTM())) * arr((IQUOTOT5() and TERPQTS3M() and IQUOTOT5() * TERPQTS3M() / TETONEQUOM1()))) + ((1 - positif((TEGLTS4M() + TEGLTSREMPTOTM()))) and (1 - positif((TEGLTS4M() + TEGLTSREMPTOTM()))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQPRRZ5TOT() - ZIPQTSV5() - ZIPQTSC5() - ZIPQTS15() - ZIPQTS25())))

    @cache_result
    def IPQTS35():
        """
        ancien plafqf : droits quotient
        From IPQTSi5
        """
        return (ZIPQTS35() and ZIPQTS35() * saisie_variables.get('CARTSNBAP3', 0))

    @cache_result
    def TERPQTS4M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTS4M() and RPQTS4M() * (1 - positif(INDTEFF()))) + (TRPQTS4M() and TRPQTS4M() * positif(INDTEFF())))

    @cache_result
    def ZIPQTS45():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return ((positif(TEGLTSREMPTOTM()) and positif(TEGLTSREMPTOTM()) * arr((IQUOTOT5() and TERPQTS4M() and IQUOTOT5() * TERPQTS4M() / TETONEQUOM1()))) + ((1 - positif(TEGLTSREMPTOTM())) and (1 - positif(TEGLTSREMPTOTM())) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQPRRZ5TOT() - ZIPQTSV5() - ZIPQTSC5() - ZIPQTS15() - ZIPQTS25() - ZIPQTS35())))

    @cache_result
    def IPQTS45():
        """
        ancien plafqf : droits quotient
        From IPQTSi5
        """
        return (ZIPQTS45() and ZIPQTS45() * saisie_variables.get('CARTSNBAP4', 0))

    @cache_result
    def TERPQTSREMPVM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSREMPVM() and RPQTSREMPVM() * (1 - positif(INDTEFF()))) + (TRPQTSREMPVM() and TRPQTSREMPVM() * positif(INDTEFF())))

    @cache_result
    def ZIPQTS5TOT():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return somme([ZIPQTSV5(), ZIPQTSC5(), ZIPQTS15(), ZIPQTS25(), ZIPQTS35(), ZIPQTS45()])

    @cache_result
    def ZIPQTSREMPV5():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return ((positif(somme([TEGLTSREMPCM(), TEGLTSREMP1M(), TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()])) and positif(somme([TEGLTSREMPCM(), TEGLTSREMP1M(), TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()])) * arr((IQUOTOT5() and TERPQTSREMPVM() and IQUOTOT5() * TERPQTSREMPVM() / TETONEQUOM1()))) + ((1 - positif(somme([TEGLTSREMPCM(), TEGLTSREMP1M(), TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()]))) and (1 - positif(somme([TEGLTSREMPCM(), TEGLTSREMP1M(), TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()]))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZ5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQTS5TOT())))

    @cache_result
    def IPQTSREMPV5():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPi5
        """
        return (ZIPQTSREMPV5() and ZIPQTSREMPV5() * saisie_variables.get('REMPLANBV', 0))

    @cache_result
    def TERPQTSREMPCM():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSREMPCM() and RPQTSREMPCM() * (1 - positif(INDTEFF()))) + (TRPQTSREMPCM() and TRPQTSREMPCM() * positif(INDTEFF())))

    @cache_result
    def ZIPQTSREMPC5():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return ((positif(somme([TEGLTSREMP1M(), TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()])) and positif(somme([TEGLTSREMP1M(), TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()])) * arr((IQUOTOT5() and TERPQTSREMPCM() and IQUOTOT5() * TERPQTSREMPCM() / TETONEQUOM1()))) + ((1 - positif(somme([TEGLTSREMP1M(), TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()]))) and (1 - positif(somme([TEGLTSREMP1M(), TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()]))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZ5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQTS5TOT() - ZIPQTSREMPV5())))

    @cache_result
    def IPQTSREMPC5():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPi5
        """
        return (ZIPQTSREMPC5() and ZIPQTSREMPC5() * saisie_variables.get('REMPLANBC', 0))

    @cache_result
    def TERPQTSREMP1M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSREMP1M() and RPQTSREMP1M() * (1 - positif(INDTEFF()))) + (TRPQTSREMP1M() and TRPQTSREMP1M() * positif(INDTEFF())))

    @cache_result
    def ZIPQTSREMP15():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return ((positif(somme([TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()])) and positif(somme([TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()])) * arr((IQUOTOT5() and TERPQTSREMP1M() and IQUOTOT5() * TERPQTSREMP1M() / TETONEQUOM1()))) + ((1 - positif(somme([TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()]))) and (1 - positif(somme([TEGLTSREMP2M(), TEGLTSREMP3M(), TEGLTSREMP4M()]))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZ5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQTS5TOT() - ZIPQTSREMPV5() - ZIPQTSREMPC5())))

    @cache_result
    def IPQTSREMP15():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPi5
        """
        return (ZIPQTSREMP15() and ZIPQTSREMP15() * saisie_variables.get('REMPLANBP1', 0))

    @cache_result
    def TERPQTSREMP2M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSREMP2M() and RPQTSREMP2M() * (1 - positif(INDTEFF()))) + (TRPQTSREMP2M() and TRPQTSREMP2M() * positif(INDTEFF())))

    @cache_result
    def ZIPQTSREMP25():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return ((positif(somme([TEGLTSREMP3M(), TEGLTSREMP4M()])) and positif(somme([TEGLTSREMP3M(), TEGLTSREMP4M()])) * arr((IQUOTOT5() and TERPQTSREMP2M() and IQUOTOT5() * TERPQTSREMP2M() / TETONEQUOM1()))) + ((1 - positif(somme([TEGLTSREMP3M(), TEGLTSREMP4M()]))) and (1 - positif(somme([TEGLTSREMP3M(), TEGLTSREMP4M()]))) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZ5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQTS5TOT() - ZIPQTSREMPV5() - ZIPQTSREMPC5() - ZIPQTSREMP15())))

    @cache_result
    def IPQTSREMP25():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPi5
        """
        return (ZIPQTSREMP25() and ZIPQTSREMP25() * saisie_variables.get('REMPLANBP2', 0))

    @cache_result
    def TERPQTSREMP3M():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSREMP3M() and RPQTSREMP3M() * (1 - positif(INDTEFF()))) + (TRPQTSREMP3M() and TRPQTSREMP3M() * positif(INDTEFF())))

    @cache_result
    def ZIPQTSREMP35():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return ((positif(TEGLTSREMP4M()) and positif(TEGLTSREMP4M()) * arr((IQUOTOT5() and TERPQTSREMP3M() and IQUOTOT5() * TERPQTSREMP3M() / TETONEQUOM1()))) + ((1 - positif(TEGLTSREMP4M())) and (1 - positif(TEGLTSREMP4M())) * (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZ5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQTS5TOT() - ZIPQTSREMPV5() - ZIPQTSREMPC5() - ZIPQTSREMP15() - ZIPQTSREMP25())))

    @cache_result
    def IPQTSREMP35():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPi5
        """
        return (ZIPQTSREMP35() and ZIPQTSREMP35() * saisie_variables.get('REMPLANBP3', 0))

    @cache_result
    def ZIPQTSREMP45():
        """
        ancien plafqf : droit sur les TS avant x par le quotient
        """
        return (IQUOTOT5() - ZIPQ5TOT() - ZIPQF5TOT() - ZIPQPALIM5TOT() - ZIPQRCM5TOT() - ZIPQPRR5TOT() - ZIPQPRRZ5TOT() - ZIPQRF5TOT() - ZIPQRVO5TOT() - ZIPQTS5TOT() - ZIPQTSREMPV5() - ZIPQTSREMPC5() - ZIPQTSREMP15() - ZIPQTSREMP25() - ZIPQTSREMP35())

    @cache_result
    def IPQTSREMP45():
        """
        ancien plafqf : droits quotient
        From IPQTSREMPi5
        """
        return (ZIPQTSREMP45() and ZIPQTSREMP45() * saisie_variables.get('REMPLANBP4', 0))

    @cache_result
    def IPQRF15():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQRF15() and ZIPQRF15() * saisie_variables.get('FONCINB', 0))

    @cache_result
    def IPQRF25():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQRF25() and ZIPQRF25() * saisie_variables.get('REAMORNB', 0))

    @cache_result
    def IPQPRRV5():
        """
        ancien plafqf : droits quotient
        From IPQPRRi5
        """
        return (ZIPQPRRV5() and ZIPQPRRV5() * saisie_variables.get('CARPENBAV', 0))

    @cache_result
    def IPQPRRZV5():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQPRRZV5() and ZIPQPRRZV5() * saisie_variables.get('CODNAZ', 0))

    @cache_result
    def IPQPRRC5():
        """
        ancien plafqf : droits quotient
        From IPQPRRi5
        """
        return (ZIPQPRRC5() and ZIPQPRRC5() * saisie_variables.get('CARPENBAC', 0))

    @cache_result
    def IPQPRRZC5():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQPRRZC5() and ZIPQPRRZC5() * saisie_variables.get('CODNBZ', 0))

    @cache_result
    def IPQPRR15():
        """
        ancien plafqf : droits quotient
        From IPQPRRi5
        """
        return (ZIPQPRRZ15() and ZIPQPRRZ15() * saisie_variables.get('CARPENBAP1', 0))

    @cache_result
    def IPQPRRZ15():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQPRRZ15() and ZIPQPRRZ15() * saisie_variables.get('CODNCZ', 0))

    @cache_result
    def IPQPRR25():
        """
        ancien plafqf : droits quotient
        From IPQPRRi5
        """
        return (ZIPQPRRZ25() and ZIPQPRRZ25() * saisie_variables.get('CARPENBAP2', 0))

    @cache_result
    def IPQPRRZ25():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQPRRZ25() and ZIPQPRRZ25() * saisie_variables.get('CODNDZ', 0))

    @cache_result
    def IPQPRR35():
        """
        ancien plafqf : droits quotient
        From IPQPRRi5
        """
        return (ZIPQPRRZ35() and ZIPQPRRZ35() * saisie_variables.get('CARPENBAP3', 0))

    @cache_result
    def IPQPRRZ35():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQPRRZ35() and ZIPQPRRZ35() * saisie_variables.get('CODNEZ', 0))

    @cache_result
    def IPQPRR45():
        """
        ancien plafqf : droits quotient
        From IPQPRRi5
        """
        return (ZIPQPRRZ45() and ZIPQPRRZ45() * saisie_variables.get('CARPENBAP4', 0))

    @cache_result
    def IPQPRRZ45():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQPRRZ45() and ZIPQPRRZ45() * saisie_variables.get('CODNFZ', 0))

    @cache_result
    def IPQRCMDC5():
        """
        droits sur les rcm quotient
        """
        return (ZIPQRCMDC5() and ZIPQRCMDC5() * saisie_variables.get('REVACTNB', 0))

    @cache_result
    def IPQRCMFU5():
        """
        droits sur les rcm quotient
        """
        return (ZIPQRCMFU5() and ZIPQRCMFU5() * saisie_variables.get('REVPEANB', 0))

    @cache_result
    def IPQRCMCH5():
        """
        droits sur les rcm quotient
        """
        return (ZIPQRCMCH5() and ZIPQRCMCH5() * saisie_variables.get('PROVIENB', 0))

    @cache_result
    def IPQRCMTS5():
        """
        droits sur les rcm quotient
        """
        return (ZIPQRCMTS5() and ZIPQRCMTS5() * saisie_variables.get('DISQUONB', 0))

    @cache_result
    def IPQRCMGO5():
        """
        droits sur les rcm quotient
        """
        return (ZIPQRCMGO5() and ZIPQRCMGO5() * saisie_variables.get('RESTUCNB', 0))

    @cache_result
    def IPQRCMTR5():
        """
        droits sur les rcm quotient
        """
        return (ZIPQRCMTR5() and ZIPQRCMTR5() * saisie_variables.get('INTERENB', 0))

    @cache_result
    def IPQRVO5():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQRVO5() and ZIPQRVO5() * saisie_variables.get('RENTAXNB', 0))

    @cache_result
    def IPQRVO55():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQRVO55() and ZIPQRVO55() * saisie_variables.get('RENTAXNB5', 0))

    @cache_result
    def IPQRVO65():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQRVO65() and ZIPQRVO65() * saisie_variables.get('RENTAXNB6', 0))

    @cache_result
    def IPQRVO75():
        """
        ancien plafqf : droits quotient
        """
        return (ZIPQRVO75() and ZIPQRVO75() * saisie_variables.get('RENTAXNB7', 0))

    @cache_result
    def IPQ1005():
        """
        Droit sur tous les revenus au quotient
        """
        return (IPQRWB5() + IPQRWA5() + IPQRVG5() + somme([IPQ15(), IPQ25(), IPQ35(), IPQ45()]) + somme([IPQFV5(), IPQFC5(), IPQF15(), IPQF25(), IPQF35(), IPQF45()]) + somme([IPQPALIMV5(), IPQPALIMC5(), IPQPALIM15(), IPQPALIM25(), IPQPALIM35(), IPQPALIM45()]) + somme([IPQTSV5(), IPQTSC5(), IPQTS15(), IPQTS25(), IPQTS35(), IPQTS45()]) + somme([IPQTSREMPV5(), IPQTSREMPC5(), IPQTSREMP15(), IPQTSREMP25(), IPQTSREMP35(), IPQTSREMP45()]) + IPQRF15() + IPQRF25() + somme([(IPQPRRV5() + IPQPRRZV5()), (IPQPRRC5() + IPQPRRZC5()), (IPQPRR15() + IPQPRRZ15()), (IPQPRR25() + IPQPRRZ25()), (IPQPRR35() + IPQPRRZ35()), (IPQPRR45() + IPQPRRZ45())]) + IPQRCMDC5() + IPQRCMFU5() + IPQRCMCH5() + IPQRCMTS5() + IPQRCMGO5() + IPQRCMTR5() + IPQRVO5() + IPQRVO55() + IPQRVO65() + IPQRVO75())

    @cache_result
    def IPQ5():
        """
        Droits simples totaux
        """
        return (IPQ05() + IPQ1005())

    @cache_result
    def TMOY():
        """
        Taux Moyen
        """
        return (inf((IPQ5() and max(0, (RB05() + TONEQUOM())) and IPQ5() / max(0, (RB05() + TONEQUOM())) * 10000)) and 100 and inf((IPQ5() and max(0, (RB05() + TONEQUOM())) and IPQ5() / max(0, (RB05() + TONEQUOM())) * 10000)) / 100 * V_CR2())

    @cache_result
    def INDTXMOY():
        """
        Indicateur de taux moyen
        """
        return (positif((TX_MIN_MET - TMOY())) and positif((present(saisie_variables.get('RMOND', 0)) + present(saisie_variables.get('DMOND', 0)))) and positif((TX_MIN_MET - TMOY())) * positif((present(saisie_variables.get('RMOND', 0)) + present(saisie_variables.get('DMOND', 0)))) * V_CR2())

    @cache_result
    def IMO():
        """
        Impot au taux moyen
        """
        return (arr(((BMI() and TMOY() and BMI() * TMOY() / 100) + (arr((saisie_variables.get('PRODOM', 0) + saisie_variables.get('PROGUY', 0))) and TX_MIN_DOM and arr((saisie_variables.get('PRODOM', 0) + saisie_variables.get('PROGUY', 0))) * TX_MIN_DOM / 100))) and arr(((BMI() and TMOY() and BMI() * TMOY() / 100) + (arr((saisie_variables.get('PRODOM', 0) + saisie_variables.get('PROGUY', 0))) and TX_MIN_DOM and arr((saisie_variables.get('PRODOM', 0) + saisie_variables.get('PROGUY', 0))) * TX_MIN_DOM / 100))) * V_CR2())

    @cache_result
    def IDOM11():
        """
        Droits simples definitifs
        From IDOM1z
        """
        return (((max((((ID11() - ADO1()) and (ID11() - ADO1()) * (1 - positif(INDCODDAJ()))) + (ITOTDOM1() and ITOTDOM1() * positif(INDCODDAJ()))), IMI()) and max((((ID11() - ADO1()) and (ID11() - ADO1()) * (1 - positif(INDCODDAJ()))) + (ITOTDOM1() and ITOTDOM1() * positif(INDCODDAJ()))), IMI()) * (1 - INDTXMOY())) + (IMO() and IMO() * INDTXMOY())) and ((max((((ID11() - ADO1()) and (ID11() - ADO1()) * (1 - positif(INDCODDAJ()))) + (ITOTDOM1() and ITOTDOM1() * positif(INDCODDAJ()))), IMI()) and max((((ID11() - ADO1()) and (ID11() - ADO1()) * (1 - positif(INDCODDAJ()))) + (ITOTDOM1() and ITOTDOM1() * positif(INDCODDAJ()))), IMI()) * (1 - INDTXMOY())) + (IMO() and IMO() * INDTXMOY())) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def DEC11():
        """
        Decote totale
        From DEC1z
        """
        return (((min(max(arr(((SEUIL_DECOTE1 and SEUIL_DECOTE1 * (1 - BOOL_0AM())) + (SEUIL_DECOTE2 and SEUIL_DECOTE2 * BOOL_0AM()) - IDOM11())), 0), IDOM11()) and min(max(arr(((SEUIL_DECOTE1 and SEUIL_DECOTE1 * (1 - BOOL_0AM())) + (SEUIL_DECOTE2 and SEUIL_DECOTE2 * BOOL_0AM()) - IDOM11())), 0), IDOM11()) * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (min(max(arr(((SEUIL_DECOTEA and SEUIL_DECOTEA / 2) - (IDOM11() and IDOM11() / 2))), 0), IDOM11()) and min(max(arr(((SEUIL_DECOTEA and SEUIL_DECOTEA / 2) - (IDOM11() and IDOM11() / 2))), 0), IDOM11()) * saisie_variables.get('V_ANC_BAR', 0))) and ((min(max(arr(((SEUIL_DECOTE1 and SEUIL_DECOTE1 * (1 - BOOL_0AM())) + (SEUIL_DECOTE2 and SEUIL_DECOTE2 * BOOL_0AM()) - IDOM11())), 0), IDOM11()) and min(max(arr(((SEUIL_DECOTE1 and SEUIL_DECOTE1 * (1 - BOOL_0AM())) + (SEUIL_DECOTE2 and SEUIL_DECOTE2 * BOOL_0AM()) - IDOM11())), 0), IDOM11()) * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (min(max(arr(((SEUIL_DECOTEA and SEUIL_DECOTEA / 2) - (IDOM11() and IDOM11() / 2))), 0), IDOM11()) and min(max(arr(((SEUIL_DECOTEA and SEUIL_DECOTEA / 2) - (IDOM11() and IDOM11() / 2))), 0), IDOM11()) * saisie_variables.get('V_ANC_BAR', 0))) * (1 - V_CNR()))

    @cache_result
    def DCOTFOR():
        """
        Cotisations assurance pour la foret - declare
        """
        return saisie_variables.get('COTFORET', 0)

    @cache_result
    def ACOTFOR_R():
        """
        pour calculer les reports avec ou sans 1731bis Cotis ass foret- retenu
        """
        return (min(DCOTFOR(), (PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM()))) and min(DCOTFOR(), (PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM()))) * (1 - V_CNR()))

    @cache_result
    def RCOTFOR_1():
        """
        Cotisations assurance pour la foret - reduction
        """
        return max(min(arr((ACOTFOR_R() and TX76 and ACOTFOR_R() * TX76 / 100)), (IDOM11() - DEC11())), 0)

    @cache_result
    def RCOTFOR():
        """
        Cotisations assurance pour la foret - reduction
        """
        return max(0, ((RCOTFOR_1() and RCOTFOR_1() * (1 - base_variables['ART1731BIS'])) + (min(RCOTFOR_1(), (max((base_variables['RCOTFOR_P'] + base_variables['RCOTFORP2']), (base_variables['RCOTFOR1731'] + 0)) and max((base_variables['RCOTFOR_P'] + base_variables['RCOTFORP2']), (base_variables['RCOTFOR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCOTFOR_1(), (max((base_variables['RCOTFOR_P'] + base_variables['RCOTFORP2']), (base_variables['RCOTFOR1731'] + 0)) and max((base_variables['RCOTFOR_P'] + base_variables['RCOTFORP2']), (base_variables['RCOTFOR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def BSURV():
        """
        Base reduction rente survie
        """
        return min(saisie_variables.get('RDRESU', 0), (PLAF_RSURV + (PLAF_COMPSURV and PLAF_COMPSURV * (EAC() + saisie_variables.get('V_0DN', 0))) + (PLAF_COMPSURVQAR and PLAF_COMPSURVQAR * (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)))))

    @cache_result
    def RRS():
        """
        Reduction rente survie
        """
        return (arr((BSURV() and TX_REDSURV and BSURV() * TX_REDSURV / 100)) and arr((BSURV() and TX_REDSURV and BSURV() * TX_REDSURV / 100)) * (1 - V_CNR()))

    @cache_result
    def BAA():
        """
        Base reduction aide alimentaire particulier
        """
        return min((saisie_variables.get('RDREP', 0) + saisie_variables.get('DONETRAN', 0)), PLAF_REDREPAS)

    @cache_result
    def RAA():
        """
        Reduction aide alimentaire particulier
        """
        return (arr((TX_REDREPAS and 100 and TX_REDREPAS / 100 * BAA())) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and arr((TX_REDREPAS and 100 and TX_REDREPAS / 100 * BAA())) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RREPA_1():
        """
        reduction non plaf pour 1731bis
        """
        return max(min(RAA(), (IDOM11() - DEC11() - RCOTFOR_1())), 0)

    @cache_result
    def BADPLAF():
        """
        Base reduction aide a domicile plafond
        """
        return (((min(((LIM_AIDOMI and LIM_AIDOMI * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE and LIM_PREMAIDE * positif(saisie_variables.get('PREMAIDE', 0))) + (MAJSALDOM and MAJSALDOM * (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0) - 65)) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) * BOOL_0AM()) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + ((saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) and (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) / 2)))), ((LIM_AIDOMI3 and LIM_AIDOMI3 * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE2 and LIM_PREMAIDE2 * positif(saisie_variables.get('PREMAIDE', 0))))) and min(((LIM_AIDOMI and LIM_AIDOMI * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE and LIM_PREMAIDE * positif(saisie_variables.get('PREMAIDE', 0))) + (MAJSALDOM and MAJSALDOM * (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0) - 65)) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) * BOOL_0AM()) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + ((saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) and (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) / 2)))), ((LIM_AIDOMI3 and LIM_AIDOMI3 * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE2 and LIM_PREMAIDE2 * positif(saisie_variables.get('PREMAIDE', 0))))) * (1 - positif((saisie_variables.get('INAIDE', 0) + 0)))) + (LIM_AIDOMI2 and LIM_AIDOMI2 * positif((saisie_variables.get('INAIDE', 0) + 0)))) and ((min(((LIM_AIDOMI and LIM_AIDOMI * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE and LIM_PREMAIDE * positif(saisie_variables.get('PREMAIDE', 0))) + (MAJSALDOM and MAJSALDOM * (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0) - 65)) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) * BOOL_0AM()) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + ((saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) and (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) / 2)))), ((LIM_AIDOMI3 and LIM_AIDOMI3 * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE2 and LIM_PREMAIDE2 * positif(saisie_variables.get('PREMAIDE', 0))))) and min(((LIM_AIDOMI and LIM_AIDOMI * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE and LIM_PREMAIDE * positif(saisie_variables.get('PREMAIDE', 0))) + (MAJSALDOM and MAJSALDOM * (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0) - 65)) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) * BOOL_0AM()) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + ((saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) and (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) / 2)))), ((LIM_AIDOMI3 and LIM_AIDOMI3 * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE2 and LIM_PREMAIDE2 * positif(saisie_variables.get('PREMAIDE', 0))))) * (1 - positif((saisie_variables.get('INAIDE', 0) + 0)))) + (LIM_AIDOMI2 and LIM_AIDOMI2 * positif((saisie_variables.get('INAIDE', 0) + 0)))) * positif(saisie_variables.get('RVAIDE', 0)))

    @cache_result
    def BADCRE():
        """
        Base credit aide a domicile
        """
        return min(saisie_variables.get('CREAIDE', 0), ((min(((LIM_AIDOMI and LIM_AIDOMI * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE and LIM_PREMAIDE * positif(saisie_variables.get('PREMAIDE', 0))) + (MAJSALDOM and MAJSALDOM * (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0) - 65)) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) * BOOL_0AM()) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + ((saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) and (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) / 2)))), ((LIM_AIDOMI3 and LIM_AIDOMI3 * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE2 and LIM_PREMAIDE2 * positif(saisie_variables.get('PREMAIDE', 0))))) and min(((LIM_AIDOMI and LIM_AIDOMI * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE and LIM_PREMAIDE * positif(saisie_variables.get('PREMAIDE', 0))) + (MAJSALDOM and MAJSALDOM * (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0) - 65)) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) * BOOL_0AM()) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + ((saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) and (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) / 2)))), ((LIM_AIDOMI3 and LIM_AIDOMI3 * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE2 and LIM_PREMAIDE2 * positif(saisie_variables.get('PREMAIDE', 0))))) * (1 - positif((saisie_variables.get('INAIDE', 0) + 0)))) + (LIM_AIDOMI2 and LIM_AIDOMI2 * positif((saisie_variables.get('INAIDE', 0) + 0)))))

    @cache_result
    def BAD1():
        """
        Base reduction aide a domicile (7DF)
        """
        return min(saisie_variables.get('RVAIDE', 0), max(0, (BADPLAF() - BADCRE())))

    @cache_result
    def BADPLAF2():
        """
        Base reduction aide a domicile plafond (7DD)
        """
        return (((min(((LIM_AIDOMI and LIM_AIDOMI * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE and LIM_PREMAIDE * positif(saisie_variables.get('PREMAIDE', 0))) + (MAJSALDOM and MAJSALDOM * (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0) - 65)) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) * BOOL_0AM()) + saisie_variables.get('ASCAPA', 0) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + ((saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) and (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) / 2)))), ((LIM_AIDOMI3 and LIM_AIDOMI3 * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE2 and LIM_PREMAIDE2 * positif(saisie_variables.get('PREMAIDE', 0))))) and min(((LIM_AIDOMI and LIM_AIDOMI * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE and LIM_PREMAIDE * positif(saisie_variables.get('PREMAIDE', 0))) + (MAJSALDOM and MAJSALDOM * (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0) - 65)) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) * BOOL_0AM()) + saisie_variables.get('ASCAPA', 0) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + ((saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) and (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) / 2)))), ((LIM_AIDOMI3 and LIM_AIDOMI3 * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE2 and LIM_PREMAIDE2 * positif(saisie_variables.get('PREMAIDE', 0))))) * (1 - positif((saisie_variables.get('INAIDE', 0) + 0)))) + (LIM_AIDOMI2 and LIM_AIDOMI2 * positif((saisie_variables.get('INAIDE', 0) + 0)))) and ((min(((LIM_AIDOMI and LIM_AIDOMI * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE and LIM_PREMAIDE * positif(saisie_variables.get('PREMAIDE', 0))) + (MAJSALDOM and MAJSALDOM * (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0) - 65)) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) * BOOL_0AM()) + saisie_variables.get('ASCAPA', 0) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + ((saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) and (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) / 2)))), ((LIM_AIDOMI3 and LIM_AIDOMI3 * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE2 and LIM_PREMAIDE2 * positif(saisie_variables.get('PREMAIDE', 0))))) and min(((LIM_AIDOMI and LIM_AIDOMI * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE and LIM_PREMAIDE * positif(saisie_variables.get('PREMAIDE', 0))) + (MAJSALDOM and MAJSALDOM * (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DA', 0) - 65)) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - saisie_variables.get('V_0DB', 0) - 65)) * BOOL_0AM()) + saisie_variables.get('ASCAPA', 0) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + ((saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) and (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0)) / 2)))), ((LIM_AIDOMI3 and LIM_AIDOMI3 * (1 - positif(saisie_variables.get('PREMAIDE', 0)))) + (LIM_PREMAIDE2 and LIM_PREMAIDE2 * positif(saisie_variables.get('PREMAIDE', 0))))) * (1 - positif((saisie_variables.get('INAIDE', 0) + 0)))) + (LIM_AIDOMI2 and LIM_AIDOMI2 * positif((saisie_variables.get('INAIDE', 0) + 0)))) * positif(saisie_variables.get('RVAIDAS', 0)))

    @cache_result
    def BAD2():
        """
        Base reduction aide a domicile (7DD)
        """
        return min(saisie_variables.get('RVAIDAS', 0), max(0, (BADPLAF2() - BADCRE() - BAD1())))

    @cache_result
    def BAD():
        """
        Base reduction aide a domicile
        """
        return (BAD1() + BAD2())

    @cache_result
    def RAD():
        """
        Reduction aide @ domicile
        """
        return (arr((BAD() and TX_AIDOMI and BAD() * TX_AIDOMI / 100)) and arr((BAD() and TX_AIDOMI and BAD() * TX_AIDOMI / 100)) * (1 - V_CNR()))

    @cache_result
    def RAIDE_1():
        """
        reduction non plaf pour 1731bis
        """
        return max(min(RAD(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1())), 0)

    @cache_result
    def BDIFAGRI():
        """
        Base reduction differe paiement agriculteurs
        """
        return (min(saisie_variables.get('INTDIFAGRI', 0), (LIM_DIFAGRI and LIM_DIFAGRI * (1 + BOOL_0AM()))) and min(saisie_variables.get('INTDIFAGRI', 0), (LIM_DIFAGRI and LIM_DIFAGRI * (1 + BOOL_0AM()))) * (1 - V_CNR()))

    @cache_result
    def RAGRI():
        """
        Reduction interets differe de paiement accorde aux agriculteurs
        """
        return arr((BDIFAGRI() and TX_DIFAGRI and BDIFAGRI() * TX_DIFAGRI / 100))

    @cache_result
    def RDIFAGRI_1():
        """
        reduction non plaf pour 1731bis
        """
        return max(min(RAGRI(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RAIDE_1())), 0)

    @cache_result
    def DFORET():
        """
        Cotisation pour defense des forets
        """
        return saisie_variables.get('FORET', 0)

    @cache_result
    def AFORET_1():
        """
        pour simplifier prog pr 1731bis -AFORET - retenu
        """
        return (max(min(DFORET(), LIM_FORET), 0) and max(min(DFORET(), LIM_FORET), 0) * (1 - V_CNR()))

    @cache_result
    def RAFORET():
        """
        Reduction cotisation defense des foret contre incendie
        """
        return arr((AFORET_1() and TX_FORET and AFORET_1() * TX_FORET / 100))

    @cache_result
    def RFORET_1():
        """
        Pour alleger formule : Reduction cotisation pour defense des forets
        """
        return max(min(RAFORET(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RAIDE_1() - RDIFAGRI_1())), 0)

    @cache_result
    def DFIPDOM():
        """
        Cotisation FIP DOM COM declare
        """
        return saisie_variables.get('FIPDOMCOM', 0)

    @cache_result
    def AFIPDOM_1():
        """
        pour simplifier prog pr 1731bis -AFIPDOM - retenu
        """
        return (max(min(DFIPDOM(), (LIMFIPDOM and LIMFIPDOM * (1 + BOOL_0AM()))), 0) and max(min(DFIPDOM(), (LIMFIPDOM and LIMFIPDOM * (1 + BOOL_0AM()))), 0) * (1 - V_CNR()))

    @cache_result
    def RFIPDOMCOM():
        """
        Reduction FIP DOM COM
        """
        return arr((AFIPDOM_1() and TXFIPDOM and AFIPDOM_1() * TXFIPDOM / 100))

    @cache_result
    def RFIPDOM_1():
        """
        reduction non plaf pour 1731bis
        """
        return max(min(RFIPDOMCOM(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RAIDE_1() - RDIFAGRI_1() - RFORET_1())), 0)

    @cache_result
    def DFIPC():
        """
        Cotisation FIP Corse declare
        """
        return saisie_variables.get('FIPCORSE', 0)

    @cache_result
    def AFIPC_1():
        """
        pour simplifier prog pr 1731bis -AFIPC - retenu
        """
        return (max(min(DFIPC(), (LIM_FIPCORSE and LIM_FIPCORSE * (1 + BOOL_0AM()))), 0) and max(min(DFIPC(), (LIM_FIPCORSE and LIM_FIPCORSE * (1 + BOOL_0AM()))), 0) * (1 - V_CNR()))

    @cache_result
    def RFIPCORSE():
        """
        Reduction FIP Corse
        """
        return (arr((AFIPC_1() and TX_FIPCORSE and AFIPC_1() * TX_FIPCORSE / 100)) and arr((AFIPC_1() and TX_FIPCORSE and AFIPC_1() * TX_FIPCORSE / 100)) * (1 - V_CNR()))

    @cache_result
    def RFIPC_1():
        """
        Pour alleger programmation - Reduction FIP Corse
        """
        return max(min(RFIPCORSE(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RAIDE_1() - RDIFAGRI_1() - RFORET_1() - RFIPDOM_1())), 0)

    @cache_result
    def SDC1():
        """
        solde charges hors DCI non imputes sur RG
        """
        return ((max(0, (DDCSG() + DPA() + DFA() + DEDIV() - APERPV() - APERPC() - APERPP() - max(0, RBG()))) and max(0, (DDCSG() + DPA() + DFA() + DEDIV() - APERPV() - APERPC() - APERPP() - max(0, RBG()))) * (1 - V_CNR())) + (max(0, (saisie_variables.get('V_8ZT', 0) - max(0, RBG()))) and max(0, (saisie_variables.get('V_8ZT', 0) - max(0, RBG()))) * V_CR2()))

    @cache_result
    def SOFIRNG():
        """
        SIMULIR rng correspondant aux sofica et sofipeche
        """
        return (RBL() + TOTALQUO() - SDD() - SDC1())

    @cache_result
    def RRCN():
        """
        Souscriptions capital SOFICA
        """
        return (arr(((min(saisie_variables.get('CINE1', 0), min((max(SOFIRNG(), RNG()) and TX_CINE3 and max(SOFIRNG(), RNG()) * TX_CINE3 / 100), PLAF_CINE)) and TX_CINE1 and min(saisie_variables.get('CINE1', 0), min((max(SOFIRNG(), RNG()) and TX_CINE3 and max(SOFIRNG(), RNG()) * TX_CINE3 / 100), PLAF_CINE)) * TX_CINE1 / 100) + (min(saisie_variables.get('CINE2', 0), max((min((max(SOFIRNG(), RNG()) and TX_CINE3 and max(SOFIRNG(), RNG()) * TX_CINE3 / 100), PLAF_CINE) - saisie_variables.get('CINE1', 0)), 0)) and TX_CINE2 and min(saisie_variables.get('CINE2', 0), max((min((max(SOFIRNG(), RNG()) and TX_CINE3 and max(SOFIRNG(), RNG()) * TX_CINE3 / 100), PLAF_CINE) - saisie_variables.get('CINE1', 0)), 0)) * TX_CINE2 / 100))) and arr(((min(saisie_variables.get('CINE1', 0), min((max(SOFIRNG(), RNG()) and TX_CINE3 and max(SOFIRNG(), RNG()) * TX_CINE3 / 100), PLAF_CINE)) and TX_CINE1 and min(saisie_variables.get('CINE1', 0), min((max(SOFIRNG(), RNG()) and TX_CINE3 and max(SOFIRNG(), RNG()) * TX_CINE3 / 100), PLAF_CINE)) * TX_CINE1 / 100) + (min(saisie_variables.get('CINE2', 0), max((min((max(SOFIRNG(), RNG()) and TX_CINE3 and max(SOFIRNG(), RNG()) * TX_CINE3 / 100), PLAF_CINE) - saisie_variables.get('CINE1', 0)), 0)) and TX_CINE2 and min(saisie_variables.get('CINE2', 0), max((min((max(SOFIRNG(), RNG()) and TX_CINE3 and max(SOFIRNG(), RNG()) * TX_CINE3 / 100), PLAF_CINE) - saisie_variables.get('CINE1', 0)), 0)) * TX_CINE2 / 100))) * (1 - V_CNR()))

    @cache_result
    def RCINE_1():
        """
        pour simplifier programmation - Cinema audiovisuel
        """
        return max(min(RRCN(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RAIDE_1() - RDIFAGRI_1() - RFORET_1() - RFIPDOM_1() - RFIPC_1())), 0)

    @cache_result
    def RESTIMOD():
        """
        Travaux de restauration immobiliere - retenu
        """
        return min(saisie_variables.get('RIMOSAUVANT', 0), LIM_RESTIMO)

    @cache_result
    def RESTIMOB():
        """
        Travaux de restauration immobiliere - retenu
        """
        return min(saisie_variables.get('RESTIMOSAUV', 0), (LIM_RESTIMO - RESTIMOD()))

    @cache_result
    def RESTIMOC():
        """
        Travaux de restauration immobiliere - retenu
        """
        return min(saisie_variables.get('RIMOPPAUANT', 0), (LIM_RESTIMO - RESTIMOD() - RESTIMOB()))

    @cache_result
    def RESTIMOF():
        """
        Travaux de restauration immobiliere - retenu (7RF)
        """
        return min(saisie_variables.get('RIMOSAUVRF', 0), (LIM_RESTIMO - RESTIMOD() - RESTIMOB() - RESTIMOC()))

    @cache_result
    def RESTIMOY():
        """
        Travaux de restauration immobiliere - retenu (7SY)
        """
        return min(saisie_variables.get('COD7SY', 0), (LIM_RESTIMO - RESTIMOD() - RESTIMOB() - RESTIMOC() - RESTIMOF()))

    @cache_result
    def RESTIMOA():
        """
        Travaux de restauration immobiliere - retenu
        """
        return min(saisie_variables.get('RESTIMOPPAU', 0), (LIM_RESTIMO - RESTIMOD() - RESTIMOB() - RESTIMOC() - RESTIMOF() - RESTIMOY()))

    @cache_result
    def RESTIMOE():
        """
        Travaux de restauration immobiliere - retenu (7RE)
        """
        return min(saisie_variables.get('RIMOPPAURE', 0), (LIM_RESTIMO - RESTIMOD() - RESTIMOB() - RESTIMOC() - RESTIMOF() - RESTIMOY() - RESTIMOA()))

    @cache_result
    def RESTIMOX():
        """
        Travaux de restauration immobiliere - retenu (7SX)
        """
        return min(saisie_variables.get('COD7SX', 0), (LIM_RESTIMO - RESTIMOD() - RESTIMOB() - RESTIMOC() - RESTIMOF() - RESTIMOY() - RESTIMOA() - RESTIMOE()))

    @cache_result
    def RETRESTIMO():
        """
        Travaux de restauration immobiliere - reduction calcule
        """
        return (arr(((RESTIMOD() and TX40 and RESTIMOD() * TX40 / 100) + (RESTIMOB() and TX36 and RESTIMOB() * TX36 / 100) + (RESTIMOC() and TX30 and RESTIMOC() * TX30 / 100) + (RESTIMOA() and TX_RESTIMO1 and RESTIMOA() * TX_RESTIMO1 / 100) + (RESTIMOE() and TX22 and RESTIMOE() * TX22 / 100) + (RESTIMOF() and TX30 and RESTIMOF() * TX30 / 100) + (RESTIMOY() and TX30 and RESTIMOY() * TX30 / 100) + (RESTIMOX() and TX22 and RESTIMOX() * TX22 / 100))) and arr(((RESTIMOD() and TX40 and RESTIMOD() * TX40 / 100) + (RESTIMOB() and TX36 and RESTIMOB() * TX36 / 100) + (RESTIMOC() and TX30 and RESTIMOC() * TX30 / 100) + (RESTIMOA() and TX_RESTIMO1 and RESTIMOA() * TX_RESTIMO1 / 100) + (RESTIMOE() and TX22 and RESTIMOE() * TX22 / 100) + (RESTIMOF() and TX30 and RESTIMOF() * TX30 / 100) + (RESTIMOY() and TX30 and RESTIMOY() * TX30 / 100) + (RESTIMOX() and TX22 and RESTIMOX() * TX22 / 100))) * (1 - V_CNR()))

    @cache_result
    def RRESTIMO_1():
        """
        pour alleger prog - Travaux de restauration immobiliere - reduction
        """
        return max(min(RETRESTIMO(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RFIPDOM_1() - RAIDE_1() - RDIFAGRI_1() - RFORET_1() - RFIPC_1() - RCINE_1())), 0)

    @cache_result
    def BSOCREP():
        """
        Base reduction emprunt reprise societe
        """
        return min(saisie_variables.get('RSOCREPRISE', 0), (LIM_SOCREPR and LIM_SOCREPR * (1 + BOOL_0AM())))

    @cache_result
    def RSOCREP():
        """
        Reduction emprunt reprise societe
        """
        return (arr((TX_SOCREPR and 100 and TX_SOCREPR / 100 * BSOCREP())) and arr((TX_SOCREPR and 100 and TX_SOCREPR / 100 * BSOCREP())) * (1 - V_CNR()))

    @cache_result
    def RSOCREPR_1():
        """
        pour simplifier programmation - Reduction emprunt reprise societe
        """
        return max(min(RSOCREP(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RAIDE_1() - RDIFAGRI_1() - RFORET_1() - RFIPDOM_1() - RFIPC_1() - RCINE_1() - RRESTIMO_1())), 0)

    @cache_result
    def BPRESCOMP():
        """
        base prestations  compensatoires
        """
        return ((saisie_variables.get('RDPRESREPORT', 0) + ((1 - positif((saisie_variables.get('RDPRESREPORT', 0) + 0))) and (1 - positif((saisie_variables.get('RDPRESREPORT', 0) + 0))) * arr((((1 - present(saisie_variables.get('SUBSTITRENTE', 0))) and (1 - present(saisie_variables.get('SUBSTITRENTE', 0))) * arr(((null((saisie_variables.get('PRESCOMP2000', 0) - saisie_variables.get('PRESCOMPJUGE', 0))) and null((saisie_variables.get('PRESCOMP2000', 0) - saisie_variables.get('PRESCOMPJUGE', 0))) * min(PLAFPRESCOMP, saisie_variables.get('PRESCOMP2000', 0))) + (positif((saisie_variables.get('PRESCOMPJUGE', 0) - saisie_variables.get('PRESCOMP2000', 0))) and positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) and positif((saisie_variables.get('PRESCOMPJUGE', 0) - saisie_variables.get('PRESCOMP2000', 0))) * positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) * saisie_variables.get('PRESCOMP2000', 0)) + (positif((saisie_variables.get('PRESCOMPJUGE', 0) - saisie_variables.get('PRESCOMP2000', 0))) and (1 - positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0)))) and PLAFPRESCOMP and saisie_variables.get('PRESCOMP2000', 0) and positif((saisie_variables.get('PRESCOMPJUGE', 0) - saisie_variables.get('PRESCOMP2000', 0))) * (1 - positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0)))) * PLAFPRESCOMP * saisie_variables.get('PRESCOMP2000', 0) / saisie_variables.get('PRESCOMPJUGE', 0))))) + (present(saisie_variables.get('SUBSTITRENTE', 0)) and present(saisie_variables.get('SUBSTITRENTE', 0)) * arr(((null((saisie_variables.get('PRESCOMP2000', 0) - saisie_variables.get('SUBSTITRENTE', 0))) and null((saisie_variables.get('PRESCOMP2000', 0) - saisie_variables.get('SUBSTITRENTE', 0))) * ((positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) and positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) * saisie_variables.get('SUBSTITRENTE', 0)) + (positif((saisie_variables.get('PRESCOMPJUGE', 0) - PLAFPRESCOMP)) and positif((saisie_variables.get('PRESCOMPJUGE', 0) - PLAFPRESCOMP)) * arr((PLAFPRESCOMP and saisie_variables.get('SUBSTITRENTE', 0) and PLAFPRESCOMP * saisie_variables.get('SUBSTITRENTE', 0) / saisie_variables.get('PRESCOMPJUGE', 0)))))) + (positif((saisie_variables.get('SUBSTITRENTE', 0) - saisie_variables.get('PRESCOMP2000', 0))) and positif((saisie_variables.get('SUBSTITRENTE', 0) - saisie_variables.get('PRESCOMP2000', 0))) * ((positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) and positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) * saisie_variables.get('PRESCOMP2000', 0)) + (positif((saisie_variables.get('PRESCOMPJUGE', 0) - PLAFPRESCOMP)) and positif((saisie_variables.get('PRESCOMPJUGE', 0) - PLAFPRESCOMP)) * arr((PLAFPRESCOMP and (saisie_variables.get('SUBSTITRENTE', 0) and saisie_variables.get('SUBSTITRENTE', 0) / saisie_variables.get('PRESCOMPJUGE', 0)) and PLAFPRESCOMP * (saisie_variables.get('SUBSTITRENTE', 0) and saisie_variables.get('SUBSTITRENTE', 0) / saisie_variables.get('PRESCOMPJUGE', 0)) * (saisie_variables.get('PRESCOMP2000', 0) and saisie_variables.get('PRESCOMP2000', 0) / saisie_variables.get('SUBSTITRENTE', 0)))))))))))))) and (saisie_variables.get('RDPRESREPORT', 0) + ((1 - positif((saisie_variables.get('RDPRESREPORT', 0) + 0))) and (1 - positif((saisie_variables.get('RDPRESREPORT', 0) + 0))) * arr((((1 - present(saisie_variables.get('SUBSTITRENTE', 0))) and (1 - present(saisie_variables.get('SUBSTITRENTE', 0))) * arr(((null((saisie_variables.get('PRESCOMP2000', 0) - saisie_variables.get('PRESCOMPJUGE', 0))) and null((saisie_variables.get('PRESCOMP2000', 0) - saisie_variables.get('PRESCOMPJUGE', 0))) * min(PLAFPRESCOMP, saisie_variables.get('PRESCOMP2000', 0))) + (positif((saisie_variables.get('PRESCOMPJUGE', 0) - saisie_variables.get('PRESCOMP2000', 0))) and positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) and positif((saisie_variables.get('PRESCOMPJUGE', 0) - saisie_variables.get('PRESCOMP2000', 0))) * positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) * saisie_variables.get('PRESCOMP2000', 0)) + (positif((saisie_variables.get('PRESCOMPJUGE', 0) - saisie_variables.get('PRESCOMP2000', 0))) and (1 - positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0)))) and PLAFPRESCOMP and saisie_variables.get('PRESCOMP2000', 0) and positif((saisie_variables.get('PRESCOMPJUGE', 0) - saisie_variables.get('PRESCOMP2000', 0))) * (1 - positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0)))) * PLAFPRESCOMP * saisie_variables.get('PRESCOMP2000', 0) / saisie_variables.get('PRESCOMPJUGE', 0))))) + (present(saisie_variables.get('SUBSTITRENTE', 0)) and present(saisie_variables.get('SUBSTITRENTE', 0)) * arr(((null((saisie_variables.get('PRESCOMP2000', 0) - saisie_variables.get('SUBSTITRENTE', 0))) and null((saisie_variables.get('PRESCOMP2000', 0) - saisie_variables.get('SUBSTITRENTE', 0))) * ((positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) and positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) * saisie_variables.get('SUBSTITRENTE', 0)) + (positif((saisie_variables.get('PRESCOMPJUGE', 0) - PLAFPRESCOMP)) and positif((saisie_variables.get('PRESCOMPJUGE', 0) - PLAFPRESCOMP)) * arr((PLAFPRESCOMP and saisie_variables.get('SUBSTITRENTE', 0) and PLAFPRESCOMP * saisie_variables.get('SUBSTITRENTE', 0) / saisie_variables.get('PRESCOMPJUGE', 0)))))) + (positif((saisie_variables.get('SUBSTITRENTE', 0) - saisie_variables.get('PRESCOMP2000', 0))) and positif((saisie_variables.get('SUBSTITRENTE', 0) - saisie_variables.get('PRESCOMP2000', 0))) * ((positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) and positif_ou_nul((PLAFPRESCOMP - saisie_variables.get('PRESCOMPJUGE', 0))) * saisie_variables.get('PRESCOMP2000', 0)) + (positif((saisie_variables.get('PRESCOMPJUGE', 0) - PLAFPRESCOMP)) and positif((saisie_variables.get('PRESCOMPJUGE', 0) - PLAFPRESCOMP)) * arr((PLAFPRESCOMP and (saisie_variables.get('SUBSTITRENTE', 0) and saisie_variables.get('SUBSTITRENTE', 0) / saisie_variables.get('PRESCOMPJUGE', 0)) and PLAFPRESCOMP * (saisie_variables.get('SUBSTITRENTE', 0) and saisie_variables.get('SUBSTITRENTE', 0) / saisie_variables.get('PRESCOMPJUGE', 0)) * (saisie_variables.get('PRESCOMP2000', 0) and saisie_variables.get('PRESCOMP2000', 0) / saisie_variables.get('SUBSTITRENTE', 0)))))))))))))) * (1 - V_CNR()))

    @cache_result
    def RPRESCOMP():
        """
        Reduct. prestations compensatoires retenue et pas encore deduit
        """
        return (arr((BPRESCOMP() and TX_PRESCOMP and BPRESCOMP() * TX_PRESCOMP / 100)) and arr((BPRESCOMP() and TX_PRESCOMP and BPRESCOMP() * TX_PRESCOMP / 100)) * (1 - V_CNR()))

    @cache_result
    def RRPRESCOMP_1():
        """
        pour alleger prog - reduction prestations compensatoires deduit
        """
        return max(min(RPRESCOMP(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RFIPDOM_1() - RAIDE_1() - RDIFAGRI_1() - RFORET_1() - RFIPC_1() - RCINE_1() - RRESTIMO_1() - RSOCREPR_1())), 0)

    @cache_result
    def BAH():
        """
        Base reduction depense d'hebergement
        """
        return ((min(saisie_variables.get('RVCURE', 0), LIM_CURE) + min(saisie_variables.get('RCCURE', 0), LIM_CURE)) and (min(saisie_variables.get('RVCURE', 0), LIM_CURE) + min(saisie_variables.get('RCCURE', 0), LIM_CURE)) * (1 - V_CNR()))

    @cache_result
    def RAH():
        """
        Reduction depense d'hebergement
        """
        return arr((BAH() and TX_CURE and BAH() * TX_CURE / 100))

    @cache_result
    def RHEBE_1():
        """
        pour alleger programmation - Reduction retenue depense d'hebergement
        """
        return max(min(RAH(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RAIDE_1() - RDIFAGRI_1() - RFORET_1() - RFIPDOM_1() - RFIPC_1() - RCINE_1() - RRESTIMO_1() - RSOCREPR_1() - RRPRESCOMP_1())), 0)

    @cache_result
    def RSURV_1():
        """
        pour alleger programmation - Rente-survie, contrat handicap
        """
        return max(min(RRS(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RAIDE_1() - RDIFAGRI_1() - RFORET_1() - RFIPDOM_1() - RFIPC_1() - RCINE_1() - RRESTIMO_1() - RSOCREPR_1() - RRPRESCOMP_1() - RHEBE_1())), 0)

    @cache_result
    def RSURV():
        """
        Rente-survie, contrat handicap
        """
        return max(0, ((RSURV_1() and RSURV_1() * (1 - base_variables['ART1731BIS'])) + (min(RSURV_1(), (max((base_variables['RSURV_P'] + base_variables['RSURVP2']), (base_variables['RSURV1731'] + 0)) and max((base_variables['RSURV_P'] + base_variables['RSURVP2']), (base_variables['RSURV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RSURV_1(), (max((base_variables['RSURV_P'] + base_variables['RSURVP2']), (base_variables['RSURV1731'] + 0)) and max((base_variables['RSURV_P'] + base_variables['RSURVP2']), (base_variables['RSURV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RFC():
        """
        Reduction frais comptabilite
        """
        return (min(saisie_variables.get('RDCOM', 0), (PLAF_FRCOMPTA and PLAF_FRCOMPTA * max(1, saisie_variables.get('NBACT', 0)))) and present(saisie_variables.get('RDCOM', 0)) and min(saisie_variables.get('RDCOM', 0), (PLAF_FRCOMPTA and PLAF_FRCOMPTA * max(1, saisie_variables.get('NBACT', 0)))) * present(saisie_variables.get('RDCOM', 0)) * (1 - V_CNR()))

    @cache_result
    def RREPA():
        """
        Dons : fourniture de repas particulier
        """
        return ((RREPA_1() and RREPA_1() * (1 - base_variables['ART1731BIS'])) + (min(RREPA_1(), (max((base_variables['RREPA_P'] + base_variables['RREPAP2']), (base_variables['RREPA1731'] + 0)) and max((base_variables['RREPA_P'] + base_variables['RREPAP2']), (base_variables['RREPA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RREPA_1(), (max((base_variables['RREPA_P'] + base_variables['RREPAP2']), (base_variables['RREPA1731'] + 0)) and max((base_variables['RREPA_P'] + base_variables['RREPAP2']), (base_variables['RREPA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RAIDE():
        """
        Aide a domicile
        """
        return max(((RAIDE_1() and RAIDE_1() * (1 - base_variables['ART1731BIS'])) + (min(RAIDE_1(), (max((base_variables['RAIDE_P'] + base_variables['RAIDEP2']), (base_variables['RAIDE1731'] + 0)) and max((base_variables['RAIDE_P'] + base_variables['RAIDEP2']), (base_variables['RAIDE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RAIDE_1(), (max((base_variables['RAIDE_P'] + base_variables['RAIDEP2']), (base_variables['RAIDE1731'] + 0)) and max((base_variables['RAIDE_P'] + base_variables['RAIDEP2']), (base_variables['RAIDE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])), 0)

    @cache_result
    def RDIFAGRI():
        """
        Reduction interets differe de paiement accorde aux agriculteurs impute
        """
        return max(0, ((RDIFAGRI_1() and RDIFAGRI_1() * (1 - base_variables['ART1731BIS'])) + (min(RDIFAGRI_1(), (max((base_variables['RDIFAGRI_P'] + base_variables['RDIFAGRIP2']), (base_variables['RDIFAGRI1731'] + 0)) and max((base_variables['RDIFAGRI_P'] + base_variables['RDIFAGRIP2']), (base_variables['RDIFAGRI1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RDIFAGRI_1(), (max((base_variables['RDIFAGRI_P'] + base_variables['RDIFAGRIP2']), (base_variables['RDIFAGRI1731'] + 0)) and max((base_variables['RDIFAGRI_P'] + base_variables['RDIFAGRIP2']), (base_variables['RDIFAGRI1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RFORET():
        """
        Reduction cotisation pour defense des forets
        """
        return max(0, ((RFORET_1() and RFORET_1() * (1 - base_variables['ART1731BIS'])) + (min(RFORET_1(), (max((base_variables['RFORET_P'] + base_variables['RFORETP2']), (base_variables['RFORET1731'] + 0)) and max((base_variables['RFORET_P'] + base_variables['RFORETP2']), (base_variables['RFORET1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RFORET_1(), (max((base_variables['RFORET_P'] + base_variables['RFORETP2']), (base_variables['RFORET1731'] + 0)) and max((base_variables['RFORET_P'] + base_variables['RFORETP2']), (base_variables['RFORET1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RFIPDOM():
        """
        Reduction FIP DOM COM
        """
        return max(0, ((RFIPDOM_1() and RFIPDOM_1() * (1 - base_variables['ART1731BIS'])) + (min(RFIPDOM_1(), (max((base_variables['RFIPDOM_P'] + base_variables['RFIPDOMP2']), (base_variables['RFIPDOM1731'] + 0)) and max((base_variables['RFIPDOM_P'] + base_variables['RFIPDOMP2']), (base_variables['RFIPDOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RFIPDOM_1(), (max((base_variables['RFIPDOM_P'] + base_variables['RFIPDOMP2']), (base_variables['RFIPDOM1731'] + 0)) and max((base_variables['RFIPDOM_P'] + base_variables['RFIPDOMP2']), (base_variables['RFIPDOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RFIPC():
        """
        Reduction FIP Corse
        """
        return max(0, ((RFIPC_1() and RFIPC_1() * (1 - base_variables['ART1731BIS'])) + (min(RFIPC_1(), (max((base_variables['RFIPC_P'] + base_variables['RFIPCP2']), (base_variables['RFIPC1731'] + 0)) and max((base_variables['RFIPC_P'] + base_variables['RFIPCP2']), (base_variables['RFIPC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RFIPC_1(), (max((base_variables['RFIPC_P'] + base_variables['RFIPCP2']), (base_variables['RFIPC1731'] + 0)) and max((base_variables['RFIPC_P'] + base_variables['RFIPCP2']), (base_variables['RFIPC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RCINE():
        """
        Cinema audiovisuel
        """
        return max(0, ((RCINE_1() and RCINE_1() * (1 - base_variables['ART1731BIS'])) + (min(RCINE_1(), (max((base_variables['RCINE_P'] + base_variables['RCINEP2']), (base_variables['RCINE1731'] + 0)) and max((base_variables['RCINE_P'] + base_variables['RCINEP2']), (base_variables['RCINE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCINE_1(), (max((base_variables['RCINE_P'] + base_variables['RCINEP2']), (base_variables['RCINE1731'] + 0)) and max((base_variables['RCINE_P'] + base_variables['RCINEP2']), (base_variables['RCINE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RRESTIMO():
        """
        Travaux de restauration immobiliere - reduction
        """
        return max(0, ((RRESTIMO_1() and RRESTIMO_1() * (1 - base_variables['ART1731BIS'])) + (min(RRESTIMO_1(), (max((base_variables['RRESTIMO_P'] + base_variables['RRESTIMOP2']), (base_variables['RRESTIMO1731'] + 0)) and max((base_variables['RRESTIMO_P'] + base_variables['RRESTIMOP2']), (base_variables['RRESTIMO1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RRESTIMO_1(), (max((base_variables['RRESTIMO_P'] + base_variables['RRESTIMOP2']), (base_variables['RRESTIMO1731'] + 0)) and max((base_variables['RRESTIMO_P'] + base_variables['RRESTIMOP2']), (base_variables['RRESTIMO1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RSOCREPR():
        """
        Reduction emprunt reprise societe
        """
        return max(0, ((RSOCREPR_1() and RSOCREPR_1() * (1 - base_variables['ART1731BIS'])) + (min(RSOCREPR_1(), (max((base_variables['RSOCREPR_P'] + base_variables['RSOCREPRP2']), (base_variables['RSOCREPR1731'] + 0)) and max((base_variables['RSOCREPR_P'] + base_variables['RSOCREPRP2']), (base_variables['RSOCREPR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RSOCREPR_1(), (max((base_variables['RSOCREPR_P'] + base_variables['RSOCREPRP2']), (base_variables['RSOCREPR1731'] + 0)) and max((base_variables['RSOCREPR_P'] + base_variables['RSOCREPRP2']), (base_variables['RSOCREPR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RRPRESCOMP():
        """
        reduction prestations compensatoires deduit
        """
        return max(0, ((RRPRESCOMP_1() and RRPRESCOMP_1() * (1 - base_variables['ART1731BIS'])) + (min(RRPRESCOMP_1(), (max((base_variables['RRPRESCOMP_P'] + base_variables['RRPRESCOMPP2']), (base_variables['RRPRESCOMP1731'] + 0)) and max((base_variables['RRPRESCOMP_P'] + base_variables['RRPRESCOMPP2']), (base_variables['RRPRESCOMP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RRPRESCOMP_1(), (max((base_variables['RRPRESCOMP_P'] + base_variables['RRPRESCOMPP2']), (base_variables['RRPRESCOMP1731'] + 0)) and max((base_variables['RRPRESCOMP_P'] + base_variables['RRPRESCOMPP2']), (base_variables['RRPRESCOMP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RHEBE():
        """
        Reduction retenue depense d'hebergement
        """
        return max(0, ((RHEBE_1() and RHEBE_1() * (1 - base_variables['ART1731BIS'])) + (min(RHEBE_1(), (max((base_variables['RHEBE_P'] + base_variables['RHEBEP2']), (base_variables['RHEBE1731'] + 0)) and max((base_variables['RHEBE_P'] + base_variables['RHEBEP2']), (base_variables['RHEBE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RHEBE_1(), (max((base_variables['RHEBE_P'] + base_variables['RHEBEP2']), (base_variables['RHEBE1731'] + 0)) and max((base_variables['RHEBE_P'] + base_variables['RHEBEP2']), (base_variables['RHEBE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def BFCPI_1():
        """
        pour alleger prog Base reduc. Souscrip Parts Fonds Communs Plac Innov.
        """
        return (((positif(BOOL_0AM()) and positif(BOOL_0AM()) * min(saisie_variables.get('FCPI', 0), (PLAF_FCPI and PLAF_FCPI * 2))) + (positif((1 - BOOL_0AM())) and positif((1 - BOOL_0AM())) * min(saisie_variables.get('FCPI', 0), PLAF_FCPI))) and ((positif(BOOL_0AM()) and positif(BOOL_0AM()) * min(saisie_variables.get('FCPI', 0), (PLAF_FCPI and PLAF_FCPI * 2))) + (positif((1 - BOOL_0AM())) and positif((1 - BOOL_0AM())) * min(saisie_variables.get('FCPI', 0), PLAF_FCPI))) * (1 - V_CNR()))

    @cache_result
    def RFCPI():
        """
        Reduction Souscription Parts Fonds Comm de Plac dans l Innovation
        """
        return arr((BFCPI_1() and TX_FCPI and BFCPI_1() * TX_FCPI / 100))

    @cache_result
    def RINNO_1():
        """
        pour alleger prog - reduc. Souscrip Parts Fonds Communs Plac Innov.
        """
        return max(min(RFCPI(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RFIPDOM_1() - RAIDE_1() - RDIFAGRI_1() - RFORET_1() - RFIPC_1() - RCINE_1() - RRESTIMO_1() - RSOCREPR_1() - RRPRESCOMP_1() - RHEBE() - RSURV_1())), 0)

    @cache_result
    def RINNO():
        """
        Reduction FCP dans l'innovation- Affichage
        """
        return max(0, ((RINNO_1() and RINNO_1() * (1 - base_variables['ART1731BIS'])) + (min(RINNO_1(), (max((base_variables['RINNO_P'] + base_variables['RINNOP2']), (base_variables['RINNO1731'] + 0)) and max((base_variables['RINNO_P'] + base_variables['RINNOP2']), (base_variables['RINNO1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RINNO_1(), (max((base_variables['RINNO_P'] + base_variables['RINNOP2']), (base_variables['RINNO1731'] + 0)) and max((base_variables['RINNO_P'] + base_variables['RINNOP2']), (base_variables['RINNO1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def BSOUFIP():
        """
        Base reduction investissement proximite
        """
        return min(saisie_variables.get('FFIP', 0), (LIM_SOUFIP and LIM_SOUFIP * (1 + BOOL_0AM())))

    @cache_result
    def RFIP():
        """
        Reduction investissement de proximite
        """
        return (arr((BSOUFIP() and TX_REDFIP and BSOUFIP() * TX_REDFIP / 100)) and arr((BSOUFIP() and TX_REDFIP and BSOUFIP() * TX_REDFIP / 100)) * (1 - V_CNR()))

    @cache_result
    def RSOUFIP_1():
        """
        pour alleger la programmation - Investissement de proximite
        """
        return max(min(RFIP(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RAIDE_1() - RDIFAGRI_1() - RFORET_1() - RFIPDOM_1() - RFIPC_1() - RCINE_1() - RRESTIMO_1() - RSOCREPR_1() - RRPRESCOMP_1() - RHEBE_1() - RSURV_1() - RINNO_1())), 0)

    @cache_result
    def RSOUFIP():
        """
        Investissement de proximite
        """
        return max(0, ((RSOUFIP_1() and RSOUFIP_1() * (1 - base_variables['ART1731BIS'])) + (min(RSOUFIP_1(), (max((base_variables['RSOUFIP_P'] + base_variables['RSOUFIPP2']), (base_variables['RSOUFIP1731'] + 0)) and max((base_variables['RSOUFIP_P'] + base_variables['RSOUFIPP2']), (base_variables['RSOUFIP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RSOUFIP_1(), (max((base_variables['RSOUFIP_P'] + base_variables['RSOUFIPP2']), (base_variables['RSOUFIP1731'] + 0)) and max((base_variables['RSOUFIP_P'] + base_variables['RSOUFIPP2']), (base_variables['RSOUFIP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def BRENOV():
        """
        Base reduction travaux de restauration des objets classes 
        """
        return min(saisie_variables.get('RIRENOV', 0), PLAF_RENOV)

    @cache_result
    def RENOV():
        """
        Reduction travaux de restauration des objets classes 
        """
        return (arr((BRENOV() and TX_RENOV and BRENOV() * TX_RENOV / 100)) and arr((BRENOV() and TX_RENOV and BRENOV() * TX_RENOV / 100)) * (1 - V_CNR()))

    @cache_result
    def RRIRENOV_1():
        """
        pour alleger prog - Travaux de restauration objets classes - reduction
        """
        return max(min(RENOV(), (IDOM11() - DEC11() - RCOTFOR_1() - RREPA_1() - RAIDE_1() - RDIFAGRI_1() - RFORET_1() - RFIPDOM_1() - RFIPC_1() - RCINE_1() - RRESTIMO_1() - RSOCREPR_1() - RRPRESCOMP_1() - RHEBE_1() - RSURV_1() - RINNO_1() - RSOUFIP_1())), 0)

    @cache_result
    def RRIRENOV():
        """
        Travaux de restauration des objets classes - reduction
        """
        return max(0, ((RRIRENOV_1() and RRIRENOV_1() * (1 - base_variables['ART1731BIS'])) + (min(RRIRENOV_1(), (max((base_variables['RRIRENOV_P'] + base_variables['RRIRENOVP2']), (base_variables['RRIRENOV1731'] + 0)) and max((base_variables['RRIRENOV_P'] + base_variables['RRIRENOVP2']), (base_variables['RRIRENOV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RRIRENOV_1(), (max((base_variables['RRIRENOV_P'] + base_variables['RRIRENOVP2']), (base_variables['RRIRENOV1731'] + 0)) and max((base_variables['RRIRENOV_P'] + base_variables['RRIRENOVP2']), (base_variables['RRIRENOV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RRI1():
        """
        Reductions impot lot 1
        """
        return (IDOM11() - DEC11() - RCOTFOR() - RREPA() - RAIDE() - RDIFAGRI() - RFORET() - RFIPDOM() - RFIPC() - RCINE() - RRESTIMO() - RSOCREPR() - RRPRESCOMP() - RHEBE() - RSURV() - RINNO() - RSOUFIP() - RRIRENOV())

    @cache_result
    def RLOG01():
        """
        Reduction HQB
        """
        return (max(min(saisie_variables.get('INVLOG2008', 0), RRI1()), 0) and max(min(saisie_variables.get('INVLOG2008', 0), RRI1()), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG02():
        """
        Reduction HQC
        """
        return (max(min(saisie_variables.get('INVLGDEB2009', 0), (RRI1() - RLOG01())), 0) and max(min(saisie_variables.get('INVLGDEB2009', 0), (RRI1() - RLOG01())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG03():
        """
        Reduction HQT
        """
        return (max(min(saisie_variables.get('INVLGDEB', 0), (RRI1() - RLOG01() - RLOG02())), 0) and max(min(saisie_variables.get('INVLGDEB', 0), (RRI1() - RLOG01() - RLOG02())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG04():
        """
        Reduction HOA
        """
        return (max(min(saisie_variables.get('INVOMLOGOA', 0), (RRI1() - RLOG01() - RLOG02() - RLOG03())), 0) and max(min(saisie_variables.get('INVOMLOGOA', 0), (RRI1() - RLOG01() - RLOG02() - RLOG03())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG05():
        """
        Reduction HOH
        """
        return (max(min(saisie_variables.get('INVOMLOGOH', 0), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04())), 0) and max(min(saisie_variables.get('INVOMLOGOH', 0), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG06():
        """
        Reduction HOL
        """
        return (max(min(saisie_variables.get('INVOMLOGOL', 0), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04() - RLOG05())), 0) and max(min(saisie_variables.get('INVOMLOGOL', 0), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04() - RLOG05())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG07():
        """
        Reduction HOO
        """
        return (max(min(saisie_variables.get('INVOMLOGOO', 0), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04() - RLOG05() - RLOG06())), 0) and max(min(saisie_variables.get('INVOMLOGOO', 0), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04() - RLOG05() - RLOG06())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG08():
        """
        Reduction HOS
        """
        return (max(min(saisie_variables.get('INVOMLOGOS', 0), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04() - RLOG05() - RLOG06() - RLOG07())), 0) and max(min(saisie_variables.get('INVOMLOGOS', 0), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04() - RLOG05() - RLOG06() - RLOG07())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETQL():
        """
        Plafonnement 7QL theorique
        """
        return (max(min(saisie_variables.get('INVLGAUTRE', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0))), 0) and max(min(saisie_variables.get('INVLGAUTRE', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0))), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETQM():
        """
        Plafonnement 7QM theorique
        """
        return (max(min(saisie_variables.get('INVLGDEB2010', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL())), 0) and max(min(saisie_variables.get('INVLGDEB2010', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETQD():
        """
        Plafonnement 7QD theorique
        """
        return (max(min(saisie_variables.get('INVLOG2009', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM())), 0) and max(min(saisie_variables.get('INVLOG2009', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOB():
        """
        Plafonnement 7OB theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOB', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD())), 0) and max(min(saisie_variables.get('INVOMLOGOB', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOC():
        """
        Plafonnement 7OC theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOC', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB())), 0) and max(min(saisie_variables.get('INVOMLOGOC', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOI():
        """
        Plafonnement 7OI theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOI', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC())), 0) and max(min(saisie_variables.get('INVOMLOGOI', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOJ():
        """
        Plafonnement 7OJ theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOJ', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI())), 0) and max(min(saisie_variables.get('INVOMLOGOJ', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOK():
        """
        Plafonnement 7OK theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOK', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ())), 0) and max(min(saisie_variables.get('INVOMLOGOK', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOM():
        """
        Plafonnement 7OM theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOM', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK())), 0) and max(min(saisie_variables.get('INVOMLOGOM', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETON():
        """
        Plafonnement 7ON theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGON', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM())), 0) and max(min(saisie_variables.get('INVOMLOGON', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOP():
        """
        Plafonnement 7OP theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOP', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON())), 0) and max(min(saisie_variables.get('INVOMLOGOP', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOQ():
        """
        Plafonnement 7OQ theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOQ', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP())), 0) and max(min(saisie_variables.get('INVOMLOGOQ', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOR():
        """
        Plafonnement 7OR theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOR', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ())), 0) and max(min(saisie_variables.get('INVOMLOGOR', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOT():
        """
        Plafonnement 7OT theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOT', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR())), 0) and max(min(saisie_variables.get('INVOMLOGOT', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOU():
        """
        Plafonnement 7OU theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOU', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT())), 0) and max(min(saisie_variables.get('INVOMLOGOU', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOV():
        """
        Plafonnement 7OV theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOV', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU())), 0) and max(min(saisie_variables.get('INVOMLOGOV', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOW():
        """
        Plafonnement 7OW theorique
        """
        return (max(min(saisie_variables.get('INVOMLOGOW', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV())), 0) and max(min(saisie_variables.get('INVOMLOGOW', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOD():
        """
        Plafonnement code HOD theorique
        """
        return (max(min(saisie_variables.get('CODHOD', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW())), 0) and max(min(saisie_variables.get('CODHOD', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOE():
        """
        Plafonnement code HOE theorique
        """
        return (max(min(saisie_variables.get('CODHOE', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD())), 0) and max(min(saisie_variables.get('CODHOE', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOF():
        """
        Plafonnement code HOF theorique
        """
        return (max(min(saisie_variables.get('CODHOF', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE())), 0) and max(min(saisie_variables.get('CODHOF', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOG():
        """
        Plafonnement code HOG theorique
        """
        return (max(min(saisie_variables.get('CODHOG', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF())), 0) and max(min(saisie_variables.get('CODHOG', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOX():
        """
        Plafonnement code HOX theorique
        """
        return (max(min(saisie_variables.get('CODHOX', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG())), 0) and max(min(saisie_variables.get('CODHOX', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOY():
        """
        Plafonnement code HOY theorique
        """
        return (max(min(saisie_variables.get('CODHOY', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX())), 0) and max(min(saisie_variables.get('CODHOY', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETOZ():
        """
        Plafonnement code HOZ theorique
        """
        return (max(min(saisie_variables.get('CODHOZ', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY())), 0) and max(min(saisie_variables.get('CODHOZ', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETUA():
        """
        Plafonnement code HUA theorique
        """
        return (max(min(saisie_variables.get('CODHUA', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ())), 0) and max(min(saisie_variables.get('CODHUA', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETUB():
        """
        Plafonnement code HUB theorique
        """
        return (max(min(saisie_variables.get('CODHUB', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA())), 0) and max(min(saisie_variables.get('CODHUB', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETUC():
        """
        Plafonnement code HUC theorique
        """
        return (max(min(saisie_variables.get('CODHUC', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA() - NINVRETUB())), 0) and max(min(saisie_variables.get('CODHUC', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA() - NINVRETUB())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETUD():
        """
        Plafonnement code HUD theorique
        """
        return (max(min(saisie_variables.get('CODHUD', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA() - NINVRETUB() - NINVRETUC())), 0) and max(min(saisie_variables.get('CODHUD', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA() - NINVRETUB() - NINVRETUC())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETUE():
        """
        Plafonnement code HUE theorique
        """
        return (max(min(saisie_variables.get('CODHUE', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA() - NINVRETUB() - NINVRETUC() - NINVRETUD())), 0) and max(min(saisie_variables.get('CODHUE', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA() - NINVRETUB() - NINVRETUC() - NINVRETUD())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETUF():
        """
        Plafonnement code HUF theorique
        """
        return (max(min(saisie_variables.get('CODHUF', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA() - NINVRETUB() - NINVRETUC() - NINVRETUD() - NINVRETUE())), 0) and max(min(saisie_variables.get('CODHUF', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA() - NINVRETUB() - NINVRETUC() - NINVRETUD() - NINVRETUE())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETUG():
        """
        Plafonnement code HUG theorique
        """
        return (max(min(saisie_variables.get('CODHUG', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA() - NINVRETUB() - NINVRETUC() - NINVRETUD() - NINVRETUE() - NINVRETUF())), 0) and max(min(saisie_variables.get('CODHUG', 0), (RRI1() - saisie_variables.get('INVLOG2008', 0) - saisie_variables.get('INVLGDEB2009', 0) - saisie_variables.get('INVLGDEB', 0) - saisie_variables.get('INVOMLOGOA', 0) - saisie_variables.get('INVOMLOGOH', 0) - saisie_variables.get('INVOMLOGOL', 0) - saisie_variables.get('INVOMLOGOO', 0) - saisie_variables.get('INVOMLOGOS', 0) - NINVRETQL() - NINVRETQM() - NINVRETQD() - NINVRETOB() - NINVRETOC() - NINVRETOI() - NINVRETOJ() - NINVRETOK() - NINVRETOM() - NINVRETON() - NINVRETOP() - NINVRETOQ() - NINVRETOR() - NINVRETOT() - NINVRETOU() - NINVRETOV() - NINVRETOW() - NINVRETOD() - NINVRETOE() - NINVRETOF() - NINVRETOG() - NINVRETOX() - NINVRETOY() - NINVRETOZ() - NINVRETUA() - NINVRETUB() - NINVRETUC() - NINVRETUD() - NINVRETUE() - NINVRETUF())), 0) * (1 - V_CNR()))

    @cache_result
    def NRLOGDOM():
        """
        Investissements outre mer logement - reduction
        """
        return ((saisie_variables.get('INVLOG2008', 0) + saisie_variables.get('INVLGDEB2009', 0) + saisie_variables.get('INVLGDEB', 0) + saisie_variables.get('INVOMLOGOA', 0) + saisie_variables.get('INVOMLOGOH', 0) + saisie_variables.get('INVOMLOGOL', 0) + saisie_variables.get('INVOMLOGOO', 0) + saisie_variables.get('INVOMLOGOS', 0) + NINVRETQL() + NINVRETQM() + NINVRETQD() + NINVRETOB() + NINVRETOC() + NINVRETOI() + NINVRETOJ() + NINVRETOK() + NINVRETOM() + NINVRETON() + NINVRETOP() + NINVRETOQ() + NINVRETOR() + NINVRETOT() + NINVRETOU() + NINVRETOV() + NINVRETOW() + NINVRETOD() + NINVRETOE() + NINVRETOF() + NINVRETOG() + NINVRETOX() + NINVRETOY() + NINVRETOZ() + NINVRETUA() + NINVRETUB() + NINVRETUC() + NINVRETUD() + NINVRETUE() + NINVRETUF() + NINVRETUG()) and (saisie_variables.get('INVLOG2008', 0) + saisie_variables.get('INVLGDEB2009', 0) + saisie_variables.get('INVLGDEB', 0) + saisie_variables.get('INVOMLOGOA', 0) + saisie_variables.get('INVOMLOGOH', 0) + saisie_variables.get('INVOMLOGOL', 0) + saisie_variables.get('INVOMLOGOO', 0) + saisie_variables.get('INVOMLOGOS', 0) + NINVRETQL() + NINVRETQM() + NINVRETQD() + NINVRETOB() + NINVRETOC() + NINVRETOI() + NINVRETOJ() + NINVRETOK() + NINVRETOM() + NINVRETON() + NINVRETOP() + NINVRETOQ() + NINVRETOR() + NINVRETOT() + NINVRETOU() + NINVRETOV() + NINVRETOW() + NINVRETOD() + NINVRETOE() + NINVRETOF() + NINVRETOG() + NINVRETOX() + NINVRETOY() + NINVRETOZ() + NINVRETUA() + NINVRETUB() + NINVRETUC() + NINVRETUD() + NINVRETUE() + NINVRETUF() + NINVRETUG()) * (1 - V_CNR()))

    @cache_result
    def RCREATEUR():
        """
        Reduction Createur repreneur entreprise non limite
        """
        return (saisie_variables.get('CONVCREA', 0) and 2 and PLAF_CRENTR and saisie_variables.get('CONVCREA', 0) / 2 * PLAF_CRENTR * (1 - V_CNR()))

    @cache_result
    def RCREATEURHANDI():
        """
        Reduction Createur repreneur entreprise non limite - handicapes
        """
        return (saisie_variables.get('CONVHAND', 0) and 2 and PLAF_CRENTRH and saisie_variables.get('CONVHAND', 0) / 2 * PLAF_CRENTRH * (1 - V_CNR()))

    @cache_result
    def NRCREAT():
        """
        Reduction Createur repreneur entreprise
        """
        return max(min((RCREATEUR() + RCREATEURHANDI()), (RRI1() - NRLOGDOM())), 0)

    @cache_result
    def NRCOMP():
        """
        Frais de comptabilite
        """
        return max(min(RFC(), (RRI1() - NRLOGDOM() - NRCREAT())), 0)

    @cache_result
    def RETUD():
        """
        Reduction d'impot pour enfants poursuivant leurs etudes sec. ou sup.
        """
        return ((1 - V_CNR()) and (1 - V_CNR()) * arr(((saisie_variables.get('RDENS', 0) and saisie_variables.get('RDENS', 0) * MTRC) + (saisie_variables.get('RDENL', 0) and saisie_variables.get('RDENL', 0) * MTRL) + (saisie_variables.get('RDENU', 0) and saisie_variables.get('RDENU', 0) * MTRS) + (saisie_variables.get('RDENSQAR', 0) and MTRC and saisie_variables.get('RDENSQAR', 0) * MTRC / 2) + (saisie_variables.get('RDENLQAR', 0) and MTRL and saisie_variables.get('RDENLQAR', 0) * MTRL / 2) + (saisie_variables.get('RDENUQAR', 0) and MTRS and saisie_variables.get('RDENUQAR', 0) * MTRS / 2))))

    @cache_result
    def NRRETU():
        """
        Reduct. etudiants: montant retenu
        """
        return max(min(RETUD(), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP())), 0)

    @cache_result
    def BDON7UH():
        """
        Base limitee reduction dons aux oeuvres code 7UH
        """
        return min(LIM15000, saisie_variables.get('COD7UH', 0))

    @cache_result
    def EXCEDANTA():
        """
        Base reduction autre dons etape excedant reduc repas / plafond
        """
        return max(0, (saisie_variables.get('RDREP', 0) + saisie_variables.get('DONETRAN', 0) - PLAF_REDREPAS))

    @cache_result
    def REVDON():
        """
        Rev. servant de base au calcul des plaf. dons aux oeuvres
        """
        return max(0, (RBL() + TOTALQUOHT() - SDD() - SDC1()))

    @cache_result
    def BON():
        """
        Base reduction dons aux oeuvres
        """
        return arr(min((saisie_variables.get('REPDON03', 0) + saisie_variables.get('REPDON04', 0) + saisie_variables.get('REPDON05', 0) + saisie_variables.get('REPDON06', 0) + saisie_variables.get('REPDON07', 0) + saisie_variables.get('RDDOUP', 0) + BDON7UH() + saisie_variables.get('DONAUTRE', 0) + EXCEDANTA()), (REVDON() and TX_BASEDUP and REVDON() * TX_BASEDUP / 100)))

    @cache_result
    def RON():
        """
        Reduction dons aux oeuvres
        """
        return (arr((BON() and TX_REDDON and BON() * TX_REDDON / 100)) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and arr((BON() and TX_REDDON and BON() * TX_REDDON / 100)) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRDONS():
        """
        Dons aux oeuvres
        """
        return max(min(RON(), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU())), 0)

    @cache_result
    def ADUFREPFI():
        """
        Investissement Duflot realise et acheve en 2013- report - Retenu  
        """
        return (saisie_variables.get('DUFLOFI', 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and saisie_variables.get('DUFLOFI', 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRDUFREPFI():
        """
        Reduction Duflot
        """
        return max(min(ADUFREPFI(), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU() - NRDONS())), 0)

    @cache_result
    def RDUFLO_GIH():
        """
        Inv. Duflot - Mtant reduction avant imputation sur droits dus
        """
        return ((arr((arr((min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO) and min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO) / 9)) and arr((min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO) and min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO) / 9)) * (TX29 and TX29 / 100))) + arr((arr((min((saisie_variables.get('DUFLOGH', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('DUFLOGH', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO))) / 9)) and arr((min((saisie_variables.get('DUFLOGH', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('DUFLOGH', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO))) / 9)) * (TX18 and TX18 / 100)))) and (1 - null((4 - saisie_variables.get('V_REGCO', 0)))) and (arr((arr((min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO) and min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO) / 9)) and arr((min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO) and min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO) / 9)) * (TX29 and TX29 / 100))) + arr((arr((min((saisie_variables.get('DUFLOGH', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('DUFLOGH', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO))) / 9)) and arr((min((saisie_variables.get('DUFLOGH', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('DUFLOGH', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOGI', 0) + 0), LIMDUFLO))) / 9)) * (TX18 and TX18 / 100)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRDUFLOGIH():
        """
        Reduction Duflot
        """
        return max(min(RDUFLO_GIH(), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU() - NRDONS() - NRDUFREPFI())), 0)

    @cache_result
    def RDUFLO_EKL():
        """
        Inv. Duflot - Mtant reduction avant imputation sur droits dus
        """
        return ((arr((arr((min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO) and min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO) / 9)) and arr((min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO) and min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO) / 9)) * (TX29 and TX29 / 100))) + arr((arr((min((saisie_variables.get('DUFLOEK', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('DUFLOEK', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + 0), LIMDUFLO))) / 9)) and arr((min((saisie_variables.get('DUFLOEK', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('DUFLOEK', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + 0), LIMDUFLO))) / 9)) * (TX18 and TX18 / 100)))) and (1 - null((4 - saisie_variables.get('V_REGCO', 0)))) and (arr((arr((min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO) and min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO) / 9)) and arr((min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO) and min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO) / 9)) * (TX29 and TX29 / 100))) + arr((arr((min((saisie_variables.get('DUFLOEK', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('DUFLOEK', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + 0), LIMDUFLO))) / 9)) and arr((min((saisie_variables.get('DUFLOEK', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('DUFLOEK', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + 0), LIMDUFLO))) / 9)) * (TX18 and TX18 / 100)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRDUFLOEKL():
        """
        Reduction Duflot
        """
        return max(min(RDUFLO_EKL(), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU() - NRDONS() - NRDUFREPFI() - NRDUFLOGIH())), 0)

    @cache_result
    def RPI_QABCD():
        """
        Inv. Duflot - Mtant reduction avant imputation sur droits dus
        """
        return ((arr((arr((min((saisie_variables.get('PINELQD', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQD', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO))) / 9)) and arr((min((saisie_variables.get('PINELQD', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQD', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO))) / 9)) * (TX29 and TX29 / 100))) + arr((arr((min((saisie_variables.get('PINELQB', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQB', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + 0), LIMDUFLO))) / 9)) and arr((min((saisie_variables.get('PINELQB', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQB', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + 0), LIMDUFLO))) / 9)) * (TX18 and TX18 / 100))) + arr((arr((min((saisie_variables.get('PINELQC', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQC', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + 0), LIMDUFLO))) / 6)) and arr((min((saisie_variables.get('PINELQC', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQC', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + 0), LIMDUFLO))) / 6)) * (TX23 and TX23 / 100))) + arr((arr((min((saisie_variables.get('PINELQA', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + saisie_variables.get('PINELQB', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQA', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + saisie_variables.get('PINELQB', 0) + 0), LIMDUFLO))) / 6)) and arr((min((saisie_variables.get('PINELQA', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + saisie_variables.get('PINELQB', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQA', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + saisie_variables.get('PINELQB', 0) + 0), LIMDUFLO))) / 6)) * (TX12 and TX12 / 100)))) and (1 - null((4 - saisie_variables.get('V_REGCO', 0)))) and (arr((arr((min((saisie_variables.get('PINELQD', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQD', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO))) / 9)) and arr((min((saisie_variables.get('PINELQD', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQD', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + 0), LIMDUFLO))) / 9)) * (TX29 and TX29 / 100))) + arr((arr((min((saisie_variables.get('PINELQB', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQB', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + 0), LIMDUFLO))) / 9)) and arr((min((saisie_variables.get('PINELQB', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQB', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + 0), LIMDUFLO))) / 9)) * (TX18 and TX18 / 100))) + arr((arr((min((saisie_variables.get('PINELQC', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQC', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + 0), LIMDUFLO))) / 6)) and arr((min((saisie_variables.get('PINELQC', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQC', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + 0), LIMDUFLO))) / 6)) * (TX23 and TX23 / 100))) + arr((arr((min((saisie_variables.get('PINELQA', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + saisie_variables.get('PINELQB', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQA', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + saisie_variables.get('PINELQB', 0) + 0), LIMDUFLO))) / 6)) and arr((min((saisie_variables.get('PINELQA', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + saisie_variables.get('PINELQB', 0) + 0), LIMDUFLO))) and min((saisie_variables.get('PINELQA', 0) + 0), (LIMDUFLO - min((saisie_variables.get('DUFLOEL', 0) + saisie_variables.get('PINELQD', 0) + saisie_variables.get('PINELQC', 0) + saisie_variables.get('DUFLOEK', 0) + saisie_variables.get('PINELQB', 0) + 0), LIMDUFLO))) / 6)) * (TX12 and TX12 / 100)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRPIQABCD():
        """
        Reduction Pinel
        """
        return max(min(RPI_QABCD(), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU() - NRDONS() - NRDUFREPFI() - NRDUFLOGIH() - NRDUFLOEKL())), 0)

    @cache_result
    def BSNCL():
        """
        Base reduction societes nouvelles 7CL
        """
        return min(saisie_variables.get('REPSNO3', 0), (LIM_SOCNOUV2 and LIM_SOCNOUV2 * (1 + BOOL_0AM())))

    @cache_result
    def RSN_CL():
        """
        Reduction societes nouvelles 7CL avant imputation DS et autres reduc
        """
        return (BSNCL() and TX25 and BSNCL() * TX25 / 100)

    @cache_result
    def BSNCM():
        """
        Base reduction societes nouvelles 7CM
        """
        return max(0, min(saisie_variables.get('REPSNO2', 0), ((LIM_SOCNOUV2 and LIM_SOCNOUV2 * (1 + BOOL_0AM())) - BSNCL())))

    @cache_result
    def RSN_CM():
        """
        Reduction societes nouvelles 7CM avant imputation DS et autres reduc
        """
        return (BSNCM() and TX22 and BSNCM() * TX22 / 100)

    @cache_result
    def BSNCN():
        """
        Base reduction societes nouvelles 7CN
        """
        return max(0, min(saisie_variables.get('REPSNO1', 0), ((LIM_SOCNOUV2 and LIM_SOCNOUV2 * (1 + BOOL_0AM())) - BSNCL() - BSNCM())))

    @cache_result
    def RSN_CN():
        """
        Reduction societes nouvelles 7CN avant imputation DS et autres reduc
        """
        return (BSNCN() and TX18 and BSNCN() * TX18 / 100)

    @cache_result
    def BSNCC():
        """
        Base reduction societes nouvelles 7CC
        """
        return max(0, min(saisie_variables.get('REPSNON', 0), ((LIM_SOCNOUV2 and LIM_SOCNOUV2 * (1 + BOOL_0AM())) - BSNCL() - BSNCM() - BSNCN())))

    @cache_result
    def RSN_CC():
        """
        Reduction societes nouvelles 7CC avant imputation DS et autres reduc
        """
        return (BSNCC() and TX18 and BSNCC() * TX18 / 100)

    @cache_result
    def BSNCU():
        """
        Base reduction societes nouvelles 7CU
        """
        return max(0, min(saisie_variables.get('PETIPRISE', 0), ((LIM_SOCNOUV2 and LIM_SOCNOUV2 * (1 + BOOL_0AM())) - BSNCL() - BSNCM() - BSNCN() - BSNCC())))

    @cache_result
    def RSN_CU():
        """
        Reduction societes nouvelles 7CU avant imputation DS et autres reduc
        """
        return (BSNCU() and TX18 and BSNCU() * TX18 / 100)

    @cache_result
    def BSN1():
        """
        Base reduction societes nouvelles 2011
        """
        return min((saisie_variables.get('REPSNO3', 0) + saisie_variables.get('REPSNO2', 0) + saisie_variables.get('REPSNO1', 0) + saisie_variables.get('REPSNON', 0) + saisie_variables.get('PETIPRISE', 0)), (LIM_SOCNOUV2 and LIM_SOCNOUV2 * (1 + BOOL_0AM())))

    @cache_result
    def BSNCQ():
        """
        Base reduction societes nouvelles 7CQ
        """
        return max(0, min(saisie_variables.get('COD7CQ', 0), ((LIM_TITPRISE and LIM_TITPRISE * (1 + BOOL_0AM())) - BSN1())))

    @cache_result
    def RSN_CQ():
        """
        Reduction societes nouvelles 7CQ avant imputation DS et autres reduc
        """
        return (BSNCQ() and TX18 and BSNCQ() * TX18 / 100)

    @cache_result
    def BSNCR():
        """
        Base reduction societes nouvelles 7CR
        """
        return max(0, min(saisie_variables.get('COD7CR', 0), ((LIM_TITPRISE and LIM_TITPRISE * (1 + BOOL_0AM())) - BSN1() - BSNCQ())))

    @cache_result
    def RSN_CR():
        """
        Reduction societes nouvelles 7CR avant imputation DS et autres reduc
        """
        return (BSNCR() and TX18 and BSNCR() * TX18 / 100)

    @cache_result
    def BSNCF():
        """
        Base reduction societes nouvelles 7CF
        """
        return max(0, min(saisie_variables.get('RDSNO', 0), ((LIM_TITPRISE and LIM_TITPRISE * (1 + BOOL_0AM())) - BSN1() - BSNCQ() - BSNCR())))

    @cache_result
    def RSN_CF():
        """
        Reduction societes nouvelles 7CF avant imputation DS et autres reduc
        """
        return (BSNCF() and TX18 and BSNCF() * TX18 / 100)

    @cache_result
    def RSN():
        """
        Reduction societes nouvelles
        """
        return (arr((RSN_CL() + RSN_CM() + RSN_CN() + RSN_CC() + RSN_CU() + RSN_CQ() + RSN_CR() + RSN_CF())) and arr((RSN_CL() + RSN_CM() + RSN_CN() + RSN_CC() + RSN_CU() + RSN_CQ() + RSN_CR() + RSN_CF())) * (1 - V_CNR()))

    @cache_result
    def NRNOUV():
        """
        Reduction Capital de societes nouvelles
        """
        return max(min(RSN(), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU() - NRDONS() - NRDUFREPFI() - NRDUFLOGIH() - NRDUFLOEKL() - NRPIQABCD())), 0)

    @cache_result
    def NRPLAFPME():
        """
        Reduction plafonnement global des petites entreprises
        """
        return max(min(saisie_variables.get('COD7CY', 0), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU() - NRDONS() - NRDUFREPFI() - NRDUFLOGIH() - NRDUFLOEKL() - NRPIQABCD() - NRNOUV())), 0)

    @cache_result
    def ACOTFOR():
        """
        Cotisations assurance pour la foret - retenu
        """
        return (((ACOTFOR_R() and ACOTFOR_R() * (1 - base_variables['ART1731BIS'])) + (min(ACOTFOR_R(), (max((base_variables['ACOTFOR_P'] + base_variables['ACOTFORP2']), (base_variables['ACOTFOR1731'] + 0)) and max((base_variables['ACOTFOR_P'] + base_variables['ACOTFORP2']), (base_variables['ACOTFOR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(ACOTFOR_R(), (max((base_variables['ACOTFOR_P'] + base_variables['ACOTFORP2']), (base_variables['ACOTFOR1731'] + 0)) and max((base_variables['ACOTFOR_P'] + base_variables['ACOTFORP2']), (base_variables['ACOTFOR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((ACOTFOR_R() and ACOTFOR_R() * (1 - base_variables['ART1731BIS'])) + (min(ACOTFOR_R(), (max((base_variables['ACOTFOR_P'] + base_variables['ACOTFORP2']), (base_variables['ACOTFOR1731'] + 0)) and max((base_variables['ACOTFOR_P'] + base_variables['ACOTFORP2']), (base_variables['ACOTFOR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(ACOTFOR_R(), (max((base_variables['ACOTFOR_P'] + base_variables['ACOTFORP2']), (base_variables['ACOTFOR1731'] + 0)) and max((base_variables['ACOTFOR_P'] + base_variables['ACOTFORP2']), (base_variables['ACOTFOR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def RFOREST1():
        """
        Reduct.pas encore deduit investissement forestier
        """
        return min((saisie_variables.get('REPFOR', 0) + saisie_variables.get('REPSINFOR', 0) + saisie_variables.get('REPSINFOR1', 0)), max(0, ((PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM())) - ACOTFOR())))

    @cache_result
    def RFOREST2():
        """
        Reduct.pas encore deduit investissement forestier
        """
        return min((saisie_variables.get('REPFOR1', 0) + saisie_variables.get('REPSINFOR2', 0)), max(0, ((PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM())) - ACOTFOR() - RFOREST1())))

    @cache_result
    def RFOREST3():
        """
        Reduct.pas encore deduit investissement forestier
        """
        return min((saisie_variables.get('REPFOR2', 0) + saisie_variables.get('REPSINFOR3', 0) + saisie_variables.get('REPFOR3', 0) + saisie_variables.get('REPSINFOR4', 0)), max(0, ((PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM())) - ACOTFOR() - RFOREST1() - RFOREST2())))

    @cache_result
    def FORTRA():
        """
        Base travaux forestiers declares
        """
        return (saisie_variables.get('REPFOR', 0) + saisie_variables.get('REPSINFOR', 0) + saisie_variables.get('REPFOR1', 0) + saisie_variables.get('REPSINFOR1', 0) + saisie_variables.get('REPFOR2', 0) + saisie_variables.get('REPSINFOR2', 0) + saisie_variables.get('REPFOR3', 0) + saisie_variables.get('REPSINFOR3', 0) + saisie_variables.get('REPSINFOR4', 0))

    @cache_result
    def AFOREST_1():
        """
        pour simplifier prog - base reduction investissment forestier retenue
        """
        return ((min(FORTRA(), max(0, ((PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM())) - ACOTFOR()))) and min(FORTRA(), max(0, ((PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM())) - ACOTFOR()))) * (1 - V_CNR())) + min(saisie_variables.get('RDFOREST', 0), (PLAF_FOREST and PLAF_FOREST * (1 + BOOL_0AM()))))

    @cache_result
    def AFOREST():
        """
        base reduction d impot investissment forestier retenue
        """
        return (((AFOREST_1() and AFOREST_1() * (1 - base_variables['ART1731BIS'])) + (min(AFOREST_1(), (max((base_variables['AFOREST_P'] + base_variables['AFORESTP2']), (base_variables['AFOREST1731'] + 0)) and max((base_variables['AFOREST_P'] + base_variables['AFORESTP2']), (base_variables['AFOREST1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(AFOREST_1(), (max((base_variables['AFOREST_P'] + base_variables['AFORESTP2']), (base_variables['AFOREST1731'] + 0)) and max((base_variables['AFOREST_P'] + base_variables['AFORESTP2']), (base_variables['AFOREST1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((AFOREST_1() and AFOREST_1() * (1 - base_variables['ART1731BIS'])) + (min(AFOREST_1(), (max((base_variables['AFOREST_P'] + base_variables['AFORESTP2']), (base_variables['AFOREST1731'] + 0)) and max((base_variables['AFOREST_P'] + base_variables['AFORESTP2']), (base_variables['AFOREST1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(AFOREST_1(), (max((base_variables['AFOREST_P'] + base_variables['AFORESTP2']), (base_variables['AFOREST1731'] + 0)) and max((base_variables['AFOREST_P'] + base_variables['AFORESTP2']), (base_variables['AFOREST1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def RFOREST():
        """
        Reduct.pas encore deduit investissement forestier
        """
        return ((arr((RFOREST1() and TX25 and RFOREST1() * TX25 / 100)) + arr((RFOREST2() and TX22 and RFOREST2() * TX22 / 100)) + arr((RFOREST3() and TX18 and RFOREST3() * TX18 / 100)) + arr((max(0, (AFOREST() - RFOREST1() - RFOREST2() - RFOREST3())) and TX18 and max(0, (AFOREST() - RFOREST1() - RFOREST2() - RFOREST3())) * TX18 / 100))) and (arr((RFOREST1() and TX25 and RFOREST1() * TX25 / 100)) + arr((RFOREST2() and TX22 and RFOREST2() * TX22 / 100)) + arr((RFOREST3() and TX18 and RFOREST3() * TX18 / 100)) + arr((max(0, (AFOREST() - RFOREST1() - RFOREST2() - RFOREST3())) and TX18 and max(0, (AFOREST() - RFOREST1() - RFOREST2() - RFOREST3())) * TX18 / 100))) * (1 - V_CNR()))

    @cache_result
    def NRFOR():
        """
        Reduction Invt et travaux forestiers
        """
        return max(min(RFOREST(), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU() - NRDONS() - NRDUFREPFI() - NRDUFLOGIH() - NRDUFLOEKL() - NRPIQABCD() - NRNOUV() - NRPLAFPME())), 0)

    @cache_result
    def DTOURREP():
        """
        Declare Investissements locatifs resid. de tourisme report
        """
        return (saisie_variables.get('RINVLOCINV', 0) + saisie_variables.get('REPINVTOU', 0) + saisie_variables.get('INVLOCXN', 0) + saisie_variables.get('COD7UY', 0))

    @cache_result
    def ATOURREP():
        """
        Retenu  Investissements locatifs resid. de tourisme report
        """
        return ((DTOURREP() and DTOURREP() * (1 - base_variables['ART1731BIS'])) + (min(DTOURREP(), (max((base_variables['ATOURREP_P'] + base_variables['ATOURREPP2']), (base_variables['ATOURREP1731'] + 0)) and max((base_variables['ATOURREP_P'] + base_variables['ATOURREPP2']), (base_variables['ATOURREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DTOURREP(), (max((base_variables['ATOURREP_P'] + base_variables['ATOURREPP2']), (base_variables['ATOURREP1731'] + 0)) and max((base_variables['ATOURREP_P'] + base_variables['ATOURREPP2']), (base_variables['ATOURREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def NRTOURREP():
        """
        Reduction Investissements locatifs tourisme report
        """
        return max(min(arr((ATOURREP() and TX_REDIL25 and ATOURREP() * TX_REDIL25 / 100)), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU() - NRDONS() - NRDUFREPFI() - NRDUFLOGIH() - NRDUFLOEKL() - NRPIQABCD() - NRNOUV() - NRPLAFPME() - NRFOR())), 0)

    @cache_result
    def RIHOTR():
        """
        Reduction investissement locatif residence hoteliere
        """
        return (arr(((saisie_variables.get('INVLOCHOTR', 0) + saisie_variables.get('INVLOGHOT', 0)) and TX_REDIL25 and (saisie_variables.get('INVLOCHOTR', 0) + saisie_variables.get('INVLOGHOT', 0)) * TX_REDIL25 / 100)) and arr(((saisie_variables.get('INVLOCHOTR', 0) + saisie_variables.get('INVLOGHOT', 0)) and TX_REDIL25 and (saisie_variables.get('INVLOCHOTR', 0) + saisie_variables.get('INVLOGHOT', 0)) * TX_REDIL25 / 100)) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))))

    @cache_result
    def NRTOUHOTR():
        """
        Investissement locatif residence hoteliere - Reduction
        """
        return (max(min(RIHOTR(), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU() - NRDONS() - NRDUFREPFI() - NRDUFLOGIH() - NRDUFLOEKL() - NRPIQABCD() - NRNOUV() - NRPLAFPME() - NRFOR() - NRTOURREP())), 0) and max(min(RIHOTR(), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU() - NRDONS() - NRDUFREPFI() - NRDUFLOGIH() - NRDUFLOEKL() - NRPIQABCD() - NRNOUV() - NRPLAFPME() - NRFOR() - NRTOURREP())), 0) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))))

    @cache_result
    def DTOUREPA():
        """
        Declare Investissements locatifs resid. de tourisme report
        """
        return (saisie_variables.get('RINVLOCREA', 0) + saisie_variables.get('INVLOGREHA', 0) + saisie_variables.get('INVLOCXV', 0) + saisie_variables.get('COD7UZ', 0))

    @cache_result
    def ATOUREPA():
        """
        Retenu  Investissements locatifs resid. de tourisme report
        """
        return ((DTOUREPA() and DTOUREPA() * (1 - base_variables['ART1731BIS'])) + (min(DTOUREPA(), (max((base_variables['ATOUREPA_P'] + base_variables['ATOUREPAP2']), (base_variables['ATOUREPA1731'] + 0)) and max((base_variables['ATOUREPA_P'] + base_variables['ATOUREPAP2']), (base_variables['ATOUREPA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DTOUREPA(), (max((base_variables['ATOUREPA_P'] + base_variables['ATOUREPAP2']), (base_variables['ATOUREPA1731'] + 0)) and max((base_variables['ATOUREPA_P'] + base_variables['ATOUREPAP2']), (base_variables['ATOUREPA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def NRTOUREPA():
        """
        Reduction Investissements locatifs tourisme report
        """
        return max(min(arr((ATOUREPA() and TX_REDIL20 and ATOUREPA() * TX_REDIL20 / 100)), (RRI1() - NRLOGDOM() - NRCREAT() - NRCOMP() - NRRETU() - NRDONS() - NRDUFREPFI() - NRDUFLOGIH() - NRDUFLOEKL() - NRPIQABCD() - NRNOUV() - NRPLAFPME() - NRFOR() - NRTOURREP() - NRTOUHOTR())), 0)

    @cache_result
    def NRRI2():
        """
        Reductions impot lot 2
        """
        return (NRCREAT() + NRCOMP() + NRRETU() + NRDONS() + NRDUFREPFI() + NRDUFLOGIH() + NRDUFLOEKL() + NRPIQABCD() + NRNOUV() + NRPLAFPME() + NRFOR() + NRTOURREP() + NRTOUHOTR() + NRTOUREPA())

    @cache_result
    def NRCELRREDLA():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLA', 0), (RRI1() - NRLOGDOM() - NRRI2())), 0)

    @cache_result
    def NRCELRREDLB():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELRREDLA())), 0)

    @cache_result
    def NRCELRREDLE():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLE', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELRREDLA() - NRCELRREDLB())), 0)

    @cache_result
    def NRCELRREDLM():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLM', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELRREDLA() - NRCELRREDLB() - NRCELRREDLE())), 0)

    @cache_result
    def NRCELRREDLN():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLN', 0), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM()]))), 0)

    @cache_result
    def NRCELRREDLC():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLC', 0), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN()]))), 0)

    @cache_result
    def NRCELRREDLD():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLD', 0), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC()]))), 0)

    @cache_result
    def NRCELRREDLS():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLS', 0), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD()]))), 0)

    @cache_result
    def NRCELRREDLT():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLT', 0), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS()]))), 0)

    @cache_result
    def NRCELRREDLF():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLF', 0), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT()]))), 0)

    @cache_result
    def NRCELRREDLZ():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLZ', 0), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF()]))), 0)

    @cache_result
    def NRCELRREDLX():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDLX', 0), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ()]))), 0)

    @cache_result
    def NRCELRREDMG():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDMG', 0), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]))), 0)

    @cache_result
    def NRCELRREDMH():
        """
        Reduction Scellier theorique 
        """
        return max(min(saisie_variables.get('CELRREDMH', 0), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG())), 0)

    @cache_result
    def ACELREPHS():
        """
        Investissement Scellier DOM ds plafond report 2009 - Retenu 7HS
        """
        return (((saisie_variables.get('CELREPHS', 0) and saisie_variables.get('CELREPHS', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHS', 0), (max((base_variables['ACELREPHS_P'] + base_variables['ACELREPHSP2']), (base_variables['ACELREPHS1731'] + 0)) and max((base_variables['ACELREPHS_P'] + base_variables['ACELREPHSP2']), (base_variables['ACELREPHS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHS', 0), (max((base_variables['ACELREPHS_P'] + base_variables['ACELREPHSP2']), (base_variables['ACELREPHS1731'] + 0)) and max((base_variables['ACELREPHS_P'] + base_variables['ACELREPHSP2']), (base_variables['ACELREPHS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHS', 0) and saisie_variables.get('CELREPHS', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHS', 0), (max((base_variables['ACELREPHS_P'] + base_variables['ACELREPHSP2']), (base_variables['ACELREPHS1731'] + 0)) and max((base_variables['ACELREPHS_P'] + base_variables['ACELREPHSP2']), (base_variables['ACELREPHS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHS', 0), (max((base_variables['ACELREPHS_P'] + base_variables['ACELREPHSP2']), (base_variables['ACELREPHS1731'] + 0)) and max((base_variables['ACELREPHS_P'] + base_variables['ACELREPHSP2']), (base_variables['ACELREPHS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREP_HS():
        """
        Invt Scellier - 7HS reduc avant imputation droits simples
        """
        return (positif(saisie_variables.get('CELREPHS', 0)) and arr((ACELREPHS() and ACELREPHS() * (TX40 and TX40 / 100))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and positif(saisie_variables.get('CELREPHS', 0)) * arr((ACELREPHS() and ACELREPHS() * (TX40 and TX40 / 100))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHS():
        """
        Reduction Scellier theorique 
        """
        return max(min(RCELREP_HS(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH())), 0)

    @cache_result
    def ACELREPHR():
        """
        Scellier metropole - DOM hors plafond report 2009 - Retenu 7HR
        """
        return (((saisie_variables.get('CELREPHR', 0) and saisie_variables.get('CELREPHR', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHR', 0), (max((base_variables['ACELREPHR_P'] + base_variables['ACELREPHRP2']), (base_variables['ACELREPHR1731'] + 0)) and max((base_variables['ACELREPHR_P'] + base_variables['ACELREPHRP2']), (base_variables['ACELREPHR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHR', 0), (max((base_variables['ACELREPHR_P'] + base_variables['ACELREPHRP2']), (base_variables['ACELREPHR1731'] + 0)) and max((base_variables['ACELREPHR_P'] + base_variables['ACELREPHRP2']), (base_variables['ACELREPHR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHR', 0) and saisie_variables.get('CELREPHR', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHR', 0), (max((base_variables['ACELREPHR_P'] + base_variables['ACELREPHRP2']), (base_variables['ACELREPHR1731'] + 0)) and max((base_variables['ACELREPHR_P'] + base_variables['ACELREPHRP2']), (base_variables['ACELREPHR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHR', 0), (max((base_variables['ACELREPHR_P'] + base_variables['ACELREPHRP2']), (base_variables['ACELREPHR1731'] + 0)) and max((base_variables['ACELREPHR_P'] + base_variables['ACELREPHRP2']), (base_variables['ACELREPHR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREP_HR():
        """
        Invt Scellier - 7HR reduc avant imputation droits simples
        """
        return (positif(saisie_variables.get('CELREPHR', 0)) and arr((ACELREPHR() and ACELREPHR() * (TX25 and TX25 / 100))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and positif(saisie_variables.get('CELREPHR', 0)) * arr((ACELREPHR() and ACELREPHR() * (TX25 and TX25 / 100))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHR():
        """
        Reduction Scellier theorique 
        """
        return max(min(RCELREP_HR(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS()]))), 0)

    @cache_result
    def ACELREPHU():
        """
        Scellier DOM COM hors plafond 5/2009 31/12/2009- Retenu 7HU
        """
        return (((saisie_variables.get('CELREPHU', 0) and saisie_variables.get('CELREPHU', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHU', 0), (max((base_variables['ACELREPHU_P'] + base_variables['ACELREPHUP2']), (base_variables['ACELREPHU1731'] + 0)) and max((base_variables['ACELREPHU_P'] + base_variables['ACELREPHUP2']), (base_variables['ACELREPHU1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHU', 0), (max((base_variables['ACELREPHU_P'] + base_variables['ACELREPHUP2']), (base_variables['ACELREPHU1731'] + 0)) and max((base_variables['ACELREPHU_P'] + base_variables['ACELREPHUP2']), (base_variables['ACELREPHU1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHU', 0) and saisie_variables.get('CELREPHU', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHU', 0), (max((base_variables['ACELREPHU_P'] + base_variables['ACELREPHUP2']), (base_variables['ACELREPHU1731'] + 0)) and max((base_variables['ACELREPHU_P'] + base_variables['ACELREPHUP2']), (base_variables['ACELREPHU1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHU', 0), (max((base_variables['ACELREPHU_P'] + base_variables['ACELREPHUP2']), (base_variables['ACELREPHU1731'] + 0)) and max((base_variables['ACELREPHU_P'] + base_variables['ACELREPHUP2']), (base_variables['ACELREPHU1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREP_HU():
        """
        Invt Scellier - 7HU reduc avant imputation droits simples
        """
        return (positif(saisie_variables.get('CELREPHU', 0)) and arr((ACELREPHU() and ACELREPHU() * (TX40 and TX40 / 100))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and positif(saisie_variables.get('CELREPHU', 0)) * arr((ACELREPHU() and ACELREPHU() * (TX40 and TX40 / 100))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHU():
        """
        Reduction Scellier theorique 
        """
        return max(min(RCELREP_HU(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR()]))), 0)

    @cache_result
    def ACELREPHT():
        """
        Scellier metropole DOM : Report  - Retenu 7HT
        """
        return (((saisie_variables.get('CELREPHT', 0) and saisie_variables.get('CELREPHT', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHT', 0), (max((base_variables['ACELREPHT_P'] + base_variables['ACELREPHTP2']), (base_variables['ACELREPHT1731'] + 0)) and max((base_variables['ACELREPHT_P'] + base_variables['ACELREPHTP2']), (base_variables['ACELREPHT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHT', 0), (max((base_variables['ACELREPHT_P'] + base_variables['ACELREPHTP2']), (base_variables['ACELREPHT1731'] + 0)) and max((base_variables['ACELREPHT_P'] + base_variables['ACELREPHTP2']), (base_variables['ACELREPHT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHT', 0) and saisie_variables.get('CELREPHT', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHT', 0), (max((base_variables['ACELREPHT_P'] + base_variables['ACELREPHTP2']), (base_variables['ACELREPHT1731'] + 0)) and max((base_variables['ACELREPHT_P'] + base_variables['ACELREPHTP2']), (base_variables['ACELREPHT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHT', 0), (max((base_variables['ACELREPHT_P'] + base_variables['ACELREPHTP2']), (base_variables['ACELREPHT1731'] + 0)) and max((base_variables['ACELREPHT_P'] + base_variables['ACELREPHTP2']), (base_variables['ACELREPHT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREP_HT():
        """
        Invt Scellier - 7HT reduc avant imputation droits simples
        """
        return (positif(saisie_variables.get('CELREPHT', 0)) and arr((ACELREPHT() and ACELREPHT() * (TX25 and TX25 / 100))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and positif(saisie_variables.get('CELREPHT', 0)) * arr((ACELREPHT() and ACELREPHT() * (TX25 and TX25 / 100))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHT():
        """
        Reduction Scellier theorique 
        """
        return max(min(RCELREP_HT(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU()]))), 0)

    @cache_result
    def ACELREPHZ():
        """
        Scellier DOM COM pa 2009 fini 2010 : Report - Retenu 7HZ
        """
        return (((saisie_variables.get('CELREPHZ', 0) and saisie_variables.get('CELREPHZ', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHZ', 0), (max((base_variables['ACELREPHZ_P'] + base_variables['ACELREPHZP2']), (base_variables['ACELREPHZ1731'] + 0)) and max((base_variables['ACELREPHZ_P'] + base_variables['ACELREPHZP2']), (base_variables['ACELREPHZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHZ', 0), (max((base_variables['ACELREPHZ_P'] + base_variables['ACELREPHZP2']), (base_variables['ACELREPHZ1731'] + 0)) and max((base_variables['ACELREPHZ_P'] + base_variables['ACELREPHZP2']), (base_variables['ACELREPHZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHZ', 0) and saisie_variables.get('CELREPHZ', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHZ', 0), (max((base_variables['ACELREPHZ_P'] + base_variables['ACELREPHZP2']), (base_variables['ACELREPHZ1731'] + 0)) and max((base_variables['ACELREPHZ_P'] + base_variables['ACELREPHZP2']), (base_variables['ACELREPHZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHZ', 0), (max((base_variables['ACELREPHZ_P'] + base_variables['ACELREPHZP2']), (base_variables['ACELREPHZ1731'] + 0)) and max((base_variables['ACELREPHZ_P'] + base_variables['ACELREPHZP2']), (base_variables['ACELREPHZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREP_HZ():
        """
        Invt Scellier - 7HZ reduc avant imputation droits simples
        """
        return (positif(saisie_variables.get('CELREPHZ', 0)) and arr((ACELREPHZ() and ACELREPHZ() * (TX40 and TX40 / 100))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and positif(saisie_variables.get('CELREPHZ', 0)) * arr((ACELREPHZ() and ACELREPHZ() * (TX40 and TX40 / 100))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHZ():
        """
        Reduction Scellier theorique 
        """
        return max(min(RCELREP_HZ(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT()]))), 0)

    @cache_result
    def ACELREPHX():
        """
        Scellier metropole pa 2009 fini 2010 : Report - Retenu 7HX
        """
        return (((saisie_variables.get('CELREPHX', 0) and saisie_variables.get('CELREPHX', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHX', 0), (max((base_variables['ACELREPHX_P'] + base_variables['ACELREPHXP2']), (base_variables['ACELREPHX1731'] + 0)) and max((base_variables['ACELREPHX_P'] + base_variables['ACELREPHXP2']), (base_variables['ACELREPHX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHX', 0), (max((base_variables['ACELREPHX_P'] + base_variables['ACELREPHXP2']), (base_variables['ACELREPHX1731'] + 0)) and max((base_variables['ACELREPHX_P'] + base_variables['ACELREPHXP2']), (base_variables['ACELREPHX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHX', 0) and saisie_variables.get('CELREPHX', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHX', 0), (max((base_variables['ACELREPHX_P'] + base_variables['ACELREPHXP2']), (base_variables['ACELREPHX1731'] + 0)) and max((base_variables['ACELREPHX_P'] + base_variables['ACELREPHXP2']), (base_variables['ACELREPHX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHX', 0), (max((base_variables['ACELREPHX_P'] + base_variables['ACELREPHXP2']), (base_variables['ACELREPHX1731'] + 0)) and max((base_variables['ACELREPHX_P'] + base_variables['ACELREPHXP2']), (base_variables['ACELREPHX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREP_HX():
        """
        Invt Scellier - 7HX reduc avant imputation droits simples
        """
        return (positif(saisie_variables.get('CELREPHX', 0)) and arr((ACELREPHX() and ACELREPHX() * (TX25 and TX25 / 100))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and positif(saisie_variables.get('CELREPHX', 0)) * arr((ACELREPHX() and ACELREPHX() * (TX25 and TX25 / 100))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHX():
        """
        Reduction Scellier theorique 
        """
        return max(min(RCELREP_HX(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ()]))), 0)

    @cache_result
    def ACELREPHW():
        """
        Investissement Scellier DOM COM 2010 : Report- Retenu 7HW
        """
        return (((saisie_variables.get('CELREPHW', 0) and saisie_variables.get('CELREPHW', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHW', 0), (max((base_variables['ACELREPHW_P'] + base_variables['ACELREPHWP2']), (base_variables['ACELREPHW1731'] + 0)) and max((base_variables['ACELREPHW_P'] + base_variables['ACELREPHWP2']), (base_variables['ACELREPHW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHW', 0), (max((base_variables['ACELREPHW_P'] + base_variables['ACELREPHWP2']), (base_variables['ACELREPHW1731'] + 0)) and max((base_variables['ACELREPHW_P'] + base_variables['ACELREPHWP2']), (base_variables['ACELREPHW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHW', 0) and saisie_variables.get('CELREPHW', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHW', 0), (max((base_variables['ACELREPHW_P'] + base_variables['ACELREPHWP2']), (base_variables['ACELREPHW1731'] + 0)) and max((base_variables['ACELREPHW_P'] + base_variables['ACELREPHWP2']), (base_variables['ACELREPHW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHW', 0), (max((base_variables['ACELREPHW_P'] + base_variables['ACELREPHWP2']), (base_variables['ACELREPHW1731'] + 0)) and max((base_variables['ACELREPHW_P'] + base_variables['ACELREPHWP2']), (base_variables['ACELREPHW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREP_HW():
        """
        Invt Scellier - 7HW reduc avant imputation droits simples
        """
        return (positif(saisie_variables.get('CELREPHW', 0)) and arr((ACELREPHW() and ACELREPHW() * (TX40 and TX40 / 100))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and positif(saisie_variables.get('CELREPHW', 0)) * arr((ACELREPHW() and ACELREPHW() * (TX40 and TX40 / 100))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHW():
        """
        Reduction Scellier theorique 
        """
        return max(min(RCELREP_HW(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX()]))), 0)

    @cache_result
    def ACELREPHV():
        """
        Investissement Scellier metropole 2010 : Report- Retenu 7HV
        """
        return (((saisie_variables.get('CELREPHV', 0) and saisie_variables.get('CELREPHV', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHV', 0), (max((base_variables['ACELREPHV_P'] + base_variables['ACELREPHVP2']), (base_variables['ACELREPHV1731'] + 0)) and max((base_variables['ACELREPHV_P'] + base_variables['ACELREPHVP2']), (base_variables['ACELREPHV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHV', 0), (max((base_variables['ACELREPHV_P'] + base_variables['ACELREPHVP2']), (base_variables['ACELREPHV1731'] + 0)) and max((base_variables['ACELREPHV_P'] + base_variables['ACELREPHVP2']), (base_variables['ACELREPHV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHV', 0) and saisie_variables.get('CELREPHV', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHV', 0), (max((base_variables['ACELREPHV_P'] + base_variables['ACELREPHVP2']), (base_variables['ACELREPHV1731'] + 0)) and max((base_variables['ACELREPHV_P'] + base_variables['ACELREPHVP2']), (base_variables['ACELREPHV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHV', 0), (max((base_variables['ACELREPHV_P'] + base_variables['ACELREPHVP2']), (base_variables['ACELREPHV1731'] + 0)) and max((base_variables['ACELREPHV_P'] + base_variables['ACELREPHVP2']), (base_variables['ACELREPHV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREP_HV():
        """
        Invt Scellier - 7HV reduc avant imputation droits simples
        """
        return (positif(saisie_variables.get('CELREPHV', 0)) and arr((ACELREPHV() and ACELREPHV() * (TX25 and TX25 / 100))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and positif(saisie_variables.get('CELREPHV', 0)) * arr((ACELREPHV() and ACELREPHV() * (TX25 and TX25 / 100))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHV():
        """
        Reduction Scellier theorique 
        """
        return max(min(RCELREP_HV(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW()]))), 0)

    @cache_result
    def ACELREPHF():
        """
        Investissement Scellier report reduction - Retenu 7HF
        """
        return (((saisie_variables.get('CELREPHF', 0) and saisie_variables.get('CELREPHF', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHF', 0), (max((base_variables['ACELREPHF_P'] + base_variables['ACELREPHFP2']), (base_variables['ACELREPHF1731'] + 0)) and max((base_variables['ACELREPHF_P'] + base_variables['ACELREPHFP2']), (base_variables['ACELREPHF1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHF', 0), (max((base_variables['ACELREPHF_P'] + base_variables['ACELREPHFP2']), (base_variables['ACELREPHF1731'] + 0)) and max((base_variables['ACELREPHF_P'] + base_variables['ACELREPHFP2']), (base_variables['ACELREPHF1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHF', 0) and saisie_variables.get('CELREPHF', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHF', 0), (max((base_variables['ACELREPHF_P'] + base_variables['ACELREPHFP2']), (base_variables['ACELREPHF1731'] + 0)) and max((base_variables['ACELREPHF_P'] + base_variables['ACELREPHFP2']), (base_variables['ACELREPHF1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHF', 0), (max((base_variables['ACELREPHF_P'] + base_variables['ACELREPHFP2']), (base_variables['ACELREPHF1731'] + 0)) and max((base_variables['ACELREPHF_P'] + base_variables['ACELREPHFP2']), (base_variables['ACELREPHF1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHF():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPHF(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV()]))), 0)

    @cache_result
    def ACELREPHE():
        """
        Investissement Scellier report reduction - Retenu 7HE
        """
        return (((saisie_variables.get('CELREPHE', 0) and saisie_variables.get('CELREPHE', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHE', 0), (max((base_variables['ACELREPHE_P'] + base_variables['ACELREPHEP2']), (base_variables['ACELREPHE1731'] + 0)) and max((base_variables['ACELREPHE_P'] + base_variables['ACELREPHEP2']), (base_variables['ACELREPHE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHE', 0), (max((base_variables['ACELREPHE_P'] + base_variables['ACELREPHEP2']), (base_variables['ACELREPHE1731'] + 0)) and max((base_variables['ACELREPHE_P'] + base_variables['ACELREPHEP2']), (base_variables['ACELREPHE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHE', 0) and saisie_variables.get('CELREPHE', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHE', 0), (max((base_variables['ACELREPHE_P'] + base_variables['ACELREPHEP2']), (base_variables['ACELREPHE1731'] + 0)) and max((base_variables['ACELREPHE_P'] + base_variables['ACELREPHEP2']), (base_variables['ACELREPHE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHE', 0), (max((base_variables['ACELREPHE_P'] + base_variables['ACELREPHEP2']), (base_variables['ACELREPHE1731'] + 0)) and max((base_variables['ACELREPHE_P'] + base_variables['ACELREPHEP2']), (base_variables['ACELREPHE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHE():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPHE(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF()]))), 0)

    @cache_result
    def ACELREPHD():
        """
        Investissement Scellier report reduction - Retenu 7HD
        """
        return (((saisie_variables.get('CELREPHD', 0) and saisie_variables.get('CELREPHD', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHD', 0), (max((base_variables['ACELREPHD_P'] + base_variables['ACELREPHDP2']), (base_variables['ACELREPHD1731'] + 0)) and max((base_variables['ACELREPHD_P'] + base_variables['ACELREPHDP2']), (base_variables['ACELREPHD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHD', 0), (max((base_variables['ACELREPHD_P'] + base_variables['ACELREPHDP2']), (base_variables['ACELREPHD1731'] + 0)) and max((base_variables['ACELREPHD_P'] + base_variables['ACELREPHDP2']), (base_variables['ACELREPHD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHD', 0) and saisie_variables.get('CELREPHD', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHD', 0), (max((base_variables['ACELREPHD_P'] + base_variables['ACELREPHDP2']), (base_variables['ACELREPHD1731'] + 0)) and max((base_variables['ACELREPHD_P'] + base_variables['ACELREPHDP2']), (base_variables['ACELREPHD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHD', 0), (max((base_variables['ACELREPHD_P'] + base_variables['ACELREPHDP2']), (base_variables['ACELREPHD1731'] + 0)) and max((base_variables['ACELREPHD_P'] + base_variables['ACELREPHDP2']), (base_variables['ACELREPHD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHD():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPHD(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE()]))), 0)

    @cache_result
    def ACELREPHH():
        """
        Investissement Scellier report reduction - Retenu 7HH
        """
        return (((saisie_variables.get('CELREPHH', 0) and saisie_variables.get('CELREPHH', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHH', 0), (max((base_variables['ACELREPHH_P'] + base_variables['ACELREPHHP2']), (base_variables['ACELREPHH1731'] + 0)) and max((base_variables['ACELREPHH_P'] + base_variables['ACELREPHHP2']), (base_variables['ACELREPHH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHH', 0), (max((base_variables['ACELREPHH_P'] + base_variables['ACELREPHHP2']), (base_variables['ACELREPHH1731'] + 0)) and max((base_variables['ACELREPHH_P'] + base_variables['ACELREPHHP2']), (base_variables['ACELREPHH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHH', 0) and saisie_variables.get('CELREPHH', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHH', 0), (max((base_variables['ACELREPHH_P'] + base_variables['ACELREPHHP2']), (base_variables['ACELREPHH1731'] + 0)) and max((base_variables['ACELREPHH_P'] + base_variables['ACELREPHHP2']), (base_variables['ACELREPHH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHH', 0), (max((base_variables['ACELREPHH_P'] + base_variables['ACELREPHHP2']), (base_variables['ACELREPHH1731'] + 0)) and max((base_variables['ACELREPHH_P'] + base_variables['ACELREPHHP2']), (base_variables['ACELREPHH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHH():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPHH(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD()]))), 0)

    @cache_result
    def ACELREPHG():
        """
        Investissement Scellier report reduction - Retenu 7HG
        """
        return (((saisie_variables.get('CELREPHG', 0) and saisie_variables.get('CELREPHG', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHG', 0), (max((base_variables['ACELREPHG_P'] + base_variables['ACELREPHGP2']), (base_variables['ACELREPHG1731'] + 0)) and max((base_variables['ACELREPHG_P'] + base_variables['ACELREPHGP2']), (base_variables['ACELREPHG1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHG', 0), (max((base_variables['ACELREPHG_P'] + base_variables['ACELREPHGP2']), (base_variables['ACELREPHG1731'] + 0)) and max((base_variables['ACELREPHG_P'] + base_variables['ACELREPHGP2']), (base_variables['ACELREPHG1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHG', 0) and saisie_variables.get('CELREPHG', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHG', 0), (max((base_variables['ACELREPHG_P'] + base_variables['ACELREPHGP2']), (base_variables['ACELREPHG1731'] + 0)) and max((base_variables['ACELREPHG_P'] + base_variables['ACELREPHGP2']), (base_variables['ACELREPHG1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHG', 0), (max((base_variables['ACELREPHG_P'] + base_variables['ACELREPHGP2']), (base_variables['ACELREPHG1731'] + 0)) and max((base_variables['ACELREPHG_P'] + base_variables['ACELREPHGP2']), (base_variables['ACELREPHG1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHG():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPHG(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH()]))), 0)

    @cache_result
    def ACELREPHB():
        """
        Investissement Scellier report reduction - Retenu 7HB
        """
        return (((saisie_variables.get('CELREPHB', 0) and saisie_variables.get('CELREPHB', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHB', 0), (max((base_variables['ACELREPHB_P'] + base_variables['ACELREPHBP2']), (base_variables['ACELREPHB1731'] + 0)) and max((base_variables['ACELREPHB_P'] + base_variables['ACELREPHBP2']), (base_variables['ACELREPHB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHB', 0), (max((base_variables['ACELREPHB_P'] + base_variables['ACELREPHBP2']), (base_variables['ACELREPHB1731'] + 0)) and max((base_variables['ACELREPHB_P'] + base_variables['ACELREPHBP2']), (base_variables['ACELREPHB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHB', 0) and saisie_variables.get('CELREPHB', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHB', 0), (max((base_variables['ACELREPHB_P'] + base_variables['ACELREPHBP2']), (base_variables['ACELREPHB1731'] + 0)) and max((base_variables['ACELREPHB_P'] + base_variables['ACELREPHBP2']), (base_variables['ACELREPHB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHB', 0), (max((base_variables['ACELREPHB_P'] + base_variables['ACELREPHBP2']), (base_variables['ACELREPHB1731'] + 0)) and max((base_variables['ACELREPHB_P'] + base_variables['ACELREPHBP2']), (base_variables['ACELREPHB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHB():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPHB(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG()]))), 0)

    @cache_result
    def ACELREPHA():
        """
        Investissement Scellier report reduction - Retenu 7HA
        """
        return (((saisie_variables.get('CELREPHA', 0) and saisie_variables.get('CELREPHA', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHA', 0), (max((base_variables['ACELREPHA_P'] + base_variables['ACELREPHAP2']), (base_variables['ACELREPHA1731'] + 0)) and max((base_variables['ACELREPHA_P'] + base_variables['ACELREPHAP2']), (base_variables['ACELREPHA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHA', 0), (max((base_variables['ACELREPHA_P'] + base_variables['ACELREPHAP2']), (base_variables['ACELREPHA1731'] + 0)) and max((base_variables['ACELREPHA_P'] + base_variables['ACELREPHAP2']), (base_variables['ACELREPHA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPHA', 0) and saisie_variables.get('CELREPHA', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPHA', 0), (max((base_variables['ACELREPHA_P'] + base_variables['ACELREPHAP2']), (base_variables['ACELREPHA1731'] + 0)) and max((base_variables['ACELREPHA_P'] + base_variables['ACELREPHAP2']), (base_variables['ACELREPHA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPHA', 0), (max((base_variables['ACELREPHA_P'] + base_variables['ACELREPHAP2']), (base_variables['ACELREPHA1731'] + 0)) and max((base_variables['ACELREPHA_P'] + base_variables['ACELREPHAP2']), (base_variables['ACELREPHA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPHA():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPHA(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB()]))), 0)

    @cache_result
    def ACELREPGU():
        """
        Investissement Scellier report reduction - Retenu 7GU
        """
        return (((saisie_variables.get('CELREPGU', 0) and saisie_variables.get('CELREPGU', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGU', 0), (max((base_variables['ACELREPGU_P'] + base_variables['ACELREPGUP2']), (base_variables['ACELREPGU1731'] + 0)) and max((base_variables['ACELREPGU_P'] + base_variables['ACELREPGUP2']), (base_variables['ACELREPGU1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGU', 0), (max((base_variables['ACELREPGU_P'] + base_variables['ACELREPGUP2']), (base_variables['ACELREPGU1731'] + 0)) and max((base_variables['ACELREPGU_P'] + base_variables['ACELREPGUP2']), (base_variables['ACELREPGU1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPGU', 0) and saisie_variables.get('CELREPGU', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGU', 0), (max((base_variables['ACELREPGU_P'] + base_variables['ACELREPGUP2']), (base_variables['ACELREPGU1731'] + 0)) and max((base_variables['ACELREPGU_P'] + base_variables['ACELREPGUP2']), (base_variables['ACELREPGU1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGU', 0), (max((base_variables['ACELREPGU_P'] + base_variables['ACELREPGUP2']), (base_variables['ACELREPGU1731'] + 0)) and max((base_variables['ACELREPGU_P'] + base_variables['ACELREPGUP2']), (base_variables['ACELREPGU1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPGU():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPGU(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB()]))), 0)

    @cache_result
    def ACELREPGX():
        """
        Investissement Scellier report reduction - Retenu 7GX
        """
        return (((saisie_variables.get('CELREPGX', 0) and saisie_variables.get('CELREPGX', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGX', 0), (max((base_variables['ACELREPGX_P'] + base_variables['ACELREPGXP2']), (base_variables['ACELREPGX1731'] + 0)) and max((base_variables['ACELREPGX_P'] + base_variables['ACELREPGXP2']), (base_variables['ACELREPGX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGX', 0), (max((base_variables['ACELREPGX_P'] + base_variables['ACELREPGXP2']), (base_variables['ACELREPGX1731'] + 0)) and max((base_variables['ACELREPGX_P'] + base_variables['ACELREPGXP2']), (base_variables['ACELREPGX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPGX', 0) and saisie_variables.get('CELREPGX', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGX', 0), (max((base_variables['ACELREPGX_P'] + base_variables['ACELREPGXP2']), (base_variables['ACELREPGX1731'] + 0)) and max((base_variables['ACELREPGX_P'] + base_variables['ACELREPGXP2']), (base_variables['ACELREPGX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGX', 0), (max((base_variables['ACELREPGX_P'] + base_variables['ACELREPGXP2']), (base_variables['ACELREPGX1731'] + 0)) and max((base_variables['ACELREPGX_P'] + base_variables['ACELREPGXP2']), (base_variables['ACELREPGX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPGX():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPGX(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB()]) - somme([NRCELREPGU()]))), 0)

    @cache_result
    def ACELREPGT():
        """
        Investissement Scellier report reduction - Retenu 7GT
        """
        return (((saisie_variables.get('CELREPGT', 0) and saisie_variables.get('CELREPGT', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGT', 0), (max((base_variables['ACELREPGT_P'] + base_variables['ACELREPGTP2']), (base_variables['ACELREPGT1731'] + 0)) and max((base_variables['ACELREPGT_P'] + base_variables['ACELREPGTP2']), (base_variables['ACELREPGT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGT', 0), (max((base_variables['ACELREPGT_P'] + base_variables['ACELREPGTP2']), (base_variables['ACELREPGT1731'] + 0)) and max((base_variables['ACELREPGT_P'] + base_variables['ACELREPGTP2']), (base_variables['ACELREPGT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPGT', 0) and saisie_variables.get('CELREPGT', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGT', 0), (max((base_variables['ACELREPGT_P'] + base_variables['ACELREPGTP2']), (base_variables['ACELREPGT1731'] + 0)) and max((base_variables['ACELREPGT_P'] + base_variables['ACELREPGTP2']), (base_variables['ACELREPGT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGT', 0), (max((base_variables['ACELREPGT_P'] + base_variables['ACELREPGTP2']), (base_variables['ACELREPGT1731'] + 0)) and max((base_variables['ACELREPGT_P'] + base_variables['ACELREPGTP2']), (base_variables['ACELREPGT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPGT():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPGT(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB()]) - somme([NRCELREPGU(), NRCELREPGX()]))), 0)

    @cache_result
    def ACELREPGS():
        """
        Investissement Scellier report reduction - Retenu 7GS
        """
        return (((saisie_variables.get('CELREPGS', 0) and saisie_variables.get('CELREPGS', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGS', 0), (max((base_variables['ACELREPGS_P'] + base_variables['ACELREPGSP2']), (base_variables['ACELREPGS1731'] + 0)) and max((base_variables['ACELREPGS_P'] + base_variables['ACELREPGSP2']), (base_variables['ACELREPGS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGS', 0), (max((base_variables['ACELREPGS_P'] + base_variables['ACELREPGSP2']), (base_variables['ACELREPGS1731'] + 0)) and max((base_variables['ACELREPGS_P'] + base_variables['ACELREPGSP2']), (base_variables['ACELREPGS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPGS', 0) and saisie_variables.get('CELREPGS', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGS', 0), (max((base_variables['ACELREPGS_P'] + base_variables['ACELREPGSP2']), (base_variables['ACELREPGS1731'] + 0)) and max((base_variables['ACELREPGS_P'] + base_variables['ACELREPGSP2']), (base_variables['ACELREPGS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGS', 0), (max((base_variables['ACELREPGS_P'] + base_variables['ACELREPGSP2']), (base_variables['ACELREPGS1731'] + 0)) and max((base_variables['ACELREPGS_P'] + base_variables['ACELREPGSP2']), (base_variables['ACELREPGS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPGS():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPGS(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT()]))), 0)

    @cache_result
    def ACELREPGW():
        """
        Investissement Scellier report reduction - Retenu 7GW
        """
        return (((saisie_variables.get('CELREPGW', 0) and saisie_variables.get('CELREPGW', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGW', 0), (max((base_variables['ACELREPGW_P'] + base_variables['ACELREPGWP2']), (base_variables['ACELREPGW1731'] + 0)) and max((base_variables['ACELREPGW_P'] + base_variables['ACELREPGWP2']), (base_variables['ACELREPGW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGW', 0), (max((base_variables['ACELREPGW_P'] + base_variables['ACELREPGWP2']), (base_variables['ACELREPGW1731'] + 0)) and max((base_variables['ACELREPGW_P'] + base_variables['ACELREPGWP2']), (base_variables['ACELREPGW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPGW', 0) and saisie_variables.get('CELREPGW', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGW', 0), (max((base_variables['ACELREPGW_P'] + base_variables['ACELREPGWP2']), (base_variables['ACELREPGW1731'] + 0)) and max((base_variables['ACELREPGW_P'] + base_variables['ACELREPGWP2']), (base_variables['ACELREPGW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGW', 0), (max((base_variables['ACELREPGW_P'] + base_variables['ACELREPGWP2']), (base_variables['ACELREPGW1731'] + 0)) and max((base_variables['ACELREPGW_P'] + base_variables['ACELREPGWP2']), (base_variables['ACELREPGW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPGW():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPGW(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS()]))), 0)

    @cache_result
    def ACELREPGP():
        """
        Investissement Scellier report reduction - Retenu 7GP
        """
        return (((saisie_variables.get('CELREPGP', 0) and saisie_variables.get('CELREPGP', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGP', 0), (max((base_variables['ACELREPGP_P'] + base_variables['ACELREPGPP2']), (base_variables['ACELREPGP1731'] + 0)) and max((base_variables['ACELREPGP_P'] + base_variables['ACELREPGPP2']), (base_variables['ACELREPGP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGP', 0), (max((base_variables['ACELREPGP_P'] + base_variables['ACELREPGPP2']), (base_variables['ACELREPGP1731'] + 0)) and max((base_variables['ACELREPGP_P'] + base_variables['ACELREPGPP2']), (base_variables['ACELREPGP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPGP', 0) and saisie_variables.get('CELREPGP', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGP', 0), (max((base_variables['ACELREPGP_P'] + base_variables['ACELREPGPP2']), (base_variables['ACELREPGP1731'] + 0)) and max((base_variables['ACELREPGP_P'] + base_variables['ACELREPGPP2']), (base_variables['ACELREPGP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGP', 0), (max((base_variables['ACELREPGP_P'] + base_variables['ACELREPGPP2']), (base_variables['ACELREPGP1731'] + 0)) and max((base_variables['ACELREPGP_P'] + base_variables['ACELREPGPP2']), (base_variables['ACELREPGP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPGP():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPGP(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW()]))), 0)

    @cache_result
    def ACELREPGL():
        """
        Investissement Scellier report reduction - Retenu 7GL
        """
        return (((saisie_variables.get('CELREPGL', 0) and saisie_variables.get('CELREPGL', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGL', 0), (max((base_variables['ACELREPGL_P'] + base_variables['ACELREPGLP2']), (base_variables['ACELREPGL1731'] + 0)) and max((base_variables['ACELREPGL_P'] + base_variables['ACELREPGLP2']), (base_variables['ACELREPGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGL', 0), (max((base_variables['ACELREPGL_P'] + base_variables['ACELREPGLP2']), (base_variables['ACELREPGL1731'] + 0)) and max((base_variables['ACELREPGL_P'] + base_variables['ACELREPGLP2']), (base_variables['ACELREPGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPGL', 0) and saisie_variables.get('CELREPGL', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGL', 0), (max((base_variables['ACELREPGL_P'] + base_variables['ACELREPGLP2']), (base_variables['ACELREPGL1731'] + 0)) and max((base_variables['ACELREPGL_P'] + base_variables['ACELREPGLP2']), (base_variables['ACELREPGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGL', 0), (max((base_variables['ACELREPGL_P'] + base_variables['ACELREPGLP2']), (base_variables['ACELREPGL1731'] + 0)) and max((base_variables['ACELREPGL_P'] + base_variables['ACELREPGLP2']), (base_variables['ACELREPGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPGL():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPGL(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP()]))), 0)

    @cache_result
    def ACELREPGV():
        """
        Investissement Scellier report reduction - Retenu 7GV
        """
        return (((saisie_variables.get('CELREPGV', 0) and saisie_variables.get('CELREPGV', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGV', 0), (max((base_variables['ACELREPGV_P'] + base_variables['ACELREPGVP2']), (base_variables['ACELREPGV1731'] + 0)) and max((base_variables['ACELREPGV_P'] + base_variables['ACELREPGVP2']), (base_variables['ACELREPGV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGV', 0), (max((base_variables['ACELREPGV_P'] + base_variables['ACELREPGVP2']), (base_variables['ACELREPGV1731'] + 0)) and max((base_variables['ACELREPGV_P'] + base_variables['ACELREPGVP2']), (base_variables['ACELREPGV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPGV', 0) and saisie_variables.get('CELREPGV', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGV', 0), (max((base_variables['ACELREPGV_P'] + base_variables['ACELREPGVP2']), (base_variables['ACELREPGV1731'] + 0)) and max((base_variables['ACELREPGV_P'] + base_variables['ACELREPGVP2']), (base_variables['ACELREPGV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGV', 0), (max((base_variables['ACELREPGV_P'] + base_variables['ACELREPGVP2']), (base_variables['ACELREPGV1731'] + 0)) and max((base_variables['ACELREPGV_P'] + base_variables['ACELREPGVP2']), (base_variables['ACELREPGV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPGV():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPGV(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL()]))), 0)

    @cache_result
    def DCELREPGK():
        """
        Invest. Scellier   - Declare 7GK
        """
        return saisie_variables.get('CELREPGK', 0)

    @cache_result
    def ACELREPGK():
        """
        Investissement Scellier report reduction - Retenu 7GK
        """
        return (((saisie_variables.get('CELREPGK', 0) and saisie_variables.get('CELREPGK', 0) * (1 - base_variables['ART1731BIS'])) + (min(DCELREPGK(), (max((base_variables['ACELREPGK_P'] + base_variables['ACELREPGKP2']), (base_variables['ACELREPGK1731'] + 0)) and max((base_variables['ACELREPGK_P'] + base_variables['ACELREPGKP2']), (base_variables['ACELREPGK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DCELREPGK(), (max((base_variables['ACELREPGK_P'] + base_variables['ACELREPGKP2']), (base_variables['ACELREPGK1731'] + 0)) and max((base_variables['ACELREPGK_P'] + base_variables['ACELREPGKP2']), (base_variables['ACELREPGK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPGK', 0) and saisie_variables.get('CELREPGK', 0) * (1 - base_variables['ART1731BIS'])) + (min(DCELREPGK(), (max((base_variables['ACELREPGK_P'] + base_variables['ACELREPGKP2']), (base_variables['ACELREPGK1731'] + 0)) and max((base_variables['ACELREPGK_P'] + base_variables['ACELREPGKP2']), (base_variables['ACELREPGK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DCELREPGK(), (max((base_variables['ACELREPGK_P'] + base_variables['ACELREPGKP2']), (base_variables['ACELREPGK1731'] + 0)) and max((base_variables['ACELREPGK_P'] + base_variables['ACELREPGKP2']), (base_variables['ACELREPGK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPGK():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPGK(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV()]))), 0)

    @cache_result
    def ACELREPGJ():
        """
        Investissement Scellier report reduction - Retenu 7GJ
        """
        return (((saisie_variables.get('CELREPGJ', 0) and saisie_variables.get('CELREPGJ', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGJ', 0), (max((base_variables['ACELREPGJ_P'] + base_variables['ACELREPGJP2']), (base_variables['ACELREPGJ1731'] + 0)) and max((base_variables['ACELREPGJ_P'] + base_variables['ACELREPGJP2']), (base_variables['ACELREPGJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGJ', 0), (max((base_variables['ACELREPGJ_P'] + base_variables['ACELREPGJP2']), (base_variables['ACELREPGJ1731'] + 0)) and max((base_variables['ACELREPGJ_P'] + base_variables['ACELREPGJP2']), (base_variables['ACELREPGJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPGJ', 0) and saisie_variables.get('CELREPGJ', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPGJ', 0), (max((base_variables['ACELREPGJ_P'] + base_variables['ACELREPGJP2']), (base_variables['ACELREPGJ1731'] + 0)) and max((base_variables['ACELREPGJ_P'] + base_variables['ACELREPGJP2']), (base_variables['ACELREPGJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPGJ', 0), (max((base_variables['ACELREPGJ_P'] + base_variables['ACELREPGJP2']), (base_variables['ACELREPGJ1731'] + 0)) and max((base_variables['ACELREPGJ_P'] + base_variables['ACELREPGJP2']), (base_variables['ACELREPGJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPGJ():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPGJ(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK()]))), 0)

    @cache_result
    def ACELREPYH():
        """
        Investissement Scellier report reduction - Retenu 7YH
        """
        return (((saisie_variables.get('CELREPYH', 0) and saisie_variables.get('CELREPYH', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYH', 0), (max((base_variables['ACELREPYH_P'] + base_variables['ACELREPYHP2']), (base_variables['ACELREPYH1731'] + 0)) and max((base_variables['ACELREPYH_P'] + base_variables['ACELREPYHP2']), (base_variables['ACELREPYH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYH', 0), (max((base_variables['ACELREPYH_P'] + base_variables['ACELREPYHP2']), (base_variables['ACELREPYH1731'] + 0)) and max((base_variables['ACELREPYH_P'] + base_variables['ACELREPYHP2']), (base_variables['ACELREPYH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYH', 0) and saisie_variables.get('CELREPYH', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYH', 0), (max((base_variables['ACELREPYH_P'] + base_variables['ACELREPYHP2']), (base_variables['ACELREPYH1731'] + 0)) and max((base_variables['ACELREPYH_P'] + base_variables['ACELREPYHP2']), (base_variables['ACELREPYH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYH', 0), (max((base_variables['ACELREPYH_P'] + base_variables['ACELREPYHP2']), (base_variables['ACELREPYH1731'] + 0)) and max((base_variables['ACELREPYH_P'] + base_variables['ACELREPYHP2']), (base_variables['ACELREPYH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYH():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYH(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]))), 0)

    @cache_result
    def ACELREPYL():
        """
        Investissement Scellier report reduction - Retenu 7YL
        """
        return (((saisie_variables.get('CELREPYL', 0) and saisie_variables.get('CELREPYL', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYL', 0), (max((base_variables['ACELREPYL_P'] + base_variables['ACELREPYLP2']), (base_variables['ACELREPYL1731'] + 0)) and max((base_variables['ACELREPYL_P'] + base_variables['ACELREPYLP2']), (base_variables['ACELREPYL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYL', 0), (max((base_variables['ACELREPYL_P'] + base_variables['ACELREPYLP2']), (base_variables['ACELREPYL1731'] + 0)) and max((base_variables['ACELREPYL_P'] + base_variables['ACELREPYLP2']), (base_variables['ACELREPYL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYL', 0) and saisie_variables.get('CELREPYL', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYL', 0), (max((base_variables['ACELREPYL_P'] + base_variables['ACELREPYLP2']), (base_variables['ACELREPYL1731'] + 0)) and max((base_variables['ACELREPYL_P'] + base_variables['ACELREPYLP2']), (base_variables['ACELREPYL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYL', 0), (max((base_variables['ACELREPYL_P'] + base_variables['ACELREPYLP2']), (base_variables['ACELREPYL1731'] + 0)) and max((base_variables['ACELREPYL_P'] + base_variables['ACELREPYLP2']), (base_variables['ACELREPYL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYL():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYL(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH()]))), 0)

    @cache_result
    def ACELREPYG():
        """
        Investissement Scellier report reduction - Retenu 7YG
        """
        return (((saisie_variables.get('CELREPYG', 0) and saisie_variables.get('CELREPYG', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYG', 0), (max((base_variables['ACELREPYG_P'] + base_variables['ACELREPYGP2']), (base_variables['ACELREPYG1731'] + 0)) and max((base_variables['ACELREPYG_P'] + base_variables['ACELREPYGP2']), (base_variables['ACELREPYG1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYG', 0), (max((base_variables['ACELREPYG_P'] + base_variables['ACELREPYGP2']), (base_variables['ACELREPYG1731'] + 0)) and max((base_variables['ACELREPYG_P'] + base_variables['ACELREPYGP2']), (base_variables['ACELREPYG1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYG', 0) and saisie_variables.get('CELREPYG', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYG', 0), (max((base_variables['ACELREPYG_P'] + base_variables['ACELREPYGP2']), (base_variables['ACELREPYG1731'] + 0)) and max((base_variables['ACELREPYG_P'] + base_variables['ACELREPYGP2']), (base_variables['ACELREPYG1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYG', 0), (max((base_variables['ACELREPYG_P'] + base_variables['ACELREPYGP2']), (base_variables['ACELREPYG1731'] + 0)) and max((base_variables['ACELREPYG_P'] + base_variables['ACELREPYGP2']), (base_variables['ACELREPYG1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYG():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYG(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL()]))), 0)

    @cache_result
    def ACELREPYF():
        """
        Investissement Scellier report reduction - Retenu 7YF
        """
        return (((saisie_variables.get('CELREPYF', 0) and saisie_variables.get('CELREPYF', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYF', 0), (max((base_variables['ACELREPYF_P'] + base_variables['ACELREPYFP2']), (base_variables['ACELREPYF1731'] + 0)) and max((base_variables['ACELREPYF_P'] + base_variables['ACELREPYFP2']), (base_variables['ACELREPYF1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYF', 0), (max((base_variables['ACELREPYF_P'] + base_variables['ACELREPYFP2']), (base_variables['ACELREPYF1731'] + 0)) and max((base_variables['ACELREPYF_P'] + base_variables['ACELREPYFP2']), (base_variables['ACELREPYF1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYF', 0) and saisie_variables.get('CELREPYF', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYF', 0), (max((base_variables['ACELREPYF_P'] + base_variables['ACELREPYFP2']), (base_variables['ACELREPYF1731'] + 0)) and max((base_variables['ACELREPYF_P'] + base_variables['ACELREPYFP2']), (base_variables['ACELREPYF1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYF', 0), (max((base_variables['ACELREPYF_P'] + base_variables['ACELREPYFP2']), (base_variables['ACELREPYF1731'] + 0)) and max((base_variables['ACELREPYF_P'] + base_variables['ACELREPYFP2']), (base_variables['ACELREPYF1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYF():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYF(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG()]))), 0)

    @cache_result
    def ACELREPYK():
        """
        Investissement Scellier report reduction - Retenu 7YK
        """
        return (((saisie_variables.get('CELREPYK', 0) and saisie_variables.get('CELREPYK', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYF', 0), (max((base_variables['ACELREPYK_P'] + base_variables['ACELREPYKP2']), (base_variables['ACELREPYK1731'] + 0)) and max((base_variables['ACELREPYK_P'] + base_variables['ACELREPYKP2']), (base_variables['ACELREPYK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYF', 0), (max((base_variables['ACELREPYK_P'] + base_variables['ACELREPYKP2']), (base_variables['ACELREPYK1731'] + 0)) and max((base_variables['ACELREPYK_P'] + base_variables['ACELREPYKP2']), (base_variables['ACELREPYK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYK', 0) and saisie_variables.get('CELREPYK', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYF', 0), (max((base_variables['ACELREPYK_P'] + base_variables['ACELREPYKP2']), (base_variables['ACELREPYK1731'] + 0)) and max((base_variables['ACELREPYK_P'] + base_variables['ACELREPYKP2']), (base_variables['ACELREPYK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYF', 0), (max((base_variables['ACELREPYK_P'] + base_variables['ACELREPYKP2']), (base_variables['ACELREPYK1731'] + 0)) and max((base_variables['ACELREPYK_P'] + base_variables['ACELREPYKP2']), (base_variables['ACELREPYK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYK():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYK(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF()]))), 0)

    @cache_result
    def ACELREPYE():
        """
        Investissement Scellier report reduction - Retenu 7YE
        """
        return (((saisie_variables.get('CELREPYE', 0) and saisie_variables.get('CELREPYE', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYE', 0), (max((base_variables['ACELREPYE_P'] + base_variables['ACELREPYEP2']), (base_variables['ACELREPYE1731'] + 0)) and max((base_variables['ACELREPYE_P'] + base_variables['ACELREPYEP2']), (base_variables['ACELREPYE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYE', 0), (max((base_variables['ACELREPYE_P'] + base_variables['ACELREPYEP2']), (base_variables['ACELREPYE1731'] + 0)) and max((base_variables['ACELREPYE_P'] + base_variables['ACELREPYEP2']), (base_variables['ACELREPYE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYE', 0) and saisie_variables.get('CELREPYE', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYE', 0), (max((base_variables['ACELREPYE_P'] + base_variables['ACELREPYEP2']), (base_variables['ACELREPYE1731'] + 0)) and max((base_variables['ACELREPYE_P'] + base_variables['ACELREPYEP2']), (base_variables['ACELREPYE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYE', 0), (max((base_variables['ACELREPYE_P'] + base_variables['ACELREPYEP2']), (base_variables['ACELREPYE1731'] + 0)) and max((base_variables['ACELREPYE_P'] + base_variables['ACELREPYEP2']), (base_variables['ACELREPYE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYE():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYE(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK()]))), 0)

    @cache_result
    def ACELREPYD():
        """
        Investissement Scellier report reduction - Retenu 7YD
        """
        return (((saisie_variables.get('CELREPYD', 0) and saisie_variables.get('CELREPYD', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYD', 0), (max((base_variables['ACELREPYD_P'] + base_variables['ACELREPYDP2']), (base_variables['ACELREPYD1731'] + 0)) and max((base_variables['ACELREPYD_P'] + base_variables['ACELREPYDP2']), (base_variables['ACELREPYD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYD', 0), (max((base_variables['ACELREPYD_P'] + base_variables['ACELREPYDP2']), (base_variables['ACELREPYD1731'] + 0)) and max((base_variables['ACELREPYD_P'] + base_variables['ACELREPYDP2']), (base_variables['ACELREPYD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYD', 0) and saisie_variables.get('CELREPYD', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYD', 0), (max((base_variables['ACELREPYD_P'] + base_variables['ACELREPYDP2']), (base_variables['ACELREPYD1731'] + 0)) and max((base_variables['ACELREPYD_P'] + base_variables['ACELREPYDP2']), (base_variables['ACELREPYD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYD', 0), (max((base_variables['ACELREPYD_P'] + base_variables['ACELREPYDP2']), (base_variables['ACELREPYD1731'] + 0)) and max((base_variables['ACELREPYD_P'] + base_variables['ACELREPYDP2']), (base_variables['ACELREPYD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYD():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYD(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE()]))), 0)

    @cache_result
    def ACELREPYJ():
        """
        Investissement Scellier report reduction - Retenu 7YJ
        """
        return (((saisie_variables.get('CELREPYJ', 0) and saisie_variables.get('CELREPYJ', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYJ', 0), (max((base_variables['ACELREPYJ_P'] + base_variables['ACELREPYJP2']), (base_variables['ACELREPYJ1731'] + 0)) and max((base_variables['ACELREPYJ_P'] + base_variables['ACELREPYJP2']), (base_variables['ACELREPYJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYJ', 0), (max((base_variables['ACELREPYJ_P'] + base_variables['ACELREPYJP2']), (base_variables['ACELREPYJ1731'] + 0)) and max((base_variables['ACELREPYJ_P'] + base_variables['ACELREPYJP2']), (base_variables['ACELREPYJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYJ', 0) and saisie_variables.get('CELREPYJ', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYJ', 0), (max((base_variables['ACELREPYJ_P'] + base_variables['ACELREPYJP2']), (base_variables['ACELREPYJ1731'] + 0)) and max((base_variables['ACELREPYJ_P'] + base_variables['ACELREPYJP2']), (base_variables['ACELREPYJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYJ', 0), (max((base_variables['ACELREPYJ_P'] + base_variables['ACELREPYJP2']), (base_variables['ACELREPYJ1731'] + 0)) and max((base_variables['ACELREPYJ_P'] + base_variables['ACELREPYJP2']), (base_variables['ACELREPYJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYJ():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYJ(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD()]))), 0)

    @cache_result
    def ACELREPYC():
        """
        Investissement Scellier report reduction - Retenu 7YC
        """
        return (((saisie_variables.get('CELREPYC', 0) and saisie_variables.get('CELREPYC', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYC', 0), (max((base_variables['ACELREPYC_P'] + base_variables['ACELREPYCP2']), (base_variables['ACELREPYC1731'] + 0)) and max((base_variables['ACELREPYC_P'] + base_variables['ACELREPYCP2']), (base_variables['ACELREPYC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYC', 0), (max((base_variables['ACELREPYC_P'] + base_variables['ACELREPYCP2']), (base_variables['ACELREPYC1731'] + 0)) and max((base_variables['ACELREPYC_P'] + base_variables['ACELREPYCP2']), (base_variables['ACELREPYC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYC', 0) and saisie_variables.get('CELREPYC', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYC', 0), (max((base_variables['ACELREPYC_P'] + base_variables['ACELREPYCP2']), (base_variables['ACELREPYC1731'] + 0)) and max((base_variables['ACELREPYC_P'] + base_variables['ACELREPYCP2']), (base_variables['ACELREPYC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYC', 0), (max((base_variables['ACELREPYC_P'] + base_variables['ACELREPYCP2']), (base_variables['ACELREPYC1731'] + 0)) and max((base_variables['ACELREPYC_P'] + base_variables['ACELREPYCP2']), (base_variables['ACELREPYC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYC():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYC(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ()]))), 0)

    @cache_result
    def ACELREPYB():
        """
        Investissement Scellier report reduction - Retenu 7YB
        """
        return (((saisie_variables.get('CELREPYB', 0) and saisie_variables.get('CELREPYB', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYB', 0), (max((base_variables['ACELREPYB_P'] + base_variables['ACELREPYBP2']), (base_variables['ACELREPYB1731'] + 0)) and max((base_variables['ACELREPYB_P'] + base_variables['ACELREPYBP2']), (base_variables['ACELREPYB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYB', 0), (max((base_variables['ACELREPYB_P'] + base_variables['ACELREPYBP2']), (base_variables['ACELREPYB1731'] + 0)) and max((base_variables['ACELREPYB_P'] + base_variables['ACELREPYBP2']), (base_variables['ACELREPYB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYB', 0) and saisie_variables.get('CELREPYB', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYB', 0), (max((base_variables['ACELREPYB_P'] + base_variables['ACELREPYBP2']), (base_variables['ACELREPYB1731'] + 0)) and max((base_variables['ACELREPYB_P'] + base_variables['ACELREPYBP2']), (base_variables['ACELREPYB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYB', 0), (max((base_variables['ACELREPYB_P'] + base_variables['ACELREPYBP2']), (base_variables['ACELREPYB1731'] + 0)) and max((base_variables['ACELREPYB_P'] + base_variables['ACELREPYBP2']), (base_variables['ACELREPYB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYB():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYB(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC()]))), 0)

    @cache_result
    def ACELREPYI():
        """
        Investissement Scellier report reduction - Retenu 7YI
        """
        return (((saisie_variables.get('CELREPYI', 0) and saisie_variables.get('CELREPYI', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYI', 0), (max((base_variables['ACELREPYI_P'] + base_variables['ACELREPYIP2']), (base_variables['ACELREPYI1731'] + 0)) and max((base_variables['ACELREPYI_P'] + base_variables['ACELREPYIP2']), (base_variables['ACELREPYI1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYI', 0), (max((base_variables['ACELREPYI_P'] + base_variables['ACELREPYIP2']), (base_variables['ACELREPYI1731'] + 0)) and max((base_variables['ACELREPYI_P'] + base_variables['ACELREPYIP2']), (base_variables['ACELREPYI1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYI', 0) and saisie_variables.get('CELREPYI', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYI', 0), (max((base_variables['ACELREPYI_P'] + base_variables['ACELREPYIP2']), (base_variables['ACELREPYI1731'] + 0)) and max((base_variables['ACELREPYI_P'] + base_variables['ACELREPYIP2']), (base_variables['ACELREPYI1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYI', 0), (max((base_variables['ACELREPYI_P'] + base_variables['ACELREPYIP2']), (base_variables['ACELREPYI1731'] + 0)) and max((base_variables['ACELREPYI_P'] + base_variables['ACELREPYIP2']), (base_variables['ACELREPYI1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYI():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYI(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB()]))), 0)

    @cache_result
    def ACELREPYA():
        """
        Investissement Scellier report reduction - Retenu 7YA
        """
        return (((saisie_variables.get('CELREPYA', 0) and saisie_variables.get('CELREPYA', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYA', 0), (max((base_variables['ACELREPYA_P'] + base_variables['ACELREPYAP2']), (base_variables['ACELREPYA1731'] + 0)) and max((base_variables['ACELREPYA_P'] + base_variables['ACELREPYAP2']), (base_variables['ACELREPYA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYA', 0), (max((base_variables['ACELREPYA_P'] + base_variables['ACELREPYAP2']), (base_variables['ACELREPYA1731'] + 0)) and max((base_variables['ACELREPYA_P'] + base_variables['ACELREPYAP2']), (base_variables['ACELREPYA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELREPYA', 0) and saisie_variables.get('CELREPYA', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELREPYA', 0), (max((base_variables['ACELREPYA_P'] + base_variables['ACELREPYAP2']), (base_variables['ACELREPYA1731'] + 0)) and max((base_variables['ACELREPYA_P'] + base_variables['ACELREPYAP2']), (base_variables['ACELREPYA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELREPYA', 0), (max((base_variables['ACELREPYA_P'] + base_variables['ACELREPYAP2']), (base_variables['ACELREPYA1731'] + 0)) and max((base_variables['ACELREPYA_P'] + base_variables['ACELREPYAP2']), (base_variables['ACELREPYA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELREPYA():
        """
        Reduction Scellier theorique 
        """
        return max(min(ACELREPYA(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI()]))), 0)

    @cache_result
    def BCEL_HM():
        """
        Base investissement Scellier 2eme logement dans DOM
        """
        return arr((min((saisie_variables.get('CELLIERHM', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERHM', 0) + 0), LIMCELLIER) / 9))

    @cache_result
    def ACELHM():
        """
        Invest. Scellier DOM dans plafond- Avis Facture - Retenu  7HM
        """
        return (((BCEL_HM() and BCEL_HM() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_HM(), (max((base_variables['ACELHM_P'] + base_variables['ACELHMP2']), (base_variables['ACELHM1731'] + 0)) and max((base_variables['ACELHM_P'] + base_variables['ACELHMP2']), (base_variables['ACELHM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_HM(), (max((base_variables['ACELHM_P'] + base_variables['ACELHMP2']), (base_variables['ACELHM1731'] + 0)) and max((base_variables['ACELHM_P'] + base_variables['ACELHMP2']), (base_variables['ACELHM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul(saisie_variables.get('CELLIERHM', 0)) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_HM() and BCEL_HM() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_HM(), (max((base_variables['ACELHM_P'] + base_variables['ACELHMP2']), (base_variables['ACELHM1731'] + 0)) and max((base_variables['ACELHM_P'] + base_variables['ACELHMP2']), (base_variables['ACELHM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_HM(), (max((base_variables['ACELHM_P'] + base_variables['ACELHMP2']), (base_variables['ACELHM1731'] + 0)) and max((base_variables['ACELHM_P'] + base_variables['ACELHMP2']), (base_variables['ACELHM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul(saisie_variables.get('CELLIERHM', 0)) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_HM():
        """
        Inv. Scellier - Mtant avant imputation sur droits dus
        """
        return (positif(saisie_variables.get('CELLIERHM', 0)) and arr((ACELHM() and ACELHM() * (TX40 and TX40 / 100))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and positif(saisie_variables.get('CELLIERHM', 0)) * arr((ACELHM() and ACELHM() * (TX40 and TX40 / 100))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELHM():
        """
        Scellier DOM 2009 2010 ds plaf -Reduc apres imputation sur droits dus
        """
        return max(min(RCEL_HM(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]))), 0)

    @cache_result
    def BCEL_HL():
        """
        Base investissement Scellier 2eme logement en metropole 
        """
        return arr((min((saisie_variables.get('CELLIERHL', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERHL', 0) + 0), LIMCELLIER) / 9))

    @cache_result
    def ACELHL():
        """
        Scellier metropole -DOM hors plafond- Avis Facture - Retenu  7HL
        """
        return (((BCEL_HL() and BCEL_HL() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_HL(), (max((base_variables['ACELHL_P'] + base_variables['ACELHLP2']), (base_variables['ACELHL1731'] + 0)) and max((base_variables['ACELHL_P'] + base_variables['ACELHLP2']), (base_variables['ACELHL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_HL(), (max((base_variables['ACELHL_P'] + base_variables['ACELHLP2']), (base_variables['ACELHL1731'] + 0)) and max((base_variables['ACELHL_P'] + base_variables['ACELHLP2']), (base_variables['ACELHL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul(saisie_variables.get('CELLIERHL', 0)) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_HL() and BCEL_HL() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_HL(), (max((base_variables['ACELHL_P'] + base_variables['ACELHLP2']), (base_variables['ACELHL1731'] + 0)) and max((base_variables['ACELHL_P'] + base_variables['ACELHLP2']), (base_variables['ACELHL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_HL(), (max((base_variables['ACELHL_P'] + base_variables['ACELHLP2']), (base_variables['ACELHL1731'] + 0)) and max((base_variables['ACELHL_P'] + base_variables['ACELHLP2']), (base_variables['ACELHL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul(saisie_variables.get('CELLIERHL', 0)) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_HL():
        """
        Invt Scellier 2eme logt metro DOM avant imputation sur droits dus-7HL
        """
        return (positif(saisie_variables.get('CELLIERHL', 0)) and arr((ACELHL() and ACELHL() * (TX25 and TX25 / 100))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and positif(saisie_variables.get('CELLIERHL', 0)) * arr((ACELHL() and ACELHL() * (TX25 and TX25 / 100))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELHL():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_HL(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM())), 0)

    @cache_result
    def BCEL_HNO():
        """
        Base investissement Scellier 
        """
        return arr((min((saisie_variables.get('CELLIERHN', 0) + saisie_variables.get('CELLIERHO', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERHN', 0) + saisie_variables.get('CELLIERHO', 0) + 0), LIMCELLIER) / 9))

    @cache_result
    def ACELHNO():
        """
        Investissement Scellier - Retenu  
        """
        return (((BCEL_HNO() and BCEL_HNO() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_HNO(), (max((base_variables['ACELHNO_P'] + base_variables['ACELHNOP2']), (base_variables['ACELHNO1731'] + 0)) and max((base_variables['ACELHNO_P'] + base_variables['ACELHNOP2']), (base_variables['ACELHNO1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_HNO(), (max((base_variables['ACELHNO_P'] + base_variables['ACELHNOP2']), (base_variables['ACELHNO1731'] + 0)) and max((base_variables['ACELHNO_P'] + base_variables['ACELHNOP2']), (base_variables['ACELHNO1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul((saisie_variables.get('CELLIERHN', 0) + saisie_variables.get('CELLIERHO', 0))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_HNO() and BCEL_HNO() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_HNO(), (max((base_variables['ACELHNO_P'] + base_variables['ACELHNOP2']), (base_variables['ACELHNO1731'] + 0)) and max((base_variables['ACELHNO_P'] + base_variables['ACELHNOP2']), (base_variables['ACELHNO1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_HNO(), (max((base_variables['ACELHNO_P'] + base_variables['ACELHNOP2']), (base_variables['ACELHNO1731'] + 0)) and max((base_variables['ACELHNO_P'] + base_variables['ACELHNOP2']), (base_variables['ACELHNO1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul((saisie_variables.get('CELLIERHN', 0) + saisie_variables.get('CELLIERHO', 0))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_HNO():
        """
        Inv. Scellier - Mtant avant imputation sur droits dus
        """
        return (((positif(saisie_variables.get('CELLIERHN', 0)) and positif(saisie_variables.get('CELLIERHN', 0)) * arr((ACELHNO() and ACELHNO() * (TX25 and TX25 / 100)))) + (positif(saisie_variables.get('CELLIERHO', 0)) and positif(saisie_variables.get('CELLIERHO', 0)) * arr((ACELHNO() and ACELHNO() * (TX40 and TX40 / 100))))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((positif(saisie_variables.get('CELLIERHN', 0)) and positif(saisie_variables.get('CELLIERHN', 0)) * arr((ACELHNO() and ACELHNO() * (TX25 and TX25 / 100)))) + (positif(saisie_variables.get('CELLIERHO', 0)) and positif(saisie_variables.get('CELLIERHO', 0)) * arr((ACELHNO() and ACELHNO() * (TX40 and TX40 / 100))))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELHNO():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_HNO(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL())), 0)

    @cache_result
    def BCEL_HJK():
        """
        Base investissement Scellier 
        """
        return arr((min((saisie_variables.get('CELLIERHJ', 0) + saisie_variables.get('CELLIERHK', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERHJ', 0) + saisie_variables.get('CELLIERHK', 0) + 0), LIMCELLIER) / 9))

    @cache_result
    def ACELHJK():
        """
        Investissement Scellier - Retenu  
        """
        return (((BCEL_HJK() and BCEL_HJK() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_HJK(), (max((base_variables['ACELHJK_P'] + base_variables['ACELHJKP2']), (base_variables['ACELHJK1731'] + 0)) and max((base_variables['ACELHJK_P'] + base_variables['ACELHJKP2']), (base_variables['ACELHJK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_HJK(), (max((base_variables['ACELHJK_P'] + base_variables['ACELHJKP2']), (base_variables['ACELHJK1731'] + 0)) and max((base_variables['ACELHJK_P'] + base_variables['ACELHJKP2']), (base_variables['ACELHJK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul((saisie_variables.get('CELLIERHJ', 0) + saisie_variables.get('CELLIERHK', 0))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_HJK() and BCEL_HJK() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_HJK(), (max((base_variables['ACELHJK_P'] + base_variables['ACELHJKP2']), (base_variables['ACELHJK1731'] + 0)) and max((base_variables['ACELHJK_P'] + base_variables['ACELHJKP2']), (base_variables['ACELHJK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_HJK(), (max((base_variables['ACELHJK_P'] + base_variables['ACELHJKP2']), (base_variables['ACELHJK1731'] + 0)) and max((base_variables['ACELHJK_P'] + base_variables['ACELHJKP2']), (base_variables['ACELHJK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul((saisie_variables.get('CELLIERHJ', 0) + saisie_variables.get('CELLIERHK', 0))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_HJK():
        """
        Inv. Scellier - Mtant avant imputation sur droits dus
        """
        return (((positif(saisie_variables.get('CELLIERHJ', 0)) and positif(saisie_variables.get('CELLIERHJ', 0)) * arr((ACELHJK() and ACELHJK() * (TX25 and TX25 / 100)))) + (positif(saisie_variables.get('CELLIERHK', 0)) and positif(saisie_variables.get('CELLIERHK', 0)) * arr((ACELHJK() and ACELHJK() * (TX40 and TX40 / 100))))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((positif(saisie_variables.get('CELLIERHJ', 0)) and positif(saisie_variables.get('CELLIERHJ', 0)) * arr((ACELHJK() and ACELHJK() * (TX25 and TX25 / 100)))) + (positif(saisie_variables.get('CELLIERHK', 0)) and positif(saisie_variables.get('CELLIERHK', 0)) * arr((ACELHJK() and ACELHJK() * (TX40 and TX40 / 100))))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELHJK():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_HJK(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL() - NRCELHNO())), 0)

    @cache_result
    def BCEL_NQ():
        """
        Base investissement Scellier Polynesie engagt avant 2011 
        """
        return arr((min((saisie_variables.get('CELLIERNQ', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERNQ', 0) + 0), LIMCELLIER) / 5))

    @cache_result
    def ACELNQ():
        """
        Investissement Scellier engagement avant 2011 Polynesie - Retenu  
        """
        return (((BCEL_NQ() and BCEL_NQ() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_NQ(), (max((base_variables['ACELNQ_P'] + base_variables['ACELNQP2']), (base_variables['ACELNQ1731'] + 0)) and max((base_variables['ACELNQ_P'] + base_variables['ACELNQP2']), (base_variables['ACELNQ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_NQ(), (max((base_variables['ACELNQ_P'] + base_variables['ACELNQP2']), (base_variables['ACELNQ1731'] + 0)) and max((base_variables['ACELNQ_P'] + base_variables['ACELNQP2']), (base_variables['ACELNQ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul(saisie_variables.get('CELLIERNQ', 0)) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_NQ() and BCEL_NQ() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_NQ(), (max((base_variables['ACELNQ_P'] + base_variables['ACELNQP2']), (base_variables['ACELNQ1731'] + 0)) and max((base_variables['ACELNQ_P'] + base_variables['ACELNQP2']), (base_variables['ACELNQ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_NQ(), (max((base_variables['ACELNQ_P'] + base_variables['ACELNQP2']), (base_variables['ACELNQ1731'] + 0)) and max((base_variables['ACELNQ_P'] + base_variables['ACELNQP2']), (base_variables['ACELNQ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul(saisie_variables.get('CELLIERNQ', 0)) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_NQ():
        """
        Inv. Scellier av 2011 COM- Mtant avant imputation sur droits dus
        """
        return ((positif(saisie_variables.get('CELLIERNQ', 0)) and positif(saisie_variables.get('CELLIERNQ', 0)) * arr((ACELNQ() and ACELNQ() * (TX40 and TX40 / 100)))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and (positif(saisie_variables.get('CELLIERNQ', 0)) and positif(saisie_variables.get('CELLIERNQ', 0)) * arr((ACELNQ() and ACELNQ() * (TX40 and TX40 / 100)))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELNQ():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_NQ(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL() - NRCELHNO() - NRCELHJK())), 0)

    @cache_result
    def BCEL_NBGL():
        """
        Base investissement Scellier engagement avant 2011
        """
        return arr((min((saisie_variables.get('CELLIERNB', 0) + saisie_variables.get('CELLIERNG', 0) + saisie_variables.get('CELLIERNL', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERNB', 0) + saisie_variables.get('CELLIERNG', 0) + saisie_variables.get('CELLIERNL', 0) + 0), LIMCELLIER) / 9))

    @cache_result
    def ACELNBGL():
        """
        Investissement Scellier engagement avant 2011- Retenu  
        """
        return (((BCEL_NBGL() and BCEL_NBGL() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_NBGL(), (max((base_variables['ACELNBGL_P'] + base_variables['ACELNBGLP2']), (base_variables['ACELNBGL1731'] + 0)) and max((base_variables['ACELNBGL_P'] + base_variables['ACELNBGLP2']), (base_variables['ACELNBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_NBGL(), (max((base_variables['ACELNBGL_P'] + base_variables['ACELNBGLP2']), (base_variables['ACELNBGL1731'] + 0)) and max((base_variables['ACELNBGL_P'] + base_variables['ACELNBGLP2']), (base_variables['ACELNBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul((saisie_variables.get('CELLIERNB', 0) + saisie_variables.get('CELLIERNG', 0) + saisie_variables.get('CELLIERNL', 0))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_NBGL() and BCEL_NBGL() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_NBGL(), (max((base_variables['ACELNBGL_P'] + base_variables['ACELNBGLP2']), (base_variables['ACELNBGL1731'] + 0)) and max((base_variables['ACELNBGL_P'] + base_variables['ACELNBGLP2']), (base_variables['ACELNBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_NBGL(), (max((base_variables['ACELNBGL_P'] + base_variables['ACELNBGLP2']), (base_variables['ACELNBGL1731'] + 0)) and max((base_variables['ACELNBGL_P'] + base_variables['ACELNBGLP2']), (base_variables['ACELNBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul((saisie_variables.get('CELLIERNB', 0) + saisie_variables.get('CELLIERNG', 0) + saisie_variables.get('CELLIERNL', 0))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_NBGL():
        """
        Inv. Scellier av 2011 hors COM- Mtant avant imputation sur droits dus
        """
        return (((positif(saisie_variables.get('CELLIERNB', 0)) and positif(saisie_variables.get('CELLIERNB', 0)) * arr((ACELNBGL() and ACELNBGL() * (TX25 and TX25 / 100)))) + (positif(saisie_variables.get('CELLIERNG', 0)) and positif(saisie_variables.get('CELLIERNG', 0)) * arr((ACELNBGL() and ACELNBGL() * (TX15 and TX15 / 100)))) + (positif(saisie_variables.get('CELLIERNL', 0)) and positif(saisie_variables.get('CELLIERNL', 0)) * arr((ACELNBGL() and ACELNBGL() * (TX40 and TX40 / 100))))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((positif(saisie_variables.get('CELLIERNB', 0)) and positif(saisie_variables.get('CELLIERNB', 0)) * arr((ACELNBGL() and ACELNBGL() * (TX25 and TX25 / 100)))) + (positif(saisie_variables.get('CELLIERNG', 0)) and positif(saisie_variables.get('CELLIERNG', 0)) * arr((ACELNBGL() and ACELNBGL() * (TX15 and TX15 / 100)))) + (positif(saisie_variables.get('CELLIERNL', 0)) and positif(saisie_variables.get('CELLIERNL', 0)) * arr((ACELNBGL() and ACELNBGL() * (TX40 and TX40 / 100))))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELNBGL():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_NBGL(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL() - NRCELHNO() - NRCELHJK() - NRCELNQ())), 0)

    @cache_result
    def BCELCOM2011():
        """
        Base investissement Scellier COM 2011
        """
        return arr((min((saisie_variables.get('CELLIERNP', 0) + saisie_variables.get('CELLIERNR', 0) + saisie_variables.get('CELLIERNS', 0) + saisie_variables.get('CELLIERNT', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERNP', 0) + saisie_variables.get('CELLIERNR', 0) + saisie_variables.get('CELLIERNS', 0) + saisie_variables.get('CELLIERNT', 0) + 0), LIMCELLIER) / 5))

    @cache_result
    def ACELCOM():
        """
        Investissement Scellier COM 2011- Retenu  
        """
        return (((BCELCOM2011() and BCELCOM2011() * (1 - base_variables['ART1731BIS'])) + (min(BCELCOM2011(), (max((base_variables['ACELCOM_P'] + base_variables['ACELCOMP2']), (base_variables['ACELCOM1731'] + 0)) and max((base_variables['ACELCOM_P'] + base_variables['ACELCOMP2']), (base_variables['ACELCOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCELCOM2011(), (max((base_variables['ACELCOM_P'] + base_variables['ACELCOMP2']), (base_variables['ACELCOM1731'] + 0)) and max((base_variables['ACELCOM_P'] + base_variables['ACELCOMP2']), (base_variables['ACELCOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul((saisie_variables.get('CELLIERNP', 0) + saisie_variables.get('CELLIERNR', 0) + saisie_variables.get('CELLIERNS', 0) + saisie_variables.get('CELLIERNT', 0))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCELCOM2011() and BCELCOM2011() * (1 - base_variables['ART1731BIS'])) + (min(BCELCOM2011(), (max((base_variables['ACELCOM_P'] + base_variables['ACELCOMP2']), (base_variables['ACELCOM1731'] + 0)) and max((base_variables['ACELCOM_P'] + base_variables['ACELCOMP2']), (base_variables['ACELCOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCELCOM2011(), (max((base_variables['ACELCOM_P'] + base_variables['ACELCOMP2']), (base_variables['ACELCOM1731'] + 0)) and max((base_variables['ACELCOM_P'] + base_variables['ACELCOMP2']), (base_variables['ACELCOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul((saisie_variables.get('CELLIERNP', 0) + saisie_variables.get('CELLIERNR', 0) + saisie_variables.get('CELLIERNS', 0) + saisie_variables.get('CELLIERNT', 0))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_COM():
        """
        Invest. Scellier 2011 COM- Mtant avant imputation sur les droits dus
        """
        return (((positif((saisie_variables.get('CELLIERNP', 0) + saisie_variables.get('CELLIERNT', 0))) and positif((saisie_variables.get('CELLIERNP', 0) + saisie_variables.get('CELLIERNT', 0))) * arr((ACELCOM() and ACELCOM() * (TX36 and TX36 / 100)))) + (positif((saisie_variables.get('CELLIERNR', 0) + saisie_variables.get('CELLIERNS', 0))) and positif((saisie_variables.get('CELLIERNR', 0) + saisie_variables.get('CELLIERNS', 0))) * arr((ACELCOM() and ACELCOM() * (TX40 and TX40 / 100))))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((positif((saisie_variables.get('CELLIERNP', 0) + saisie_variables.get('CELLIERNT', 0))) and positif((saisie_variables.get('CELLIERNP', 0) + saisie_variables.get('CELLIERNT', 0))) * arr((ACELCOM() and ACELCOM() * (TX36 and TX36 / 100)))) + (positif((saisie_variables.get('CELLIERNR', 0) + saisie_variables.get('CELLIERNS', 0))) and positif((saisie_variables.get('CELLIERNR', 0) + saisie_variables.get('CELLIERNS', 0))) * arr((ACELCOM() and ACELCOM() * (TX40 and TX40 / 100))))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELCOM():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_COM(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL() - NRCELHNO() - NRCELHJK() - NRCELNQ() - NRCELNBGL())), 0)

    @cache_result
    def BCEL_2011():
        """
        Base investissement Scellier realise et fini en 2011
        """
        return arr((min((saisie_variables.get('CELLIERNA', 0) + saisie_variables.get('CELLIERNC', 0) + saisie_variables.get('CELLIERND', 0) + saisie_variables.get('CELLIERNE', 0) + saisie_variables.get('CELLIERNF', 0) + saisie_variables.get('CELLIERNH', 0) + saisie_variables.get('CELLIERNI', 0) + saisie_variables.get('CELLIERNJ', 0) + saisie_variables.get('CELLIERNK', 0) + saisie_variables.get('CELLIERNM', 0) + saisie_variables.get('CELLIERNN', 0) + saisie_variables.get('CELLIERNO', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERNA', 0) + saisie_variables.get('CELLIERNC', 0) + saisie_variables.get('CELLIERND', 0) + saisie_variables.get('CELLIERNE', 0) + saisie_variables.get('CELLIERNF', 0) + saisie_variables.get('CELLIERNH', 0) + saisie_variables.get('CELLIERNI', 0) + saisie_variables.get('CELLIERNJ', 0) + saisie_variables.get('CELLIERNK', 0) + saisie_variables.get('CELLIERNM', 0) + saisie_variables.get('CELLIERNN', 0) + saisie_variables.get('CELLIERNO', 0) + 0), LIMCELLIER) / 9))

    @cache_result
    def CELSOMN():
        """
        Invest. Scellier 2011-somme pour calculer report quand code NA etc
        """
        return (saisie_variables.get('CELLIERNA', 0) + saisie_variables.get('CELLIERNC', 0) + saisie_variables.get('CELLIERND', 0) + saisie_variables.get('CELLIERNE', 0) + saisie_variables.get('CELLIERNF', 0) + saisie_variables.get('CELLIERNH', 0) + saisie_variables.get('CELLIERNI', 0) + saisie_variables.get('CELLIERNJ', 0) + saisie_variables.get('CELLIERNK', 0) + saisie_variables.get('CELLIERNM', 0) + saisie_variables.get('CELLIERNN', 0) + saisie_variables.get('CELLIERNO', 0))

    @cache_result
    def ACEL():
        """
        Investissement Scellier engagement et fini en 2011- Retenu  
        """
        return (((BCEL_2011() and BCEL_2011() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_2011(), (max((base_variables['ACEL_P'] + base_variables['ACELP2']), (base_variables['ACEL1731'] + 0)) and max((base_variables['ACEL_P'] + base_variables['ACELP2']), (base_variables['ACEL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_2011(), (max((base_variables['ACEL_P'] + base_variables['ACELP2']), (base_variables['ACEL1731'] + 0)) and max((base_variables['ACEL_P'] + base_variables['ACELP2']), (base_variables['ACEL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul(CELSOMN()) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_2011() and BCEL_2011() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_2011(), (max((base_variables['ACEL_P'] + base_variables['ACELP2']), (base_variables['ACEL1731'] + 0)) and max((base_variables['ACEL_P'] + base_variables['ACELP2']), (base_variables['ACEL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_2011(), (max((base_variables['ACEL_P'] + base_variables['ACELP2']), (base_variables['ACEL1731'] + 0)) and max((base_variables['ACEL_P'] + base_variables['ACELP2']), (base_variables['ACEL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul(CELSOMN()) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_2011():
        """
        Invest. Scellier 2011- Montant avant imputation sur les droits dus
        """
        return (((positif((saisie_variables.get('CELLIERNA', 0) + saisie_variables.get('CELLIERNE', 0))) and positif((saisie_variables.get('CELLIERNA', 0) + saisie_variables.get('CELLIERNE', 0))) * arr((ACEL() and ACEL() * (TX22 and TX22 / 100)))) + (positif((saisie_variables.get('CELLIERNC', 0) + saisie_variables.get('CELLIERND', 0) + saisie_variables.get('CELLIERNH', 0))) and positif((saisie_variables.get('CELLIERNC', 0) + saisie_variables.get('CELLIERND', 0) + saisie_variables.get('CELLIERNH', 0))) * arr((ACEL() and ACEL() * (TX25 and TX25 / 100)))) + (positif((saisie_variables.get('CELLIERNF', 0) + saisie_variables.get('CELLIERNJ', 0))) and positif((saisie_variables.get('CELLIERNF', 0) + saisie_variables.get('CELLIERNJ', 0))) * arr((ACEL() and ACEL() * (TX13 and TX13 / 100)))) + (positif(saisie_variables.get('CELLIERNI', 0)) and positif(saisie_variables.get('CELLIERNI', 0)) * arr((ACEL() and ACEL() * (TX15 and TX15 / 100)))) + (positif((saisie_variables.get('CELLIERNM', 0) + saisie_variables.get('CELLIERNN', 0))) and positif((saisie_variables.get('CELLIERNM', 0) + saisie_variables.get('CELLIERNN', 0))) * arr((ACEL() and ACEL() * (TX40 and TX40 / 100)))) + (positif((saisie_variables.get('CELLIERNK', 0) + saisie_variables.get('CELLIERNO', 0))) and positif((saisie_variables.get('CELLIERNK', 0) + saisie_variables.get('CELLIERNO', 0))) * arr((ACEL() and ACEL() * (TX36 and TX36 / 100))))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((positif((saisie_variables.get('CELLIERNA', 0) + saisie_variables.get('CELLIERNE', 0))) and positif((saisie_variables.get('CELLIERNA', 0) + saisie_variables.get('CELLIERNE', 0))) * arr((ACEL() and ACEL() * (TX22 and TX22 / 100)))) + (positif((saisie_variables.get('CELLIERNC', 0) + saisie_variables.get('CELLIERND', 0) + saisie_variables.get('CELLIERNH', 0))) and positif((saisie_variables.get('CELLIERNC', 0) + saisie_variables.get('CELLIERND', 0) + saisie_variables.get('CELLIERNH', 0))) * arr((ACEL() and ACEL() * (TX25 and TX25 / 100)))) + (positif((saisie_variables.get('CELLIERNF', 0) + saisie_variables.get('CELLIERNJ', 0))) and positif((saisie_variables.get('CELLIERNF', 0) + saisie_variables.get('CELLIERNJ', 0))) * arr((ACEL() and ACEL() * (TX13 and TX13 / 100)))) + (positif(saisie_variables.get('CELLIERNI', 0)) and positif(saisie_variables.get('CELLIERNI', 0)) * arr((ACEL() and ACEL() * (TX15 and TX15 / 100)))) + (positif((saisie_variables.get('CELLIERNM', 0) + saisie_variables.get('CELLIERNN', 0))) and positif((saisie_variables.get('CELLIERNM', 0) + saisie_variables.get('CELLIERNN', 0))) * arr((ACEL() and ACEL() * (TX40 and TX40 / 100)))) + (positif((saisie_variables.get('CELLIERNK', 0) + saisie_variables.get('CELLIERNO', 0))) and positif((saisie_variables.get('CELLIERNK', 0) + saisie_variables.get('CELLIERNO', 0))) * arr((ACEL() and ACEL() * (TX36 and TX36 / 100))))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCEL():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_2011(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL() - NRCELHNO() - NRCELHJK() - NRCELNQ() - NRCELNBGL() - NRCELCOM())), 0)

    @cache_result
    def BCEL_JP():
        """
        Base investissement Scellier Polynesie engagt avant 2012
        """
        return arr((min((saisie_variables.get('CELLIERJP', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERJP', 0) + 0), LIMCELLIER) / 5))

    @cache_result
    def ACELJP():
        """
        Investissement Scellier engagement avant 2012 Polynesie - Retenu  
        """
        return (((BCEL_JP() and BCEL_JP() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_JP(), (max((base_variables['ACELJP_P'] + base_variables['ACELJPP2']), (base_variables['ACELJP1731'] + 0)) and max((base_variables['ACELJP_P'] + base_variables['ACELJPP2']), (base_variables['ACELJP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_JP(), (max((base_variables['ACELJP_P'] + base_variables['ACELJPP2']), (base_variables['ACELJP1731'] + 0)) and max((base_variables['ACELJP_P'] + base_variables['ACELJPP2']), (base_variables['ACELJP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul(saisie_variables.get('CELLIERJP', 0)) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_JP() and BCEL_JP() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_JP(), (max((base_variables['ACELJP_P'] + base_variables['ACELJPP2']), (base_variables['ACELJP1731'] + 0)) and max((base_variables['ACELJP_P'] + base_variables['ACELJPP2']), (base_variables['ACELJP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_JP(), (max((base_variables['ACELJP_P'] + base_variables['ACELJPP2']), (base_variables['ACELJP1731'] + 0)) and max((base_variables['ACELJP_P'] + base_variables['ACELJPP2']), (base_variables['ACELJP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul(saisie_variables.get('CELLIERJP', 0)) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_JP():
        """
        Inv. Scellier av 2012 COM- Mtant avant imputation sur droits dus
        """
        return ((positif(saisie_variables.get('CELLIERJP', 0)) and positif(saisie_variables.get('CELLIERJP', 0)) * arr((ACELJP() and ACELJP() * (TX36 and TX36 / 100)))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and (positif(saisie_variables.get('CELLIERJP', 0)) and positif(saisie_variables.get('CELLIERJP', 0)) * arr((ACELJP() and ACELJP() * (TX36 and TX36 / 100)))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELJP():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_JP(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL() - NRCELHNO() - NRCELHJK() - NRCELNQ() - NRCELNBGL() - NRCELCOM() - NRCEL())), 0)

    @cache_result
    def BCEL_JBGL():
        """
        Base investissement Scellier engagement avant 2011
        """
        return arr((min((saisie_variables.get('CELLIERJB', 0) + saisie_variables.get('CELLIERJG', 0) + saisie_variables.get('CELLIERJL', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERJB', 0) + saisie_variables.get('CELLIERJG', 0) + saisie_variables.get('CELLIERJL', 0) + 0), LIMCELLIER) / 9))

    @cache_result
    def ACELJBGL():
        """
        Investissement Scellier engagement avant 2012- Retenu  
        """
        return (((BCEL_JBGL() and BCEL_JBGL() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_JBGL(), (max((base_variables['ACELJBGL_P'] + base_variables['ACELJBGLP2']), (base_variables['ACELJBGL1731'] + 0)) and max((base_variables['ACELJBGL_P'] + base_variables['ACELJBGLP2']), (base_variables['ACELJBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_JBGL(), (max((base_variables['ACELJBGL_P'] + base_variables['ACELJBGLP2']), (base_variables['ACELJBGL1731'] + 0)) and max((base_variables['ACELJBGL_P'] + base_variables['ACELJBGLP2']), (base_variables['ACELJBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul((saisie_variables.get('CELLIERJB', 0) + saisie_variables.get('CELLIERJG', 0) + saisie_variables.get('CELLIERJL', 0))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_JBGL() and BCEL_JBGL() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_JBGL(), (max((base_variables['ACELJBGL_P'] + base_variables['ACELJBGLP2']), (base_variables['ACELJBGL1731'] + 0)) and max((base_variables['ACELJBGL_P'] + base_variables['ACELJBGLP2']), (base_variables['ACELJBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_JBGL(), (max((base_variables['ACELJBGL_P'] + base_variables['ACELJBGLP2']), (base_variables['ACELJBGL1731'] + 0)) and max((base_variables['ACELJBGL_P'] + base_variables['ACELJBGLP2']), (base_variables['ACELJBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul((saisie_variables.get('CELLIERJB', 0) + saisie_variables.get('CELLIERJG', 0) + saisie_variables.get('CELLIERJL', 0))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_JBGL():
        """
        Inv. Scellier av 2012 hors COM- Mtant avant imputation sur droits dus
        """
        return (((positif(saisie_variables.get('CELLIERJB', 0)) and positif(saisie_variables.get('CELLIERJB', 0)) * arr((ACELJBGL() and ACELJBGL() * (TX22 and TX22 / 100)))) + (positif(saisie_variables.get('CELLIERJG', 0)) and positif(saisie_variables.get('CELLIERJG', 0)) * arr((ACELJBGL() and ACELJBGL() * (TX13 and TX13 / 100)))) + (positif(saisie_variables.get('CELLIERJL', 0)) and positif(saisie_variables.get('CELLIERJL', 0)) * arr((ACELJBGL() and ACELJBGL() * (TX36 and TX36 / 100))))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((positif(saisie_variables.get('CELLIERJB', 0)) and positif(saisie_variables.get('CELLIERJB', 0)) * arr((ACELJBGL() and ACELJBGL() * (TX22 and TX22 / 100)))) + (positif(saisie_variables.get('CELLIERJG', 0)) and positif(saisie_variables.get('CELLIERJG', 0)) * arr((ACELJBGL() and ACELJBGL() * (TX13 and TX13 / 100)))) + (positif(saisie_variables.get('CELLIERJL', 0)) and positif(saisie_variables.get('CELLIERJL', 0)) * arr((ACELJBGL() and ACELJBGL() * (TX36 and TX36 / 100))))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELJBGL():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_JBGL(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL() - NRCELHNO() - NRCELHJK() - NRCELNQ() - NRCELNBGL() - NRCELCOM() - NRCEL() - NRCELJP())), 0)

    @cache_result
    def BCEL_JOQR():
        """
        Base investissement Scellier COM 2012
        """
        return arr((min((saisie_variables.get('CELLIERJO', 0) + saisie_variables.get('CELLIERJQ', 0) + saisie_variables.get('CELLIERJR', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERJO', 0) + saisie_variables.get('CELLIERJQ', 0) + saisie_variables.get('CELLIERJR', 0) + 0), LIMCELLIER) / 5))

    @cache_result
    def ACELJOQR():
        """
        Investissement Scellier COM 2012- Retenu  
        """
        return (((BCEL_JOQR() and BCEL_JOQR() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_JOQR(), (max((base_variables['ACELJOQR_P'] + base_variables['ACELJOQRP2']), (base_variables['ACELJOQR1731'] + 0)) and max((base_variables['ACELJOQR_P'] + base_variables['ACELJOQRP2']), (base_variables['ACELJOQR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_JOQR(), (max((base_variables['ACELJOQR_P'] + base_variables['ACELJOQRP2']), (base_variables['ACELJOQR1731'] + 0)) and max((base_variables['ACELJOQR_P'] + base_variables['ACELJOQRP2']), (base_variables['ACELJOQR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul((saisie_variables.get('CELLIERJO', 0) + saisie_variables.get('CELLIERJQ', 0) + saisie_variables.get('CELLIERJR', 0))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_JOQR() and BCEL_JOQR() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_JOQR(), (max((base_variables['ACELJOQR_P'] + base_variables['ACELJOQRP2']), (base_variables['ACELJOQR1731'] + 0)) and max((base_variables['ACELJOQR_P'] + base_variables['ACELJOQRP2']), (base_variables['ACELJOQR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_JOQR(), (max((base_variables['ACELJOQR_P'] + base_variables['ACELJOQRP2']), (base_variables['ACELJOQR1731'] + 0)) and max((base_variables['ACELJOQR_P'] + base_variables['ACELJOQRP2']), (base_variables['ACELJOQR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul((saisie_variables.get('CELLIERJO', 0) + saisie_variables.get('CELLIERJQ', 0) + saisie_variables.get('CELLIERJR', 0))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_JOQR():
        """
        Invest. Scellier 2012 COM- Mtant avant imputation sur les droits dus
        """
        return (((positif(saisie_variables.get('CELLIERJQ', 0)) and positif(saisie_variables.get('CELLIERJQ', 0)) * arr((ACELJOQR() and ACELJOQR() * (TX36 and TX36 / 100)))) + (positif((saisie_variables.get('CELLIERJO', 0) + saisie_variables.get('CELLIERJR', 0))) and positif((saisie_variables.get('CELLIERJO', 0) + saisie_variables.get('CELLIERJR', 0))) * arr((ACELJOQR() and ACELJOQR() * (TX24 and TX24 / 100))))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((positif(saisie_variables.get('CELLIERJQ', 0)) and positif(saisie_variables.get('CELLIERJQ', 0)) * arr((ACELJOQR() and ACELJOQR() * (TX36 and TX36 / 100)))) + (positif((saisie_variables.get('CELLIERJO', 0) + saisie_variables.get('CELLIERJR', 0))) and positif((saisie_variables.get('CELLIERJO', 0) + saisie_variables.get('CELLIERJR', 0))) * arr((ACELJOQR() and ACELJOQR() * (TX24 and TX24 / 100))))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELJOQR():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_JOQR(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL() - NRCELHNO() - NRCELHJK() - NRCELNQ() - NRCELNBGL() - NRCELCOM() - NRCEL() - NRCELJP() - NRCELJBGL())), 0)

    @cache_result
    def BCEL_2012():
        """
        Base investissement Scellier realise et fini en 2012
        """
        return arr((min((saisie_variables.get('CELLIERJA', 0) + saisie_variables.get('CELLIERJD', 0) + saisie_variables.get('CELLIERJE', 0) + saisie_variables.get('CELLIERJF', 0) + saisie_variables.get('CELLIERJH', 0) + saisie_variables.get('CELLIERJJ', 0) + saisie_variables.get('CELLIERJK', 0) + saisie_variables.get('CELLIERJM', 0) + saisie_variables.get('CELLIERJN', 0) + 0), LIMCELLIER) and min((saisie_variables.get('CELLIERJA', 0) + saisie_variables.get('CELLIERJD', 0) + saisie_variables.get('CELLIERJE', 0) + saisie_variables.get('CELLIERJF', 0) + saisie_variables.get('CELLIERJH', 0) + saisie_variables.get('CELLIERJJ', 0) + saisie_variables.get('CELLIERJK', 0) + saisie_variables.get('CELLIERJM', 0) + saisie_variables.get('CELLIERJN', 0) + 0), LIMCELLIER) / 9))

    @cache_result
    def CELSOMJ():
        """
        Invest. Scellier 2012-somme pour calculer report quand code JA etc
        """
        return (saisie_variables.get('CELLIERJA', 0) + saisie_variables.get('CELLIERJD', 0) + saisie_variables.get('CELLIERJE', 0) + saisie_variables.get('CELLIERJF', 0) + saisie_variables.get('CELLIERJH', 0) + saisie_variables.get('CELLIERJJ', 0) + saisie_variables.get('CELLIERJK', 0) + saisie_variables.get('CELLIERJM', 0) + saisie_variables.get('CELLIERJN', 0))

    @cache_result
    def ACEL2012():
        """
        Investissement Scellier engagement et fini en 2012- Retenu  
        """
        return (((BCEL_2012() and BCEL_2012() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_2012(), (max((base_variables['ACEL2012_P'] + base_variables['ACEL2012P2']), (base_variables['ACEL20121731'] + 0)) and max((base_variables['ACEL2012_P'] + base_variables['ACEL2012P2']), (base_variables['ACEL20121731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_2012(), (max((base_variables['ACEL2012_P'] + base_variables['ACEL2012P2']), (base_variables['ACEL20121731'] + 0)) and max((base_variables['ACEL2012_P'] + base_variables['ACEL2012P2']), (base_variables['ACEL20121731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul(CELSOMJ()) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_2012() and BCEL_2012() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_2012(), (max((base_variables['ACEL2012_P'] + base_variables['ACEL2012P2']), (base_variables['ACEL20121731'] + 0)) and max((base_variables['ACEL2012_P'] + base_variables['ACEL2012P2']), (base_variables['ACEL20121731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_2012(), (max((base_variables['ACEL2012_P'] + base_variables['ACEL2012P2']), (base_variables['ACEL20121731'] + 0)) and max((base_variables['ACEL2012_P'] + base_variables['ACEL2012P2']), (base_variables['ACEL20121731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul(CELSOMJ()) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_2012():
        """
        Invest. Scellier 2012- Montant avant imputation sur les droits dus
        """
        return (((positif((saisie_variables.get('CELLIERJA', 0) + saisie_variables.get('CELLIERJE', 0) + saisie_variables.get('CELLIERJH', 0))) and positif((saisie_variables.get('CELLIERJA', 0) + saisie_variables.get('CELLIERJE', 0) + saisie_variables.get('CELLIERJH', 0))) * arr((ACEL2012() and ACEL2012() * (TX13 and TX13 / 100)))) + (positif(saisie_variables.get('CELLIERJD', 0)) and positif(saisie_variables.get('CELLIERJD', 0)) * arr((ACEL2012() and ACEL2012() * (TX22 and TX22 / 100)))) + (positif((saisie_variables.get('CELLIERJF', 0) + saisie_variables.get('CELLIERJJ', 0))) and positif((saisie_variables.get('CELLIERJF', 0) + saisie_variables.get('CELLIERJJ', 0))) * arr((ACEL2012() and ACEL2012() * (TX6 and TX6 / 100)))) + (positif((saisie_variables.get('CELLIERJK', 0) + saisie_variables.get('CELLIERJN', 0))) and positif((saisie_variables.get('CELLIERJK', 0) + saisie_variables.get('CELLIERJN', 0))) * arr((ACEL2012() and ACEL2012() * (TX24 and TX24 / 100)))) + (positif(saisie_variables.get('CELLIERJM', 0)) and positif(saisie_variables.get('CELLIERJM', 0)) * arr((ACEL2012() and ACEL2012() * (TX36 and TX36 / 100))))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((positif((saisie_variables.get('CELLIERJA', 0) + saisie_variables.get('CELLIERJE', 0) + saisie_variables.get('CELLIERJH', 0))) and positif((saisie_variables.get('CELLIERJA', 0) + saisie_variables.get('CELLIERJE', 0) + saisie_variables.get('CELLIERJH', 0))) * arr((ACEL2012() and ACEL2012() * (TX13 and TX13 / 100)))) + (positif(saisie_variables.get('CELLIERJD', 0)) and positif(saisie_variables.get('CELLIERJD', 0)) * arr((ACEL2012() and ACEL2012() * (TX22 and TX22 / 100)))) + (positif((saisie_variables.get('CELLIERJF', 0) + saisie_variables.get('CELLIERJJ', 0))) and positif((saisie_variables.get('CELLIERJF', 0) + saisie_variables.get('CELLIERJJ', 0))) * arr((ACEL2012() and ACEL2012() * (TX6 and TX6 / 100)))) + (positif((saisie_variables.get('CELLIERJK', 0) + saisie_variables.get('CELLIERJN', 0))) and positif((saisie_variables.get('CELLIERJK', 0) + saisie_variables.get('CELLIERJN', 0))) * arr((ACEL2012() and ACEL2012() * (TX24 and TX24 / 100)))) + (positif(saisie_variables.get('CELLIERJM', 0)) and positif(saisie_variables.get('CELLIERJM', 0)) * arr((ACEL2012() and ACEL2012() * (TX36 and TX36 / 100))))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCEL2012():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_2012(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL() - NRCELHNO() - NRCELHJK() - NRCELNQ() - NRCELNBGL() - NRCELCOM() - NRCEL() - NRCELJP() - NRCELJBGL() - NRCELJOQR())), 0)

    @cache_result
    def BCEL_FD():
        """
        Base investissement Scellier 2013 - 7FD
        """
        return arr((min(saisie_variables.get('CELLIERFD', 0), LIMCELLIER) and min(saisie_variables.get('CELLIERFD', 0), LIMCELLIER) / 5))

    @cache_result
    def DCELFD():
        """
        Invest. Scellier 7FD
        """
        return saisie_variables.get('CELLIERFD', 0)

    @cache_result
    def ACELFD():
        """
        Investissement Scellier 2013 engagement 2012 Polynesie - Retenu  
        """
        return (((BCEL_FD() and BCEL_FD() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_FD(), (max((base_variables['ACELFD_P'] + base_variables['ACELFDP2']), (base_variables['ACELFD1731'] + 0)) and max((base_variables['ACELFD_P'] + base_variables['ACELFDP2']), (base_variables['ACELFD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_FD(), (max((base_variables['ACELFD_P'] + base_variables['ACELFDP2']), (base_variables['ACELFD1731'] + 0)) and max((base_variables['ACELFD_P'] + base_variables['ACELFDP2']), (base_variables['ACELFD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul(DCELFD()) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_FD() and BCEL_FD() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_FD(), (max((base_variables['ACELFD_P'] + base_variables['ACELFDP2']), (base_variables['ACELFD1731'] + 0)) and max((base_variables['ACELFD_P'] + base_variables['ACELFDP2']), (base_variables['ACELFD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_FD(), (max((base_variables['ACELFD_P'] + base_variables['ACELFDP2']), (base_variables['ACELFD1731'] + 0)) and max((base_variables['ACELFD_P'] + base_variables['ACELFDP2']), (base_variables['ACELFD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul(DCELFD()) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_FD():
        """
        Inv. Scellier 7FD- Mtant avant imputation sur droits dus
        """
        return (positif(saisie_variables.get('CELLIERFD', 0)) and arr((ACELFD() and ACELFD() * (TX24 and TX24 / 100))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and positif(saisie_variables.get('CELLIERFD', 0)) * arr((ACELFD() and ACELFD() * (TX24 and TX24 / 100))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELFD():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_FD(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL() - NRCELHNO() - NRCELHJK() - NRCELNQ() - NRCELNBGL() - NRCELCOM() - NRCEL() - NRCELJP() - NRCELJBGL() - NRCELJOQR() - NRCEL2012())), 0)

    @cache_result
    def BCEL_FABC():
        """
        Base investissement Scellier 2013 - 7FA 7FB 7FC
        """
        return arr((min((saisie_variables.get('CELLIERFA', 0) + saisie_variables.get('CELLIERFB', 0) + saisie_variables.get('CELLIERFC', 0)), LIMCELLIER) and min((saisie_variables.get('CELLIERFA', 0) + saisie_variables.get('CELLIERFB', 0) + saisie_variables.get('CELLIERFC', 0)), LIMCELLIER) / 9))

    @cache_result
    def DCELFABC():
        """
        Invest. Scellier 7FA 7FB 7FC
        """
        return (saisie_variables.get('CELLIERFA', 0) + saisie_variables.get('CELLIERFB', 0) + saisie_variables.get('CELLIERFC', 0))

    @cache_result
    def ACELFABC():
        """
        Investissement Scellier 2013 engagement 2012
        """
        return (((BCEL_FABC() and BCEL_FABC() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_FABC(), (max((base_variables['ACELFABC_P'] + base_variables['ACELFABCP2']), (base_variables['ACELFABC1731'] + 0)) and max((base_variables['ACELFABC_P'] + base_variables['ACELFABCP2']), (base_variables['ACELFABC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_FABC(), (max((base_variables['ACELFABC_P'] + base_variables['ACELFABCP2']), (base_variables['ACELFABC1731'] + 0)) and max((base_variables['ACELFABC_P'] + base_variables['ACELFABCP2']), (base_variables['ACELFABC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and positif_ou_nul(DCELFABC()) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((BCEL_FABC() and BCEL_FABC() * (1 - base_variables['ART1731BIS'])) + (min(BCEL_FABC(), (max((base_variables['ACELFABC_P'] + base_variables['ACELFABCP2']), (base_variables['ACELFABC1731'] + 0)) and max((base_variables['ACELFABC_P'] + base_variables['ACELFABCP2']), (base_variables['ACELFABC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(BCEL_FABC(), (max((base_variables['ACELFABC_P'] + base_variables['ACELFABCP2']), (base_variables['ACELFABC1731'] + 0)) and max((base_variables['ACELFABC_P'] + base_variables['ACELFABCP2']), (base_variables['ACELFABC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * positif_ou_nul(DCELFABC()) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_FABC():
        """
        Inv. Scellier 7FA 7FB 7FA- Mtant avant imputation sur droits dus
        """
        return (((positif(saisie_variables.get('CELLIERFA', 0)) and positif(saisie_variables.get('CELLIERFA', 0)) * arr((ACELFABC() and ACELFABC() * (TX13 and TX13 / 100)))) + (positif(saisie_variables.get('CELLIERFB', 0)) and positif(saisie_variables.get('CELLIERFB', 0)) * arr((ACELFABC() and ACELFABC() * (TX6 and TX6 / 100)))) + (positif(saisie_variables.get('CELLIERFC', 0)) and positif(saisie_variables.get('CELLIERFC', 0)) * arr((ACELFABC() and ACELFABC() * (TX24 and TX24 / 100))))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((positif(saisie_variables.get('CELLIERFA', 0)) and positif(saisie_variables.get('CELLIERFA', 0)) * arr((ACELFABC() and ACELFABC() * (TX13 and TX13 / 100)))) + (positif(saisie_variables.get('CELLIERFB', 0)) and positif(saisie_variables.get('CELLIERFB', 0)) * arr((ACELFABC() and ACELFABC() * (TX6 and TX6 / 100)))) + (positif(saisie_variables.get('CELLIERFC', 0)) and positif(saisie_variables.get('CELLIERFC', 0)) * arr((ACELFABC() and ACELFABC() * (TX24 and TX24 / 100))))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRCELFABC():
        """
        Reduction Scellier theorique
        """
        return max(min(RCEL_FABC(), (RRI1() - NRLOGDOM() - NRRI2() - somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) - NRCELRREDMG() - NRCELRREDMH() - somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) - somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) - somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) - NRCELHM() - NRCELHL() - NRCELHNO() - NRCELHJK() - NRCELNQ() - NRCELNBGL() - NRCELCOM() - NRCEL() - NRCELJP() - NRCELJBGL() - NRCELJOQR() - NRCEL2012() - NRCELFD())), 0)

    @cache_result
    def NRCELTOT():
        """
        Reduction Scellier theorique totale
        """
        return (somme([NRCELRREDLA(), NRCELRREDLB(), NRCELRREDLE(), NRCELRREDLM(), NRCELRREDLN(), NRCELRREDLC(), NRCELRREDLD(), NRCELRREDLS(), NRCELRREDLT(), NRCELRREDLF(), NRCELRREDLZ(), NRCELRREDLX()]) + NRCELRREDMG() + NRCELRREDMH() + somme([NRCELREPHS(), NRCELREPHR(), NRCELREPHU(), NRCELREPHT(), NRCELREPHZ(), NRCELREPHX(), NRCELREPHW(), NRCELREPHV(), NRCELREPHF(), NRCELREPHE(), NRCELREPHD(), NRCELREPHH(), NRCELREPHG(), NRCELREPHB(), NRCELREPHA()]) + somme([NRCELREPGU(), NRCELREPGX(), NRCELREPGT(), NRCELREPGS(), NRCELREPGW(), NRCELREPGP(), NRCELREPGL(), NRCELREPGV(), NRCELREPGK(), NRCELREPGJ()]) + somme([NRCELREPYH(), NRCELREPYL(), NRCELREPYG(), NRCELREPYF(), NRCELREPYK(), NRCELREPYE(), NRCELREPYD(), NRCELREPYJ(), NRCELREPYC(), NRCELREPYB(), NRCELREPYI(), NRCELREPYA()]) + NRCELHM() + NRCELHL() + NRCELHNO() + NRCELHJK() + NRCELNQ() + NRCELNBGL() + NRCELCOM() + NRCEL() + NRCELJP() + NRCELJBGL() + NRCELJOQR() + NRCEL2012() + NRCELFD() + NRCELFABC())

    @cache_result
    def DREDMEUB():
        """
        Invest. locations meublees non pro - report reduction - declare
        """
        return saisie_variables.get('REDMEUBLE', 0)

    @cache_result
    def AREDMEUB():
        """
        Invest. locations meublees non pro - report reduction - retenu
        """
        return (((DREDMEUB() and DREDMEUB() * (1 - base_variables['ART1731BIS'])) + (min(DREDMEUB(), (max((base_variables['AREDMEUB_P'] + base_variables['AREDMEUBP2']), (base_variables['AREDMEUB1731'] + 0)) and max((base_variables['AREDMEUB_P'] + base_variables['AREDMEUBP2']), (base_variables['AREDMEUB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DREDMEUB(), (max((base_variables['AREDMEUB_P'] + base_variables['AREDMEUBP2']), (base_variables['AREDMEUB1731'] + 0)) and max((base_variables['AREDMEUB_P'] + base_variables['AREDMEUBP2']), (base_variables['AREDMEUB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DREDMEUB() and DREDMEUB() * (1 - base_variables['ART1731BIS'])) + (min(DREDMEUB(), (max((base_variables['AREDMEUB_P'] + base_variables['AREDMEUBP2']), (base_variables['AREDMEUB1731'] + 0)) and max((base_variables['AREDMEUB_P'] + base_variables['AREDMEUBP2']), (base_variables['AREDMEUB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DREDMEUB(), (max((base_variables['AREDMEUB_P'] + base_variables['AREDMEUBP2']), (base_variables['AREDMEUB1731'] + 0)) and max((base_variables['AREDMEUB_P'] + base_variables['AREDMEUBP2']), (base_variables['AREDMEUB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRREDMEUB():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AREDMEUB(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT())), 0)

    @cache_result
    def DREDREP():
        """
        Invest. loc. meublees non pro - report reduction (7IU) - declare
        """
        return saisie_variables.get('REDREPNPRO', 0)

    @cache_result
    def AREDREP():
        """
        Invest. loc. meublees non pro - report reduction (7IU) - retenu
        """
        return (((DREDREP() and DREDREP() * (1 - base_variables['ART1731BIS'])) + (min(DREDREP(), (max((base_variables['AREDREP_P'] + base_variables['AREDREPP2']), (base_variables['AREDREP1731'] + 0)) and max((base_variables['AREDREP_P'] + base_variables['AREDREPP2']), (base_variables['AREDREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DREDREP(), (max((base_variables['AREDREP_P'] + base_variables['AREDREPP2']), (base_variables['AREDREP1731'] + 0)) and max((base_variables['AREDREP_P'] + base_variables['AREDREPP2']), (base_variables['AREDREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DREDREP() and DREDREP() * (1 - base_variables['ART1731BIS'])) + (min(DREDREP(), (max((base_variables['AREDREP_P'] + base_variables['AREDREPP2']), (base_variables['AREDREP1731'] + 0)) and max((base_variables['AREDREP_P'] + base_variables['AREDREPP2']), (base_variables['AREDREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DREDREP(), (max((base_variables['AREDREP_P'] + base_variables['AREDREPP2']), (base_variables['AREDREP1731'] + 0)) and max((base_variables['AREDREP_P'] + base_variables['AREDREPP2']), (base_variables['AREDREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRREDREP():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AREDREP(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB())), 0)

    @cache_result
    def DILMIX():
        """
        Invest. loc. meublees non pro - report reduction (7IX) - declare
        """
        return saisie_variables.get('LOCMEUBIX', 0)

    @cache_result
    def AILMIX():
        """
        Invest. loc. meublees non pro - report reduction (7IX) - retenu
        """
        return (((DILMIX() and DILMIX() * (1 - base_variables['ART1731BIS'])) + (min(DILMIX(), (max((base_variables['AILMIX_P'] + base_variables['AILMIXP2']), (base_variables['AILMIX1731'] + 0)) and max((base_variables['AILMIX_P'] + base_variables['AILMIXP2']), (base_variables['AILMIX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIX(), (max((base_variables['AILMIX_P'] + base_variables['AILMIXP2']), (base_variables['AILMIX1731'] + 0)) and max((base_variables['AILMIX_P'] + base_variables['AILMIXP2']), (base_variables['AILMIX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMIX() and DILMIX() * (1 - base_variables['ART1731BIS'])) + (min(DILMIX(), (max((base_variables['AILMIX_P'] + base_variables['AILMIXP2']), (base_variables['AILMIX1731'] + 0)) and max((base_variables['AILMIX_P'] + base_variables['AILMIXP2']), (base_variables['AILMIX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIX(), (max((base_variables['AILMIX_P'] + base_variables['AILMIXP2']), (base_variables['AILMIX1731'] + 0)) and max((base_variables['AILMIX_P'] + base_variables['AILMIXP2']), (base_variables['AILMIX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMIX():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMIX(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP())), 0)

    @cache_result
    def DILMIY():
        """
        Invest. loc. meublees non pro - report reduction (7IY) - declare
        """
        return saisie_variables.get('LOCMEUBIY', 0)

    @cache_result
    def AILMIY():
        """
        Invest. loc. meublees non pro - report reduction (7IY) - retenu
        """
        return (((DILMIY() and DILMIY() * (1 - base_variables['ART1731BIS'])) + (min(DILMIY(), (max((base_variables['AILMIY_P'] + base_variables['AILMIYP2']), (base_variables['AILMIY1731'] + 0)) and max((base_variables['AILMIY_P'] + base_variables['AILMIYP2']), (base_variables['AILMIY1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIY(), (max((base_variables['AILMIY_P'] + base_variables['AILMIYP2']), (base_variables['AILMIY1731'] + 0)) and max((base_variables['AILMIY_P'] + base_variables['AILMIYP2']), (base_variables['AILMIY1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMIY() and DILMIY() * (1 - base_variables['ART1731BIS'])) + (min(DILMIY(), (max((base_variables['AILMIY_P'] + base_variables['AILMIYP2']), (base_variables['AILMIY1731'] + 0)) and max((base_variables['AILMIY_P'] + base_variables['AILMIYP2']), (base_variables['AILMIY1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIY(), (max((base_variables['AILMIY_P'] + base_variables['AILMIYP2']), (base_variables['AILMIY1731'] + 0)) and max((base_variables['AILMIY_P'] + base_variables['AILMIYP2']), (base_variables['AILMIY1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMIY():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMIY(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX())), 0)

    @cache_result
    def DILMPA():
        """
        Invest. loc. meublees non pro - report reduction (7PA) - declare
        """
        return saisie_variables.get('COD7PA', 0)

    @cache_result
    def AILMPA():
        """
        Invest. loc. meublees non pro - report reduction (7PA) - retenu
        """
        return (DILMPA() and DILMPA() * (1 - V_CNR()))

    @cache_result
    def NRILMPA():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMPA(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY())), 0)

    @cache_result
    def DINVRED():
        """
        Invest. loc. meublees non pro - report reduction (7IT) - declare
        """
        return saisie_variables.get('INVREDMEU', 0)

    @cache_result
    def AINVRED():
        """
        Invest. loc. meublees non pro - report reduction (7IU) - retenu
        """
        return (((DINVRED() and DINVRED() * (1 - base_variables['ART1731BIS'])) + (min(DINVRED(), (max((base_variables['AINVRED_P'] + base_variables['AINVREDP2']), (base_variables['AINVRED1731'] + 0)) and max((base_variables['AINVRED_P'] + base_variables['AINVREDP2']), (base_variables['AINVRED1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DINVRED(), (max((base_variables['AINVRED_P'] + base_variables['AINVREDP2']), (base_variables['AINVRED1731'] + 0)) and max((base_variables['AINVRED_P'] + base_variables['AINVREDP2']), (base_variables['AINVRED1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DINVRED() and DINVRED() * (1 - base_variables['ART1731BIS'])) + (min(DINVRED(), (max((base_variables['AINVRED_P'] + base_variables['AINVREDP2']), (base_variables['AINVRED1731'] + 0)) and max((base_variables['AINVRED_P'] + base_variables['AINVREDP2']), (base_variables['AINVRED1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DINVRED(), (max((base_variables['AINVRED_P'] + base_variables['AINVREDP2']), (base_variables['AINVRED1731'] + 0)) and max((base_variables['AINVRED_P'] + base_variables['AINVREDP2']), (base_variables['AINVRED1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRINVRED():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AINVRED(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA())), 0)

    @cache_result
    def DILMIH():
        """
        Invest. loc. meublees non pro - report reduction (7IH) - declare
        """
        return saisie_variables.get('LOCMEUBIH', 0)

    @cache_result
    def AILMIH():
        """
        Invest. loc. meublees non pro - report reduction (7IH) - retenu
        """
        return (((DILMIH() and DILMIH() * (1 - base_variables['ART1731BIS'])) + (min(DILMIH(), (max((base_variables['AILMIH_P'] + base_variables['AILMIHP2']), (base_variables['AILMIH1731'] + 0)) and max((base_variables['AILMIH_P'] + base_variables['AILMIHP2']), (base_variables['AILMIH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIH(), (max((base_variables['AILMIH_P'] + base_variables['AILMIHP2']), (base_variables['AILMIH1731'] + 0)) and max((base_variables['AILMIH_P'] + base_variables['AILMIHP2']), (base_variables['AILMIH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMIH() and DILMIH() * (1 - base_variables['ART1731BIS'])) + (min(DILMIH(), (max((base_variables['AILMIH_P'] + base_variables['AILMIHP2']), (base_variables['AILMIH1731'] + 0)) and max((base_variables['AILMIH_P'] + base_variables['AILMIHP2']), (base_variables['AILMIH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIH(), (max((base_variables['AILMIH_P'] + base_variables['AILMIHP2']), (base_variables['AILMIH1731'] + 0)) and max((base_variables['AILMIH_P'] + base_variables['AILMIHP2']), (base_variables['AILMIH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMIH():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMIH(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED())), 0)

    @cache_result
    def DILMJC():
        """
        Invest. loc. meublees non pro - report reduction (7JC) - declare
        """
        return saisie_variables.get('LOCMEUBJC', 0)

    @cache_result
    def AILMJC():
        """
        Invest. loc. meublees non pro - report reduction (7JC) - retenu
        """
        return (((DILMJC() and DILMJC() * (1 - base_variables['ART1731BIS'])) + (min(DILMJC(), (max((base_variables['AILMJC_P'] + base_variables['AILMJCP2']), (base_variables['AILMJC1731'] + 0)) and max((base_variables['AILMJC_P'] + base_variables['AILMJCP2']), (base_variables['AILMJC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJC(), (max((base_variables['AILMJC_P'] + base_variables['AILMJCP2']), (base_variables['AILMJC1731'] + 0)) and max((base_variables['AILMJC_P'] + base_variables['AILMJCP2']), (base_variables['AILMJC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMJC() and DILMJC() * (1 - base_variables['ART1731BIS'])) + (min(DILMJC(), (max((base_variables['AILMJC_P'] + base_variables['AILMJCP2']), (base_variables['AILMJC1731'] + 0)) and max((base_variables['AILMJC_P'] + base_variables['AILMJCP2']), (base_variables['AILMJC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJC(), (max((base_variables['AILMJC_P'] + base_variables['AILMJCP2']), (base_variables['AILMJC1731'] + 0)) and max((base_variables['AILMJC_P'] + base_variables['AILMJCP2']), (base_variables['AILMJC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMJC():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMJC(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH())), 0)

    @cache_result
    def DILMPB():
        """
        Invest. loc. meublees non pro - report reduction (7PB) - declare
        """
        return saisie_variables.get('COD7PB', 0)

    @cache_result
    def AILMPB():
        """
        Invest. loc. meublees non pro - report reduction (7PB) - retenu
        """
        return (DILMPB() and DILMPB() * (1 - V_CNR()))

    @cache_result
    def NRILMPB():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMPB(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC())), 0)

    @cache_result
    def DILMIZ():
        """
        Invest. loc. meublees non pro - report reduction (7IZ) - declare
        """
        return saisie_variables.get('LOCMEUBIZ', 0)

    @cache_result
    def AILMIZ():
        """
        Invest. loc. meublees non pro - report reduction (7IZ) - retenu
        """
        return (((DILMIZ() and DILMIZ() * (1 - base_variables['ART1731BIS'])) + (min(DILMIZ(), (max((base_variables['AILMIZ_P'] + base_variables['AILMIZP2']), (base_variables['AILMIZ1731'] + 0)) and max((base_variables['AILMIZ_P'] + base_variables['AILMIZP2']), (base_variables['AILMIZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIZ(), (max((base_variables['AILMIZ_P'] + base_variables['AILMIZP2']), (base_variables['AILMIZ1731'] + 0)) and max((base_variables['AILMIZ_P'] + base_variables['AILMIZP2']), (base_variables['AILMIZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMIZ() and DILMIZ() * (1 - base_variables['ART1731BIS'])) + (min(DILMIZ(), (max((base_variables['AILMIZ_P'] + base_variables['AILMIZP2']), (base_variables['AILMIZ1731'] + 0)) and max((base_variables['AILMIZ_P'] + base_variables['AILMIZP2']), (base_variables['AILMIZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIZ(), (max((base_variables['AILMIZ_P'] + base_variables['AILMIZP2']), (base_variables['AILMIZ1731'] + 0)) and max((base_variables['AILMIZ_P'] + base_variables['AILMIZP2']), (base_variables['AILMIZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMIZ():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMIZ(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB())), 0)

    @cache_result
    def DILMJI():
        """
        Invest. loc. meublees non pro - report reduction (7JI) - declare
        """
        return saisie_variables.get('LOCMEUBJI', 0)

    @cache_result
    def AILMJI():
        """
        Invest. loc. meublees non pro - report reduction (7JI) - retenu
        """
        return (((DILMJI() and DILMJI() * (1 - base_variables['ART1731BIS'])) + (min(DILMJI(), (max((base_variables['AILMJI_P'] + base_variables['AILMJIP2']), (base_variables['AILMJI1731'] + 0)) and max((base_variables['AILMJI_P'] + base_variables['AILMJIP2']), (base_variables['AILMJI1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJI(), (max((base_variables['AILMJI_P'] + base_variables['AILMJIP2']), (base_variables['AILMJI1731'] + 0)) and max((base_variables['AILMJI_P'] + base_variables['AILMJIP2']), (base_variables['AILMJI1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMJI() and DILMJI() * (1 - base_variables['ART1731BIS'])) + (min(DILMJI(), (max((base_variables['AILMJI_P'] + base_variables['AILMJIP2']), (base_variables['AILMJI1731'] + 0)) and max((base_variables['AILMJI_P'] + base_variables['AILMJIP2']), (base_variables['AILMJI1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJI(), (max((base_variables['AILMJI_P'] + base_variables['AILMJIP2']), (base_variables['AILMJI1731'] + 0)) and max((base_variables['AILMJI_P'] + base_variables['AILMJIP2']), (base_variables['AILMJI1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMJI():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMJI(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ())), 0)

    @cache_result
    def DILMPC():
        """
        Invest. loc. meublees non pro - report reduction (7PC) - declare
        """
        return saisie_variables.get('COD7PC', 0)

    @cache_result
    def AILMPC():
        """
        Invest. loc. meublees non pro - report reduction (7PC) - retenu
        """
        return (DILMPC() and DILMPC() * (1 - V_CNR()))

    @cache_result
    def NRILMPC():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMPC(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI())), 0)

    @cache_result
    def DILMJS():
        """
        Invest. loc. meublees non pro - report reduction (7JS) - declare
        """
        return saisie_variables.get('LOCMEUBJS', 0)

    @cache_result
    def AILMJS():
        """
        Invest. loc. meublees non pro - report reduction (7JS) - retenu
        """
        return (((DILMJS() and DILMJS() * (1 - base_variables['ART1731BIS'])) + (min(DILMJS(), (max((base_variables['AILMJS_P'] + base_variables['AILMJSP2']), (base_variables['AILMJS1731'] + 0)) and max((base_variables['AILMJS_P'] + base_variables['AILMJSP2']), (base_variables['AILMJS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJS(), (max((base_variables['AILMJS_P'] + base_variables['AILMJSP2']), (base_variables['AILMJS1731'] + 0)) and max((base_variables['AILMJS_P'] + base_variables['AILMJSP2']), (base_variables['AILMJS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMJS() and DILMJS() * (1 - base_variables['ART1731BIS'])) + (min(DILMJS(), (max((base_variables['AILMJS_P'] + base_variables['AILMJSP2']), (base_variables['AILMJS1731'] + 0)) and max((base_variables['AILMJS_P'] + base_variables['AILMJSP2']), (base_variables['AILMJS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJS(), (max((base_variables['AILMJS_P'] + base_variables['AILMJSP2']), (base_variables['AILMJS1731'] + 0)) and max((base_variables['AILMJS_P'] + base_variables['AILMJSP2']), (base_variables['AILMJS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMJS():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMJS(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC())), 0)

    @cache_result
    def DILMPD():
        """
        Invest. loc. meublees non pro - report reduction (7PD) - declare
        """
        return saisie_variables.get('COD7PD', 0)

    @cache_result
    def AILMPD():
        """
        Invest. loc. meublees non pro - report reduction (7PD) - retenu
        """
        return (DILMPD() and DILMPD() * (1 - V_CNR()))

    @cache_result
    def NRILMPD():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMPD(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS())), 0)

    @cache_result
    def DILMPE():
        """
        Invest. loc. meublees non pro - report reduction (7PE) - declare
        """
        return saisie_variables.get('COD7PE', 0)

    @cache_result
    def AILMPE():
        """
        Invest. loc. meublees non pro - report reduction (7PE) - retenu
        """
        return (DILMPE() and DILMPE() * (1 - V_CNR()))

    @cache_result
    def NRILMPE():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMPE(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD())), 0)

    @cache_result
    def DMEUBLE():
        """
        Investissements locations meublees non pro - report 2009 - declare
        """
        return saisie_variables.get('REPMEUBLE', 0)

    @cache_result
    def MEUBLERET():
        """
        Investissements locations meublees non pro - report - calcule
        """
        return (arr((DMEUBLE() and TX25 and DMEUBLE() * TX25 / 100)) and arr((DMEUBLE() and TX25 and DMEUBLE() * TX25 / 100)) * (1 - V_CNR()))

    @cache_result
    def NRMEUBLE():
        """
        Investissements locations meublees non pro - report 2009 - reduction
        """
        return max(min(MEUBLERET(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE())), 0)

    @cache_result
    def DPROREP():
        """
        Invest. locations meublees non pro 2009 acheve 2010 - report - declare
        """
        return saisie_variables.get('INVNPROREP', 0)

    @cache_result
    def RETPROREP():
        """
        Invest. locations meublees non pro 2009 acheve 2010 - report - calcule
        """
        return (arr((DPROREP() and TX25 and DPROREP() * TX25 / 100)) and arr((DPROREP() and TX25 and DPROREP() * TX25 / 100)) * (1 - V_CNR()))

    @cache_result
    def NRPROREP():
        """
        Investissements locations meublees non pro - report 2009 - reduction
        """
        return max(min(RETPROREP(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE())), 0)

    @cache_result
    def DREPNPRO():
        """
        Invest. locations meublees non pro initie avant 2010 - report- declare
        """
        return saisie_variables.get('INVREPNPRO', 0)

    @cache_result
    def RETREPNPRO():
        """
        Invest. locations meublees non pro initie avant 2010 -report - calcule
        """
        return (arr((DREPNPRO() and TX25 and DREPNPRO() * TX25 / 100)) and arr((DREPNPRO() and TX25 and DREPNPRO() * TX25 / 100)) * (1 - V_CNR()))

    @cache_result
    def NRREPNPRO():
        """
        Investissements locations meublees non pro - report 2009 - reduction
        """
        return max(min(RETREPNPRO(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP())), 0)

    @cache_result
    def DREPMEU():
        """
        Investissements locations meublees non pro - report 2010 - declare
        """
        return saisie_variables.get('INVREPMEU', 0)

    @cache_result
    def RETREPMEU():
        """
        Investissements locations meublees non pro - report 2010 - calcule
        """
        return (arr((DREPMEU() and TX25 and DREPMEU() * TX25 / 100)) and arr((DREPMEU() and TX25 and DREPMEU() * TX25 / 100)) * (1 - V_CNR()))

    @cache_result
    def NRREPMEU():
        """
        Investissements locations meublees non pro - report 2009 - reduction
        """
        return max(min(RETREPMEU(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO())), 0)

    @cache_result
    def DILMIC():
        """
        Invest. loc. meublees non pro - report reduction (7IC) - declare
        """
        return saisie_variables.get('LOCMEUBIC', 0)

    @cache_result
    def AILMIC():
        """
        Invest. loc. meublees non pro - report reduction (7IC) - retenu
        """
        return (((DILMIC() and DILMIC() * (1 - base_variables['ART1731BIS'])) + (min(DILMIC(), (max((base_variables['AILMIC_P'] + base_variables['AILMICP2']), (base_variables['AILMIC1731'] + 0)) and max((base_variables['AILMIC_P'] + base_variables['AILMICP2']), (base_variables['AILMIC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIC(), (max((base_variables['AILMIC_P'] + base_variables['AILMICP2']), (base_variables['AILMIC1731'] + 0)) and max((base_variables['AILMIC_P'] + base_variables['AILMICP2']), (base_variables['AILMIC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMIC() and DILMIC() * (1 - base_variables['ART1731BIS'])) + (min(DILMIC(), (max((base_variables['AILMIC_P'] + base_variables['AILMICP2']), (base_variables['AILMIC1731'] + 0)) and max((base_variables['AILMIC_P'] + base_variables['AILMICP2']), (base_variables['AILMIC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIC(), (max((base_variables['AILMIC_P'] + base_variables['AILMICP2']), (base_variables['AILMIC1731'] + 0)) and max((base_variables['AILMIC_P'] + base_variables['AILMICP2']), (base_variables['AILMIC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMIC():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMIC(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU())), 0)

    @cache_result
    def DILMIB():
        """
        Invest. loc. meublees non pro - report reduction (7IB) - declare
        """
        return saisie_variables.get('LOCMEUBIB', 0)

    @cache_result
    def AILMIB():
        """
        Invest. loc. meublees non pro - report reduction (7IB) - retenu
        """
        return (((DILMIB() and DILMIB() * (1 - base_variables['ART1731BIS'])) + (min(DILMIB(), (max((base_variables['AILMIB_P'] + base_variables['AILMIBP2']), (base_variables['AILMIB1731'] + 0)) and max((base_variables['AILMIB_P'] + base_variables['AILMIBP2']), (base_variables['AILMIB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIB(), (max((base_variables['AILMIB_P'] + base_variables['AILMIBP2']), (base_variables['AILMIB1731'] + 0)) and max((base_variables['AILMIB_P'] + base_variables['AILMIBP2']), (base_variables['AILMIB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMIB() and DILMIB() * (1 - base_variables['ART1731BIS'])) + (min(DILMIB(), (max((base_variables['AILMIB_P'] + base_variables['AILMIBP2']), (base_variables['AILMIB1731'] + 0)) and max((base_variables['AILMIB_P'] + base_variables['AILMIBP2']), (base_variables['AILMIB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIB(), (max((base_variables['AILMIB_P'] + base_variables['AILMIBP2']), (base_variables['AILMIB1731'] + 0)) and max((base_variables['AILMIB_P'] + base_variables['AILMIBP2']), (base_variables['AILMIB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMIB():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMIB(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC())), 0)

    @cache_result
    def DILMIA():
        """
        Invest. loc. meublees non pro - report reduction (7IA) - declare
        """
        return saisie_variables.get('LOCMEUBIA', 0)

    @cache_result
    def AILMIA():
        """
        Invest. loc. meublees non pro - report reduction (7IA) - retenu
        """
        return (((DILMIA() and DILMIA() * (1 - base_variables['ART1731BIS'])) + (min(DILMIA(), (max((base_variables['AILMIA_P'] + base_variables['AILMIAP2']), (base_variables['AILMIA1731'] + 0)) and max((base_variables['AILMIA_P'] + base_variables['AILMIAP2']), (base_variables['AILMIA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIA(), (max((base_variables['AILMIA_P'] + base_variables['AILMIAP2']), (base_variables['AILMIA1731'] + 0)) and max((base_variables['AILMIA_P'] + base_variables['AILMIAP2']), (base_variables['AILMIA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMIA() and DILMIA() * (1 - base_variables['ART1731BIS'])) + (min(DILMIA(), (max((base_variables['AILMIA_P'] + base_variables['AILMIAP2']), (base_variables['AILMIA1731'] + 0)) and max((base_variables['AILMIA_P'] + base_variables['AILMIAP2']), (base_variables['AILMIA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMIA(), (max((base_variables['AILMIA_P'] + base_variables['AILMIAP2']), (base_variables['AILMIA1731'] + 0)) and max((base_variables['AILMIA_P'] + base_variables['AILMIAP2']), (base_variables['AILMIA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMIA():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMIA(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB())), 0)

    @cache_result
    def DILMJY():
        """
        Invest. loc. meublees non pro - report reduction (7JY) - declare
        """
        return saisie_variables.get('LOCMEUBJY', 0)

    @cache_result
    def AILMJY():
        """
        Invest. loc. meublees non pro - report reduction (7JY) - retenu
        """
        return (((DILMJY() and DILMJY() * (1 - base_variables['ART1731BIS'])) + (min(DILMJY(), (max((base_variables['AILMJY_P'] + base_variables['AILMJYP2']), (base_variables['AILMJY1731'] + 0)) and max((base_variables['AILMJY_P'] + base_variables['AILMJYP2']), (base_variables['AILMJY1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJY(), (max((base_variables['AILMJY_P'] + base_variables['AILMJYP2']), (base_variables['AILMJY1731'] + 0)) and max((base_variables['AILMJY_P'] + base_variables['AILMJYP2']), (base_variables['AILMJY1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMJY() and DILMJY() * (1 - base_variables['ART1731BIS'])) + (min(DILMJY(), (max((base_variables['AILMJY_P'] + base_variables['AILMJYP2']), (base_variables['AILMJY1731'] + 0)) and max((base_variables['AILMJY_P'] + base_variables['AILMJYP2']), (base_variables['AILMJY1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJY(), (max((base_variables['AILMJY_P'] + base_variables['AILMJYP2']), (base_variables['AILMJY1731'] + 0)) and max((base_variables['AILMJY_P'] + base_variables['AILMJYP2']), (base_variables['AILMJY1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMJY():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMJY(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA())), 0)

    @cache_result
    def DILMJX():
        """
        Invest. loc. meublees non pro - report reduction (7JX) - declare
        """
        return saisie_variables.get('LOCMEUBJX', 0)

    @cache_result
    def AILMJX():
        """
        Invest. loc. meublees non pro - report reduction (7JX) - retenu
        """
        return (((DILMJX() and DILMJX() * (1 - base_variables['ART1731BIS'])) + (min(DILMJX(), (max((base_variables['AILMJX_P'] + base_variables['AILMJXP2']), (base_variables['AILMJX1731'] + 0)) and max((base_variables['AILMJX_P'] + base_variables['AILMJXP2']), (base_variables['AILMJX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJX(), (max((base_variables['AILMJX_P'] + base_variables['AILMJXP2']), (base_variables['AILMJX1731'] + 0)) and max((base_variables['AILMJX_P'] + base_variables['AILMJXP2']), (base_variables['AILMJX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMJX() and DILMJX() * (1 - base_variables['ART1731BIS'])) + (min(DILMJX(), (max((base_variables['AILMJX_P'] + base_variables['AILMJXP2']), (base_variables['AILMJX1731'] + 0)) and max((base_variables['AILMJX_P'] + base_variables['AILMJXP2']), (base_variables['AILMJX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJX(), (max((base_variables['AILMJX_P'] + base_variables['AILMJXP2']), (base_variables['AILMJX1731'] + 0)) and max((base_variables['AILMJX_P'] + base_variables['AILMJXP2']), (base_variables['AILMJX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMJX():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMJX(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY())), 0)

    @cache_result
    def DILMJW():
        """
        Invest. loc. meublees non pro - report reduction (7JW) - declare
        """
        return saisie_variables.get('LOCMEUBJW', 0)

    @cache_result
    def AILMJW():
        """
        Invest. loc. meublees non pro - report reduction (7JW) - retenu
        """
        return (((DILMJW() and DILMJW() * (1 - base_variables['ART1731BIS'])) + (min(DILMJW(), (max((base_variables['AILMJW_P'] + base_variables['AILMJWP2']), (base_variables['AILMJW1731'] + 0)) and max((base_variables['AILMJW_P'] + base_variables['AILMJWP2']), (base_variables['AILMJW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJW(), (max((base_variables['AILMJW_P'] + base_variables['AILMJWP2']), (base_variables['AILMJW1731'] + 0)) and max((base_variables['AILMJW_P'] + base_variables['AILMJWP2']), (base_variables['AILMJW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMJW() and DILMJW() * (1 - base_variables['ART1731BIS'])) + (min(DILMJW(), (max((base_variables['AILMJW_P'] + base_variables['AILMJWP2']), (base_variables['AILMJW1731'] + 0)) and max((base_variables['AILMJW_P'] + base_variables['AILMJWP2']), (base_variables['AILMJW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJW(), (max((base_variables['AILMJW_P'] + base_variables['AILMJWP2']), (base_variables['AILMJW1731'] + 0)) and max((base_variables['AILMJW_P'] + base_variables['AILMJWP2']), (base_variables['AILMJW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMJW():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMJW(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX())), 0)

    @cache_result
    def DILMJV():
        """
        Invest. loc. meublees non pro - report reduction (7JV) - declare
        """
        return saisie_variables.get('LOCMEUBJV', 0)

    @cache_result
    def AILMJV():
        """
        Invest. loc. meublees non pro - report reduction (7JV) - retenu
        """
        return (((DILMJV() and DILMJV() * (1 - base_variables['ART1731BIS'])) + (min(DILMJV(), (max((base_variables['AILMJV_P'] + base_variables['AILMJVP2']), (base_variables['AILMJV1731'] + 0)) and max((base_variables['AILMJV_P'] + base_variables['AILMJVP2']), (base_variables['AILMJV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJV(), (max((base_variables['AILMJV_P'] + base_variables['AILMJVP2']), (base_variables['AILMJV1731'] + 0)) and max((base_variables['AILMJV_P'] + base_variables['AILMJVP2']), (base_variables['AILMJV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((DILMJV() and DILMJV() * (1 - base_variables['ART1731BIS'])) + (min(DILMJV(), (max((base_variables['AILMJV_P'] + base_variables['AILMJVP2']), (base_variables['AILMJV1731'] + 0)) and max((base_variables['AILMJV_P'] + base_variables['AILMJVP2']), (base_variables['AILMJV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(DILMJV(), (max((base_variables['AILMJV_P'] + base_variables['AILMJVP2']), (base_variables['AILMJV1731'] + 0)) and max((base_variables['AILMJV_P'] + base_variables['AILMJVP2']), (base_variables['AILMJV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def NRILMJV():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMJV(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW())), 0)

    @cache_result
    def DILMOE():
        """
        Invest. loc. meublees non pro - report reduction (7OE) - declare
        """
        return saisie_variables.get('COD7OE', 0)

    @cache_result
    def AILMOE():
        """
        Invest. loc. meublees non pro - report reduction (7OE) - retenu
        """
        return (DILMOE() and DILMOE() * (1 - V_CNR()))

    @cache_result
    def NRILMOE():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMOE(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV())), 0)

    @cache_result
    def DILMOD():
        """
        Invest. loc. meublees non pro - report reduction (7OD) - declare
        """
        return saisie_variables.get('COD7OD', 0)

    @cache_result
    def AILMOD():
        """
        Invest. loc. meublees non pro - report reduction (7OD) - retenu
        """
        return (DILMOD() and DILMOD() * (1 - V_CNR()))

    @cache_result
    def NRILMOD():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMOD(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV() - NRILMOE())), 0)

    @cache_result
    def DILMOC():
        """
        Invest. loc. meublees non pro - report reduction (7OC) - declare
        """
        return saisie_variables.get('COD7OC', 0)

    @cache_result
    def AILMOC():
        """
        Invest. loc. meublees non pro - report reduction (7OC) - retenu
        """
        return (DILMOC() and DILMOC() * (1 - V_CNR()))

    @cache_result
    def NRILMOC():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMOC(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV() - NRILMOE() - NRILMOD())), 0)

    @cache_result
    def DILMOB():
        """
        Invest. loc. meublees non pro - report reduction (7OB) - declare
        """
        return saisie_variables.get('COD7OB', 0)

    @cache_result
    def AILMOB():
        """
        Invest. loc. meublees non pro - report reduction (7OB) - retenu
        """
        return (DILMOB() and DILMOB() * (1 - V_CNR()))

    @cache_result
    def NRILMOB():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMOB(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV() - NRILMOE() - NRILMOD() - NRILMOC())), 0)

    @cache_result
    def DILMOA():
        """
        Invest. loc. meublees non pro - report reduction (7OA) - declare
        """
        return saisie_variables.get('COD7OA', 0)

    @cache_result
    def AILMOA():
        """
        Invest. loc. meublees non pro - report reduction (7OA) - retenu
        """
        return (DILMOA() and DILMOA() * (1 - V_CNR()))

    @cache_result
    def NRILMOA():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(min(AILMOA(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV() - NRILMOE() - NRILMOD() - NRILMOC() - NRILMOB())), 0)

    @cache_result
    def ARESIMEUB_1():
        """
        pour alleger prog-Inv. loc. meublees ds residence neuve (7IO) - retenu
        """
        return (arr((min(PLAF_RESINEUV, saisie_variables.get('VIEUMEUB', 0)) and min(PLAF_RESINEUV, saisie_variables.get('VIEUMEUB', 0)) / 9)) and arr((min(PLAF_RESINEUV, saisie_variables.get('VIEUMEUB', 0)) and min(PLAF_RESINEUV, saisie_variables.get('VIEUMEUB', 0)) / 9)) * (1 - V_CNR()))

    @cache_result
    def ARESIMEUB():
        """
        Invest. locations meublees dans residence neuve (7IO) - retenu
        """
        return ((ARESIMEUB_1() and ARESIMEUB_1() * (1 - base_variables['ART1731BIS'])) + (min(ARESIMEUB_1(), (max((base_variables['ARESIMEUB_P'] + base_variables['ARESIMEUBP2']), (base_variables['ARESIMEUB1731'] + 0)) and max((base_variables['ARESIMEUB_P'] + base_variables['ARESIMEUBP2']), (base_variables['ARESIMEUB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(ARESIMEUB_1(), (max((base_variables['ARESIMEUB_P'] + base_variables['ARESIMEUBP2']), (base_variables['ARESIMEUB1731'] + 0)) and max((base_variables['ARESIMEUB_P'] + base_variables['ARESIMEUBP2']), (base_variables['ARESIMEUB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RETRESIMEUB():
        """
        Invest. locations meublees dans residence neuve (7IO) - calcule
        """
        return arr((ARESIMEUB() and TX25 and ARESIMEUB() * TX25 / 100))

    @cache_result
    def NRRESIMEUB():
        """
        Investissements locations meublees dans residence neuve - reduction
        """
        return max(min(RETRESIMEUB(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV() - NRILMOE() - NRILMOD() - NRILMOC() - NRILMOB() - NRILMOA())), 0)

    @cache_result
    def ACODIM():
        """
        Inv. loc. meublees non pro retenu 7IM
        """
        return (min(PLAF_RESINEUV, saisie_variables.get('RESIVIEU', 0)) and min(PLAF_RESINEUV, saisie_variables.get('RESIVIEU', 0)) * (1 - V_CNR()))

    @cache_result
    def ACODIW():
        """
        Inv. loc. meublees non pro retenu 7IW
        """
        return (min((PLAF_RESINEUV - ACODIM()), saisie_variables.get('RESIVIANT', 0)) and min((PLAF_RESINEUV - ACODIM()), saisie_variables.get('RESIVIANT', 0)) * (1 - V_CNR()))

    @cache_result
    def ARESIVIEU_1():
        """
        pour alleger prog -Inv. loc. meublees ds residence neuve 2009 - retenu
        """
        return (arr((ACODIM() and ACODIM() / 9)) + arr((ACODIW() and ACODIW() / 9)))

    @cache_result
    def RETRESIVIEU():
        """
        Investissements locations meublees dans residence neuve 2009 - calcule
        """
        return (arr((arr((ACODIM() and ACODIM() / 9)) and TX25 and arr((ACODIM() and ACODIM() / 9)) * TX25 / 100)) + (arr((arr((ACODIW() and ACODIW() / 9)) and TX25 and arr((ACODIW() and ACODIW() / 9)) * TX25 / 100)) and arr((arr((ACODIW() and ACODIW() / 9)) and TX25 and arr((ACODIW() and ACODIW() / 9)) * TX25 / 100)) * (1 - base_variables['ART1731BIS'])) + (min(ARESIVIEU_1(), (base_variables['ARESIVIEU1731'] + 0)) and min(ARESIVIEU_1(), (base_variables['ARESIVIEU1731'] + 0)) * base_variables['ART1731BIS']))

    @cache_result
    def NRRESIVIEU():
        """
        Invest. locations meublees dans residence neuve 2009 - reduction
        """
        return max(min(RETRESIVIEU(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV() - NRILMOE() - NRILMOD() - NRILMOC() - NRILMOB() - NRILMOA() - NRRESIMEUB())), 0)

    @cache_result
    def ACODIL():
        """
        Inv. loc. meublees non pro retenu 7IL
        """
        return (min(PLAF_RESINEUV, saisie_variables.get('MEUBLENP', 0)) and min(PLAF_RESINEUV, saisie_variables.get('MEUBLENP', 0)) * (1 - V_CNR()))

    @cache_result
    def ACODIN():
        """
        Inv. loc. meublees non pro retenu 7IN
        """
        return (min((PLAF_RESINEUV - ACODIL()), saisie_variables.get('INVNPROF1', 0)) and min((PLAF_RESINEUV - ACODIL()), saisie_variables.get('INVNPROF1', 0)) * (1 - V_CNR()))

    @cache_result
    def ACODIJ():
        """
        Inv. loc. meublees non pro retenu 7IJ
        """
        return (min((PLAF_RESINEUV - ACODIL() - ACODIN()), saisie_variables.get('LOCRESINEUV', 0)) and min((PLAF_RESINEUV - ACODIL() - ACODIN()), saisie_variables.get('LOCRESINEUV', 0)) * (1 - V_CNR()))

    @cache_result
    def ACODIV():
        """
        Inv. loc. meublees non pro retenu 7IV
        """
        return (min((PLAF_RESINEUV - ACODIL() - ACODIN() - ACODIJ()), saisie_variables.get('INVNPROF2', 0)) and min((PLAF_RESINEUV - ACODIL() - ACODIN() - ACODIJ()), saisie_variables.get('INVNPROF2', 0)) * (1 - V_CNR()))

    @cache_result
    def ARESINEUV_1():
        """
        pour alleger prog - Inv. loc. meublees dans residence neuve - retenu
        """
        return (arr((ACODIL() and ACODIL() / 9)) + arr((ACODIN() and ACODIN() / 9)) + arr((ACODIJ() and ACODIJ() / 9)) + arr((ACODIV() and ACODIV() / 9)))

    @cache_result
    def RETRESINEUV():
        """
        Investissements locations meublees dans residence neuve - calcule
        """
        return (arr((arr((ACODIL() and ACODIL() / 9)) and TX20 and arr((ACODIL() and ACODIL() / 9)) * TX20 / 100)) + arr((arr((ACODIN() and ACODIN() / 9)) and TX20 and arr((ACODIN() and ACODIN() / 9)) * TX20 / 100)) + arr((arr((ACODIJ() and ACODIJ() / 9)) and TX18 and arr((ACODIJ() and ACODIJ() / 9)) * TX18 / 100)) + (arr((arr((ACODIV() and ACODIV() / 9)) and TX18 and arr((ACODIV() and ACODIV() / 9)) * TX18 / 100)) and arr((arr((ACODIV() and ACODIV() / 9)) and TX18 and arr((ACODIV() and ACODIV() / 9)) * TX18 / 100)) * (1 - base_variables['ART1731BIS'])) + (min(ARESINEUV_1(), (base_variables['ARESINEUV1731'] + 0)) and min(ARESINEUV_1(), (base_variables['ARESINEUV1731'] + 0)) * base_variables['ART1731BIS']))

    @cache_result
    def NRRESINEUV():
        """
        Investissements locations meublees dans residence neuve - reduction
        """
        return max(min(RETRESINEUV(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV() - NRILMOE() - NRILMOD() - NRILMOC() - NRILMOB() - NRILMOA() - NRRESIMEUB() - NRRESIMEUB())), 0)

    @cache_result
    def ACODIE():
        """
        Inv. loc. meublees non pro retenu 7IE
        """
        return (min(PLAF_RESINEUV, saisie_variables.get('LOCMEUBIE', 0)) and min(PLAF_RESINEUV, saisie_variables.get('LOCMEUBIE', 0)) * (1 - V_CNR()))

    @cache_result
    def ACODIF():
        """
        Inv. loc. meublees non pro retenu 7IF
        """
        return (min((PLAF_RESINEUV - ACODIE()), saisie_variables.get('LOCMEUBIF', 0)) and min((PLAF_RESINEUV - ACODIE()), saisie_variables.get('LOCMEUBIF', 0)) * (1 - V_CNR()))

    @cache_result
    def ACODID():
        """
        Inv. loc. meublees non pro retenu 7ID
        """
        return (min((PLAF_RESINEUV - ACODIE() - ACODIF()), saisie_variables.get('LOCMEUBID', 0)) and min((PLAF_RESINEUV - ACODIE() - ACODIF()), saisie_variables.get('LOCMEUBID', 0)) * (1 - V_CNR()))

    @cache_result
    def ACODIG():
        """
        Inv. loc. meublees non pro retenu 7IG
        """
        return (min((PLAF_RESINEUV - ACODIE() - ACODIF() - ACODID()), saisie_variables.get('LOCMEUBIG', 0)) and min((PLAF_RESINEUV - ACODIE() - ACODIF() - ACODID()), saisie_variables.get('LOCMEUBIG', 0)) * (1 - V_CNR()))

    @cache_result
    def ALOCIDEFG_1():
        """
        pour alleger prog - Inv. locations meublees non pro 2012 - retenu
        """
        return (arr((ACODIE() and ACODIE() / 9)) + arr((ACODIF() and ACODIF() / 9)) + arr((ACODID() and ACODID() / 9)) + arr((ACODIG() and ACODIG() / 9)))

    @cache_result
    def RETLOCIDEFG():
        """
        Invest. locations meublees non pro 2012 - calcule
        """
        return (arr((arr((ACODIE() and ACODIE() / 9)) and TX18 and arr((ACODIE() and ACODIE() / 9)) * TX18 / 100)) + arr((arr((ACODIF() and ACODIF() / 9)) and TX18 and arr((ACODIF() and ACODIF() / 9)) * TX18 / 100)) + arr((arr((ACODID() and ACODID() / 9)) and TX11 and arr((ACODID() and ACODID() / 9)) * TX11 / 100)) + (arr((arr((ACODIG() and ACODIG() / 9)) and TX11 and arr((ACODIG() and ACODIG() / 9)) * TX11 / 100)) and arr((arr((ACODIG() and ACODIG() / 9)) and TX11 and arr((ACODIG() and ACODIG() / 9)) * TX11 / 100)) * (1 - base_variables['ART1731BIS'])) + (min(ALOCIDEFG_1(), (base_variables['ALOCIDEFG1731'] + 0)) and min(ALOCIDEFG_1(), (base_variables['ALOCIDEFG1731'] + 0)) * base_variables['ART1731BIS']))

    @cache_result
    def NRLOCIDEFG():
        """
        Invest. locations meublees non pro 2012 - reduction
        """
        return max(min(RETLOCIDEFG(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV() - NRILMOE() - NRILMOD() - NRILMOC() - NRILMOB() - NRILMOA() - NRRESIMEUB() - NRRESIMEUB() - NRRESINEUV())), 0)

    @cache_result
    def ACODJT():
        """
        Inv. loc. meublees non pro retenu 7JT
        """
        return (min(PLAF_RESINEUV, saisie_variables.get('LOCMEUBJT', 0)) and min(PLAF_RESINEUV, saisie_variables.get('LOCMEUBJT', 0)) * (1 - V_CNR()))

    @cache_result
    def ACODJU():
        """
        Inv. loc. meublees non pro retenu 7JU
        """
        return (min((PLAF_RESINEUV - ACODJT()), saisie_variables.get('LOCMEUBJU', 0)) and min((PLAF_RESINEUV - ACODJT()), saisie_variables.get('LOCMEUBJU', 0)) * (1 - V_CNR()))

    @cache_result
    def RETCODJU():
        """
        Invest. locations meublees non pro 2013 (7JU) - calcule
        """
        return arr((arr((ACODJU() and ACODJU() / 9)) and TX11 and arr((ACODJU() and ACODJU() / 9)) * TX11 / 100))

    @cache_result
    def NRCODJU():
        """
        Invest. locations meublees non pro 2013 - reduction
        """
        return max(min(RETCODJU(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV() - NRILMOE() - NRILMOD() - NRILMOC() - NRILMOB() - NRILMOA() - NRRESIMEUB() - NRRESIMEUB() - NRRESINEUV() - NRLOCIDEFG())), 0)

    @cache_result
    def RETCODJT():
        """
        Invest. locations meublees non pro 2013 (7JT) - calcule
        """
        return arr((arr((ACODJT() and ACODJT() / 9)) and TX11 and arr((ACODJT() and ACODJT() / 9)) * TX11 / 100))

    @cache_result
    def NRCODJT():
        """
        Invest. locations meublees non pro 2013 - reduction
        """
        return max(min(RETCODJT(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV() - NRILMOE() - NRILMOD() - NRILMOC() - NRILMOB() - NRILMOA() - NRRESIMEUB() - NRRESIMEUB() - NRRESINEUV() - NRLOCIDEFG() - NRCODJU())), 0)

    @cache_result
    def ACODOU():
        """
        Inv. loc. meublees non pro retenu 7OU
        """
        return (arr((min(PLAF_RESINEUV, saisie_variables.get('COD7OU', 0)) and min(PLAF_RESINEUV, saisie_variables.get('COD7OU', 0)) / 9)) and arr((min(PLAF_RESINEUV, saisie_variables.get('COD7OU', 0)) and min(PLAF_RESINEUV, saisie_variables.get('COD7OU', 0)) / 9)) * (1 - V_CNR()))

    @cache_result
    def NRCODOU():
        """
        Invest. locations meublees non pro 2013 - reduction
        """
        return max(min(ACODOU(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRREDMEUB() - NRREDREP() - NRILMIX() - NRILMIY() - NRILMPA() - NRINVRED() - NRILMIH() - NRILMJC() - NRILMPB() - NRILMIZ() - NRILMJI() - NRILMPC() - NRILMJS() - NRILMPD() - NRILMPE() - NRMEUBLE() - NRPROREP() - NRREPNPRO() - NRREPMEU() - NRILMIC() - NRILMIB() - NRILMIA() - NRILMJY() - NRILMJX() - NRILMJW() - NRILMJV() - NRILMOE() - NRILMOD() - NRILMOC() - NRILMOB() - NRILMOA() - NRRESIMEUB() - NRRESIMEUB() - NRRESINEUV() - NRLOCIDEFG() - NRCODJU() - NRCODJT())), 0)

    @cache_result
    def NRLOCNPRO():
        """
        Investissements locations meublees non pro - reduction totale
        """
        return (NRREDMEUB() + NRREDREP() + NRILMIX() + NRILMIY() + NRILMPA() + NRINVRED() + NRILMIH() + NRILMJC() + NRILMPB() + NRILMIZ() + NRILMJI() + NRILMPC() + NRILMJS() + NRILMPD() + NRILMPE() + NRMEUBLE() + NRPROREP() + NRREPNPRO() + NRREPMEU() + NRILMIC() + NRILMIB() + NRILMIA() + NRILMJY() + NRILMJX() + NRILMJW() + NRILMJV() + NRILMOE() + NRILMOD() + NRILMOC() + NRILMOB() + NRILMOA() + NRRESIMEUB() + NRRESIVIEU() + NRRESINEUV() + NRLOCIDEFG() + NRCODJU() + NRCODJT() + NRCODOU())

    @cache_result
    def APATNAT3():
        """
        Retenu : depense 2012 protection du patrimoine naturel : report
        """
        return (((saisie_variables.get('PATNAT3', 0) and saisie_variables.get('PATNAT3', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('PATNAT3', 0), (max((base_variables['APATNAT3_P'] + base_variables['APATNAT3P2']), (base_variables['APATNAT31731'] + 0)) and max((base_variables['APATNAT3_P'] + base_variables['APATNAT3P2']), (base_variables['APATNAT31731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('PATNAT3', 0), (max((base_variables['APATNAT3_P'] + base_variables['APATNAT3P2']), (base_variables['APATNAT31731'] + 0)) and max((base_variables['APATNAT3_P'] + base_variables['APATNAT3P2']), (base_variables['APATNAT31731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('PATNAT3', 0) and saisie_variables.get('PATNAT3', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('PATNAT3', 0), (max((base_variables['APATNAT3_P'] + base_variables['APATNAT3P2']), (base_variables['APATNAT31731'] + 0)) and max((base_variables['APATNAT3_P'] + base_variables['APATNAT3P2']), (base_variables['APATNAT31731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('PATNAT3', 0), (max((base_variables['APATNAT3_P'] + base_variables['APATNAT3P2']), (base_variables['APATNAT31731'] + 0)) and max((base_variables['APATNAT3_P'] + base_variables['APATNAT3P2']), (base_variables['APATNAT31731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def APATNAT1():
        """
        Retenu : depense 2011 protection du patrimoine naturel : report
        """
        return (((saisie_variables.get('PATNAT1', 0) and saisie_variables.get('PATNAT1', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('PATNAT1', 0), (max((base_variables['APATNAT1_P'] + base_variables['APATNAT1P2']), (base_variables['APATNAT11731'] + 0)) and max((base_variables['APATNAT1_P'] + base_variables['APATNAT1P2']), (base_variables['APATNAT11731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('PATNAT1', 0), (max((base_variables['APATNAT1_P'] + base_variables['APATNAT1P2']), (base_variables['APATNAT11731'] + 0)) and max((base_variables['APATNAT1_P'] + base_variables['APATNAT1P2']), (base_variables['APATNAT11731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('PATNAT1', 0) and saisie_variables.get('PATNAT1', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('PATNAT1', 0), (max((base_variables['APATNAT1_P'] + base_variables['APATNAT1P2']), (base_variables['APATNAT11731'] + 0)) and max((base_variables['APATNAT1_P'] + base_variables['APATNAT1P2']), (base_variables['APATNAT11731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('PATNAT1', 0), (max((base_variables['APATNAT1_P'] + base_variables['APATNAT1P2']), (base_variables['APATNAT11731'] + 0)) and max((base_variables['APATNAT1_P'] + base_variables['APATNAT1P2']), (base_variables['APATNAT11731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRPATNAT1():
        """
        Reduction retenue depense protection du patrimoine naturel
        """
        return max(min(APATNAT1(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO())), 0)

    @cache_result
    def APATNAT2():
        """
        Retenu : depense 2010 protection du patrimoine naturel : report
        """
        return (((saisie_variables.get('PATNAT2', 0) and saisie_variables.get('PATNAT2', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('PATNAT2', 0), (max((base_variables['APATNAT2_P'] + base_variables['APATNAT2P2']), (base_variables['APATNAT21731'] + 0)) and max((base_variables['APATNAT2_P'] + base_variables['APATNAT2P2']), (base_variables['APATNAT21731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('PATNAT2', 0), (max((base_variables['APATNAT2_P'] + base_variables['APATNAT2P2']), (base_variables['APATNAT21731'] + 0)) and max((base_variables['APATNAT2_P'] + base_variables['APATNAT2P2']), (base_variables['APATNAT21731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('PATNAT2', 0) and saisie_variables.get('PATNAT2', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('PATNAT2', 0), (max((base_variables['APATNAT2_P'] + base_variables['APATNAT2P2']), (base_variables['APATNAT21731'] + 0)) and max((base_variables['APATNAT2_P'] + base_variables['APATNAT2P2']), (base_variables['APATNAT21731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('PATNAT2', 0), (max((base_variables['APATNAT2_P'] + base_variables['APATNAT2P2']), (base_variables['APATNAT21731'] + 0)) and max((base_variables['APATNAT2_P'] + base_variables['APATNAT2P2']), (base_variables['APATNAT21731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRPATNAT2():
        """
        Reduction retenue depense protection du patrimoine naturel
        """
        return max(min(APATNAT2(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT1())), 0)

    @cache_result
    def NRPATNAT3():
        """
        Reduction retenue depense protection du patrimoine naturel
        """
        return max(min(APATNAT3(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT1() - NRPATNAT2())), 0)

    @cache_result
    def APATNAT():
        """
        Base retenue  depense protection du patrimoine naturel
        """
        return (((saisie_variables.get('PATNAT4', 0) and saisie_variables.get('PATNAT4', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('PATNAT4', 0), (max((base_variables['APATNAT_P'] + base_variables['APATNATP2']), (base_variables['APATNAT1731'] + 0)) and max((base_variables['APATNAT_P'] + base_variables['APATNATP2']), (base_variables['APATNAT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('PATNAT4', 0), (max((base_variables['APATNAT_P'] + base_variables['APATNATP2']), (base_variables['APATNAT1731'] + 0)) and max((base_variables['APATNAT_P'] + base_variables['APATNATP2']), (base_variables['APATNAT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('PATNAT4', 0) and saisie_variables.get('PATNAT4', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('PATNAT4', 0), (max((base_variables['APATNAT_P'] + base_variables['APATNATP2']), (base_variables['APATNAT1731'] + 0)) and max((base_variables['APATNAT_P'] + base_variables['APATNATP2']), (base_variables['APATNAT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('PATNAT4', 0), (max((base_variables['APATNAT_P'] + base_variables['APATNATP2']), (base_variables['APATNAT1731'] + 0)) and max((base_variables['APATNAT_P'] + base_variables['APATNATP2']), (base_variables['APATNAT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def NRPATNAT():
        """
        Reduction retenue depense protection du patrimoine naturel
        """
        return max(min(APATNAT(), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT1() - NRPATNAT2() - NRPATNAT3())), 0)

    @cache_result
    def NINVRETKG():
        """
        Plafonnement 7KG theorique
        """
        return (max(min(saisie_variables.get('INVSOCNRET', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT())), 0) and max(min(saisie_variables.get('INVSOCNRET', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETKG():
        """
        Plafonnement HKG
        """
        return (min(arr((NINVRETKG() and TX35 and NINVRETKG() * TX35 / 100)), PLAF_INVDOM) and min(arr((NINVRETKG() and TX35 and NINVRETKG() * TX35 / 100)), PLAF_INVDOM) * (1 - V_CNR()))

    @cache_result
    def NINVRETKH():
        """
        Plafonnement 7KH theorique
        """
        return (max(min(saisie_variables.get('INVOMSOCKH', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG())), 0) and max(min(saisie_variables.get('INVOMSOCKH', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETKH():
        """
        Plafonnement HKH
        """
        return (min(arr((NINVRETKH() and TX35 and NINVRETKH() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG()))) and min(arr((NINVRETKH() and TX35 and NINVRETKH() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETKI():
        """
        Plafonnement 7KI theorique
        """
        return (max(min(saisie_variables.get('INVOMSOCKI', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH())), 0) and max(min(saisie_variables.get('INVOMSOCKI', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETKI():
        """
        Plafonnement HKI
        """
        return (min(arr((NINVRETKI() and TX35 and NINVRETKI() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH()))) and min(arr((NINVRETKI() and TX35 and NINVRETKI() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQN():
        """
        Plafonnement 7QN theorique
        """
        return (max(min(saisie_variables.get('INVSOC2010', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI())), 0) and max(min(saisie_variables.get('INVSOC2010', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETQN():
        """
        Plafonnement 7QN
        """
        return (min(arr((NINVRETQN() and TX35 and NINVRETQN() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI()))) and min(arr((NINVRETQN() and TX35 and NINVRETQN() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQU():
        """
        Plafonnement 7QU theorique
        """
        return (max(min(saisie_variables.get('INVOMSOCQU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN())), 0) and max(min(saisie_variables.get('INVOMSOCQU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETQU():
        """
        Plafonnement 7QU
        """
        return (min(arr((NINVRETQU() and TX35 and NINVRETQU() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN()))) and min(arr((NINVRETQU() and TX35 and NINVRETQU() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQK():
        """
        Plafonnement 7QK theorique
        """
        return (max(min(saisie_variables.get('INVLOGSOC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU())), 0) and max(min(saisie_variables.get('INVLOGSOC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETQK():
        """
        Plafonnement 7QK
        """
        return (min(arr((NINVRETQK() and TX35 and NINVRETQK() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU()))) and min(arr((NINVRETQK() and TX35 and NINVRETQK() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQJ():
        """
        Plafonnement 7QJ theorique
        """
        return (max(min(saisie_variables.get('INVOMSOCQJ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK())), 0) and max(min(saisie_variables.get('INVOMSOCQJ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETQJ():
        """
        Plafonnement 7QJ
        """
        return (min(arr((NINVRETQJ() and TX35 and NINVRETQJ() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK()))) and min(arr((NINVRETQJ() and TX35 and NINVRETQJ() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQS():
        """
        Plafonnement 7QS theorique
        """
        return (max(min(saisie_variables.get('INVOMSOCQS', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ())), 0) and max(min(saisie_variables.get('INVOMSOCQS', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETQS():
        """
        Plafonnement 7QS
        """
        return (min(arr((NINVRETQS() and TX35 and NINVRETQS() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ()))) and min(arr((NINVRETQS() and TX35 and NINVRETQS() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQW():
        """
        Plafonnement 7QW theorique
        """
        return (max(min(saisie_variables.get('INVOMSOCQW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS())), 0) and max(min(saisie_variables.get('INVOMSOCQW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETQW():
        """
        Plafonnement 7QW
        """
        return (min(arr((NINVRETQW() and TX35 and NINVRETQW() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS()))) and min(arr((NINVRETQW() and TX35 and NINVRETQW() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQX():
        """
        Plafonnement 7QX theorique
        """
        return (max(min(saisie_variables.get('INVOMSOCQX', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW())), 0) and max(min(saisie_variables.get('INVOMSOCQX', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETQX():
        """
        Plafonnement HQX
        """
        return (min(arr((NINVRETQX() and TX35 and NINVRETQX() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW()))) and min(arr((NINVRETQX() and TX35 and NINVRETQX() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRA():
        """
        Plafonnement code HRA theorique
        """
        return (max(min(saisie_variables.get('CODHRA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX())), 0) and max(min(saisie_variables.get('CODHRA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETRA():
        """
        Plafonnement HRA
        """
        return (min(arr((NINVRETRA() and TX35 and NINVRETRA() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX()))) and min(arr((NINVRETRA() and TX35 and NINVRETRA() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRB():
        """
        Plafonnement code HRB theorique
        """
        return (max(min(saisie_variables.get('CODHRB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA())), 0) and max(min(saisie_variables.get('CODHRB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETRB():
        """
        Plafonnement HRB
        """
        return (min(arr((NINVRETRB() and TX35 and NINVRETRB() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA()))) and min(arr((NINVRETRB() and TX35 and NINVRETRB() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRC():
        """
        Plafonnement code HRC theorique
        """
        return (max(min(saisie_variables.get('CODHRC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB())), 0) and max(min(saisie_variables.get('CODHRC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETRC():
        """
        Plafonnement HRC
        """
        return (min(arr((NINVRETRC() and TX35 and NINVRETRC() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB()))) and min(arr((NINVRETRC() and TX35 and NINVRETRC() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRD():
        """
        Plafonnement code HRD theorique
        """
        return (max(min(saisie_variables.get('CODHRD', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB() - NINVRETRC())), 0) and max(min(saisie_variables.get('CODHRD', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB() - NINVRETRC())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETRD():
        """
        Plafonnement HRD
        """
        return (min(arr((NINVRETRD() and TX35 and NINVRETRD() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB() - INVRETRC()))) and min(arr((NINVRETRD() and TX35 and NINVRETRD() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB() - INVRETRC()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETXA():
        """
        Plafonnement code HXA theorique
        """
        return (max(min(saisie_variables.get('CODHXA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB() - NINVRETRC() - NINVRETRD())), 0) and max(min(saisie_variables.get('CODHXA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB() - NINVRETRC() - NINVRETRD())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETXA():
        """
        Plafonnement HXA
        """
        return (min(arr((NINVRETXA() and TX35 and NINVRETXA() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB() - INVRETRC() - INVRETRD()))) and min(arr((NINVRETXA() and TX35 and NINVRETXA() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB() - INVRETRC() - INVRETRD()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETXB():
        """
        Plafonnement code HXB theorique
        """
        return (max(min(saisie_variables.get('CODHXB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB() - NINVRETRC() - NINVRETRD() - NINVRETXA())), 0) and max(min(saisie_variables.get('CODHXB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB() - NINVRETRC() - NINVRETRD() - NINVRETXA())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETXB():
        """
        Plafonnement HXB
        """
        return (min(arr((NINVRETXB() and TX35 and NINVRETXB() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB() - INVRETRC() - INVRETRD() - INVRETXA()))) and min(arr((NINVRETXB() and TX35 and NINVRETXB() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB() - INVRETRC() - INVRETRD() - INVRETXA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETXC():
        """
        Plafonnement code HXC theorique
        """
        return (max(min(saisie_variables.get('CODHXC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB() - NINVRETRC() - NINVRETRD() - NINVRETXA() - NINVRETXB())), 0) and max(min(saisie_variables.get('CODHXC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB() - NINVRETRC() - NINVRETRD() - NINVRETXA() - NINVRETXB())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETXC():
        """
        Plafonnement HXC
        """
        return (min(arr((NINVRETXC() and TX35 and NINVRETXC() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB() - INVRETRC() - INVRETRD() - INVRETXA() - INVRETXB()))) and min(arr((NINVRETXC() and TX35 and NINVRETXC() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB() - INVRETRC() - INVRETRD() - INVRETXA() - INVRETXB()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETXE():
        """
        Plafonnement code HXE theorique
        """
        return (max(min(saisie_variables.get('CODHXE', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB() - NINVRETRC() - NINVRETRD() - NINVRETXA() - NINVRETXB() - NINVRETXC())), 0) and max(min(saisie_variables.get('CODHXE', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRCELTOT() - NRLOCNPRO() - NRPATNAT3() - NRPATNAT2() - NRPATNAT1() - NRPATNAT() - NINVRETKG() - NINVRETKH() - NINVRETKI() - NINVRETQN() - NINVRETQU() - NINVRETQK() - NINVRETQJ() - NINVRETQS() - NINVRETQW() - NINVRETQX() - NINVRETRA() - NINVRETRB() - NINVRETRC() - NINVRETRD() - NINVRETXA() - NINVRETXB() - NINVRETXC())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETXE():
        """
        Plafonnement HXE
        """
        return (min(arr((NINVRETXE() and TX35 and NINVRETXE() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB() - INVRETRC() - INVRETRD() - INVRETXA() - INVRETXB() - INVRETXC()))) and min(arr((NINVRETXE() and TX35 and NINVRETXE() * TX35 / 100)), max(0, (PLAF_INVDOM - INVRETKG() - INVRETKH() - INVRETKI() - INVRETQN() - INVRETQU() - INVRETQK() - INVRETQJ() - INVRETQS() - INVRETQW() - INVRETQX() - INVRETRA() - INVRETRB() - INVRETRC() - INVRETRD() - INVRETXA() - INVRETXB() - INVRETXC()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSOC():
        """
        Plafonnement investissements logement social
        """
        return (INVRETKG() + INVRETKH() + INVRETKI() + INVRETQN() + INVRETQU() + INVRETQK() + INVRETQJ() + INVRETQS() + INVRETQW() + INVRETQX() + INVRETRA() + INVRETRB() + INVRETRC() + INVRETRD() + INVRETXA() + INVRETXB() + INVRETXC() + INVRETXE())

    @cache_result
    def NRLOGSOC():
        """
        Investissements outre mer logement social - reduction
        """
        return (NINVRETXA() + NINVRETXB() + NINVRETXC() + NINVRETXE())

    @cache_result
    def NRDOMSOC1():
        """
        Investissements outre mer logement social - report 2009 - reduction
        """
        return (NINVRETKG() + NINVRETKH() + NINVRETKI() + NINVRETQN() + NINVRETQU() + NINVRETQK() + NINVRETQJ() + NINVRETQS() + NINVRETQW() + NINVRETQX() + NINVRETRA() + NINVRETRB() + NINVRETRC() + NINVRETRD())

    @cache_result
    def NRRI3():
        """
        Reductions impot lot 3
        """
        return (NRCELTOT() + NRLOCNPRO() + NRPATNAT1() + NRPATNAT2() + NRPATNAT3() + NRPATNAT())

    @cache_result
    def NINVRETPM():
        """
        Plafonnement 7PM theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPM', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0))), 0) and max(min(saisie_variables.get('INVOMRETPM', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0))), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETRJ():
        """
        Plafonnement 7RJ theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRJ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM())), 0) and max(min(saisie_variables.get('INVOMENTRJ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETMA():
        """
        Plafonnement 7MA theorique
        """
        return (max(min(saisie_variables.get('NRETROC40', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ())), 0) and max(min(saisie_variables.get('NRETROC40', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETMA():
        """
        Plafonnement 7MA
        """
        return (min(arr((NINVRETMA() and TX40 and NINVRETMA() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC()))) and min(arr((NINVRETMA() and TX40 and NINVRETMA() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETLG():
        """
        Plafonnement 7LG theorique
        """
        return (max(min(saisie_variables.get('NRETROC50', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA())), 0) and max(min(saisie_variables.get('NRETROC50', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETLG():
        """
        Plafonnement HLG
        """
        return (min(arr((NINVRETLG() and TX50 and NINVRETLG() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA()))) and min(arr((NINVRETLG() and TX50 and NINVRETLG() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETKS():
        """
        Plafonnement 7KS
        """
        return (max(min(saisie_variables.get('INVENDI', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG())), 0) and max(min(saisie_variables.get('INVENDI', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETMB():
        """
        Plafonnement 7MB theorique
        """
        return (max(min(saisie_variables.get('RETROCOMMB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS())), 0) and max(min(saisie_variables.get('RETROCOMMB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETMB():
        """
        Plafonnement 7MB
        """
        return (min(arr((NINVRETMB() and TX40 and NINVRETMB() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG()))) and min(arr((NINVRETMB() and TX40 and NINVRETMB() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETMC():
        """
        Plafonnement 7MC theorique
        """
        return (max(min(saisie_variables.get('RETROCOMMC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB())), 0) and max(min(saisie_variables.get('RETROCOMMC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETMC():
        """
        Plafonnement 7MC
        """
        return (min(arr((NINVRETMC() and TX40 and NINVRETMC() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB()))) and min(arr((NINVRETMC() and TX40 and NINVRETMC() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETLH():
        """
        Plafonnement 7LH theorique
        """
        return (max(min(saisie_variables.get('RETROCOMLH', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC())), 0) and max(min(saisie_variables.get('RETROCOMLH', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETLH():
        """
        Plafonnement 7LH
        """
        return (min(arr((NINVRETLH() and TX50 and NINVRETLH() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC()))) and min(arr((NINVRETLH() and TX50 and NINVRETLH() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETLI():
        """
        Plafonnement 7LI theorique
        """
        return (max(min(saisie_variables.get('RETROCOMLI', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH())), 0) and max(min(saisie_variables.get('RETROCOMLI', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETLI():
        """
        Plafonnement 7LI
        """
        return (min(arr((NINVRETLI() and TX50 and NINVRETLI() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH()))) and min(arr((NINVRETLI() and TX50 and NINVRETLI() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETKT():
        """
        Plafonnement 7KT theorique
        """
        return (max(min(saisie_variables.get('INVOMENTKT', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI())), 0) and max(min(saisie_variables.get('INVOMENTKT', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETKU():
        """
        Plafonnement 7KU theorique
        """
        return (max(min(saisie_variables.get('INVOMENTKU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT())), 0) and max(min(saisie_variables.get('INVOMENTKU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETQP():
        """
        Plafonnement 7QP theorique
        """
        return (max(min(saisie_variables.get('INVRETRO2', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU())), 0) and max(min(saisie_variables.get('INVRETRO2', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETQP():
        """
        Plafonnement 7QP
        """
        return (min(arr((NINVRETQP() and TX40 and NINVRETQP() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI()))) and min(arr((NINVRETQP() and TX40 and NINVRETQP() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQG():
        """
        Plafonnement 7QG theorique
        """
        return (max(min(saisie_variables.get('INVDOMRET60', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP())), 0) and max(min(saisie_variables.get('INVDOMRET60', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETQG():
        """
        Plafonnement 7QG
        """
        return (min(arr((NINVRETQG() and TX40 and NINVRETQG() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP()))) and min(arr((NINVRETQG() and TX40 and NINVRETQG() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPB():
        """
        Plafonnement 7PB theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG())), 0) and max(min(saisie_variables.get('INVOMRETPB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETPF():
        """
        Plafonnement 7PF theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPF', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB())), 0) and max(min(saisie_variables.get('INVOMRETPF', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETPJ():
        """
        Plafonnement 7PJ theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPJ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF())), 0) and max(min(saisie_variables.get('INVOMRETPJ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETQO():
        """
        Plafonnement 7QO theorique
        """
        return (max(min(saisie_variables.get('INVRETRO1', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ())), 0) and max(min(saisie_variables.get('INVRETRO1', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETQO():
        """
        Plafonnement 7QO
        """
        return (min(arr((NINVRETQO() and TX50 and NINVRETQO() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG()))) and min(arr((NINVRETQO() and TX50 and NINVRETQO() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQF():
        """
        Plafonnement 7QF theorique
        """
        return (max(min(saisie_variables.get('INVDOMRET50', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO())), 0) and max(min(saisie_variables.get('INVDOMRET50', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETQF():
        """
        Plafonnement 7QF
        """
        return (min(arr((NINVRETQF() and TX50 and NINVRETQF() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO()))) and min(arr((NINVRETQF() and TX50 and NINVRETQF() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPB():
        """
        Plafonnement 7PB
        """
        return (min(arr((NINVRETPB() and TX375 and NINVRETPB() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF()))) and min(arr((NINVRETPB() and TX375 and NINVRETPB() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPF():
        """
        Plafonnement 7PF
        """
        return (min(arr((NINVRETPF() and TX375 and NINVRETPF() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB()))) and min(arr((NINVRETPF() and TX375 and NINVRETPF() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPJ():
        """
        Plafonnement 7PJ
        """
        return (min(arr((NINVRETPJ() and TX375 and NINVRETPJ() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF()))) and min(arr((NINVRETPJ() and TX375 and NINVRETPJ() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPA():
        """
        Plafonnement 7PA theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO() - NINVRETQF())), 0) and max(min(saisie_variables.get('INVOMRETPA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO() - NINVRETQF())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETPA():
        """
        Plafonnement 7PA
        """
        return (min(arr((NINVRETPA() and TX4737 and NINVRETPA() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ()))) and min(arr((NINVRETPA() and TX4737 and NINVRETPA() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPE():
        """
        Plafonnement 7PE theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPE', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO() - NINVRETQF() - NINVRETPA())), 0) and max(min(saisie_variables.get('INVOMRETPE', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO() - NINVRETQF() - NINVRETPA())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETPE():
        """
        Plafonnement 7PE
        """
        return (min(arr((NINVRETPE() and TX4737 and NINVRETPE() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA()))) and min(arr((NINVRETPE() and TX4737 and NINVRETPE() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPI():
        """
        Plafonnement 7PI theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPI', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO() - NINVRETQF() - NINVRETPA() - NINVRETPE())), 0) and max(min(saisie_variables.get('INVOMRETPI', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO() - NINVRETQF() - NINVRETPA() - NINVRETPE())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETPI():
        """
        Plafonnement 7PI
        """
        return (min(arr((NINVRETPI() and TX4737 and NINVRETPI() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE()))) and min(arr((NINVRETPI() and TX4737 and NINVRETPI() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQR():
        """
        Plafonnement 7QR theorique
        """
        return (max(min(saisie_variables.get('INVIMP', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO() - NINVRETQF() - NINVRETPA() - NINVRETPE() - NINVRETPI())), 0) and max(min(saisie_variables.get('INVIMP', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO() - NINVRETQF() - NINVRETPA() - NINVRETPE() - NINVRETPI())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETQI():
        """
        Plafonnement 7QI theorique
        """
        return (max(min(saisie_variables.get('INVDIR2009', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO() - NINVRETQF() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETQR())), 0) and max(min(saisie_variables.get('INVDIR2009', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETQO() - NINVRETQF() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETQR())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETPD():
        """
        Plafonnement 7PD theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPD', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI())), 0) and max(min(saisie_variables.get('INVOMRETPD', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETPH():
        """
        Plafonnement 7PH theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPH', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD())), 0) and max(min(saisie_variables.get('INVOMRETPH', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETPL():
        """
        Plafonnement 7PL theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPL', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH())), 0) and max(min(saisie_variables.get('INVOMRETPL', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETPO():
        """
        Plafonnement 7PO theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPO', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL())), 0) and max(min(saisie_variables.get('INVOMRETPO', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETPO():
        """
        Plafonnement 7PO
        """
        return (min(arr((NINVRETPO() and TX40 and NINVRETPO() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI()))) and min(arr((NINVRETPO() and TX40 and NINVRETPO() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPT():
        """
        Plafonnement 7PT theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPT', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO())), 0) and max(min(saisie_variables.get('INVOMRETPT', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETPT():
        """
        Plafonnement 7PT
        """
        return (min(arr((NINVRETPT() and TX40 and NINVRETPT() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO()))) and min(arr((NINVRETPT() and TX40 and NINVRETPT() * TX40 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPY():
        """
        Plafonnement 7PY theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPY', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT())), 0) and max(min(saisie_variables.get('INVOMRETPY', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETPY():
        """
        Plafonnement 7PY
        """
        return (min(arr((NINVRETPY() and TX375 and NINVRETPY() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT()))) and min(arr((NINVRETPY() and TX375 and NINVRETPY() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRL():
        """
        Plafonnement 7RL theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRL', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY())), 0) and max(min(saisie_variables.get('INVOMENTRL', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETRL():
        """
        Plafonnement 7RL
        """
        return (min(arr((NINVRETRL() and TX375 and NINVRETRL() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY()))) and min(arr((NINVRETRL() and TX375 and NINVRETRL() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRQ():
        """
        Plafonnement 7RQ theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRQ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL())), 0) and max(min(saisie_variables.get('INVOMENTRQ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETRQ():
        """
        Plafonnement 7RQ
        """
        return (min(arr((NINVRETRQ() and TX375 and NINVRETRQ() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL()))) and min(arr((NINVRETRQ() and TX375 and NINVRETRQ() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRV():
        """
        Plafonnement 7RV theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRV', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ())), 0) and max(min(saisie_variables.get('INVOMENTRV', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETRV():
        """
        Plafonnement 7RV
        """
        return (min(arr((NINVRETRV() and TX375 and NINVRETRV() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ()))) and min(arr((NINVRETRV() and TX375 and NINVRETRV() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETNV():
        """
        Plafonnement 7NV theorique
        """
        return (max(min(saisie_variables.get('INVOMENTNV', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV())), 0) and max(min(saisie_variables.get('INVOMENTNV', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETNV():
        """
        Plafonnement 7NV
        """
        return (min(arr((NINVRETNV() and TX375 and NINVRETNV() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV()))) and min(arr((NINVRETNV() and TX375 and NINVRETNV() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPN():
        """
        Plafonnement 7PN theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPN', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV())), 0) and max(min(saisie_variables.get('INVOMRETPN', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETPN():
        """
        Plafonnement 7PN
        """
        return (min(arr((NINVRETPN() and TX50 and NINVRETPN() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV()))) and min(arr((NINVRETPN() and TX50 and NINVRETPN() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPS():
        """
        Plafonnement 7PS theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPS', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN())), 0) and max(min(saisie_variables.get('INVOMRETPS', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETPS():
        """
        Plafonnement 7PS
        """
        return (min(arr((NINVRETPS() and TX50 and NINVRETPS() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN()))) and min(arr((NINVRETPS() and TX50 and NINVRETPS() * TX50 / 100)), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPX():
        """
        Plafonnement 7PX theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPX', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS())), 0) and max(min(saisie_variables.get('INVOMRETPX', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETPX():
        """
        Plafonnement 7PX
        """
        return (min(arr((NINVRETPX() and TX4737 and NINVRETPX() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS()))) and min(arr((NINVRETPX() and TX4737 and NINVRETPX() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRK():
        """
        Plafonnement 7RK theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRK', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX())), 0) and max(min(saisie_variables.get('INVOMENTRK', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETRK():
        """
        Plafonnement 7RK
        """
        return (min(arr((NINVRETRK() and TX4737 and NINVRETRK() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX()))) and min(arr((NINVRETRK() and TX4737 and NINVRETRK() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRP():
        """
        Plafonnement 7RP theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRP', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK())), 0) and max(min(saisie_variables.get('INVOMENTRP', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETRP():
        """
        Plafonnement 7RP
        """
        return (min(arr((NINVRETRP() and TX4737 and NINVRETRP() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK()))) and min(arr((NINVRETRP() and TX4737 and NINVRETRP() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRU():
        """
        Plafonnement 7RU theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP())), 0) and max(min(saisie_variables.get('INVOMENTRU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETRU():
        """
        Plafonnement 7RU
        """
        return (min(arr((NINVRETRU() and TX4737 and NINVRETRU() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP()))) and min(arr((NINVRETRU() and TX4737 and NINVRETRU() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETNU():
        """
        Plafonnement 7NU theorique
        """
        return (max(min(saisie_variables.get('INVOMENTNU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU())), 0) and max(min(saisie_variables.get('INVOMENTNU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETNU():
        """
        Plafonnement 7NU
        """
        return (min(arr((NINVRETNU() and TX4737 and NINVRETNU() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU()))) and min(arr((NINVRETNU() and TX4737 and NINVRETNU() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPP():
        """
        Plafonnement 7PP theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPP', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU())), 0) and max(min(saisie_variables.get('INVOMRETPP', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETPU():
        """
        Plafonnement 7PU theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP())), 0) and max(min(saisie_variables.get('INVOMRETPU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETRG():
        """
        Plafonnement 7RG theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRG', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU())), 0) and max(min(saisie_variables.get('INVOMENTRG', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETRM():
        """
        Plafonnement 7RM theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRM', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG())), 0) and max(min(saisie_variables.get('INVOMENTRM', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETRR():
        """
        Plafonnement 7RR theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRR', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM())), 0) and max(min(saisie_variables.get('INVOMENTRR', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETRW():
        """
        Plafonnement 7RW theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR())), 0) and max(min(saisie_variables.get('INVOMENTRW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETNW():
        """
        Plafonnement 7NW theorique
        """
        return (max(min(saisie_variables.get('INVOMENTNW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW())), 0) and max(min(saisie_variables.get('INVOMENTNW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETPR():
        """
        Plafonnement 7PR theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPR', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW())), 0) and max(min(saisie_variables.get('INVOMRETPR', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETPW():
        """
        Plafonnement 7PW theorique
        """
        return (max(min(saisie_variables.get('INVOMRETPW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR())), 0) and max(min(saisie_variables.get('INVOMRETPW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETRI():
        """
        Plafonnement 7RI theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRI', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW())), 0) and max(min(saisie_variables.get('INVOMENTRI', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETRO():
        """
        Plafonnement 7RO theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRO', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI())), 0) and max(min(saisie_variables.get('INVOMENTRO', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETRT():
        """
        Plafonnement 7RT theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRT', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO())), 0) and max(min(saisie_variables.get('INVOMENTRT', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETRY():
        """
        Plafonnement 7RY theorique
        """
        return (max(min(saisie_variables.get('INVOMENTRY', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT())), 0) and max(min(saisie_variables.get('INVOMENTRY', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETNY():
        """
        Plafonnement 7NY theorique
        """
        return (max(min(saisie_variables.get('INVOMENTNY', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY())), 0) and max(min(saisie_variables.get('INVOMENTNY', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETSB():
        """
        Plafonnement HSB theorique
        """
        return (max(min(saisie_variables.get('CODHSB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY())), 0) and max(min(saisie_variables.get('CODHSB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETSB():
        """
        Plafonnement HSB
        """
        return (min(arr((NINVRETSB() and TX375 and NINVRETSB() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU()))) and min(arr((NINVRETSB() and TX375 and NINVRETSB() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSG():
        """
        Plafonnement HSG theorique
        """
        return (max(min(saisie_variables.get('CODHSG', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB())), 0) and max(min(saisie_variables.get('CODHSG', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETSG():
        """
        Plafonnement HSG
        """
        return (min(arr((NINVRETSG() and TX375 and NINVRETSG() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB()))) and min(arr((NINVRETSG() and TX375 and NINVRETSG() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSL():
        """
        Plafonnement HSL theorique
        """
        return (max(min(saisie_variables.get('CODHSL', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG())), 0) and max(min(saisie_variables.get('CODHSL', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETSL():
        """
        Plafonnement HSL
        """
        return (min(arr((NINVRETSL() and TX375 and NINVRETSL() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG()))) and min(arr((NINVRETSL() and TX375 and NINVRETSL() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSQ():
        """
        Plafonnement HSQ theorique
        """
        return (max(min(saisie_variables.get('CODHSQ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL())), 0) and max(min(saisie_variables.get('CODHSQ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETSQ():
        """
        Plafonnement HSQ
        """
        return (min(arr((NINVRETSQ() and TX375 and NINVRETSQ() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL()))) and min(arr((NINVRETSQ() and TX375 and NINVRETSQ() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSV():
        """
        Plafonnement HSV theorique
        """
        return (max(min(saisie_variables.get('CODHSV', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ())), 0) and max(min(saisie_variables.get('CODHSV', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETSV():
        """
        Plafonnement HSV
        """
        return (min(arr((NINVRETSV() and TX375 and NINVRETSV() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ()))) and min(arr((NINVRETSV() and TX375 and NINVRETSV() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETTA():
        """
        Plafonnement HTA theorique
        """
        return (max(min(saisie_variables.get('CODHTA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV())), 0) and max(min(saisie_variables.get('CODHTA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETTA():
        """
        Plafonnement HTA
        """
        return (min(arr((NINVRETTA() and TX375 and NINVRETTA() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV()))) and min(arr((NINVRETTA() and TX375 and NINVRETTA() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSA():
        """
        Plafonnement HSA theorique
        """
        return (max(min(saisie_variables.get('CODHSA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA())), 0) and max(min(saisie_variables.get('CODHSA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETSA():
        """
        Plafonnement HSA
        """
        return (min(arr((NINVRETSA() and TX4737 and NINVRETSA() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA()))) and min(arr((NINVRETSA() and TX4737 and NINVRETSA() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSF():
        """
        Plafonnement HSF theorique
        """
        return (max(min(saisie_variables.get('CODHSF', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA())), 0) and max(min(saisie_variables.get('CODHSF', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETSF():
        """
        Plafonnement HSF
        """
        return (min(arr((NINVRETSF() and TX4737 and NINVRETSF() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA()))) and min(arr((NINVRETSF() and TX4737 and NINVRETSF() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSK():
        """
        Plafonnement HSK theorique
        """
        return (max(min(saisie_variables.get('CODHSK', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF())), 0) and max(min(saisie_variables.get('CODHSK', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETSK():
        """
        Plafonnement HSK
        """
        return (min(arr((NINVRETSK() and TX4737 and NINVRETSK() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF()))) and min(arr((NINVRETSK() and TX4737 and NINVRETSK() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSP():
        """
        Plafonnement HSP theorique
        """
        return (max(min(saisie_variables.get('CODHSP', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK())), 0) and max(min(saisie_variables.get('CODHSP', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETSP():
        """
        Plafonnement HSP
        """
        return (min(arr((NINVRETSP() and TX4737 and NINVRETSP() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK()))) and min(arr((NINVRETSP() and TX4737 and NINVRETSP() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSU():
        """
        Plafonnement HSU theorique
        """
        return (max(min(saisie_variables.get('CODHSU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP())), 0) and max(min(saisie_variables.get('CODHSU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETSU():
        """
        Plafonnement HSU
        """
        return (min(arr((NINVRETSU() and TX4737 and NINVRETSU() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP()))) and min(arr((NINVRETSU() and TX4737 and NINVRETSU() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSZ():
        """
        Plafonnement HSZ theorique
        """
        return (max(min(saisie_variables.get('CODHSZ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU())), 0) and max(min(saisie_variables.get('CODHSZ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETSZ():
        """
        Plafonnement HSZ
        """
        return (min(arr((NINVRETSZ() and TX4737 and NINVRETSZ() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU()))) and min(arr((NINVRETSZ() and TX4737 and NINVRETSZ() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSC():
        """
        Plafonnement HSC theorique
        """
        return (max(min(saisie_variables.get('CODHSC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ())), 0) and max(min(saisie_variables.get('CODHSC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETSH():
        """
        Plafonnement HSH theorique
        """
        return (max(min(saisie_variables.get('CODHSH', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC())), 0) and max(min(saisie_variables.get('CODHSH', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETSM():
        """
        Plafonnement HSM theorique
        """
        return (max(min(saisie_variables.get('CODHSM', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH())), 0) and max(min(saisie_variables.get('CODHSM', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETSR():
        """
        Plafonnement HSR theorique
        """
        return (max(min(saisie_variables.get('CODHSR', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM())), 0) and max(min(saisie_variables.get('CODHSR', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETSW():
        """
        Plafonnement HSW theorique
        """
        return (max(min(saisie_variables.get('CODHSW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR())), 0) and max(min(saisie_variables.get('CODHSW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETTB():
        """
        Plafonnement HTB theorique
        """
        return (max(min(saisie_variables.get('CODHTB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW())), 0) and max(min(saisie_variables.get('CODHTB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETSE():
        """
        Plafonnement HSE theorique
        """
        return (max(min(saisie_variables.get('CODHSE', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB())), 0) and max(min(saisie_variables.get('CODHSE', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETSJ():
        """
        Plafonnement HSJ theorique
        """
        return (max(min(saisie_variables.get('CODHSJ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE())), 0) and max(min(saisie_variables.get('CODHSJ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETSO():
        """
        Plafonnement HSO theorique
        """
        return (max(min(saisie_variables.get('CODHSO', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ())), 0) and max(min(saisie_variables.get('CODHSO', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETST():
        """
        Plafonnement HST theorique
        """
        return (max(min(saisie_variables.get('CODHST', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO())), 0) and max(min(saisie_variables.get('CODHST', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETSY():
        """
        Plafonnement HSY theorique
        """
        return (max(min(saisie_variables.get('CODHSY', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST())), 0) and max(min(saisie_variables.get('CODHSY', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETTD():
        """
        Plafonnement HTD theorique
        """
        return (max(min(saisie_variables.get('CODHTD', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY())), 0) and max(min(saisie_variables.get('CODHTD', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY())), 0) * (1 - V_CNR()))

    @cache_result
    def NINVRETAB():
        """
        Plafonnement HAB theorique
        """
        return (max(min(saisie_variables.get('CODHAB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD())), 0) and max(min(saisie_variables.get('CODHAB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAB():
        """
        Plafonnement HAB
        """
        return (min(arr((NINVRETAB() and TX375 and NINVRETAB() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ()))) and min(arr((NINVRETAB() and TX375 and NINVRETAB() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAG():
        """
        Plafonnement HAG theorique
        """
        return (max(min(saisie_variables.get('CODHAG', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB())), 0) and max(min(saisie_variables.get('CODHAG', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAG():
        """
        Plafonnement HAG
        """
        return (min(arr((NINVRETAG() and TX375 and NINVRETAG() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB()))) and min(arr((NINVRETAG() and TX375 and NINVRETAG() * TX375 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAL():
        """
        Plafonnement HAL theorique
        """
        return (max(min(saisie_variables.get('CODHAL', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG())), 0) and max(min(saisie_variables.get('CODHAL', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAL():
        """
        Plafonnement HAL
        """
        return (min(arr((NINVRETAL() and TX375 and NINVRETAL() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG()))) and min(arr((NINVRETAL() and TX375 and NINVRETAL() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAQ():
        """
        Plafonnement HAQ theorique
        """
        return (max(min(saisie_variables.get('CODHAQ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL())), 0) and max(min(saisie_variables.get('CODHAQ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAQ():
        """
        Plafonnement HAQ
        """
        return (min(arr((NINVRETAQ() and TX375 and NINVRETAQ() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL()))) and min(arr((NINVRETAQ() and TX375 and NINVRETAQ() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAV():
        """
        Plafonnement HAV theorique
        """
        return (max(min(saisie_variables.get('CODHAV', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ())), 0) and max(min(saisie_variables.get('CODHAV', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAV():
        """
        Plafonnement HAV
        """
        return (min(arr((NINVRETAV() and TX375 and NINVRETAV() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ()))) and min(arr((NINVRETAV() and TX375 and NINVRETAV() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETBB():
        """
        Plafonnement HBB theorique
        """
        return (max(min(saisie_variables.get('CODHBB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV())), 0) and max(min(saisie_variables.get('CODHBB', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETBB():
        """
        Plafonnement HBB
        """
        return (min(arr((NINVRETBB() and TX375 and NINVRETBB() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV()))) and min(arr((NINVRETBB() and TX375 and NINVRETBB() * TX375 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAA():
        """
        Plafonnement HAA theorique
        """
        return (max(min(saisie_variables.get('CODHAA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB())), 0) and max(min(saisie_variables.get('CODHAA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAA():
        """
        Plafonnement HAA
        """
        return (min(arr((NINVRETAA() and TX4737 and NINVRETAA() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB()))) and min(arr((NINVRETAA() and TX4737 and NINVRETAA() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAF():
        """
        Plafonnement HAF theorique
        """
        return (max(min(saisie_variables.get('CODHAF', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA())), 0) and max(min(saisie_variables.get('CODHAF', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAF():
        """
        Plafonnement HAF
        """
        return (min(arr((NINVRETAF() and TX4737 and NINVRETAF() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA()))) and min(arr((NINVRETAF() and TX4737 and NINVRETAF() * TX4737 / 100)), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAK():
        """
        Plafonnement HAK theorique
        """
        return (max(min(saisie_variables.get('CODHAK', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF())), 0) and max(min(saisie_variables.get('CODHAK', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAK():
        """
        Plafonnement HAK
        """
        return (min(arr((NINVRETAK() and TX4737 and NINVRETAK() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF()))) and min(arr((NINVRETAK() and TX4737 and NINVRETAK() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAP():
        """
        Plafonnement HAP theorique
        """
        return (max(min(saisie_variables.get('CODHAP', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK())), 0) and max(min(saisie_variables.get('CODHAP', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAP():
        """
        Plafonnement HAP
        """
        return (min(arr((NINVRETAP() and TX4737 and NINVRETAP() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK()))) and min(arr((NINVRETAP() and TX4737 and NINVRETAP() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAU():
        """
        Plafonnement HAU theorique
        """
        return (max(min(saisie_variables.get('CODHAU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP())), 0) and max(min(saisie_variables.get('CODHAU', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAU():
        """
        Plafonnement HAU
        """
        return (min(arr((NINVRETAU() and TX4737 and NINVRETAU() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP()))) and min(arr((NINVRETAU() and TX4737 and NINVRETAU() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETBA():
        """
        Plafonnement HBA theorique
        """
        return (max(min(saisie_variables.get('CODHBA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU())), 0) and max(min(saisie_variables.get('CODHBA', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETBA():
        """
        Plafonnement HBA
        """
        return (min(arr((NINVRETBA() and TX4737 and NINVRETBA() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU()))) and min(arr((NINVRETBA() and TX4737 and NINVRETBA() * TX4737 / 100)), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPP():
        """
        Plafonnement 7PP
        """
        return (min(NINVRETPP(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA()))) and min(NINVRETPP(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPU():
        """
        Plafonnement 7PU
        """
        return (min(NINVRETPU(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP()))) and min(NINVRETPU(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRG():
        """
        Plafonnement 7RG
        """
        return (min(NINVRETRG(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU()))) and min(NINVRETRG(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRM():
        """
        Plafonnement 7RM
        """
        return (min(NINVRETRM(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG()))) and min(NINVRETRM(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRR():
        """
        Plafonnement 7RR
        """
        return (min(NINVRETRR(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM()))) and min(NINVRETRR(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRW():
        """
        Plafonnement 7RW
        """
        return (min(NINVRETRW(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR()))) and min(NINVRETRW(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETNW():
        """
        Plafonnement 7NW
        """
        return (min(NINVRETNW(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW()))) and min(NINVRETNW(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSC():
        """
        Plafonnement HSC
        """
        return (min(NINVRETSC(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW()))) and min(NINVRETSC(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSH():
        """
        Plafonnement HSH
        """
        return (min(NINVRETSH(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC()))) and min(NINVRETSH(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSM():
        """
        Plafonnement HSM
        """
        return (min(NINVRETSM(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH()))) and min(NINVRETSM(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSR():
        """
        Plafonnement HSR
        """
        return (min(NINVRETSR(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM()))) and min(NINVRETSR(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSW():
        """
        Plafonnement HSW
        """
        return (min(NINVRETSW(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR()))) and min(NINVRETSW(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETTB():
        """
        Plafonnement HTB
        """
        return (min(NINVRETTB(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW()))) and min(NINVRETTB(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAC():
        """
        Plafonnement HAC theorique
        """
        return (max(min(saisie_variables.get('CODHAC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA())), 0) and max(min(saisie_variables.get('CODHAC', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAC():
        """
        Plafonnement HAC
        """
        return (min(NINVRETAC(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB()))) and min(NINVRETAC(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAH():
        """
        Plafonnement HAH theorique
        """
        return (max(min(saisie_variables.get('CODHAH', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC())), 0) and max(min(saisie_variables.get('CODHAH', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAH():
        """
        Plafonnement HAH
        """
        return (min(NINVRETAH(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB() - INVRETAC()))) and min(NINVRETAH(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB() - INVRETAC()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAM():
        """
        Plafonnement HAM theorique
        """
        return (max(min(saisie_variables.get('CODHAM', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH())), 0) and max(min(saisie_variables.get('CODHAM', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAM():
        """
        Plafonnement HAM
        """
        return (min(NINVRETAM(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB() - INVRETAC() - INVRETAH()))) and min(NINVRETAM(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB() - INVRETAC() - INVRETAH()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAR():
        """
        Plafonnement HAR theorique
        """
        return (max(min(saisie_variables.get('CODHAR', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM())), 0) and max(min(saisie_variables.get('CODHAR', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAR():
        """
        Plafonnement HAR
        """
        return (min(NINVRETAR(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB() - INVRETAC() - INVRETAH() - INVRETAM()))) and min(NINVRETAR(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB() - INVRETAC() - INVRETAH() - INVRETAM()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAW():
        """
        Plafonnement HAW theorique
        """
        return (max(min(saisie_variables.get('CODHAW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR())), 0) and max(min(saisie_variables.get('CODHAW', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAW():
        """
        Plafonnement HAW
        """
        return (min(NINVRETAW(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB() - INVRETAC() - INVRETAH() - INVRETAM() - INVRETAR()))) and min(NINVRETAW(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB() - INVRETAC() - INVRETAH() - INVRETAM() - INVRETAR()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETBE():
        """
        Plafonnement HBE theorique
        """
        return (max(min(saisie_variables.get('CODHBE', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW())), 0) and max(min(saisie_variables.get('CODHBE', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETBE():
        """
        Plafonnement HBE
        """
        return (min(NINVRETBE(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB() - INVRETAC() - INVRETAH() - INVRETAM() - INVRETAR() - INVRETAW()))) and min(NINVRETBE(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETMA() - INVRETLG() - INVRETMB() - INVRETMC() - INVRETLH() - INVRETLI() - INVRETQP() - INVRETQG() - INVRETQO() - INVRETQF() - INVRETPB() - INVRETPF() - INVRETPJ() - INVRETPA() - INVRETPE() - INVRETPI() - INVRETPO() - INVRETPT() - INVRETPY() - INVRETRL() - INVRETRQ() - INVRETRV() - INVRETNV() - INVRETPN() - INVRETPS() - INVRETPX() - INVRETRK() - INVRETRP() - INVRETRU() - INVRETNU() - INVRETSB() - INVRETSG() - INVRETSL() - INVRETSQ() - INVRETSV() - INVRETTA() - INVRETSA() - INVRETSF() - INVRETSK() - INVRETSP() - INVRETSU() - INVRETSZ() - INVRETAB() - INVRETAG() - INVRETAL() - INVRETAQ() - INVRETAV() - INVRETBB() - INVRETAA() - INVRETAF() - INVRETAK() - INVRETAP() - INVRETAU() - INVRETBA() - INVRETPP() - INVRETPU() - INVRETRG() - INVRETRM() - INVRETRR() - INVRETRW() - INVRETNW() - INVRETSC() - INVRETSH() - INVRETSM() - INVRETSR() - INVRETSW() - INVRETTB() - INVRETAC() - INVRETAH() - INVRETAM() - INVRETAR() - INVRETAW()))) * (1 - V_CNR()))

    @cache_result
    def INVRETENT():
        """
        Plafonnement investissements entreprise
        """
        return (INVRETMA() + INVRETLG() + INVRETMB() + INVRETMC() + INVRETLH() + INVRETLI() + INVRETQP() + INVRETQG() + INVRETQO() + INVRETQF() + INVRETPB() + INVRETPF() + INVRETPJ() + INVRETPA() + INVRETPE() + INVRETPI() + INVRETPO() + INVRETPT() + INVRETPY() + INVRETRL() + INVRETRQ() + INVRETRV() + INVRETNV() + INVRETPN() + INVRETPS() + INVRETPX() + INVRETRK() + INVRETRP() + INVRETRU() + INVRETNU() + INVRETSB() + INVRETSG() + INVRETSL() + INVRETSQ() + INVRETSV() + INVRETTA() + INVRETSA() + INVRETSF() + INVRETSK() + INVRETSP() + INVRETSU() + INVRETSZ() + INVRETAB() + INVRETAG() + INVRETAL() + INVRETAQ() + INVRETAV() + INVRETBB() + INVRETAA() + INVRETAF() + INVRETAK() + INVRETAP() + INVRETAU() + INVRETBA() + INVRETPP() + INVRETPU() + INVRETRG() + INVRETRM() + INVRETRR() + INVRETRW() + INVRETNW() + INVRETSC() + INVRETSH() + INVRETSM() + INVRETSR() + INVRETSW() + INVRETTB() + INVRETAC() + INVRETAH() + INVRETAM() + INVRETAR() + INVRETAW() + INVRETBE())

    @cache_result
    def INVRETQL():
        """
        Plafonnement 7QL
        """
        return (min(NINVRETQL(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT()))) and min(NINVRETQL(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT()))) * (1 - V_CNR()))

    @cache_result
    def TTPVQ():
        """
        Plus-values et gains soumis au quotient
        """
        return TONEQUOHT()

    @cache_result
    def RNIDOM1():
        """
        Montant RNI investissements outre mer (taux 15 %)
        """
        return arr(((RNG() + TTPVQ()) and TX15 and (RNG() + TTPVQ()) * TX15 / 100))

    @cache_result
    def INVRETKGA():
        """
        Plafonnement HKG avec case HQA coche
        """
        return (min(arr((NINVRETKG() and TX35 and NINVRETKG() * TX35 / 100)), RNIDOM1()) and min(arr((NINVRETKG() and TX35 and NINVRETKG() * TX35 / 100)), RNIDOM1()) * (1 - V_CNR()))

    @cache_result
    def INVRETKHA():
        """
        Plafonnement HKH avec case HQA coche
        """
        return (min(arr((NINVRETKH() and TX35 and NINVRETKH() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA()))) and min(arr((NINVRETKH() and TX35 and NINVRETKH() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETKIA():
        """
        Plafonnement HKI avec case HQA coche
        """
        return (min(arr((NINVRETKI() and TX35 and NINVRETKI() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA()))) and min(arr((NINVRETKI() and TX35 and NINVRETKI() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQNA():
        """
        Plafonnement 7QN avec case 7QA coche
        """
        return (min(arr((NINVRETQN() and TX35 and NINVRETQN() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA()))) and min(arr((NINVRETQN() and TX35 and NINVRETQN() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQUA():
        """
        Plafonnement 7QU avec case 7QA coche
        """
        return (min(arr((NINVRETQU() and TX35 and NINVRETQU() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA()))) and min(arr((NINVRETQU() and TX35 and NINVRETQU() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQKA():
        """
        Plafonnement 7QK avec case 7QA coche
        """
        return (min(arr((NINVRETQK() and TX35 and NINVRETQK() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA()))) and min(arr((NINVRETQK() and TX35 and NINVRETQK() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQJA():
        """
        Plafonnement 7QJ avec case 7QA coche
        """
        return (min(arr((NINVRETQJ() and TX35 and NINVRETQJ() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA()))) and min(arr((NINVRETQJ() and TX35 and NINVRETQJ() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQSA():
        """
        Plafonnement 7QS avec case 7QA coche
        """
        return (min(arr((NINVRETQS() and TX35 and NINVRETQS() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA()))) and min(arr((NINVRETQS() and TX35 and NINVRETQS() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQWA():
        """
        Plafonnement 7QW avec case 7QA coche
        """
        return (min(arr((NINVRETQW() and TX35 and NINVRETQW() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA()))) and min(arr((NINVRETQW() and TX35 and NINVRETQW() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQXA():
        """
        Plafonnement HQX avec case HQA coche
        """
        return (min(arr((NINVRETQX() and TX35 and NINVRETQX() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA()))) and min(arr((NINVRETQX() and TX35 and NINVRETQX() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRAA():
        """
        Plafonnement HRA avec case HQA coche
        """
        return (min(arr((NINVRETRA() and TX35 and NINVRETRA() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA()))) and min(arr((NINVRETRA() and TX35 and NINVRETRA() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRBA():
        """
        Plafonnement HRB avec case HQA coche
        """
        return (min(arr((NINVRETRB() and TX35 and NINVRETRB() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA()))) and min(arr((NINVRETRB() and TX35 and NINVRETRB() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRCA():
        """
        Plafonnement HRC avec case HQA coche
        """
        return (min(arr((NINVRETRC() and TX35 and NINVRETRC() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA()))) and min(arr((NINVRETRC() and TX35 and NINVRETRC() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRDA():
        """
        Plafonnement HRD avec case HQA coche
        """
        return (min(arr((NINVRETRD() and TX35 and NINVRETRD() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA()))) and min(arr((NINVRETRD() and TX35 and NINVRETRD() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETXAA():
        """
        Plafonnement HXA avec case HQA coche
        """
        return (min(arr((NINVRETXA() and TX35 and NINVRETXA() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA()))) and min(arr((NINVRETXA() and TX35 and NINVRETXA() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETXBA():
        """
        Plafonnement HXB avec case HQA coche
        """
        return (min(arr((NINVRETXB() and TX35 and NINVRETXB() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA()))) and min(arr((NINVRETXB() and TX35 and NINVRETXB() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETXCA():
        """
        Plafonnement HCA avec case HQA coche
        """
        return (min(arr((NINVRETXC() and TX35 and NINVRETXC() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA()))) and min(arr((NINVRETXC() and TX35 and NINVRETXC() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETXEA():
        """
        Plafonnement HXE avec case HQA coche
        """
        return (min(arr((NINVRETXE() and TX35 and NINVRETXE() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA()))) and min(arr((NINVRETXE() and TX35 and NINVRETXE() * TX35 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETMAA():
        """
        Plafonnement 7MA avec case 7QA coche
        """
        return (min(arr((NINVRETMA() and TX40 and NINVRETMA() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA()))) and min(arr((NINVRETMA() and TX40 and NINVRETMA() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETLGA():
        """
        Plafonnement 7LG avec case 7QA coche
        """
        return (min(arr((NINVRETLG() and TX50 and NINVRETLG() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA()))) and min(arr((NINVRETLG() and TX50 and NINVRETLG() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETKSA():
        """
        Plafonnement HKS avec case HQA coche
        """
        return (min(NINVRETKS(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA()))) and min(NINVRETKS(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETMBA():
        """
        Plafonnement 7MB avec case 7QA coche
        """
        return (min(arr((NINVRETMB() and TX40 and NINVRETMB() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA()))) and min(arr((NINVRETMB() and TX40 and NINVRETMB() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETMCA():
        """
        Plafonnement 7MC avec case 7QA coche
        """
        return (min(arr((NINVRETMC() and TX40 and NINVRETMC() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA()))) and min(arr((NINVRETMC() and TX40 and NINVRETMC() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETLHA():
        """
        Plafonnement 7LH avec case 7QA coche
        """
        return (min(arr((NINVRETLH() and TX50 and NINVRETLH() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETMCA()))) and min(arr((NINVRETLH() and TX50 and NINVRETLH() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETMCA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETLIA():
        """
        Plafonnement 7LI avec case 7QA coche
        """
        return (min(arr((NINVRETLI() and TX50 and NINVRETLI() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA()))) and min(arr((NINVRETLI() and TX50 and NINVRETLI() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETKTA():
        """
        Plafonnement 7KT avec case 7QA coche
        """
        return (min(NINVRETKT(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA()))) and min(NINVRETKT(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETKUA():
        """
        Plafonnement 7KU avec case 7QA coche
        """
        return (min(NINVRETKU(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA()))) and min(NINVRETKU(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQPA():
        """
        Plafonnement 7QP avec case 7QA coche
        """
        return (min(arr((NINVRETQP() and TX40 and NINVRETQP() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA()))) and min(arr((NINVRETQP() and TX40 and NINVRETQP() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQGA():
        """
        Plafonnement 7QG avec case 7QA coche
        """
        return (min(arr((NINVRETQG() and TX40 and NINVRETQG() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA()))) and min(arr((NINVRETQG() and TX40 and NINVRETQG() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQOA():
        """
        Plafonnement 7QO avec case 7QA coche
        """
        return (min(arr((NINVRETQO() and TX50 and NINVRETQO() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA()))) and min(arr((NINVRETQO() and TX50 and NINVRETQO() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQFA():
        """
        Plafonnement 7QF avec case 7QA coche
        """
        return (min(arr((NINVRETQF() and TX50 and NINVRETQF() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA()))) and min(arr((NINVRETQF() and TX50 and NINVRETQF() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQRA():
        """
        Plafonnement 7QR avec case 7QA coche
        """
        return (min(NINVRETQR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA()))) and min(NINVRETQR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQIA():
        """
        Plafonnement 7QI avec case 7QA coche
        """
        return (min(NINVRETQI(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA()))) and min(NINVRETQI(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPOA():
        """
        Plafonnement 7PO avec case 7QA coche
        """
        return (min(arr((NINVRETPO() and TX40 and NINVRETPO() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA()))) and min(arr((NINVRETPO() and TX40 and NINVRETPO() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPTA():
        """
        Plafonnement 7PT avec case 7QA coche
        """
        return (min(arr((NINVRETPT() and TX40 and NINVRETPT() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA()))) and min(arr((NINVRETPT() and TX40 and NINVRETPT() * TX40 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPNA():
        """
        Plafonnement 7PN avec case 7QA coche
        """
        return (min(arr((NINVRETPN() and TX50 and NINVRETPN() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA()))) and min(arr((NINVRETPN() and TX50 and NINVRETPN() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPSA():
        """
        Plafonnement 7PS avec case 7QA coche
        """
        return (min(arr((NINVRETPS() and TX50 and NINVRETPS() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA()))) and min(arr((NINVRETPS() and TX50 and NINVRETPS() * TX50 / 100)), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPPA():
        """
        Plafonnement 7PP avec case 7QA coche
        """
        return (min(NINVRETPP(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA()))) and min(NINVRETPP(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPUA():
        """
        Plafonnement 7PU avec case 7QA coche
        """
        return (min(NINVRETPU(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA()))) and min(NINVRETPU(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPRA():
        """
        Plafonnement 7PR avec case 7QA coche
        """
        return (min(NINVRETPR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA()))) and min(NINVRETPR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPWA():
        """
        Plafonnement 7PW avec case 7QA coche
        """
        return (min(NINVRETPW(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA()))) and min(NINVRETPW(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQLA():
        """
        Plafonnement 7QL avec case 7QA coche
        """
        return (min(NINVRETQL(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA()))) and min(NINVRETQL(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQMA():
        """
        Plafonnement 7QM avec case 7QA coche
        """
        return (min(NINVRETQM(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA()))) and min(NINVRETQM(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQDA():
        """
        Plafonnement 7QD avec case 7QA coche
        """
        return (min(NINVRETQD(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA()))) and min(NINVRETQD(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOBA():
        """
        Plafonnement 7OB avec case 7QA coche
        """
        return (min(NINVRETOB(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA()))) and min(NINVRETOB(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOCA():
        """
        Plafonnement 7OC avec case 7QA coche
        """
        return (min(NINVRETOC(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA()))) and min(NINVRETOC(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOMA():
        """
        Plafonnement 7OM avec case 7QA coche
        """
        return (min(NINVRETOM(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA()))) and min(NINVRETOM(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETONA():
        """
        Plafonnement HON avec case HQA coche
        """
        return (min(NINVRETON(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA()))) and min(NINVRETON(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETODA():
        """
        Plafonnement HOD avec case HQA coche
        """
        return (min(NINVRETOD(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA()))) and min(NINVRETOD(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUAA():
        """
        Plafonnement HUA avec case HQA coche
        """
        return (min(NINVRETUA(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETODA()))) and min(NINVRETUA(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETODA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETKGR():
        """
        Plafonnement HKG retrocede theorique
        """
        return ((NINVRETKG() - arr((NINVRETKG() and TX35 and NINVRETKG() * TX35 / 100))) and (NINVRETKG() - arr((NINVRETKG() and TX35 and NINVRETKG() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETKGRA():
        """
        Plafonnement HKG retrocede avec case HQA coche
        """
        return (min(NINVRETKGR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA()))) and min(NINVRETKGR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETKHR():
        """
        Plafonnement 7KH retrocede theorique
        """
        return ((NINVRETKH() - arr((NINVRETKH() and TX35 and NINVRETKH() * TX35 / 100))) and (NINVRETKH() - arr((NINVRETKH() and TX35 and NINVRETKH() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETKHRA():
        """
        Plafonnement HKH retrocede avec case HQA coche
        """
        return (min(NINVRETKHR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA()))) and min(NINVRETKHR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETKIR():
        """
        Plafonnement 7KI retrocede theorique
        """
        return ((NINVRETKI() - arr((NINVRETKI() and TX35 and NINVRETKI() * TX35 / 100))) and (NINVRETKI() - arr((NINVRETKI() and TX35 and NINVRETKI() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETKIRA():
        """
        Plafonnement HKI retrocede avec case HQA coche
        """
        return (min(NINVRETKIR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA()))) and min(NINVRETKIR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQNR():
        """
        Plafonnement 7QN retrocede theorique
        """
        return ((NINVRETQN() - arr((NINVRETQN() and TX35 and NINVRETQN() * TX35 / 100))) and (NINVRETQN() - arr((NINVRETQN() and TX35 and NINVRETQN() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETQNRA():
        """
        Plafonnement 7QN retrocede avec case 7QA coche
        """
        return (min(NINVRETQNR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA()))) and min(NINVRETQNR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQUR():
        """
        Plafonnement 7QU retrocede theorique
        """
        return ((NINVRETQU() - arr((NINVRETQU() and TX35 and NINVRETQU() * TX35 / 100))) and (NINVRETQU() - arr((NINVRETQU() and TX35 and NINVRETQU() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETQURA():
        """
        Plafonnement 7QU retrocede avec case 7QA coche
        """
        return (min(NINVRETQUR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA()))) and min(NINVRETQUR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQKR():
        """
        Plafonnement 7QK retrocede theorique
        """
        return ((NINVRETQK() - arr((NINVRETQK() and TX35 and NINVRETQK() * TX35 / 100))) and (NINVRETQK() - arr((NINVRETQK() and TX35 and NINVRETQK() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETQKRA():
        """
        Plafonnement 7QK retrocede avec case 7QA coche
        """
        return (min(NINVRETQKR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA()))) and min(NINVRETQKR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQJR():
        """
        Plafonnement 7QJ retrocede theorique
        """
        return ((NINVRETQJ() - arr((NINVRETQJ() and TX35 and NINVRETQJ() * TX35 / 100))) and (NINVRETQJ() - arr((NINVRETQJ() and TX35 and NINVRETQJ() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETQJRA():
        """
        Plafonnement 7QJ retrocede avec case 7QA coche
        """
        return (min(NINVRETQJR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA()))) and min(NINVRETQJR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQSR():
        """
        Plafonnement 7QS retrocede theorique
        """
        return ((NINVRETQS() - arr((NINVRETQS() and TX35 and NINVRETQS() * TX35 / 100))) and (NINVRETQS() - arr((NINVRETQS() and TX35 and NINVRETQS() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETQSRA():
        """
        Plafonnement 7QS retrocede avec case 7QA coche
        """
        return (min(NINVRETQSR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA()))) and min(NINVRETQSR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQWR():
        """
        Plafonnement 7QW retrocede theorique
        """
        return ((NINVRETQW() - arr((NINVRETQW() and TX35 and NINVRETQW() * TX35 / 100))) and (NINVRETQW() - arr((NINVRETQW() and TX35 and NINVRETQW() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETQWRA():
        """
        Plafonnement 7QW retrocede avec case 7QA coche
        """
        return (min(NINVRETQWR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA()))) and min(NINVRETQWR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQXR():
        """
        Plafonnement 7QX retrocede theorique
        """
        return ((NINVRETQX() - arr((NINVRETQX() and TX35 and NINVRETQX() * TX35 / 100))) and (NINVRETQX() - arr((NINVRETQX() and TX35 and NINVRETQX() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETQXRA():
        """
        Plafonnement 7QX retrocede avec case 7QA coche
        """
        return (min(NINVRETQXR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA()))) and min(NINVRETQXR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRAR():
        """
        Plafonnement HRA retrocede theorique
        """
        return ((NINVRETRA() - arr((NINVRETRA() and TX35 and NINVRETRA() * TX35 / 100))) and (NINVRETRA() - arr((NINVRETRA() and TX35 and NINVRETRA() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETRARA():
        """
        Plafonnement HRA retrocede avec case HQA coche
        """
        return (min(NINVRETRAR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA()))) and min(NINVRETRAR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRBR():
        """
        Plafonnement HRB retrocede theorique
        """
        return ((NINVRETRB() - arr((NINVRETRB() and TX35 and NINVRETRB() * TX35 / 100))) and (NINVRETRB() - arr((NINVRETRB() and TX35 and NINVRETRB() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETRBRA():
        """
        Plafonnement HRB retrocede avec case HQA coche
        """
        return (min(NINVRETRBR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA()))) and min(NINVRETRBR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRCR():
        """
        Plafonnement HRC retrocede theorique
        """
        return ((NINVRETRC() - arr((NINVRETRC() and TX35 and NINVRETRC() * TX35 / 100))) and (NINVRETRC() - arr((NINVRETRC() and TX35 and NINVRETRC() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETRCRA():
        """
        Plafonnement HRC retrocede avec case HQA coche
        """
        return (min(NINVRETRCR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA()))) and min(NINVRETRCR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRDR():
        """
        Plafonnement HRD retrocede theorique
        """
        return ((NINVRETRD() - arr((NINVRETRD() and TX35 and NINVRETRD() * TX35 / 100))) and (NINVRETRD() - arr((NINVRETRD() and TX35 and NINVRETRD() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETRDRA():
        """
        Plafonnement HRD retrocede avec case HQA coche
        """
        return (min(NINVRETRDR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA()))) and min(NINVRETRDR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETXAR():
        """
        Plafonnement HXA retrocede theorique
        """
        return ((NINVRETXA() - arr((NINVRETXA() and TX35 and NINVRETXA() * TX35 / 100))) and (NINVRETXA() - arr((NINVRETXA() and TX35 and NINVRETXA() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETXARA():
        """
        Plafonnement HXA retrocede avec case HQA coche
        """
        return (min(NINVRETXAR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA()))) and min(NINVRETXAR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETXBR():
        """
        Plafonnement HXB retrocede theorique
        """
        return ((NINVRETXB() - arr((NINVRETXB() and TX35 and NINVRETXB() * TX35 / 100))) and (NINVRETXB() - arr((NINVRETXB() and TX35 and NINVRETXB() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETXBRA():
        """
        Plafonnement HXB retrocede avec case HQA coche
        """
        return (min(NINVRETXBR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA()))) and min(NINVRETXBR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETXCR():
        """
        Plafonnement HXC retrocede theorique
        """
        return ((NINVRETXC() - arr((NINVRETXC() and TX35 and NINVRETXC() * TX35 / 100))) and (NINVRETXC() - arr((NINVRETXC() and TX35 and NINVRETXC() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETXCRA():
        """
        Plafonnement HXC retrocede avec case HQA coche
        """
        return (min(NINVRETXCR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA()))) and min(NINVRETXCR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETXER():
        """
        Plafonnement HXE retrocede theorique
        """
        return ((NINVRETXE() - arr((NINVRETXE() and TX35 and NINVRETXE() * TX35 / 100))) and (NINVRETXE() - arr((NINVRETXE() and TX35 and NINVRETXE() * TX35 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETXERA():
        """
        Plafonnement HXE retrocede avec case HQA coche
        """
        return (min(NINVRETXER(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA()))) and min(NINVRETXER(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETMAR():
        """
        Plafonnement 7MA retrocede theorique
        """
        return ((NINVRETMA() - arr((NINVRETMA() and TX40 and NINVRETMA() * TX40 / 100))) and (NINVRETMA() - arr((NINVRETMA() and TX40 and NINVRETMA() * TX40 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETMARA():
        """
        Plafonnement 7MA retrocede avec case 7QA coche
        """
        return (min(NINVRETMAR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA()))) and min(NINVRETMAR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETLGR():
        """
        Plafonnement 7LG retrocede theorique
        """
        return ((NINVRETLG() - arr((NINVRETLG() and TX50 and NINVRETLG() * TX50 / 100))) and (NINVRETLG() - arr((NINVRETLG() and TX50 and NINVRETLG() * TX50 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETLGRA():
        """
        Plafonnement 7LG retrocede avec case 7QA coche
        """
        return (min(NINVRETLGR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA()))) and min(NINVRETLGR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETMBR():
        """
        Plafonnement 7MB theorique retrocede
        """
        return ((NINVRETMB() - arr((NINVRETMB() and TX40 and NINVRETMB() * TX40 / 100))) and (NINVRETMB() - arr((NINVRETMB() and TX40 and NINVRETMB() * TX40 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETMBRA():
        """
        Plafonnement 7MB retrocede avec case 7QA coche
        """
        return (min(NINVRETMBR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA()))) and min(NINVRETMBR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETLHR():
        """
        Plafonnement 7LH retrocede theorique
        """
        return ((NINVRETLH() - arr((NINVRETLH() and TX50 and NINVRETLH() * TX50 / 100))) and (NINVRETLH() - arr((NINVRETLH() and TX50 and NINVRETLH() * TX50 / 100))) * (1 - V_CNR()))

    @cache_result
    def NINVRETMCR():
        """
        Plafonnement 7MC retrocede theorique
        """
        return ((NINVRETMC() - arr((NINVRETMC() and TX40 and NINVRETMC() * TX40 / 100))) and (NINVRETMC() - arr((NINVRETMC() and TX40 and NINVRETMC() * TX40 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETMCRA():
        """
        Plafonnement 7MC retrocede avec case 7QA coche
        """
        return (min(NINVRETMCR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA()))) and min(NINVRETMCR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETLHRA():
        """
        Plafonnement 7LH retrocede avec case 7QA coche
        """
        return (min(NINVRETLHR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETMCRA()))) and min(NINVRETLHR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETMCRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETLIR():
        """
        Plafonnement 7LI retrocede theorique
        """
        return ((NINVRETLI() - arr((NINVRETLI() and TX50 and NINVRETLI() * TX50 / 100))) and (NINVRETLI() - arr((NINVRETLI() and TX50 and NINVRETLI() * TX50 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETLIRA():
        """
        Plafonnement 7LI retrocede avec case 7QA coche
        """
        return (min(NINVRETLIR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETMCRA() - INVRETLHRA()))) and min(NINVRETLIR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETMCRA() - INVRETLHRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQPR():
        """
        Plafonnement 7QP retrocede theorique
        """
        return ((NINVRETQP() - arr((NINVRETQP() and TX40 and NINVRETQP() * TX40 / 100))) and (NINVRETQP() - arr((NINVRETQP() and TX40 and NINVRETQP() * TX40 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETQPRA():
        """
        Plafonnement 7QP retrocede avec case 7QA coche
        """
        return (min(NINVRETQPR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA()))) and min(NINVRETQPR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQGR():
        """
        Plafonnement 7QG retrocede theorique
        """
        return ((NINVRETQG() - arr((NINVRETQG() and TX40 and NINVRETQG() * TX40 / 100))) and (NINVRETQG() - arr((NINVRETQG() and TX40 and NINVRETQG() * TX40 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETQGRA():
        """
        Plafonnement 7QG retrocede avec case 7QA coche
        """
        return (min(NINVRETQGR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA()))) and min(NINVRETQGR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQOR():
        """
        Plafonnement 7QO retrocede theorique
        """
        return ((NINVRETQO() - arr((NINVRETQO() and TX50 and NINVRETQO() * TX50 / 100))) and (NINVRETQO() - arr((NINVRETQO() and TX50 and NINVRETQO() * TX50 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETQORA():
        """
        Plafonnement 7QO retrocede avec case 7QA coche
        """
        return (min(NINVRETQOR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA()))) and min(NINVRETQOR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETQFR():
        """
        Plafonnement 7QF retrocede theorique
        """
        return ((NINVRETQF() - arr((NINVRETQF() and TX50 and NINVRETQF() * TX50 / 100))) and (NINVRETQF() - arr((NINVRETQF() and TX50 and NINVRETQF() * TX50 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETQFRA():
        """
        Plafonnement 7QF retrocede avec case 7QA coche
        """
        return (min(NINVRETQFR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA() - INVRETQORA()))) and min(NINVRETQFR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA() - INVRETQORA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPOR():
        """
        Plafonnement 7PO retrocede theorique
        """
        return ((NINVRETPO() - arr((NINVRETPO() and TX40 and NINVRETPO() * TX40 / 100))) and (NINVRETPO() - arr((NINVRETPO() and TX40 and NINVRETPO() * TX40 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPORA():
        """
        Plafonnement 7PO retrocede avec case 7QA coche
        """
        return (min(NINVRETPOR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA() - INVRETQORA() - INVRETQFRA()))) and min(NINVRETPOR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA() - INVRETQORA() - INVRETQFRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPTR():
        """
        Plafonnement 7PT retrocede theorique
        """
        return ((NINVRETPT() - arr((NINVRETPT() and TX40 and NINVRETPT() * TX40 / 100))) and (NINVRETPT() - arr((NINVRETPT() and TX40 and NINVRETPT() * TX40 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPTRA():
        """
        Plafonnement 7PT retrocede avec case 7QA coche
        """
        return (min(NINVRETPTR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA() - INVRETQORA() - INVRETQFRA() - INVRETPORA()))) and min(NINVRETPTR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA() - INVRETQORA() - INVRETQFRA() - INVRETPORA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPNR():
        """
        Plafonnement 7PN retrocede theorique
        """
        return ((NINVRETPN() - arr((NINVRETPN() and TX50 and NINVRETPN() * TX50 / 100))) and (NINVRETPN() - arr((NINVRETPN() and TX50 and NINVRETPN() * TX50 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPNRA():
        """
        Plafonnement 7PN retrocede avec case 7QA coche
        """
        return (min(NINVRETPNR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA() - INVRETQORA() - INVRETQFRA() - INVRETPORA() - INVRETPTRA()))) and min(NINVRETPNR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA() - INVRETQORA() - INVRETQFRA() - INVRETPORA() - INVRETPTRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPSR():
        """
        Plafonnement 7PS retrocede theorique
        """
        return ((NINVRETPS() - arr((NINVRETPS() and TX50 and NINVRETPS() * TX50 / 100))) and (NINVRETPS() - arr((NINVRETPS() and TX50 and NINVRETPS() * TX50 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPSRA():
        """
        Plafonnement 7PS retrocede avec case 7QA coche
        """
        return (min(NINVRETPSR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA() - INVRETQORA() - INVRETQFRA() - INVRETPORA() - INVRETPTRA() - INVRETPNRA()))) and min(NINVRETPSR(), max(0, (RNIDOM1() - INVRETKGA() - INVRETKHA() - INVRETKIA() - INVRETQNA() - INVRETQUA() - INVRETQKA() - INVRETQJA() - INVRETQSA() - INVRETQWA() - INVRETQXA() - INVRETRAA() - INVRETRBA() - INVRETRCA() - INVRETRDA() - INVRETXAA() - INVRETXBA() - INVRETXCA() - INVRETXEA() - INVRETMAA() - INVRETLGA() - INVRETKSA() - INVRETMBA() - INVRETLHA() - INVRETMCA() - INVRETLIA() - INVRETKTA() - INVRETKUA() - INVRETQPA() - INVRETQGA() - INVRETQOA() - INVRETQFA() - INVRETQRA() - INVRETQIA() - INVRETPOA() - INVRETPTA() - INVRETPNA() - INVRETPSA() - INVRETPPA() - INVRETPUA() - INVRETPRA() - INVRETPWA() - INVRETQLA() - INVRETQMA() - INVRETQDA() - INVRETOBA() - INVRETOCA() - INVRETOMA() - INVRETONA() - INVRETUAA() - INVRETODA() - INVRETKGRA() - INVRETKHRA() - INVRETKIRA() - INVRETQNRA() - INVRETQURA() - INVRETQKRA() - INVRETQJRA() - INVRETQSRA() - INVRETQWRA() - INVRETQXRA() - INVRETRARA() - INVRETRBRA() - INVRETRCRA() - INVRETRDRA() - INVRETXARA() - INVRETXBRA() - INVRETXCRA() - INVRETXERA() - INVRETMARA() - INVRETLGRA() - INVRETMBRA() - INVRETLHRA() - INVRETLIRA() - INVRETMCRA() - INVRETQPRA() - INVRETQGRA() - INVRETQORA() - INVRETQFRA() - INVRETPORA() - INVRETPTRA() - INVRETPNRA()))) * (1 - V_CNR()))

    @cache_result
    def TOTALPLAFA():
        """
        Montant total investissements outre mer plafond
        """
        return (INVRETKGA() + INVRETKHA() + INVRETKIA() + INVRETQNA() + INVRETQUA() + INVRETQKA() + INVRETQJA() + INVRETQSA() + INVRETQWA() + INVRETQXA() + INVRETRAA() + INVRETRBA() + INVRETRCA() + INVRETRDA() + INVRETXAA() + INVRETXBA() + INVRETXCA() + INVRETXEA() + INVRETMAA() + INVRETLGA() + INVRETKSA() + INVRETMBA() + INVRETLHA() + INVRETMCA() + INVRETLIA() + INVRETKTA() + INVRETKUA() + INVRETQPA() + INVRETQGA() + INVRETQOA() + INVRETQFA() + INVRETQRA() + INVRETQIA() + INVRETPOA() + INVRETPTA() + INVRETPNA() + INVRETPSA() + INVRETPPA() + INVRETPUA() + INVRETPRA() + INVRETPWA() + INVRETQLA() + INVRETQMA() + INVRETQDA() + INVRETOBA() + INVRETOCA() + INVRETOMA() + INVRETONA() + INVRETODA() + INVRETUAA() + INVRETKGRA() + INVRETKHRA() + INVRETKIRA() + INVRETQNRA() + INVRETQURA() + INVRETQKRA() + INVRETQJRA() + INVRETQSRA() + INVRETQWRA() + INVRETQXRA() + INVRETRARA() + INVRETRBRA() + INVRETRCRA() + INVRETRDRA() + INVRETXARA() + INVRETXBRA() + INVRETXCRA() + INVRETXERA() + INVRETMARA() + INVRETLGRA() + INVRETMBRA() + INVRETLHRA() + INVRETLIRA() + INVRETMCRA() + INVRETQPRA() + INVRETQGRA() + INVRETQORA() + INVRETQFRA() + INVRETPORA() + INVRETPTRA() + INVRETPNRA() + INVRETPSRA())

    @cache_result
    def RNIDOM2():
        """
        Montant RNI investissements outre mer (taux 13 %)
        """
        return arr(((RNG() + TTPVQ()) and TX13 and (RNG() + TTPVQ()) * TX13 / 100))

    @cache_result
    def MAXDOM2():
        """
        Variable somme inv. dom
        """
        return max(0, (RNIDOM2() - TOTALPLAFA()))

    @cache_result
    def INVRETPBA():
        """
        Plafonnement 7PB avec case 7QA coche
        """
        return (min(arr((NINVRETPB() and TX375 and NINVRETPB() * TX375 / 100)), MAXDOM2()) and min(arr((NINVRETPB() and TX375 and NINVRETPB() * TX375 / 100)), MAXDOM2()) * (1 - V_CNR()))

    @cache_result
    def INVRETPFA():
        """
        Plafonnement 7PF avec case 7QA coche
        """
        return (min(arr((NINVRETPF() and TX375 and NINVRETPF() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA()))) and min(arr((NINVRETPF() and TX375 and NINVRETPF() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPJA():
        """
        Plafonnement 7PJ avec case 7QA coche
        """
        return (min(arr((NINVRETPJ() and TX375 and NINVRETPJ() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA()))) and min(arr((NINVRETPJ() and TX375 and NINVRETPJ() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPAA():
        """
        Plafonnement 7PA avec case 7QA coche
        """
        return (min(arr((NINVRETPA() and TX4737 and NINVRETPA() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA()))) and min(arr((NINVRETPA() and TX4737 and NINVRETPA() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPEA():
        """
        Plafonnement 7PE avec case 7QA coche
        """
        return (min(arr((NINVRETPE() and TX4737 and NINVRETPE() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA()))) and min(arr((NINVRETPE() and TX4737 and NINVRETPE() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPIA():
        """
        Plafonnement 7PI avec case 7QA coche
        """
        return (min(arr((NINVRETPI() and TX4737 and NINVRETPI() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA()))) and min(arr((NINVRETPI() and TX4737 and NINVRETPI() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPDA():
        """
        Plafonnement 7PD avec case 7QA coche
        """
        return (min(NINVRETPD(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA()))) and min(NINVRETPD(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPHA():
        """
        Plafonnement 7PH avec case 7QA coche
        """
        return (min(NINVRETPH(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA()))) and min(NINVRETPH(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPLA():
        """
        Plafonnement 7PL avec case 7QA coche
        """
        return (min(NINVRETPL(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA()))) and min(NINVRETPL(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPYA():
        """
        Plafonnement 7PY avec case 7QA coche
        """
        return (min(arr((NINVRETPY() and TX375 and NINVRETPY() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA()))) and min(arr((NINVRETPY() and TX375 and NINVRETPY() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPXA():
        """
        Plafonnement 7PX avec case 7QA coche
        """
        return (min(arr((NINVRETPX() and TX4737 and NINVRETPX() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA()))) and min(arr((NINVRETPX() and TX4737 and NINVRETPX() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRGA():
        """
        Plafonnement 7RG avec case 7QA coche
        """
        return (min(NINVRETRG(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA()))) and min(NINVRETRG(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRIA():
        """
        Plafonnement HRI avec case HQA coche
        """
        return (min(NINVRETRI(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA()))) and min(NINVRETRI(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSBA():
        """
        Plafonnement HSB avec case HQA coche
        """
        return (min(arr((NINVRETSB() and TX375 and NINVRETSB() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA()))) and min(arr((NINVRETSB() and TX375 and NINVRETSB() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSGA():
        """
        Plafonnement HSG avec case HQA coche
        """
        return (min(arr((NINVRETSG() and TX375 and NINVRETSG() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA()))) and min(arr((NINVRETSG() and TX375 and NINVRETSG() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSAA():
        """
        Plafonnement HSA avec case HQA coche
        """
        return (min(arr((NINVRETSA() and TX4737 and NINVRETSA() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA()))) and min(arr((NINVRETSA() and TX4737 and NINVRETSA() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSFA():
        """
        Plafonnement HSF avec case HQA coche
        """
        return (min(arr((NINVRETSF() and TX4737 and NINVRETSF() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA()))) and min(arr((NINVRETSF() and TX4737 and NINVRETSF() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSCA():
        """
        Plafonnement HSC avec case HQA coche
        """
        return (min(NINVRETSC(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA()))) and min(NINVRETSC(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSHA():
        """
        Plafonnement HSH avec case HQA coche
        """
        return (min(NINVRETSH(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA()))) and min(NINVRETSH(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSEA():
        """
        Plafonnement HSE avec case HQA coche
        """
        return (min(NINVRETSE(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA()))) and min(NINVRETSE(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSJA():
        """
        Plafonnement HSJ avec case HQA coche
        """
        return (min(NINVRETSJ(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA()))) and min(NINVRETSJ(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETABA():
        """
        Plafonnement HAB avec case HQA coche
        """
        return (min(arr((NINVRETAB() and TX375 and NINVRETAB() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA()))) and min(arr((NINVRETAB() and TX375 and NINVRETAB() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETAGA():
        """
        Plafonnement HAG avec case HQA coche
        """
        return (min(arr((NINVRETAG() and TX375 and NINVRETAG() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA()))) and min(arr((NINVRETAG() and TX375 and NINVRETAG() * TX375 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETAAA():
        """
        Plafonnement HAA avec case HQA coche
        """
        return (min(arr((NINVRETAA() and TX4737 and NINVRETAA() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA()))) and min(arr((NINVRETAA() and TX4737 and NINVRETAA() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETAFA():
        """
        Plafonnement HAF avec case HQA coche
        """
        return (min(arr((NINVRETAF() and TX4737 and NINVRETAF() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA()))) and min(arr((NINVRETAF() and TX4737 and NINVRETAF() * TX4737 / 100)), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETACA():
        """
        Plafonnement HAC avec case HQA coche
        """
        return (min(NINVRETAC(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA()))) and min(NINVRETAC(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETAHA():
        """
        Plafonnement HAH avec case HQA coche
        """
        return (min(NINVRETAH(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA()))) and min(NINVRETAH(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAE():
        """
        Plafonnement HAE theorique
        """
        return (max(min(saisie_variables.get('CODHAE', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE())), 0) and max(min(saisie_variables.get('CODHAE', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAEA():
        """
        Plafonnement HAE avec case HQA coche
        """
        return (min(NINVRETAE(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA()))) and min(NINVRETAE(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAJ():
        """
        Plafonnement HAJ theorique
        """
        return (max(min(saisie_variables.get('CODHAJ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE() - NINVRETAE())), 0) and max(min(saisie_variables.get('CODHAJ', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE() - NINVRETAE())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAJA():
        """
        Plafonnement HAJ avec case HQA coche
        """
        return (min(NINVRETAJ(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA()))) and min(NINVRETAJ(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOIA():
        """
        Plafonnement 7OI avec case 7QA coche
        """
        return (min(NINVRETOI(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA()))) and min(NINVRETOI(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOJA():
        """
        Plafonnement 7OJ avec case 7QA coche
        """
        return (min(NINVRETOJ(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA()))) and min(NINVRETOJ(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOKA():
        """
        Plafonnement 7OK avec case 7QA coche
        """
        return (min(NINVRETOK(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA()))) and min(NINVRETOK(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOPA():
        """
        Plafonnement 7OP avec case 7QA coche
        """
        return (min(NINVRETOP(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA()))) and min(NINVRETOP(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOQA():
        """
        Plafonnement 7OQ avec case 7QA coche
        """
        return (min(NINVRETOQ(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA()))) and min(NINVRETOQ(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETORA():
        """
        Plafonnement 7OR avec case 7QA coche
        """
        return (min(NINVRETOR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA()))) and min(NINVRETOR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOEA():
        """
        Plafonnement HOE avec case HQA coche
        """
        return (min(NINVRETOE(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA()))) and min(NINVRETOE(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOFA():
        """
        Plafonnement HOF avec case HQA coche
        """
        return (min(NINVRETOF(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA()))) and min(NINVRETOF(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUBA():
        """
        Plafonnement HUB avec case HQA coche
        """
        return (min(NINVRETUB(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA()))) and min(NINVRETUB(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUCA():
        """
        Plafonnement HUC avec case HQA coche
        """
        return (min(NINVRETUC(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA()))) and min(NINVRETUC(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPBR():
        """
        Plafonnement 7PB retrocede theorique
        """
        return ((NINVRETPB() - arr((NINVRETPB() and TX375 and NINVRETPB() * TX375 / 100))) and (NINVRETPB() - arr((NINVRETPB() and TX375 and NINVRETPB() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPBRA():
        """
        Plafonnement 7PB retrocede avec case 7QA coche
        """
        return (min(NINVRETPBR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA()))) and min(NINVRETPBR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPFR():
        """
        Plafonnement 7PF retrocede theorique
        """
        return ((NINVRETPF() - arr((NINVRETPF() and TX375 and NINVRETPF() * TX375 / 100))) and (NINVRETPF() - arr((NINVRETPF() and TX375 and NINVRETPF() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPFRA():
        """
        Plafonnement 7PF retrocede avec case 7QA coche
        """
        return (min(NINVRETPFR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA()))) and min(NINVRETPFR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPJR():
        """
        Plafonnement 7PJ retrocede theorique
        """
        return ((NINVRETPJ() - arr((NINVRETPJ() and TX375 and NINVRETPJ() * TX375 / 100))) and (NINVRETPJ() - arr((NINVRETPJ() and TX375 and NINVRETPJ() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPJRA():
        """
        Plafonnement 7PJ retrocede avec case 7QA coche
        """
        return (min(NINVRETPJR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA()))) and min(NINVRETPJR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPAR():
        """
        Plafonnement 7PA retrocede theorique
        """
        return ((NINVRETPA() - arr((NINVRETPA() and TX4737 and NINVRETPA() * TX4737 / 100))) and (NINVRETPA() - arr((NINVRETPA() and TX4737 and NINVRETPA() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPARA():
        """
        Plafonnement 7PA retrocede avec case 7QA coche
        """
        return (min(NINVRETPAR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA()))) and min(NINVRETPAR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPER():
        """
        Plafonnement 7PE retrocede theorique
        """
        return ((NINVRETPE() - arr((NINVRETPE() and TX4737 and NINVRETPE() * TX4737 / 100))) and (NINVRETPE() - arr((NINVRETPE() and TX4737 and NINVRETPE() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPERA():
        """
        Plafonnement 7PE retrocede avec case 7QA coche
        """
        return (min(NINVRETPER(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA()))) and min(NINVRETPER(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPIR():
        """
        Plafonnement 7PI retrocede theorique
        """
        return ((NINVRETPI() - arr((NINVRETPI() and TX4737 and NINVRETPI() * TX4737 / 100))) and (NINVRETPI() - arr((NINVRETPI() and TX4737 and NINVRETPI() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPIRA():
        """
        Plafonnement 7PI retrocede avec case 7QA coche
        """
        return (min(NINVRETPIR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA()))) and min(NINVRETPIR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPYR():
        """
        Plafonnement 7PY retrocede theorique
        """
        return ((NINVRETPY() - arr((NINVRETPY() and TX375 and NINVRETPY() * TX375 / 100))) and (NINVRETPY() - arr((NINVRETPY() and TX375 and NINVRETPY() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPYRA():
        """
        Plafonnement 7PY retrocede avec case 7QA coche
        """
        return (min(NINVRETPYR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA()))) and min(NINVRETPYR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETPXR():
        """
        Plafonnement HPX retrocede theorique
        """
        return ((NINVRETPX() - arr((NINVRETPX() and TX4737 and NINVRETPX() * TX4737 / 100))) and (NINVRETPX() - arr((NINVRETPX() and TX4737 and NINVRETPX() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETPXRA():
        """
        Plafonnement HPX retrocede avec case HQA coche
        """
        return (min(NINVRETPXR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA()))) and min(NINVRETPXR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSBR():
        """
        Plafonnement HSB retrocede theorique
        """
        return ((NINVRETSB() - arr((NINVRETSB() and TX375 and NINVRETSB() * TX375 / 100))) and (NINVRETSB() - arr((NINVRETSB() and TX375 and NINVRETSB() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETSBRA():
        """
        Plafonnement HSB retrocede avec case HQA coche
        """
        return (min(NINVRETSBR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA()))) and min(NINVRETSBR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSGR():
        """
        Plafonnement HSG retrocede theorique
        """
        return ((NINVRETSG() - arr((NINVRETSG() and TX375 and NINVRETSG() * TX375 / 100))) and (NINVRETSG() - arr((NINVRETSG() and TX375 and NINVRETSG() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETSGRA():
        """
        Plafonnement HSG retrocede avec case HQA coche
        """
        return (min(NINVRETSGR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA()))) and min(NINVRETSGR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSAR():
        """
        Plafonnement HSA retrocede theorique
        """
        return ((NINVRETSA() - arr((NINVRETSA() and TX4737 and NINVRETSA() * TX4737 / 100))) and (NINVRETSA() - arr((NINVRETSA() and TX4737 and NINVRETSA() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETSARA():
        """
        Plafonnement HSA retrocede avec case HQA coche
        """
        return (min(NINVRETSAR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA()))) and min(NINVRETSAR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSFR():
        """
        Plafonnement HSF retrocede theorique
        """
        return ((NINVRETSF() - arr((NINVRETSF() and TX4737 and NINVRETSF() * TX4737 / 100))) and (NINVRETSF() - arr((NINVRETSF() and TX4737 and NINVRETSF() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETSFRA():
        """
        Plafonnement HSF retrocede avec case HQA coche
        """
        return (min(NINVRETSFR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA() - INVRETSARA()))) and min(NINVRETSFR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA() - INVRETSARA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETABR():
        """
        Plafonnement HAB retrocede theorique
        """
        return ((NINVRETAB() - arr((NINVRETAB() and TX375 and NINVRETAB() * TX375 / 100))) and (NINVRETAB() - arr((NINVRETAB() and TX375 and NINVRETAB() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETABRA():
        """
        Plafonnement HAB retrocede avec case HQA coche
        """
        return (min(NINVRETABR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA() - INVRETSARA() - INVRETSFRA()))) and min(NINVRETABR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA() - INVRETSARA() - INVRETSFRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAGR():
        """
        Plafonnement HAG retrocede theorique
        """
        return ((NINVRETAG() - arr((NINVRETAG() and TX375 and NINVRETAG() * TX375 / 100))) and (NINVRETAG() - arr((NINVRETAG() and TX375 and NINVRETAG() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETAGRA():
        """
        Plafonnement HAG retrocede avec case HQA coche
        """
        return (min(NINVRETAGR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA() - INVRETSARA() - INVRETSFRA() - INVRETABRA()))) and min(NINVRETAGR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA() - INVRETSARA() - INVRETSFRA() - INVRETABRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAAR():
        """
        Plafonnement HAA retrocede theorique
        """
        return ((NINVRETAA() - arr((NINVRETAA() and TX4737 and NINVRETAA() * TX4737 / 100))) and (NINVRETAA() - arr((NINVRETAA() and TX4737 and NINVRETAA() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETAARA():
        """
        Plafonnement HAA retrocede avec case HQA coche
        """
        return (min(NINVRETAAR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA() - INVRETSARA() - INVRETSFRA() - INVRETABRA() - INVRETAGRA()))) and min(NINVRETAAR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA() - INVRETSARA() - INVRETSFRA() - INVRETABRA() - INVRETAGRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAFR():
        """
        Plafonnement HAF retrocede theorique
        """
        return ((NINVRETAF() - arr((NINVRETAF() and TX4737 and NINVRETAF() * TX4737 / 100))) and (NINVRETAF() - arr((NINVRETAF() and TX4737 and NINVRETAF() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETAFRA():
        """
        Plafonnement HAF retrocede avec case HQA coche
        """
        return (min(NINVRETAFR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA() - INVRETSARA() - INVRETSFRA() - INVRETABRA() - INVRETAGRA() - INVRETAARA()))) and min(NINVRETAFR(), max(0, (MAXDOM2() - INVRETPBA() - INVRETPFA() - INVRETPJA() - INVRETPAA() - INVRETPEA() - INVRETPIA() - INVRETPDA() - INVRETPHA() - INVRETPLA() - INVRETPYA() - INVRETPXA() - INVRETRGA() - INVRETRIA() - INVRETSBA() - INVRETSGA() - INVRETSAA() - INVRETSFA() - INVRETSCA() - INVRETSHA() - INVRETSEA() - INVRETSJA() - INVRETABA() - INVRETAGA() - INVRETAAA() - INVRETAFA() - INVRETACA() - INVRETAHA() - INVRETAEA() - INVRETAJA() - INVRETOIA() - INVRETOJA() - INVRETOKA() - INVRETOPA() - INVRETOQA() - INVRETORA() - INVRETOEA() - INVRETOFA() - INVRETUBA() - INVRETUCA() - INVRETPBRA() - INVRETPFRA() - INVRETPJRA() - INVRETPARA() - INVRETPERA() - INVRETPIRA() - INVRETPYRA() - INVRETPXRA() - INVRETSBRA() - INVRETSGRA() - INVRETSARA() - INVRETSFRA() - INVRETABRA() - INVRETAGRA() - INVRETAARA()))) * (1 - V_CNR()))

    @cache_result
    def TOTALPLAFB():
        """
        Montant total investissements outre mer plafond
        """
        return (INVRETPBA() + INVRETPFA() + INVRETPJA() + INVRETPAA() + INVRETPEA() + INVRETPIA() + INVRETPDA() + INVRETPHA() + INVRETPLA() + INVRETPYA() + INVRETPXA() + INVRETRGA() + INVRETRIA() + INVRETSBA() + INVRETSGA() + INVRETSAA() + INVRETSFA() + INVRETABA() + INVRETAGA() + INVRETAAA() + INVRETAFA() + INVRETACA() + INVRETAHA() + INVRETAEA() + INVRETAJA() + INVRETSCA() + INVRETSHA() + INVRETSEA() + INVRETSJA() + INVRETOIA() + INVRETOJA() + INVRETOKA() + INVRETOPA() + INVRETOQA() + INVRETORA() + INVRETOEA() + INVRETOFA() + INVRETUBA() + INVRETUCA() + INVRETPBRA() + INVRETPFRA() + INVRETPJRA() + INVRETPARA() + INVRETPERA() + INVRETPIRA() + INVRETPYRA() + INVRETPXRA() + INVRETSBRA() + INVRETSGRA() + INVRETSARA() + INVRETSFRA() + INVRETABRA() + INVRETAGRA() + INVRETAARA() + INVRETAFRA())

    @cache_result
    def RNIDOM3():
        """
        Montant RNI investissements outre mer (taux 11 %)
        """
        return arr(((RNG() + TTPVQ()) and TX11 and (RNG() + TTPVQ()) * TX11 / 100))

    @cache_result
    def MAXDOM3():
        """
        Variable somme inv. dom
        """
        return max(0, (RNIDOM3() - TOTALPLAFA() - TOTALPLAFB()))

    @cache_result
    def INVRETRLA():
        """
        Plafonnement 7RL avec case 7QA coche
        """
        return (min(arr((NINVRETRL() and TX375 and NINVRETRL() * TX375 / 100)), MAXDOM3()) and min(arr((NINVRETRL() and TX375 and NINVRETRL() * TX375 / 100)), MAXDOM3()) * (1 - V_CNR()))

    @cache_result
    def INVRETRQA():
        """
        Plafonnement 7RQ avec case 7QA coche
        """
        return (min(arr((NINVRETRQ() and TX375 and NINVRETRQ() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA()))) and min(arr((NINVRETRQ() and TX375 and NINVRETRQ() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRVA():
        """
        Plafonnement 7RV avec case 7QA coche
        """
        return (min(arr((NINVRETRV() and TX375 and NINVRETRV() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA()))) and min(arr((NINVRETRV() and TX375 and NINVRETRV() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETNVA():
        """
        Plafonnement 7NV avec case 7QA coche
        """
        return (min(arr((NINVRETNV() and TX375 and NINVRETNV() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA()))) and min(arr((NINVRETNV() and TX375 and NINVRETNV() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRKA():
        """
        Plafonnement 7RK avec case 7QA coche
        """
        return (min(arr((NINVRETRK() and TX4737 and NINVRETRK() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA()))) and min(arr((NINVRETRK() and TX4737 and NINVRETRK() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRPA():
        """
        Plafonnement 7RP avec case 7QA coche
        """
        return (min(arr((NINVRETRP() and TX4737 and NINVRETRP() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA()))) and min(arr((NINVRETRP() and TX4737 and NINVRETRP() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRUA():
        """
        Plafonnement 7RU avec case 7QA coche
        """
        return (min(arr((NINVRETRU() and TX4737 and NINVRETRU() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA()))) and min(arr((NINVRETRU() and TX4737 and NINVRETRU() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETNUA():
        """
        Plafonnement 7NU avec case 7QA coche
        """
        return (min(arr((NINVRETNU() and TX4737 and NINVRETNU() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA()))) and min(arr((NINVRETNU() and TX4737 and NINVRETNU() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRMA():
        """
        Plafonnement 7RM avec case 7QA coche
        """
        return (min(NINVRETRM(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA()))) and min(NINVRETRM(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRRA():
        """
        Plafonnement 7RR avec case 7QA coche
        """
        return (min(NINVRETRR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA()))) and min(NINVRETRR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRWA():
        """
        Plafonnement 7RW avec case 7QA coche
        """
        return (min(NINVRETRW(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA()))) and min(NINVRETRW(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETNWA():
        """
        Plafonnement 7NW avec case 7QA coche
        """
        return (min(NINVRETNW(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA()))) and min(NINVRETNW(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETROA():
        """
        Plafonnement 7RO avec case 7QA coche
        """
        return (min(NINVRETRO(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA()))) and min(NINVRETRO(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRTA():
        """
        Plafonnement 7RT avec case 7QA coche
        """
        return (min(NINVRETRT(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA()))) and min(NINVRETRT(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRYA():
        """
        Plafonnement 7RY avec case 7QA coche
        """
        return (min(NINVRETRY(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA()))) and min(NINVRETRY(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETNYA():
        """
        Plafonnement HNY avec case HQA coche
        """
        return (min(NINVRETNY(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA()))) and min(NINVRETNY(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSLA():
        """
        Plafonnement HSL avec case HQA coche
        """
        return (min(arr((NINVRETSL() and TX375 and NINVRETSL() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA()))) and min(arr((NINVRETSL() and TX375 and NINVRETSL() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSQA():
        """
        Plafonnement HSQ avec case HQA coche
        """
        return (min(arr((NINVRETSQ() and TX375 and NINVRETSQ() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA()))) and min(arr((NINVRETSQ() and TX375 and NINVRETSQ() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSVA():
        """
        Plafonnement HSV avec case HQA coche
        """
        return (min(arr((NINVRETSV() and TX375 and NINVRETSV() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA()))) and min(arr((NINVRETSV() and TX375 and NINVRETSV() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETTAA():
        """
        Plafonnement HTA avec case HQA coche
        """
        return (min(arr((NINVRETTA() and TX375 and NINVRETTA() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA()))) and min(arr((NINVRETTA() and TX375 and NINVRETTA() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSKA():
        """
        Plafonnement HSK avec case HQA coche
        """
        return (min(arr((NINVRETSK() and TX4737 and NINVRETSK() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA()))) and min(arr((NINVRETSK() and TX4737 and NINVRETSK() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSPA():
        """
        Plafonnement HSP avec case HQA coche
        """
        return (min(arr((NINVRETSP() and TX4737 and NINVRETSP() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA()))) and min(arr((NINVRETSP() and TX4737 and NINVRETSP() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSUA():
        """
        Plafonnement HSU avec case HQA coche
        """
        return (min(arr((NINVRETSU() and TX4737 and NINVRETSU() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA()))) and min(arr((NINVRETSU() and TX4737 and NINVRETSU() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSZA():
        """
        Plafonnement HSZ avec case HQA coche
        """
        return (min(arr((NINVRETSZ() and TX4737 and NINVRETSZ() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA()))) and min(arr((NINVRETSZ() and TX4737 and NINVRETSZ() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSMA():
        """
        Plafonnement HSM avec case HQA coche
        """
        return (min(NINVRETSM(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA()))) and min(NINVRETSM(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSRA():
        """
        Plafonnement HSR avec case HQA coche
        """
        return (min(NINVRETSR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA()))) and min(NINVRETSR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSWA():
        """
        Plafonnement HSW avec case HQA coche
        """
        return (min(NINVRETSW(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA()))) and min(NINVRETSW(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETTBA():
        """
        Plafonnement HTB avec case HQA coche
        """
        return (min(NINVRETTB(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA()))) and min(NINVRETTB(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSOA():
        """
        Plafonnement HSO avec case HQA coche
        """
        return (min(NINVRETSO(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA()))) and min(NINVRETSO(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSTA():
        """
        Plafonnement HST avec case HQA coche
        """
        return (min(NINVRETST(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA()))) and min(NINVRETST(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETSYA():
        """
        Plafonnement HSY avec case HQA coche
        """
        return (min(NINVRETSY(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA()))) and min(NINVRETSY(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETTDA():
        """
        Plafonnement HTD avec case HQA coche
        """
        return (min(NINVRETTD(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA()))) and min(NINVRETTD(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETALA():
        """
        Plafonnement HAL avec case HQA coche
        """
        return (min(arr((NINVRETAL() and TX375 and NINVRETAL() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA()))) and min(arr((NINVRETAL() and TX375 and NINVRETAL() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETAQA():
        """
        Plafonnement HAQ avec case HQA coche
        """
        return (min(arr((NINVRETAQ() and TX375 and NINVRETAQ() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA()))) and min(arr((NINVRETAQ() and TX375 and NINVRETAQ() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETAVA():
        """
        Plafonnement HAV avec case HQA coche
        """
        return (min(arr((NINVRETAV() and TX375 and NINVRETAV() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA()))) and min(arr((NINVRETAV() and TX375 and NINVRETAV() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETBBA():
        """
        Plafonnement HBB avec case HQA coche
        """
        return (min(arr((NINVRETBB() and TX375 and NINVRETBB() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA()))) and min(arr((NINVRETBB() and TX375 and NINVRETBB() * TX375 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETAKA():
        """
        Plafonnement HAK avec case HQA coche
        """
        return (min(arr((NINVRETAK() and TX4737 and NINVRETAK() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA()))) and min(arr((NINVRETAK() and TX4737 and NINVRETAK() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETAPA():
        """
        Plafonnement HAP avec case HQA coche
        """
        return (min(arr((NINVRETAP() and TX4737 and NINVRETAP() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA()))) and min(arr((NINVRETAP() and TX4737 and NINVRETAP() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETAUA():
        """
        Plafonnement HAU avec case HQA coche
        """
        return (min(arr((NINVRETAU() and TX4737 and NINVRETAU() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA()))) and min(arr((NINVRETAU() and TX4737 and NINVRETAU() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETBAA():
        """
        Plafonnement HBA avec case HQA coche
        """
        return (min(arr((NINVRETBA() and TX4737 and NINVRETBA() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA()))) and min(arr((NINVRETBA() and TX4737 and NINVRETBA() * TX4737 / 100)), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETAMA():
        """
        Plafonnement HAM avec case HQA coche
        """
        return (min(NINVRETAM(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA()))) and min(NINVRETAM(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETARA():
        """
        Plafonnement HAR avec case HQA coche
        """
        return (min(NINVRETAR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA()))) and min(NINVRETAR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETAWA():
        """
        Plafonnement HAW avec case HQA coche
        """
        return (min(NINVRETAW(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA()))) and min(NINVRETAW(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETBEA():
        """
        Plafonnement HBE avec case HQA coche
        """
        return (min(NINVRETBE(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA()))) and min(NINVRETBE(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAO():
        """
        Plafonnement HAO theorique
        """
        return (max(min(saisie_variables.get('CODHAO', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE() - NINVRETAE() - NINVRETAJ())), 0) and max(min(saisie_variables.get('CODHAO', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE() - NINVRETAE() - NINVRETAJ())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAOA():
        """
        Plafonnement HAO avec case HQA coche
        """
        return (min(NINVRETAO(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA()))) and min(NINVRETAO(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAT():
        """
        Plafonnement HAT theorique
        """
        return (max(min(saisie_variables.get('CODHAT', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE() - NINVRETAE() - NINVRETAJ() - NINVRETAO())), 0) and max(min(saisie_variables.get('CODHAT', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE() - NINVRETAE() - NINVRETAJ() - NINVRETAO())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETATA():
        """
        Plafonnement HAT avec case HQA coche
        """
        return (min(NINVRETAT(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA()))) and min(NINVRETAT(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAY():
        """
        Plafonnement HAY theorique
        """
        return (max(min(saisie_variables.get('CODHAY', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE() - NINVRETAE() - NINVRETAJ() - NINVRETAO() - NINVRETAT())), 0) and max(min(saisie_variables.get('CODHAY', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE() - NINVRETAE() - NINVRETAJ() - NINVRETAO() - NINVRETAT())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETAYA():
        """
        Plafonnement HAY avec case HQA coche
        """
        return (min(NINVRETAY(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA()))) and min(NINVRETAY(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETBG():
        """
        Plafonnement HBG theorique
        """
        return (max(min(saisie_variables.get('CODHBG', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE() - NINVRETAE() - NINVRETAJ() - NINVRETAO() - NINVRETAT() - NINVRETAY())), 0) and max(min(saisie_variables.get('CODHBG', 0), (RRI1() - NRLOGDOM() - NRRI2() - NRLOGSOC() - NRDOMSOC1() - NRRI3() - saisie_variables.get('INVOMREP', 0) - saisie_variables.get('INVOMENTMN', 0) - saisie_variables.get('INVOMQV', 0) - saisie_variables.get('INVENDEB2009', 0) - NINVRETPM() - NINVRETRJ() - NINVRETMA() - NINVRETLG() - NINVRETKS() - NINVRETMB() - NINVRETMC() - NINVRETLH() - NINVRETLI() - NINVRETKT() - NINVRETKU() - NINVRETQP() - NINVRETQG() - NINVRETQO() - NINVRETQF() - NINVRETQR() - NINVRETQI() - NINVRETPB() - NINVRETPF() - NINVRETPJ() - NINVRETPA() - NINVRETPE() - NINVRETPI() - NINVRETPD() - NINVRETPH() - NINVRETPL() - NINVRETPO() - NINVRETPT() - NINVRETPY() - NINVRETRL() - NINVRETRQ() - NINVRETRV() - NINVRETNV() - NINVRETPN() - NINVRETPS() - NINVRETPX() - NINVRETRK() - NINVRETRP() - NINVRETRU() - NINVRETNU() - NINVRETPP() - NINVRETPU() - NINVRETRG() - NINVRETRM() - NINVRETRR() - NINVRETRW() - NINVRETNW() - NINVRETPR() - NINVRETPW() - NINVRETRI() - NINVRETRO() - NINVRETRT() - NINVRETRY() - NINVRETNY() - NINVRETSB() - NINVRETSG() - NINVRETSL() - NINVRETSQ() - NINVRETSV() - NINVRETTA() - NINVRETSA() - NINVRETSF() - NINVRETSK() - NINVRETSP() - NINVRETSU() - NINVRETSZ() - NINVRETSC() - NINVRETSH() - NINVRETSM() - NINVRETSR() - NINVRETSW() - NINVRETTB() - NINVRETSE() - NINVRETSJ() - NINVRETSO() - NINVRETST() - NINVRETSY() - NINVRETTD() - NINVRETAB() - NINVRETAG() - NINVRETAL() - NINVRETAQ() - NINVRETAV() - NINVRETBB() - NINVRETAA() - NINVRETAF() - NINVRETAK() - NINVRETAP() - NINVRETAU() - NINVRETBA() - NINVRETAC() - NINVRETAH() - NINVRETAM() - NINVRETAR() - NINVRETAW() - NINVRETBE() - NINVRETAE() - NINVRETAJ() - NINVRETAO() - NINVRETAT() - NINVRETAY())), 0) * (1 - V_CNR()))

    @cache_result
    def INVRETBGA():
        """
        Plafonnement HBG avec case HQA coche
        """
        return (min(NINVRETBG(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA()))) and min(NINVRETBG(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOTA():
        """
        Plafonnement 7OT avec case 7QA coche
        """
        return (min(NINVRETOT(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA()))) and min(NINVRETOT(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOUA():
        """
        Plafonnement 7OU avec case 7QA coche
        """
        return (min(NINVRETOU(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA()))) and min(NINVRETOU(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOVA():
        """
        Plafonnement 7OV avec case 7QA coche
        """
        return (min(NINVRETOV(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA()))) and min(NINVRETOV(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOWA():
        """
        Plafonnement 7OW avec case 7QA coche
        """
        return (min(NINVRETOW(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA()))) and min(NINVRETOW(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOGA():
        """
        Plafonnement HOG avec case HQA coche
        """
        return (min(NINVRETOG(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA()))) and min(NINVRETOG(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOXA():
        """
        Plafonnement HOX avec case HQA coche
        """
        return (min(NINVRETOX(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA()))) and min(NINVRETOX(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOYA():
        """
        Plafonnement HOY avec case HQA coche
        """
        return (min(NINVRETOY(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA()))) and min(NINVRETOY(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOZA():
        """
        Plafonnement HOZ avec case HQA coche
        """
        return (min(NINVRETOZ(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA()))) and min(NINVRETOZ(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUDA():
        """
        Plafonnement HUD avec case HQA coche
        """
        return (min(NINVRETUD(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA()))) and min(NINVRETUD(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUEA():
        """
        Plafonnement HUE avec case HQA coche
        """
        return (min(NINVRETUE(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA()))) and min(NINVRETUE(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUFA():
        """
        Plafonnement HUF avec case HQA coche
        """
        return (min(NINVRETUF(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA()))) and min(NINVRETUF(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUGA():
        """
        Plafonnement HUG avec case HQA coche
        """
        return (min(NINVRETUG(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA()))) and min(NINVRETUG(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRLR():
        """
        Plafonnement 7RL retrocede theorique
        """
        return ((NINVRETRL() - arr((NINVRETRL() and TX375 and NINVRETRL() * TX375 / 100))) and (NINVRETRL() - arr((NINVRETRL() and TX375 and NINVRETRL() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETRLRA():
        """
        Plafonnement 7RL retrocede avec case 7QA coche
        """
        return (min(NINVRETRLR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA()))) and min(NINVRETRLR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRQR():
        """
        Plafonnement 7RQ retrocede theorique
        """
        return ((NINVRETRQ() - arr((NINVRETRQ() and TX375 and NINVRETRQ() * TX375 / 100))) and (NINVRETRQ() - arr((NINVRETRQ() and TX375 and NINVRETRQ() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETRQRA():
        """
        Plafonnement 7RQ retrocede avec case 7QA coche
        """
        return (min(NINVRETRQR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA()))) and min(NINVRETRQR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRVR():
        """
        Plafonnement 7RV retrocede theorique
        """
        return ((NINVRETRV() - arr((NINVRETRV() and TX375 and NINVRETRV() * TX375 / 100))) and (NINVRETRV() - arr((NINVRETRV() and TX375 and NINVRETRV() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETRVRA():
        """
        Plafonnement 7RV retrocede avec case 7QA coche
        """
        return (min(NINVRETRVR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA()))) and min(NINVRETRVR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETNVR():
        """
        Plafonnement 7NV retrocede theorique
        """
        return ((NINVRETNV() - arr((NINVRETNV() and TX375 and NINVRETNV() * TX375 / 100))) and (NINVRETNV() - arr((NINVRETNV() and TX375 and NINVRETNV() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETNVRA():
        """
        Plafonnement 7NV retrocede avec case 7QA coche
        """
        return (min(NINVRETNVR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA()))) and min(NINVRETNVR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRKR():
        """
        Plafonnement 7RK retrocede theorique
        """
        return ((NINVRETRK() - arr((NINVRETRK() and TX4737 and NINVRETRK() * TX4737 / 100))) and (NINVRETRK() - arr((NINVRETRK() and TX4737 and NINVRETRK() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETRKRA():
        """
        Plafonnement 7RK retrocede avec case 7QA coche
        """
        return (min(NINVRETRKR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA()))) and min(NINVRETRKR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRPR():
        """
        Plafonnement 7RP retrocede theorique
        """
        return ((NINVRETRP() - arr((NINVRETRP() and TX4737 and NINVRETRP() * TX4737 / 100))) and (NINVRETRP() - arr((NINVRETRP() and TX4737 and NINVRETRP() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETRPRA():
        """
        Plafonnement 7RP retrocede avec case 7QA coche
        """
        return (min(NINVRETRPR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA()))) and min(NINVRETRPR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETRUR():
        """
        Plafonnement 7RU retrocede theorique
        """
        return ((NINVRETRU() - arr((NINVRETRU() and TX4737 and NINVRETRU() * TX4737 / 100))) and (NINVRETRU() - arr((NINVRETRU() and TX4737 and NINVRETRU() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETRURA():
        """
        Plafonnement 7RU retrocede avec case 7QA coche
        """
        return (min(NINVRETRUR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA()))) and min(NINVRETRUR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETNUR():
        """
        Plafonnement HNU retrocede theorique
        """
        return ((NINVRETNU() - arr((NINVRETNU() and TX4737 and NINVRETNU() * TX4737 / 100))) and (NINVRETNU() - arr((NINVRETNU() and TX4737 and NINVRETNU() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETNURA():
        """
        Plafonnement HNU retrocede avec case HQA coche
        """
        return (min(NINVRETNUR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA()))) and min(NINVRETNUR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSLR():
        """
        Plafonnement HSL retrocede theorique
        """
        return ((NINVRETSL() - arr((NINVRETSL() and TX375 and NINVRETSL() * TX375 / 100))) and (NINVRETSL() - arr((NINVRETSL() and TX375 and NINVRETSL() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETSLRA():
        """
        Plafonnement HSL retrocede avec case HQA coche
        """
        return (min(NINVRETSLR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA()))) and min(NINVRETSLR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSQR():
        """
        Plafonnement HSQ retrocede theorique
        """
        return ((NINVRETSQ() - arr((NINVRETSQ() and TX375 and NINVRETSQ() * TX375 / 100))) and (NINVRETSQ() - arr((NINVRETSQ() and TX375 and NINVRETSQ() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETSQRA():
        """
        Plafonnement HSQ retrocede avec case HQA coche
        """
        return (min(NINVRETSQR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA()))) and min(NINVRETSQR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSVR():
        """
        Plafonnement HSV retrocede theorique
        """
        return ((NINVRETSV() - arr((NINVRETSV() and TX375 and NINVRETSV() * TX375 / 100))) and (NINVRETSV() - arr((NINVRETSV() and TX375 and NINVRETSV() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETSVRA():
        """
        Plafonnement HSV retrocede avec case HQA coche
        """
        return (min(NINVRETSVR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA()))) and min(NINVRETSVR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETTAR():
        """
        Plafonnement HTA retrocede theorique
        """
        return ((NINVRETTA() - arr((NINVRETTA() and TX375 and NINVRETTA() * TX375 / 100))) and (NINVRETTA() - arr((NINVRETTA() and TX375 and NINVRETTA() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETTARA():
        """
        Plafonnement HTA retrocede avec case HQA coche
        """
        return (min(NINVRETTAR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA()))) and min(NINVRETTAR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSKR():
        """
        Plafonnement HSK retrocede theorique
        """
        return ((NINVRETSK() - arr((NINVRETSK() and TX4737 and NINVRETSK() * TX4737 / 100))) and (NINVRETSK() - arr((NINVRETSK() and TX4737 and NINVRETSK() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETSKRA():
        """
        Plafonnement HSK retrocede avec case HQA coche
        """
        return (min(NINVRETSKR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA()))) and min(NINVRETSKR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSPR():
        """
        Plafonnement HSP retrocede theorique
        """
        return ((NINVRETSP() - arr((NINVRETSP() and TX4737 and NINVRETSP() * TX4737 / 100))) and (NINVRETSP() - arr((NINVRETSP() and TX4737 and NINVRETSP() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETSPRA():
        """
        Plafonnement HSP retrocede avec case HQA coche
        """
        return (min(NINVRETSPR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA()))) and min(NINVRETSPR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSUR():
        """
        Plafonnement HSU retrocede theorique
        """
        return ((NINVRETSU() - arr((NINVRETSU() and TX4737 and NINVRETSU() * TX4737 / 100))) and (NINVRETSU() - arr((NINVRETSU() and TX4737 and NINVRETSU() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETSURA():
        """
        Plafonnement HSU retrocede avec case HQA coche
        """
        return (min(NINVRETSUR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA()))) and min(NINVRETSUR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETSZR():
        """
        Plafonnement HSZ retrocede theorique
        """
        return ((NINVRETSZ() - arr((NINVRETSZ() and TX4737 and NINVRETSZ() * TX4737 / 100))) and (NINVRETSZ() - arr((NINVRETSZ() and TX4737 and NINVRETSZ() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETSZRA():
        """
        Plafonnement HSZ retrocede avec case HQA coche
        """
        return (min(NINVRETSZR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA()))) and min(NINVRETSZR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETALR():
        """
        Plafonnement HAL retrocede theorique
        """
        return ((NINVRETAL() - arr((NINVRETAL() and TX375 and NINVRETAL() * TX375 / 100))) and (NINVRETAL() - arr((NINVRETAL() and TX375 and NINVRETAL() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETALRA():
        """
        Plafonnement HAL retrocede avec case HQA coche
        """
        return (min(NINVRETALR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA()))) and min(NINVRETALR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAQR():
        """
        Plafonnement HAQ retrocede theorique
        """
        return ((NINVRETAQ() - arr((NINVRETAQ() and TX375 and NINVRETAQ() * TX375 / 100))) and (NINVRETAQ() - arr((NINVRETAQ() and TX375 and NINVRETAQ() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETAQRA():
        """
        Plafonnement HAQ retrocede avec case HQA coche
        """
        return (min(NINVRETAQR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA()))) and min(NINVRETAQR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAVR():
        """
        Plafonnement HAV retrocede theorique
        """
        return ((NINVRETAV() - arr((NINVRETAV() and TX375 and NINVRETAV() * TX375 / 100))) and (NINVRETAV() - arr((NINVRETAV() and TX375 and NINVRETAV() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETAVRA():
        """
        Plafonnement HAV retrocede avec case HQA coche
        """
        return (min(NINVRETAVR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA()))) and min(NINVRETAVR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETBBR():
        """
        Plafonnement HBB retrocede theorique
        """
        return ((NINVRETBB() - arr((NINVRETBB() and TX375 and NINVRETBB() * TX375 / 100))) and (NINVRETBB() - arr((NINVRETBB() and TX375 and NINVRETBB() * TX375 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETBBRA():
        """
        Plafonnement HBB retrocede avec case HQA coche
        """
        return (min(NINVRETBBR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA() - INVRETAVRA()))) and min(NINVRETBBR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA() - INVRETAVRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAKR():
        """
        Plafonnement HAK retrocede theorique
        """
        return ((NINVRETAK() - arr((NINVRETAK() and TX4737 and NINVRETAK() * TX4737 / 100))) and (NINVRETAK() - arr((NINVRETAK() and TX4737 and NINVRETAK() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETAKRA():
        """
        Plafonnement HAK retrocede avec case HQA coche
        """
        return (min(NINVRETAKR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA() - INVRETAVRA() - INVRETBBRA()))) and min(NINVRETAKR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA() - INVRETAVRA() - INVRETBBRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAPR():
        """
        Plafonnement HAP retrocede theorique
        """
        return ((NINVRETAP() - arr((NINVRETAP() and TX4737 and NINVRETAP() * TX4737 / 100))) and (NINVRETAP() - arr((NINVRETAP() and TX4737 and NINVRETAP() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETAPRA():
        """
        Plafonnement HAP retrocede avec case HQA coche
        """
        return (min(NINVRETAPR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA() - INVRETAVRA() - INVRETBBRA() - INVRETAKRA()))) and min(NINVRETAPR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA() - INVRETAVRA() - INVRETBBRA() - INVRETAKRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETAUR():
        """
        Plafonnement HAU retrocede theorique
        """
        return ((NINVRETAU() - arr((NINVRETAU() and TX4737 and NINVRETAU() * TX4737 / 100))) and (NINVRETAU() - arr((NINVRETAU() and TX4737 and NINVRETAU() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETAURA():
        """
        Plafonnement HAU retrocede avec case HQA coche
        """
        return (min(NINVRETAUR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA() - INVRETAVRA() - INVRETBBRA() - INVRETAKRA() - INVRETAPRA()))) and min(NINVRETAUR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA() - INVRETAVRA() - INVRETBBRA() - INVRETAKRA() - INVRETAPRA()))) * (1 - V_CNR()))

    @cache_result
    def NINVRETBAR():
        """
        Plafonnement HBA retrocede theorique
        """
        return ((NINVRETBA() - arr((NINVRETBA() and TX4737 and NINVRETBA() * TX4737 / 100))) and (NINVRETBA() - arr((NINVRETBA() and TX4737 and NINVRETBA() * TX4737 / 100))) * (1 - V_CNR()))

    @cache_result
    def INVRETBARA():
        """
        Plafonnement HBA retrocede avec case HQA coche
        """
        return (min(NINVRETBAR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA() - INVRETAVRA() - INVRETBBRA() - INVRETAKRA() - INVRETAPRA() - INVRETAURA()))) and min(NINVRETBAR(), max(0, (MAXDOM3() - INVRETRLA() - INVRETRQA() - INVRETRVA() - INVRETNVA() - INVRETRKA() - INVRETRPA() - INVRETRUA() - INVRETNUA() - INVRETRMA() - INVRETRRA() - INVRETRWA() - INVRETNWA() - INVRETROA() - INVRETRTA() - INVRETRYA() - INVRETNYA() - INVRETSLA() - INVRETSQA() - INVRETSVA() - INVRETTAA() - INVRETSKA() - INVRETSPA() - INVRETSUA() - INVRETSZA() - INVRETSMA() - INVRETSRA() - INVRETSWA() - INVRETTBA() - INVRETSOA() - INVRETSTA() - INVRETSYA() - INVRETTDA() - INVRETALA() - INVRETAQA() - INVRETAVA() - INVRETBBA() - INVRETAKA() - INVRETAPA() - INVRETAUA() - INVRETBAA() - INVRETAMA() - INVRETARA() - INVRETAWA() - INVRETBEA() - INVRETAOA() - INVRETATA() - INVRETAYA() - INVRETBGA() - INVRETOTA() - INVRETOUA() - INVRETOVA() - INVRETOWA() - INVRETOGA() - INVRETOXA() - INVRETOYA() - INVRETOZA() - INVRETUDA() - INVRETUEA() - INVRETUFA() - INVRETUGA() - INVRETRLRA() - INVRETRQRA() - INVRETRVRA() - INVRETNVRA() - INVRETRKRA() - INVRETRPRA() - INVRETRURA() - INVRETNURA() - INVRETSLRA() - INVRETSQRA() - INVRETSVRA() - INVRETTARA() - INVRETSKRA() - INVRETSPRA() - INVRETSURA() - INVRETSZRA() - INVRETALRA() - INVRETAQRA() - INVRETAVRA() - INVRETBBRA() - INVRETAKRA() - INVRETAPRA() - INVRETAURA()))) * (1 - V_CNR()))

    @cache_result
    def TOTALPLAFC():
        """
        Montant total investissements outre mer plafond
        """
        return (INVRETRLA() + INVRETRQA() + INVRETRVA() + INVRETNVA() + INVRETRKA() + INVRETRPA() + INVRETRUA() + INVRETNUA() + INVRETRMA() + INVRETRRA() + INVRETRWA() + INVRETNWA() + INVRETROA() + INVRETRTA() + INVRETRYA() + INVRETNYA() + INVRETSLA() + INVRETSQA() + INVRETSVA() + INVRETTAA() + INVRETSKA() + INVRETSPA() + INVRETSUA() + INVRETSZA() + INVRETSMA() + INVRETSRA() + INVRETSWA() + INVRETTBA() + INVRETSOA() + INVRETSTA() + INVRETSYA() + INVRETTDA() + INVRETALA() + INVRETAQA() + INVRETAVA() + INVRETBBA() + INVRETAKA() + INVRETAPA() + INVRETAUA() + INVRETBAA() + INVRETAMA() + INVRETARA() + INVRETAWA() + INVRETBEA() + INVRETAOA() + INVRETATA() + INVRETAYA() + INVRETBGA() + INVRETOTA() + INVRETOUA() + INVRETOVA() + INVRETOWA() + INVRETOGA() + INVRETOXA() + INVRETOYA() + INVRETOZA() + INVRETUDA() + INVRETUEA() + INVRETUFA() + INVRETUGA() + INVRETRLRA() + INVRETRQRA() + INVRETRVRA() + INVRETNVRA() + INVRETRKRA() + INVRETRPRA() + INVRETRURA() + INVRETNURA() + INVRETSLRA() + INVRETSQRA() + INVRETSVRA() + INVRETTARA() + INVRETSKRA() + INVRETSPRA() + INVRETSURA() + INVRETSZRA() + INVRETALRA() + INVRETAQRA() + INVRETAVRA() + INVRETBBRA() + INVRETAKRA() + INVRETAPRA() + INVRETAURA() + INVRETBARA())

    @cache_result
    def INVRETKS():
        """
        Plafonnement HKS
        """
        return (NINVRETKS() and NINVRETKS() * (1 - V_CNR()))

    @cache_result
    def INVRETKT():
        """
        Plafonnement HKT
        """
        return (NINVRETKT() and NINVRETKT() * (1 - V_CNR()))

    @cache_result
    def INVRETKU():
        """
        Plafonnement HKU
        """
        return (NINVRETKU() and NINVRETKU() * (1 - V_CNR()))

    @cache_result
    def INVRETQR():
        """
        Plafonnement 7QR
        """
        return (NINVRETQR() and NINVRETQR() * (1 - V_CNR()))

    @cache_result
    def INVRETQI():
        """
        Plafonnement 7QI
        """
        return (NINVRETQI() and NINVRETQI() * (1 - V_CNR()))

    @cache_result
    def INVRETPR():
        """
        Plafonnement 7PR
        """
        return (NINVRETPR() and NINVRETPR() * (1 - V_CNR()))

    @cache_result
    def INVRETPW():
        """
        Plafonnement 7PW
        """
        return (NINVRETPW() and NINVRETPW() * (1 - V_CNR()))

    @cache_result
    def INVRETQM():
        """
        Plafonnement 7QM
        """
        return (min(NINVRETQM(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL()))) and min(NINVRETQM(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQD():
        """
        Plafonnement 7QD
        """
        return (min(NINVRETQD(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM()))) and min(NINVRETQD(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOB():
        """
        Plafonnement HOB
        """
        return (min(NINVRETOB(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD()))) and min(NINVRETOB(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOC():
        """
        Plafonnement HOC
        """
        return (min(NINVRETOC(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB()))) and min(NINVRETOC(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOI():
        """
        Plafonnement 7OI
        """
        return (min(NINVRETOI(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC()))) and min(NINVRETOI(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOJ():
        """
        Plafonnement 7OJ
        """
        return (min(NINVRETOJ(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI()))) and min(NINVRETOJ(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOK():
        """
        Plafonnement 7OK
        """
        return (min(NINVRETOK(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ()))) and min(NINVRETOK(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOM():
        """
        Plafonnement 7OM
        """
        return (min(NINVRETOM(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK()))) and min(NINVRETOM(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK()))) * (1 - V_CNR()))

    @cache_result
    def INVRETON():
        """
        Plafonnement 7ON
        """
        return (min(NINVRETON(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM()))) and min(NINVRETON(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOP():
        """
        Plafonnement 7OP
        """
        return (min(NINVRETOP(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON()))) and min(NINVRETOP(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOQ():
        """
        Plafonnement 7OQ
        """
        return (min(NINVRETOQ(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP()))) and min(NINVRETOQ(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOR():
        """
        Plafonnement 7OR
        """
        return (min(NINVRETOR(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ()))) and min(NINVRETOR(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOT():
        """
        Plafonnement 7OT
        """
        return (min(NINVRETOT(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR()))) and min(NINVRETOT(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOU():
        """
        Plafonnement 7OU
        """
        return (min(NINVRETOU(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT()))) and min(NINVRETOU(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOV():
        """
        Plafonnement 7OV
        """
        return (min(NINVRETOV(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU()))) and min(NINVRETOV(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOW():
        """
        Plafonnement 7OW
        """
        return (min(NINVRETOW(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV()))) and min(NINVRETOW(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOD():
        """
        Plafonnement HOD
        """
        return (min(NINVRETOD(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW()))) and min(NINVRETOD(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOE():
        """
        Plafonnement HOE
        """
        return (min(NINVRETOE(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD()))) and min(NINVRETOE(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOF():
        """
        Plafonnement HOF
        """
        return (min(NINVRETOF(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE()))) and min(NINVRETOF(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOG():
        """
        Plafonnement HOG
        """
        return (min(NINVRETOG(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF()))) and min(NINVRETOG(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOX():
        """
        Plafonnement HOX
        """
        return (min(NINVRETOX(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG()))) and min(NINVRETOX(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOY():
        """
        Plafonnement HOY
        """
        return (min(NINVRETOY(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX()))) and min(NINVRETOY(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX()))) * (1 - V_CNR()))

    @cache_result
    def INVRETOZ():
        """
        Plafonnement HOZ
        """
        return (min(NINVRETOZ(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY()))) and min(NINVRETOZ(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUA():
        """
        Plafonnement HUA
        """
        return (min(NINVRETUA(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ()))) and min(NINVRETUA(), max(0, (PLAF_INVDOM - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ()))) * (1 - V_CNR()))

    @cache_result
    def INVRETKGR():
        """
        Plafonnement HKG retrocede
        """
        return (min(max(min(arr((INVRETKG() and 13 and INVRETKG() * 13 / 7)), (NINVRETKG() - INVRETKG())), (NINVRETKG() - INVRETKG())), PLAF_INVDOM1) and min(max(min(arr((INVRETKG() and 13 and INVRETKG() * 13 / 7)), (NINVRETKG() - INVRETKG())), (NINVRETKG() - INVRETKG())), PLAF_INVDOM1) * (1 - V_CNR()))

    @cache_result
    def INVRETKHR():
        """
        Plafonnement HKH retrocede
        """
        return (min(max(min(arr((INVRETKH() and 13 and INVRETKH() * 13 / 7)), (NINVRETKH() - INVRETKH())), (NINVRETKH() - INVRETKH())), max(0, (PLAF_INVDOM1 - INVRETKGR()))) and min(max(min(arr((INVRETKH() and 13 and INVRETKH() * 13 / 7)), (NINVRETKH() - INVRETKH())), (NINVRETKH() - INVRETKH())), max(0, (PLAF_INVDOM1 - INVRETKGR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETKIR():
        """
        Plafonnement HKI retrocede
        """
        return (min(max(min(arr((INVRETKI() and 13 and INVRETKI() * 13 / 7)), (NINVRETKI() - INVRETKI())), (NINVRETKI() - INVRETKI())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR()))) and min(max(min(arr((INVRETKI() and 13 and INVRETKI() * 13 / 7)), (NINVRETKI() - INVRETKI())), (NINVRETKI() - INVRETKI())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQNR():
        """
        Plafonnement 7QN retrocede
        """
        return (min(max(min(arr((INVRETQN() and 13 and INVRETQN() * 13 / 7)), (NINVRETQN() - INVRETQN())), (NINVRETQN() - INVRETQN())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR()))) and min(max(min(arr((INVRETQN() and 13 and INVRETQN() * 13 / 7)), (NINVRETQN() - INVRETQN())), (NINVRETQN() - INVRETQN())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQUR():
        """
        Plafonnement 7QU retrocede
        """
        return (min(max(min(arr((INVRETQU() and 13 and INVRETQU() * 13 / 7)), (NINVRETQU() - INVRETQU())), (NINVRETQU() - INVRETQU())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR()))) and min(max(min(arr((INVRETQU() and 13 and INVRETQU() * 13 / 7)), (NINVRETQU() - INVRETQU())), (NINVRETQU() - INVRETQU())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQKR():
        """
        Plafonnement 7QK retrocede
        """
        return (min(max(min(arr((INVRETQK() and 13 and INVRETQK() * 13 / 7)), (NINVRETQK() - INVRETQK())), (NINVRETQK() - INVRETQK())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR()))) and min(max(min(arr((INVRETQK() and 13 and INVRETQK() * 13 / 7)), (NINVRETQK() - INVRETQK())), (NINVRETQK() - INVRETQK())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQJR():
        """
        Plafonnement 7QJ retrocede
        """
        return (min(max(min(arr((INVRETQJ() and 13 and INVRETQJ() * 13 / 7)), (NINVRETQJ() - INVRETQJ())), (NINVRETQJ() - INVRETQJ())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR()))) and min(max(min(arr((INVRETQJ() and 13 and INVRETQJ() * 13 / 7)), (NINVRETQJ() - INVRETQJ())), (NINVRETQJ() - INVRETQJ())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQSR():
        """
        Plafonnement 7QS retrocede
        """
        return (min(max(min(arr((INVRETQS() and 13 and INVRETQS() * 13 / 7)), (NINVRETQS() - INVRETQS())), (NINVRETQS() - INVRETQS())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR()))) and min(max(min(arr((INVRETQS() and 13 and INVRETQS() * 13 / 7)), (NINVRETQS() - INVRETQS())), (NINVRETQS() - INVRETQS())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQWR():
        """
        Plafonnement 7QW retrocede
        """
        return (min(max(min(arr((INVRETQW() and 13 and INVRETQW() * 13 / 7)), (NINVRETQW() - INVRETQW())), (NINVRETQW() - INVRETQW())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR()))) and min(max(min(arr((INVRETQW() and 13 and INVRETQW() * 13 / 7)), (NINVRETQW() - INVRETQW())), (NINVRETQW() - INVRETQW())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQXR():
        """
        Plafonnement 7QX retrocede
        """
        return (min(max(min(arr((INVRETQX() and 13 and INVRETQX() * 13 / 7)), (NINVRETQX() - INVRETQX())), (NINVRETQX() - INVRETQX())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR()))) and min(max(min(arr((INVRETQX() and 13 and INVRETQX() * 13 / 7)), (NINVRETQX() - INVRETQX())), (NINVRETQX() - INVRETQX())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRAR():
        """
        Plafonnement HRA retrocede
        """
        return (min(max(min(arr((INVRETRA() and 13 and INVRETRA() * 13 / 7)), (NINVRETRA() - INVRETRA())), (NINVRETRA() - INVRETRA())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR()))) and min(max(min(arr((INVRETRA() and 13 and INVRETRA() * 13 / 7)), (NINVRETRA() - INVRETRA())), (NINVRETRA() - INVRETRA())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRBR():
        """
        Plafonnement HRB retrocede
        """
        return (min(max(min(arr((INVRETRB() and 13 and INVRETRB() * 13 / 7)), (NINVRETRB() - INVRETRB())), (NINVRETRB() - INVRETRB())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR()))) and min(max(min(arr((INVRETRB() and 13 and INVRETRB() * 13 / 7)), (NINVRETRB() - INVRETRB())), (NINVRETRB() - INVRETRB())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRCR():
        """
        Plafonnement HRC retrocede
        """
        return (min(max(min(arr((INVRETRC() and 13 and INVRETRC() * 13 / 7)), (NINVRETRC() - INVRETRC())), (NINVRETRC() - INVRETRC())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR()))) and min(max(min(arr((INVRETRC() and 13 and INVRETRC() * 13 / 7)), (NINVRETRC() - INVRETRC())), (NINVRETRC() - INVRETRC())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRDR():
        """
        Plafonnement HRD retrocede
        """
        return (min(max(min(arr((INVRETRD() and 13 and INVRETRD() * 13 / 7)), (NINVRETRD() - INVRETRD())), (NINVRETRD() - INVRETRD())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR() - INVRETRCR()))) and min(max(min(arr((INVRETRD() and 13 and INVRETRD() * 13 / 7)), (NINVRETRD() - INVRETRD())), (NINVRETRD() - INVRETRD())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR() - INVRETRCR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETXAR():
        """
        Plafonnement HXA retrocede
        """
        return (min(max(min(arr((INVRETXA() and 13 and INVRETXA() * 13 / 7)), (NINVRETXA() - INVRETXA())), (NINVRETXA() - INVRETXA())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR() - INVRETRCR() - INVRETRDR()))) and min(max(min(arr((INVRETXA() and 13 and INVRETXA() * 13 / 7)), (NINVRETXA() - INVRETXA())), (NINVRETXA() - INVRETXA())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR() - INVRETRCR() - INVRETRDR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETXBR():
        """
        Plafonnement HXB retrocede
        """
        return (min(max(min(arr((INVRETXB() and 13 and INVRETXB() * 13 / 7)), (NINVRETXB() - INVRETXB())), (NINVRETXB() - INVRETXB())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR() - INVRETRCR() - INVRETRDR() - INVRETXAR()))) and min(max(min(arr((INVRETXB() and 13 and INVRETXB() * 13 / 7)), (NINVRETXB() - INVRETXB())), (NINVRETXB() - INVRETXB())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR() - INVRETRCR() - INVRETRDR() - INVRETXAR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETXCR():
        """
        Plafonnement HXC retrocede
        """
        return (min(max(min(arr((INVRETXC() and 13 and INVRETXC() * 13 / 7)), (NINVRETXC() - INVRETXC())), (NINVRETXC() - INVRETXC())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR() - INVRETRCR() - INVRETRDR() - INVRETXAR() - INVRETXBR()))) and min(max(min(arr((INVRETXC() and 13 and INVRETXC() * 13 / 7)), (NINVRETXC() - INVRETXC())), (NINVRETXC() - INVRETXC())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR() - INVRETRCR() - INVRETRDR() - INVRETXAR() - INVRETXBR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETXER():
        """
        Plafonnement HXE retrocede
        """
        return (min(max(min(arr((INVRETXE() and 13 and INVRETXE() * 13 / 7)), (NINVRETXE() - INVRETXE())), (NINVRETXE() - INVRETXE())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR() - INVRETRCR() - INVRETRDR() - INVRETXAR() - INVRETXBR() - INVRETXCR()))) and min(max(min(arr((INVRETXE() and 13 and INVRETXE() * 13 / 7)), (NINVRETXE() - INVRETXE())), (NINVRETXE() - INVRETXE())), max(0, (PLAF_INVDOM1 - INVRETKGR() - INVRETKHR() - INVRETKIR() - INVRETQNR() - INVRETQUR() - INVRETQKR() - INVRETQJR() - INVRETQSR() - INVRETQWR() - INVRETQXR() - INVRETRAR() - INVRETRBR() - INVRETRCR() - INVRETRDR() - INVRETXAR() - INVRETXBR() - INVRETXCR()))) * (1 - V_CNR()))

    @cache_result
    def INVRETMAR():
        """
        Plafonnement 7MA retrocede
        """
        return (min(arr((INVRETMA() and 3 and INVRETMA() * 3 / 2)), (NINVRETMA() - INVRETMA())) and min(arr((INVRETMA() and 3 and INVRETMA() * 3 / 2)), (NINVRETMA() - INVRETMA())) * (1 - V_CNR()))

    @cache_result
    def INVRETLGR():
        """
        Plafonnement 7LG retrocede
        """
        return (min(INVRETLG(), max(0, (NINVRETLG() - INVRETLG()))) and min(INVRETLG(), max(0, (NINVRETLG() - INVRETLG()))) * (1 - V_CNR()))

    @cache_result
    def INVRETMBR():
        """
        Plafonnement 7MB retrocede
        """
        return (min(arr((INVRETMB() and 3 and INVRETMB() * 3 / 2)), (NINVRETMB() - INVRETMB())) and min(arr((INVRETMB() and 3 and INVRETMB() * 3 / 2)), (NINVRETMB() - INVRETMB())) * (1 - V_CNR()))

    @cache_result
    def INVRETLHR():
        """
        Plafonnement 7LH retrocede
        """
        return (min(INVRETLH(), max(0, (NINVRETLH() - INVRETLH()))) and min(INVRETLH(), max(0, (NINVRETLH() - INVRETLH()))) * (1 - V_CNR()))

    @cache_result
    def INVRETMCR():
        """
        Plafonnement 7MC retrocede
        """
        return (min(arr((INVRETMC() and 3 and INVRETMC() * 3 / 2)), (NINVRETMC() - INVRETMC())) and min(arr((INVRETMC() and 3 and INVRETMC() * 3 / 2)), (NINVRETMC() - INVRETMC())) * (1 - V_CNR()))

    @cache_result
    def INVRETLIR():
        """
        Plafonnement 7LI retrocede
        """
        return (min(INVRETLI(), max(0, (NINVRETLI() - INVRETLI()))) and min(INVRETLI(), max(0, (NINVRETLI() - INVRETLI()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQPR():
        """
        Plafonnement 7QP retrocede
        """
        return (min(arr((INVRETQP() and 3 and INVRETQP() * 3 / 2)), (NINVRETQP() - INVRETQP())) and min(arr((INVRETQP() and 3 and INVRETQP() * 3 / 2)), (NINVRETQP() - INVRETQP())) * (1 - V_CNR()))

    @cache_result
    def INVRETQGR():
        """
        Plafonnement 7QG retrocede
        """
        return (min(arr((INVRETQG() and 3 and INVRETQG() * 3 / 2)), (NINVRETQG() - INVRETQG())) and min(arr((INVRETQG() and 3 and INVRETQG() * 3 / 2)), (NINVRETQG() - INVRETQG())) * (1 - V_CNR()))

    @cache_result
    def INVRETQOR():
        """
        Plafonnement 7QO retrocede
        """
        return (min(INVRETQO(), max(0, (NINVRETQO() - INVRETQO()))) and min(INVRETQO(), max(0, (NINVRETQO() - INVRETQO()))) * (1 - V_CNR()))

    @cache_result
    def INVRETQFR():
        """
        Plafonnement 7QF retrocede
        """
        return (min(INVRETQF(), max(0, (NINVRETQF() - INVRETQF()))) and min(INVRETQF(), max(0, (NINVRETQF() - INVRETQF()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPOR():
        """
        Plafonnement 7PO retrocede
        """
        return (min(arr((INVRETPO() and 3 and INVRETPO() * 3 / 2)), (NINVRETPO() - INVRETPO())) and min(arr((INVRETPO() and 3 and INVRETPO() * 3 / 2)), (NINVRETPO() - INVRETPO())) * (1 - V_CNR()))

    @cache_result
    def INVRETPTR():
        """
        Plafonnement 7PT retrocede
        """
        return (min(arr((INVRETPT() and 3 and INVRETPT() * 3 / 2)), (NINVRETPT() - INVRETPT())) and min(arr((INVRETPT() and 3 and INVRETPT() * 3 / 2)), (NINVRETPT() - INVRETPT())) * (1 - V_CNR()))

    @cache_result
    def INVRETPNR():
        """
        Plafonnement 7PN retrocede
        """
        return (min(INVRETPN(), max(0, (NINVRETPN() - INVRETPN()))) and min(INVRETPN(), max(0, (NINVRETPN() - INVRETPN()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPSR():
        """
        Plafonnement 7PS retrocede
        """
        return (min(INVRETPS(), max(0, (NINVRETPS() - INVRETPS()))) and min(INVRETPS(), max(0, (NINVRETPS() - INVRETPS()))) * (1 - V_CNR()))

    @cache_result
    def TOTALPLAF1():
        """
        Montant total investissements outre mer plafond (taux 15 %)
        """
        return (INVRETKG() + INVRETKH() + INVRETKI() + INVRETQN() + INVRETQU() + INVRETQK() + INVRETQJ() + INVRETQS() + INVRETQW() + INVRETQX() + INVRETRA() + INVRETRB() + INVRETRC() + INVRETRD() + INVRETXA() + INVRETXB() + INVRETXC() + INVRETXE() + INVRETMA() + INVRETLG() + INVRETMB() + INVRETLH() + INVRETMC() + INVRETLI() + INVRETQP() + INVRETQG() + INVRETQO() + INVRETQF() + INVRETPO() + INVRETPT() + INVRETPN() + INVRETPS() + INVRETPP() + INVRETPU() + INVRETKS() + INVRETKT() + INVRETKU() + INVRETQR() + INVRETQI() + INVRETPR() + INVRETPW() + INVRETQL() + INVRETQM() + INVRETQD() + INVRETOB() + INVRETOC() + INVRETOM() + INVRETON() + INVRETOD() + INVRETUA() + INVRETKGR() + INVRETKHR() + INVRETKIR() + INVRETQNR() + INVRETQUR() + INVRETQKR() + INVRETQJR() + INVRETQSR() + INVRETQWR() + INVRETQXR() + INVRETRAR() + INVRETRBR() + INVRETRCR() + INVRETRDR() + INVRETXAR() + INVRETXBR() + INVRETXCR() + INVRETXER() + INVRETMAR() + INVRETLGR() + INVRETMBR() + INVRETLHR() + INVRETMCR() + INVRETLIR() + INVRETQPR() + INVRETQGR() + INVRETQOR() + INVRETQFR() + INVRETPOR() + INVRETPTR() + INVRETPNR() + INVRETPSR())

    @cache_result
    def INVRETPD():
        """
        Plafonnement 7PD
        """
        return (NINVRETPD() and NINVRETPD() * (1 - V_CNR()))

    @cache_result
    def INVRETPH():
        """
        Plafonnement 7PH
        """
        return (NINVRETPH() and NINVRETPH() * (1 - V_CNR()))

    @cache_result
    def INVRETPL():
        """
        Plafonnement 7PL
        """
        return (NINVRETPL() and NINVRETPL() * (1 - V_CNR()))

    @cache_result
    def INVRETRI():
        """
        Plafonnement 7RI
        """
        return (NINVRETRI() and NINVRETRI() * (1 - V_CNR()))

    @cache_result
    def INVRETSE():
        """
        Plafonnement HSE
        """
        return (NINVRETSE() and NINVRETSE() * (1 - V_CNR()))

    @cache_result
    def INVRETSJ():
        """
        Plafonnement HSJ
        """
        return (NINVRETSJ() and NINVRETSJ() * (1 - V_CNR()))

    @cache_result
    def INVRETAE():
        """
        Plafonnement HAE
        """
        return (NINVRETAE() and NINVRETAE() * (1 - V_CNR()))

    @cache_result
    def INVRETAJ():
        """
        Plafonnement HAJ
        """
        return (NINVRETAJ() and NINVRETAJ() * (1 - V_CNR()))

    @cache_result
    def INVRETUB():
        """
        Plafonnement HUB
        """
        return (min(NINVRETUB(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA()))) and min(NINVRETUB(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUC():
        """
        Plafonnement HUC
        """
        return (min(NINVRETUC(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA() - INVRETUB()))) and min(NINVRETUC(), max(0, (PLAF_INVDOM3 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA() - INVRETUB()))) * (1 - V_CNR()))

    @cache_result
    def INVRETPBR():
        """
        Plafonnement 7PB retrocede
        """
        return (((min(arr((INVRETPB() and 5 and INVRETPB() * 5 / 3)), (NINVRETPB() - INVRETPB())) and min(arr((INVRETPB() and 5 and INVRETPB() * 5 / 3)), (NINVRETPB() - INVRETPB())) * (1 - null((1 - abs((arr((INVRETPB() and 5 and INVRETPB() * 5 / 3)) - (NINVRETPB() - INVRETPB()))))))) + ((NINVRETPB() - INVRETPB()) and (NINVRETPB() - INVRETPB()) * null((1 - abs((arr((INVRETPB() and 5 and INVRETPB() * 5 / 3)) - (NINVRETPB() - INVRETPB()))))))) and ((min(arr((INVRETPB() and 5 and INVRETPB() * 5 / 3)), (NINVRETPB() - INVRETPB())) and min(arr((INVRETPB() and 5 and INVRETPB() * 5 / 3)), (NINVRETPB() - INVRETPB())) * (1 - null((1 - abs((arr((INVRETPB() and 5 and INVRETPB() * 5 / 3)) - (NINVRETPB() - INVRETPB()))))))) + ((NINVRETPB() - INVRETPB()) and (NINVRETPB() - INVRETPB()) * null((1 - abs((arr((INVRETPB() and 5 and INVRETPB() * 5 / 3)) - (NINVRETPB() - INVRETPB()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETPFR():
        """
        Plafonnement 7PF retrocede
        """
        return (((min(arr((INVRETPF() and 5 and INVRETPF() * 5 / 3)), (NINVRETPF() - INVRETPF())) and min(arr((INVRETPF() and 5 and INVRETPF() * 5 / 3)), (NINVRETPF() - INVRETPF())) * (1 - null((1 - abs((arr((INVRETPF() and 5 and INVRETPF() * 5 / 3)) - (NINVRETPF() - INVRETPF()))))))) + ((NINVRETPF() - INVRETPF()) and (NINVRETPF() - INVRETPF()) * null((1 - abs((arr((INVRETPF() and 5 and INVRETPF() * 5 / 3)) - (NINVRETPF() - INVRETPF()))))))) and ((min(arr((INVRETPF() and 5 and INVRETPF() * 5 / 3)), (NINVRETPF() - INVRETPF())) and min(arr((INVRETPF() and 5 and INVRETPF() * 5 / 3)), (NINVRETPF() - INVRETPF())) * (1 - null((1 - abs((arr((INVRETPF() and 5 and INVRETPF() * 5 / 3)) - (NINVRETPF() - INVRETPF()))))))) + ((NINVRETPF() - INVRETPF()) and (NINVRETPF() - INVRETPF()) * null((1 - abs((arr((INVRETPF() and 5 and INVRETPF() * 5 / 3)) - (NINVRETPF() - INVRETPF()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETPJR():
        """
        Plafonnement 7PJ retrocede
        """
        return (((min(arr((INVRETPJ() and 5 and INVRETPJ() * 5 / 3)), (NINVRETPJ() - INVRETPJ())) and min(arr((INVRETPJ() and 5 and INVRETPJ() * 5 / 3)), (NINVRETPJ() - INVRETPJ())) * (1 - null((1 - abs((arr((INVRETPJ() and 5 and INVRETPJ() * 5 / 3)) - (NINVRETPJ() - INVRETPJ()))))))) + ((NINVRETPJ() - INVRETPJ()) and (NINVRETPJ() - INVRETPJ()) * null((1 - abs((arr((INVRETPJ() and 5 and INVRETPJ() * 5 / 3)) - (NINVRETPJ() - INVRETPJ()))))))) and ((min(arr((INVRETPJ() and 5 and INVRETPJ() * 5 / 3)), (NINVRETPJ() - INVRETPJ())) and min(arr((INVRETPJ() and 5 and INVRETPJ() * 5 / 3)), (NINVRETPJ() - INVRETPJ())) * (1 - null((1 - abs((arr((INVRETPJ() and 5 and INVRETPJ() * 5 / 3)) - (NINVRETPJ() - INVRETPJ()))))))) + ((NINVRETPJ() - INVRETPJ()) and (NINVRETPJ() - INVRETPJ()) * null((1 - abs((arr((INVRETPJ() and 5 and INVRETPJ() * 5 / 3)) - (NINVRETPJ() - INVRETPJ()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETPAR():
        """
        Plafonnement 7PA retrocede
        """
        return (((min(arr((INVRETPA() and 10 and INVRETPA() * 10 / 9)), (NINVRETPA() - INVRETPA())) and min(arr((INVRETPA() and 10 and INVRETPA() * 10 / 9)), (NINVRETPA() - INVRETPA())) * (1 - null((1 - abs((arr((INVRETPA() and 10 and INVRETPA() * 10 / 9)) - (NINVRETPA() - INVRETPA()))))))) + ((NINVRETPA() - INVRETPA()) and (NINVRETPA() - INVRETPA()) * null((1 - abs((arr((INVRETPA() and 10 and INVRETPA() * 10 / 9)) - (NINVRETPA() - INVRETPA()))))))) and ((min(arr((INVRETPA() and 10 and INVRETPA() * 10 / 9)), (NINVRETPA() - INVRETPA())) and min(arr((INVRETPA() and 10 and INVRETPA() * 10 / 9)), (NINVRETPA() - INVRETPA())) * (1 - null((1 - abs((arr((INVRETPA() and 10 and INVRETPA() * 10 / 9)) - (NINVRETPA() - INVRETPA()))))))) + ((NINVRETPA() - INVRETPA()) and (NINVRETPA() - INVRETPA()) * null((1 - abs((arr((INVRETPA() and 10 and INVRETPA() * 10 / 9)) - (NINVRETPA() - INVRETPA()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETPER():
        """
        Plafonnement 7PE retrocede
        """
        return (((min(arr((INVRETPE() and 10 and INVRETPE() * 10 / 9)), (NINVRETPE() - INVRETPE())) and min(arr((INVRETPE() and 10 and INVRETPE() * 10 / 9)), (NINVRETPE() - INVRETPE())) * (1 - null((1 - abs((arr((INVRETPE() and 10 and INVRETPE() * 10 / 9)) - (NINVRETPE() - INVRETPE()))))))) + ((NINVRETPE() - INVRETPE()) and (NINVRETPE() - INVRETPE()) * null((1 - abs((arr((INVRETPE() and 10 and INVRETPE() * 10 / 9)) - (NINVRETPE() - INVRETPE()))))))) and ((min(arr((INVRETPE() and 10 and INVRETPE() * 10 / 9)), (NINVRETPE() - INVRETPE())) and min(arr((INVRETPE() and 10 and INVRETPE() * 10 / 9)), (NINVRETPE() - INVRETPE())) * (1 - null((1 - abs((arr((INVRETPE() and 10 and INVRETPE() * 10 / 9)) - (NINVRETPE() - INVRETPE()))))))) + ((NINVRETPE() - INVRETPE()) and (NINVRETPE() - INVRETPE()) * null((1 - abs((arr((INVRETPE() and 10 and INVRETPE() * 10 / 9)) - (NINVRETPE() - INVRETPE()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETPIR():
        """
        Plafonnement 7PI retrocede
        """
        return (((min(arr((INVRETPI() and 10 and INVRETPI() * 10 / 9)), (NINVRETPI() - INVRETPI())) and min(arr((INVRETPI() and 10 and INVRETPI() * 10 / 9)), (NINVRETPI() - INVRETPI())) * (1 - null((1 - abs((arr((INVRETPI() and 10 and INVRETPI() * 10 / 9)) - (NINVRETPI() - INVRETPI()))))))) + ((NINVRETPI() - INVRETPI()) and (NINVRETPI() - INVRETPI()) * null((1 - abs((arr((INVRETPI() and 10 and INVRETPI() * 10 / 9)) - (NINVRETPI() - INVRETPI()))))))) and ((min(arr((INVRETPI() and 10 and INVRETPI() * 10 / 9)), (NINVRETPI() - INVRETPI())) and min(arr((INVRETPI() and 10 and INVRETPI() * 10 / 9)), (NINVRETPI() - INVRETPI())) * (1 - null((1 - abs((arr((INVRETPI() and 10 and INVRETPI() * 10 / 9)) - (NINVRETPI() - INVRETPI()))))))) + ((NINVRETPI() - INVRETPI()) and (NINVRETPI() - INVRETPI()) * null((1 - abs((arr((INVRETPI() and 10 and INVRETPI() * 10 / 9)) - (NINVRETPI() - INVRETPI()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETPYR():
        """
        Plafonnement 7PY retrocede
        """
        return (((min(arr((INVRETPY() and 5 and INVRETPY() * 5 / 3)), (NINVRETPY() - INVRETPY())) and min(arr((INVRETPY() and 5 and INVRETPY() * 5 / 3)), (NINVRETPY() - INVRETPY())) * (1 - null((1 - abs((arr((INVRETPY() and 5 and INVRETPY() * 5 / 3)) - (NINVRETPY() - INVRETPY()))))))) + ((NINVRETPY() - INVRETPY()) and (NINVRETPY() - INVRETPY()) * null((1 - abs((arr((INVRETPY() and 5 and INVRETPY() * 5 / 3)) - (NINVRETPY() - INVRETPY()))))))) and ((min(arr((INVRETPY() and 5 and INVRETPY() * 5 / 3)), (NINVRETPY() - INVRETPY())) and min(arr((INVRETPY() and 5 and INVRETPY() * 5 / 3)), (NINVRETPY() - INVRETPY())) * (1 - null((1 - abs((arr((INVRETPY() and 5 and INVRETPY() * 5 / 3)) - (NINVRETPY() - INVRETPY()))))))) + ((NINVRETPY() - INVRETPY()) and (NINVRETPY() - INVRETPY()) * null((1 - abs((arr((INVRETPY() and 5 and INVRETPY() * 5 / 3)) - (NINVRETPY() - INVRETPY()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETPXR():
        """
        Plafonnement 7PX retrocede
        """
        return (((min(arr((INVRETPX() and 10 and INVRETPX() * 10 / 9)), (NINVRETPX() - INVRETPX())) and min(arr((INVRETPX() and 10 and INVRETPX() * 10 / 9)), (NINVRETPX() - INVRETPX())) * (1 - null((1 - abs((arr((INVRETPX() and 10 and INVRETPX() * 10 / 9)) - (NINVRETPX() - INVRETPX()))))))) + ((NINVRETPX() - INVRETPX()) and (NINVRETPX() - INVRETPX()) * null((1 - abs((arr((INVRETPX() and 10 and INVRETPX() * 10 / 9)) - (NINVRETPX() - INVRETPX()))))))) and ((min(arr((INVRETPX() and 10 and INVRETPX() * 10 / 9)), (NINVRETPX() - INVRETPX())) and min(arr((INVRETPX() and 10 and INVRETPX() * 10 / 9)), (NINVRETPX() - INVRETPX())) * (1 - null((1 - abs((arr((INVRETPX() and 10 and INVRETPX() * 10 / 9)) - (NINVRETPX() - INVRETPX()))))))) + ((NINVRETPX() - INVRETPX()) and (NINVRETPX() - INVRETPX()) * null((1 - abs((arr((INVRETPX() and 10 and INVRETPX() * 10 / 9)) - (NINVRETPX() - INVRETPX()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETSBR():
        """
        Plafonnement HSB retrocede
        """
        return (((min(arr((INVRETSB() and 5 and INVRETSB() * 5 / 3)), (NINVRETSB() - INVRETSB())) and min(arr((INVRETSB() and 5 and INVRETSB() * 5 / 3)), (NINVRETSB() - INVRETSB())) * (1 - null((1 - abs((arr((INVRETSB() and 5 and INVRETSB() * 5 / 3)) - (NINVRETSB() - INVRETSB()))))))) + ((NINVRETSB() - INVRETSB()) and (NINVRETSB() - INVRETSB()) * null((1 - abs((arr((INVRETSB() and 5 and INVRETSB() * 5 / 3)) - (NINVRETSB() - INVRETSB()))))))) and ((min(arr((INVRETSB() and 5 and INVRETSB() * 5 / 3)), (NINVRETSB() - INVRETSB())) and min(arr((INVRETSB() and 5 and INVRETSB() * 5 / 3)), (NINVRETSB() - INVRETSB())) * (1 - null((1 - abs((arr((INVRETSB() and 5 and INVRETSB() * 5 / 3)) - (NINVRETSB() - INVRETSB()))))))) + ((NINVRETSB() - INVRETSB()) and (NINVRETSB() - INVRETSB()) * null((1 - abs((arr((INVRETSB() and 5 and INVRETSB() * 5 / 3)) - (NINVRETSB() - INVRETSB()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETSGR():
        """
        Plafonnement HSG retrocede
        """
        return (((min(arr((INVRETSG() and 5 and INVRETSG() * 5 / 3)), (NINVRETSG() - INVRETSG())) and min(arr((INVRETSG() and 5 and INVRETSG() * 5 / 3)), (NINVRETSG() - INVRETSG())) * (1 - null((1 - abs((arr((INVRETSG() and 5 and INVRETSG() * 5 / 3)) - (NINVRETSG() - INVRETSG()))))))) + ((NINVRETSG() - INVRETSG()) and (NINVRETSG() - INVRETSG()) * null((1 - abs((arr((INVRETSG() and 5 and INVRETSG() * 5 / 3)) - (NINVRETSG() - INVRETSG()))))))) and ((min(arr((INVRETSG() and 5 and INVRETSG() * 5 / 3)), (NINVRETSG() - INVRETSG())) and min(arr((INVRETSG() and 5 and INVRETSG() * 5 / 3)), (NINVRETSG() - INVRETSG())) * (1 - null((1 - abs((arr((INVRETSG() and 5 and INVRETSG() * 5 / 3)) - (NINVRETSG() - INVRETSG()))))))) + ((NINVRETSG() - INVRETSG()) and (NINVRETSG() - INVRETSG()) * null((1 - abs((arr((INVRETSG() and 5 and INVRETSG() * 5 / 3)) - (NINVRETSG() - INVRETSG()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETSAR():
        """
        Plafonnement HSA retrocede
        """
        return (((min(arr((INVRETSA() and 10 and INVRETSA() * 10 / 9)), (NINVRETSA() - INVRETSA())) and min(arr((INVRETSA() and 10 and INVRETSA() * 10 / 9)), (NINVRETSA() - INVRETSA())) * (1 - null((1 - abs((arr((INVRETSA() and 10 and INVRETSA() * 10 / 9)) - (NINVRETSA() - INVRETSA()))))))) + ((NINVRETSA() - INVRETSA()) and (NINVRETSA() - INVRETSA()) * null((1 - abs((arr((INVRETSA() and 10 and INVRETSA() * 10 / 9)) - (NINVRETSA() - INVRETSA()))))))) and ((min(arr((INVRETSA() and 10 and INVRETSA() * 10 / 9)), (NINVRETSA() - INVRETSA())) and min(arr((INVRETSA() and 10 and INVRETSA() * 10 / 9)), (NINVRETSA() - INVRETSA())) * (1 - null((1 - abs((arr((INVRETSA() and 10 and INVRETSA() * 10 / 9)) - (NINVRETSA() - INVRETSA()))))))) + ((NINVRETSA() - INVRETSA()) and (NINVRETSA() - INVRETSA()) * null((1 - abs((arr((INVRETSA() and 10 and INVRETSA() * 10 / 9)) - (NINVRETSA() - INVRETSA()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETSFR():
        """
        Plafonnement HSF retrocede
        """
        return (((min(arr((INVRETSF() and 10 and INVRETSF() * 10 / 9)), (NINVRETSF() - INVRETSF())) and min(arr((INVRETSF() and 10 and INVRETSF() * 10 / 9)), (NINVRETSF() - INVRETSF())) * (1 - null((1 - abs((arr((INVRETSF() and 10 and INVRETSF() * 10 / 9)) - (NINVRETSF() - INVRETSF()))))))) + ((NINVRETSF() - INVRETSF()) and (NINVRETSF() - INVRETSF()) * null((1 - abs((arr((INVRETSF() and 10 and INVRETSF() * 10 / 9)) - (NINVRETSF() - INVRETSF()))))))) and ((min(arr((INVRETSF() and 10 and INVRETSF() * 10 / 9)), (NINVRETSF() - INVRETSF())) and min(arr((INVRETSF() and 10 and INVRETSF() * 10 / 9)), (NINVRETSF() - INVRETSF())) * (1 - null((1 - abs((arr((INVRETSF() and 10 and INVRETSF() * 10 / 9)) - (NINVRETSF() - INVRETSF()))))))) + ((NINVRETSF() - INVRETSF()) and (NINVRETSF() - INVRETSF()) * null((1 - abs((arr((INVRETSF() and 10 and INVRETSF() * 10 / 9)) - (NINVRETSF() - INVRETSF()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETABR():
        """
        Plafonnement HAB retrocede
        """
        return (((min(arr((INVRETAB() and 5 and INVRETAB() * 5 / 3)), (NINVRETAB() - INVRETAB())) and min(arr((INVRETAB() and 5 and INVRETAB() * 5 / 3)), (NINVRETAB() - INVRETAB())) * (1 - null((1 - abs((arr((INVRETAB() and 5 and INVRETAB() * 5 / 3)) - (NINVRETAB() - INVRETAB()))))))) + ((NINVRETAB() - INVRETAB()) and (NINVRETAB() - INVRETAB()) * null((1 - abs((arr((INVRETAB() and 5 and INVRETAB() * 5 / 3)) - (NINVRETAB() - INVRETAB()))))))) and ((min(arr((INVRETAB() and 5 and INVRETAB() * 5 / 3)), (NINVRETAB() - INVRETAB())) and min(arr((INVRETAB() and 5 and INVRETAB() * 5 / 3)), (NINVRETAB() - INVRETAB())) * (1 - null((1 - abs((arr((INVRETAB() and 5 and INVRETAB() * 5 / 3)) - (NINVRETAB() - INVRETAB()))))))) + ((NINVRETAB() - INVRETAB()) and (NINVRETAB() - INVRETAB()) * null((1 - abs((arr((INVRETAB() and 5 and INVRETAB() * 5 / 3)) - (NINVRETAB() - INVRETAB()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETAGR():
        """
        Plafonnement HAG retrocede
        """
        return (((min(arr((INVRETAG() and 5 and INVRETAG() * 5 / 3)), (NINVRETAG() - INVRETAG())) and min(arr((INVRETAG() and 5 and INVRETAG() * 5 / 3)), (NINVRETAG() - INVRETAG())) * (1 - null((1 - abs((arr((INVRETAG() and 5 and INVRETAG() * 5 / 3)) - (NINVRETAG() - INVRETAG()))))))) + ((NINVRETAG() - INVRETAG()) and (NINVRETAG() - INVRETAG()) * null((1 - abs((arr((INVRETAG() and 5 and INVRETAG() * 5 / 3)) - (NINVRETAG() - INVRETAG()))))))) and ((min(arr((INVRETAG() and 5 and INVRETAG() * 5 / 3)), (NINVRETAG() - INVRETAG())) and min(arr((INVRETAG() and 5 and INVRETAG() * 5 / 3)), (NINVRETAG() - INVRETAG())) * (1 - null((1 - abs((arr((INVRETAG() and 5 and INVRETAG() * 5 / 3)) - (NINVRETAG() - INVRETAG()))))))) + ((NINVRETAG() - INVRETAG()) and (NINVRETAG() - INVRETAG()) * null((1 - abs((arr((INVRETAG() and 5 and INVRETAG() * 5 / 3)) - (NINVRETAG() - INVRETAG()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETAAR():
        """
        Plafonnement HAA retrocede
        """
        return (((min(arr((INVRETAA() and 10 and INVRETAA() * 10 / 9)), (NINVRETAA() - INVRETAA())) and min(arr((INVRETAA() and 10 and INVRETAA() * 10 / 9)), (NINVRETAA() - INVRETAA())) * (1 - null((1 - abs((arr((INVRETAA() and 10 and INVRETAA() * 10 / 9)) - (NINVRETAA() - INVRETAA()))))))) + ((NINVRETAA() - INVRETAA()) and (NINVRETAA() - INVRETAA()) * null((1 - abs((arr((INVRETAA() and 10 and INVRETAA() * 10 / 9)) - (NINVRETAA() - INVRETAA()))))))) and ((min(arr((INVRETAA() and 10 and INVRETAA() * 10 / 9)), (NINVRETAA() - INVRETAA())) and min(arr((INVRETAA() and 10 and INVRETAA() * 10 / 9)), (NINVRETAA() - INVRETAA())) * (1 - null((1 - abs((arr((INVRETAA() and 10 and INVRETAA() * 10 / 9)) - (NINVRETAA() - INVRETAA()))))))) + ((NINVRETAA() - INVRETAA()) and (NINVRETAA() - INVRETAA()) * null((1 - abs((arr((INVRETAA() and 10 and INVRETAA() * 10 / 9)) - (NINVRETAA() - INVRETAA()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETAFR():
        """
        Plafonnement HAF retrocede
        """
        return (((min(arr((INVRETAF() and 10 and INVRETAF() * 10 / 9)), (NINVRETAF() - INVRETAF())) and min(arr((INVRETAF() and 10 and INVRETAF() * 10 / 9)), (NINVRETAF() - INVRETAF())) * (1 - null((1 - abs((arr((INVRETAF() and 10 and INVRETAF() * 10 / 9)) - (NINVRETAF() - INVRETAF()))))))) + ((NINVRETAF() - INVRETAF()) and (NINVRETAF() - INVRETAF()) * null((1 - abs((arr((INVRETAF() and 10 and INVRETAF() * 10 / 9)) - (NINVRETAF() - INVRETAF()))))))) and ((min(arr((INVRETAF() and 10 and INVRETAF() * 10 / 9)), (NINVRETAF() - INVRETAF())) and min(arr((INVRETAF() and 10 and INVRETAF() * 10 / 9)), (NINVRETAF() - INVRETAF())) * (1 - null((1 - abs((arr((INVRETAF() and 10 and INVRETAF() * 10 / 9)) - (NINVRETAF() - INVRETAF()))))))) + ((NINVRETAF() - INVRETAF()) and (NINVRETAF() - INVRETAF()) * null((1 - abs((arr((INVRETAF() and 10 and INVRETAF() * 10 / 9)) - (NINVRETAF() - INVRETAF()))))))) * (1 - V_CNR()))

    @cache_result
    def TOTALPLAF2():
        """
        Montant total investissements outre mer plafond (taux 13 %)
        """
        return (INVRETPB() + INVRETPF() + INVRETPJ() + INVRETPA() + INVRETPE() + INVRETPI() + INVRETPY() + INVRETPX() + INVRETRG() + INVRETPD() + INVRETPH() + INVRETPL() + INVRETRI() + INVRETSB() + INVRETSG() + INVRETSA() + INVRETSF() + INVRETSC() + INVRETSH() + INVRETSE() + INVRETSJ() + INVRETAB() + INVRETAG() + INVRETAA() + INVRETAF() + INVRETAC() + INVRETAH() + INVRETAE() + INVRETAJ() + INVRETOI() + INVRETOJ() + INVRETOK() + INVRETOP() + INVRETOQ() + INVRETOR() + INVRETOE() + INVRETOF() + INVRETUB() + INVRETUC() + INVRETPBR() + INVRETPFR() + INVRETPJR() + INVRETPAR() + INVRETPER() + INVRETPIR() + INVRETPYR() + INVRETPXR() + INVRETSBR() + INVRETSGR() + INVRETSAR() + INVRETSFR() + INVRETABR() + INVRETAGR() + INVRETAAR() + INVRETAFR())

    @cache_result
    def INVRETRO():
        """
        Plafonnement 7RO
        """
        return (NINVRETRO() and NINVRETRO() * (1 - V_CNR()))

    @cache_result
    def INVRETRT():
        """
        Plafonnement 7RT
        """
        return (NINVRETRT() and NINVRETRT() * (1 - V_CNR()))

    @cache_result
    def INVRETRY():
        """
        Plafonnement 7RY
        """
        return (NINVRETRY() and NINVRETRY() * (1 - V_CNR()))

    @cache_result
    def INVRETNY():
        """
        Plafonnement 7NY
        """
        return (NINVRETNY() and NINVRETNY() * (1 - V_CNR()))

    @cache_result
    def INVRETSO():
        """
        Plafonnement HSO
        """
        return (NINVRETSO() and NINVRETSO() * (1 - V_CNR()))

    @cache_result
    def INVRETST():
        """
        Plafonnement HST
        """
        return (NINVRETST() and NINVRETST() * (1 - V_CNR()))

    @cache_result
    def INVRETSY():
        """
        Plafonnement HSY
        """
        return (NINVRETSY() and NINVRETSY() * (1 - V_CNR()))

    @cache_result
    def INVRETTD():
        """
        Plafonnement HTD
        """
        return (NINVRETTD() and NINVRETTD() * (1 - V_CNR()))

    @cache_result
    def INVRETAO():
        """
        Plafonnement HAO
        """
        return (NINVRETAO() and NINVRETAO() * (1 - V_CNR()))

    @cache_result
    def INVRETAT():
        """
        Plafonnement HAT
        """
        return (NINVRETAT() and NINVRETAT() * (1 - V_CNR()))

    @cache_result
    def INVRETAY():
        """
        Plafonnement HAY
        """
        return (NINVRETAY() and NINVRETAY() * (1 - V_CNR()))

    @cache_result
    def INVRETBG():
        """
        Plafonnement HBG
        """
        return (NINVRETBG() and NINVRETBG() * (1 - V_CNR()))

    @cache_result
    def INVRETUD():
        """
        Plafonnement HUD
        """
        return (min(NINVRETUD(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA() - INVRETUB() - INVRETUC()))) and min(NINVRETUD(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA() - INVRETUB() - INVRETUC()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUE():
        """
        Plafonnement HUE
        """
        return (min(NINVRETUE(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA() - INVRETUB() - INVRETUC() - INVRETUD()))) and min(NINVRETUE(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA() - INVRETUB() - INVRETUC() - INVRETUD()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUF():
        """
        Plafonnement HUF
        """
        return (min(NINVRETUF(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA() - INVRETUB() - INVRETUC() - INVRETUD() - INVRETUE()))) and min(NINVRETUF(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA() - INVRETUB() - INVRETUC() - INVRETUD() - INVRETUE()))) * (1 - V_CNR()))

    @cache_result
    def INVRETUG():
        """
        Plafonnement HUG
        """
        return (min(NINVRETUG(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA() - INVRETUB() - INVRETUC() - INVRETUD() - INVRETUE() - INVRETUF()))) and min(NINVRETUG(), max(0, (PLAF_INVDOM4 - INVRETSOC() - INVRETENT() - INVRETQL() - INVRETQM() - INVRETQD() - INVRETOB() - INVRETOC() - INVRETOI() - INVRETOJ() - INVRETOK() - INVRETOM() - INVRETON() - INVRETOP() - INVRETOQ() - INVRETOR() - INVRETOT() - INVRETOU() - INVRETOV() - INVRETOW() - INVRETOD() - INVRETOE() - INVRETOF() - INVRETOG() - INVRETOX() - INVRETOY() - INVRETOZ() - INVRETUA() - INVRETUB() - INVRETUC() - INVRETUD() - INVRETUE() - INVRETUF()))) * (1 - V_CNR()))

    @cache_result
    def INVRETRLR():
        """
        Plafonnement 7RL retrocede
        """
        return (((min(arr((INVRETRL() and 5 and INVRETRL() * 5 / 3)), (NINVRETRL() - INVRETRL())) and min(arr((INVRETRL() and 5 and INVRETRL() * 5 / 3)), (NINVRETRL() - INVRETRL())) * (1 - null((1 - abs((arr((INVRETRL() and 5 and INVRETRL() * 5 / 3)) - (NINVRETRL() - INVRETRL()))))))) + ((NINVRETRL() - INVRETRL()) and (NINVRETRL() - INVRETRL()) * null((1 - abs((arr((INVRETRL() and 5 and INVRETRL() * 5 / 3)) - (NINVRETRL() - INVRETRL()))))))) and ((min(arr((INVRETRL() and 5 and INVRETRL() * 5 / 3)), (NINVRETRL() - INVRETRL())) and min(arr((INVRETRL() and 5 and INVRETRL() * 5 / 3)), (NINVRETRL() - INVRETRL())) * (1 - null((1 - abs((arr((INVRETRL() and 5 and INVRETRL() * 5 / 3)) - (NINVRETRL() - INVRETRL()))))))) + ((NINVRETRL() - INVRETRL()) and (NINVRETRL() - INVRETRL()) * null((1 - abs((arr((INVRETRL() and 5 and INVRETRL() * 5 / 3)) - (NINVRETRL() - INVRETRL()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETRQR():
        """
        Plafonnement 7RQ retrocede
        """
        return (((min(arr((INVRETRQ() and 5 and INVRETRQ() * 5 / 3)), (NINVRETRQ() - INVRETRQ())) and min(arr((INVRETRQ() and 5 and INVRETRQ() * 5 / 3)), (NINVRETRQ() - INVRETRQ())) * (1 - null((1 - abs((arr((INVRETRQ() and 5 and INVRETRQ() * 5 / 3)) - (NINVRETRQ() - INVRETRQ()))))))) + ((NINVRETRQ() - INVRETRQ()) and (NINVRETRQ() - INVRETRQ()) * null((1 - abs((arr((INVRETRQ() and 5 and INVRETRQ() * 5 / 3)) - (NINVRETRQ() - INVRETRQ()))))))) and ((min(arr((INVRETRQ() and 5 and INVRETRQ() * 5 / 3)), (NINVRETRQ() - INVRETRQ())) and min(arr((INVRETRQ() and 5 and INVRETRQ() * 5 / 3)), (NINVRETRQ() - INVRETRQ())) * (1 - null((1 - abs((arr((INVRETRQ() and 5 and INVRETRQ() * 5 / 3)) - (NINVRETRQ() - INVRETRQ()))))))) + ((NINVRETRQ() - INVRETRQ()) and (NINVRETRQ() - INVRETRQ()) * null((1 - abs((arr((INVRETRQ() and 5 and INVRETRQ() * 5 / 3)) - (NINVRETRQ() - INVRETRQ()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETRVR():
        """
        Plafonnement 7RV retrocede
        """
        return (((min(arr((INVRETRV() and 5 and INVRETRV() * 5 / 3)), (NINVRETRV() - INVRETRV())) and min(arr((INVRETRV() and 5 and INVRETRV() * 5 / 3)), (NINVRETRV() - INVRETRV())) * (1 - null((1 - abs((arr((INVRETRV() and 5 and INVRETRV() * 5 / 3)) - (NINVRETRV() - INVRETRV()))))))) + ((NINVRETRV() - INVRETRV()) and (NINVRETRV() - INVRETRV()) * null((1 - abs((arr((INVRETRV() and 5 and INVRETRV() * 5 / 3)) - (NINVRETRV() - INVRETRV()))))))) and ((min(arr((INVRETRV() and 5 and INVRETRV() * 5 / 3)), (NINVRETRV() - INVRETRV())) and min(arr((INVRETRV() and 5 and INVRETRV() * 5 / 3)), (NINVRETRV() - INVRETRV())) * (1 - null((1 - abs((arr((INVRETRV() and 5 and INVRETRV() * 5 / 3)) - (NINVRETRV() - INVRETRV()))))))) + ((NINVRETRV() - INVRETRV()) and (NINVRETRV() - INVRETRV()) * null((1 - abs((arr((INVRETRV() and 5 and INVRETRV() * 5 / 3)) - (NINVRETRV() - INVRETRV()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETNVR():
        """
        Plafonnement 7NV retrocede
        """
        return (((min(arr((INVRETNV() and 5 and INVRETNV() * 5 / 3)), (NINVRETNV() - INVRETNV())) and min(arr((INVRETNV() and 5 and INVRETNV() * 5 / 3)), (NINVRETNV() - INVRETNV())) * (1 - null((1 - abs((arr((INVRETNV() and 5 and INVRETNV() * 5 / 3)) - (NINVRETNV() - INVRETNV()))))))) + ((NINVRETNV() - INVRETNV()) and (NINVRETNV() - INVRETNV()) * null((1 - abs((arr((INVRETNV() and 5 and INVRETNV() * 5 / 3)) - (NINVRETNV() - INVRETNV()))))))) and ((min(arr((INVRETNV() and 5 and INVRETNV() * 5 / 3)), (NINVRETNV() - INVRETNV())) and min(arr((INVRETNV() and 5 and INVRETNV() * 5 / 3)), (NINVRETNV() - INVRETNV())) * (1 - null((1 - abs((arr((INVRETNV() and 5 and INVRETNV() * 5 / 3)) - (NINVRETNV() - INVRETNV()))))))) + ((NINVRETNV() - INVRETNV()) and (NINVRETNV() - INVRETNV()) * null((1 - abs((arr((INVRETNV() and 5 and INVRETNV() * 5 / 3)) - (NINVRETNV() - INVRETNV()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETRKR():
        """
        Plafonnement 7RK retrocede
        """
        return (((min(arr((INVRETRK() and 10 and INVRETRK() * 10 / 9)), (NINVRETRK() - INVRETRK())) and min(arr((INVRETRK() and 10 and INVRETRK() * 10 / 9)), (NINVRETRK() - INVRETRK())) * (1 - null((1 - abs((arr((INVRETRK() and 10 and INVRETRK() * 10 / 9)) - (NINVRETRK() - INVRETRK()))))))) + ((NINVRETRK() - INVRETRK()) and (NINVRETRK() - INVRETRK()) * null((1 - abs((arr((INVRETRK() and 10 and INVRETRK() * 10 / 9)) - (NINVRETRK() - INVRETRK()))))))) and ((min(arr((INVRETRK() and 10 and INVRETRK() * 10 / 9)), (NINVRETRK() - INVRETRK())) and min(arr((INVRETRK() and 10 and INVRETRK() * 10 / 9)), (NINVRETRK() - INVRETRK())) * (1 - null((1 - abs((arr((INVRETRK() and 10 and INVRETRK() * 10 / 9)) - (NINVRETRK() - INVRETRK()))))))) + ((NINVRETRK() - INVRETRK()) and (NINVRETRK() - INVRETRK()) * null((1 - abs((arr((INVRETRK() and 10 and INVRETRK() * 10 / 9)) - (NINVRETRK() - INVRETRK()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETRPR():
        """
        Plafonnement 7RP retrocede
        """
        return (((min(arr((INVRETRP() and 10 and INVRETRP() * 10 / 9)), (NINVRETRP() - INVRETRP())) and min(arr((INVRETRP() and 10 and INVRETRP() * 10 / 9)), (NINVRETRP() - INVRETRP())) * (1 - null((1 - abs((arr((INVRETRP() and 10 and INVRETRP() * 10 / 9)) - (NINVRETRP() - INVRETRP()))))))) + ((NINVRETRP() - INVRETRP()) and (NINVRETRP() - INVRETRP()) * null((1 - abs((arr((INVRETRP() and 10 and INVRETRP() * 10 / 9)) - (NINVRETRP() - INVRETRP()))))))) and ((min(arr((INVRETRP() and 10 and INVRETRP() * 10 / 9)), (NINVRETRP() - INVRETRP())) and min(arr((INVRETRP() and 10 and INVRETRP() * 10 / 9)), (NINVRETRP() - INVRETRP())) * (1 - null((1 - abs((arr((INVRETRP() and 10 and INVRETRP() * 10 / 9)) - (NINVRETRP() - INVRETRP()))))))) + ((NINVRETRP() - INVRETRP()) and (NINVRETRP() - INVRETRP()) * null((1 - abs((arr((INVRETRP() and 10 and INVRETRP() * 10 / 9)) - (NINVRETRP() - INVRETRP()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETRUR():
        """
        Plafonnement HRU retrocede
        """
        return (((min(arr((INVRETRU() and 10 and INVRETRU() * 10 / 9)), (NINVRETRU() - INVRETRU())) and min(arr((INVRETRU() and 10 and INVRETRU() * 10 / 9)), (NINVRETRU() - INVRETRU())) * (1 - null((1 - abs((arr((INVRETRU() and 10 and INVRETRU() * 10 / 9)) - (NINVRETRU() - INVRETRU()))))))) + ((NINVRETRU() - INVRETRU()) and (NINVRETRU() - INVRETRU()) * null((1 - abs((arr((INVRETRU() and 10 and INVRETRU() * 10 / 9)) - (NINVRETRU() - INVRETRU()))))))) and ((min(arr((INVRETRU() and 10 and INVRETRU() * 10 / 9)), (NINVRETRU() - INVRETRU())) and min(arr((INVRETRU() and 10 and INVRETRU() * 10 / 9)), (NINVRETRU() - INVRETRU())) * (1 - null((1 - abs((arr((INVRETRU() and 10 and INVRETRU() * 10 / 9)) - (NINVRETRU() - INVRETRU()))))))) + ((NINVRETRU() - INVRETRU()) and (NINVRETRU() - INVRETRU()) * null((1 - abs((arr((INVRETRU() and 10 and INVRETRU() * 10 / 9)) - (NINVRETRU() - INVRETRU()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETNUR():
        """
        Plafonnement 7NU retrocede
        """
        return (((min(arr((INVRETNU() and 10 and INVRETNU() * 10 / 9)), (NINVRETNU() - INVRETNU())) and min(arr((INVRETNU() and 10 and INVRETNU() * 10 / 9)), (NINVRETNU() - INVRETNU())) * (1 - null((1 - abs((arr((INVRETNU() and 10 and INVRETNU() * 10 / 9)) - (NINVRETNU() - INVRETNU()))))))) + ((NINVRETNU() - INVRETNU()) and (NINVRETNU() - INVRETNU()) * null((1 - abs((arr((INVRETNU() and 10 and INVRETNU() * 10 / 9)) - (NINVRETNU() - INVRETNU()))))))) and ((min(arr((INVRETNU() and 10 and INVRETNU() * 10 / 9)), (NINVRETNU() - INVRETNU())) and min(arr((INVRETNU() and 10 and INVRETNU() * 10 / 9)), (NINVRETNU() - INVRETNU())) * (1 - null((1 - abs((arr((INVRETNU() and 10 and INVRETNU() * 10 / 9)) - (NINVRETNU() - INVRETNU()))))))) + ((NINVRETNU() - INVRETNU()) and (NINVRETNU() - INVRETNU()) * null((1 - abs((arr((INVRETNU() and 10 and INVRETNU() * 10 / 9)) - (NINVRETNU() - INVRETNU()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETSLR():
        """
        Plafonnement HSL retrocede
        """
        return (((min(arr((INVRETSL() and 5 and INVRETSL() * 5 / 3)), (NINVRETSL() - INVRETSL())) and min(arr((INVRETSL() and 5 and INVRETSL() * 5 / 3)), (NINVRETSL() - INVRETSL())) * (1 - null((1 - abs((arr((INVRETSL() and 5 and INVRETSL() * 5 / 3)) - (NINVRETSL() - INVRETSL()))))))) + ((NINVRETSL() - INVRETSL()) and (NINVRETSL() - INVRETSL()) * null((1 - abs((arr((INVRETSL() and 5 and INVRETSL() * 5 / 3)) - (NINVRETSL() - INVRETSL()))))))) and ((min(arr((INVRETSL() and 5 and INVRETSL() * 5 / 3)), (NINVRETSL() - INVRETSL())) and min(arr((INVRETSL() and 5 and INVRETSL() * 5 / 3)), (NINVRETSL() - INVRETSL())) * (1 - null((1 - abs((arr((INVRETSL() and 5 and INVRETSL() * 5 / 3)) - (NINVRETSL() - INVRETSL()))))))) + ((NINVRETSL() - INVRETSL()) and (NINVRETSL() - INVRETSL()) * null((1 - abs((arr((INVRETSL() and 5 and INVRETSL() * 5 / 3)) - (NINVRETSL() - INVRETSL()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETSQR():
        """
        Plafonnement HSQ retrocede
        """
        return (((min(arr((INVRETSQ() and 5 and INVRETSQ() * 5 / 3)), (NINVRETSQ() - INVRETSQ())) and min(arr((INVRETSQ() and 5 and INVRETSQ() * 5 / 3)), (NINVRETSQ() - INVRETSQ())) * (1 - null((1 - abs((arr((INVRETSQ() and 5 and INVRETSQ() * 5 / 3)) - (NINVRETSQ() - INVRETSQ()))))))) + ((NINVRETSQ() - INVRETSQ()) and (NINVRETSQ() - INVRETSQ()) * null((1 - abs((arr((INVRETSQ() and 5 and INVRETSQ() * 5 / 3)) - (NINVRETSQ() - INVRETSQ()))))))) and ((min(arr((INVRETSQ() and 5 and INVRETSQ() * 5 / 3)), (NINVRETSQ() - INVRETSQ())) and min(arr((INVRETSQ() and 5 and INVRETSQ() * 5 / 3)), (NINVRETSQ() - INVRETSQ())) * (1 - null((1 - abs((arr((INVRETSQ() and 5 and INVRETSQ() * 5 / 3)) - (NINVRETSQ() - INVRETSQ()))))))) + ((NINVRETSQ() - INVRETSQ()) and (NINVRETSQ() - INVRETSQ()) * null((1 - abs((arr((INVRETSQ() and 5 and INVRETSQ() * 5 / 3)) - (NINVRETSQ() - INVRETSQ()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETSVR():
        """
        Plafonnement HSV retrocede
        """
        return (((min(arr((INVRETSV() and 5 and INVRETSV() * 5 / 3)), (NINVRETSV() - INVRETSV())) and min(arr((INVRETSV() and 5 and INVRETSV() * 5 / 3)), (NINVRETSV() - INVRETSV())) * (1 - null((1 - abs((arr((INVRETSV() and 5 and INVRETSV() * 5 / 3)) - (NINVRETSV() - INVRETSV()))))))) + ((NINVRETSV() - INVRETSV()) and (NINVRETSV() - INVRETSV()) * null((1 - abs((arr((INVRETSV() and 5 and INVRETSV() * 5 / 3)) - (NINVRETSV() - INVRETSV()))))))) and ((min(arr((INVRETSV() and 5 and INVRETSV() * 5 / 3)), (NINVRETSV() - INVRETSV())) and min(arr((INVRETSV() and 5 and INVRETSV() * 5 / 3)), (NINVRETSV() - INVRETSV())) * (1 - null((1 - abs((arr((INVRETSV() and 5 and INVRETSV() * 5 / 3)) - (NINVRETSV() - INVRETSV()))))))) + ((NINVRETSV() - INVRETSV()) and (NINVRETSV() - INVRETSV()) * null((1 - abs((arr((INVRETSV() and 5 and INVRETSV() * 5 / 3)) - (NINVRETSV() - INVRETSV()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETTAR():
        """
        Plafonnement HTA retrocede
        """
        return (((min(arr((INVRETTA() and 5 and INVRETTA() * 5 / 3)), (NINVRETTA() - INVRETTA())) and min(arr((INVRETTA() and 5 and INVRETTA() * 5 / 3)), (NINVRETTA() - INVRETTA())) * (1 - null((1 - abs((arr((INVRETTA() and 5 and INVRETTA() * 5 / 3)) - (NINVRETTA() - INVRETTA()))))))) + ((NINVRETTA() - INVRETTA()) and (NINVRETTA() - INVRETTA()) * null((1 - abs((arr((INVRETTA() and 5 and INVRETTA() * 5 / 3)) - (NINVRETTA() - INVRETTA()))))))) and ((min(arr((INVRETTA() and 5 and INVRETTA() * 5 / 3)), (NINVRETTA() - INVRETTA())) and min(arr((INVRETTA() and 5 and INVRETTA() * 5 / 3)), (NINVRETTA() - INVRETTA())) * (1 - null((1 - abs((arr((INVRETTA() and 5 and INVRETTA() * 5 / 3)) - (NINVRETTA() - INVRETTA()))))))) + ((NINVRETTA() - INVRETTA()) and (NINVRETTA() - INVRETTA()) * null((1 - abs((arr((INVRETTA() and 5 and INVRETTA() * 5 / 3)) - (NINVRETTA() - INVRETTA()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETSKR():
        """
        Plafonnement HSK retrocede
        """
        return (((min(arr((INVRETSK() and 10 and INVRETSK() * 10 / 9)), (NINVRETSK() - INVRETSK())) and min(arr((INVRETSK() and 10 and INVRETSK() * 10 / 9)), (NINVRETSK() - INVRETSK())) * (1 - null((1 - abs((arr((INVRETSK() and 10 and INVRETSK() * 10 / 9)) - (NINVRETSK() - INVRETSK()))))))) + ((NINVRETSK() - INVRETSK()) and (NINVRETSK() - INVRETSK()) * null((1 - abs((arr((INVRETSK() and 10 and INVRETSK() * 10 / 9)) - (NINVRETSK() - INVRETSK()))))))) and ((min(arr((INVRETSK() and 10 and INVRETSK() * 10 / 9)), (NINVRETSK() - INVRETSK())) and min(arr((INVRETSK() and 10 and INVRETSK() * 10 / 9)), (NINVRETSK() - INVRETSK())) * (1 - null((1 - abs((arr((INVRETSK() and 10 and INVRETSK() * 10 / 9)) - (NINVRETSK() - INVRETSK()))))))) + ((NINVRETSK() - INVRETSK()) and (NINVRETSK() - INVRETSK()) * null((1 - abs((arr((INVRETSK() and 10 and INVRETSK() * 10 / 9)) - (NINVRETSK() - INVRETSK()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETSPR():
        """
        Plafonnement HSP retrocede
        """
        return (((min(arr((INVRETSP() and 10 and INVRETSP() * 10 / 9)), (NINVRETSP() - INVRETSP())) and min(arr((INVRETSP() and 10 and INVRETSP() * 10 / 9)), (NINVRETSP() - INVRETSP())) * (1 - null((1 - abs((arr((INVRETSP() and 10 and INVRETSP() * 10 / 9)) - (NINVRETSP() - INVRETSP()))))))) + ((NINVRETSP() - INVRETSP()) and (NINVRETSP() - INVRETSP()) * null((1 - abs((arr((INVRETSP() and 10 and INVRETSP() * 10 / 9)) - (NINVRETSP() - INVRETSP()))))))) and ((min(arr((INVRETSP() and 10 and INVRETSP() * 10 / 9)), (NINVRETSP() - INVRETSP())) and min(arr((INVRETSP() and 10 and INVRETSP() * 10 / 9)), (NINVRETSP() - INVRETSP())) * (1 - null((1 - abs((arr((INVRETSP() and 10 and INVRETSP() * 10 / 9)) - (NINVRETSP() - INVRETSP()))))))) + ((NINVRETSP() - INVRETSP()) and (NINVRETSP() - INVRETSP()) * null((1 - abs((arr((INVRETSP() and 10 and INVRETSP() * 10 / 9)) - (NINVRETSP() - INVRETSP()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETSUR():
        """
        Plafonnement HSU retrocede
        """
        return (((min(arr((INVRETSU() and 10 and INVRETSU() * 10 / 9)), (NINVRETSU() - INVRETSU())) and min(arr((INVRETSU() and 10 and INVRETSU() * 10 / 9)), (NINVRETSU() - INVRETSU())) * (1 - null((1 - abs((arr((INVRETSU() and 10 and INVRETSU() * 10 / 9)) - (NINVRETSU() - INVRETSU()))))))) + ((NINVRETSU() - INVRETSU()) and (NINVRETSU() - INVRETSU()) * null((1 - abs((arr((INVRETSU() and 10 and INVRETSU() * 10 / 9)) - (NINVRETSU() - INVRETSU()))))))) and ((min(arr((INVRETSU() and 10 and INVRETSU() * 10 / 9)), (NINVRETSU() - INVRETSU())) and min(arr((INVRETSU() and 10 and INVRETSU() * 10 / 9)), (NINVRETSU() - INVRETSU())) * (1 - null((1 - abs((arr((INVRETSU() and 10 and INVRETSU() * 10 / 9)) - (NINVRETSU() - INVRETSU()))))))) + ((NINVRETSU() - INVRETSU()) and (NINVRETSU() - INVRETSU()) * null((1 - abs((arr((INVRETSU() and 10 and INVRETSU() * 10 / 9)) - (NINVRETSU() - INVRETSU()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETSZR():
        """
        Plafonnement HSZ retrocede
        """
        return (((min(arr((INVRETSZ() and 10 and INVRETSZ() * 10 / 9)), (NINVRETSZ() - INVRETSZ())) and min(arr((INVRETSZ() and 10 and INVRETSZ() * 10 / 9)), (NINVRETSZ() - INVRETSZ())) * (1 - null((1 - abs((arr((INVRETSZ() and 10 and INVRETSZ() * 10 / 9)) - (NINVRETSZ() - INVRETSZ()))))))) + ((NINVRETSZ() - INVRETSZ()) and (NINVRETSZ() - INVRETSZ()) * null((1 - abs((arr((INVRETSZ() and 10 and INVRETSZ() * 10 / 9)) - (NINVRETSZ() - INVRETSZ()))))))) and ((min(arr((INVRETSZ() and 10 and INVRETSZ() * 10 / 9)), (NINVRETSZ() - INVRETSZ())) and min(arr((INVRETSZ() and 10 and INVRETSZ() * 10 / 9)), (NINVRETSZ() - INVRETSZ())) * (1 - null((1 - abs((arr((INVRETSZ() and 10 and INVRETSZ() * 10 / 9)) - (NINVRETSZ() - INVRETSZ()))))))) + ((NINVRETSZ() - INVRETSZ()) and (NINVRETSZ() - INVRETSZ()) * null((1 - abs((arr((INVRETSZ() and 10 and INVRETSZ() * 10 / 9)) - (NINVRETSZ() - INVRETSZ()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETALR():
        """
        Plafonnement HAL retrocede
        """
        return (((min(arr((INVRETAL() and 5 and INVRETAL() * 5 / 3)), (NINVRETAL() - INVRETAL())) and min(arr((INVRETAL() and 5 and INVRETAL() * 5 / 3)), (NINVRETAL() - INVRETAL())) * (1 - null((1 - abs((arr((INVRETAL() and 5 and INVRETAL() * 5 / 3)) - (NINVRETAL() - INVRETAL()))))))) + ((NINVRETAL() - INVRETAL()) and (NINVRETAL() - INVRETAL()) * null((1 - abs((arr((INVRETAL() and 5 and INVRETAL() * 5 / 3)) - (NINVRETAL() - INVRETAL()))))))) and ((min(arr((INVRETAL() and 5 and INVRETAL() * 5 / 3)), (NINVRETAL() - INVRETAL())) and min(arr((INVRETAL() and 5 and INVRETAL() * 5 / 3)), (NINVRETAL() - INVRETAL())) * (1 - null((1 - abs((arr((INVRETAL() and 5 and INVRETAL() * 5 / 3)) - (NINVRETAL() - INVRETAL()))))))) + ((NINVRETAL() - INVRETAL()) and (NINVRETAL() - INVRETAL()) * null((1 - abs((arr((INVRETAL() and 5 and INVRETAL() * 5 / 3)) - (NINVRETAL() - INVRETAL()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETAQR():
        """
        Plafonnement HAQ retrocede
        """
        return (((min(arr((INVRETAQ() and 5 and INVRETAQ() * 5 / 3)), (NINVRETAQ() - INVRETAQ())) and min(arr((INVRETAQ() and 5 and INVRETAQ() * 5 / 3)), (NINVRETAQ() - INVRETAQ())) * (1 - null((1 - abs((arr((INVRETAQ() and 5 and INVRETAQ() * 5 / 3)) - (NINVRETAQ() - INVRETAQ()))))))) + ((NINVRETAQ() - INVRETAQ()) and (NINVRETAQ() - INVRETAQ()) * null((1 - abs((arr((INVRETAQ() and 5 and INVRETAQ() * 5 / 3)) - (NINVRETAQ() - INVRETAQ()))))))) and ((min(arr((INVRETAQ() and 5 and INVRETAQ() * 5 / 3)), (NINVRETAQ() - INVRETAQ())) and min(arr((INVRETAQ() and 5 and INVRETAQ() * 5 / 3)), (NINVRETAQ() - INVRETAQ())) * (1 - null((1 - abs((arr((INVRETAQ() and 5 and INVRETAQ() * 5 / 3)) - (NINVRETAQ() - INVRETAQ()))))))) + ((NINVRETAQ() - INVRETAQ()) and (NINVRETAQ() - INVRETAQ()) * null((1 - abs((arr((INVRETAQ() and 5 and INVRETAQ() * 5 / 3)) - (NINVRETAQ() - INVRETAQ()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETAVR():
        """
        Plafonnement HAV retrocede
        """
        return (((min(arr((INVRETAV() and 5 and INVRETAV() * 5 / 3)), (NINVRETAV() - INVRETAV())) and min(arr((INVRETAV() and 5 and INVRETAV() * 5 / 3)), (NINVRETAV() - INVRETAV())) * (1 - null((1 - abs((arr((INVRETAV() and 5 and INVRETAV() * 5 / 3)) - (NINVRETAV() - INVRETAV()))))))) + ((NINVRETAV() - INVRETAV()) and (NINVRETAV() - INVRETAV()) * null((1 - abs((arr((INVRETAV() and 5 and INVRETAV() * 5 / 3)) - (NINVRETAV() - INVRETAV()))))))) and ((min(arr((INVRETAV() and 5 and INVRETAV() * 5 / 3)), (NINVRETAV() - INVRETAV())) and min(arr((INVRETAV() and 5 and INVRETAV() * 5 / 3)), (NINVRETAV() - INVRETAV())) * (1 - null((1 - abs((arr((INVRETAV() and 5 and INVRETAV() * 5 / 3)) - (NINVRETAV() - INVRETAV()))))))) + ((NINVRETAV() - INVRETAV()) and (NINVRETAV() - INVRETAV()) * null((1 - abs((arr((INVRETAV() and 5 and INVRETAV() * 5 / 3)) - (NINVRETAV() - INVRETAV()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETBBR():
        """
        Plafonnement HBB retrocede
        """
        return (((min(arr((INVRETBB() and 5 and INVRETBB() * 5 / 3)), (NINVRETBB() - INVRETBB())) and min(arr((INVRETBB() and 5 and INVRETBB() * 5 / 3)), (NINVRETBB() - INVRETBB())) * (1 - null((1 - abs((arr((INVRETBB() and 5 and INVRETBB() * 5 / 3)) - (NINVRETBB() - INVRETBB()))))))) + ((NINVRETBB() - INVRETBB()) and (NINVRETBB() - INVRETBB()) * null((1 - abs((arr((INVRETBB() and 5 and INVRETBB() * 5 / 3)) - (NINVRETBB() - INVRETBB()))))))) and ((min(arr((INVRETBB() and 5 and INVRETBB() * 5 / 3)), (NINVRETBB() - INVRETBB())) and min(arr((INVRETBB() and 5 and INVRETBB() * 5 / 3)), (NINVRETBB() - INVRETBB())) * (1 - null((1 - abs((arr((INVRETBB() and 5 and INVRETBB() * 5 / 3)) - (NINVRETBB() - INVRETBB()))))))) + ((NINVRETBB() - INVRETBB()) and (NINVRETBB() - INVRETBB()) * null((1 - abs((arr((INVRETBB() and 5 and INVRETBB() * 5 / 3)) - (NINVRETBB() - INVRETBB()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETAKR():
        """
        Plafonnement HAK retrocede
        """
        return (((min(arr((INVRETAK() and 10 and INVRETAK() * 10 / 9)), (NINVRETAK() - INVRETAK())) and min(arr((INVRETAK() and 10 and INVRETAK() * 10 / 9)), (NINVRETAK() - INVRETAK())) * (1 - null((1 - abs((arr((INVRETAK() and 10 and INVRETAK() * 10 / 9)) - (NINVRETAK() - INVRETAK()))))))) + ((NINVRETAK() - INVRETAK()) and (NINVRETAK() - INVRETAK()) * null((1 - abs((arr((INVRETAK() and 10 and INVRETAK() * 10 / 9)) - (NINVRETAK() - INVRETAK()))))))) and ((min(arr((INVRETAK() and 10 and INVRETAK() * 10 / 9)), (NINVRETAK() - INVRETAK())) and min(arr((INVRETAK() and 10 and INVRETAK() * 10 / 9)), (NINVRETAK() - INVRETAK())) * (1 - null((1 - abs((arr((INVRETAK() and 10 and INVRETAK() * 10 / 9)) - (NINVRETAK() - INVRETAK()))))))) + ((NINVRETAK() - INVRETAK()) and (NINVRETAK() - INVRETAK()) * null((1 - abs((arr((INVRETAK() and 10 and INVRETAK() * 10 / 9)) - (NINVRETAK() - INVRETAK()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETAPR():
        """
        Plafonnement HAP retrocede
        """
        return (((min(arr((INVRETAP() and 10 and INVRETAP() * 10 / 9)), (NINVRETAP() - INVRETAP())) and min(arr((INVRETAP() and 10 and INVRETAP() * 10 / 9)), (NINVRETAP() - INVRETAP())) * (1 - null((1 - abs((arr((INVRETAP() and 10 and INVRETAP() * 10 / 9)) - (NINVRETAP() - INVRETAP()))))))) + ((NINVRETAP() - INVRETAP()) and (NINVRETAP() - INVRETAP()) * null((1 - abs((arr((INVRETAP() and 10 and INVRETAP() * 10 / 9)) - (NINVRETAP() - INVRETAP()))))))) and ((min(arr((INVRETAP() and 10 and INVRETAP() * 10 / 9)), (NINVRETAP() - INVRETAP())) and min(arr((INVRETAP() and 10 and INVRETAP() * 10 / 9)), (NINVRETAP() - INVRETAP())) * (1 - null((1 - abs((arr((INVRETAP() and 10 and INVRETAP() * 10 / 9)) - (NINVRETAP() - INVRETAP()))))))) + ((NINVRETAP() - INVRETAP()) and (NINVRETAP() - INVRETAP()) * null((1 - abs((arr((INVRETAP() and 10 and INVRETAP() * 10 / 9)) - (NINVRETAP() - INVRETAP()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETAUR():
        """
        Plafonnement HAU retrocede
        """
        return (((min(arr((INVRETAU() and 10 and INVRETAU() * 10 / 9)), (NINVRETAU() - INVRETAU())) and min(arr((INVRETAU() and 10 and INVRETAU() * 10 / 9)), (NINVRETAU() - INVRETAU())) * (1 - null((1 - abs((arr((INVRETAU() and 10 and INVRETAU() * 10 / 9)) - (NINVRETAU() - INVRETAU()))))))) + ((NINVRETAU() - INVRETAU()) and (NINVRETAU() - INVRETAU()) * null((1 - abs((arr((INVRETAU() and 10 and INVRETAU() * 10 / 9)) - (NINVRETAU() - INVRETAU()))))))) and ((min(arr((INVRETAU() and 10 and INVRETAU() * 10 / 9)), (NINVRETAU() - INVRETAU())) and min(arr((INVRETAU() and 10 and INVRETAU() * 10 / 9)), (NINVRETAU() - INVRETAU())) * (1 - null((1 - abs((arr((INVRETAU() and 10 and INVRETAU() * 10 / 9)) - (NINVRETAU() - INVRETAU()))))))) + ((NINVRETAU() - INVRETAU()) and (NINVRETAU() - INVRETAU()) * null((1 - abs((arr((INVRETAU() and 10 and INVRETAU() * 10 / 9)) - (NINVRETAU() - INVRETAU()))))))) * (1 - V_CNR()))

    @cache_result
    def INVRETBAR():
        """
        Plafonnement HBA retrocede
        """
        return (((min(arr((INVRETBA() and 10 and INVRETBA() * 10 / 9)), (NINVRETBA() - INVRETBA())) and min(arr((INVRETBA() and 10 and INVRETBA() * 10 / 9)), (NINVRETBA() - INVRETBA())) * (1 - null((1 - abs((arr((INVRETBA() and 10 and INVRETBA() * 10 / 9)) - (NINVRETBA() - INVRETBA()))))))) + ((NINVRETBA() - INVRETBA()) and (NINVRETBA() - INVRETBA()) * null((1 - abs((arr((INVRETBA() and 10 and INVRETBA() * 10 / 9)) - (NINVRETBA() - INVRETBA()))))))) and ((min(arr((INVRETBA() and 10 and INVRETBA() * 10 / 9)), (NINVRETBA() - INVRETBA())) and min(arr((INVRETBA() and 10 and INVRETBA() * 10 / 9)), (NINVRETBA() - INVRETBA())) * (1 - null((1 - abs((arr((INVRETBA() and 10 and INVRETBA() * 10 / 9)) - (NINVRETBA() - INVRETBA()))))))) + ((NINVRETBA() - INVRETBA()) and (NINVRETBA() - INVRETBA()) * null((1 - abs((arr((INVRETBA() and 10 and INVRETBA() * 10 / 9)) - (NINVRETBA() - INVRETBA()))))))) * (1 - V_CNR()))

    @cache_result
    def TOTALPLAF3():
        """
        Montant total investissements outre mer plafond (taux 11 %)
        """
        return (INVRETRL() + INVRETRQ() + INVRETRV() + INVRETNV() + INVRETRK() + INVRETRP() + INVRETRU() + INVRETNU() + INVRETRM() + INVRETRR() + INVRETRW() + INVRETNW() + INVRETRO() + INVRETRT() + INVRETRY() + INVRETNY() + INVRETSL() + INVRETSQ() + INVRETSV() + INVRETTA() + INVRETSK() + INVRETSP() + INVRETSU() + INVRETSZ() + INVRETSM() + INVRETSR() + INVRETSW() + INVRETTB() + INVRETSO() + INVRETST() + INVRETSY() + INVRETTD() + INVRETAL() + INVRETAQ() + INVRETAV() + INVRETBB() + INVRETAK() + INVRETAP() + INVRETAU() + INVRETBA() + INVRETAM() + INVRETAR() + INVRETAW() + INVRETBE() + INVRETAO() + INVRETAT() + INVRETAY() + INVRETBG() + INVRETOT() + INVRETOU() + INVRETOV() + INVRETOW() + INVRETOG() + INVRETOX() + INVRETOY() + INVRETOZ() + INVRETUD() + INVRETUE() + INVRETUF() + INVRETUG() + INVRETRLR() + INVRETRQR() + INVRETRVR() + INVRETNVR() + INVRETRKR() + INVRETRPR() + INVRETRUR() + INVRETNUR() + INVRETSLR() + INVRETSQR() + INVRETSVR() + INVRETTAR() + INVRETSKR() + INVRETSPR() + INVRETSUR() + INVRETSZR() + INVRETALR() + INVRETAQR() + INVRETAVR() + INVRETBBR() + INVRETAKR() + INVRETAPR() + INVRETAUR() + INVRETBAR())

    @cache_result
    def INDPLAF1():
        """
        Indicateur montant total invest. outre mer plafond (taux 15 %)
        """
        return positif((RNIDOM1() - TOTALPLAF1()))

    @cache_result
    def INDPLAF2():
        """
        Indicateur montant total invest. outre mer plafond (taux 13 %)
        """
        return positif((RNIDOM2() - TOTALPLAF2() - TOTALPLAFA()))

    @cache_result
    def INDPLAF3():
        """
        Indicateur montant total invest. outre mer plafond (taux 11 %)
        """
        return positif((RNIDOM3() - TOTALPLAF3() - TOTALPLAFA() - TOTALPLAFB()))

    @cache_result
    def INDPLAF():
        """
        Indicateur montant total investissements outre mer plafond
        """
        return (positif((TOTALPLAFA() + TOTALPLAFB() + TOTALPLAFC() - TOTALPLAF1() - TOTALPLAF2() - TOTALPLAF3())) and positif((INDPLAF1() + INDPLAF2() + INDPLAF3())) and positif((TOTALPLAFA() + TOTALPLAFB() + TOTALPLAFC() - TOTALPLAF1() - TOTALPLAF2() - TOTALPLAF3())) * positif((INDPLAF1() + INDPLAF2() + INDPLAF3())) * positif(saisie_variables.get('OPTPLAF15', 0)))

    @cache_result
    def RLOG09():
        """
        Reduction HQL
        """
        return (max(min(((INVRETQL() and INVRETQL() * (1 - INDPLAF())) + (INVRETQLA() and INVRETQLA() * INDPLAF())), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04() - RLOG05() - RLOG06() - RLOG07() - RLOG08())), 0) and max(min(((INVRETQL() and INVRETQL() * (1 - INDPLAF())) + (INVRETQLA() and INVRETQLA() * INDPLAF())), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04() - RLOG05() - RLOG06() - RLOG07() - RLOG08())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG10():
        """
        Reduction HQM
        """
        return (max(min(((INVRETQM() and INVRETQM() * (1 - INDPLAF())) + (INVRETQMA() and INVRETQMA() * INDPLAF())), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04() - RLOG05() - RLOG06() - RLOG07() - RLOG08() - RLOG09())), 0) and max(min(((INVRETQM() and INVRETQM() * (1 - INDPLAF())) + (INVRETQMA() and INVRETQMA() * INDPLAF())), (RRI1() - RLOG01() - RLOG02() - RLOG03() - RLOG04() - RLOG05() - RLOG06() - RLOG07() - RLOG08() - RLOG09())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG11():
        """
        Reduction HQD
        """
        return (max(min(((INVRETQD() and INVRETQD() * (1 - INDPLAF())) + (INVRETQDA() and INVRETQDA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10()]))), 0) and max(min(((INVRETQD() and INVRETQD() * (1 - INDPLAF())) + (INVRETQDA() and INVRETQDA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG12():
        """
        Reduction HOB
        """
        return (max(min(((INVRETOB() and INVRETOB() * (1 - INDPLAF())) + (INVRETOBA() and INVRETOBA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11()]))), 0) and max(min(((INVRETOB() and INVRETOB() * (1 - INDPLAF())) + (INVRETOBA() and INVRETOBA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG13():
        """
        Reduction HOC
        """
        return (max(min(((INVRETOC() and INVRETOC() * (1 - INDPLAF())) + (INVRETOCA() and INVRETOCA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12()]))), 0) and max(min(((INVRETOC() and INVRETOC() * (1 - INDPLAF())) + (INVRETOCA() and INVRETOCA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG14():
        """
        Reduction HOI
        """
        return (max(min(((INVRETOI() and INVRETOI() * (1 - INDPLAF())) + (INVRETOIA() and INVRETOIA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13()]))), 0) and max(min(((INVRETOI() and INVRETOI() * (1 - INDPLAF())) + (INVRETOIA() and INVRETOIA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG15():
        """
        Reduction HOJ
        """
        return (max(min(((INVRETOJ() and INVRETOJ() * (1 - INDPLAF())) + (INVRETOJA() and INVRETOJA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14()]))), 0) and max(min(((INVRETOJ() and INVRETOJ() * (1 - INDPLAF())) + (INVRETOJA() and INVRETOJA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG16():
        """
        Reduction HOK
        """
        return (max(min(((INVRETOK() and INVRETOK() * (1 - INDPLAF())) + (INVRETOKA() and INVRETOKA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15()]))), 0) and max(min(((INVRETOK() and INVRETOK() * (1 - INDPLAF())) + (INVRETOKA() and INVRETOKA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG17():
        """
        Reduction HOM
        """
        return (max(min(((INVRETOM() and INVRETOM() * (1 - INDPLAF())) + (INVRETOMA() and INVRETOMA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16()]))), 0) and max(min(((INVRETOM() and INVRETOM() * (1 - INDPLAF())) + (INVRETOMA() and INVRETOMA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG18():
        """
        Reduction HON
        """
        return (max(min(((INVRETON() and INVRETON() * (1 - INDPLAF())) + (INVRETONA() and INVRETONA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17()]))), 0) and max(min(((INVRETON() and INVRETON() * (1 - INDPLAF())) + (INVRETONA() and INVRETONA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG19():
        """
        Reduction HOP
        """
        return (max(min(((INVRETOP() and INVRETOP() * (1 - INDPLAF())) + (INVRETOPA() and INVRETOPA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18()]))), 0) and max(min(((INVRETOP() and INVRETOP() * (1 - INDPLAF())) + (INVRETOPA() and INVRETOPA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG20():
        """
        Reduction HOQ
        """
        return (max(min(((INVRETOQ() and INVRETOQ() * (1 - INDPLAF())) + (INVRETOQA() and INVRETOQA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19()]))), 0) and max(min(((INVRETOQ() and INVRETOQ() * (1 - INDPLAF())) + (INVRETOQA() and INVRETOQA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG21():
        """
        Reduction HOR
        """
        return (max(min(((INVRETOR() and INVRETOR() * (1 - INDPLAF())) + (INVRETORA() and INVRETORA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20()]))), 0) and max(min(((INVRETOR() and INVRETOR() * (1 - INDPLAF())) + (INVRETORA() and INVRETORA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG22():
        """
        Reduction HOT
        """
        return (max(min(((INVRETOT() and INVRETOT() * (1 - INDPLAF())) + (INVRETOTA() and INVRETOTA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21()]))), 0) and max(min(((INVRETOT() and INVRETOT() * (1 - INDPLAF())) + (INVRETOTA() and INVRETOTA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG23():
        """
        Reduction HOU
        """
        return (max(min(((INVRETOU() and INVRETOU() * (1 - INDPLAF())) + (INVRETOUA() and INVRETOUA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22()]))), 0) and max(min(((INVRETOU() and INVRETOU() * (1 - INDPLAF())) + (INVRETOUA() and INVRETOUA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG24():
        """
        Reduction HOV
        """
        return (max(min(((INVRETOV() and INVRETOV() * (1 - INDPLAF())) + (INVRETOVA() and INVRETOVA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23()]))), 0) and max(min(((INVRETOV() and INVRETOV() * (1 - INDPLAF())) + (INVRETOVA() and INVRETOVA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG25():
        """
        Reduction HOW
        """
        return (max(min(((INVRETOW() and INVRETOW() * (1 - INDPLAF())) + (INVRETOWA() and INVRETOWA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24()]))), 0) and max(min(((INVRETOW() and INVRETOW() * (1 - INDPLAF())) + (INVRETOWA() and INVRETOWA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG26():
        """
        Reduction HOD
        """
        return (max(min(((INVRETOD() and INVRETOD() * (1 - INDPLAF())) + (INVRETODA() and INVRETODA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25()]))), 0) and max(min(((INVRETOD() and INVRETOD() * (1 - INDPLAF())) + (INVRETODA() and INVRETODA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG27():
        """
        Reduction HOE
        """
        return (max(min(((INVRETOE() and INVRETOE() * (1 - INDPLAF())) + (INVRETOEA() and INVRETOEA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26()]))), 0) and max(min(((INVRETOE() and INVRETOE() * (1 - INDPLAF())) + (INVRETOEA() and INVRETOEA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG28():
        """
        Reduction HOF
        """
        return (max(min(((INVRETOF() and INVRETOF() * (1 - INDPLAF())) + (INVRETOFA() and INVRETOFA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27()]))), 0) and max(min(((INVRETOF() and INVRETOF() * (1 - INDPLAF())) + (INVRETOFA() and INVRETOFA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG29():
        """
        Reduction HOG
        """
        return (max(min(((INVRETOG() and INVRETOG() * (1 - INDPLAF())) + (INVRETOGA() and INVRETOGA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28()]))), 0) and max(min(((INVRETOG() and INVRETOG() * (1 - INDPLAF())) + (INVRETOGA() and INVRETOGA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG30():
        """
        Reduction HOX
        """
        return (max(min(((INVRETOX() and INVRETOX() * (1 - INDPLAF())) + (INVRETOXA() and INVRETOXA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29()]))), 0) and max(min(((INVRETOX() and INVRETOX() * (1 - INDPLAF())) + (INVRETOXA() and INVRETOXA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG31():
        """
        Reduction HOY
        """
        return (max(min(((INVRETOY() and INVRETOY() * (1 - INDPLAF())) + (INVRETOYA() and INVRETOYA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30()]))), 0) and max(min(((INVRETOY() and INVRETOY() * (1 - INDPLAF())) + (INVRETOYA() and INVRETOYA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG32():
        """
        Reduction HOZ
        """
        return (max(min(((INVRETOZ() and INVRETOZ() * (1 - INDPLAF())) + (INVRETOZA() and INVRETOZA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31()]))), 0) and max(min(((INVRETOZ() and INVRETOZ() * (1 - INDPLAF())) + (INVRETOZA() and INVRETOZA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG33():
        """
        Reduction HUA
        """
        return (max(min(((INVRETUA() and INVRETUA() * (1 - INDPLAF())) + (INVRETUAA() and INVRETUAA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32()]))), 0) and max(min(((INVRETUA() and INVRETUA() * (1 - INDPLAF())) + (INVRETUAA() and INVRETUAA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG34():
        """
        Reduction HUB
        """
        return (max(min(((INVRETUB() and INVRETUB() * (1 - INDPLAF())) + (INVRETUBA() and INVRETUBA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33()]))), 0) and max(min(((INVRETUB() and INVRETUB() * (1 - INDPLAF())) + (INVRETUBA() and INVRETUBA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG35():
        """
        Reduction HUC
        """
        return (max(min(((INVRETUC() and INVRETUC() * (1 - INDPLAF())) + (INVRETUCA() and INVRETUCA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33(), RLOG34()]))), 0) and max(min(((INVRETUC() and INVRETUC() * (1 - INDPLAF())) + (INVRETUCA() and INVRETUCA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33(), RLOG34()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG36():
        """
        Reduction HUD
        """
        return (max(min(((INVRETUD() and INVRETUD() * (1 - INDPLAF())) + (INVRETUDA() and INVRETUDA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33(), RLOG34(), RLOG35()]))), 0) and max(min(((INVRETUD() and INVRETUD() * (1 - INDPLAF())) + (INVRETUDA() and INVRETUDA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33(), RLOG34(), RLOG35()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG37():
        """
        Reduction HUE
        """
        return (max(min(((INVRETUE() and INVRETUE() * (1 - INDPLAF())) + (INVRETUEA() and INVRETUEA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33(), RLOG34(), RLOG35(), RLOG36()]))), 0) and max(min(((INVRETUE() and INVRETUE() * (1 - INDPLAF())) + (INVRETUEA() and INVRETUEA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33(), RLOG34(), RLOG35(), RLOG36()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG38():
        """
        Reduction HUF
        """
        return (max(min(((INVRETUF() and INVRETUF() * (1 - INDPLAF())) + (INVRETUFA() and INVRETUFA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33(), RLOG34(), RLOG35(), RLOG36(), RLOG37()]))), 0) and max(min(((INVRETUF() and INVRETUF() * (1 - INDPLAF())) + (INVRETUFA() and INVRETUFA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33(), RLOG34(), RLOG35(), RLOG36(), RLOG37()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOG39():
        """
        Reduction HUG
        """
        return (max(min(((INVRETUG() and INVRETUG() * (1 - INDPLAF())) + (INVRETUGA() and INVRETUGA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33(), RLOG34(), RLOG35(), RLOG36(), RLOG37(), RLOG38()]))), 0) and max(min(((INVRETUG() and INVRETUG() * (1 - INDPLAF())) + (INVRETUGA() and INVRETUGA() * INDPLAF())), (RRI1() - somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33(), RLOG34(), RLOG35(), RLOG36(), RLOG37(), RLOG38()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOGDOM_1():
        """
        pour alleger prog - Investissements outre mer logement - reduction
        """
        return (((1 - saisie_variables.get('V_INDTEO', 0)) and (1 - saisie_variables.get('V_INDTEO', 0)) * somme([RLOG01(), RLOG02(), RLOG03(), RLOG04(), RLOG05(), RLOG06(), RLOG07(), RLOG08(), RLOG09(), RLOG10(), RLOG11(), RLOG12(), RLOG13(), RLOG14(), RLOG15(), RLOG16(), RLOG17(), RLOG18(), RLOG19(), RLOG20(), RLOG21(), RLOG22(), RLOG23(), RLOG24(), RLOG25(), RLOG26(), RLOG27(), RLOG28(), RLOG29(), RLOG30(), RLOG31(), RLOG32(), RLOG33(), RLOG34(), RLOG35(), RLOG36(), RLOG37(), RLOG38(), RLOG39()])) + (saisie_variables.get('V_INDTEO', 0) and saisie_variables.get('V_INDTEO', 0) * (RLOG01() + RLOG02() + RLOG03() + RLOG04() + RLOG05() + RLOG06() + RLOG07() + RLOG08())))

    @cache_result
    def RLOGDOM():
        """
        Investissements outre mer logement - reduction
        """
        return ((RLOGDOM_1() and RLOGDOM_1() * (1 - base_variables['ART1731BIS'])) + (min(RLOGDOM_1(), (max((base_variables['RLOGDOM_P'] + base_variables['RLOGDOMP2']), (base_variables['RLOGDOM1731'] + 0)) and max((base_variables['RLOGDOM_P'] + base_variables['RLOGDOMP2']), (base_variables['RLOGDOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RLOGDOM_1(), (max((base_variables['RLOGDOM_P'] + base_variables['RLOGDOMP2']), (base_variables['RLOGDOM1731'] + 0)) and max((base_variables['RLOGDOM_P'] + base_variables['RLOGDOMP2']), (base_variables['RLOGDOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RCREAT_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min((RCREATEUR() + RCREATEURHANDI()), (RRI1() - RLOGDOM())), 0)

    @cache_result
    def RCREAT():
        """
        Reduction Createur repreneur entreprise
        """
        return max(0, ((RCREAT_1() and RCREAT_1() * (1 - base_variables['ART1731BIS'])) + (min(RCREAT_1(), (max((base_variables['RCREAT_P'] + base_variables['RCREATP2']), (base_variables['RCREAT1731'] + 0)) and max((base_variables['RCREAT_P'] + base_variables['RCREATP2']), (base_variables['RCREAT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCREAT_1(), (max((base_variables['RCREAT_P'] + base_variables['RCREATP2']), (base_variables['RCREAT1731'] + 0)) and max((base_variables['RCREAT_P'] + base_variables['RCREATP2']), (base_variables['RCREAT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RCOMP_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RFC(), (RRI1() - RLOGDOM() - RCREAT())), 0)

    @cache_result
    def RCOMP():
        """
        Frais de comptabilite
        """
        return max(0, ((RCOMP_1() and RCOMP_1() * (1 - base_variables['ART1731BIS'])) + (min(RCOMP_1(), (max((base_variables['RCOMP_P'] + base_variables['RCOMPP2']), (base_variables['RCOMP1731'] + 0)) and max((base_variables['RCOMP_P'] + base_variables['RCOMPP2']), (base_variables['RCOMP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCOMP_1(), (max((base_variables['RCOMP_P'] + base_variables['RCOMPP2']), (base_variables['RCOMP1731'] + 0)) and max((base_variables['RCOMP_P'] + base_variables['RCOMPP2']), (base_variables['RCOMP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RRETU_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RETUD(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP())), 0)

    @cache_result
    def RRETU():
        """
        Reduct. etudiants: montant retenu
        """
        return max(0, ((RRETU_1() and RRETU_1() * (1 - base_variables['ART1731BIS'])) + (min(RRETU_1(), (max((base_variables['RRETU_P'] + base_variables['RRETUP2']), (base_variables['RRETU1731'] + 0)) and max((base_variables['RRETU_P'] + base_variables['RRETUP2']), (base_variables['RRETU1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RRETU_1(), (max((base_variables['RRETU_P'] + base_variables['RRETUP2']), (base_variables['RRETU1731'] + 0)) and max((base_variables['RRETU_P'] + base_variables['RRETUP2']), (base_variables['RRETU1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RDONS_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RON(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU())), 0)

    @cache_result
    def RDONS():
        """
        Dons aux oeuvres
        """
        return max(0, ((RDONS_1() and RDONS_1() * (1 - base_variables['ART1731BIS'])) + (min(RDONS_1(), (max((base_variables['RDONS_P'] + base_variables['RDONSP2']), (base_variables['RDONS1731'] + 0)) and max((base_variables['RDONS_P'] + base_variables['RDONSP2']), (base_variables['RDONS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RDONS_1(), (max((base_variables['RDONS_P'] + base_variables['RDONSP2']), (base_variables['RDONS1731'] + 0)) and max((base_variables['RDONS_P'] + base_variables['RDONSP2']), (base_variables['RDONS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RDUFREPFI():
        """
        Ivt Duflot realise acheve 2013 - report -Reduction
        """
        return max(0, min(ADUFREPFI(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS())))

    @cache_result
    def RDUFLOGIH_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(0, min(RDUFLO_GIH(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFREPFI())))

    @cache_result
    def RDUFLOGIH():
        """
        Ivt Duflot realise acheve 2013 -Reduc apres imputation sur droits dus
        """
        return max(0, ((RDUFLOGIH_1() and RDUFLOGIH_1() * (1 - base_variables['ART1731BIS'])) + (min(RDUFLOGIH_1(), (max((base_variables['RDUFLOGIH_P'] + base_variables['RDUFLOGIHP2']), (base_variables['RDUFLOGIH1731'] + 0)) and max((base_variables['RDUFLOGIH_P'] + base_variables['RDUFLOGIHP2']), (base_variables['RDUFLOGIH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RDUFLOGIH_1(), (max((base_variables['RDUFLOGIH_P'] + base_variables['RDUFLOGIHP2']), (base_variables['RDUFLOGIH1731'] + 0)) and max((base_variables['RDUFLOGIH_P'] + base_variables['RDUFLOGIHP2']), (base_variables['RDUFLOGIH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RDUFLOEKL_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(0, min(RDUFLO_EKL(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFREPFI() - RDUFLOGIH())))

    @cache_result
    def RDUFLOEKL():
        """
        Ivt Duflot realise acheve 2014 -Reduc apres imputation sur droits dus
        """
        return max(0, (RDUFLOEKL_1() and RDUFLOEKL_1() * (1 - base_variables['ART1731BIS'])))

    @cache_result
    def RDUFLOTOT():
        """
        somme investissement Duflot 
        """
        return (RDUFREPFI() + RDUFLOGIH() + RDUFLOEKL())

    @cache_result
    def RPIQABCD_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(0, min(RPI_QABCD(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFREPFI() - RDUFLOGIH() - RDUFLOEKL())))

    @cache_result
    def RPIQABCD():
        """
        Ivt Pinel realise acheve 2014 -Reduc apres imputation sur droits dus
        """
        return max(0, (RPIQABCD_1() and RPIQABCD_1() * (1 - base_variables['ART1731BIS'])))

    @cache_result
    def RPINELTOT():
        """
        somme investissements PINEL
        """
        return RPIQABCD()

    @cache_result
    def ACELRREDLA():
        """
        Investissement Scellier report 2009 reduction - Avis Facture - Retenu 
        """
        return (((saisie_variables.get('CELRREDLA', 0) and saisie_variables.get('CELRREDLA', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLA', 0), (max((base_variables['ACELRREDLA_P'] + base_variables['ACELRREDLAP2']), (base_variables['ACELRREDLA1731'] + 0)) and max((base_variables['ACELRREDLA_P'] + base_variables['ACELRREDLAP2']), (base_variables['ACELRREDLA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLA', 0), (max((base_variables['ACELRREDLA_P'] + base_variables['ACELRREDLAP2']), (base_variables['ACELRREDLA1731'] + 0)) and max((base_variables['ACELRREDLA_P'] + base_variables['ACELRREDLAP2']), (base_variables['ACELRREDLA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLA', 0) and saisie_variables.get('CELRREDLA', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLA', 0), (max((base_variables['ACELRREDLA_P'] + base_variables['ACELRREDLAP2']), (base_variables['ACELRREDLA1731'] + 0)) and max((base_variables['ACELRREDLA_P'] + base_variables['ACELRREDLAP2']), (base_variables['ACELRREDLA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLA', 0), (max((base_variables['ACELRREDLA_P'] + base_variables['ACELRREDLAP2']), (base_variables['ACELRREDLA1731'] + 0)) and max((base_variables['ACELRREDLA_P'] + base_variables['ACELRREDLAP2']), (base_variables['ACELRREDLA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RNOUV_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RSN(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT())), 0)

    @cache_result
    def RNOUV():
        """
        Reduction Capital de societes nouvelles
        """
        return (((RNOUV_1() and RNOUV_1() * (1 - base_variables['ART1731BIS'])) + (min(RNOUV_1(), (max((base_variables['RNOUV_P'] + base_variables['RNOUVP2']), (base_variables['RNOUV1731'] + 0)) and max((base_variables['RNOUV_P'] + base_variables['RNOUVP2']), (base_variables['RNOUV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RNOUV_1(), (max((base_variables['RNOUV_P'] + base_variables['RNOUVP2']), (base_variables['RNOUV1731'] + 0)) and max((base_variables['RNOUV_P'] + base_variables['RNOUVP2']), (base_variables['RNOUV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((RNOUV_1() and RNOUV_1() * (1 - base_variables['ART1731BIS'])) + (min(RNOUV_1(), (max((base_variables['RNOUV_P'] + base_variables['RNOUVP2']), (base_variables['RNOUV1731'] + 0)) and max((base_variables['RNOUV_P'] + base_variables['RNOUVP2']), (base_variables['RNOUV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RNOUV_1(), (max((base_variables['RNOUV_P'] + base_variables['RNOUVP2']), (base_variables['RNOUV1731'] + 0)) and max((base_variables['RNOUV_P'] + base_variables['RNOUVP2']), (base_variables['RNOUV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def APLAFREPME4():
        """
        Report 2013 suite a plaf av fisc PME - Avis Facture - Retenu 
        """
        return (saisie_variables.get('COD7CY', 0) and positif(saisie_variables.get('COD7CY', 0)) and saisie_variables.get('COD7CY', 0) * positif(saisie_variables.get('COD7CY', 0)) * (1 - V_CNR()))

    @cache_result
    def RPLAFREPME4():
        """
        Report 2013 suite a plaf av fisc PME- reduction-Avis Facture- 7CY
        """
        return max(min(APLAFREPME4(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV())), 0)

    @cache_result
    def RFOR_1():
        """
        pour alleger prog - Reduction retenue pour investissement forestier
        """
        return max(min(RFOREST(), (IDOM11() - DEC11() - RCOTFOR() - RREPA() - RAIDE() - RDIFAGRI() - RFORET() - RFIPDOM() - RFIPC() - RCINE() - RRESTIMO() - RSOCREPR() - RRPRESCOMP() - RHEBE() - RSURV() - RINNO() - RSOUFIP() - RRIRENOV() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4())), 0)

    @cache_result
    def RFOR():
        """
        Reduction retenue pour investissement forestier
        """
        return max(0, ((RFOR_1() and RFOR_1() * (1 - base_variables['ART1731BIS'])) + (min(RFOR_1(), (max((base_variables['RFOR_P'] + base_variables['RFORP2']), (base_variables['RFOR1731'] + 0)) and max((base_variables['RFOR_P'] + base_variables['RFORP2']), (base_variables['RFOR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RFOR_1(), (max((base_variables['RFOR_P'] + base_variables['RFORP2']), (base_variables['RFOR1731'] + 0)) and max((base_variables['RFOR_P'] + base_variables['RFORP2']), (base_variables['RFOR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RTOURREP_1():
        """
        pour alleger prog - Reduction Investissements locatifs tourisme report
        """
        return max(min(arr((ATOURREP() and TX_REDIL25 and ATOURREP() * TX_REDIL25 / 100)), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR())), 0)

    @cache_result
    def RTOURREP():
        """
        Reduction Investissements locatifs tourisme report
        """
        return ((RTOURREP_1() and RTOURREP_1() * (1 - base_variables['ART1731BIS'])) + (min(RTOURREP_1(), (max((base_variables['RTOURREP_P'] + base_variables['RTOURREPP2']), (base_variables['RTOURREP1731'] + 0)) and max((base_variables['RTOURREP_P'] + base_variables['RTOURREPP2']), (base_variables['RTOURREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RTOURREP_1(), (max((base_variables['RTOURREP_P'] + base_variables['RTOURREPP2']), (base_variables['RTOURREP1731'] + 0)) and max((base_variables['RTOURREP_P'] + base_variables['RTOURREPP2']), (base_variables['RTOURREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RTOUHOTR_1():
        """
        pour alleger prog. -Invest. locatif residence hoteliere - Reduction
        """
        return (max(min(RIHOTR(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RTOURREP())), 0) and max(min(RIHOTR(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RTOURREP())), 0) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))))

    @cache_result
    def RTOUHOTR():
        """
        Investissement locatif residence hoteliere - Reduction
        """
        return ((RTOUHOTR_1() and RTOUHOTR_1() * (1 - base_variables['ART1731BIS'])) + (min(RTOUHOTR_1(), (max((base_variables['RTOUHOTR_P'] + base_variables['RTOUHOTRP2']), (base_variables['RTOUHOTR1731'] + 0)) and max((base_variables['RTOUHOTR_P'] + base_variables['RTOUHOTRP2']), (base_variables['RTOUHOTR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RTOUHOTR_1(), (max((base_variables['RTOUHOTR_P'] + base_variables['RTOUHOTRP2']), (base_variables['RTOUHOTR1731'] + 0)) and max((base_variables['RTOUHOTR_P'] + base_variables['RTOUHOTRP2']), (base_variables['RTOUHOTR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RTOUREPA_1():
        """
        pour alleger prog - Reduction Investissements locatifs tourisme report
        """
        return max(min(arr((ATOUREPA() and TX_REDIL20 and ATOUREPA() * TX_REDIL20 / 100)), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RTOURREP() - RTOUHOTR())), 0)

    @cache_result
    def RTOUREPA():
        """
        Reduction Investissements locatifs tourisme report
        """
        return ((RTOUREPA_1() and RTOUREPA_1() * (1 - base_variables['ART1731BIS'])) + (min(RTOUREPA_1(), (max((base_variables['RTOUREPA_P'] + base_variables['RTOUREPAP2']), (base_variables['RTOUREPA1731'] + 0)) and max((base_variables['RTOUREPA_P'] + base_variables['RTOUREPAP2']), (base_variables['RTOUREPA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RTOUREPA_1(), (max((base_variables['RTOUREPA_P'] + base_variables['RTOUREPAP2']), (base_variables['RTOUREPA1731'] + 0)) and max((base_variables['RTOUREPA_P'] + base_variables['RTOUREPAP2']), (base_variables['RTOUREPA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def REDUCAVTCEL():
        """
        Invest. Scellier 2012-somme des reduc avant scellier
        """
        return (RCOTFOR() + RREPA() + RAIDE() + RDIFAGRI() + RFORET() + RFIPDOM() + RFIPC() + RCINE() + RRESTIMO() + RSOCREPR() + RRPRESCOMP() + RHEBE() + RSURV() + RINNO() + RSOUFIP() + RRIRENOV() + RLOGDOM() + RCREAT() + RCOMP() + RRETU() + RDONS() + RDUFLOTOT() + RPINELTOT() + RNOUV() + RPLAFREPME4() + RFOR() + RTOURREP() + RTOUHOTR() + RTOUREPA())

    @cache_result
    def RCELRREDLA_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLA(), (IDOM11() - DEC11() - REDUCAVTCEL())), 0)

    @cache_result
    def ACELRREDLB():
        """
        Investissement Scellier report reduction - Avis Facture - Retenu 7LB
        """
        return (((saisie_variables.get('CELRREDLB', 0) and saisie_variables.get('CELRREDLB', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLB', 0), (max((base_variables['ACELRREDLB_P'] + base_variables['ACELRREDLBP2']), (base_variables['ACELRREDLB1731'] + 0)) and max((base_variables['ACELRREDLB_P'] + base_variables['ACELRREDLBP2']), (base_variables['ACELRREDLB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLB', 0), (max((base_variables['ACELRREDLB_P'] + base_variables['ACELRREDLBP2']), (base_variables['ACELRREDLB1731'] + 0)) and max((base_variables['ACELRREDLB_P'] + base_variables['ACELRREDLBP2']), (base_variables['ACELRREDLB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLB', 0) and saisie_variables.get('CELRREDLB', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLB', 0), (max((base_variables['ACELRREDLB_P'] + base_variables['ACELRREDLBP2']), (base_variables['ACELRREDLB1731'] + 0)) and max((base_variables['ACELRREDLB_P'] + base_variables['ACELRREDLBP2']), (base_variables['ACELRREDLB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLB', 0), (max((base_variables['ACELRREDLB_P'] + base_variables['ACELRREDLBP2']), (base_variables['ACELRREDLB1731'] + 0)) and max((base_variables['ACELRREDLB_P'] + base_variables['ACELRREDLBP2']), (base_variables['ACELRREDLB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDLB_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLB(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1())), 0)

    @cache_result
    def ACELRREDLE():
        """
        Investissement Scellier report reduction - Avis Facture - Retenu 7LE
        """
        return (((saisie_variables.get('CELRREDLE', 0) and saisie_variables.get('CELRREDLE', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLE', 0), (max((base_variables['ACELRREDLE_P'] + base_variables['ACELRREDLEP2']), (base_variables['ACELRREDLE1731'] + 0)) and max((base_variables['ACELRREDLE_P'] + base_variables['ACELRREDLEP2']), (base_variables['ACELRREDLE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLE', 0), (max((base_variables['ACELRREDLE_P'] + base_variables['ACELRREDLEP2']), (base_variables['ACELRREDLE1731'] + 0)) and max((base_variables['ACELRREDLE_P'] + base_variables['ACELRREDLEP2']), (base_variables['ACELRREDLE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLE', 0) and saisie_variables.get('CELRREDLE', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLE', 0), (max((base_variables['ACELRREDLE_P'] + base_variables['ACELRREDLEP2']), (base_variables['ACELRREDLE1731'] + 0)) and max((base_variables['ACELRREDLE_P'] + base_variables['ACELRREDLEP2']), (base_variables['ACELRREDLE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLE', 0), (max((base_variables['ACELRREDLE_P'] + base_variables['ACELRREDLEP2']), (base_variables['ACELRREDLE1731'] + 0)) and max((base_variables['ACELRREDLE_P'] + base_variables['ACELRREDLEP2']), (base_variables['ACELRREDLE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDLE_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLE(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1())), 0)

    @cache_result
    def ACELRREDLM():
        """
        Investissement Scellier report 2009 reduction - Avis Facture - Retenu 
        """
        return (((saisie_variables.get('CELRREDLM', 0) and saisie_variables.get('CELRREDLM', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLM', 0), (max((base_variables['ACELRREDLM_P'] + base_variables['ACELRREDLMP2']), (base_variables['ACELRREDLM1731'] + 0)) and max((base_variables['ACELRREDLM_P'] + base_variables['ACELRREDLMP2']), (base_variables['ACELRREDLM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLM', 0), (max((base_variables['ACELRREDLM_P'] + base_variables['ACELRREDLMP2']), (base_variables['ACELRREDLM1731'] + 0)) and max((base_variables['ACELRREDLM_P'] + base_variables['ACELRREDLMP2']), (base_variables['ACELRREDLM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLM', 0) and saisie_variables.get('CELRREDLM', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLM', 0), (max((base_variables['ACELRREDLM_P'] + base_variables['ACELRREDLMP2']), (base_variables['ACELRREDLM1731'] + 0)) and max((base_variables['ACELRREDLM_P'] + base_variables['ACELRREDLMP2']), (base_variables['ACELRREDLM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLM', 0), (max((base_variables['ACELRREDLM_P'] + base_variables['ACELRREDLMP2']), (base_variables['ACELRREDLM1731'] + 0)) and max((base_variables['ACELRREDLM_P'] + base_variables['ACELRREDLMP2']), (base_variables['ACELRREDLM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDLM_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLM(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1() - RCELRREDLE_1())), 0)

    @cache_result
    def ACELRREDLN():
        """
        Investissement Scellier report reduction - Avis Facture - Retenu 
        """
        return (((saisie_variables.get('CELRREDLN', 0) and saisie_variables.get('CELRREDLN', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLN', 0), (max((base_variables['ACELRREDLN_P'] + base_variables['ACELRREDLNP2']), (base_variables['ACELRREDLN1731'] + 0)) and max((base_variables['ACELRREDLN_P'] + base_variables['ACELRREDLNP2']), (base_variables['ACELRREDLN1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLN', 0), (max((base_variables['ACELRREDLN_P'] + base_variables['ACELRREDLNP2']), (base_variables['ACELRREDLN1731'] + 0)) and max((base_variables['ACELRREDLN_P'] + base_variables['ACELRREDLNP2']), (base_variables['ACELRREDLN1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLN', 0) and saisie_variables.get('CELRREDLN', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLN', 0), (max((base_variables['ACELRREDLN_P'] + base_variables['ACELRREDLNP2']), (base_variables['ACELRREDLN1731'] + 0)) and max((base_variables['ACELRREDLN_P'] + base_variables['ACELRREDLNP2']), (base_variables['ACELRREDLN1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLN', 0), (max((base_variables['ACELRREDLN_P'] + base_variables['ACELRREDLNP2']), (base_variables['ACELRREDLN1731'] + 0)) and max((base_variables['ACELRREDLN_P'] + base_variables['ACELRREDLNP2']), (base_variables['ACELRREDLN1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDLN_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLN(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1() - RCELRREDLE_1() - RCELRREDLM_1())), 0)

    @cache_result
    def ACELRREDLC():
        """
        Investissement Scellier report reduction - Avis Facture - Retenu 7LC
        """
        return (((saisie_variables.get('CELRREDLC', 0) and saisie_variables.get('CELRREDLC', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLC', 0), (max((base_variables['ACELRREDLC_P'] + base_variables['ACELRREDLCP2']), (base_variables['ACELRREDLC1731'] + 0)) and max((base_variables['ACELRREDLC_P'] + base_variables['ACELRREDLCP2']), (base_variables['ACELRREDLC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLC', 0), (max((base_variables['ACELRREDLC_P'] + base_variables['ACELRREDLCP2']), (base_variables['ACELRREDLC1731'] + 0)) and max((base_variables['ACELRREDLC_P'] + base_variables['ACELRREDLCP2']), (base_variables['ACELRREDLC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLC', 0) and saisie_variables.get('CELRREDLC', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLC', 0), (max((base_variables['ACELRREDLC_P'] + base_variables['ACELRREDLCP2']), (base_variables['ACELRREDLC1731'] + 0)) and max((base_variables['ACELRREDLC_P'] + base_variables['ACELRREDLCP2']), (base_variables['ACELRREDLC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLC', 0), (max((base_variables['ACELRREDLC_P'] + base_variables['ACELRREDLCP2']), (base_variables['ACELRREDLC1731'] + 0)) and max((base_variables['ACELRREDLC_P'] + base_variables['ACELRREDLCP2']), (base_variables['ACELRREDLC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDLC_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLC(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1() - RCELRREDLE_1() - RCELRREDLM_1() - RCELRREDLN_1())), 0)

    @cache_result
    def ACELRREDLD():
        """
        Investissement Scellier report 2010 reduction - Avis Facture - Retenu 
        """
        return (((saisie_variables.get('CELRREDLD', 0) and saisie_variables.get('CELRREDLD', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLD', 0), (max((base_variables['ACELRREDLD_P'] + base_variables['ACELRREDLDP2']), (base_variables['ACELRREDLD1731'] + 0)) and max((base_variables['ACELRREDLD_P'] + base_variables['ACELRREDLDP2']), (base_variables['ACELRREDLD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLD', 0), (max((base_variables['ACELRREDLD_P'] + base_variables['ACELRREDLDP2']), (base_variables['ACELRREDLD1731'] + 0)) and max((base_variables['ACELRREDLD_P'] + base_variables['ACELRREDLDP2']), (base_variables['ACELRREDLD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLD', 0) and saisie_variables.get('CELRREDLD', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLD', 0), (max((base_variables['ACELRREDLD_P'] + base_variables['ACELRREDLDP2']), (base_variables['ACELRREDLD1731'] + 0)) and max((base_variables['ACELRREDLD_P'] + base_variables['ACELRREDLDP2']), (base_variables['ACELRREDLD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLD', 0), (max((base_variables['ACELRREDLD_P'] + base_variables['ACELRREDLDP2']), (base_variables['ACELRREDLD1731'] + 0)) and max((base_variables['ACELRREDLD_P'] + base_variables['ACELRREDLDP2']), (base_variables['ACELRREDLD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDLD_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLD(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1() - RCELRREDLE_1() - RCELRREDLM_1() - RCELRREDLN_1() - RCELRREDLC_1())), 0)

    @cache_result
    def ACELRREDLS():
        """
        Investissement Scellier report 2009 reduction - Avis Facture - Retenu 
        """
        return (((saisie_variables.get('CELRREDLS', 0) and saisie_variables.get('CELRREDLS', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLS', 0), (max((base_variables['ACELRREDLS_P'] + base_variables['ACELRREDLSP2']), (base_variables['ACELRREDLS1731'] + 0)) and max((base_variables['ACELRREDLS_P'] + base_variables['ACELRREDLSP2']), (base_variables['ACELRREDLS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLS', 0), (max((base_variables['ACELRREDLS_P'] + base_variables['ACELRREDLSP2']), (base_variables['ACELRREDLS1731'] + 0)) and max((base_variables['ACELRREDLS_P'] + base_variables['ACELRREDLSP2']), (base_variables['ACELRREDLS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLS', 0) and saisie_variables.get('CELRREDLS', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLS', 0), (max((base_variables['ACELRREDLS_P'] + base_variables['ACELRREDLSP2']), (base_variables['ACELRREDLS1731'] + 0)) and max((base_variables['ACELRREDLS_P'] + base_variables['ACELRREDLSP2']), (base_variables['ACELRREDLS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLS', 0), (max((base_variables['ACELRREDLS_P'] + base_variables['ACELRREDLSP2']), (base_variables['ACELRREDLS1731'] + 0)) and max((base_variables['ACELRREDLS_P'] + base_variables['ACELRREDLSP2']), (base_variables['ACELRREDLS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDLS_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLS(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1() - RCELRREDLE_1() - RCELRREDLM_1() - RCELRREDLN_1() - RCELRREDLC_1() - RCELRREDLD_1())), 0)

    @cache_result
    def ACELRREDLT():
        """
        Investissement Scellier report reduction - Avis Facture - Retenu 
        """
        return (((saisie_variables.get('CELRREDLT', 0) and saisie_variables.get('CELRREDLT', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLT', 0), (max((base_variables['ACELRREDLT_P'] + base_variables['ACELRREDLTP2']), (base_variables['ACELRREDLT1731'] + 0)) and max((base_variables['ACELRREDLT_P'] + base_variables['ACELRREDLTP2']), (base_variables['ACELRREDLT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLT', 0), (max((base_variables['ACELRREDLT_P'] + base_variables['ACELRREDLTP2']), (base_variables['ACELRREDLT1731'] + 0)) and max((base_variables['ACELRREDLT_P'] + base_variables['ACELRREDLTP2']), (base_variables['ACELRREDLT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLT', 0) and saisie_variables.get('CELRREDLT', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLT', 0), (max((base_variables['ACELRREDLT_P'] + base_variables['ACELRREDLTP2']), (base_variables['ACELRREDLT1731'] + 0)) and max((base_variables['ACELRREDLT_P'] + base_variables['ACELRREDLTP2']), (base_variables['ACELRREDLT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLT', 0), (max((base_variables['ACELRREDLT_P'] + base_variables['ACELRREDLTP2']), (base_variables['ACELRREDLT1731'] + 0)) and max((base_variables['ACELRREDLT_P'] + base_variables['ACELRREDLTP2']), (base_variables['ACELRREDLT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDLT_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLT(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1() - RCELRREDLE_1() - RCELRREDLM_1() - RCELRREDLN_1() - RCELRREDLC_1() - RCELRREDLD_1() - RCELRREDLS_1())), 0)

    @cache_result
    def ACELRREDLF():
        """
        Investissement Scellier report 2011 reduction - Avis Facture - Retenu 
        """
        return (((saisie_variables.get('CELRREDLF', 0) and saisie_variables.get('CELRREDLF', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLF', 0), (max((base_variables['ACELRREDLF_P'] + base_variables['ACELRREDLFP2']), (base_variables['ACELRREDLF1731'] + 0)) and max((base_variables['ACELRREDLF_P'] + base_variables['ACELRREDLFP2']), (base_variables['ACELRREDLF1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLF', 0), (max((base_variables['ACELRREDLF_P'] + base_variables['ACELRREDLFP2']), (base_variables['ACELRREDLF1731'] + 0)) and max((base_variables['ACELRREDLF_P'] + base_variables['ACELRREDLFP2']), (base_variables['ACELRREDLF1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLF', 0) and saisie_variables.get('CELRREDLF', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLF', 0), (max((base_variables['ACELRREDLF_P'] + base_variables['ACELRREDLFP2']), (base_variables['ACELRREDLF1731'] + 0)) and max((base_variables['ACELRREDLF_P'] + base_variables['ACELRREDLFP2']), (base_variables['ACELRREDLF1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLF', 0), (max((base_variables['ACELRREDLF_P'] + base_variables['ACELRREDLFP2']), (base_variables['ACELRREDLF1731'] + 0)) and max((base_variables['ACELRREDLF_P'] + base_variables['ACELRREDLFP2']), (base_variables['ACELRREDLF1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDLF_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLF(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1() - RCELRREDLE_1() - RCELRREDLM_1() - RCELRREDLN_1() - RCELRREDLC_1() - RCELRREDLD_1() - RCELRREDLS_1() - RCELRREDLT_1())), 0)

    @cache_result
    def ACELRREDLZ():
        """
        Investissement Scellier report 2009 reduction - Avis Facture - Retenu 
        """
        return (((saisie_variables.get('CELRREDLZ', 0) and saisie_variables.get('CELRREDLZ', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLZ', 0), (max((base_variables['ACELRREDLZ_P'] + base_variables['ACELRREDLZP2']), (base_variables['ACELRREDLZ1731'] + 0)) and max((base_variables['ACELRREDLZ_P'] + base_variables['ACELRREDLZP2']), (base_variables['ACELRREDLZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLZ', 0), (max((base_variables['ACELRREDLZ_P'] + base_variables['ACELRREDLZP2']), (base_variables['ACELRREDLZ1731'] + 0)) and max((base_variables['ACELRREDLZ_P'] + base_variables['ACELRREDLZP2']), (base_variables['ACELRREDLZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLZ', 0) and saisie_variables.get('CELRREDLZ', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLZ', 0), (max((base_variables['ACELRREDLZ_P'] + base_variables['ACELRREDLZP2']), (base_variables['ACELRREDLZ1731'] + 0)) and max((base_variables['ACELRREDLZ_P'] + base_variables['ACELRREDLZP2']), (base_variables['ACELRREDLZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLZ', 0), (max((base_variables['ACELRREDLZ_P'] + base_variables['ACELRREDLZP2']), (base_variables['ACELRREDLZ1731'] + 0)) and max((base_variables['ACELRREDLZ_P'] + base_variables['ACELRREDLZP2']), (base_variables['ACELRREDLZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDLZ_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLZ(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1() - RCELRREDLE_1() - RCELRREDLM_1() - RCELRREDLN_1() - RCELRREDLC_1() - RCELRREDLD_1() - RCELRREDLS_1() - RCELRREDLT_1() - RCELRREDLF_1())), 0)

    @cache_result
    def ACELRREDLX():
        """
        Investissement Scellier report reduction - Avis Facture - Retenu 
        """
        return (((saisie_variables.get('CELRREDLX', 0) and saisie_variables.get('CELRREDLX', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLX', 0), (max((base_variables['ACELRREDLX_P'] + base_variables['ACELRREDLXP2']), (base_variables['ACELRREDLX1731'] + 0)) and max((base_variables['ACELRREDLX_P'] + base_variables['ACELRREDLXP2']), (base_variables['ACELRREDLX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLX', 0), (max((base_variables['ACELRREDLX_P'] + base_variables['ACELRREDLXP2']), (base_variables['ACELRREDLX1731'] + 0)) and max((base_variables['ACELRREDLX_P'] + base_variables['ACELRREDLXP2']), (base_variables['ACELRREDLX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDLX', 0) and saisie_variables.get('CELRREDLX', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDLX', 0), (max((base_variables['ACELRREDLX_P'] + base_variables['ACELRREDLXP2']), (base_variables['ACELRREDLX1731'] + 0)) and max((base_variables['ACELRREDLX_P'] + base_variables['ACELRREDLXP2']), (base_variables['ACELRREDLX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDLX', 0), (max((base_variables['ACELRREDLX_P'] + base_variables['ACELRREDLXP2']), (base_variables['ACELRREDLX1731'] + 0)) and max((base_variables['ACELRREDLX_P'] + base_variables['ACELRREDLXP2']), (base_variables['ACELRREDLX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDLX_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDLX(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1() - RCELRREDLE_1() - RCELRREDLM_1() - RCELRREDLN_1() - RCELRREDLC_1() - RCELRREDLD_1() - RCELRREDLS_1() - RCELRREDLT_1() - RCELRREDLF_1() - RCELRREDLZ_1())), 0)

    @cache_result
    def ACELRREDMG():
        """
        Investissement Scellier report 2009 reduction - Avis Facture - Retenu 
        """
        return (((saisie_variables.get('CELRREDMG', 0) and saisie_variables.get('CELRREDMG', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDMG', 0), (max((base_variables['ACELRREDMG_P'] + base_variables['ACELRREDMGP2']), (base_variables['ACELRREDMG1731'] + 0)) and max((base_variables['ACELRREDMG_P'] + base_variables['ACELRREDMGP2']), (base_variables['ACELRREDMG1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDMG', 0), (max((base_variables['ACELRREDMG_P'] + base_variables['ACELRREDMGP2']), (base_variables['ACELRREDMG1731'] + 0)) and max((base_variables['ACELRREDMG_P'] + base_variables['ACELRREDMGP2']), (base_variables['ACELRREDMG1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDMG', 0) and saisie_variables.get('CELRREDMG', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDMG', 0), (max((base_variables['ACELRREDMG_P'] + base_variables['ACELRREDMGP2']), (base_variables['ACELRREDMG1731'] + 0)) and max((base_variables['ACELRREDMG_P'] + base_variables['ACELRREDMGP2']), (base_variables['ACELRREDMG1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDMG', 0), (max((base_variables['ACELRREDMG_P'] + base_variables['ACELRREDMGP2']), (base_variables['ACELRREDMG1731'] + 0)) and max((base_variables['ACELRREDMG_P'] + base_variables['ACELRREDMGP2']), (base_variables['ACELRREDMG1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDMG_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDMG(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1() - RCELRREDLE_1() - RCELRREDLM_1() - RCELRREDLN_1() - RCELRREDLC_1() - RCELRREDLD_1() - RCELRREDLS_1() - RCELRREDLT_1() - RCELRREDLF_1() - RCELRREDLZ_1() - RCELRREDLX_1())), 0)

    @cache_result
    def ACELRREDMH():
        """
        Investissement Scellier report reduction - Avis Facture - Retenu 
        """
        return (((saisie_variables.get('CELRREDMH', 0) and saisie_variables.get('CELRREDMH', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDMH', 0), (max((base_variables['ACELRREDMH_P'] + base_variables['ACELRREDMHP2']), (base_variables['ACELRREDMH1731'] + 0)) and max((base_variables['ACELRREDMH_P'] + base_variables['ACELRREDMHP2']), (base_variables['ACELRREDMH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDMH', 0), (max((base_variables['ACELRREDMH_P'] + base_variables['ACELRREDMHP2']), (base_variables['ACELRREDMH1731'] + 0)) and max((base_variables['ACELRREDMH_P'] + base_variables['ACELRREDMHP2']), (base_variables['ACELRREDMH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and ((saisie_variables.get('CELRREDMH', 0) and saisie_variables.get('CELRREDMH', 0) * (1 - base_variables['ART1731BIS'])) + (min(saisie_variables.get('CELRREDMH', 0), (max((base_variables['ACELRREDMH_P'] + base_variables['ACELRREDMHP2']), (base_variables['ACELRREDMH1731'] + 0)) and max((base_variables['ACELRREDMH_P'] + base_variables['ACELRREDMHP2']), (base_variables['ACELRREDMH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(saisie_variables.get('CELRREDMH', 0), (max((base_variables['ACELRREDMH_P'] + base_variables['ACELRREDMHP2']), (base_variables['ACELRREDMH1731'] + 0)) and max((base_variables['ACELRREDMH_P'] + base_variables['ACELRREDMHP2']), (base_variables['ACELRREDMH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELRREDMH_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(ACELRREDMH(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDLA_1() - RCELRREDLB_1() - RCELRREDLE_1() - RCELRREDLM_1() - RCELRREDLN_1() - RCELRREDLC_1() - RCELRREDLD_1() - RCELRREDLS_1() - RCELRREDLT_1() - RCELRREDLF_1() - RCELRREDLZ_1() - RCELRREDLX_1() - RCELRREDMG_1())), 0)

    @cache_result
    def RCELRREDSOM():
        """
        Invest. Scellier 2013-somme des reduc RCELRRED 
        """
        return (somme([RCELRREDLA_1(), RCELRREDLB_1(), RCELRREDLE_1(), RCELRREDLM_1(), RCELRREDLN_1(), RCELRREDLC_1(), RCELRREDLD_1(), RCELRREDLS_1(), RCELRREDLT_1(), RCELRREDLF_1(), RCELRREDLZ_1(), RCELRREDLX_1()]) + RCELRREDMG_1() + RCELRREDMH_1())

    @cache_result
    def RCELREPHS_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCELREP_HS(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCELREP_HS(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHS():
        """
        Reduction Scellier  report 2009 - 7HS
        """
        return (max(0, ((RCELREPHS_1() and RCELREPHS_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHS_1(), (max((base_variables['RCELREPHS_P'] + base_variables['RCELREPHSP2']), (base_variables['RCELREPHS1731'] + 0)) and max((base_variables['RCELREPHS_P'] + base_variables['RCELREPHSP2']), (base_variables['RCELREPHS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHS_1(), (max((base_variables['RCELREPHS_P'] + base_variables['RCELREPHSP2']), (base_variables['RCELREPHS1731'] + 0)) and max((base_variables['RCELREPHS_P'] + base_variables['RCELREPHSP2']), (base_variables['RCELREPHS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHS_1() and RCELREPHS_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHS_1(), (max((base_variables['RCELREPHS_P'] + base_variables['RCELREPHSP2']), (base_variables['RCELREPHS1731'] + 0)) and max((base_variables['RCELREPHS_P'] + base_variables['RCELREPHSP2']), (base_variables['RCELREPHS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHS_1(), (max((base_variables['RCELREPHS_P'] + base_variables['RCELREPHSP2']), (base_variables['RCELREPHS1731'] + 0)) and max((base_variables['RCELREPHS_P'] + base_variables['RCELREPHSP2']), (base_variables['RCELREPHS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHR_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCELREP_HR(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCELREP_HR(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHR():
        """
        Scellier metropole-DOM hors plafonds - report 2009 - Reduction
        """
        return (max(0, ((RCELREPHR_1() and RCELREPHR_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHR_1(), (max((base_variables['RCELREPHR_P'] + base_variables['RCELREPHRP2']), (base_variables['RCELREPHR1731'] + 0)) and max((base_variables['RCELREPHR_P'] + base_variables['RCELREPHRP2']), (base_variables['RCELREPHR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHR_1(), (max((base_variables['RCELREPHR_P'] + base_variables['RCELREPHRP2']), (base_variables['RCELREPHR1731'] + 0)) and max((base_variables['RCELREPHR_P'] + base_variables['RCELREPHRP2']), (base_variables['RCELREPHR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHR_1() and RCELREPHR_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHR_1(), (max((base_variables['RCELREPHR_P'] + base_variables['RCELREPHRP2']), (base_variables['RCELREPHR1731'] + 0)) and max((base_variables['RCELREPHR_P'] + base_variables['RCELREPHRP2']), (base_variables['RCELREPHR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHR_1(), (max((base_variables['RCELREPHR_P'] + base_variables['RCELREPHRP2']), (base_variables['RCELREPHR1731'] + 0)) and max((base_variables['RCELREPHR_P'] + base_variables['RCELREPHRP2']), (base_variables['RCELREPHR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHU_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCELREP_HU(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCELREP_HU(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHU():
        """
        Reduction Scellier  DOM COM engagt 2009 fini 2010 report- 7HU
        """
        return (max(0, ((RCELREPHU_1() and RCELREPHU_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHU_1(), (max((base_variables['RCELREPHU_P'] + base_variables['RCELREPHUP2']), (base_variables['RCELREPHU1731'] + 0)) and max((base_variables['RCELREPHU_P'] + base_variables['RCELREPHUP2']), (base_variables['RCELREPHU1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHU_1(), (max((base_variables['RCELREPHU_P'] + base_variables['RCELREPHUP2']), (base_variables['RCELREPHU1731'] + 0)) and max((base_variables['RCELREPHU_P'] + base_variables['RCELREPHUP2']), (base_variables['RCELREPHU1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHU_1() and RCELREPHU_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHU_1(), (max((base_variables['RCELREPHU_P'] + base_variables['RCELREPHUP2']), (base_variables['RCELREPHU1731'] + 0)) and max((base_variables['RCELREPHU_P'] + base_variables['RCELREPHUP2']), (base_variables['RCELREPHU1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHU_1(), (max((base_variables['RCELREPHU_P'] + base_variables['RCELREPHUP2']), (base_variables['RCELREPHU1731'] + 0)) and max((base_variables['RCELREPHU_P'] + base_variables['RCELREPHUP2']), (base_variables['RCELREPHU1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHT_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCELREP_HT(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1() - RCELREPHU_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCELREP_HT(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1() - RCELREPHU_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHT():
        """
        Reduction Scellier metropole DOM report- 7HT
        """
        return (max(0, ((RCELREPHT_1() and RCELREPHT_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHT_1(), (max((base_variables['RCELREPHT_P'] + base_variables['RCELREPHTP2']), (base_variables['RCELREPHT1731'] + 0)) and max((base_variables['RCELREPHT_P'] + base_variables['RCELREPHTP2']), (base_variables['RCELREPHT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHT_1(), (max((base_variables['RCELREPHT_P'] + base_variables['RCELREPHTP2']), (base_variables['RCELREPHT1731'] + 0)) and max((base_variables['RCELREPHT_P'] + base_variables['RCELREPHTP2']), (base_variables['RCELREPHT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHT_1() and RCELREPHT_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHT_1(), (max((base_variables['RCELREPHT_P'] + base_variables['RCELREPHTP2']), (base_variables['RCELREPHT1731'] + 0)) and max((base_variables['RCELREPHT_P'] + base_variables['RCELREPHTP2']), (base_variables['RCELREPHT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHT_1(), (max((base_variables['RCELREPHT_P'] + base_variables['RCELREPHTP2']), (base_variables['RCELREPHT1731'] + 0)) and max((base_variables['RCELREPHT_P'] + base_variables['RCELREPHTP2']), (base_variables['RCELREPHT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHZ_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCELREP_HZ(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1() - RCELREPHU_1() - RCELREPHT_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCELREP_HZ(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1() - RCELREPHU_1() - RCELREPHT_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHZ():
        """
        Reduction Scellier  DOM COM pa 2009 fini 2010 : report- 7HZ
        """
        return (max(0, ((RCELREPHZ_1() and RCELREPHZ_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHZ_1(), (max((base_variables['RCELREPHZ_P'] + base_variables['RCELREPHZP2']), (base_variables['RCELREPHZ1731'] + 0)) and max((base_variables['RCELREPHZ_P'] + base_variables['RCELREPHZP2']), (base_variables['RCELREPHZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHZ_1(), (max((base_variables['RCELREPHZ_P'] + base_variables['RCELREPHZP2']), (base_variables['RCELREPHZ1731'] + 0)) and max((base_variables['RCELREPHZ_P'] + base_variables['RCELREPHZP2']), (base_variables['RCELREPHZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHZ_1() and RCELREPHZ_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHZ_1(), (max((base_variables['RCELREPHZ_P'] + base_variables['RCELREPHZP2']), (base_variables['RCELREPHZ1731'] + 0)) and max((base_variables['RCELREPHZ_P'] + base_variables['RCELREPHZP2']), (base_variables['RCELREPHZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHZ_1(), (max((base_variables['RCELREPHZ_P'] + base_variables['RCELREPHZP2']), (base_variables['RCELREPHZ1731'] + 0)) and max((base_variables['RCELREPHZ_P'] + base_variables['RCELREPHZP2']), (base_variables['RCELREPHZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHX_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCELREP_HX(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1() - RCELREPHU_1() - RCELREPHT_1() - RCELREPHZ_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCELREP_HX(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1() - RCELREPHU_1() - RCELREPHT_1() - RCELREPHZ_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHX():
        """
        Reduction Scellier  metropole pa 2009 fini 2010 : report- 7HX
        """
        return (max(0, ((RCELREPHX_1() and RCELREPHX_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHX_1(), (max((base_variables['RCELREPHX_P'] + base_variables['RCELREPHXP2']), (base_variables['RCELREPHX1731'] + 0)) and max((base_variables['RCELREPHX_P'] + base_variables['RCELREPHXP2']), (base_variables['RCELREPHX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHX_1(), (max((base_variables['RCELREPHX_P'] + base_variables['RCELREPHXP2']), (base_variables['RCELREPHX1731'] + 0)) and max((base_variables['RCELREPHX_P'] + base_variables['RCELREPHXP2']), (base_variables['RCELREPHX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHX_1() and RCELREPHX_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHX_1(), (max((base_variables['RCELREPHX_P'] + base_variables['RCELREPHXP2']), (base_variables['RCELREPHX1731'] + 0)) and max((base_variables['RCELREPHX_P'] + base_variables['RCELREPHXP2']), (base_variables['RCELREPHX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHX_1(), (max((base_variables['RCELREPHX_P'] + base_variables['RCELREPHXP2']), (base_variables['RCELREPHX1731'] + 0)) and max((base_variables['RCELREPHX_P'] + base_variables['RCELREPHXP2']), (base_variables['RCELREPHX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHW_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCELREP_HW(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1() - RCELREPHU_1() - RCELREPHT_1() - RCELREPHZ_1() - RCELREPHX_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCELREP_HW(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1() - RCELREPHU_1() - RCELREPHT_1() - RCELREPHZ_1() - RCELREPHX_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHW():
        """
        Reduction Scellier DOM COM report 2010 - 7HW
        """
        return (max(0, ((RCELREPHW_1() and RCELREPHW_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHW_1(), (max((base_variables['RCELREPHW_P'] + base_variables['RCELREPHWP2']), (base_variables['RCELREPHW1731'] + 0)) and max((base_variables['RCELREPHW_P'] + base_variables['RCELREPHWP2']), (base_variables['RCELREPHW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHW_1(), (max((base_variables['RCELREPHW_P'] + base_variables['RCELREPHWP2']), (base_variables['RCELREPHW1731'] + 0)) and max((base_variables['RCELREPHW_P'] + base_variables['RCELREPHWP2']), (base_variables['RCELREPHW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHW_1() and RCELREPHW_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHW_1(), (max((base_variables['RCELREPHW_P'] + base_variables['RCELREPHWP2']), (base_variables['RCELREPHW1731'] + 0)) and max((base_variables['RCELREPHW_P'] + base_variables['RCELREPHWP2']), (base_variables['RCELREPHW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHW_1(), (max((base_variables['RCELREPHW_P'] + base_variables['RCELREPHWP2']), (base_variables['RCELREPHW1731'] + 0)) and max((base_variables['RCELREPHW_P'] + base_variables['RCELREPHWP2']), (base_variables['RCELREPHW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHV_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCELREP_HV(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1() - RCELREPHU_1() - RCELREPHT_1() - RCELREPHZ_1() - RCELREPHX_1() - RCELREPHW_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCELREP_HV(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - RCELREPHS_1() - RCELREPHR_1() - RCELREPHU_1() - RCELREPHT_1() - RCELREPHZ_1() - RCELREPHX_1() - RCELREPHW_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHV():
        """
        Reduction Scellier metropole report 2010 - 7HV
        """
        return (max(0, ((RCELREPHV_1() and RCELREPHV_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHV_1(), (max((base_variables['RCELREPHV_P'] + base_variables['RCELREPHVP2']), (base_variables['RCELREPHV1731'] + 0)) and max((base_variables['RCELREPHV_P'] + base_variables['RCELREPHVP2']), (base_variables['RCELREPHV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHV_1(), (max((base_variables['RCELREPHV_P'] + base_variables['RCELREPHVP2']), (base_variables['RCELREPHV1731'] + 0)) and max((base_variables['RCELREPHV_P'] + base_variables['RCELREPHVP2']), (base_variables['RCELREPHV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHV_1() and RCELREPHV_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHV_1(), (max((base_variables['RCELREPHV_P'] + base_variables['RCELREPHVP2']), (base_variables['RCELREPHV1731'] + 0)) and max((base_variables['RCELREPHV_P'] + base_variables['RCELREPHVP2']), (base_variables['RCELREPHV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHV_1(), (max((base_variables['RCELREPHV_P'] + base_variables['RCELREPHVP2']), (base_variables['RCELREPHV1731'] + 0)) and max((base_variables['RCELREPHV_P'] + base_variables['RCELREPHVP2']), (base_variables['RCELREPHV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHF_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPHF(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPHF(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHF():
        """
        Reduction Scellier  report  - 7HF
        """
        return (max(0, ((RCELREPHF_1() and RCELREPHF_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHF_1(), (max((base_variables['RCELREPHF_P'] + base_variables['RCELREPHFP2']), (base_variables['RCELREPHF1731'] + 0)) and max((base_variables['RCELREPHF_P'] + base_variables['RCELREPHFP2']), (base_variables['RCELREPHF1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHF_1(), (max((base_variables['RCELREPHF_P'] + base_variables['RCELREPHFP2']), (base_variables['RCELREPHF1731'] + 0)) and max((base_variables['RCELREPHF_P'] + base_variables['RCELREPHFP2']), (base_variables['RCELREPHF1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHF_1() and RCELREPHF_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHF_1(), (max((base_variables['RCELREPHF_P'] + base_variables['RCELREPHFP2']), (base_variables['RCELREPHF1731'] + 0)) and max((base_variables['RCELREPHF_P'] + base_variables['RCELREPHFP2']), (base_variables['RCELREPHF1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHF_1(), (max((base_variables['RCELREPHF_P'] + base_variables['RCELREPHFP2']), (base_variables['RCELREPHF1731'] + 0)) and max((base_variables['RCELREPHF_P'] + base_variables['RCELREPHFP2']), (base_variables['RCELREPHF1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHE_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPHE(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPHE(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHE():
        """
        Reduction Scellier  report  - 7HE
        """
        return (max(0, ((RCELREPHE_1() and RCELREPHE_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHE_1(), (max((base_variables['RCELREPHE_P'] + base_variables['RCELREPHEP2']), (base_variables['RCELREPHE1731'] + 0)) and max((base_variables['RCELREPHE_P'] + base_variables['RCELREPHEP2']), (base_variables['RCELREPHE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHE_1(), (max((base_variables['RCELREPHE_P'] + base_variables['RCELREPHEP2']), (base_variables['RCELREPHE1731'] + 0)) and max((base_variables['RCELREPHE_P'] + base_variables['RCELREPHEP2']), (base_variables['RCELREPHE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHE_1() and RCELREPHE_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHE_1(), (max((base_variables['RCELREPHE_P'] + base_variables['RCELREPHEP2']), (base_variables['RCELREPHE1731'] + 0)) and max((base_variables['RCELREPHE_P'] + base_variables['RCELREPHEP2']), (base_variables['RCELREPHE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHE_1(), (max((base_variables['RCELREPHE_P'] + base_variables['RCELREPHEP2']), (base_variables['RCELREPHE1731'] + 0)) and max((base_variables['RCELREPHE_P'] + base_variables['RCELREPHEP2']), (base_variables['RCELREPHE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHD_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPHD(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPHD(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHD():
        """
        Reduction Scellier  report  - 7HD
        """
        return (max(0, ((RCELREPHD_1() and RCELREPHD_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHD_1(), (max((base_variables['RCELREPHD_P'] + base_variables['RCELREPHDP2']), (base_variables['RCELREPHD1731'] + 0)) and max((base_variables['RCELREPHD_P'] + base_variables['RCELREPHDP2']), (base_variables['RCELREPHD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHD_1(), (max((base_variables['RCELREPHD_P'] + base_variables['RCELREPHDP2']), (base_variables['RCELREPHD1731'] + 0)) and max((base_variables['RCELREPHD_P'] + base_variables['RCELREPHDP2']), (base_variables['RCELREPHD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHD_1() and RCELREPHD_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHD_1(), (max((base_variables['RCELREPHD_P'] + base_variables['RCELREPHDP2']), (base_variables['RCELREPHD1731'] + 0)) and max((base_variables['RCELREPHD_P'] + base_variables['RCELREPHDP2']), (base_variables['RCELREPHD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHD_1(), (max((base_variables['RCELREPHD_P'] + base_variables['RCELREPHDP2']), (base_variables['RCELREPHD1731'] + 0)) and max((base_variables['RCELREPHD_P'] + base_variables['RCELREPHDP2']), (base_variables['RCELREPHD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHH_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPHH(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPHH(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHH():
        """
        Reduction Scellier  report  - 7HH
        """
        return (max(0, ((RCELREPHH_1() and RCELREPHH_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHH_1(), (max((base_variables['RCELREPHH_P'] + base_variables['RCELREPHHP2']), (base_variables['RCELREPHH1731'] + 0)) and max((base_variables['RCELREPHH_P'] + base_variables['RCELREPHHP2']), (base_variables['RCELREPHH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHH_1(), (max((base_variables['RCELREPHH_P'] + base_variables['RCELREPHHP2']), (base_variables['RCELREPHH1731'] + 0)) and max((base_variables['RCELREPHH_P'] + base_variables['RCELREPHHP2']), (base_variables['RCELREPHH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHH_1() and RCELREPHH_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHH_1(), (max((base_variables['RCELREPHH_P'] + base_variables['RCELREPHHP2']), (base_variables['RCELREPHH1731'] + 0)) and max((base_variables['RCELREPHH_P'] + base_variables['RCELREPHHP2']), (base_variables['RCELREPHH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHH_1(), (max((base_variables['RCELREPHH_P'] + base_variables['RCELREPHHP2']), (base_variables['RCELREPHH1731'] + 0)) and max((base_variables['RCELREPHH_P'] + base_variables['RCELREPHHP2']), (base_variables['RCELREPHH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHG_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPHG(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPHG(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHG():
        """
        Reduction Scellier  report  - 7HG
        """
        return (max(0, ((RCELREPHG_1() and RCELREPHG_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHG_1(), (max((base_variables['RCELREPHG_P'] + base_variables['RCELREPHGP2']), (base_variables['RCELREPHG1731'] + 0)) and max((base_variables['RCELREPHG_P'] + base_variables['RCELREPHGP2']), (base_variables['RCELREPHG1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHG_1(), (max((base_variables['RCELREPHG_P'] + base_variables['RCELREPHGP2']), (base_variables['RCELREPHG1731'] + 0)) and max((base_variables['RCELREPHG_P'] + base_variables['RCELREPHGP2']), (base_variables['RCELREPHG1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHG_1() and RCELREPHG_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHG_1(), (max((base_variables['RCELREPHG_P'] + base_variables['RCELREPHGP2']), (base_variables['RCELREPHG1731'] + 0)) and max((base_variables['RCELREPHG_P'] + base_variables['RCELREPHGP2']), (base_variables['RCELREPHG1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHG_1(), (max((base_variables['RCELREPHG_P'] + base_variables['RCELREPHGP2']), (base_variables['RCELREPHG1731'] + 0)) and max((base_variables['RCELREPHG_P'] + base_variables['RCELREPHGP2']), (base_variables['RCELREPHG1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHB_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPHB(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPHB(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHB():
        """
        Reduction Scellier  report  - 7HB
        """
        return (max(0, ((RCELREPHB_1() and RCELREPHB_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHB_1(), (max((base_variables['RCELREPHB_P'] + base_variables['RCELREPHBP2']), (base_variables['RCELREPHB1731'] + 0)) and max((base_variables['RCELREPHB_P'] + base_variables['RCELREPHBP2']), (base_variables['RCELREPHB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHB_1(), (max((base_variables['RCELREPHB_P'] + base_variables['RCELREPHBP2']), (base_variables['RCELREPHB1731'] + 0)) and max((base_variables['RCELREPHB_P'] + base_variables['RCELREPHBP2']), (base_variables['RCELREPHB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHB_1() and RCELREPHB_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHB_1(), (max((base_variables['RCELREPHB_P'] + base_variables['RCELREPHBP2']), (base_variables['RCELREPHB1731'] + 0)) and max((base_variables['RCELREPHB_P'] + base_variables['RCELREPHBP2']), (base_variables['RCELREPHB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHB_1(), (max((base_variables['RCELREPHB_P'] + base_variables['RCELREPHBP2']), (base_variables['RCELREPHB1731'] + 0)) and max((base_variables['RCELREPHB_P'] + base_variables['RCELREPHBP2']), (base_variables['RCELREPHB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHA_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPHA(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPHA(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPHA():
        """
        Reduction Scellier  report  - 7HA
        """
        return (max(0, ((RCELREPHA_1() and RCELREPHA_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHA_1(), (max((base_variables['RCELREPHA_P'] + base_variables['RCELREPHAP2']), (base_variables['RCELREPHA1731'] + 0)) and max((base_variables['RCELREPHA_P'] + base_variables['RCELREPHAP2']), (base_variables['RCELREPHA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHA_1(), (max((base_variables['RCELREPHA_P'] + base_variables['RCELREPHAP2']), (base_variables['RCELREPHA1731'] + 0)) and max((base_variables['RCELREPHA_P'] + base_variables['RCELREPHAP2']), (base_variables['RCELREPHA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPHA_1() and RCELREPHA_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPHA_1(), (max((base_variables['RCELREPHA_P'] + base_variables['RCELREPHAP2']), (base_variables['RCELREPHA1731'] + 0)) and max((base_variables['RCELREPHA_P'] + base_variables['RCELREPHAP2']), (base_variables['RCELREPHA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPHA_1(), (max((base_variables['RCELREPHA_P'] + base_variables['RCELREPHAP2']), (base_variables['RCELREPHA1731'] + 0)) and max((base_variables['RCELREPHA_P'] + base_variables['RCELREPHAP2']), (base_variables['RCELREPHA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGU_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPGU(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPGU(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGU():
        """
        Reduction Scellier  report  - 7GU
        """
        return (max(0, ((RCELREPGU_1() and RCELREPGU_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGU_1(), (max((base_variables['RCELREPGU_P'] + base_variables['RCELREPGUP2']), (base_variables['RCELREPGU1731'] + 0)) and max((base_variables['RCELREPGU_P'] + base_variables['RCELREPGUP2']), (base_variables['RCELREPGU1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGU_1(), (max((base_variables['RCELREPGU_P'] + base_variables['RCELREPGUP2']), (base_variables['RCELREPGU1731'] + 0)) and max((base_variables['RCELREPGU_P'] + base_variables['RCELREPGUP2']), (base_variables['RCELREPGU1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPGU_1() and RCELREPGU_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGU_1(), (max((base_variables['RCELREPGU_P'] + base_variables['RCELREPGUP2']), (base_variables['RCELREPGU1731'] + 0)) and max((base_variables['RCELREPGU_P'] + base_variables['RCELREPGUP2']), (base_variables['RCELREPGU1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGU_1(), (max((base_variables['RCELREPGU_P'] + base_variables['RCELREPGUP2']), (base_variables['RCELREPGU1731'] + 0)) and max((base_variables['RCELREPGU_P'] + base_variables['RCELREPGUP2']), (base_variables['RCELREPGU1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGX_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPGX(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - RCELREPGU_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPGX(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - RCELREPGU_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGX():
        """
        Reduction Scellier  report  - 7GX
        """
        return (max(0, ((RCELREPGX_1() and RCELREPGX_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGX_1(), (max((base_variables['RCELREPGX_P'] + base_variables['RCELREPGXP2']), (base_variables['RCELREPGX1731'] + 0)) and max((base_variables['RCELREPGX_P'] + base_variables['RCELREPGXP2']), (base_variables['RCELREPGX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGX_1(), (max((base_variables['RCELREPGX_P'] + base_variables['RCELREPGXP2']), (base_variables['RCELREPGX1731'] + 0)) and max((base_variables['RCELREPGX_P'] + base_variables['RCELREPGXP2']), (base_variables['RCELREPGX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPGX_1() and RCELREPGX_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGX_1(), (max((base_variables['RCELREPGX_P'] + base_variables['RCELREPGXP2']), (base_variables['RCELREPGX1731'] + 0)) and max((base_variables['RCELREPGX_P'] + base_variables['RCELREPGXP2']), (base_variables['RCELREPGX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGX_1(), (max((base_variables['RCELREPGX_P'] + base_variables['RCELREPGXP2']), (base_variables['RCELREPGX1731'] + 0)) and max((base_variables['RCELREPGX_P'] + base_variables['RCELREPGXP2']), (base_variables['RCELREPGX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGT_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPGT(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPGT(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGT():
        """
        Reduction Scellier  report  - 7GT
        """
        return (max(0, ((RCELREPGT_1() and RCELREPGT_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGT_1(), (max((base_variables['RCELREPGT_P'] + base_variables['RCELREPGTP2']), (base_variables['RCELREPGT1731'] + 0)) and max((base_variables['RCELREPGT_P'] + base_variables['RCELREPGTP2']), (base_variables['RCELREPGT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGT_1(), (max((base_variables['RCELREPGT_P'] + base_variables['RCELREPGTP2']), (base_variables['RCELREPGT1731'] + 0)) and max((base_variables['RCELREPGT_P'] + base_variables['RCELREPGTP2']), (base_variables['RCELREPGT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPGT_1() and RCELREPGT_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGT_1(), (max((base_variables['RCELREPGT_P'] + base_variables['RCELREPGTP2']), (base_variables['RCELREPGT1731'] + 0)) and max((base_variables['RCELREPGT_P'] + base_variables['RCELREPGTP2']), (base_variables['RCELREPGT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGT_1(), (max((base_variables['RCELREPGT_P'] + base_variables['RCELREPGTP2']), (base_variables['RCELREPGT1731'] + 0)) and max((base_variables['RCELREPGT_P'] + base_variables['RCELREPGTP2']), (base_variables['RCELREPGT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGS_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPGS(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPGS(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGS():
        """
        Reduction Scellier  report  - 7GS
        """
        return (max(0, ((RCELREPGS_1() and RCELREPGS_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGS_1(), (max((base_variables['RCELREPGS_P'] + base_variables['RCELREPGSP2']), (base_variables['RCELREPGS1731'] + 0)) and max((base_variables['RCELREPGS_P'] + base_variables['RCELREPGSP2']), (base_variables['RCELREPGS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGS_1(), (max((base_variables['RCELREPGS_P'] + base_variables['RCELREPGSP2']), (base_variables['RCELREPGS1731'] + 0)) and max((base_variables['RCELREPGS_P'] + base_variables['RCELREPGSP2']), (base_variables['RCELREPGS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPGS_1() and RCELREPGS_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGS_1(), (max((base_variables['RCELREPGS_P'] + base_variables['RCELREPGSP2']), (base_variables['RCELREPGS1731'] + 0)) and max((base_variables['RCELREPGS_P'] + base_variables['RCELREPGSP2']), (base_variables['RCELREPGS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGS_1(), (max((base_variables['RCELREPGS_P'] + base_variables['RCELREPGSP2']), (base_variables['RCELREPGS1731'] + 0)) and max((base_variables['RCELREPGS_P'] + base_variables['RCELREPGSP2']), (base_variables['RCELREPGS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGW_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPGW(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPGW(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGW():
        """
        Reduction Scellier  report  - 7GW
        """
        return (max(0, ((RCELREPGW_1() and RCELREPGW_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGW_1(), (max((base_variables['RCELREPGW_P'] + base_variables['RCELREPGWP2']), (base_variables['RCELREPGW1731'] + 0)) and max((base_variables['RCELREPGW_P'] + base_variables['RCELREPGWP2']), (base_variables['RCELREPGW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGW_1(), (max((base_variables['RCELREPGW_P'] + base_variables['RCELREPGWP2']), (base_variables['RCELREPGW1731'] + 0)) and max((base_variables['RCELREPGW_P'] + base_variables['RCELREPGWP2']), (base_variables['RCELREPGW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPGW_1() and RCELREPGW_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGW_1(), (max((base_variables['RCELREPGW_P'] + base_variables['RCELREPGWP2']), (base_variables['RCELREPGW1731'] + 0)) and max((base_variables['RCELREPGW_P'] + base_variables['RCELREPGWP2']), (base_variables['RCELREPGW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGW_1(), (max((base_variables['RCELREPGW_P'] + base_variables['RCELREPGWP2']), (base_variables['RCELREPGW1731'] + 0)) and max((base_variables['RCELREPGW_P'] + base_variables['RCELREPGWP2']), (base_variables['RCELREPGW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGP_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPGP(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPGP(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGP():
        """
        Reduction Scellier  report  - 7GP
        """
        return (max(0, ((RCELREPGP_1() and RCELREPGP_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGP_1(), (max((base_variables['RCELREPGP_P'] + base_variables['RCELREPGPP2']), (base_variables['RCELREPGP1731'] + 0)) and max((base_variables['RCELREPGP_P'] + base_variables['RCELREPGPP2']), (base_variables['RCELREPGP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGP_1(), (max((base_variables['RCELREPGP_P'] + base_variables['RCELREPGPP2']), (base_variables['RCELREPGP1731'] + 0)) and max((base_variables['RCELREPGP_P'] + base_variables['RCELREPGPP2']), (base_variables['RCELREPGP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPGP_1() and RCELREPGP_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGP_1(), (max((base_variables['RCELREPGP_P'] + base_variables['RCELREPGPP2']), (base_variables['RCELREPGP1731'] + 0)) and max((base_variables['RCELREPGP_P'] + base_variables['RCELREPGPP2']), (base_variables['RCELREPGP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGP_1(), (max((base_variables['RCELREPGP_P'] + base_variables['RCELREPGPP2']), (base_variables['RCELREPGP1731'] + 0)) and max((base_variables['RCELREPGP_P'] + base_variables['RCELREPGPP2']), (base_variables['RCELREPGP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGL_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPGL(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPGL(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGL():
        """
        Reduction Scellier  report  - 7GL
        """
        return (max(0, ((RCELREPGL_1() and RCELREPGL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGL_1(), (max((base_variables['RCELREPGL_P'] + base_variables['RCELREPGLP2']), (base_variables['RCELREPGL1731'] + 0)) and max((base_variables['RCELREPGL_P'] + base_variables['RCELREPGLP2']), (base_variables['RCELREPGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGL_1(), (max((base_variables['RCELREPGL_P'] + base_variables['RCELREPGLP2']), (base_variables['RCELREPGL1731'] + 0)) and max((base_variables['RCELREPGL_P'] + base_variables['RCELREPGLP2']), (base_variables['RCELREPGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPGL_1() and RCELREPGL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGL_1(), (max((base_variables['RCELREPGL_P'] + base_variables['RCELREPGLP2']), (base_variables['RCELREPGL1731'] + 0)) and max((base_variables['RCELREPGL_P'] + base_variables['RCELREPGLP2']), (base_variables['RCELREPGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGL_1(), (max((base_variables['RCELREPGL_P'] + base_variables['RCELREPGLP2']), (base_variables['RCELREPGL1731'] + 0)) and max((base_variables['RCELREPGL_P'] + base_variables['RCELREPGLP2']), (base_variables['RCELREPGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGV_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPGV(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPGV(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGV():
        """
        Reduction Scellier  report  - 7GV
        """
        return (max(0, ((RCELREPGV_1() and RCELREPGV_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGV_1(), (max((base_variables['RCELREPGV_P'] + base_variables['RCELREPGVP2']), (base_variables['RCELREPGV1731'] + 0)) and max((base_variables['RCELREPGV_P'] + base_variables['RCELREPGVP2']), (base_variables['RCELREPGV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGV_1(), (max((base_variables['RCELREPGV_P'] + base_variables['RCELREPGVP2']), (base_variables['RCELREPGV1731'] + 0)) and max((base_variables['RCELREPGV_P'] + base_variables['RCELREPGVP2']), (base_variables['RCELREPGV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPGV_1() and RCELREPGV_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGV_1(), (max((base_variables['RCELREPGV_P'] + base_variables['RCELREPGVP2']), (base_variables['RCELREPGV1731'] + 0)) and max((base_variables['RCELREPGV_P'] + base_variables['RCELREPGVP2']), (base_variables['RCELREPGV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGV_1(), (max((base_variables['RCELREPGV_P'] + base_variables['RCELREPGVP2']), (base_variables['RCELREPGV1731'] + 0)) and max((base_variables['RCELREPGV_P'] + base_variables['RCELREPGVP2']), (base_variables['RCELREPGV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGK_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPGK(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPGK(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGK():
        """
        Reduction Scellier  report  - 7GJK
        """
        return (max(0, ((RCELREPGK_1() and RCELREPGK_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGK_1(), (max((base_variables['RCELREPGK_P'] + base_variables['RCELREPGKP2']), (base_variables['RCELREPGK1731'] + 0)) and max((base_variables['RCELREPGK_P'] + base_variables['RCELREPGKP2']), (base_variables['RCELREPGK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGK_1(), (max((base_variables['RCELREPGK_P'] + base_variables['RCELREPGKP2']), (base_variables['RCELREPGK1731'] + 0)) and max((base_variables['RCELREPGK_P'] + base_variables['RCELREPGKP2']), (base_variables['RCELREPGK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPGK_1() and RCELREPGK_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGK_1(), (max((base_variables['RCELREPGK_P'] + base_variables['RCELREPGKP2']), (base_variables['RCELREPGK1731'] + 0)) and max((base_variables['RCELREPGK_P'] + base_variables['RCELREPGKP2']), (base_variables['RCELREPGK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGK_1(), (max((base_variables['RCELREPGK_P'] + base_variables['RCELREPGKP2']), (base_variables['RCELREPGK1731'] + 0)) and max((base_variables['RCELREPGK_P'] + base_variables['RCELREPGKP2']), (base_variables['RCELREPGK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGJ_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPGJ(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPGJ(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPGJ():
        """
        Reduction Scellier  report  - 7GJ
        """
        return (max(0, ((RCELREPGJ_1() and RCELREPGJ_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGJ_1(), (max((base_variables['RCELREPGJ_P'] + base_variables['RCELREPGJP2']), (base_variables['RCELREPGJ1731'] + 0)) and max((base_variables['RCELREPGJ_P'] + base_variables['RCELREPGJP2']), (base_variables['RCELREPGJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGJ_1(), (max((base_variables['RCELREPGJ_P'] + base_variables['RCELREPGJP2']), (base_variables['RCELREPGJ1731'] + 0)) and max((base_variables['RCELREPGJ_P'] + base_variables['RCELREPGJP2']), (base_variables['RCELREPGJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPGJ_1() and RCELREPGJ_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPGJ_1(), (max((base_variables['RCELREPGJ_P'] + base_variables['RCELREPGJP2']), (base_variables['RCELREPGJ1731'] + 0)) and max((base_variables['RCELREPGJ_P'] + base_variables['RCELREPGJP2']), (base_variables['RCELREPGJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPGJ_1(), (max((base_variables['RCELREPGJ_P'] + base_variables['RCELREPGJP2']), (base_variables['RCELREPGJ1731'] + 0)) and max((base_variables['RCELREPGJ_P'] + base_variables['RCELREPGJP2']), (base_variables['RCELREPGJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYH_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYH(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYH(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYH():
        """
        Reduction Scellier  report  - 7YH
        """
        return (max(0, ((RCELREPYH_1() and RCELREPYH_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYH_1(), (max((base_variables['RCELREPYH_P'] + base_variables['RCELREPYHP2']), (base_variables['RCELREPYH1731'] + 0)) and max((base_variables['RCELREPYH_P'] + base_variables['RCELREPYHP2']), (base_variables['RCELREPYH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYH_1(), (max((base_variables['RCELREPYH_P'] + base_variables['RCELREPYHP2']), (base_variables['RCELREPYH1731'] + 0)) and max((base_variables['RCELREPYH_P'] + base_variables['RCELREPYHP2']), (base_variables['RCELREPYH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYH_1() and RCELREPYH_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYH_1(), (max((base_variables['RCELREPYH_P'] + base_variables['RCELREPYHP2']), (base_variables['RCELREPYH1731'] + 0)) and max((base_variables['RCELREPYH_P'] + base_variables['RCELREPYHP2']), (base_variables['RCELREPYH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYH_1(), (max((base_variables['RCELREPYH_P'] + base_variables['RCELREPYHP2']), (base_variables['RCELREPYH1731'] + 0)) and max((base_variables['RCELREPYH_P'] + base_variables['RCELREPYHP2']), (base_variables['RCELREPYH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYL_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYL(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - RCELREPYH_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYL(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - RCELREPYH_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYL():
        """
        Reduction Scellier  report  - 7YL
        """
        return (max(0, ((RCELREPYL_1() and RCELREPYL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYL_1(), (max((base_variables['RCELREPYL_P'] + base_variables['RCELREPYLP2']), (base_variables['RCELREPYL1731'] + 0)) and max((base_variables['RCELREPYL_P'] + base_variables['RCELREPYLP2']), (base_variables['RCELREPYL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYL_1(), (max((base_variables['RCELREPYL_P'] + base_variables['RCELREPYLP2']), (base_variables['RCELREPYL1731'] + 0)) and max((base_variables['RCELREPYL_P'] + base_variables['RCELREPYLP2']), (base_variables['RCELREPYL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYL_1() and RCELREPYL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYL_1(), (max((base_variables['RCELREPYL_P'] + base_variables['RCELREPYLP2']), (base_variables['RCELREPYL1731'] + 0)) and max((base_variables['RCELREPYL_P'] + base_variables['RCELREPYLP2']), (base_variables['RCELREPYL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYL_1(), (max((base_variables['RCELREPYL_P'] + base_variables['RCELREPYLP2']), (base_variables['RCELREPYL1731'] + 0)) and max((base_variables['RCELREPYL_P'] + base_variables['RCELREPYLP2']), (base_variables['RCELREPYL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYG_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYG(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYG(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYG():
        """
        Reduction Scellier  report  - 7YG
        """
        return (max(0, ((RCELREPYG_1() and RCELREPYG_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYG_1(), (max((base_variables['RCELREPYG_P'] + base_variables['RCELREPYGP2']), (base_variables['RCELREPYG1731'] + 0)) and max((base_variables['RCELREPYG_P'] + base_variables['RCELREPYGP2']), (base_variables['RCELREPYG1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYG_1(), (max((base_variables['RCELREPYG_P'] + base_variables['RCELREPYGP2']), (base_variables['RCELREPYG1731'] + 0)) and max((base_variables['RCELREPYG_P'] + base_variables['RCELREPYGP2']), (base_variables['RCELREPYG1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYG_1() and RCELREPYG_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYG_1(), (max((base_variables['RCELREPYG_P'] + base_variables['RCELREPYGP2']), (base_variables['RCELREPYG1731'] + 0)) and max((base_variables['RCELREPYG_P'] + base_variables['RCELREPYGP2']), (base_variables['RCELREPYG1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYG_1(), (max((base_variables['RCELREPYG_P'] + base_variables['RCELREPYGP2']), (base_variables['RCELREPYG1731'] + 0)) and max((base_variables['RCELREPYG_P'] + base_variables['RCELREPYGP2']), (base_variables['RCELREPYG1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYF_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYF(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYF(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYF():
        """
        Reduction Scellier  report  - 7YF
        """
        return (max(0, ((RCELREPYF_1() and RCELREPYF_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYF_1(), (max((base_variables['RCELREPYF_P'] + base_variables['RCELREPYFP2']), (base_variables['RCELREPYF1731'] + 0)) and max((base_variables['RCELREPYF_P'] + base_variables['RCELREPYFP2']), (base_variables['RCELREPYF1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYF_1(), (max((base_variables['RCELREPYF_P'] + base_variables['RCELREPYFP2']), (base_variables['RCELREPYF1731'] + 0)) and max((base_variables['RCELREPYF_P'] + base_variables['RCELREPYFP2']), (base_variables['RCELREPYF1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYF_1() and RCELREPYF_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYF_1(), (max((base_variables['RCELREPYF_P'] + base_variables['RCELREPYFP2']), (base_variables['RCELREPYF1731'] + 0)) and max((base_variables['RCELREPYF_P'] + base_variables['RCELREPYFP2']), (base_variables['RCELREPYF1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYF_1(), (max((base_variables['RCELREPYF_P'] + base_variables['RCELREPYFP2']), (base_variables['RCELREPYF1731'] + 0)) and max((base_variables['RCELREPYF_P'] + base_variables['RCELREPYFP2']), (base_variables['RCELREPYF1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYK_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYK(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYK(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYK():
        """
        Reduction Scellier  report  - 7YK
        """
        return (max(0, ((RCELREPYK_1() and RCELREPYK_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYK_1(), (max((base_variables['RCELREPYK_P'] + base_variables['RCELREPYKP2']), (base_variables['RCELREPYK1731'] + 0)) and max((base_variables['RCELREPYK_P'] + base_variables['RCELREPYKP2']), (base_variables['RCELREPYK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYK_1(), (max((base_variables['RCELREPYK_P'] + base_variables['RCELREPYKP2']), (base_variables['RCELREPYK1731'] + 0)) and max((base_variables['RCELREPYK_P'] + base_variables['RCELREPYKP2']), (base_variables['RCELREPYK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYK_1() and RCELREPYK_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYK_1(), (max((base_variables['RCELREPYK_P'] + base_variables['RCELREPYKP2']), (base_variables['RCELREPYK1731'] + 0)) and max((base_variables['RCELREPYK_P'] + base_variables['RCELREPYKP2']), (base_variables['RCELREPYK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYK_1(), (max((base_variables['RCELREPYK_P'] + base_variables['RCELREPYKP2']), (base_variables['RCELREPYK1731'] + 0)) and max((base_variables['RCELREPYK_P'] + base_variables['RCELREPYKP2']), (base_variables['RCELREPYK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYE_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYE(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYE(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYE():
        """
        Reduction Scellier  report  - 7YE
        """
        return (max(0, ((RCELREPYE_1() and RCELREPYE_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYE_1(), (max((base_variables['RCELREPYE_P'] + base_variables['RCELREPYEP2']), (base_variables['RCELREPYE1731'] + 0)) and max((base_variables['RCELREPYE_P'] + base_variables['RCELREPYEP2']), (base_variables['RCELREPYE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYE_1(), (max((base_variables['RCELREPYE_P'] + base_variables['RCELREPYEP2']), (base_variables['RCELREPYE1731'] + 0)) and max((base_variables['RCELREPYE_P'] + base_variables['RCELREPYEP2']), (base_variables['RCELREPYE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYE_1() and RCELREPYE_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYE_1(), (max((base_variables['RCELREPYE_P'] + base_variables['RCELREPYEP2']), (base_variables['RCELREPYE1731'] + 0)) and max((base_variables['RCELREPYE_P'] + base_variables['RCELREPYEP2']), (base_variables['RCELREPYE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYE_1(), (max((base_variables['RCELREPYE_P'] + base_variables['RCELREPYEP2']), (base_variables['RCELREPYE1731'] + 0)) and max((base_variables['RCELREPYE_P'] + base_variables['RCELREPYEP2']), (base_variables['RCELREPYE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYD_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYD(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYD(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYD():
        """
        Reduction Scellier  report  - 7YD
        """
        return (max(0, ((RCELREPYD_1() and RCELREPYD_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYD_1(), (max((base_variables['RCELREPYD_P'] + base_variables['RCELREPYDP2']), (base_variables['RCELREPYD1731'] + 0)) and max((base_variables['RCELREPYD_P'] + base_variables['RCELREPYDP2']), (base_variables['RCELREPYD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYD_1(), (max((base_variables['RCELREPYD_P'] + base_variables['RCELREPYDP2']), (base_variables['RCELREPYD1731'] + 0)) and max((base_variables['RCELREPYD_P'] + base_variables['RCELREPYDP2']), (base_variables['RCELREPYD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYD_1() and RCELREPYD_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYD_1(), (max((base_variables['RCELREPYD_P'] + base_variables['RCELREPYDP2']), (base_variables['RCELREPYD1731'] + 0)) and max((base_variables['RCELREPYD_P'] + base_variables['RCELREPYDP2']), (base_variables['RCELREPYD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYD_1(), (max((base_variables['RCELREPYD_P'] + base_variables['RCELREPYDP2']), (base_variables['RCELREPYD1731'] + 0)) and max((base_variables['RCELREPYD_P'] + base_variables['RCELREPYDP2']), (base_variables['RCELREPYD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYJ_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYJ(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYJ(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYJ():
        """
        Reduction Scellier  report  - 7YJ
        """
        return (max(0, ((RCELREPYJ_1() and RCELREPYJ_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYJ_1(), (max((base_variables['RCELREPYJ_P'] + base_variables['RCELREPYJP2']), (base_variables['RCELREPYJ1731'] + 0)) and max((base_variables['RCELREPYJ_P'] + base_variables['RCELREPYJP2']), (base_variables['RCELREPYJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYJ_1(), (max((base_variables['RCELREPYJ_P'] + base_variables['RCELREPYJP2']), (base_variables['RCELREPYJ1731'] + 0)) and max((base_variables['RCELREPYJ_P'] + base_variables['RCELREPYJP2']), (base_variables['RCELREPYJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYJ_1() and RCELREPYJ_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYJ_1(), (max((base_variables['RCELREPYJ_P'] + base_variables['RCELREPYJP2']), (base_variables['RCELREPYJ1731'] + 0)) and max((base_variables['RCELREPYJ_P'] + base_variables['RCELREPYJP2']), (base_variables['RCELREPYJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYJ_1(), (max((base_variables['RCELREPYJ_P'] + base_variables['RCELREPYJP2']), (base_variables['RCELREPYJ1731'] + 0)) and max((base_variables['RCELREPYJ_P'] + base_variables['RCELREPYJP2']), (base_variables['RCELREPYJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYC_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYC(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYC(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYC():
        """
        Reduction Scellier  report  - 7YC
        """
        return (max(0, ((RCELREPYC_1() and RCELREPYC_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYC_1(), (max((base_variables['RCELREPYC_P'] + base_variables['RCELREPYCP2']), (base_variables['RCELREPYC1731'] + 0)) and max((base_variables['RCELREPYC_P'] + base_variables['RCELREPYCP2']), (base_variables['RCELREPYC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYC_1(), (max((base_variables['RCELREPYC_P'] + base_variables['RCELREPYCP2']), (base_variables['RCELREPYC1731'] + 0)) and max((base_variables['RCELREPYC_P'] + base_variables['RCELREPYCP2']), (base_variables['RCELREPYC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYC_1() and RCELREPYC_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYC_1(), (max((base_variables['RCELREPYC_P'] + base_variables['RCELREPYCP2']), (base_variables['RCELREPYC1731'] + 0)) and max((base_variables['RCELREPYC_P'] + base_variables['RCELREPYCP2']), (base_variables['RCELREPYC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYC_1(), (max((base_variables['RCELREPYC_P'] + base_variables['RCELREPYCP2']), (base_variables['RCELREPYC1731'] + 0)) and max((base_variables['RCELREPYC_P'] + base_variables['RCELREPYCP2']), (base_variables['RCELREPYC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYB_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYB(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYB(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYB():
        """
        Reduction Scellier  report  - 7YB
        """
        return (max(0, ((RCELREPYB_1() and RCELREPYB_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYB_1(), (max((base_variables['RCELREPYB_P'] + base_variables['RCELREPYBP2']), (base_variables['RCELREPYB1731'] + 0)) and max((base_variables['RCELREPYB_P'] + base_variables['RCELREPYBP2']), (base_variables['RCELREPYB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYB_1(), (max((base_variables['RCELREPYB_P'] + base_variables['RCELREPYBP2']), (base_variables['RCELREPYB1731'] + 0)) and max((base_variables['RCELREPYB_P'] + base_variables['RCELREPYBP2']), (base_variables['RCELREPYB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYB_1() and RCELREPYB_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYB_1(), (max((base_variables['RCELREPYB_P'] + base_variables['RCELREPYBP2']), (base_variables['RCELREPYB1731'] + 0)) and max((base_variables['RCELREPYB_P'] + base_variables['RCELREPYBP2']), (base_variables['RCELREPYB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYB_1(), (max((base_variables['RCELREPYB_P'] + base_variables['RCELREPYBP2']), (base_variables['RCELREPYB1731'] + 0)) and max((base_variables['RCELREPYB_P'] + base_variables['RCELREPYBP2']), (base_variables['RCELREPYB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYI_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYI(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYI(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYI():
        """
        Reduction Scellier  report  - 7YI
        """
        return (max(0, ((RCELREPYI_1() and RCELREPYI_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYI_1(), (max((base_variables['RCELREPYI_P'] + base_variables['RCELREPYIP2']), (base_variables['RCELREPYI1731'] + 0)) and max((base_variables['RCELREPYI_P'] + base_variables['RCELREPYIP2']), (base_variables['RCELREPYI1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYI_1(), (max((base_variables['RCELREPYI_P'] + base_variables['RCELREPYIP2']), (base_variables['RCELREPYI1731'] + 0)) and max((base_variables['RCELREPYI_P'] + base_variables['RCELREPYIP2']), (base_variables['RCELREPYI1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYI_1() and RCELREPYI_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYI_1(), (max((base_variables['RCELREPYI_P'] + base_variables['RCELREPYIP2']), (base_variables['RCELREPYI1731'] + 0)) and max((base_variables['RCELREPYI_P'] + base_variables['RCELREPYIP2']), (base_variables['RCELREPYI1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYI_1(), (max((base_variables['RCELREPYI_P'] + base_variables['RCELREPYIP2']), (base_variables['RCELREPYI1731'] + 0)) and max((base_variables['RCELREPYI_P'] + base_variables['RCELREPYIP2']), (base_variables['RCELREPYI1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYA_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(ACELREPYA(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(ACELREPYA(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELREPYA():
        """
        Reduction Scellier  report  - 7YA
        """
        return (max(0, ((RCELREPYA_1() and RCELREPYA_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYA_1(), (max((base_variables['RCELREPYA_P'] + base_variables['RCELREPYAP2']), (base_variables['RCELREPYA1731'] + 0)) and max((base_variables['RCELREPYA_P'] + base_variables['RCELREPYAP2']), (base_variables['RCELREPYA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYA_1(), (max((base_variables['RCELREPYA_P'] + base_variables['RCELREPYAP2']), (base_variables['RCELREPYA1731'] + 0)) and max((base_variables['RCELREPYA_P'] + base_variables['RCELREPYAP2']), (base_variables['RCELREPYA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELREPYA_1() and RCELREPYA_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELREPYA_1(), (max((base_variables['RCELREPYA_P'] + base_variables['RCELREPYAP2']), (base_variables['RCELREPYA1731'] + 0)) and max((base_variables['RCELREPYA_P'] + base_variables['RCELREPYAP2']), (base_variables['RCELREPYA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELREPYA_1(), (max((base_variables['RCELREPYA_P'] + base_variables['RCELREPYAP2']), (base_variables['RCELREPYA1731'] + 0)) and max((base_variables['RCELREPYA_P'] + base_variables['RCELREPYAP2']), (base_variables['RCELREPYA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELHM_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_HM(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]))), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_HM(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]))), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELHM():
        """
        Scellier DOM 2009 2010 ds plaf -Reduc apres imputation sur droits dus
        """
        return (max(0, ((RCELHM_1() and RCELHM_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELHM_1(), (max((base_variables['RCELHM_P'] + base_variables['RCELHMP2']), (base_variables['RCELHM1731'] + 0)) and max((base_variables['RCELHM_P'] + base_variables['RCELHMP2']), (base_variables['RCELHM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELHM_1(), (max((base_variables['RCELHM_P'] + base_variables['RCELHMP2']), (base_variables['RCELHM1731'] + 0)) and max((base_variables['RCELHM_P'] + base_variables['RCELHMP2']), (base_variables['RCELHM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELHM_1() and RCELHM_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELHM_1(), (max((base_variables['RCELHM_P'] + base_variables['RCELHMP2']), (base_variables['RCELHM1731'] + 0)) and max((base_variables['RCELHM_P'] + base_variables['RCELHMP2']), (base_variables['RCELHM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELHM_1(), (max((base_variables['RCELHM_P'] + base_variables['RCELHMP2']), (base_variables['RCELHM1731'] + 0)) and max((base_variables['RCELHM_P'] + base_variables['RCELHMP2']), (base_variables['RCELHM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELHL_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_HL(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_HL(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELHL():
        """
        Scellier metro DOM  hors plaf -Reduc apres imputation sur droits dus
        """
        return (max(0, ((RCELHL_1() and RCELHL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELHL_1(), (max((base_variables['RCELHL_P'] + base_variables['RCELHLP2']), (base_variables['RCELHL1731'] + 0)) and max((base_variables['RCELHL_P'] + base_variables['RCELHLP2']), (base_variables['RCELHL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELHL_1(), (max((base_variables['RCELHL_P'] + base_variables['RCELHLP2']), (base_variables['RCELHL1731'] + 0)) and max((base_variables['RCELHL_P'] + base_variables['RCELHLP2']), (base_variables['RCELHL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELHL_1() and RCELHL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELHL_1(), (max((base_variables['RCELHL_P'] + base_variables['RCELHLP2']), (base_variables['RCELHL1731'] + 0)) and max((base_variables['RCELHL_P'] + base_variables['RCELHLP2']), (base_variables['RCELHL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELHL_1(), (max((base_variables['RCELHL_P'] + base_variables['RCELHLP2']), (base_variables['RCELHL1731'] + 0)) and max((base_variables['RCELHL_P'] + base_variables['RCELHLP2']), (base_variables['RCELHL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELHNO_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_HNO(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_HNO(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELHNO():
        """
        Scellier 7HN 7HO -Reduction apres imputation sur les droits dus
        """
        return (max(0, ((RCELHNO_1() and RCELHNO_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELHNO_1(), (max((base_variables['RCELHNO_P'] + base_variables['RCELHNOP2']), (base_variables['RCELHNO1731'] + 0)) and max((base_variables['RCELHNO_P'] + base_variables['RCELHNOP2']), (base_variables['RCELHNO1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELHNO_1(), (max((base_variables['RCELHNO_P'] + base_variables['RCELHNOP2']), (base_variables['RCELHNO1731'] + 0)) and max((base_variables['RCELHNO_P'] + base_variables['RCELHNOP2']), (base_variables['RCELHNO1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELHNO_1() and RCELHNO_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELHNO_1(), (max((base_variables['RCELHNO_P'] + base_variables['RCELHNOP2']), (base_variables['RCELHNO1731'] + 0)) and max((base_variables['RCELHNO_P'] + base_variables['RCELHNOP2']), (base_variables['RCELHNO1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELHNO_1(), (max((base_variables['RCELHNO_P'] + base_variables['RCELHNOP2']), (base_variables['RCELHNO1731'] + 0)) and max((base_variables['RCELHNO_P'] + base_variables['RCELHNOP2']), (base_variables['RCELHNO1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELHJK_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_HJK(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_HJK(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELHJK():
        """
        Scellier 7HJ 7HK -Reduction apres imputation sur les droits dus
        """
        return (max(0, ((RCELHJK_1() and RCELHJK_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELHJK_1(), (max((base_variables['RCELHJK_P'] + base_variables['RCELHJKP2']), (base_variables['RCELHJK1731'] + 0)) and max((base_variables['RCELHJK_P'] + base_variables['RCELHJKP2']), (base_variables['RCELHJK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELHJK_1(), (max((base_variables['RCELHJK_P'] + base_variables['RCELHJKP2']), (base_variables['RCELHJK1731'] + 0)) and max((base_variables['RCELHJK_P'] + base_variables['RCELHJKP2']), (base_variables['RCELHJK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELHJK_1() and RCELHJK_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELHJK_1(), (max((base_variables['RCELHJK_P'] + base_variables['RCELHJKP2']), (base_variables['RCELHJK1731'] + 0)) and max((base_variables['RCELHJK_P'] + base_variables['RCELHJKP2']), (base_variables['RCELHJK1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELHJK_1(), (max((base_variables['RCELHJK_P'] + base_variables['RCELHJKP2']), (base_variables['RCELHJK1731'] + 0)) and max((base_variables['RCELHJK_P'] + base_variables['RCELHJKP2']), (base_variables['RCELHJK1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELNQ_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_NQ(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_NQ(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELNQ():
        """
        Inv. Scellier av 2011 COM- red. apres imputation sur droits dus
        """
        return (max(0, ((RCELNQ_1() and RCELNQ_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELNQ_1(), (max((base_variables['RCELNQ_P'] + base_variables['RCELNQP2']), (base_variables['RCELNQ1731'] + 0)) and max((base_variables['RCELNQ_P'] + base_variables['RCELNQP2']), (base_variables['RCELNQ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELNQ_1(), (max((base_variables['RCELNQ_P'] + base_variables['RCELNQP2']), (base_variables['RCELNQ1731'] + 0)) and max((base_variables['RCELNQ_P'] + base_variables['RCELNQP2']), (base_variables['RCELNQ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELNQ_1() and RCELNQ_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELNQ_1(), (max((base_variables['RCELNQ_P'] + base_variables['RCELNQP2']), (base_variables['RCELNQ1731'] + 0)) and max((base_variables['RCELNQ_P'] + base_variables['RCELNQP2']), (base_variables['RCELNQ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELNQ_1(), (max((base_variables['RCELNQ_P'] + base_variables['RCELNQP2']), (base_variables['RCELNQ1731'] + 0)) and max((base_variables['RCELNQ_P'] + base_variables['RCELNQP2']), (base_variables['RCELNQ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELNBGL_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_NBGL(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_NBGL(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELNBGL():
        """
        Scellier 2011 hors COM -Reduc apres imputation sur droits dus
        """
        return (max(0, ((RCELNBGL_1() and RCELNBGL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELNBGL_1(), (max((base_variables['RCELNBGL_P'] + base_variables['RCELNBGLP2']), (base_variables['RCELNBGL1731'] + 0)) and max((base_variables['RCELNBGL_P'] + base_variables['RCELNBGLP2']), (base_variables['RCELNBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELNBGL_1(), (max((base_variables['RCELNBGL_P'] + base_variables['RCELNBGLP2']), (base_variables['RCELNBGL1731'] + 0)) and max((base_variables['RCELNBGL_P'] + base_variables['RCELNBGLP2']), (base_variables['RCELNBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELNBGL_1() and RCELNBGL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELNBGL_1(), (max((base_variables['RCELNBGL_P'] + base_variables['RCELNBGLP2']), (base_variables['RCELNBGL1731'] + 0)) and max((base_variables['RCELNBGL_P'] + base_variables['RCELNBGLP2']), (base_variables['RCELNBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELNBGL_1(), (max((base_variables['RCELNBGL_P'] + base_variables['RCELNBGLP2']), (base_variables['RCELNBGL1731'] + 0)) and max((base_variables['RCELNBGL_P'] + base_variables['RCELNBGLP2']), (base_variables['RCELNBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELCOM_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_COM(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_COM(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELCOM():
        """
        Scellier 2011 COM -Reduc apres imputation sur droits dus
        """
        return (max(0, ((RCELCOM_1() and RCELCOM_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELCOM_1(), (max((base_variables['RCELCOM_P'] + base_variables['RCELCOMP2']), (base_variables['RCELCOM1731'] + 0)) and max((base_variables['RCELCOM_P'] + base_variables['RCELCOMP2']), (base_variables['RCELCOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and base_variables['ART1731BIS'] and min(RCELCOM_1(), (max((base_variables['RCELCOM_P'] + base_variables['RCELCOMP2']), (base_variables['RCELCOM1731'] + 0)) and max((base_variables['RCELCOM_P'] + base_variables['RCELCOMP2']), (base_variables['RCELCOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'] * (1 - positif((null((saisie_variables.get('CMAJ2', 0) - 8)) + null((saisie_variables.get('CMAJ2', 0) - 11)))))))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELCOM_1() and RCELCOM_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELCOM_1(), (max((base_variables['RCELCOM_P'] + base_variables['RCELCOMP2']), (base_variables['RCELCOM1731'] + 0)) and max((base_variables['RCELCOM_P'] + base_variables['RCELCOMP2']), (base_variables['RCELCOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and base_variables['ART1731BIS'] and min(RCELCOM_1(), (max((base_variables['RCELCOM_P'] + base_variables['RCELCOMP2']), (base_variables['RCELCOM1731'] + 0)) and max((base_variables['RCELCOM_P'] + base_variables['RCELCOMP2']), (base_variables['RCELCOM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'] * (1 - positif((null((saisie_variables.get('CMAJ2', 0) - 8)) + null((saisie_variables.get('CMAJ2', 0) - 11)))))))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_2011(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_2011(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL():
        """
        Scellier 2011 hors COM -Reduc apres imputation sur droits dus
        """
        return (max(0, ((RCEL_1() and RCEL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCEL_1(), (max((base_variables['RCEL_P'] + base_variables['RCELP2']), (base_variables['RCEL1731'] + 0)) and max((base_variables['RCEL_P'] + base_variables['RCELP2']), (base_variables['RCEL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCEL_1(), (max((base_variables['RCEL_P'] + base_variables['RCELP2']), (base_variables['RCEL1731'] + 0)) and max((base_variables['RCEL_P'] + base_variables['RCELP2']), (base_variables['RCEL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCEL_1() and RCEL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCEL_1(), (max((base_variables['RCEL_P'] + base_variables['RCELP2']), (base_variables['RCEL1731'] + 0)) and max((base_variables['RCEL_P'] + base_variables['RCELP2']), (base_variables['RCEL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCEL_1(), (max((base_variables['RCEL_P'] + base_variables['RCELP2']), (base_variables['RCEL1731'] + 0)) and max((base_variables['RCEL_P'] + base_variables['RCELP2']), (base_variables['RCEL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELJP_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_JP(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_JP(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELJP():
        """
        Inv. Scellier av 2012 COM- red. apres imputation sur droits dus
        """
        return (max(0, ((RCELJP_1() and RCELJP_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELJP_1(), (max((base_variables['RCELJP_P'] + base_variables['RCELJPP2']), (base_variables['RCELJP1731'] + 0)) and max((base_variables['RCELJP_P'] + base_variables['RCELJPP2']), (base_variables['RCELJP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELJP_1(), (max((base_variables['RCELJP_P'] + base_variables['RCELJPP2']), (base_variables['RCELJP1731'] + 0)) and max((base_variables['RCELJP_P'] + base_variables['RCELJPP2']), (base_variables['RCELJP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELJP_1() and RCELJP_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELJP_1(), (max((base_variables['RCELJP_P'] + base_variables['RCELJPP2']), (base_variables['RCELJP1731'] + 0)) and max((base_variables['RCELJP_P'] + base_variables['RCELJPP2']), (base_variables['RCELJP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELJP_1(), (max((base_variables['RCELJP_P'] + base_variables['RCELJPP2']), (base_variables['RCELJP1731'] + 0)) and max((base_variables['RCELJP_P'] + base_variables['RCELJPP2']), (base_variables['RCELJP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELJBGL_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_JBGL(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1() - RCELJP_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_JBGL(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1() - RCELJP_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELJBGL():
        """
        Scellier 2012 hors COM -Reduc apres imputation sur droits dus
        """
        return (max(0, ((RCELJBGL_1() and RCELJBGL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELJBGL_1(), (max((base_variables['RCELJBGL_P'] + base_variables['RCELJBGLP2']), (base_variables['RCELJBGL1731'] + 0)) and max((base_variables['RCELJBGL_P'] + base_variables['RCELJBGLP2']), (base_variables['RCELJBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELJBGL_1(), (max((base_variables['RCELJBGL_P'] + base_variables['RCELJBGLP2']), (base_variables['RCELJBGL1731'] + 0)) and max((base_variables['RCELJBGL_P'] + base_variables['RCELJBGLP2']), (base_variables['RCELJBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELJBGL_1() and RCELJBGL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELJBGL_1(), (max((base_variables['RCELJBGL_P'] + base_variables['RCELJBGLP2']), (base_variables['RCELJBGL1731'] + 0)) and max((base_variables['RCELJBGL_P'] + base_variables['RCELJBGLP2']), (base_variables['RCELJBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELJBGL_1(), (max((base_variables['RCELJBGL_P'] + base_variables['RCELJBGLP2']), (base_variables['RCELJBGL1731'] + 0)) and max((base_variables['RCELJBGL_P'] + base_variables['RCELJBGLP2']), (base_variables['RCELJBGL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELJOQR_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_JOQR(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1() - RCELJP_1() - RCELJBGL_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_JOQR(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1() - RCELJP_1() - RCELJBGL_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELJOQR():
        """
        Scellier 2012 COM -Reduc apres imputation sur droits dus
        """
        return (max(0, ((RCELJOQR_1() and RCELJOQR_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELJOQR_1(), (max((base_variables['RCELJOQR_P'] + base_variables['RCELJOQRP2']), (base_variables['RCELJOQR1731'] + 0)) and max((base_variables['RCELJOQR_P'] + base_variables['RCELJOQRP2']), (base_variables['RCELJOQR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELJOQR_1(), (max((base_variables['RCELJOQR_P'] + base_variables['RCELJOQRP2']), (base_variables['RCELJOQR1731'] + 0)) and max((base_variables['RCELJOQR_P'] + base_variables['RCELJOQRP2']), (base_variables['RCELJOQR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELJOQR_1() and RCELJOQR_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELJOQR_1(), (max((base_variables['RCELJOQR_P'] + base_variables['RCELJOQRP2']), (base_variables['RCELJOQR1731'] + 0)) and max((base_variables['RCELJOQR_P'] + base_variables['RCELJOQRP2']), (base_variables['RCELJOQR1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELJOQR_1(), (max((base_variables['RCELJOQR_P'] + base_variables['RCELJOQRP2']), (base_variables['RCELJOQR1731'] + 0)) and max((base_variables['RCELJOQR_P'] + base_variables['RCELJOQRP2']), (base_variables['RCELJOQR1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL2012_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_2012(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1() - RCELJP_1() - RCELJBGL_1() - RCELJOQR_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_2012(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1() - RCELJP_1() - RCELJBGL_1() - RCELJOQR_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCEL2012():
        """
        Scellier 2012 hors COM -Reduc apres imputation sur droits dus
        """
        return (max(0, ((RCEL2012_1() and RCEL2012_1() * (1 - base_variables['ART1731BIS'])) + (min(RCEL2012_1(), (max((base_variables['RCEL2012_P'] + base_variables['RCEL2012P2']), (base_variables['RCEL20121731'] + 0)) and max((base_variables['RCEL2012_P'] + base_variables['RCEL2012P2']), (base_variables['RCEL20121731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCEL2012_1(), (max((base_variables['RCEL2012_P'] + base_variables['RCEL2012P2']), (base_variables['RCEL20121731'] + 0)) and max((base_variables['RCEL2012_P'] + base_variables['RCEL2012P2']), (base_variables['RCEL20121731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCEL2012_1() and RCEL2012_1() * (1 - base_variables['ART1731BIS'])) + (min(RCEL2012_1(), (max((base_variables['RCEL2012_P'] + base_variables['RCEL2012P2']), (base_variables['RCEL20121731'] + 0)) and max((base_variables['RCEL2012_P'] + base_variables['RCEL2012P2']), (base_variables['RCEL20121731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCEL2012_1(), (max((base_variables['RCEL2012_P'] + base_variables['RCEL2012P2']), (base_variables['RCEL20121731'] + 0)) and max((base_variables['RCEL2012_P'] + base_variables['RCEL2012P2']), (base_variables['RCEL20121731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELFD_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_FD(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1() - RCELJP_1() - RCELJBGL_1() - RCELJOQR_1() - RCEL2012_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_FD(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1() - RCELJP_1() - RCELJBGL_1() - RCELJOQR_1() - RCEL2012_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELFD():
        """
        Scellier 2013 polynesie -Reduc apres imputation sur droits dus
        """
        return (max(0, ((RCELFD_1() and RCELFD_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELFD_1(), (max((base_variables['RCELFD_P'] + base_variables['RCELFDP2']), (base_variables['RCELFD1731'] + 0)) and max((base_variables['RCELFD_P'] + base_variables['RCELFDP2']), (base_variables['RCELFD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELFD_1(), (max((base_variables['RCELFD_P'] + base_variables['RCELFDP2']), (base_variables['RCELFD1731'] + 0)) and max((base_variables['RCELFD_P'] + base_variables['RCELFDP2']), (base_variables['RCELFD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELFD_1() and RCELFD_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELFD_1(), (max((base_variables['RCELFD_P'] + base_variables['RCELFDP2']), (base_variables['RCELFD1731'] + 0)) and max((base_variables['RCELFD_P'] + base_variables['RCELFDP2']), (base_variables['RCELFD1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELFD_1(), (max((base_variables['RCELFD_P'] + base_variables['RCELFDP2']), (base_variables['RCELFD1731'] + 0)) and max((base_variables['RCELFD_P'] + base_variables['RCELFDP2']), (base_variables['RCELFD1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELFABC_1():
        """
        reduc non plaf. art 1731bis
        """
        return (max(min(RCEL_FABC(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1() - RCELJP_1() - RCELJBGL_1() - RCELJOQR_1() - RCEL2012_1() - RCELFD_1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(RCEL_FABC(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELRREDSOM() - somme([RCELREPHS_1(), RCELREPHR_1(), RCELREPHU_1(), RCELREPHT_1(), RCELREPHZ_1(), RCELREPHX_1(), RCELREPHW_1(), RCELREPHV_1(), RCELREPHF_1(), RCELREPHE_1(), RCELREPHD_1(), RCELREPHH_1(), RCELREPHG_1(), RCELREPHB_1(), RCELREPHA_1()]) - somme([RCELREPGU_1(), RCELREPGX_1(), RCELREPGT_1(), RCELREPGS_1(), RCELREPGW_1(), RCELREPGP_1(), RCELREPGL_1(), RCELREPGV_1(), RCELREPGK_1(), RCELREPGJ_1()]) - somme([RCELREPYH_1(), RCELREPYL_1(), RCELREPYG_1(), RCELREPYF_1(), RCELREPYK_1(), RCELREPYE_1(), RCELREPYD_1(), RCELREPYJ_1(), RCELREPYC_1(), RCELREPYB_1(), RCELREPYI_1(), RCELREPYA_1()]) - RCELHM_1() - RCELHL_1() - RCELHNO_1() - RCELHJK_1() - RCELNQ_1() - RCELNBGL_1() - RCELCOM_1() - RCEL_1() - RCELJP_1() - RCELJBGL_1() - RCELJOQR_1() - RCEL2012_1() - RCELFD_1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELFABC():
        """
        Scellier 2013  -Reduc apres imputation sur droits dus
        """
        return (max(0, ((RCELFABC_1() and RCELFABC_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELFABC_1(), (max((base_variables['RCELFABC_P'] + base_variables['RCELFABCP2']), (base_variables['RCELFABC1731'] + 0)) and max((base_variables['RCELFABC_P'] + base_variables['RCELFABCP2']), (base_variables['RCELFABC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELFABC_1(), (max((base_variables['RCELFABC_P'] + base_variables['RCELFABCP2']), (base_variables['RCELFABC1731'] + 0)) and max((base_variables['RCELFABC_P'] + base_variables['RCELFABCP2']), (base_variables['RCELFABC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RCELFABC_1() and RCELFABC_1() * (1 - base_variables['ART1731BIS'])) + (min(RCELFABC_1(), (max((base_variables['RCELFABC_P'] + base_variables['RCELFABCP2']), (base_variables['RCELFABC1731'] + 0)) and max((base_variables['RCELFABC_P'] + base_variables['RCELFABCP2']), (base_variables['RCELFABC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCELFABC_1(), (max((base_variables['RCELFABC_P'] + base_variables['RCELFABCP2']), (base_variables['RCELFABC1731'] + 0)) and max((base_variables['RCELFABC_P'] + base_variables['RCELFABCP2']), (base_variables['RCELFABC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RCELTOT():
        """
        Total des reductions Scellier : cf ordre d imputation et calcul de RED
        """
        return (RCELRREDSOM() + somme([RCELREPHS(), RCELREPHR(), RCELREPHU(), RCELREPHT(), RCELREPHZ(), RCELREPHX(), RCELREPHW(), RCELREPHV(), RCELREPHF(), RCELREPHE(), RCELREPHD(), RCELREPHH(), RCELREPHG(), RCELREPHB(), RCELREPHA()]) + somme([RCELREPGU(), RCELREPGX(), RCELREPGT(), RCELREPGS(), RCELREPGW(), RCELREPGP(), RCELREPGL(), RCELREPGV(), RCELREPGK(), RCELREPGJ()]) + somme([RCELREPYH(), RCELREPYL(), RCELREPYG(), RCELREPYF(), RCELREPYK(), RCELREPYE(), RCELREPYD(), RCELREPYJ(), RCELREPYC(), RCELREPYB(), RCELREPYI(), RCELREPYA()]) + RCELHM() + RCELHL() + RCELHNO() + RCELHJK() + RCELNQ() + RCELNBGL() + RCELCOM() + RCEL() + RCELJP() + RCELJBGL() + RCELJOQR() + RCEL2012() + RCELFD() + RCELFABC())

    @cache_result
    def RREDMEUB_1():
        """
        Pour alleger formule : Reduction report loc meub non pro
        """
        return max(min(AREDMEUB(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT())), 0)

    @cache_result
    def RREDMEUB():
        """
        Invest. locations meublees non pro - report reduction - reduction
        """
        return max(0, ((RREDMEUB_1() and RREDMEUB_1() * (1 - base_variables['ART1731BIS'])) + (min(RREDMEUB_1(), (max((base_variables['RREDMEUB_P'] + base_variables['RREDMEUBP2']), (base_variables['RREDMEUB1731'] + 0)) and max((base_variables['RREDMEUB_P'] + base_variables['RREDMEUBP2']), (base_variables['RREDMEUB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RREDMEUB_1(), (max((base_variables['RREDMEUB_P'] + base_variables['RREDMEUBP2']), (base_variables['RREDMEUB1731'] + 0)) and max((base_variables['RREDMEUB_P'] + base_variables['RREDMEUBP2']), (base_variables['RREDMEUB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RREDREP_1():
        """
        pour alleger prog - Inv. loc. meublees non pro - report (7IU) - reduc.
        """
        return max(min(AREDREP(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB())), 0)

    @cache_result
    def RREDREP():
        """
        Invest. loc. meublees non pro - report reduction (7IU) - reduction
        """
        return max(0, ((RREDREP_1() and RREDREP_1() * (1 - base_variables['ART1731BIS'])) + (min(RREDREP_1(), (max((base_variables['RREDREP_P'] + base_variables['RREDREPP2']), (base_variables['RREDREP1731'] + 0)) and max((base_variables['RREDREP_P'] + base_variables['RREDREPP2']), (base_variables['RREDREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RREDREP_1(), (max((base_variables['RREDREP_P'] + base_variables['RREDREPP2']), (base_variables['RREDREP1731'] + 0)) and max((base_variables['RREDREP_P'] + base_variables['RREDREPP2']), (base_variables['RREDREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMIX_1():
        """
        Pour alleger prog - Inv. loc. meublees non pro - report (7IX) - reduc
        """
        return max(min(AILMIX(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP())), 0)

    @cache_result
    def RILMIX():
        """
        Invest. loc. meublees non pro - report reduction (7IX) - reduction
        """
        return max(0, ((RILMIX_1() and RILMIX_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMIX_1(), (max((base_variables['RILMIX_P'] + base_variables['RILMIXP2']), (base_variables['RILMIX1731'] + 0)) and max((base_variables['RILMIX_P'] + base_variables['RILMIXP2']), (base_variables['RILMIX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMIX_1(), (max((base_variables['RILMIX_P'] + base_variables['RILMIXP2']), (base_variables['RILMIX1731'] + 0)) and max((base_variables['RILMIX_P'] + base_variables['RILMIXP2']), (base_variables['RILMIX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMIY_1():
        """
        Pour alleger prog - Inv. loc. meublees non pro - report (7IY) - reduc
        """
        return max(min(AILMIY(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX())), 0)

    @cache_result
    def RILMIY():
        """
        Invest. loc. meublees non pro - report reduction (7IY) - reduction
        """
        return max(0, ((RILMIY_1() and RILMIY_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMIY_1(), (max((base_variables['RILMIY_P'] + base_variables['RILMIYP2']), (base_variables['RILMIY1731'] + 0)) and max((base_variables['RILMIY_P'] + base_variables['RILMIYP2']), (base_variables['RILMIY1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMIY_1(), (max((base_variables['RILMIY_P'] + base_variables['RILMIYP2']), (base_variables['RILMIY1731'] + 0)) and max((base_variables['RILMIY_P'] + base_variables['RILMIYP2']), (base_variables['RILMIY1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMPA():
        """
        Invest. loc. meublees non pro - report reduction (7PA) - reduction
        """
        return max(min(AILMPA(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY())), 0)

    @cache_result
    def RINVRED_1():
        """
        Pour alleger la prog Inv. loc. meublees non pro - report (7IT) - reduc
        """
        return max(min(AINVRED(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA())), 0)

    @cache_result
    def RINVRED():
        """
        Invest. loc. meublees non pro - report reduction (7IT) - reduction
        """
        return max(0, ((RINVRED_1() and RINVRED_1() * (1 - base_variables['ART1731BIS'])) + (min(RINVRED_1(), (max((base_variables['RINVRED_P'] + base_variables['RINVREDP2']), (base_variables['RINVRED1731'] + 0)) and max((base_variables['RINVRED_P'] + base_variables['RINVREDP2']), (base_variables['RINVRED1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RINVRED_1(), (max((base_variables['RINVRED_P'] + base_variables['RINVREDP2']), (base_variables['RINVRED1731'] + 0)) and max((base_variables['RINVRED_P'] + base_variables['RINVREDP2']), (base_variables['RINVRED1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMIH_1():
        """
        Pour alleger prog-Inv. loc. meublees non pro - report (7IH) - reduc
        """
        return max(min(AILMIH(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED())), 0)

    @cache_result
    def RILMIH():
        """
        Invest. loc. meublees non pro - report reduction (7IH) - reduction
        """
        return max(0, ((RILMIH_1() and RILMIH_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMIH_1(), (max((base_variables['RILMIH_P'] + base_variables['RILMIHP2']), (base_variables['RILMIH1731'] + 0)) and max((base_variables['RILMIH_P'] + base_variables['RILMIHP2']), (base_variables['RILMIH1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMIH_1(), (max((base_variables['RILMIH_P'] + base_variables['RILMIHP2']), (base_variables['RILMIH1731'] + 0)) and max((base_variables['RILMIH_P'] + base_variables['RILMIHP2']), (base_variables['RILMIH1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMJC_1():
        """
        pour alleger prog - Inv.. loc. meublees non pro - report (7JC) - reduc
        """
        return max(min(AILMJC(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH())), 0)

    @cache_result
    def RILMJC():
        """
        Invest. loc. meublees non pro - report reduction (7JC) - reduction
        """
        return max(0, ((RILMJC_1() and RILMJC_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMJC_1(), (max((base_variables['RILMJC_P'] + base_variables['RILMJCP2']), (base_variables['RILMJC1731'] + 0)) and max((base_variables['RILMJC_P'] + base_variables['RILMJCP2']), (base_variables['RILMJC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMJC_1(), (max((base_variables['RILMJC_P'] + base_variables['RILMJCP2']), (base_variables['RILMJC1731'] + 0)) and max((base_variables['RILMJC_P'] + base_variables['RILMJCP2']), (base_variables['RILMJC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMPB():
        """
        Invest. loc. meublees non pro - report reduction (7PB) - reduction
        """
        return max(min(AILMPB(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC())), 0)

    @cache_result
    def RILMIZ_1():
        """
        Pour alleger prog - Inv. loc. meublees non pro - report (7IZ) - reduc
        """
        return max(min(AILMIZ(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB())), 0)

    @cache_result
    def RILMIZ():
        """
        Invest. loc. meublees non pro - report reduction (7IZ) - reduction
        """
        return max(0, ((RILMIZ_1() and RILMIZ_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMIZ_1(), (max((base_variables['RILMIZ_P'] + base_variables['RILMIZP2']), (base_variables['RILMIZ1731'] + 0)) and max((base_variables['RILMIZ_P'] + base_variables['RILMIZP2']), (base_variables['RILMIZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMIZ_1(), (max((base_variables['RILMIZ_P'] + base_variables['RILMIZP2']), (base_variables['RILMIZ1731'] + 0)) and max((base_variables['RILMIZ_P'] + base_variables['RILMIZP2']), (base_variables['RILMIZ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMJI_1():
        """
        pour alleger prog - Inv.. loc. meublees non pro - report (7JI) - reduc
        """
        return max(min(AILMJI(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ())), 0)

    @cache_result
    def RILMJI():
        """
        Invest. loc. meublees non pro - report reduction (7JI) - reduction
        """
        return max(0, ((RILMJI_1() and RILMJI_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMJI_1(), (max((base_variables['RILMJI_P'] + base_variables['RILMJIP2']), (base_variables['RILMJI1731'] + 0)) and max((base_variables['RILMJI_P'] + base_variables['RILMJIP2']), (base_variables['RILMJI1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMJI_1(), (max((base_variables['RILMJI_P'] + base_variables['RILMJIP2']), (base_variables['RILMJI1731'] + 0)) and max((base_variables['RILMJI_P'] + base_variables['RILMJIP2']), (base_variables['RILMJI1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMPC():
        """
        Invest. loc. meublees non pro - report reduction (7PC) - reduction
        """
        return max(min(AILMPC(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI())), 0)

    @cache_result
    def RILMJS_1():
        """
        pour alleger prog - Inv.. loc. meublees non pro - report (7JS) - reduc
        """
        return max(min(AILMJS(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC())), 0)

    @cache_result
    def RILMJS():
        """
        Invest. loc. meublees non pro - report reduction (7JS) - reduction
        """
        return max(0, ((RILMJS_1() and RILMJS_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMJS_1(), (max((base_variables['RILMJS_P'] + base_variables['RILMJSP2']), (base_variables['RILMJS1731'] + 0)) and max((base_variables['RILMJS_P'] + base_variables['RILMJSP2']), (base_variables['RILMJS1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMJS_1(), (max((base_variables['RILMJS_P'] + base_variables['RILMJSP2']), (base_variables['RILMJS1731'] + 0)) and max((base_variables['RILMJS_P'] + base_variables['RILMJSP2']), (base_variables['RILMJS1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMPD():
        """
        Invest. loc. meublees non pro - report reduction (7PD) - reduction
        """
        return max(min(AILMPD(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS())), 0)

    @cache_result
    def RILMPE():
        """
        Invest. loc. meublees non pro - report reduction (7PE) - reduction
        """
        return max(min(AILMPE(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD())), 0)

    @cache_result
    def RMEUBLE_1():
        """
        pour alleger prog - Inv. loc. meublees non pro - report 2009 - reduc.
        """
        return max(min(MEUBLERET(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE())), 0)

    @cache_result
    def RMEUBLE():
        """
        Investissements locations meublees non pro - report 2009 - reduction
        """
        return max(0, ((RMEUBLE_1() and RMEUBLE_1() * (1 - base_variables['ART1731BIS'])) + (min(RMEUBLE_1(), (max((base_variables['RMEUBLE_P'] + base_variables['RMEUBLEP2']), (base_variables['RMEUBLE1731'] + 0)) and max((base_variables['RMEUBLE_P'] + base_variables['RMEUBLEP2']), (base_variables['RMEUBLE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RMEUBLE_1(), (max((base_variables['RMEUBLE_P'] + base_variables['RMEUBLEP2']), (base_variables['RMEUBLE1731'] + 0)) and max((base_variables['RMEUBLE_P'] + base_variables['RMEUBLEP2']), (base_variables['RMEUBLE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RPROREP_1():
        """
        Pour alleger prog - Inv. loc. meublees non pro - report (7IR) - reduc
        """
        return max(min(RETPROREP(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE())), 0)

    @cache_result
    def RPROREP():
        """
        Invest. loc. meublees non pro - report reduction (7IR) - reduction
        """
        return max(0, ((RPROREP_1() and RPROREP_1() * (1 - base_variables['ART1731BIS'])) + (min(RPROREP_1(), (max((base_variables['RPROREP_P'] + base_variables['RPROREPP2']), (base_variables['RPROREP1731'] + 0)) and max((base_variables['RPROREP_P'] + base_variables['RPROREPP2']), (base_variables['RPROREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RPROREP_1(), (max((base_variables['RPROREP_P'] + base_variables['RPROREPP2']), (base_variables['RPROREP1731'] + 0)) and max((base_variables['RPROREP_P'] + base_variables['RPROREPP2']), (base_variables['RPROREP1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RREPNPRO_1():
        """
        pour alleger prog - Inv.. loc. meublees non pro - report (7IQ) - reduc
        """
        return max(min(RETREPNPRO(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP())), 0)

    @cache_result
    def RREPNPRO():
        """
        Invest. loc. meublees non pro - report reduction (7IQ) - reduction
        """
        return max(0, ((RREPNPRO_1() and RREPNPRO_1() * (1 - base_variables['ART1731BIS'])) + (min(RREPNPRO_1(), (max((base_variables['RREPNPRO_P'] + base_variables['RREPNPROP2']), (base_variables['RREPNPRO1731'] + 0)) and max((base_variables['RREPNPRO_P'] + base_variables['RREPNPROP2']), (base_variables['RREPNPRO1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RREPNPRO_1(), (max((base_variables['RREPNPRO_P'] + base_variables['RREPNPROP2']), (base_variables['RREPNPRO1731'] + 0)) and max((base_variables['RREPNPRO_P'] + base_variables['RREPNPROP2']), (base_variables['RREPNPRO1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RREPMEU_1():
        """
        Pour alleger prog - Inv. loc. meublees non pro - report (7IP) - reduc
        """
        return max(min(RETREPMEU(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO())), 0)

    @cache_result
    def RREPMEU():
        """
        Invest. loc. meublees non pro - report reduction (7IP) - reduction
        """
        return max(0, ((RREPMEU_1() and RREPMEU_1() * (1 - base_variables['ART1731BIS'])) + (min(RREPMEU_1(), (max((base_variables['RREPMEU_P'] + base_variables['RREPMEUP2']), (base_variables['RREPMEU1731'] + 0)) and max((base_variables['RREPMEU_P'] + base_variables['RREPMEUP2']), (base_variables['RREPMEU1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RREPMEU_1(), (max((base_variables['RREPMEU_P'] + base_variables['RREPMEUP2']), (base_variables['RREPMEU1731'] + 0)) and max((base_variables['RREPMEU_P'] + base_variables['RREPMEUP2']), (base_variables['RREPMEU1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMIC_1():
        """
        Pour alleger prog - Inv. loc. meublees non pro - report (7IC) - reduc
        """
        return max(min(AILMIC(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU())), 0)

    @cache_result
    def RILMIC():
        """
        Invest. loc. meublees non pro - report reduction (7IC) - reduction
        """
        return max(0, ((RILMIC_1() and RILMIC_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMIC_1(), (max((base_variables['RILMIC_P'] + base_variables['RILMICP2']), (base_variables['RILMIC1731'] + 0)) and max((base_variables['RILMIC_P'] + base_variables['RILMICP2']), (base_variables['RILMIC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMIC_1(), (max((base_variables['RILMIC_P'] + base_variables['RILMICP2']), (base_variables['RILMIC1731'] + 0)) and max((base_variables['RILMIC_P'] + base_variables['RILMICP2']), (base_variables['RILMIC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMIB_1():
        """
        pour alleger prog - Inv. loc. meublees non pro - report (7IB) - reduct
        """
        return max(min(AILMIB(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC())), 0)

    @cache_result
    def RILMIB():
        """
        Invest. loc. meublees non pro - report reduction (7IB) - reduction
        """
        return max(0, ((RILMIB_1() and RILMIB_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMIB_1(), (max((base_variables['RILMIB_P'] + base_variables['RILMIBP2']), (base_variables['RILMIB1731'] + 0)) and max((base_variables['RILMIB_P'] + base_variables['RILMIBP2']), (base_variables['RILMIB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMIB_1(), (max((base_variables['RILMIB_P'] + base_variables['RILMIBP2']), (base_variables['RILMIB1731'] + 0)) and max((base_variables['RILMIB_P'] + base_variables['RILMIBP2']), (base_variables['RILMIB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMIA_1():
        """
        pour alleger prog - Inv.. loc. meublees non pro - report (7IA) - reduc
        """
        return max(min(AILMIA(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB())), 0)

    @cache_result
    def RILMIA():
        """
        Invest. loc. meublees non pro - report reduction (7IA) - reduction
        """
        return max(0, ((RILMIA_1() and RILMIA_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMIA_1(), (max((base_variables['RILMIA_P'] + base_variables['RILMIAP2']), (base_variables['RILMIA1731'] + 0)) and max((base_variables['RILMIA_P'] + base_variables['RILMIAP2']), (base_variables['RILMIA1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMIA_1(), (max((base_variables['RILMIA_P'] + base_variables['RILMIAP2']), (base_variables['RILMIA1731'] + 0)) and max((base_variables['RILMIA_P'] + base_variables['RILMIAP2']), (base_variables['RILMIA1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMJY_1():
        """
        pour alleger prog - Inv.. loc. meublees non pro - report (7JY) - reduc
        """
        return max(min(AILMJY(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA())), 0)

    @cache_result
    def RILMJY():
        """
        Invest. loc. meublees non pro - report reduction (7JY) - reduction
        """
        return max(0, ((RILMJY_1() and RILMJY_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMJY_1(), (max((base_variables['RILMJY_P'] + base_variables['RILMJYP2']), (base_variables['RILMJY1731'] + 0)) and max((base_variables['RILMJY_P'] + base_variables['RILMJYP2']), (base_variables['RILMJY1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMJY_1(), (max((base_variables['RILMJY_P'] + base_variables['RILMJYP2']), (base_variables['RILMJY1731'] + 0)) and max((base_variables['RILMJY_P'] + base_variables['RILMJYP2']), (base_variables['RILMJY1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMJX_1():
        """
        pour alleger prog - Inv.. loc. meublees non pro - report (7JX) - reduc
        """
        return max(min(AILMJX(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY())), 0)

    @cache_result
    def RILMJX():
        """
        Invest. loc. meublees non pro - report reduction (7JX) - reduction
        """
        return max(0, ((RILMJX_1() and RILMJX_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMJX_1(), (max((base_variables['RILMJX_P'] + base_variables['RILMJXP2']), (base_variables['RILMJX1731'] + 0)) and max((base_variables['RILMJX_P'] + base_variables['RILMJXP2']), (base_variables['RILMJX1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMJX_1(), (max((base_variables['RILMJX_P'] + base_variables['RILMJXP2']), (base_variables['RILMJX1731'] + 0)) and max((base_variables['RILMJX_P'] + base_variables['RILMJXP2']), (base_variables['RILMJX1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMJW_1():
        """
        pour alleger prog - Inv.. loc. meublees non pro - report (7JW) - reduc
        """
        return max(min(AILMJW(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX())), 0)

    @cache_result
    def RILMJW():
        """
        Invest. loc. meublees non pro - report reduction (7JW) - reduction
        """
        return max(0, ((RILMJW_1() and RILMJW_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMJW_1(), (max((base_variables['RILMJW_P'] + base_variables['RILMJWP2']), (base_variables['RILMJW1731'] + 0)) and max((base_variables['RILMJW_P'] + base_variables['RILMJWP2']), (base_variables['RILMJW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMJW_1(), (max((base_variables['RILMJW_P'] + base_variables['RILMJWP2']), (base_variables['RILMJW1731'] + 0)) and max((base_variables['RILMJW_P'] + base_variables['RILMJWP2']), (base_variables['RILMJW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMJV_1():
        """
        pour alleger prog - Inv.. loc. meublees non pro - report (7JV) - reduc
        """
        return max(min(AILMJV(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW())), 0)

    @cache_result
    def RILMJV():
        """
        Invest. loc. meublees non pro - report reduction (7JV) - reduction
        """
        return max(0, ((RILMJV_1() and RILMJV_1() * (1 - base_variables['ART1731BIS'])) + (min(RILMJV_1(), (max((base_variables['RILMJV_P'] + base_variables['RILMJVP2']), (base_variables['RILMJV1731'] + 0)) and max((base_variables['RILMJV_P'] + base_variables['RILMJVP2']), (base_variables['RILMJV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RILMJV_1(), (max((base_variables['RILMJV_P'] + base_variables['RILMJVP2']), (base_variables['RILMJV1731'] + 0)) and max((base_variables['RILMJV_P'] + base_variables['RILMJVP2']), (base_variables['RILMJV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RILMOE():
        """
        Invest. loc. meublees non pro - report reduction (7OE) - reduction
        """
        return max(min(AILMOE(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV())), 0)

    @cache_result
    def RILMOD():
        """
        Invest. loc. meublees non pro - report reduction (7OD) - reduction
        """
        return max(min(AILMOD(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE())), 0)

    @cache_result
    def RILMOC():
        """
        Invest. loc. meublees non pro - report reduction (7OC) - reduction
        """
        return max(min(AILMOC(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD())), 0)

    @cache_result
    def RILMOB():
        """
        Invest. loc. meublees non pro - report reduction (7OB) - reduction
        """
        return max(min(AILMOB(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC())), 0)

    @cache_result
    def RILMOA():
        """
        Invest. loc. meublees non pro - report reduction (7OA) - reduction
        """
        return max(min(AILMOA(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB())), 0)

    @cache_result
    def RRESIMEUB_1():
        """
        Pour alleger prog-Inv. loc meublees dans residence neuve (7IO) - reduc
        """
        return max(min(RETRESIMEUB(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA())), 0)

    @cache_result
    def RRESIMEUB():
        """
        Invest. locations meublees dans residence neuve (7IO) - reduction
        """
        return max(0, ((RRESIMEUB_1() and RRESIMEUB_1() * (1 - base_variables['ART1731BIS'])) + (min(RRESIMEUB_1(), (max((base_variables['RRESIMEUB_P'] + base_variables['RRESIMEUBP2']), (base_variables['RRESIMEUB1731'] + 0)) and max((base_variables['RRESIMEUB_P'] + base_variables['RRESIMEUBP2']), (base_variables['RRESIMEUB1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RRESIMEUB_1(), (max((base_variables['RRESIMEUB_P'] + base_variables['RRESIMEUBP2']), (base_variables['RRESIMEUB1731'] + 0)) and max((base_variables['RRESIMEUB_P'] + base_variables['RRESIMEUBP2']), (base_variables['RRESIMEUB1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RETCODIW():
        """
        Invest. locations meublees non pro 2013 (7IW) - calcule
        """
        return arr((arr((ACODIW() and ACODIW() / 9)) and TX25 and arr((ACODIW() and ACODIW() / 9)) * TX25 / 100))

    @cache_result
    def RCODIW_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RETCODIW(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB())), 0)

    @cache_result
    def RCODIW():
        """
        Invest. loc. meublees non pro - report (7IW) - reduction
        """
        return max(0, ((RCODIW_1() and RCODIW_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODIW_1(), (max((base_variables['RCODIW_P'] + base_variables['RCODIWP2']), (base_variables['RCODIW1731'] + 0)) and max((base_variables['RCODIW_P'] + base_variables['RCODIWP2']), (base_variables['RCODIW1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODIW_1(), (max((base_variables['RCODIW_P'] + base_variables['RCODIWP2']), (base_variables['RCODIW1731'] + 0)) and max((base_variables['RCODIW_P'] + base_variables['RCODIWP2']), (base_variables['RCODIW1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RETCODIM():
        """
        Invest. locations meublees non pro 2013 (7IM) - calcule
        """
        return arr((arr((ACODIM() and ACODIM() / 9)) and TX25 and arr((ACODIM() and ACODIM() / 9)) * TX25 / 100))

    @cache_result
    def RCODIM_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RETCODIM(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RCODIW())), 0)

    @cache_result
    def RCODIM():
        """
        Invest. loc. meublees non pro - report (7IM) - reduction
        """
        return max(0, ((RCODIM_1() and RCODIM_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODIM_1(), (max((base_variables['RCODIM_P'] + base_variables['RCODIMP2']), (base_variables['RCODIM1731'] + 0)) and max((base_variables['RCODIM_P'] + base_variables['RCODIMP2']), (base_variables['RCODIM1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODIM_1(), (max((base_variables['RCODIM_P'] + base_variables['RCODIMP2']), (base_variables['RCODIM1731'] + 0)) and max((base_variables['RCODIM_P'] + base_variables['RCODIMP2']), (base_variables['RCODIM1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RRESIVIEU():
        """
        Invest. locations meublees dans residence neuve (7IW) - reduction
        """
        return (RCODIW() + RCODIM())

    @cache_result
    def RETCODIL():
        """
        Invest. locations meublees non pro 2013 (7IL) - calcule
        """
        return arr((arr((ACODIL() and ACODIL() / 9)) and TX20 and arr((ACODIL() and ACODIL() / 9)) * TX20 / 100))

    @cache_result
    def RCODIL_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RETCODIL(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RRESIVIEU())), 0)

    @cache_result
    def RCODIL():
        """
        Invest. loc. meublees non pro - report (7IL) - reduction
        """
        return ((RCODIL_1() and RCODIL_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODIL_1(), (max((base_variables['RCODIL_P'] + base_variables['RCODILP2']), (base_variables['RCODIL1731'] + 0)) and max((base_variables['RCODIL_P'] + base_variables['RCODILP2']), (base_variables['RCODIL1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODIL_1(), (max((base_variables['RCODIL_P'] + base_variables['RCODILP2']), (base_variables['RCODIL1731'] + 0)) and max((base_variables['RCODIL_P'] + base_variables['RCODILP2']), (base_variables['RCODIL1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RETCODIN():
        """
        Invest. locations meublees non pro 2013 (7IN) - calcule
        """
        return arr((arr((ACODIN() and ACODIN() / 9)) and TX20 and arr((ACODIN() and ACODIN() / 9)) * TX20 / 100))

    @cache_result
    def RCODIN_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RETCODIN(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RRESIVIEU() - RCODIL())), 0)

    @cache_result
    def RCODIN():
        """
        Invest. loc. meublees non pro - report (7IN) - reduction
        """
        return ((RCODIN_1() and RCODIN_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODIN_1(), (max((base_variables['RCODIN_P'] + base_variables['RCODINP2']), (base_variables['RCODIN1731'] + 0)) and max((base_variables['RCODIN_P'] + base_variables['RCODINP2']), (base_variables['RCODIN1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODIN_1(), (max((base_variables['RCODIN_P'] + base_variables['RCODINP2']), (base_variables['RCODIN1731'] + 0)) and max((base_variables['RCODIN_P'] + base_variables['RCODINP2']), (base_variables['RCODIN1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RETCODIV():
        """
        Invest. locations meublees non pro 2013 (7IV) - calcule
        """
        return arr((arr((ACODIV() and ACODIV() / 9)) and TX18 and arr((ACODIV() and ACODIV() / 9)) * TX18 / 100))

    @cache_result
    def RCODIV_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RETCODIV(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RRESIVIEU() - RCODIL() - RCODIN())), 0)

    @cache_result
    def RCODIV():
        """
        Invest. loc. meublees non pro - report (7IV) - reduction
        """
        return ((RCODIV_1() and RCODIV_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODIV_1(), (max((base_variables['RCODIV_P'] + base_variables['RCODIVP2']), (base_variables['RCODIV1731'] + 0)) and max((base_variables['RCODIV_P'] + base_variables['RCODIVP2']), (base_variables['RCODIV1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODIV_1(), (max((base_variables['RCODIV_P'] + base_variables['RCODIVP2']), (base_variables['RCODIV1731'] + 0)) and max((base_variables['RCODIV_P'] + base_variables['RCODIVP2']), (base_variables['RCODIV1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RETCODIJ():
        """
        Invest. locations meublees non pro 2013 (7IJ) - calcule
        """
        return arr((arr((ACODIJ() and ACODIJ() / 9)) and TX18 and arr((ACODIJ() and ACODIJ() / 9)) * TX18 / 100))

    @cache_result
    def RCODIJ_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RETCODIJ(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RRESIVIEU() - RCODIL() - RCODIN() - RCODIV())), 0)

    @cache_result
    def RCODIJ():
        """
        Invest. loc. meublees non pro - report (7IJ) - reduction
        """
        return ((RCODIJ_1() and RCODIJ_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODIJ_1(), (max((base_variables['RCODIJ_P'] + base_variables['RCODIJP2']), (base_variables['RCODIJ1731'] + 0)) and max((base_variables['RCODIJ_P'] + base_variables['RCODIJP2']), (base_variables['RCODIJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODIJ_1(), (max((base_variables['RCODIJ_P'] + base_variables['RCODIJP2']), (base_variables['RCODIJ1731'] + 0)) and max((base_variables['RCODIJ_P'] + base_variables['RCODIJP2']), (base_variables['RCODIJ1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RRESINEUV():
        """
        Investissements locations meublees dans residence neuve - reduction
        """
        return (RCODIL() + RCODIN() + RCODIV() + RCODIJ())

    @cache_result
    def RETCODIE():
        """
        Invest. locations meublees non pro 2013 (7IE) - calcule
        """
        return arr((arr((ACODIE() and ACODIE() / 9)) and TX18 and arr((ACODIE() and ACODIE() / 9)) * TX18 / 100))

    @cache_result
    def RCODIE_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RETCODIE(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RRESIVIEU() - RRESINEUV())), 0)

    @cache_result
    def RCODIE():
        """
        Invest. loc. meublees non pro - report (7IE) - reduction
        """
        return ((RCODIE_1() and RCODIE_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODIE_1(), (max((base_variables['RCODIE_P'] + base_variables['RCODIEP2']), (base_variables['RCODIE1731'] + 0)) and max((base_variables['RCODIE_P'] + base_variables['RCODIEP2']), (base_variables['RCODIE1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODIE_1(), (max((base_variables['RCODIE_P'] + base_variables['RCODIEP2']), (base_variables['RCODIE1731'] + 0)) and max((base_variables['RCODIE_P'] + base_variables['RCODIEP2']), (base_variables['RCODIE1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RETCODIF():
        """
        Invest. locations meublees non pro 2013 (7IF) - calcule
        """
        return arr((arr((ACODIF() and ACODIF() / 9)) and TX18 and arr((ACODIF() and ACODIF() / 9)) * TX18 / 100))

    @cache_result
    def RCODIF_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RETCODIF(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RRESIVIEU() - RRESINEUV() - RCODIE())), 0)

    @cache_result
    def RCODIF():
        """
        Invest. loc. meublees non pro - report (7IF) - reduction
        """
        return ((RCODIF_1() and RCODIF_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODIF_1(), (max((base_variables['RCODIF_P'] + base_variables['RCODIFP2']), (base_variables['RCODIF1731'] + 0)) and max((base_variables['RCODIF_P'] + base_variables['RCODIFP2']), (base_variables['RCODIF1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODIF_1(), (max((base_variables['RCODIF_P'] + base_variables['RCODIFP2']), (base_variables['RCODIF1731'] + 0)) and max((base_variables['RCODIF_P'] + base_variables['RCODIFP2']), (base_variables['RCODIF1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RETCODIG():
        """
        Invest. locations meublees non pro 2013 (7IG) - calcule
        """
        return arr((arr((ACODIG() and ACODIG() / 9)) and TX11 and arr((ACODIG() and ACODIG() / 9)) * TX11 / 100))

    @cache_result
    def RCODIG_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RETCODIG(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RRESIVIEU() - RRESINEUV() - RCODIE() - RCODIF())), 0)

    @cache_result
    def RCODIG():
        """
        Invest. loc. meublees non pro - report (7IG) - reduction
        """
        return ((RCODIG_1() and RCODIG_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODIG_1(), (max((base_variables['RCODIG_P'] + base_variables['RCODIGP2']), (base_variables['RCODIG1731'] + 0)) and max((base_variables['RCODIG_P'] + base_variables['RCODIGP2']), (base_variables['RCODIG1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODIG_1(), (max((base_variables['RCODIG_P'] + base_variables['RCODIGP2']), (base_variables['RCODIG1731'] + 0)) and max((base_variables['RCODIG_P'] + base_variables['RCODIGP2']), (base_variables['RCODIG1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RETCODID():
        """
        Invest. locations meublees non pro 2013 (7ID) - calcule
        """
        return arr((arr((ACODID() and ACODID() / 9)) and TX11 and arr((ACODID() and ACODID() / 9)) * TX11 / 100))

    @cache_result
    def RCODID_1():
        """
        reduc non plaf. art 1731bis
        """
        return max(min(RETCODID(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RRESIVIEU() - RRESINEUV() - RCODIE() - RCODIF() - RCODIG())), 0)

    @cache_result
    def RCODID():
        """
        Invest. loc. meublees non pro - report (7ID) - reduction
        """
        return ((RCODID_1() and RCODID_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODID_1(), (max((base_variables['RCODID_P'] + base_variables['RCODIDP2']), (base_variables['RCODID1731'] + 0)) and max((base_variables['RCODID_P'] + base_variables['RCODIDP2']), (base_variables['RCODID1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODID_1(), (max((base_variables['RCODID_P'] + base_variables['RCODIDP2']), (base_variables['RCODID1731'] + 0)) and max((base_variables['RCODID_P'] + base_variables['RCODIDP2']), (base_variables['RCODID1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RLOCIDEFG():
        """
        Invest. loc. meublees non pro - report (7ID,7IE,7IF,7IG) - reduction
        """
        return (RCODIE() + RCODIF() + RCODIG() + RCODID())

    @cache_result
    def RCODJU_1():
        """
        allege prog -Inv. loc. meub non pro - report (7JU) - reduc
        """
        return max(min(RETCODJU(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RRESIVIEU() - RRESINEUV() - RLOCIDEFG())), 0)

    @cache_result
    def RCODJU():
        """
        Invest. loc. meublees non pro - report (7JT, 7JU) - reduction
        """
        return max(0, ((RCODJU_1() and RCODJU_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODJU_1(), (max((base_variables['RCODJU_P'] + base_variables['RCODJUP2']), (base_variables['RCODJU1731'] + 0)) and max((base_variables['RCODJU_P'] + base_variables['RCODJUP2']), (base_variables['RCODJU1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODJU_1(), (max((base_variables['RCODJU_P'] + base_variables['RCODJUP2']), (base_variables['RCODJU1731'] + 0)) and max((base_variables['RCODJU_P'] + base_variables['RCODJUP2']), (base_variables['RCODJU1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RCODJT_1():
        """
        allege prog -Inv. loc. meub non pro - report (7JT) - reduc
        """
        return max(min(RETCODJT(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RRESIVIEU() - RRESINEUV() - RLOCIDEFG() - RCODJU())), 0)

    @cache_result
    def RCODJT():
        """
        Invest. loc. meublees non pro - report (7JT) - reduction
        """
        return max(0, ((RCODJT_1() and RCODJT_1() * (1 - base_variables['ART1731BIS'])) + (min(RCODJT_1(), (max((base_variables['RCODJT_P'] + base_variables['RCODJTP2']), (base_variables['RCODJT1731'] + 0)) and max((base_variables['RCODJT_P'] + base_variables['RCODJTP2']), (base_variables['RCODJT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCODJT_1(), (max((base_variables['RCODJT_P'] + base_variables['RCODJTP2']), (base_variables['RCODJT1731'] + 0)) and max((base_variables['RCODJT_P'] + base_variables['RCODJTP2']), (base_variables['RCODJT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])))

    @cache_result
    def RCODJTJU():
        """
        Invest. loc. meublees non pro - report (7JT + 7JU) - reduction
        """
        return (RCODJU() + RCODJT())

    @cache_result
    def RETCODOU():
        """
        Invest. locations meublees non pro 2014 (7OU) - calcule
        """
        return arr((ACODOU() and TX11 and ACODOU() * TX11 / 100))

    @cache_result
    def RCODOU():
        """
        Invest. loc. meublees non pro - report (7OU) - reduction
        """
        return max(min(RETCODOU(), (IDOM11() - DEC11() - REDUCAVTCEL() - RCELTOT() - RREDMEUB() - RREDREP() - RILMIX() - RILMIY() - RILMPA() - RINVRED() - RILMIH() - RILMJC() - RILMPB() - RILMIZ() - RILMJI() - RILMPC() - RILMJS() - RILMPD() - RILMPE() - RMEUBLE() - RPROREP() - RREPNPRO() - RREPMEU() - RILMIC() - RILMIB() - RILMIA() - RILMJY() - RILMJX() - RILMJW() - RILMJV() - RILMOE() - RILMOD() - RILMOC() - RILMOB() - RILMOA() - RRESIMEUB() - RRESIVIEU() - RRESINEUV() - RLOCIDEFG() - RCODJTJU())), 0)

    @cache_result
    def RLOCNPRO():
        """
        Reductions impot locations meublees non pro
        """
        return (RREDMEUB() + RREDREP() + RILMIX() + RILMIY() + RILMPA() + RINVRED() + RILMIH() + RILMJC() + RILMPB() + RILMIZ() + RILMJI() + RILMPC() + RILMJS() + RILMPD() + RILMPE() + RMEUBLE() + RPROREP() + RREPNPRO() + RREPMEU() + RILMIC() + RILMIB() + RILMIA() + RILMJY() + RILMJX() + RILMJW() + RILMJV() + RILMOE() + RILMOD() + RILMOC() + RILMOB() + RILMOA() + RRESIMEUB() + RRESIVIEU() + RRESINEUV() + RLOCIDEFG() + RCODJTJU() + RCODOU())

    @cache_result
    def RPATNAT1_1():
        """
        pour alleger prog - Report 2011 Reduc impute  protection pat naturel
        """
        return (max(min(APATNAT1(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RTOURREP() - RTOUHOTR() - RTOUREPA() - RCELTOT() - RLOCNPRO())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(APATNAT1(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RTOURREP() - RTOUHOTR() - RTOUREPA() - RCELTOT() - RLOCNPRO())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RPATNAT1():
        """
        Report 2011 Reduction impute depense protection patrimoine naturel
        """
        return (max(0, ((RPATNAT1_1() and RPATNAT1_1() * (1 - base_variables['ART1731BIS'])) + (min(RPATNAT1_1(), (max((base_variables['RPATNAT1_P'] + base_variables['RPATNAT1P2']), (base_variables['RPATNAT11731'] + 0)) and max((base_variables['RPATNAT1_P'] + base_variables['RPATNAT1P2']), (base_variables['RPATNAT11731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RPATNAT1_1(), (max((base_variables['RPATNAT1_P'] + base_variables['RPATNAT1P2']), (base_variables['RPATNAT11731'] + 0)) and max((base_variables['RPATNAT1_P'] + base_variables['RPATNAT1P2']), (base_variables['RPATNAT11731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RPATNAT1_1() and RPATNAT1_1() * (1 - base_variables['ART1731BIS'])) + (min(RPATNAT1_1(), (max((base_variables['RPATNAT1_P'] + base_variables['RPATNAT1P2']), (base_variables['RPATNAT11731'] + 0)) and max((base_variables['RPATNAT1_P'] + base_variables['RPATNAT1P2']), (base_variables['RPATNAT11731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RPATNAT1_1(), (max((base_variables['RPATNAT1_P'] + base_variables['RPATNAT1P2']), (base_variables['RPATNAT11731'] + 0)) and max((base_variables['RPATNAT1_P'] + base_variables['RPATNAT1P2']), (base_variables['RPATNAT11731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RPATNAT2_1():
        """
        pour alleger prog - Report 2011 Reduc depense protection pat naturel
        """
        return (max(min(APATNAT2(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RTOURREP() - RTOUHOTR() - RTOUREPA() - RCELTOT() - RLOCNPRO() - RPATNAT1())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(APATNAT2(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RTOURREP() - RTOUHOTR() - RTOUREPA() - RCELTOT() - RLOCNPRO() - RPATNAT1())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RPATNAT2():
        """
        Report 2011 Reduction impute depense protection patrimoine naturel
        """
        return (max(0, ((RPATNAT2_1() and RPATNAT2_1() * (1 - base_variables['ART1731BIS'])) + (min(RPATNAT2_1(), (max((base_variables['RPATNAT2_P'] + base_variables['RPATNAT2P2']), (base_variables['RPATNAT21731'] + 0)) and max((base_variables['RPATNAT2_P'] + base_variables['RPATNAT2P2']), (base_variables['RPATNAT21731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RPATNAT2_1(), (max((base_variables['RPATNAT2_P'] + base_variables['RPATNAT2P2']), (base_variables['RPATNAT21731'] + 0)) and max((base_variables['RPATNAT2_P'] + base_variables['RPATNAT2P2']), (base_variables['RPATNAT21731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RPATNAT2_1() and RPATNAT2_1() * (1 - base_variables['ART1731BIS'])) + (min(RPATNAT2_1(), (max((base_variables['RPATNAT2_P'] + base_variables['RPATNAT2P2']), (base_variables['RPATNAT21731'] + 0)) and max((base_variables['RPATNAT2_P'] + base_variables['RPATNAT2P2']), (base_variables['RPATNAT21731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RPATNAT2_1(), (max((base_variables['RPATNAT2_P'] + base_variables['RPATNAT2P2']), (base_variables['RPATNAT21731'] + 0)) and max((base_variables['RPATNAT2_P'] + base_variables['RPATNAT2P2']), (base_variables['RPATNAT21731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RPATNAT3_1():
        """
        pour alleger prog - Report 2012 Reduc depense protection pat naturel
        """
        return (max(min(APATNAT3(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RTOURREP() - RTOUHOTR() - RTOUREPA() - RCELTOT() - RLOCNPRO() - RPATNAT1() - RPATNAT2())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(APATNAT3(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RTOURREP() - RTOUHOTR() - RTOUREPA() - RCELTOT() - RLOCNPRO() - RPATNAT1() - RPATNAT2())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RPATNAT3():
        """
        Report 2012 Reduction impute depense protection patrimoine naturel
        """
        return (max(0, ((RPATNAT3_1() and RPATNAT3_1() * (1 - base_variables['ART1731BIS'])) + (min(RPATNAT3_1(), (max((base_variables['RPATNAT3_P'] + base_variables['RPATNAT3P2']), (base_variables['RPATNAT31731'] + 0)) and max((base_variables['RPATNAT3_P'] + base_variables['RPATNAT3P2']), (base_variables['RPATNAT31731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RPATNAT3_1(), (max((base_variables['RPATNAT3_P'] + base_variables['RPATNAT3P2']), (base_variables['RPATNAT31731'] + 0)) and max((base_variables['RPATNAT3_P'] + base_variables['RPATNAT3P2']), (base_variables['RPATNAT31731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RPATNAT3_1() and RPATNAT3_1() * (1 - base_variables['ART1731BIS'])) + (min(RPATNAT3_1(), (max((base_variables['RPATNAT3_P'] + base_variables['RPATNAT3P2']), (base_variables['RPATNAT31731'] + 0)) and max((base_variables['RPATNAT3_P'] + base_variables['RPATNAT3P2']), (base_variables['RPATNAT31731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RPATNAT3_1(), (max((base_variables['RPATNAT3_P'] + base_variables['RPATNAT3P2']), (base_variables['RPATNAT31731'] + 0)) and max((base_variables['RPATNAT3_P'] + base_variables['RPATNAT3P2']), (base_variables['RPATNAT31731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RPATNAT_1():
        """
        pour alleger prog - Reduc retenue depense protection pat naturel
        """
        return (max(min(APATNAT(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RTOURREP() - RTOUHOTR() - RTOUREPA() - RCELTOT() - RLOCNPRO() - RPATNAT1() - RPATNAT2() - RPATNAT3())), 0) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(min(APATNAT(), (RRI1() - RLOGDOM() - RCREAT() - RCOMP() - RRETU() - RDONS() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RTOURREP() - RTOUHOTR() - RTOUREPA() - RCELTOT() - RLOCNPRO() - RPATNAT1() - RPATNAT2() - RPATNAT3())), 0) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RPATNAT():
        """
        Reduction retenue depense protection du patrimoine naturel
        """
        return (max(0, ((RPATNAT_1() and RPATNAT_1() * (1 - base_variables['ART1731BIS'])) + (min(RPATNAT_1(), (max((base_variables['RPATNAT_P'] + base_variables['RPATNATP2']), (base_variables['RPATNAT1731'] + 0)) and max((base_variables['RPATNAT_P'] + base_variables['RPATNATP2']), (base_variables['RPATNAT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RPATNAT_1(), (max((base_variables['RPATNAT_P'] + base_variables['RPATNATP2']), (base_variables['RPATNAT1731'] + 0)) and max((base_variables['RPATNAT_P'] + base_variables['RPATNATP2']), (base_variables['RPATNAT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) and (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) and max(0, ((RPATNAT_1() and RPATNAT_1() * (1 - base_variables['ART1731BIS'])) + (min(RPATNAT_1(), (max((base_variables['RPATNAT_P'] + base_variables['RPATNATP2']), (base_variables['RPATNAT1731'] + 0)) and max((base_variables['RPATNAT_P'] + base_variables['RPATNATP2']), (base_variables['RPATNAT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RPATNAT_1(), (max((base_variables['RPATNAT_P'] + base_variables['RPATNATP2']), (base_variables['RPATNAT1731'] + 0)) and max((base_variables['RPATNAT_P'] + base_variables['RPATNATP2']), (base_variables['RPATNAT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))) * (1 - null((2 - saisie_variables.get('V_REGCO', 0)))) * (1 - null((4 - saisie_variables.get('V_REGCO', 0)))))

    @cache_result
    def RPATNATOT():
        """
        Colbert : RPATNAT + RPATNAT1
        """
        return (RPATNAT1() + RPATNAT2() + RPATNAT3() + RPATNAT())

    @cache_result
    def RRISUP():
        """
        Reductions impot avant investissement O.M
        """
        return (RRI1() - RLOGDOM() - RTOURREP() - RTOUHOTR() - RTOUREPA() - RCOMP() - RCREAT() - RRETU() - RDONS() - RCELTOT() - RLOCNPRO() - RDUFLOTOT() - RPINELTOT() - RNOUV() - RPLAFREPME4() - RFOR() - RPATNATOT())

    @cache_result
    def RSOC11():
        """
        Reduction HKG
        """
        return (arr(max(min(((INVRETKG() and INVRETKG() * (1 - INDPLAF())) + (INVRETKGA() and INVRETKGA() * INDPLAF())), RRISUP()), 0)) and arr(max(min(((INVRETKG() and INVRETKG() * (1 - INDPLAF())) + (INVRETKGA() and INVRETKGA() * INDPLAF())), RRISUP()), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC12():
        """
        Reduction HKG retrocede
        """
        return (arr(max(min(((INVRETKGR() and INVRETKGR() * (1 - INDPLAF())) + (INVRETKGRA() and INVRETKGRA() * INDPLAF())), (RRISUP() - RSOC11())), 0)) and arr(max(min(((INVRETKGR() and INVRETKGR() * (1 - INDPLAF())) + (INVRETKGRA() and INVRETKGRA() * INDPLAF())), (RRISUP() - RSOC11())), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC13():
        """
        Reduction HKH
        """
        return (arr(max(min(((INVRETKH() and INVRETKH() * (1 - INDPLAF())) + (INVRETKHA() and INVRETKHA() * INDPLAF())), (RRISUP() - RSOC11() - RSOC12())), 0)) and arr(max(min(((INVRETKH() and INVRETKH() * (1 - INDPLAF())) + (INVRETKHA() and INVRETKHA() * INDPLAF())), (RRISUP() - RSOC11() - RSOC12())), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC14():
        """
        Reduction HKI
        """
        return (arr(max(min(((INVRETKI() and INVRETKI() * (1 - INDPLAF())) + (INVRETKIA() and INVRETKIA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13()]))), 0)) and arr(max(min(((INVRETKI() and INVRETKI() * (1 - INDPLAF())) + (INVRETKIA() and INVRETKIA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC15():
        """
        Reduction HKH retrocede
        """
        return (arr(max(min(((INVRETKHR() and INVRETKHR() * (1 - INDPLAF())) + (INVRETKHRA() and INVRETKHRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14()]))), 0)) and arr(max(min(((INVRETKHR() and INVRETKHR() * (1 - INDPLAF())) + (INVRETKHRA() and INVRETKHRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC16():
        """
        Reduction HKI retrocede
        """
        return (arr(max(min(((INVRETKIR() and INVRETKIR() * (1 - INDPLAF())) + (INVRETKIRA() and INVRETKIRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15()]))), 0)) and arr(max(min(((INVRETKIR() and INVRETKIR() * (1 - INDPLAF())) + (INVRETKIRA() and INVRETKIRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC17():
        """
        Reduction HQN
        """
        return (arr(max(min(((INVRETQN() and INVRETQN() * (1 - INDPLAF())) + (INVRETQNA() and INVRETQNA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16()]))), 0)) and arr(max(min(((INVRETQN() and INVRETQN() * (1 - INDPLAF())) + (INVRETQNA() and INVRETQNA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC18():
        """
        Reduction HQU
        """
        return (arr(max(min(((INVRETQU() and INVRETQU() * (1 - INDPLAF())) + (INVRETQUA() and INVRETQUA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17()]))), 0)) and arr(max(min(((INVRETQU() and INVRETQU() * (1 - INDPLAF())) + (INVRETQUA() and INVRETQUA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC19():
        """
        Reduction HQK
        """
        return (arr(max(min(((INVRETQK() and INVRETQK() * (1 - INDPLAF())) + (INVRETQKA() and INVRETQKA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18()]))), 0)) and arr(max(min(((INVRETQK() and INVRETQK() * (1 - INDPLAF())) + (INVRETQKA() and INVRETQKA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC20():
        """
        Reduction HQN retrocedee
        """
        return (arr(max(min(((INVRETQNR() and INVRETQNR() * (1 - INDPLAF())) + (INVRETQNRA() and INVRETQNRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19()]))), 0)) and arr(max(min(((INVRETQNR() and INVRETQNR() * (1 - INDPLAF())) + (INVRETQNRA() and INVRETQNRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC21():
        """
        Reduction HQU retrocede
        """
        return (arr(max(min(((INVRETQUR() and INVRETQUR() * (1 - INDPLAF())) + (INVRETQURA() and INVRETQURA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20()]))), 0)) and arr(max(min(((INVRETQUR() and INVRETQUR() * (1 - INDPLAF())) + (INVRETQURA() and INVRETQURA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC22():
        """
        Reduction HQK retrocede
        """
        return (arr(max(min(((INVRETQKR() and INVRETQKR() * (1 - INDPLAF())) + (INVRETQKRA() and INVRETQKRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21()]))), 0)) and arr(max(min(((INVRETQKR() and INVRETQKR() * (1 - INDPLAF())) + (INVRETQKRA() and INVRETQKRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC23():
        """
        Reduction HQJ
        """
        return (arr(max(min(((INVRETQJ() and INVRETQJ() * (1 - INDPLAF())) + (INVRETQJA() and INVRETQJA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22()]))), 0)) and arr(max(min(((INVRETQJ() and INVRETQJ() * (1 - INDPLAF())) + (INVRETQJA() and INVRETQJA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC24():
        """
        Reduction HQS
        """
        return (arr(max(min(((INVRETQS() and INVRETQS() * (1 - INDPLAF())) + (INVRETQSA() and INVRETQSA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23()]))), 0)) and arr(max(min(((INVRETQS() and INVRETQS() * (1 - INDPLAF())) + (INVRETQSA() and INVRETQSA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC25():
        """
        Reduction HQW
        """
        return (arr(max(min(((INVRETQW() and INVRETQW() * (1 - INDPLAF())) + (INVRETQWA() and INVRETQWA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24()]))), 0)) and arr(max(min(((INVRETQW() and INVRETQW() * (1 - INDPLAF())) + (INVRETQWA() and INVRETQWA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC26():
        """
        Reduction HQX
        """
        return (arr(max(min(((INVRETQX() and INVRETQX() * (1 - INDPLAF())) + (INVRETQXA() and INVRETQXA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25()]))), 0)) and arr(max(min(((INVRETQX() and INVRETQX() * (1 - INDPLAF())) + (INVRETQXA() and INVRETQXA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC27():
        """
        Reduction HQJ retrocedee
        """
        return (arr(max(min(((INVRETQJR() and INVRETQJR() * (1 - INDPLAF())) + (INVRETQJRA() and INVRETQJRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26()]))), 0)) and arr(max(min(((INVRETQJR() and INVRETQJR() * (1 - INDPLAF())) + (INVRETQJRA() and INVRETQJRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC28():
        """
        Reduction HQS retrocedee
        """
        return (arr(max(min(((INVRETQSR() and INVRETQSR() * (1 - INDPLAF())) + (INVRETQSRA() and INVRETQSRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27()]))), 0)) and arr(max(min(((INVRETQSR() and INVRETQSR() * (1 - INDPLAF())) + (INVRETQSRA() and INVRETQSRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC29():
        """
        Reduction HQW retrocedee
        """
        return (arr(max(min(((INVRETQWR() and INVRETQWR() * (1 - INDPLAF())) + (INVRETQWRA() and INVRETQWRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28()]))), 0)) and arr(max(min(((INVRETQWR() and INVRETQWR() * (1 - INDPLAF())) + (INVRETQWRA() and INVRETQWRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC30():
        """
        Reduction HQX retrocedee
        """
        return (arr(max(min(((INVRETQXR() and INVRETQXR() * (1 - INDPLAF())) + (INVRETQXRA() and INVRETQXRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29()]))), 0)) and arr(max(min(((INVRETQXR() and INVRETQXR() * (1 - INDPLAF())) + (INVRETQXRA() and INVRETQXRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC31():
        """
        Reduction HRA
        """
        return (arr(max(min(((INVRETRA() and INVRETRA() * (1 - INDPLAF())) + (INVRETRAA() and INVRETRAA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30()]))), 0)) and arr(max(min(((INVRETRA() and INVRETRA() * (1 - INDPLAF())) + (INVRETRAA() and INVRETRAA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC32():
        """
        Reduction HRB
        """
        return (arr(max(min(((INVRETRB() and INVRETRB() * (1 - INDPLAF())) + (INVRETRBA() and INVRETRBA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31()]))), 0)) and arr(max(min(((INVRETRB() and INVRETRB() * (1 - INDPLAF())) + (INVRETRBA() and INVRETRBA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC33():
        """
        Reduction HRC
        """
        return (arr(max(min(((INVRETRC() and INVRETRC() * (1 - INDPLAF())) + (INVRETRCA() and INVRETRCA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32()]))), 0)) and arr(max(min(((INVRETRC() and INVRETRC() * (1 - INDPLAF())) + (INVRETRCA() and INVRETRCA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC34():
        """
        Reduction HRD
        """
        return (arr(max(min(((INVRETRD() and INVRETRD() * (1 - INDPLAF())) + (INVRETRDA() and INVRETRDA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32(), RSOC33()]))), 0)) and arr(max(min(((INVRETRD() and INVRETRD() * (1 - INDPLAF())) + (INVRETRDA() and INVRETRDA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32(), RSOC33()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC35():
        """
        Reduction HRA retrocedee
        """
        return (arr(max(min(((INVRETRAR() and INVRETRAR() * (1 - INDPLAF())) + (INVRETRARA() and INVRETRARA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32(), RSOC33(), RSOC34()]))), 0)) and arr(max(min(((INVRETRAR() and INVRETRAR() * (1 - INDPLAF())) + (INVRETRARA() and INVRETRARA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32(), RSOC33(), RSOC34()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC36():
        """
        Reduction HRB retrocedee
        """
        return (arr(max(min(((INVRETRBR() and INVRETRBR() * (1 - INDPLAF())) + (INVRETRBRA() and INVRETRBRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32(), RSOC33(), RSOC34(), RSOC35()]))), 0)) and arr(max(min(((INVRETRBR() and INVRETRBR() * (1 - INDPLAF())) + (INVRETRBRA() and INVRETRBRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32(), RSOC33(), RSOC34(), RSOC35()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC37():
        """
        Reduction HRC retrocedee
        """
        return (arr(max(min(((INVRETRCR() and INVRETRCR() * (1 - INDPLAF())) + (INVRETRCRA() and INVRETRCRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32(), RSOC33(), RSOC34(), RSOC35(), RSOC36()]))), 0)) and arr(max(min(((INVRETRCR() and INVRETRCR() * (1 - INDPLAF())) + (INVRETRCRA() and INVRETRCRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32(), RSOC33(), RSOC34(), RSOC35(), RSOC36()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC38():
        """
        Reduction HRD retrocedee
        """
        return (arr(max(min(((INVRETRDR() and INVRETRDR() * (1 - INDPLAF())) + (INVRETRDRA() and INVRETRDRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32(), RSOC33(), RSOC34(), RSOC35(), RSOC36(), RSOC37()]))), 0)) and arr(max(min(((INVRETRDR() and INVRETRDR() * (1 - INDPLAF())) + (INVRETRDRA() and INVRETRDRA() * INDPLAF())), (RRISUP() - somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32(), RSOC33(), RSOC34(), RSOC35(), RSOC36(), RSOC37()]))), 0)) * (1 - V_CNR()))

    @cache_result
    def RDOMSOC1_1():
        """
        pour simplifier prog -Inv. outre mer logt social - report 2009 - reduc
        """
        return ((1 - V_CNR()) and (1 - V_CNR()) * (((1 - saisie_variables.get('V_INDTEO', 0)) and (1 - saisie_variables.get('V_INDTEO', 0)) * somme([RSOC11(), RSOC12(), RSOC13(), RSOC14(), RSOC15(), RSOC16(), RSOC17(), RSOC18(), RSOC19(), RSOC20(), RSOC21(), RSOC22(), RSOC23(), RSOC24(), RSOC25(), RSOC26(), RSOC27(), RSOC28(), RSOC29(), RSOC30(), RSOC31(), RSOC32(), RSOC33(), RSOC34(), RSOC35(), RSOC36(), RSOC37(), RSOC38()])) + (saisie_variables.get('V_INDTEO', 0) and saisie_variables.get('V_INDTEO', 0) * arr(((saisie_variables.get('V_RSOC11', 0) + saisie_variables.get('V_RSOC12', 0) + saisie_variables.get('V_RSOC13', 0) + saisie_variables.get('V_RSOC15', 0) + saisie_variables.get('V_RSOC17', 0) + saisie_variables.get('V_RSOC20', 0) + saisie_variables.get('V_RSOC23', 0) + saisie_variables.get('V_RSOC27', 0) + saisie_variables.get('V_RSOC14', 0) + saisie_variables.get('V_RSOC16', 0) + saisie_variables.get('V_RSOC18', 0) + saisie_variables.get('V_RSOC21', 0) + saisie_variables.get('V_RSOC24', 0) + saisie_variables.get('V_RSOC28', 0) + saisie_variables.get('V_RSOC31', 0) + saisie_variables.get('V_RSOC35', 0) + saisie_variables.get('V_RSOC19', 0) + saisie_variables.get('V_RSOC22', 0) + saisie_variables.get('V_RSOC25', 0) + saisie_variables.get('V_RSOC29', 0) + saisie_variables.get('V_RSOC32', 0) + saisie_variables.get('V_RSOC36', 0) + saisie_variables.get('V_RSOC26', 0) + saisie_variables.get('V_RSOC30', 0) + saisie_variables.get('V_RSOC33', 0) + saisie_variables.get('V_RSOC37', 0) + saisie_variables.get('V_RSOC34', 0) + saisie_variables.get('V_RSOC38', 0)) and (saisie_variables.get('V_RSOC11', 0) + saisie_variables.get('V_RSOC12', 0) + saisie_variables.get('V_RSOC13', 0) + saisie_variables.get('V_RSOC15', 0) + saisie_variables.get('V_RSOC17', 0) + saisie_variables.get('V_RSOC20', 0) + saisie_variables.get('V_RSOC23', 0) + saisie_variables.get('V_RSOC27', 0) + saisie_variables.get('V_RSOC14', 0) + saisie_variables.get('V_RSOC16', 0) + saisie_variables.get('V_RSOC18', 0) + saisie_variables.get('V_RSOC21', 0) + saisie_variables.get('V_RSOC24', 0) + saisie_variables.get('V_RSOC28', 0) + saisie_variables.get('V_RSOC31', 0) + saisie_variables.get('V_RSOC35', 0) + saisie_variables.get('V_RSOC19', 0) + saisie_variables.get('V_RSOC22', 0) + saisie_variables.get('V_RSOC25', 0) + saisie_variables.get('V_RSOC29', 0) + saisie_variables.get('V_RSOC32', 0) + saisie_variables.get('V_RSOC36', 0) + saisie_variables.get('V_RSOC26', 0) + saisie_variables.get('V_RSOC30', 0) + saisie_variables.get('V_RSOC33', 0) + saisie_variables.get('V_RSOC37', 0) + saisie_variables.get('V_RSOC34', 0) + saisie_variables.get('V_RSOC38', 0)) * (TX65 and TX65 / 100))))))

    @cache_result
    def RDOMSOC1():
        """
        Investissements outre mer logement social - report 2009 - reduction
        """
        return ((RDOMSOC1_1() and RDOMSOC1_1() * (1 - base_variables['ART1731BIS'])) + (min(RDOMSOC1_1(), (max((base_variables['RDOMSOC1_P'] + base_variables['RDOMSOC1P2']), (base_variables['RDOMSOC11731'] + 0)) and max((base_variables['RDOMSOC1_P'] + base_variables['RDOMSOC1P2']), (base_variables['RDOMSOC11731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RDOMSOC1_1(), (max((base_variables['RDOMSOC1_P'] + base_variables['RDOMSOC1P2']), (base_variables['RDOMSOC11731'] + 0)) and max((base_variables['RDOMSOC1_P'] + base_variables['RDOMSOC1P2']), (base_variables['RDOMSOC11731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RSOC1():
        """
        Reduction HXA
        """
        return (arr(max(min(((INVRETXA() and INVRETXA() * (1 - INDPLAF())) + (INVRETXAA() and INVRETXAA() * INDPLAF())), (RRISUP() - RDOMSOC1())), 0)) and arr(max(min(((INVRETXA() and INVRETXA() * (1 - INDPLAF())) + (INVRETXAA() and INVRETXAA() * INDPLAF())), (RRISUP() - RDOMSOC1())), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC2():
        """
        Reduction HXB
        """
        return (arr(max(min(((INVRETXB() and INVRETXB() * (1 - INDPLAF())) + (INVRETXBA() and INVRETXBA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1())), 0)) and arr(max(min(((INVRETXB() and INVRETXB() * (1 - INDPLAF())) + (INVRETXBA() and INVRETXBA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1())), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC3():
        """
        Reduction HXC
        """
        return (arr(max(min(((INVRETXC() and INVRETXC() * (1 - INDPLAF())) + (INVRETXCA() and INVRETXCA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2())), 0)) and arr(max(min(((INVRETXC() and INVRETXC() * (1 - INDPLAF())) + (INVRETXCA() and INVRETXCA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2())), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC4():
        """
        Reduction HXE
        """
        return (arr(max(min(((INVRETXE() and INVRETXE() * (1 - INDPLAF())) + (INVRETXEA() and INVRETXEA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2() - RSOC3())), 0)) and arr(max(min(((INVRETXE() and INVRETXE() * (1 - INDPLAF())) + (INVRETXEA() and INVRETXEA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2() - RSOC3())), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC5():
        """
        Reduction HXA retrocedee
        """
        return (arr(max(min(((INVRETXAR() and INVRETXAR() * (1 - INDPLAF())) + (INVRETXARA() and INVRETXARA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2() - RSOC3() - RSOC4())), 0)) and arr(max(min(((INVRETXAR() and INVRETXAR() * (1 - INDPLAF())) + (INVRETXARA() and INVRETXARA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2() - RSOC3() - RSOC4())), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC6():
        """
        Reduction HXB retrocedee
        """
        return (arr(max(min(((INVRETXBR() and INVRETXBR() * (1 - INDPLAF())) + (INVRETXBRA() and INVRETXBRA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2() - RSOC3() - RSOC4() - RSOC5())), 0)) and arr(max(min(((INVRETXBR() and INVRETXBR() * (1 - INDPLAF())) + (INVRETXBRA() and INVRETXBRA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2() - RSOC3() - RSOC4() - RSOC5())), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC7():
        """
        Reduction HXC retrocedee
        """
        return (arr(max(min(((INVRETXCR() and INVRETXCR() * (1 - INDPLAF())) + (INVRETXCRA() and INVRETXCRA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2() - RSOC3() - RSOC4() - RSOC5() - RSOC6())), 0)) and arr(max(min(((INVRETXCR() and INVRETXCR() * (1 - INDPLAF())) + (INVRETXCRA() and INVRETXCRA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2() - RSOC3() - RSOC4() - RSOC5() - RSOC6())), 0)) * (1 - V_CNR()))

    @cache_result
    def RSOC8():
        """
        Reduction HXE retrocedee
        """
        return (arr(max(min(((INVRETXER() and INVRETXER() * (1 - INDPLAF())) + (INVRETXERA() and INVRETXERA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2() - RSOC3() - RSOC4() - RSOC5() - RSOC6() - RSOC7())), 0)) and arr(max(min(((INVRETXER() and INVRETXER() * (1 - INDPLAF())) + (INVRETXERA() and INVRETXERA() * INDPLAF())), (RRISUP() - RDOMSOC1() - RSOC1() - RSOC2() - RSOC3() - RSOC4() - RSOC5() - RSOC6() - RSOC7())), 0)) * (1 - V_CNR()))

    @cache_result
    def RLOGSOC_1():
        """
        Pour simplifier prog - Inv. outre mer logt social - reduction
        """
        return ((((1 - saisie_variables.get('V_INDTEO', 0)) and (1 - saisie_variables.get('V_INDTEO', 0)) * (RSOC1() + RSOC2() + RSOC3() + RSOC4() + RSOC5() + RSOC6() + RSOC7() + RSOC8())) + (saisie_variables.get('V_INDTEO', 0) and saisie_variables.get('V_INDTEO', 0) * arr(((saisie_variables.get('V_RSOC1', 0) + saisie_variables.get('V_RSOC5', 0) + saisie_variables.get('V_RSOC2', 0) + saisie_variables.get('V_RSOC6', 0) + saisie_variables.get('V_RSOC3', 0) + saisie_variables.get('V_RSOC7', 0) + saisie_variables.get('V_RSOC4', 0) + saisie_variables.get('V_RSOC8', 0)) and (saisie_variables.get('V_RSOC1', 0) + saisie_variables.get('V_RSOC5', 0) + saisie_variables.get('V_RSOC2', 0) + saisie_variables.get('V_RSOC6', 0) + saisie_variables.get('V_RSOC3', 0) + saisie_variables.get('V_RSOC7', 0) + saisie_variables.get('V_RSOC4', 0) + saisie_variables.get('V_RSOC8', 0)) * (TX65 and TX65 / 100))))) and (((1 - saisie_variables.get('V_INDTEO', 0)) and (1 - saisie_variables.get('V_INDTEO', 0)) * (RSOC1() + RSOC2() + RSOC3() + RSOC4() + RSOC5() + RSOC6() + RSOC7() + RSOC8())) + (saisie_variables.get('V_INDTEO', 0) and saisie_variables.get('V_INDTEO', 0) * arr(((saisie_variables.get('V_RSOC1', 0) + saisie_variables.get('V_RSOC5', 0) + saisie_variables.get('V_RSOC2', 0) + saisie_variables.get('V_RSOC6', 0) + saisie_variables.get('V_RSOC3', 0) + saisie_variables.get('V_RSOC7', 0) + saisie_variables.get('V_RSOC4', 0) + saisie_variables.get('V_RSOC8', 0)) and (saisie_variables.get('V_RSOC1', 0) + saisie_variables.get('V_RSOC5', 0) + saisie_variables.get('V_RSOC2', 0) + saisie_variables.get('V_RSOC6', 0) + saisie_variables.get('V_RSOC3', 0) + saisie_variables.get('V_RSOC7', 0) + saisie_variables.get('V_RSOC4', 0) + saisie_variables.get('V_RSOC8', 0)) * (TX65 and TX65 / 100))))) * (1 - V_CNR()))

    @cache_result
    def RLOGSOC():
        """
        Investissements outre mer logement social - reduction
        """
        return ((RLOGSOC_1() and RLOGSOC_1() * (1 - base_variables['ART1731BIS'])) + (min(RLOGSOC_1(), (max((base_variables['RLOGSOC_P'] + base_variables['RLOGSOCP2']), (base_variables['RLOGSOC1731'] + 0)) and max((base_variables['RLOGSOC_P'] + base_variables['RLOGSOCP2']), (base_variables['RLOGSOC1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RLOGSOC_1(), (max((base_variables['RLOGSOC_P'] + base_variables['RLOGSOCP2']), (base_variables['RLOGSOC1731'] + 0)) and max((base_variables['RLOGSOC_P'] + base_variables['RLOGSOCP2']), (base_variables['RLOGSOC1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    # WARNING: the variable "RIDOMPROE3_1" is used in a formula at least, but is not defined.
    def RIDOMPROE3_1(): return 0
    @cache_result
    def RIDOMPROE3():
        """
        montant report dom ent. impute pro n-3
        """
        return (((RIDOMPROE3_1() and RIDOMPROE3_1() * (1 - base_variables['ART1731BIS'])) + (min(RIDOMPROE3_1(), (max((base_variables['RIDOMPROE3_P'] + base_variables['RIDOMPROE3P2']), (base_variables['RIDOMPROE31731'] + 0)) and max((base_variables['RIDOMPROE3_P'] + base_variables['RIDOMPROE3P2']), (base_variables['RIDOMPROE31731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RIDOMPROE3_1(), (max((base_variables['RIDOMPROE3_P'] + base_variables['RIDOMPROE3P2']), (base_variables['RIDOMPROE31731'] + 0)) and max((base_variables['RIDOMPROE3_P'] + base_variables['RIDOMPROE3P2']), (base_variables['RIDOMPROE31731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) and ((RIDOMPROE3_1() and RIDOMPROE3_1() * (1 - base_variables['ART1731BIS'])) + (min(RIDOMPROE3_1(), (max((base_variables['RIDOMPROE3_P'] + base_variables['RIDOMPROE3P2']), (base_variables['RIDOMPROE31731'] + 0)) and max((base_variables['RIDOMPROE3_P'] + base_variables['RIDOMPROE3P2']), (base_variables['RIDOMPROE31731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RIDOMPROE3_1(), (max((base_variables['RIDOMPROE3_P'] + base_variables['RIDOMPROE3P2']), (base_variables['RIDOMPROE31731'] + 0)) and max((base_variables['RIDOMPROE3_P'] + base_variables['RIDOMPROE3P2']), (base_variables['RIDOMPROE31731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS'])) * (1 - V_CNR()))

    @cache_result
    def RIDOMPROTOT():
        """
        montant report dom ent. total impute pro 
        """
        return RIDOMPROE3()

    @cache_result
    def RRILOC():
        """
        Reductions impot avant investissement O.M
        """
        return (RRISUP() - RLOGSOC() - RDOMSOC1() - RIDOMPROTOT())

    @cache_result
    def RLOC01():
        """
        Reduction HMM 
        """
        return (max(min(saisie_variables.get('INVOMREP', 0), RRILOC()), 0) and max(min(saisie_variables.get('INVOMREP', 0), RRILOC()), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC02():
        """
        Reduction 7MA
        """
        return (max(min(((INVRETMA() and INVRETMA() * (1 - INDPLAF())) + (INVRETMAA() and INVRETMAA() * INDPLAF())), (RRILOC() - RLOC01())), 0) and max(min(((INVRETMA() and INVRETMA() * (1 - INDPLAF())) + (INVRETMAA() and INVRETMAA() * INDPLAF())), (RRILOC() - RLOC01())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC03():
        """
        Reduction 7LG
        """
        return (max(min(((INVRETLG() and INVRETLG() * (1 - INDPLAF())) + (INVRETLGA() and INVRETLGA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02())), 0) and max(min(((INVRETLG() and INVRETLG() * (1 - INDPLAF())) + (INVRETLGA() and INVRETLGA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC04():
        """
        Reduction 7KS
        """
        return (max(min(((INVRETKS() and INVRETKS() * (1 - INDPLAF())) + (INVRETKSA() and INVRETKSA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03())), 0) and max(min(((INVRETKS() and INVRETKS() * (1 - INDPLAF())) + (INVRETKSA() and INVRETKSA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC05():
        """
        Reduction 7MN
        """
        return (max(min(((INVRETMAR() and INVRETMAR() * (1 - INDPLAF())) + (INVRETMARA() and INVRETMARA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04())), 0) and max(min(((INVRETMAR() and INVRETMAR() * (1 - INDPLAF())) + (INVRETMARA() and INVRETMARA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC06():
        """
        Reduction 7MB
        """
        return (max(min(((INVRETLGR() and INVRETLGR() * (1 - INDPLAF())) + (INVRETLGRA() and INVRETLGRA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04() - RLOC05())), 0) and max(min(((INVRETLGR() and INVRETLGR() * (1 - INDPLAF())) + (INVRETLGRA() and INVRETLGRA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04() - RLOC05())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC07():
        """
        Reduction 7LH
        """
        return (max(min(saisie_variables.get('INVOMENTMN', 0), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04() - RLOC05() - RLOC06())), 0) and max(min(saisie_variables.get('INVOMENTMN', 0), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04() - RLOC05() - RLOC06())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC08():
        """
        Reduction 7KT
        """
        return (max(min(((INVRETMB() and INVRETMB() * (1 - INDPLAF())) + (INVRETMBA() and INVRETMBA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04() - RLOC05() - RLOC06() - RLOC07())), 0) and max(min(((INVRETMB() and INVRETMB() * (1 - INDPLAF())) + (INVRETMBA() and INVRETMBA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04() - RLOC05() - RLOC06() - RLOC07())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC09():
        """
        Reduction 7MC
        """
        return (max(min(((INVRETMC() and INVRETMC() * (1 - INDPLAF())) + (INVRETMCA() and INVRETMCA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04() - RLOC05() - RLOC06() - RLOC07() - RLOC08())), 0) and max(min(((INVRETMC() and INVRETMC() * (1 - INDPLAF())) + (INVRETMCA() and INVRETMCA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04() - RLOC05() - RLOC06() - RLOC07() - RLOC08())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC10():
        """
        Reduction HLH
        """
        return (max(min(((INVRETLH() and INVRETLH() * (1 - INDPLAF())) + (INVRETLHA() and INVRETLHA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04() - RLOC05() - RLOC06() - RLOC07() - RLOC08() - RLOC09())), 0) and max(min(((INVRETLH() and INVRETLH() * (1 - INDPLAF())) + (INVRETLHA() and INVRETLHA() * INDPLAF())), (RRILOC() - RLOC01() - RLOC02() - RLOC03() - RLOC04() - RLOC05() - RLOC06() - RLOC07() - RLOC08() - RLOC09())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC11():
        """
        Reduction 7KU
        """
        return (max(min(((INVRETLI() and INVRETLI() * (1 - INDPLAF())) + (INVRETLIA() and INVRETLIA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10()]))), 0) and max(min(((INVRETLI() and INVRETLI() * (1 - INDPLAF())) + (INVRETLIA() and INVRETLIA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC12():
        """
        Reduction 7MA retrocedee
        """
        return (max(min(((INVRETKT() and INVRETKT() * (1 - INDPLAF())) + (INVRETKTA() and INVRETKTA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11()]))), 0) and max(min(((INVRETKT() and INVRETKT() * (1 - INDPLAF())) + (INVRETKTA() and INVRETKTA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC13():
        """
        Reduction 7LG retrocedee
        """
        return (max(min(((INVRETKU() and INVRETKU() * (1 - INDPLAF())) + (INVRETKUA() and INVRETKUA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12()]))), 0) and max(min(((INVRETKU() and INVRETKU() * (1 - INDPLAF())) + (INVRETKUA() and INVRETKUA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC14():
        """
        Reduction 7MB retrocede
        """
        return (max(min(((INVRETMBR() and INVRETMBR() * (1 - INDPLAF())) + (INVRETMBRA() and INVRETMBRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13()]))), 0) and max(min(((INVRETMBR() and INVRETMBR() * (1 - INDPLAF())) + (INVRETMBRA() and INVRETMBRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC15():
        """
        Reduction 7LH retrocede
        """
        return (max(min(((INVRETMCR() and INVRETMCR() * (1 - INDPLAF())) + (INVRETMCRA() and INVRETMCRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14()]))), 0) and max(min(((INVRETMCR() and INVRETMCR() * (1 - INDPLAF())) + (INVRETMCRA() and INVRETMCRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC16():
        """
        Reduction 7MC retrocede
        """
        return (max(min(((INVRETLHR() and INVRETLHR() * (1 - INDPLAF())) + (INVRETLHRA() and INVRETLHRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15()]))), 0) and max(min(((INVRETLHR() and INVRETLHR() * (1 - INDPLAF())) + (INVRETLHRA() and INVRETLHRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC17():
        """
        Reduction 7LI retrocede
        """
        return (max(min(((INVRETLIR() and INVRETLIR() * (1 - INDPLAF())) + (INVRETLIRA() and INVRETLIRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16()]))), 0) and max(min(((INVRETLIR() and INVRETLIR() * (1 - INDPLAF())) + (INVRETLIRA() and INVRETLIRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC18():
        """
        Reduction 7QV
        """
        return (max(min(saisie_variables.get('INVOMQV', 0), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17()]))), 0) and max(min(saisie_variables.get('INVOMQV', 0), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC19():
        """
        Reduction 7QE 
        """
        return (max(min(saisie_variables.get('INVENDEB2009', 0), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18()]))), 0) and max(min(saisie_variables.get('INVENDEB2009', 0), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC20():
        """
        Reduction 7QP non retrocede
        """
        return (max(min(((INVRETQP() and INVRETQP() * (1 - INDPLAF())) + (INVRETQPA() and INVRETQPA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19()]))), 0) and max(min(((INVRETQP() and INVRETQP() * (1 - INDPLAF())) + (INVRETQPA() and INVRETQPA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC21():
        """
        Reduction 7QG non retrocede
        """
        return (max(min(((INVRETQG() and INVRETQG() * (1 - INDPLAF())) + (INVRETQGA() and INVRETQGA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20()]))), 0) and max(min(((INVRETQG() and INVRETQG() * (1 - INDPLAF())) + (INVRETQGA() and INVRETQGA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC22():
        """
        Reduction 7PB non retrocede
        """
        return (max(min(((INVRETPB() and INVRETPB() * (1 - INDPLAF())) + (INVRETPBA() and INVRETPBA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21()]))), 0) and max(min(((INVRETPB() and INVRETPB() * (1 - INDPLAF())) + (INVRETPBA() and INVRETPBA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC23():
        """
        Reduction 7PF non retrocede
        """
        return (max(min(((INVRETPF() and INVRETPF() * (1 - INDPLAF())) + (INVRETPFA() and INVRETPFA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22()]))), 0) and max(min(((INVRETPF() and INVRETPF() * (1 - INDPLAF())) + (INVRETPFA() and INVRETPFA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC24():
        """
        Reduction 7PJ non retrocede
        """
        return (max(min(((INVRETPJ() and INVRETPJ() * (1 - INDPLAF())) + (INVRETPJA() and INVRETPJA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23()]))), 0) and max(min(((INVRETPJ() and INVRETPJ() * (1 - INDPLAF())) + (INVRETPJA() and INVRETPJA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC25():
        """
        Reduction 7QO non retrocede
        """
        return (max(min(((INVRETQO() and INVRETQO() * (1 - INDPLAF())) + (INVRETQOA() and INVRETQOA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24()]))), 0) and max(min(((INVRETQO() and INVRETQO() * (1 - INDPLAF())) + (INVRETQOA() and INVRETQOA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC26():
        """
        Reduction 7QF non retrocede
        """
        return (max(min(((INVRETQF() and INVRETQF() * (1 - INDPLAF())) + (INVRETQFA() and INVRETQFA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25()]))), 0) and max(min(((INVRETQF() and INVRETQF() * (1 - INDPLAF())) + (INVRETQFA() and INVRETQFA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC27():
        """
        Reduction 7PA non retrocede
        """
        return (max(min(((INVRETPA() and INVRETPA() * (1 - INDPLAF())) + (INVRETPAA() and INVRETPAA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26()]))), 0) and max(min(((INVRETPA() and INVRETPA() * (1 - INDPLAF())) + (INVRETPAA() and INVRETPAA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC28():
        """
        Reduction 7PE non retrocede
        """
        return (max(min(((INVRETPE() and INVRETPE() * (1 - INDPLAF())) + (INVRETPEA() and INVRETPEA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27()]))), 0) and max(min(((INVRETPE() and INVRETPE() * (1 - INDPLAF())) + (INVRETPEA() and INVRETPEA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC29():
        """
        Reduction 7PI non retrocede
        """
        return (max(min(((INVRETPI() and INVRETPI() * (1 - INDPLAF())) + (INVRETPIA() and INVRETPIA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28()]))), 0) and max(min(((INVRETPI() and INVRETPI() * (1 - INDPLAF())) + (INVRETPIA() and INVRETPIA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC30():
        """
        Reduction 7QR non retrocede
        """
        return (max(min(((INVRETQR() and INVRETQR() * (1 - INDPLAF())) + (INVRETQRA() and INVRETQRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29()]))), 0) and max(min(((INVRETQR() and INVRETQR() * (1 - INDPLAF())) + (INVRETQRA() and INVRETQRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC31():
        """
        Reduction 7QI non retrocede
        """
        return (max(min(((INVRETQI() and INVRETQI() * (1 - INDPLAF())) + (INVRETQIA() and INVRETQIA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30()]))), 0) and max(min(((INVRETQI() and INVRETQI() * (1 - INDPLAF())) + (INVRETQIA() and INVRETQIA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC32():
        """
        Reduction 7PD
        """
        return (max(min(((INVRETPD() and INVRETPD() * (1 - INDPLAF())) + (INVRETPDA() and INVRETPDA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31()]))), 0) and max(min(((INVRETPD() and INVRETPD() * (1 - INDPLAF())) + (INVRETPDA() and INVRETPDA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC33():
        """
        Reduction 7PH
        """
        return (max(min(((INVRETPH() and INVRETPH() * (1 - INDPLAF())) + (INVRETPHA() and INVRETPHA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32()]))), 0) and max(min(((INVRETPH() and INVRETPH() * (1 - INDPLAF())) + (INVRETPHA() and INVRETPHA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC34():
        """
        Reduction 7PL
        """
        return (max(min(((INVRETPL() and INVRETPL() * (1 - INDPLAF())) + (INVRETPLA() and INVRETPLA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33()]))), 0) and max(min(((INVRETPL() and INVRETPL() * (1 - INDPLAF())) + (INVRETPLA() and INVRETPLA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC35():
        """
        Reduction 7QP retrocede
        """
        return (max(min(((INVRETQPR() and INVRETQPR() * (1 - INDPLAF())) + (INVRETQPRA() and INVRETQPRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34()]))), 0) and max(min(((INVRETQPR() and INVRETQPR() * (1 - INDPLAF())) + (INVRETQPRA() and INVRETQPRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC36():
        """
        Reduction 7QG retrocede
        """
        return (max(min(((INVRETQGR() and INVRETQGR() * (1 - INDPLAF())) + (INVRETQGRA() and INVRETQGRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35()]))), 0) and max(min(((INVRETQGR() and INVRETQGR() * (1 - INDPLAF())) + (INVRETQGRA() and INVRETQGRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC37():
        """
        Reduction 7PB retrocede
        """
        return (max(min(((INVRETPBR() and INVRETPBR() * (1 - INDPLAF())) + (INVRETPBRA() and INVRETPBRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36()]))), 0) and max(min(((INVRETPBR() and INVRETPBR() * (1 - INDPLAF())) + (INVRETPBRA() and INVRETPBRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC38():
        """
        Reduction 7PF retrocede
        """
        return (max(min(((INVRETPFR() and INVRETPFR() * (1 - INDPLAF())) + (INVRETPFRA() and INVRETPFRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37()]))), 0) and max(min(((INVRETPFR() and INVRETPFR() * (1 - INDPLAF())) + (INVRETPFRA() and INVRETPFRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC39():
        """
        Reduction 7PJ retrocede
        """
        return (max(min(((INVRETPJR() and INVRETPJR() * (1 - INDPLAF())) + (INVRETPJRA() and INVRETPJRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38()]))), 0) and max(min(((INVRETPJR() and INVRETPJR() * (1 - INDPLAF())) + (INVRETPJRA() and INVRETPJRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC40():
        """
        Reduction 7QO retrocede
        """
        return (max(min(((INVRETQOR() and INVRETQOR() * (1 - INDPLAF())) + (INVRETQORA() and INVRETQORA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39()]))), 0) and max(min(((INVRETQOR() and INVRETQOR() * (1 - INDPLAF())) + (INVRETQORA() and INVRETQORA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC41():
        """
        Reduction 7QF retrocede
        """
        return (max(min(((INVRETQFR() and INVRETQFR() * (1 - INDPLAF())) + (INVRETQFRA() and INVRETQFRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40()]))), 0) and max(min(((INVRETQFR() and INVRETQFR() * (1 - INDPLAF())) + (INVRETQFRA() and INVRETQFRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC42():
        """
        Reduction 7PA retrocede
        """
        return (max(min(((INVRETPAR() and INVRETPAR() * (1 - INDPLAF())) + (INVRETPARA() and INVRETPARA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41()]))), 0) and max(min(((INVRETPAR() and INVRETPAR() * (1 - INDPLAF())) + (INVRETPARA() and INVRETPARA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC43():
        """
        Reduction 7PE retrocede
        """
        return (max(min(((INVRETPER() and INVRETPER() * (1 - INDPLAF())) + (INVRETPERA() and INVRETPERA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42()]))), 0) and max(min(((INVRETPER() and INVRETPER() * (1 - INDPLAF())) + (INVRETPERA() and INVRETPERA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC44():
        """
        Reduction HPI retrocede
        """
        return (max(min(((INVRETPIR() and INVRETPIR() * (1 - INDPLAF())) + (INVRETPIRA() and INVRETPIRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43()]))), 0) and max(min(((INVRETPIR() and INVRETPIR() * (1 - INDPLAF())) + (INVRETPIRA() and INVRETPIRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC45():
        """
        Reduction HPM
        """
        return (max(min(saisie_variables.get('INVOMRETPM', 0), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44()]))), 0) and max(min(saisie_variables.get('INVOMRETPM', 0), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC46():
        """
        Reduction HRJ
        """
        return (max(min(saisie_variables.get('INVOMENTRJ', 0), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45()]))), 0) and max(min(saisie_variables.get('INVOMENTRJ', 0), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC47():
        """
        Reduction HPO
        """
        return (max(min(((INVRETPO() and INVRETPO() * (1 - INDPLAF())) + (INVRETPOA() and INVRETPOA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46()]))), 0) and max(min(((INVRETPO() and INVRETPO() * (1 - INDPLAF())) + (INVRETPOA() and INVRETPOA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC48():
        """
        Reduction HPT
        """
        return (max(min(((INVRETPT() and INVRETPT() * (1 - INDPLAF())) + (INVRETPTA() and INVRETPTA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47()]))), 0) and max(min(((INVRETPT() and INVRETPT() * (1 - INDPLAF())) + (INVRETPTA() and INVRETPTA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC49():
        """
        Reduction HPY
        """
        return (max(min(((INVRETPY() and INVRETPY() * (1 - INDPLAF())) + (INVRETPYA() and INVRETPYA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48()]))), 0) and max(min(((INVRETPY() and INVRETPY() * (1 - INDPLAF())) + (INVRETPYA() and INVRETPYA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC50():
        """
        Reduction HRL
        """
        return (max(min(((INVRETRL() and INVRETRL() * (1 - INDPLAF())) + (INVRETRLA() and INVRETRLA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49()]))), 0) and max(min(((INVRETRL() and INVRETRL() * (1 - INDPLAF())) + (INVRETRLA() and INVRETRLA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC51():
        """
        Reduction HRQ
        """
        return (max(min(((INVRETRQ() and INVRETRQ() * (1 - INDPLAF())) + (INVRETRQA() and INVRETRQA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50()]))), 0) and max(min(((INVRETRQ() and INVRETRQ() * (1 - INDPLAF())) + (INVRETRQA() and INVRETRQA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC52():
        """
        Reduction HRV
        """
        return (max(min(((INVRETRV() and INVRETRV() * (1 - INDPLAF())) + (INVRETRVA() and INVRETRVA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51()]))), 0) and max(min(((INVRETRV() and INVRETRV() * (1 - INDPLAF())) + (INVRETRVA() and INVRETRVA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC53():
        """
        Reduction HNV
        """
        return (max(min(((INVRETNV() and INVRETNV() * (1 - INDPLAF())) + (INVRETNVA() and INVRETNVA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52()]))), 0) and max(min(((INVRETNV() and INVRETNV() * (1 - INDPLAF())) + (INVRETNVA() and INVRETNVA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC54():
        """
        Reduction HPN
        """
        return (max(min(((INVRETPN() and INVRETPN() * (1 - INDPLAF())) + (INVRETPNA() and INVRETPNA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53()]))), 0) and max(min(((INVRETPN() and INVRETPN() * (1 - INDPLAF())) + (INVRETPNA() and INVRETPNA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC55():
        """
        Reduction HPS
        """
        return (max(min(((INVRETPS() and INVRETPS() * (1 - INDPLAF())) + (INVRETPSA() and INVRETPSA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54()]))), 0) and max(min(((INVRETPS() and INVRETPS() * (1 - INDPLAF())) + (INVRETPSA() and INVRETPSA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC56():
        """
        Reduction HPX
        """
        return (max(min(((INVRETPX() and INVRETPX() * (1 - INDPLAF())) + (INVRETPXA() and INVRETPXA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55()]))), 0) and max(min(((INVRETPX() and INVRETPX() * (1 - INDPLAF())) + (INVRETPXA() and INVRETPXA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC57():
        """
        Reduction HRK
        """
        return (max(min(((INVRETRK() and INVRETRK() * (1 - INDPLAF())) + (INVRETRKA() and INVRETRKA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56()]))), 0) and max(min(((INVRETRK() and INVRETRK() * (1 - INDPLAF())) + (INVRETRKA() and INVRETRKA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC58():
        """
        Reduction HRP
        """
        return (max(min(((INVRETRP() and INVRETRP() * (1 - INDPLAF())) + (INVRETRPA() and INVRETRPA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57()]))), 0) and max(min(((INVRETRP() and INVRETRP() * (1 - INDPLAF())) + (INVRETRPA() and INVRETRPA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC59():
        """
        Reduction HRU
        """
        return (max(min(((INVRETRU() and INVRETRU() * (1 - INDPLAF())) + (INVRETRUA() and INVRETRUA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58()]))), 0) and max(min(((INVRETRU() and INVRETRU() * (1 - INDPLAF())) + (INVRETRUA() and INVRETRUA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC60():
        """
        Reduction HNU
        """
        return (max(min(((INVRETNU() and INVRETNU() * (1 - INDPLAF())) + (INVRETNUA() and INVRETNUA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59()]))), 0) and max(min(((INVRETNU() and INVRETNU() * (1 - INDPLAF())) + (INVRETNUA() and INVRETNUA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC61():
        """
        Reduction HPP
        """
        return (max(min(((INVRETPP() and INVRETPP() * (1 - INDPLAF())) + (INVRETPPA() and INVRETPPA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60()]))), 0) and max(min(((INVRETPP() and INVRETPP() * (1 - INDPLAF())) + (INVRETPPA() and INVRETPPA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC62():
        """
        Reduction HPU
        """
        return (max(min(((INVRETPU() and INVRETPU() * (1 - INDPLAF())) + (INVRETPUA() and INVRETPUA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61()]))), 0) and max(min(((INVRETPU() and INVRETPU() * (1 - INDPLAF())) + (INVRETPUA() and INVRETPUA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC63():
        """
        Reduction HRG
        """
        return (max(min(((INVRETRG() and INVRETRG() * (1 - INDPLAF())) + (INVRETRGA() and INVRETRGA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62()]))), 0) and max(min(((INVRETRG() and INVRETRG() * (1 - INDPLAF())) + (INVRETRGA() and INVRETRGA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC64():
        """
        Reduction HRM
        """
        return (max(min(((INVRETRM() and INVRETRM() * (1 - INDPLAF())) + (INVRETRMA() and INVRETRMA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63()]))), 0) and max(min(((INVRETRM() and INVRETRM() * (1 - INDPLAF())) + (INVRETRMA() and INVRETRMA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC65():
        """
        Reduction HRR
        """
        return (max(min(((INVRETRR() and INVRETRR() * (1 - INDPLAF())) + (INVRETRRA() and INVRETRRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64()]))), 0) and max(min(((INVRETRR() and INVRETRR() * (1 - INDPLAF())) + (INVRETRRA() and INVRETRRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC66():
        """
        Reduction HRW
        """
        return (max(min(((INVRETRW() and INVRETRW() * (1 - INDPLAF())) + (INVRETRWA() and INVRETRWA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65()]))), 0) and max(min(((INVRETRW() and INVRETRW() * (1 - INDPLAF())) + (INVRETRWA() and INVRETRWA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC67():
        """
        Reduction HNW
        """
        return (max(min(((INVRETNW() and INVRETNW() * (1 - INDPLAF())) + (INVRETNWA() and INVRETNWA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66()]))), 0) and max(min(((INVRETNW() and INVRETNW() * (1 - INDPLAF())) + (INVRETNWA() and INVRETNWA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC68():
        """
        Reduction HPR
        """
        return (max(min(((INVRETPR() and INVRETPR() * (1 - INDPLAF())) + (INVRETPRA() and INVRETPRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67()]))), 0) and max(min(((INVRETPR() and INVRETPR() * (1 - INDPLAF())) + (INVRETPRA() and INVRETPRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC69():
        """
        Reduction HPW
        """
        return (max(min(((INVRETPW() and INVRETPW() * (1 - INDPLAF())) + (INVRETPWA() and INVRETPWA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68()]))), 0) and max(min(((INVRETPW() and INVRETPW() * (1 - INDPLAF())) + (INVRETPWA() and INVRETPWA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC70():
        """
        Reduction HRI
        """
        return (max(min(((INVRETRI() and INVRETRI() * (1 - INDPLAF())) + (INVRETRIA() and INVRETRIA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69()]))), 0) and max(min(((INVRETRI() and INVRETRI() * (1 - INDPLAF())) + (INVRETRIA() and INVRETRIA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC71():
        """
        Reduction HRO
        """
        return (max(min(((INVRETRO() and INVRETRO() * (1 - INDPLAF())) + (INVRETROA() and INVRETROA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70()]))), 0) and max(min(((INVRETRO() and INVRETRO() * (1 - INDPLAF())) + (INVRETROA() and INVRETROA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC72():
        """
        Reduction HRT
        """
        return (max(min(((INVRETRT() and INVRETRT() * (1 - INDPLAF())) + (INVRETRTA() and INVRETRTA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71()]))), 0) and max(min(((INVRETRT() and INVRETRT() * (1 - INDPLAF())) + (INVRETRTA() and INVRETRTA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC73():
        """
        Reduction HRY
        """
        return (max(min(((INVRETRY() and INVRETRY() * (1 - INDPLAF())) + (INVRETRYA() and INVRETRYA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72()]))), 0) and max(min(((INVRETRY() and INVRETRY() * (1 - INDPLAF())) + (INVRETRYA() and INVRETRYA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC74():
        """
        Reduction HNY
        """
        return (max(min(((INVRETNY() and INVRETNY() * (1 - INDPLAF())) + (INVRETNYA() and INVRETNYA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73()]))), 0) and max(min(((INVRETNY() and INVRETNY() * (1 - INDPLAF())) + (INVRETNYA() and INVRETNYA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC75():
        """
        Reduction HPO retrocede
        """
        return (max(min(((INVRETPOR() and INVRETPOR() * (1 - INDPLAF())) + (INVRETPORA() and INVRETPORA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74()]))), 0) and max(min(((INVRETPOR() and INVRETPOR() * (1 - INDPLAF())) + (INVRETPORA() and INVRETPORA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC76():
        """
        Reduction HPT retrocede
        """
        return (max(min(((INVRETPTR() and INVRETPTR() * (1 - INDPLAF())) + (INVRETPTRA() and INVRETPTRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75()]))), 0) and max(min(((INVRETPTR() and INVRETPTR() * (1 - INDPLAF())) + (INVRETPTRA() and INVRETPTRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC77():
        """
        Reduction HPY retrocede
        """
        return (max(min(((INVRETPYR() and INVRETPYR() * (1 - INDPLAF())) + (INVRETPYRA() and INVRETPYRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76()]))), 0) and max(min(((INVRETPYR() and INVRETPYR() * (1 - INDPLAF())) + (INVRETPYRA() and INVRETPYRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC78():
        """
        Reduction HRL retrocede
        """
        return (max(min(((INVRETRLR() and INVRETRLR() * (1 - INDPLAF())) + (INVRETRLRA() and INVRETRLRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77()]))), 0) and max(min(((INVRETRLR() and INVRETRLR() * (1 - INDPLAF())) + (INVRETRLRA() and INVRETRLRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC79():
        """
        Reduction HRQ retrocede
        """
        return (max(min(((INVRETRQR() and INVRETRQR() * (1 - INDPLAF())) + (INVRETRQRA() and INVRETRQRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78()]))), 0) and max(min(((INVRETRQR() and INVRETRQR() * (1 - INDPLAF())) + (INVRETRQRA() and INVRETRQRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC80():
        """
        Reduction HRV retrocede
        """
        return (max(min(((INVRETRVR() and INVRETRVR() * (1 - INDPLAF())) + (INVRETRVRA() and INVRETRVRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79()]))), 0) and max(min(((INVRETRVR() and INVRETRVR() * (1 - INDPLAF())) + (INVRETRVRA() and INVRETRVRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC81():
        """
        Reduction HNV retrocede
        """
        return (max(min(((INVRETNVR() and INVRETNVR() * (1 - INDPLAF())) + (INVRETNVRA() and INVRETNVRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80()]))), 0) and max(min(((INVRETNVR() and INVRETNVR() * (1 - INDPLAF())) + (INVRETNVRA() and INVRETNVRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC82():
        """
        Reduction HPN retrocede
        """
        return (max(min(((INVRETPNR() and INVRETPNR() * (1 - INDPLAF())) + (INVRETPNRA() and INVRETPNRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81()]))), 0) and max(min(((INVRETPNR() and INVRETPNR() * (1 - INDPLAF())) + (INVRETPNRA() and INVRETPNRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC83():
        """
        Reduction HPS retrocede
        """
        return (max(min(((INVRETPSR() and INVRETPSR() * (1 - INDPLAF())) + (INVRETPSRA() and INVRETPSRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82()]))), 0) and max(min(((INVRETPSR() and INVRETPSR() * (1 - INDPLAF())) + (INVRETPSRA() and INVRETPSRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC84():
        """
        Reduction HPX retrocede
        """
        return (max(min(((INVRETPXR() and INVRETPXR() * (1 - INDPLAF())) + (INVRETPXRA() and INVRETPXRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83()]))), 0) and max(min(((INVRETPXR() and INVRETPXR() * (1 - INDPLAF())) + (INVRETPXRA() and INVRETPXRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC85():
        """
        Reduction HRK retrocede
        """
        return (max(min(((INVRETRKR() and INVRETRKR() * (1 - INDPLAF())) + (INVRETRKRA() and INVRETRKRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84()]))), 0) and max(min(((INVRETRKR() and INVRETRKR() * (1 - INDPLAF())) + (INVRETRKRA() and INVRETRKRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC86():
        """
        Reduction HRP retrocede
        """
        return (max(min(((INVRETRPR() and INVRETRPR() * (1 - INDPLAF())) + (INVRETRPRA() and INVRETRPRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85()]))), 0) and max(min(((INVRETRPR() and INVRETRPR() * (1 - INDPLAF())) + (INVRETRPRA() and INVRETRPRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC87():
        """
        Reduction HRU retrocede
        """
        return (max(min(((INVRETRUR() and INVRETRUR() * (1 - INDPLAF())) + (INVRETRURA() and INVRETRURA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86()]))), 0) and max(min(((INVRETRUR() and INVRETRUR() * (1 - INDPLAF())) + (INVRETRURA() and INVRETRURA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC88():
        """
        Reduction HNU retrocede
        """
        return (max(min(((INVRETNUR() and INVRETNUR() * (1 - INDPLAF())) + (INVRETNURA() and INVRETNURA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87()]))), 0) and max(min(((INVRETNUR() and INVRETNUR() * (1 - INDPLAF())) + (INVRETNURA() and INVRETNURA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC89():
        """
        Reduction HSB
        """
        return (max(min(((INVRETSB() and INVRETSB() * (1 - INDPLAF())) + (INVRETSBA() and INVRETSBA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88()]))), 0) and max(min(((INVRETSB() and INVRETSB() * (1 - INDPLAF())) + (INVRETSBA() and INVRETSBA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC90():
        """
        Reduction HSG
        """
        return (max(min(((INVRETSG() and INVRETSG() * (1 - INDPLAF())) + (INVRETSGA() and INVRETSGA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89()]))), 0) and max(min(((INVRETSG() and INVRETSG() * (1 - INDPLAF())) + (INVRETSGA() and INVRETSGA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC91():
        """
        Reduction HSL
        """
        return (max(min(((INVRETSL() and INVRETSL() * (1 - INDPLAF())) + (INVRETSLA() and INVRETSLA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90()]))), 0) and max(min(((INVRETSL() and INVRETSL() * (1 - INDPLAF())) + (INVRETSLA() and INVRETSLA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC92():
        """
        Reduction HSQ
        """
        return (max(min(((INVRETSQ() and INVRETSQ() * (1 - INDPLAF())) + (INVRETSQA() and INVRETSQA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91()]))), 0) and max(min(((INVRETSQ() and INVRETSQ() * (1 - INDPLAF())) + (INVRETSQA() and INVRETSQA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC93():
        """
        Reduction HSV
        """
        return (max(min(((INVRETSV() and INVRETSV() * (1 - INDPLAF())) + (INVRETSVA() and INVRETSVA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92()]))), 0) and max(min(((INVRETSV() and INVRETSV() * (1 - INDPLAF())) + (INVRETSVA() and INVRETSVA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC94():
        """
        Reduction HTA
        """
        return (max(min(((INVRETTA() and INVRETTA() * (1 - INDPLAF())) + (INVRETTAA() and INVRETTAA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93()]))), 0) and max(min(((INVRETTA() and INVRETTA() * (1 - INDPLAF())) + (INVRETTAA() and INVRETTAA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC95():
        """
        Reduction HSA
        """
        return (max(min(((INVRETSA() and INVRETSA() * (1 - INDPLAF())) + (INVRETSAA() and INVRETSAA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94()]))), 0) and max(min(((INVRETSA() and INVRETSA() * (1 - INDPLAF())) + (INVRETSAA() and INVRETSAA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC96():
        """
        Reduction HSF
        """
        return (max(min(((INVRETSF() and INVRETSF() * (1 - INDPLAF())) + (INVRETSFA() and INVRETSFA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95()]))), 0) and max(min(((INVRETSF() and INVRETSF() * (1 - INDPLAF())) + (INVRETSFA() and INVRETSFA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC97():
        """
        Reduction HSK
        """
        return (max(min(((INVRETSK() and INVRETSK() * (1 - INDPLAF())) + (INVRETSKA() and INVRETSKA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96()]))), 0) and max(min(((INVRETSK() and INVRETSK() * (1 - INDPLAF())) + (INVRETSKA() and INVRETSKA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC98():
        """
        Reduction HSP
        """
        return (max(min(((INVRETSP() and INVRETSP() * (1 - INDPLAF())) + (INVRETSPA() and INVRETSPA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97()]))), 0) and max(min(((INVRETSP() and INVRETSP() * (1 - INDPLAF())) + (INVRETSPA() and INVRETSPA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC99():
        """
        Reduction HSU
        """
        return (max(min(((INVRETSU() and INVRETSU() * (1 - INDPLAF())) + (INVRETSUA() and INVRETSUA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98()]))), 0) and max(min(((INVRETSU() and INVRETSU() * (1 - INDPLAF())) + (INVRETSUA() and INVRETSUA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC100():
        """
        Reduction HSZ
        """
        return (max(min(((INVRETSZ() and INVRETSZ() * (1 - INDPLAF())) + (INVRETSZA() and INVRETSZA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]))), 0) and max(min(((INVRETSZ() and INVRETSZ() * (1 - INDPLAF())) + (INVRETSZA() and INVRETSZA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC101():
        """
        Reduction HSC
        """
        return (max(min(((INVRETSC() and INVRETSC() * (1 - INDPLAF())) + (INVRETSCA() and INVRETSCA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - RLOC100())), 0) and max(min(((INVRETSC() and INVRETSC() * (1 - INDPLAF())) + (INVRETSCA() and INVRETSCA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - RLOC100())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC102():
        """
        Reduction HSH
        """
        return (max(min(((INVRETSH() and INVRETSH() * (1 - INDPLAF())) + (INVRETSHA() and INVRETSHA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - RLOC100() - RLOC101())), 0) and max(min(((INVRETSH() and INVRETSH() * (1 - INDPLAF())) + (INVRETSHA() and INVRETSHA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - RLOC100() - RLOC101())), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC103():
        """
        Reduction HSM
        """
        return (max(min(((INVRETSM() and INVRETSM() * (1 - INDPLAF())) + (INVRETSMA() and INVRETSMA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102()]))), 0) and max(min(((INVRETSM() and INVRETSM() * (1 - INDPLAF())) + (INVRETSMA() and INVRETSMA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC104():
        """
        Reduction HSR
        """
        return (max(min(((INVRETSR() and INVRETSR() * (1 - INDPLAF())) + (INVRETSRA() and INVRETSRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103()]))), 0) and max(min(((INVRETSR() and INVRETSR() * (1 - INDPLAF())) + (INVRETSRA() and INVRETSRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC105():
        """
        Reduction HSW
        """
        return (max(min(((INVRETSW() and INVRETSW() * (1 - INDPLAF())) + (INVRETSWA() and INVRETSWA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104()]))), 0) and max(min(((INVRETSW() and INVRETSW() * (1 - INDPLAF())) + (INVRETSWA() and INVRETSWA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC106():
        """
        Reduction HTB
        """
        return (max(min(((INVRETTB() and INVRETTB() * (1 - INDPLAF())) + (INVRETTBA() and INVRETTBA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105()]))), 0) and max(min(((INVRETTB() and INVRETTB() * (1 - INDPLAF())) + (INVRETTBA() and INVRETTBA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC107():
        """
        Reduction HSE
        """
        return (max(min(((INVRETSE() and INVRETSE() * (1 - INDPLAF())) + (INVRETSEA() and INVRETSEA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106()]))), 0) and max(min(((INVRETSE() and INVRETSE() * (1 - INDPLAF())) + (INVRETSEA() and INVRETSEA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC108():
        """
        Reduction HSJ
        """
        return (max(min(((INVRETSJ() and INVRETSJ() * (1 - INDPLAF())) + (INVRETSJA() and INVRETSJA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107()]))), 0) and max(min(((INVRETSJ() and INVRETSJ() * (1 - INDPLAF())) + (INVRETSJA() and INVRETSJA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC109():
        """
        Reduction HSO
        """
        return (max(min(((INVRETSO() and INVRETSO() * (1 - INDPLAF())) + (INVRETSOA() and INVRETSOA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108()]))), 0) and max(min(((INVRETSO() and INVRETSO() * (1 - INDPLAF())) + (INVRETSOA() and INVRETSOA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC110():
        """
        Reduction HST
        """
        return (max(min(((INVRETST() and INVRETST() * (1 - INDPLAF())) + (INVRETSTA() and INVRETSTA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109()]))), 0) and max(min(((INVRETST() and INVRETST() * (1 - INDPLAF())) + (INVRETSTA() and INVRETSTA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC111():
        """
        Reduction HSY
        """
        return (max(min(((INVRETSY() and INVRETSY() * (1 - INDPLAF())) + (INVRETSYA() and INVRETSYA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110()]))), 0) and max(min(((INVRETSY() and INVRETSY() * (1 - INDPLAF())) + (INVRETSYA() and INVRETSYA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC112():
        """
        Reduction HTD
        """
        return (max(min(((INVRETTD() and INVRETTD() * (1 - INDPLAF())) + (INVRETTDA() and INVRETTDA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111()]))), 0) and max(min(((INVRETTD() and INVRETTD() * (1 - INDPLAF())) + (INVRETTDA() and INVRETTDA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC113():
        """
        Reduction HSB retrocede
        """
        return (max(min(((INVRETSBR() and INVRETSBR() * (1 - INDPLAF())) + (INVRETSBRA() and INVRETSBRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112()]))), 0) and max(min(((INVRETSBR() and INVRETSBR() * (1 - INDPLAF())) + (INVRETSBRA() and INVRETSBRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC114():
        """
        Reduction HSG retrocede
        """
        return (max(min(((INVRETSGR() and INVRETSGR() * (1 - INDPLAF())) + (INVRETSGRA() and INVRETSGRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113()]))), 0) and max(min(((INVRETSGR() and INVRETSGR() * (1 - INDPLAF())) + (INVRETSGRA() and INVRETSGRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC115():
        """
        Reduction HSA retrocede
        """
        return (max(min(((INVRETSAR() and INVRETSAR() * (1 - INDPLAF())) + (INVRETSARA() and INVRETSARA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114()]))), 0) and max(min(((INVRETSAR() and INVRETSAR() * (1 - INDPLAF())) + (INVRETSARA() and INVRETSARA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC116():
        """
        Reduction HSF retrocede
        """
        return (max(min(((INVRETSFR() and INVRETSFR() * (1 - INDPLAF())) + (INVRETSFRA() and INVRETSFRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115()]))), 0) and max(min(((INVRETSFR() and INVRETSFR() * (1 - INDPLAF())) + (INVRETSFRA() and INVRETSFRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC117():
        """
        Reduction HSL retrocede
        """
        return (max(min(((INVRETSLR() and INVRETSLR() * (1 - INDPLAF())) + (INVRETSLRA() and INVRETSLRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116()]))), 0) and max(min(((INVRETSLR() and INVRETSLR() * (1 - INDPLAF())) + (INVRETSLRA() and INVRETSLRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC118():
        """
        Reduction HSQ retrocede
        """
        return (max(min(((INVRETSQR() and INVRETSQR() * (1 - INDPLAF())) + (INVRETSQRA() and INVRETSQRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117()]))), 0) and max(min(((INVRETSQR() and INVRETSQR() * (1 - INDPLAF())) + (INVRETSQRA() and INVRETSQRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC119():
        """
        Reduction HSV retrocede
        """
        return (max(min(((INVRETSVR() and INVRETSVR() * (1 - INDPLAF())) + (INVRETSVRA() and INVRETSVRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118()]))), 0) and max(min(((INVRETSVR() and INVRETSVR() * (1 - INDPLAF())) + (INVRETSVRA() and INVRETSVRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC120():
        """
        Reduction HTA retrocede
        """
        return (max(min(((INVRETTAR() and INVRETTAR() * (1 - INDPLAF())) + (INVRETTARA() and INVRETTARA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119()]))), 0) and max(min(((INVRETTAR() and INVRETTAR() * (1 - INDPLAF())) + (INVRETTARA() and INVRETTARA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC121():
        """
        Reduction HSK retrocede
        """
        return (max(min(((INVRETSKR() and INVRETSKR() * (1 - INDPLAF())) + (INVRETSKRA() and INVRETSKRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119(), RLOC120()]))), 0) and max(min(((INVRETSKR() and INVRETSKR() * (1 - INDPLAF())) + (INVRETSKRA() and INVRETSKRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119(), RLOC120()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC122():
        """
        Reduction HSP retrocede
        """
        return (max(min(((INVRETSPR() and INVRETSPR() * (1 - INDPLAF())) + (INVRETSPRA() and INVRETSPRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119(), RLOC120(), RLOC121()]))), 0) and max(min(((INVRETSPR() and INVRETSPR() * (1 - INDPLAF())) + (INVRETSPRA() and INVRETSPRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119(), RLOC120(), RLOC121()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC123():
        """
        Reduction HSU retrocede
        """
        return (max(min(((INVRETSUR() and INVRETSUR() * (1 - INDPLAF())) + (INVRETSURA() and INVRETSURA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119(), RLOC120(), RLOC121(), RLOC122()]))), 0) and max(min(((INVRETSUR() and INVRETSUR() * (1 - INDPLAF())) + (INVRETSURA() and INVRETSURA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119(), RLOC120(), RLOC121(), RLOC122()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOC124():
        """
        Reduction HSZ retrocede
        """
        return (max(min(((INVRETSZR() and INVRETSZR() * (1 - INDPLAF())) + (INVRETSZRA() and INVRETSZRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119(), RLOC120(), RLOC121(), RLOC122(), RLOC123()]))), 0) and max(min(((INVRETSZR() and INVRETSZR() * (1 - INDPLAF())) + (INVRETSZRA() and INVRETSZRA() * INDPLAF())), (RRILOC() - somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) - somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119(), RLOC120(), RLOC121(), RLOC122(), RLOC123()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RCOLENT_1():
        """
        Pour simplifier prog - Inv outre mer entreprise - report 2009 - reduc
        """
        return ((((1 - saisie_variables.get('V_INDTEO', 0)) and (1 - saisie_variables.get('V_INDTEO', 0)) * (somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) + somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119(), RLOC120(), RLOC121(), RLOC122(), RLOC123(), RLOC124()]))) + (saisie_variables.get('V_INDTEO', 0) and saisie_variables.get('V_INDTEO', 0) * (RLOC01() + RLOC07() + RLOC18() + RLOC19() + RLOC45() + RLOC46() + arr(((saisie_variables.get('V_RLOC03', 0) + saisie_variables.get('V_RLOC06', 0)) and (saisie_variables.get('V_RLOC03', 0) + saisie_variables.get('V_RLOC06', 0)) * (TX50 and TX50 / 100))) + arr(((saisie_variables.get('V_RLOC02', 0) + saisie_variables.get('V_RLOC05', 0)) and (saisie_variables.get('V_RLOC02', 0) + saisie_variables.get('V_RLOC05', 0)) * (TX60 and TX60 / 100))) + arr(((saisie_variables.get('V_RLOC10', 0) + saisie_variables.get('V_RLOC16', 0)) and (saisie_variables.get('V_RLOC10', 0) + saisie_variables.get('V_RLOC16', 0)) * (TX50 and TX50 / 100))) + arr(((saisie_variables.get('V_RLOC08', 0) + saisie_variables.get('V_RLOC14', 0)) and (saisie_variables.get('V_RLOC08', 0) + saisie_variables.get('V_RLOC14', 0)) * (TX60 and TX60 / 100))) + arr(((saisie_variables.get('V_RLOC25', 0) + saisie_variables.get('V_RLOC40', 0)) and (saisie_variables.get('V_RLOC25', 0) + saisie_variables.get('V_RLOC40', 0)) * (TX50 and TX50 / 100))) + arr(((saisie_variables.get('V_RLOC20', 0) + saisie_variables.get('V_RLOC35', 0)) and (saisie_variables.get('V_RLOC20', 0) + saisie_variables.get('V_RLOC35', 0)) * (TX60 and TX60 / 100))) + arr(((saisie_variables.get('V_RLOC54', 0) + saisie_variables.get('V_RLOC82', 0)) and (saisie_variables.get('V_RLOC54', 0) + saisie_variables.get('V_RLOC82', 0)) * (TX50 and TX50 / 100))) + arr(((saisie_variables.get('V_RLOC47', 0) + saisie_variables.get('V_RLOC75', 0)) and (saisie_variables.get('V_RLOC47', 0) + saisie_variables.get('V_RLOC75', 0)) * (TX60 and TX60 / 100))) + arr(((saisie_variables.get('V_RLOC27', 0) + saisie_variables.get('V_RLOC42', 0)) and (saisie_variables.get('V_RLOC27', 0) + saisie_variables.get('V_RLOC42', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC22', 0) + saisie_variables.get('V_RLOC37', 0)) and (saisie_variables.get('V_RLOC22', 0) + saisie_variables.get('V_RLOC37', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC57', 0) + saisie_variables.get('V_RLOC85', 0)) and (saisie_variables.get('V_RLOC57', 0) + saisie_variables.get('V_RLOC85', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC50', 0) + saisie_variables.get('V_RLOC78', 0)) and (saisie_variables.get('V_RLOC50', 0) + saisie_variables.get('V_RLOC78', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC11', 0) + saisie_variables.get('V_RLOC17', 0)) and (saisie_variables.get('V_RLOC11', 0) + saisie_variables.get('V_RLOC17', 0)) * (TX50 and TX50 / 100))) + arr(((saisie_variables.get('V_RLOC09', 0) + saisie_variables.get('V_RLOC15', 0)) and (saisie_variables.get('V_RLOC09', 0) + saisie_variables.get('V_RLOC15', 0)) * (60 and 60 / 100))) + arr(((saisie_variables.get('V_RLOC26', 0) + saisie_variables.get('V_RLOC41', 0)) and (saisie_variables.get('V_RLOC26', 0) + saisie_variables.get('V_RLOC41', 0)) * (50 and 50 / 100))) + arr(((saisie_variables.get('V_RLOC21', 0) + saisie_variables.get('V_RLOC36', 0)) and (saisie_variables.get('V_RLOC21', 0) + saisie_variables.get('V_RLOC36', 0)) * (60 and 60 / 100))) + arr(((saisie_variables.get('V_RLOC55', 0) + saisie_variables.get('V_RLOC83', 0)) and (saisie_variables.get('V_RLOC55', 0) + saisie_variables.get('V_RLOC83', 0)) * (50 and 50 / 100))) + arr(((saisie_variables.get('V_RLOC48', 0) + saisie_variables.get('V_RLOC76', 0)) and (saisie_variables.get('V_RLOC48', 0) + saisie_variables.get('V_RLOC76', 0)) * (60 and 60 / 100))) + arr(((saisie_variables.get('V_RLOC28', 0) + saisie_variables.get('V_RLOC43', 0)) and (saisie_variables.get('V_RLOC28', 0) + saisie_variables.get('V_RLOC43', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC23', 0) + saisie_variables.get('V_RLOC38', 0)) and (saisie_variables.get('V_RLOC23', 0) + saisie_variables.get('V_RLOC38', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC58', 0) + saisie_variables.get('V_RLOC86', 0)) and (saisie_variables.get('V_RLOC58', 0) + saisie_variables.get('V_RLOC86', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC51', 0) + saisie_variables.get('V_RLOC79', 0)) and (saisie_variables.get('V_RLOC51', 0) + saisie_variables.get('V_RLOC79', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC95', 0) + saisie_variables.get('V_RLOC115', 0)) and (saisie_variables.get('V_RLOC95', 0) + saisie_variables.get('V_RLOC115', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC89', 0) + saisie_variables.get('V_RLOC113', 0)) and (saisie_variables.get('V_RLOC89', 0) + saisie_variables.get('V_RLOC113', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC97', 0) + saisie_variables.get('V_RLOC121', 0)) and (saisie_variables.get('V_RLOC97', 0) + saisie_variables.get('V_RLOC121', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC91', 0) + saisie_variables.get('V_RLOC117', 0)) and (saisie_variables.get('V_RLOC91', 0) + saisie_variables.get('V_RLOC117', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC29', 0) + saisie_variables.get('V_RLOC44', 0)) and (saisie_variables.get('V_RLOC29', 0) + saisie_variables.get('V_RLOC44', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC24', 0) + saisie_variables.get('V_RLOC39', 0)) and (saisie_variables.get('V_RLOC24', 0) + saisie_variables.get('V_RLOC39', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC56', 0) + saisie_variables.get('V_RLOC84', 0)) and (saisie_variables.get('V_RLOC56', 0) + saisie_variables.get('V_RLOC84', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC49', 0) + saisie_variables.get('V_RLOC77', 0)) and (saisie_variables.get('V_RLOC49', 0) + saisie_variables.get('V_RLOC77', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC59', 0) + saisie_variables.get('V_RLOC87', 0)) and (saisie_variables.get('V_RLOC59', 0) + saisie_variables.get('V_RLOC87', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC52', 0) + saisie_variables.get('V_RLOC80', 0)) and (saisie_variables.get('V_RLOC52', 0) + saisie_variables.get('V_RLOC80', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC96', 0) + saisie_variables.get('V_RLOC116', 0)) and (saisie_variables.get('V_RLOC96', 0) + saisie_variables.get('V_RLOC116', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC90', 0) + saisie_variables.get('V_RLOC114', 0)) and (saisie_variables.get('V_RLOC90', 0) + saisie_variables.get('V_RLOC114', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC98', 0) + saisie_variables.get('V_RLOC122', 0)) and (saisie_variables.get('V_RLOC98', 0) + saisie_variables.get('V_RLOC122', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC92', 0) + saisie_variables.get('V_RLOC118', 0)) and (saisie_variables.get('V_RLOC92', 0) + saisie_variables.get('V_RLOC118', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC60', 0) + saisie_variables.get('V_RLOC88', 0)) and (saisie_variables.get('V_RLOC60', 0) + saisie_variables.get('V_RLOC88', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC53', 0) + saisie_variables.get('V_RLOC81', 0)) and (saisie_variables.get('V_RLOC53', 0) + saisie_variables.get('V_RLOC81', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC99', 0) + saisie_variables.get('V_RLOC123', 0)) and (saisie_variables.get('V_RLOC99', 0) + saisie_variables.get('V_RLOC123', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC93', 0) + saisie_variables.get('V_RLOC119', 0)) and (saisie_variables.get('V_RLOC93', 0) + saisie_variables.get('V_RLOC119', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC100', 0) + saisie_variables.get('V_RLOC124', 0)) and (saisie_variables.get('V_RLOC100', 0) + saisie_variables.get('V_RLOC124', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC94', 0) + saisie_variables.get('V_RLOC120', 0)) and (saisie_variables.get('V_RLOC94', 0) + saisie_variables.get('V_RLOC120', 0)) * (625 and 625 / 1000)))))) and (((1 - saisie_variables.get('V_INDTEO', 0)) and (1 - saisie_variables.get('V_INDTEO', 0)) * (somme([RLOC01(), RLOC02(), RLOC03(), RLOC04(), RLOC05(), RLOC06(), RLOC07(), RLOC08(), RLOC09(), RLOC10(), RLOC11(), RLOC12(), RLOC13(), RLOC14(), RLOC15(), RLOC16(), RLOC17(), RLOC18(), RLOC19(), RLOC20(), RLOC21(), RLOC22(), RLOC23(), RLOC24(), RLOC25(), RLOC26(), RLOC27(), RLOC28(), RLOC29(), RLOC30(), RLOC31(), RLOC32(), RLOC33(), RLOC34(), RLOC35(), RLOC36(), RLOC37(), RLOC38(), RLOC39(), RLOC40(), RLOC41(), RLOC42(), RLOC43(), RLOC44(), RLOC45(), RLOC46(), RLOC47(), RLOC48(), RLOC49(), RLOC50(), RLOC51(), RLOC52(), RLOC53(), RLOC54(), RLOC55(), RLOC56(), RLOC57(), RLOC58(), RLOC59(), RLOC60(), RLOC61(), RLOC62(), RLOC63(), RLOC64(), RLOC65(), RLOC66(), RLOC67(), RLOC68(), RLOC69(), RLOC70(), RLOC71(), RLOC72(), RLOC73(), RLOC74(), RLOC75(), RLOC76(), RLOC77(), RLOC78(), RLOC79(), RLOC80(), RLOC81(), RLOC82(), RLOC83(), RLOC84(), RLOC85(), RLOC86(), RLOC87(), RLOC88(), RLOC89(), RLOC90(), RLOC91(), RLOC92(), RLOC93(), RLOC94(), RLOC95(), RLOC96(), RLOC97(), RLOC98(), RLOC99()]) + somme([RLOC100(), RLOC101(), RLOC102(), RLOC103(), RLOC104(), RLOC105(), RLOC106(), RLOC107(), RLOC108(), RLOC109(), RLOC110(), RLOC111(), RLOC112(), RLOC113(), RLOC114(), RLOC115(), RLOC116(), RLOC117(), RLOC118(), RLOC119(), RLOC120(), RLOC121(), RLOC122(), RLOC123(), RLOC124()]))) + (saisie_variables.get('V_INDTEO', 0) and saisie_variables.get('V_INDTEO', 0) * (RLOC01() + RLOC07() + RLOC18() + RLOC19() + RLOC45() + RLOC46() + arr(((saisie_variables.get('V_RLOC03', 0) + saisie_variables.get('V_RLOC06', 0)) and (saisie_variables.get('V_RLOC03', 0) + saisie_variables.get('V_RLOC06', 0)) * (TX50 and TX50 / 100))) + arr(((saisie_variables.get('V_RLOC02', 0) + saisie_variables.get('V_RLOC05', 0)) and (saisie_variables.get('V_RLOC02', 0) + saisie_variables.get('V_RLOC05', 0)) * (TX60 and TX60 / 100))) + arr(((saisie_variables.get('V_RLOC10', 0) + saisie_variables.get('V_RLOC16', 0)) and (saisie_variables.get('V_RLOC10', 0) + saisie_variables.get('V_RLOC16', 0)) * (TX50 and TX50 / 100))) + arr(((saisie_variables.get('V_RLOC08', 0) + saisie_variables.get('V_RLOC14', 0)) and (saisie_variables.get('V_RLOC08', 0) + saisie_variables.get('V_RLOC14', 0)) * (TX60 and TX60 / 100))) + arr(((saisie_variables.get('V_RLOC25', 0) + saisie_variables.get('V_RLOC40', 0)) and (saisie_variables.get('V_RLOC25', 0) + saisie_variables.get('V_RLOC40', 0)) * (TX50 and TX50 / 100))) + arr(((saisie_variables.get('V_RLOC20', 0) + saisie_variables.get('V_RLOC35', 0)) and (saisie_variables.get('V_RLOC20', 0) + saisie_variables.get('V_RLOC35', 0)) * (TX60 and TX60 / 100))) + arr(((saisie_variables.get('V_RLOC54', 0) + saisie_variables.get('V_RLOC82', 0)) and (saisie_variables.get('V_RLOC54', 0) + saisie_variables.get('V_RLOC82', 0)) * (TX50 and TX50 / 100))) + arr(((saisie_variables.get('V_RLOC47', 0) + saisie_variables.get('V_RLOC75', 0)) and (saisie_variables.get('V_RLOC47', 0) + saisie_variables.get('V_RLOC75', 0)) * (TX60 and TX60 / 100))) + arr(((saisie_variables.get('V_RLOC27', 0) + saisie_variables.get('V_RLOC42', 0)) and (saisie_variables.get('V_RLOC27', 0) + saisie_variables.get('V_RLOC42', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC22', 0) + saisie_variables.get('V_RLOC37', 0)) and (saisie_variables.get('V_RLOC22', 0) + saisie_variables.get('V_RLOC37', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC57', 0) + saisie_variables.get('V_RLOC85', 0)) and (saisie_variables.get('V_RLOC57', 0) + saisie_variables.get('V_RLOC85', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC50', 0) + saisie_variables.get('V_RLOC78', 0)) and (saisie_variables.get('V_RLOC50', 0) + saisie_variables.get('V_RLOC78', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC11', 0) + saisie_variables.get('V_RLOC17', 0)) and (saisie_variables.get('V_RLOC11', 0) + saisie_variables.get('V_RLOC17', 0)) * (TX50 and TX50 / 100))) + arr(((saisie_variables.get('V_RLOC09', 0) + saisie_variables.get('V_RLOC15', 0)) and (saisie_variables.get('V_RLOC09', 0) + saisie_variables.get('V_RLOC15', 0)) * (60 and 60 / 100))) + arr(((saisie_variables.get('V_RLOC26', 0) + saisie_variables.get('V_RLOC41', 0)) and (saisie_variables.get('V_RLOC26', 0) + saisie_variables.get('V_RLOC41', 0)) * (50 and 50 / 100))) + arr(((saisie_variables.get('V_RLOC21', 0) + saisie_variables.get('V_RLOC36', 0)) and (saisie_variables.get('V_RLOC21', 0) + saisie_variables.get('V_RLOC36', 0)) * (60 and 60 / 100))) + arr(((saisie_variables.get('V_RLOC55', 0) + saisie_variables.get('V_RLOC83', 0)) and (saisie_variables.get('V_RLOC55', 0) + saisie_variables.get('V_RLOC83', 0)) * (50 and 50 / 100))) + arr(((saisie_variables.get('V_RLOC48', 0) + saisie_variables.get('V_RLOC76', 0)) and (saisie_variables.get('V_RLOC48', 0) + saisie_variables.get('V_RLOC76', 0)) * (60 and 60 / 100))) + arr(((saisie_variables.get('V_RLOC28', 0) + saisie_variables.get('V_RLOC43', 0)) and (saisie_variables.get('V_RLOC28', 0) + saisie_variables.get('V_RLOC43', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC23', 0) + saisie_variables.get('V_RLOC38', 0)) and (saisie_variables.get('V_RLOC23', 0) + saisie_variables.get('V_RLOC38', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC58', 0) + saisie_variables.get('V_RLOC86', 0)) and (saisie_variables.get('V_RLOC58', 0) + saisie_variables.get('V_RLOC86', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC51', 0) + saisie_variables.get('V_RLOC79', 0)) and (saisie_variables.get('V_RLOC51', 0) + saisie_variables.get('V_RLOC79', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC95', 0) + saisie_variables.get('V_RLOC115', 0)) and (saisie_variables.get('V_RLOC95', 0) + saisie_variables.get('V_RLOC115', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC89', 0) + saisie_variables.get('V_RLOC113', 0)) and (saisie_variables.get('V_RLOC89', 0) + saisie_variables.get('V_RLOC113', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC97', 0) + saisie_variables.get('V_RLOC121', 0)) and (saisie_variables.get('V_RLOC97', 0) + saisie_variables.get('V_RLOC121', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC91', 0) + saisie_variables.get('V_RLOC117', 0)) and (saisie_variables.get('V_RLOC91', 0) + saisie_variables.get('V_RLOC117', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC29', 0) + saisie_variables.get('V_RLOC44', 0)) and (saisie_variables.get('V_RLOC29', 0) + saisie_variables.get('V_RLOC44', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC24', 0) + saisie_variables.get('V_RLOC39', 0)) and (saisie_variables.get('V_RLOC24', 0) + saisie_variables.get('V_RLOC39', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC56', 0) + saisie_variables.get('V_RLOC84', 0)) and (saisie_variables.get('V_RLOC56', 0) + saisie_variables.get('V_RLOC84', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC49', 0) + saisie_variables.get('V_RLOC77', 0)) and (saisie_variables.get('V_RLOC49', 0) + saisie_variables.get('V_RLOC77', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC59', 0) + saisie_variables.get('V_RLOC87', 0)) and (saisie_variables.get('V_RLOC59', 0) + saisie_variables.get('V_RLOC87', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC52', 0) + saisie_variables.get('V_RLOC80', 0)) and (saisie_variables.get('V_RLOC52', 0) + saisie_variables.get('V_RLOC80', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC96', 0) + saisie_variables.get('V_RLOC116', 0)) and (saisie_variables.get('V_RLOC96', 0) + saisie_variables.get('V_RLOC116', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC90', 0) + saisie_variables.get('V_RLOC114', 0)) and (saisie_variables.get('V_RLOC90', 0) + saisie_variables.get('V_RLOC114', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC98', 0) + saisie_variables.get('V_RLOC122', 0)) and (saisie_variables.get('V_RLOC98', 0) + saisie_variables.get('V_RLOC122', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC92', 0) + saisie_variables.get('V_RLOC118', 0)) and (saisie_variables.get('V_RLOC92', 0) + saisie_variables.get('V_RLOC118', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC60', 0) + saisie_variables.get('V_RLOC88', 0)) and (saisie_variables.get('V_RLOC60', 0) + saisie_variables.get('V_RLOC88', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC53', 0) + saisie_variables.get('V_RLOC81', 0)) and (saisie_variables.get('V_RLOC53', 0) + saisie_variables.get('V_RLOC81', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC99', 0) + saisie_variables.get('V_RLOC123', 0)) and (saisie_variables.get('V_RLOC99', 0) + saisie_variables.get('V_RLOC123', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC93', 0) + saisie_variables.get('V_RLOC119', 0)) and (saisie_variables.get('V_RLOC93', 0) + saisie_variables.get('V_RLOC119', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RLOC100', 0) + saisie_variables.get('V_RLOC124', 0)) and (saisie_variables.get('V_RLOC100', 0) + saisie_variables.get('V_RLOC124', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RLOC94', 0) + saisie_variables.get('V_RLOC120', 0)) and (saisie_variables.get('V_RLOC94', 0) + saisie_variables.get('V_RLOC120', 0)) * (625 and 625 / 1000)))))) * (1 - V_CNR()))

    @cache_result
    def RCOLENT():
        """
        Investissements outre mer entreprise - report 2009 - retenu
        """
        return ((RCOLENT_1() and RCOLENT_1() * (1 - base_variables['ART1731BIS'])) + (min(RCOLENT_1(), (max((base_variables['RCOLENT_P'] + base_variables['RCOLENTP2']), (base_variables['RCOLENT1731'] + 0)) and max((base_variables['RCOLENT_P'] + base_variables['RCOLENTP2']), (base_variables['RCOLENT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RCOLENT_1(), (max((base_variables['RCOLENT_P'] + base_variables['RCOLENTP2']), (base_variables['RCOLENT1731'] + 0)) and max((base_variables['RCOLENT_P'] + base_variables['RCOLENTP2']), (base_variables['RCOLENT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RRIRENT():
        """
        Reductions impot avant investissement O.M
        """
        return (RRISUP() - RLOGSOC() - RDOMSOC1() - RIDOMPROTOT() - RCOLENT())

    @cache_result
    def RENT01():
        """
        Reduction HAB
        """
        return (max(min(((INVRETAB() and INVRETAB() * (1 - INDPLAF())) + (INVRETABA() and INVRETABA() * INDPLAF())), RRIRENT()), 0) and max(min(((INVRETAB() and INVRETAB() * (1 - INDPLAF())) + (INVRETABA() and INVRETABA() * INDPLAF())), RRIRENT()), 0) * (1 - V_CNR()))

    @cache_result
    def RENT02():
        """
        Reduction HAG
        """
        return (max(min(((INVRETAG() and INVRETAG() * (1 - INDPLAF())) + (INVRETAGA() and INVRETAGA() * INDPLAF())), (RRIRENT() - RENT01())), 0) and max(min(((INVRETAG() and INVRETAG() * (1 - INDPLAF())) + (INVRETAGA() and INVRETAGA() * INDPLAF())), (RRIRENT() - RENT01())), 0) * (1 - V_CNR()))

    @cache_result
    def RENT03():
        """
        Reduction HAL
        """
        return (max(min(((INVRETAL() and INVRETAL() * (1 - INDPLAF())) + (INVRETALA() and INVRETALA() * INDPLAF())), (RRIRENT() - RENT01() - RENT02())), 0) and max(min(((INVRETAL() and INVRETAL() * (1 - INDPLAF())) + (INVRETALA() and INVRETALA() * INDPLAF())), (RRIRENT() - RENT01() - RENT02())), 0) * (1 - V_CNR()))

    @cache_result
    def RENT04():
        """
        Reduction HAQ
        """
        return (max(min(((INVRETAQ() and INVRETAQ() * (1 - INDPLAF())) + (INVRETAQA() and INVRETAQA() * INDPLAF())), (RRIRENT() - RENT01() - RENT02() - RENT03())), 0) and max(min(((INVRETAQ() and INVRETAQ() * (1 - INDPLAF())) + (INVRETAQA() and INVRETAQA() * INDPLAF())), (RRIRENT() - RENT01() - RENT02() - RENT03())), 0) * (1 - V_CNR()))

    @cache_result
    def RENT05():
        """
        Reduction HAV
        """
        return (max(min(((INVRETAV() and INVRETAV() * (1 - INDPLAF())) + (INVRETAVA() and INVRETAVA() * INDPLAF())), (RRIRENT() - RENT01() - RENT02() - RENT03() - RENT04())), 0) and max(min(((INVRETAV() and INVRETAV() * (1 - INDPLAF())) + (INVRETAVA() and INVRETAVA() * INDPLAF())), (RRIRENT() - RENT01() - RENT02() - RENT03() - RENT04())), 0) * (1 - V_CNR()))

    @cache_result
    def RENT06():
        """
        Reduction HBB
        """
        return (max(min(((INVRETBB() and INVRETBB() * (1 - INDPLAF())) + (INVRETBBA() and INVRETBBA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05()]))), 0) and max(min(((INVRETBB() and INVRETBB() * (1 - INDPLAF())) + (INVRETBBA() and INVRETBBA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT07():
        """
        Reduction HAA
        """
        return (max(min(((INVRETAA() and INVRETAA() * (1 - INDPLAF())) + (INVRETAAA() and INVRETAAA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06()]))), 0) and max(min(((INVRETAA() and INVRETAA() * (1 - INDPLAF())) + (INVRETAAA() and INVRETAAA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT08():
        """
        Reduction HAF
        """
        return (max(min(((INVRETAF() and INVRETAF() * (1 - INDPLAF())) + (INVRETAFA() and INVRETAFA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07()]))), 0) and max(min(((INVRETAF() and INVRETAF() * (1 - INDPLAF())) + (INVRETAFA() and INVRETAFA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT09():
        """
        Reduction HAK
        """
        return (max(min(((INVRETAK() and INVRETAK() * (1 - INDPLAF())) + (INVRETAKA() and INVRETAKA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08()]))), 0) and max(min(((INVRETAK() and INVRETAK() * (1 - INDPLAF())) + (INVRETAKA() and INVRETAKA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT10():
        """
        Reduction HAP
        """
        return (max(min(((INVRETAP() and INVRETAP() * (1 - INDPLAF())) + (INVRETAPA() and INVRETAPA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09()]))), 0) and max(min(((INVRETAP() and INVRETAP() * (1 - INDPLAF())) + (INVRETAPA() and INVRETAPA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT11():
        """
        Reduction HAU
        """
        return (max(min(((INVRETAU() and INVRETAU() * (1 - INDPLAF())) + (INVRETAUA() and INVRETAUA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10()]))), 0) and max(min(((INVRETAU() and INVRETAU() * (1 - INDPLAF())) + (INVRETAUA() and INVRETAUA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT12():
        """
        Reduction HBA
        """
        return (max(min(((INVRETBA() and INVRETBA() * (1 - INDPLAF())) + (INVRETBAA() and INVRETBAA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11()]))), 0) and max(min(((INVRETBA() and INVRETBA() * (1 - INDPLAF())) + (INVRETBAA() and INVRETBAA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT13():
        """
        Reduction HAC
        """
        return (max(min(((INVRETAC() and INVRETAC() * (1 - INDPLAF())) + (INVRETACA() and INVRETACA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12()]))), 0) and max(min(((INVRETAC() and INVRETAC() * (1 - INDPLAF())) + (INVRETACA() and INVRETACA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT14():
        """
        Reduction HAH
        """
        return (max(min(((INVRETAH() and INVRETAH() * (1 - INDPLAF())) + (INVRETAHA() and INVRETAHA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13()]))), 0) and max(min(((INVRETAH() and INVRETAH() * (1 - INDPLAF())) + (INVRETAHA() and INVRETAHA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT15():
        """
        Reduction HAM
        """
        return (max(min(((INVRETAM() and INVRETAM() * (1 - INDPLAF())) + (INVRETAMA() and INVRETAMA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14()]))), 0) and max(min(((INVRETAM() and INVRETAM() * (1 - INDPLAF())) + (INVRETAMA() and INVRETAMA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT16():
        """
        Reduction HAR
        """
        return (max(min(((INVRETAR() and INVRETAR() * (1 - INDPLAF())) + (INVRETARA() and INVRETARA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15()]))), 0) and max(min(((INVRETAR() and INVRETAR() * (1 - INDPLAF())) + (INVRETARA() and INVRETARA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT17():
        """
        Reduction HAW
        """
        return (max(min(((INVRETAW() and INVRETAW() * (1 - INDPLAF())) + (INVRETAWA() and INVRETAWA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16()]))), 0) and max(min(((INVRETAW() and INVRETAW() * (1 - INDPLAF())) + (INVRETAWA() and INVRETAWA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT18():
        """
        Reduction HBE
        """
        return (max(min(((INVRETBE() and INVRETBE() * (1 - INDPLAF())) + (INVRETBEA() and INVRETBEA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17()]))), 0) and max(min(((INVRETBE() and INVRETBE() * (1 - INDPLAF())) + (INVRETBEA() and INVRETBEA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT19():
        """
        Reduction HAE
        """
        return (max(min(((INVRETAE() and INVRETAE() * (1 - INDPLAF())) + (INVRETAEA() and INVRETAEA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18()]))), 0) and max(min(((INVRETAE() and INVRETAE() * (1 - INDPLAF())) + (INVRETAEA() and INVRETAEA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT20():
        """
        Reduction HAJ
        """
        return (max(min(((INVRETAJ() and INVRETAJ() * (1 - INDPLAF())) + (INVRETAJA() and INVRETAJA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19()]))), 0) and max(min(((INVRETAJ() and INVRETAJ() * (1 - INDPLAF())) + (INVRETAJA() and INVRETAJA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT21():
        """
        Reduction HAO
        """
        return (max(min(((INVRETAO() and INVRETAO() * (1 - INDPLAF())) + (INVRETAOA() and INVRETAOA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20()]))), 0) and max(min(((INVRETAO() and INVRETAO() * (1 - INDPLAF())) + (INVRETAOA() and INVRETAOA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT22():
        """
        Reduction HAT
        """
        return (max(min(((INVRETAT() and INVRETAT() * (1 - INDPLAF())) + (INVRETATA() and INVRETATA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21()]))), 0) and max(min(((INVRETAT() and INVRETAT() * (1 - INDPLAF())) + (INVRETATA() and INVRETATA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT23():
        """
        Reduction HAY
        """
        return (max(min(((INVRETAY() and INVRETAY() * (1 - INDPLAF())) + (INVRETAYA() and INVRETAYA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22()]))), 0) and max(min(((INVRETAY() and INVRETAY() * (1 - INDPLAF())) + (INVRETAYA() and INVRETAYA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT24():
        """
        Reduction HBG
        """
        return (max(min(((INVRETBG() and INVRETBG() * (1 - INDPLAF())) + (INVRETBGA() and INVRETBGA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23()]))), 0) and max(min(((INVRETBG() and INVRETBG() * (1 - INDPLAF())) + (INVRETBGA() and INVRETBGA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT25():
        """
        Reduction HAB retrocedee
        """
        return (max(min(((INVRETABR() and INVRETABR() * (1 - INDPLAF())) + (INVRETABRA() and INVRETABRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24()]))), 0) and max(min(((INVRETABR() and INVRETABR() * (1 - INDPLAF())) + (INVRETABRA() and INVRETABRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT26():
        """
        Reduction HAG retrocedee
        """
        return (max(min(((INVRETAGR() and INVRETAGR() * (1 - INDPLAF())) + (INVRETAGRA() and INVRETAGRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25()]))), 0) and max(min(((INVRETAGR() and INVRETAGR() * (1 - INDPLAF())) + (INVRETAGRA() and INVRETAGRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT27():
        """
        Reduction HAL retrocedee
        """
        return (max(min(((INVRETALR() and INVRETALR() * (1 - INDPLAF())) + (INVRETALRA() and INVRETALRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26()]))), 0) and max(min(((INVRETALR() and INVRETALR() * (1 - INDPLAF())) + (INVRETALRA() and INVRETALRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT28():
        """
        Reduction HAQ retrocedee
        """
        return (max(min(((INVRETAQR() and INVRETAQR() * (1 - INDPLAF())) + (INVRETAQRA() and INVRETAQRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27()]))), 0) and max(min(((INVRETAQR() and INVRETAQR() * (1 - INDPLAF())) + (INVRETAQRA() and INVRETAQRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT29():
        """
        Reduction HAV retrocedee
        """
        return (max(min(((INVRETAVR() and INVRETAVR() * (1 - INDPLAF())) + (INVRETAVRA() and INVRETAVRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28()]))), 0) and max(min(((INVRETAVR() and INVRETAVR() * (1 - INDPLAF())) + (INVRETAVRA() and INVRETAVRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT30():
        """
        Reduction HBB retrocedee
        """
        return (max(min(((INVRETBBR() and INVRETBBR() * (1 - INDPLAF())) + (INVRETBBRA() and INVRETBBRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29()]))), 0) and max(min(((INVRETBBR() and INVRETBBR() * (1 - INDPLAF())) + (INVRETBBRA() and INVRETBBRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT31():
        """
        Reduction HAA retrocedee
        """
        return (max(min(((INVRETAAR() and INVRETAAR() * (1 - INDPLAF())) + (INVRETAARA() and INVRETAARA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30()]))), 0) and max(min(((INVRETAAR() and INVRETAAR() * (1 - INDPLAF())) + (INVRETAARA() and INVRETAARA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT32():
        """
        Reduction HAF retrocedee
        """
        return (max(min(((INVRETAFR() and INVRETAFR() * (1 - INDPLAF())) + (INVRETAFRA() and INVRETAFRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31()]))), 0) and max(min(((INVRETAFR() and INVRETAFR() * (1 - INDPLAF())) + (INVRETAFRA() and INVRETAFRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT33():
        """
        Reduction HAK retrocedee
        """
        return (max(min(((INVRETAKR() and INVRETAKR() * (1 - INDPLAF())) + (INVRETAKRA() and INVRETAKRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31(), RENT32()]))), 0) and max(min(((INVRETAKR() and INVRETAKR() * (1 - INDPLAF())) + (INVRETAKRA() and INVRETAKRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31(), RENT32()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT34():
        """
        Reduction HAP retrocedee
        """
        return (max(min(((INVRETAPR() and INVRETAPR() * (1 - INDPLAF())) + (INVRETAPRA() and INVRETAPRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31(), RENT32(), RENT33()]))), 0) and max(min(((INVRETAPR() and INVRETAPR() * (1 - INDPLAF())) + (INVRETAPRA() and INVRETAPRA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31(), RENT32(), RENT33()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT35():
        """
        Reduction HAU retrocedee
        """
        return (max(min(((INVRETAUR() and INVRETAUR() * (1 - INDPLAF())) + (INVRETAURA() and INVRETAURA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31(), RENT32(), RENT33(), RENT34()]))), 0) and max(min(((INVRETAUR() and INVRETAUR() * (1 - INDPLAF())) + (INVRETAURA() and INVRETAURA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31(), RENT32(), RENT33(), RENT34()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RENT36():
        """
        Reduction HBA retrocedee
        """
        return (max(min(((INVRETBAR() and INVRETBAR() * (1 - INDPLAF())) + (INVRETBARA() and INVRETBARA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31(), RENT32(), RENT33(), RENT34(), RENT35()]))), 0) and max(min(((INVRETBAR() and INVRETBAR() * (1 - INDPLAF())) + (INVRETBARA() and INVRETBARA() * INDPLAF())), (RRIRENT() - somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31(), RENT32(), RENT33(), RENT34(), RENT35()]))), 0) * (1 - V_CNR()))

    @cache_result
    def RLOCENT_1():
        """
        Pour simplifier : Inv. outre mer entreprise - reduc
        """
        return ((((1 - saisie_variables.get('V_INDTEO', 0)) and (1 - saisie_variables.get('V_INDTEO', 0)) * somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31(), RENT32(), RENT33(), RENT34(), RENT35(), RENT36()])) + (saisie_variables.get('V_INDTEO', 0) and saisie_variables.get('V_INDTEO', 0) * (arr(((saisie_variables.get('V_RENT07', 0) + saisie_variables.get('V_RENT31', 0)) and (saisie_variables.get('V_RENT07', 0) + saisie_variables.get('V_RENT31', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT01', 0) + saisie_variables.get('V_RENT25', 0)) and (saisie_variables.get('V_RENT01', 0) + saisie_variables.get('V_RENT25', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RENT09', 0) + saisie_variables.get('V_RENT33', 0)) and (saisie_variables.get('V_RENT09', 0) + saisie_variables.get('V_RENT33', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT03', 0) + saisie_variables.get('V_RENT27', 0)) and (saisie_variables.get('V_RENT03', 0) + saisie_variables.get('V_RENT27', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RENT08', 0) + saisie_variables.get('V_RENT32', 0)) and (saisie_variables.get('V_RENT08', 0) + saisie_variables.get('V_RENT32', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT02', 0) + saisie_variables.get('V_RENT26', 0)) and (saisie_variables.get('V_RENT02', 0) + saisie_variables.get('V_RENT26', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RENT10', 0) + saisie_variables.get('V_RENT34', 0)) and (saisie_variables.get('V_RENT10', 0) + saisie_variables.get('V_RENT34', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT04', 0) + saisie_variables.get('V_RENT28', 0)) and (saisie_variables.get('V_RENT04', 0) + saisie_variables.get('V_RENT28', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RENT11', 0) + saisie_variables.get('V_RENT35', 0)) and (saisie_variables.get('V_RENT11', 0) + saisie_variables.get('V_RENT35', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT05', 0) + saisie_variables.get('V_RENT29', 0)) and (saisie_variables.get('V_RENT05', 0) + saisie_variables.get('V_RENT29', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RENT12', 0) + saisie_variables.get('V_RENT36', 0)) and (saisie_variables.get('V_RENT12', 0) + saisie_variables.get('V_RENT36', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT06', 0) + saisie_variables.get('V_RENT30', 0)) and (saisie_variables.get('V_RENT06', 0) + saisie_variables.get('V_RENT30', 0)) * (625 and 625 / 1000)))))) and (((1 - saisie_variables.get('V_INDTEO', 0)) and (1 - saisie_variables.get('V_INDTEO', 0)) * somme([RENT01(), RENT02(), RENT03(), RENT04(), RENT05(), RENT06(), RENT07(), RENT08(), RENT09(), RENT10(), RENT11(), RENT12(), RENT13(), RENT14(), RENT15(), RENT16(), RENT17(), RENT18(), RENT19(), RENT20(), RENT21(), RENT22(), RENT23(), RENT24(), RENT25(), RENT26(), RENT27(), RENT28(), RENT29(), RENT30(), RENT31(), RENT32(), RENT33(), RENT34(), RENT35(), RENT36()])) + (saisie_variables.get('V_INDTEO', 0) and saisie_variables.get('V_INDTEO', 0) * (arr(((saisie_variables.get('V_RENT07', 0) + saisie_variables.get('V_RENT31', 0)) and (saisie_variables.get('V_RENT07', 0) + saisie_variables.get('V_RENT31', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT01', 0) + saisie_variables.get('V_RENT25', 0)) and (saisie_variables.get('V_RENT01', 0) + saisie_variables.get('V_RENT25', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RENT09', 0) + saisie_variables.get('V_RENT33', 0)) and (saisie_variables.get('V_RENT09', 0) + saisie_variables.get('V_RENT33', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT03', 0) + saisie_variables.get('V_RENT27', 0)) and (saisie_variables.get('V_RENT03', 0) + saisie_variables.get('V_RENT27', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RENT08', 0) + saisie_variables.get('V_RENT32', 0)) and (saisie_variables.get('V_RENT08', 0) + saisie_variables.get('V_RENT32', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT02', 0) + saisie_variables.get('V_RENT26', 0)) and (saisie_variables.get('V_RENT02', 0) + saisie_variables.get('V_RENT26', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RENT10', 0) + saisie_variables.get('V_RENT34', 0)) and (saisie_variables.get('V_RENT10', 0) + saisie_variables.get('V_RENT34', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT04', 0) + saisie_variables.get('V_RENT28', 0)) and (saisie_variables.get('V_RENT04', 0) + saisie_variables.get('V_RENT28', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RENT11', 0) + saisie_variables.get('V_RENT35', 0)) and (saisie_variables.get('V_RENT11', 0) + saisie_variables.get('V_RENT35', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT05', 0) + saisie_variables.get('V_RENT29', 0)) and (saisie_variables.get('V_RENT05', 0) + saisie_variables.get('V_RENT29', 0)) * (625 and 625 / 1000))) + arr(((saisie_variables.get('V_RENT12', 0) + saisie_variables.get('V_RENT36', 0)) and (saisie_variables.get('V_RENT12', 0) + saisie_variables.get('V_RENT36', 0)) * (5263 and 5263 / 10000))) + arr(((saisie_variables.get('V_RENT06', 0) + saisie_variables.get('V_RENT30', 0)) and (saisie_variables.get('V_RENT06', 0) + saisie_variables.get('V_RENT30', 0)) * (625 and 625 / 1000)))))) * (1 - V_CNR()))

    @cache_result
    def RLOCENT():
        """
        Investissements outre mer entreprise - retenu
        """
        return ((RLOCENT_1() and RLOCENT_1() * (1 - base_variables['ART1731BIS'])) + (min(RLOCENT_1(), (max((base_variables['RLOCENT_P'] + base_variables['RLOCENTP2']), (base_variables['RLOCENT1731'] + 0)) and max((base_variables['RLOCENT_P'] + base_variables['RLOCENTP2']), (base_variables['RLOCENT1731'] + 0)) * (1 - base_variables['PREM8_11']))) and min(RLOCENT_1(), (max((base_variables['RLOCENT_P'] + base_variables['RLOCENTP2']), (base_variables['RLOCENT1731'] + 0)) and max((base_variables['RLOCENT_P'] + base_variables['RLOCENTP2']), (base_variables['RLOCENT1731'] + 0)) * (1 - base_variables['PREM8_11']))) * base_variables['ART1731BIS']))

    @cache_result
    def RED():
        """
        Total des reductions d'impot
        """
        return (RCOTFOR() + RSURV() + RCOMP() + RHEBE() + RREPA() + RDIFAGRI() + RDONS() + RDUFLOTOT() + RPINELTOT() + RCELTOT() + (RRESTIMO() and RRESTIMO() * (1 - saisie_variables.get('V_INDTEO', 0))) + (saisie_variables.get('V_RRESTIMOXY', 0) and saisie_variables.get('V_RRESTIMOXY', 0) * saisie_variables.get('V_INDTEO', 0)) + RFIPC() + RFIPDOM() + RAIDE() + RNOUV() + RPLAFREPME4() + RTOURREP() + RTOUREPA() + RTOUHOTR() + RLOGDOM() + RLOGSOC() + RDOMSOC1() + RLOCENT() + RCOLENT() + RRETU() + RINNO() + RRPRESCOMP() + RFOR() + RSOUFIP() + RRIRENOV() + RSOCREPR() + RRESIMEUB() + RRESINEUV() + RRESIVIEU() + RCODOU() + RLOCIDEFG() + RCODJT() + RCODJU() + RREDMEUB() + RREDREP() + RILMIX() + RILMIY() + RINVRED() + RILMIH() + RILMJC() + RILMIZ() + RILMJI() + RILMJS() + RMEUBLE() + RPROREP() + RREPNPRO() + RREPMEU() + RILMIC() + RILMIB() + RILMIA() + RILMJY() + RILMJX() + RILMJW() + RILMJV() + RILMOA() + RILMOB() + RILMOC() + RILMOD() + RILMOE() + RILMPA() + RILMPB() + RILMPC() + RILMPD() + RILMPE() + RIDOMPROE3() + RPATNAT1() + RPATNAT2() + RPATNAT3() + RPATNAT() + RFORET() + RCREAT() + RCINE())

    @cache_result
    def RB06():
        """
        Revenu imposable pour 8VV art. 168
        """
        return (saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))

    @cache_result
    def QF016():
        """
        Quotient familial 8VV art.168
        From QF0y6
        """
        return (arr(RB06()) and arr(RB06()) / NB1())

    @cache_result
    def DS016():
        """
        Droits simples issus du bareme 8VV art. 168
        From DS0y6
        """
        return ((max((QF016() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF016() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX1() and TAUX1() / 100)) + (max((QF016() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF016() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX2() and TAUX2() / 100)) + (max((QF016() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF016() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX3() and TAUX3() / 100)) + (max((QF016() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF016() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX4() and TAUX4() / 100)) + (max((QF016() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF016() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX5() and TAUX5() / 100)))

    @cache_result
    def IS016():
        """
        Droits simples avant plafonnement du quotient familial 8VV art. 168
        From IS0y6
        """
        return arr((DS016() and DS016() * NB1()))

    @cache_result
    def QF026():
        """
        Quotient familial 8VV art.168
        From QF0y6
        """
        return (arr(RB06()) and arr(RB06()) / NB2())

    @cache_result
    def DS026():
        """
        Droits simples issus du bareme 8VV art. 168
        From DS0y6
        """
        return ((max((QF026() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF026() - ((LIM_BAR1 and LIM_BAR1 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR1A and LIM_BAR1A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX1() and TAUX1() / 100)) + (max((QF026() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF026() - ((LIM_BAR2 and LIM_BAR2 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR2A and LIM_BAR2A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX2() and TAUX2() / 100)) + (max((QF026() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF026() - ((LIM_BAR3 and LIM_BAR3 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR3A and LIM_BAR3A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX3() and TAUX3() / 100)) + (max((QF026() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF026() - ((LIM_BAR4 and LIM_BAR4 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR4A and LIM_BAR4A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX4() and TAUX4() / 100)) + (max((QF026() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) and max((QF026() - ((LIM_BAR5 and LIM_BAR5 * (1 - saisie_variables.get('V_ANC_BAR', 0))) + (LIM_BAR5A and LIM_BAR5A * saisie_variables.get('V_ANC_BAR', 0)))), 0) * (TAUX5() and TAUX5() / 100)))

    @cache_result
    def IS026():
        """
        Droits simples avant plafonnement du quotient familial 8VV art. 168
        From IS0y6
        """
        return arr((DS026() and DS026() * NB2()))

    @cache_result
    def IN06():
        """
        Droits simples apres plafonnement QF 8VV art. 168
        """
        return max(IS016(), (IS026() - PLA()))

    @cache_result
    def ID16():
        """
        Droits simples avant abattement DOM 8VV art. 168
        """
        return IN06()

    @cache_result
    def ABADON6():
        """
        Abattement DOM
        """
        return (arr(min((ID16() and (TX_RABDOM and TX_RABDOM / 100) and ID16() * (TX_RABDOM and TX_RABDOM / 100) * ((saisie_variables.get('PRODOM', 0) and max(0, (1 - V_EAD() - V_EAG())) and saisie_variables.get('PRODOM', 0) * max(0, (1 - V_EAD() - V_EAG())) / RG()) + V_EAD())), PLAF_RABDOM)) + arr(min((ID16() and (TX_RABGUY and TX_RABGUY / 100) and ID16() * (TX_RABGUY and TX_RABGUY / 100) * ((saisie_variables.get('PROGUY', 0) and max(0, (1 - V_EAD() - V_EAG())) and saisie_variables.get('PROGUY', 0) * max(0, (1 - V_EAD() - V_EAG())) / RG()) + V_EAG())), PLAF_RABGUY)))

    @cache_result
    def IPRODOM6():
        """
        Impot proportionnel dom
        """
        return arr((ID16() and saisie_variables.get('PRODOM', 0) and ID16() * saisie_variables.get('PRODOM', 0) / RG()))

    @cache_result
    def ABADO6():
        """
        Abattement en impot sur les revenus DOM
        """
        return arr(min(((IPRODOM6() + ID16()) and TX_RABDOM and (IPRODOM6() + ID16()) * TX_RABDOM / 100), PLAF_RABDOM))

    @cache_result
    def IPROGUY6():
        """
        Impot proportionnel guy
        """
        return arr((ID16() and saisie_variables.get('PROGUY', 0) and ID16() * saisie_variables.get('PROGUY', 0) / RG()))

    @cache_result
    def ABAGU6():
        """
        Abattement en impot sur les revenus GUY
        """
        return arr(min(((IPROGUY6() + ID16()) and TX_RABGUY and (IPROGUY6() + ID16()) * TX_RABGUY / 100), PLAF_RABGUY))

    @cache_result
    def ABATOT6():
        """
        Abattement DOM
        """
        return (ABADO6() + ABAGU6())

    @cache_result
    def ADO6():
        """
        Abattement DOM 8VV art. 168
        """
        return ((ABADON6() and ABADON6() * (1 - positif((present(saisie_variables.get('CODDAJ', 0)) + present(saisie_variables.get('CODEAJ', 0)) + present(saisie_variables.get('CODDBJ', 0)) + present(saisie_variables.get('CODEBJ', 0)))))) + (ABATOT6() and ABATOT6() * positif((present(saisie_variables.get('CODDAJ', 0)) + present(saisie_variables.get('CODEAJ', 0)) + present(saisie_variables.get('CODDBJ', 0)) + present(saisie_variables.get('CODEBJ', 0))))))

    @cache_result
    def IMETRO6():
        """
        Impot sur Revenu metro
        """
        return arr((ID16() and REVMETRO() and ID16() * REVMETRO() / RG()))

    @cache_result
    def INETABADAJ6():
        """
        Impot proportionnel dom
        """
        return max(0, (IPRODOM6() - ABADO6()))

    @cache_result
    def INETABAEAJ6():
        """
        Impot proportionnel dom
        """
        return max(0, (IPROGUY6() - ABAGU6()))

    @cache_result
    def ITOTDOM6():
        """
        Impot proportionnel dom
        """
        return (IMETRO6() + INETABADAJ6() + INETABAEAJ6())

    @cache_result
    def IDOM16():
        """
        Droits simples definitifs 8VV art. 168
        """
        return ((max((((ID16() - ADO6()) and (ID16() - ADO6()) * (1 - positif(INDCODDAJ()))) + (ITOTDOM6() and ITOTDOM6() * positif(INDCODDAJ()))), IMI()) and max((((ID16() - ADO6()) and (ID16() - ADO6()) * (1 - positif(INDCODDAJ()))) + (ITOTDOM6() and ITOTDOM6() * positif(INDCODDAJ()))), IMI()) * (1 - INDTXMOY())) + (IMO() and IMO() * INDTXMOY()))

    @cache_result
    def IAD11():
        """
        impot apres decote et apres reduction  d impot
        """
        return ((((max(0, (IDOM11() - DEC11() - RED())) and max(0, (IDOM11() - DEC11() - RED())) * (1 - positif((V_CR2() + saisie_variables.get('IPVLOC', 0))))) + (positif((V_CR2() + saisie_variables.get('IPVLOC', 0))) and positif((V_CR2() + saisie_variables.get('IPVLOC', 0))) * max(0, (IDOM11() - RED())))) and ((max(0, (IDOM11() - DEC11() - RED())) and max(0, (IDOM11() - DEC11() - RED())) * (1 - positif((V_CR2() + saisie_variables.get('IPVLOC', 0))))) + (positif((V_CR2() + saisie_variables.get('IPVLOC', 0))) and positif((V_CR2() + saisie_variables.get('IPVLOC', 0))) * max(0, (IDOM11() - RED())))) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))))) + (positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) and positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) * IDOM16()))

    @cache_result
    def DOMITPD():
        """
        DOM : impot PV  taux minore dom
        """
        return (arr((BN1() + SPEPV() + BI12F() + BA1())) and (TX11 and TX11 / 100) and arr((BN1() + SPEPV() + BI12F() + BA1())) * (TX11 and TX11 / 100) * positif(V_EAD()))

    @cache_result
    def DOMITPG():
        """
        DOM : impot PV  taux minore GUY
        """
        return (arr((BN1() + SPEPV() + BI12F() + BA1())) and (TX09 and TX09 / 100) and arr((BN1() + SPEPV() + BI12F() + BA1())) * (TX09 and TX09 / 100) * positif(V_EAG()))

    @cache_result
    def BPTP3():
        """
        Revenus au taux proportionnel 16%
        """
        return (BTP3A() and (1 - positif((V_EAD() + V_EAG()))) and BTP3A() * (1 - positif((V_EAD() + V_EAG()))) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def DOMAVTD():
        """
        DOM : avantage impot PV  taux minore DOM
        """
        return (arr(((BN1() + SPEPV() + BI12F() + BA1()) and TX05 and (BN1() + SPEPV() + BI12F() + BA1()) * TX05 / 100)) and arr(((BN1() + SPEPV() + BI12F() + BA1()) and TX05 and (BN1() + SPEPV() + BI12F() + BA1()) * TX05 / 100)) * positif(V_EAD()))

    @cache_result
    def DOMAVTG():
        """
        DOM : avantage impot PV  taux minore GUY
        """
        return (arr(((BN1() + SPEPV() + BI12F() + BA1()) and TX07 and (BN1() + SPEPV() + BI12F() + BA1()) * TX07 / 100)) and arr(((BN1() + SPEPV() + BI12F() + BA1()) and TX07 and (BN1() + SPEPV() + BI12F() + BA1()) * TX07 / 100)) * positif(V_EAG()))

    @cache_result
    def DOMAVTO():
        """
        DOM : avantage taux minore
        """
        return (DOMAVTD() + DOMAVTG())

    @cache_result
    def ABADO():
        """
        Abattement en impot sur les revenus DOM
        """
        return ((arr(min((ID11() and (TX_RABDOM and TX_RABDOM / 100) and ID11() * (TX_RABDOM and TX_RABDOM / 100) * ((saisie_variables.get('PRODOM', 0) and max(0, (1 - V_EAD() - V_EAG())) and saisie_variables.get('PRODOM', 0) * max(0, (1 - V_EAD() - V_EAG())) / RG()) + V_EAD())), PLAF_RABDOM)) and arr(min((ID11() and (TX_RABDOM and TX_RABDOM / 100) and ID11() * (TX_RABDOM and TX_RABDOM / 100) * ((saisie_variables.get('PRODOM', 0) and max(0, (1 - V_EAD() - V_EAG())) and saisie_variables.get('PRODOM', 0) * max(0, (1 - V_EAD() - V_EAG())) / RG()) + V_EAD())), PLAF_RABDOM)) * (1 - positif((present(saisie_variables.get('CODDAJ', 0)) + present(saisie_variables.get('CODEAJ', 0)) + present(saisie_variables.get('CODDBJ', 0)) + present(saisie_variables.get('CODEBJ', 0)))))) + (ABADO1() and ABADO1() * positif((present(saisie_variables.get('CODDAJ', 0)) + present(saisie_variables.get('CODEAJ', 0)) + present(saisie_variables.get('CODDBJ', 0)) + present(saisie_variables.get('CODEBJ', 0))))))

    @cache_result
    def ABAGU():
        """
        Abattement en impot sur les revenus GUYANE
        """
        return ((arr(min((ID11() and (TX_RABGUY and TX_RABGUY / 100) and ID11() * (TX_RABGUY and TX_RABGUY / 100) * ((saisie_variables.get('PROGUY', 0) and max(0, (1 - V_EAD() - V_EAG())) and saisie_variables.get('PROGUY', 0) * max(0, (1 - V_EAD() - V_EAG())) / RG()) + V_EAG())), PLAF_RABGUY)) and arr(min((ID11() and (TX_RABGUY and TX_RABGUY / 100) and ID11() * (TX_RABGUY and TX_RABGUY / 100) * ((saisie_variables.get('PROGUY', 0) and max(0, (1 - V_EAD() - V_EAG())) and saisie_variables.get('PROGUY', 0) * max(0, (1 - V_EAD() - V_EAG())) / RG()) + V_EAG())), PLAF_RABGUY)) * (1 - positif((present(saisie_variables.get('CODDAJ', 0)) + present(saisie_variables.get('CODEAJ', 0)) + present(saisie_variables.get('CODDBJ', 0)) + present(saisie_variables.get('CODEBJ', 0)))))) + (ABAGU1() and ABAGU1() * positif((present(saisie_variables.get('CODDAJ', 0)) + present(saisie_variables.get('CODEAJ', 0)) + present(saisie_variables.get('CODDBJ', 0)) + present(saisie_variables.get('CODEBJ', 0))))))

    @cache_result
    def DOMABDB():
        """
        DOM : abattement non utilise calcule sur les droits au bareme
        """
        return ((max((PLAF_RABDOM - ABADO()), 0) and max((PLAF_RABDOM - ABADO()), 0) * positif(V_EAD())) + (max((PLAF_RABGUY - ABAGU()), 0) and max((PLAF_RABGUY - ABAGU()), 0) * positif(V_EAG())))

    @cache_result
    def DOMDOM():
        """
        DOM : calcul avantage maximum sur l impot proportionnel
        """
        return (max((DOMAVTO() - DOMABDB()), 0) and max((DOMAVTO() - DOMABDB()), 0) * positif((V_EAD() + V_EAG())))

    @cache_result
    def ITP():
        """
        Impot @ taux proportionnel
        """
        return (arr(((BPTP2() and TX225 and BPTP2() * TX225 / 100) + (BPTPVT() and TX19 and BPTPVT() * TX19 / 100) + (BPTP4() and TX30 and BPTP4() * TX30 / 100) + DOMITPD() + DOMITPG() + (BPTP3() and TX16 and BPTP3() * TX16 / 100) + (BPTP40() and TX41 and BPTP40() * TX41 / 100) + (DOMDOM() and DOMDOM() * positif((V_EAD() + V_EAG()))) + (BPTP18() and TX18 and BPTP18() * TX18 / 100) + (BPTPSJ() and TX19 and BPTPSJ() * TX19 / 100) + (BPTP24() and TX24 and BPTP24() * TX24 / 100))) and (1 - positif(saisie_variables.get('IPVLOC', 0))) and arr(((BPTP2() and TX225 and BPTP2() * TX225 / 100) + (BPTPVT() and TX19 and BPTPVT() * TX19 / 100) + (BPTP4() and TX30 and BPTP4() * TX30 / 100) + DOMITPD() + DOMITPG() + (BPTP3() and TX16 and BPTP3() * TX16 / 100) + (BPTP40() and TX41 and BPTP40() * TX41 / 100) + (DOMDOM() and DOMDOM() * positif((V_EAD() + V_EAG()))) + (BPTP18() and TX18 and BPTP18() * TX18 / 100) + (BPTPSJ() and TX19 and BPTPSJ() * TX19 / 100) + (BPTP24() and TX24 and BPTP24() * TX24 / 100))) * (1 - positif(saisie_variables.get('IPVLOC', 0))) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def REI():
        """
        Reprise d'impot
        """
        return (saisie_variables.get('IPREP', 0) + saisie_variables.get('IPPRICORSE', 0))

    @cache_result
    def IBM23():
        """
        impot immediat avant avantage complementaire enfant etudiant
        """
        return (IAD11() + ITP() + REI() + saisie_variables.get('AUTOVERSSUP', 0) + base_variables['AVFISCOPTER'])

    @cache_result
    def IAMD2():
        """
        Impot apres retrait de l'avantage en impot sur dons
        """
        return IBM23()

    @cache_result
    def IRB():
        """
        Impot brut
        """
        return IAMD2()

    @cache_result
    def BASSURV3():
        """
        base calculee taxe agents assurance vous 3eme limite
        """
        return max(0, (saisie_variables.get('CESSASSV', 0) - LIM_ASSUR3))

    @cache_result
    def BASSURV2():
        """
        base calculee taxe agents assurance vous
        """
        return max(0, (saisie_variables.get('CESSASSV', 0) - BASSURV3() - LIM_ASSUR2))

    @cache_result
    def BASSURV1():
        """
        base calculee taxe agents assurance vous
        """
        return max(0, (saisie_variables.get('CESSASSV', 0) - BASSURV3() - BASSURV2() - LIM_ASSUR1))

    @cache_result
    def TAXASSURV():
        """
        Montant taxe assurance  vous
        """
        return (arr(((BASSURV1() and TX_ASSUR1 and BASSURV1() * TX_ASSUR1 / 100) + (BASSURV2() and TX_ASSUR2 and BASSURV2() * TX_ASSUR2 / 100) + (BASSURV3() and TX_ASSUR3 and BASSURV3() * TX_ASSUR3 / 100))) and arr(((BASSURV1() and TX_ASSUR1 and BASSURV1() * TX_ASSUR1 / 100) + (BASSURV2() and TX_ASSUR2 and BASSURV2() * TX_ASSUR2 / 100) + (BASSURV3() and TX_ASSUR3 and BASSURV3() * TX_ASSUR3 / 100))) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def BASSURC3():
        """
        base calculee taxe agents assurance conjoint 3eme limite
        """
        return max(0, (saisie_variables.get('CESSASSC', 0) - LIM_ASSUR3))

    @cache_result
    def BASSURC2():
        """
        base calculee taxe agents assurance conjoint
        """
        return max(0, ((saisie_variables.get('CESSASSC', 0) - BASSURC3()) - LIM_ASSUR2))

    @cache_result
    def BASSURC1():
        """
        base calculee taxe agents assurance conjoint
        """
        return max(0, ((saisie_variables.get('CESSASSC', 0) - BASSURC3() - BASSURC2()) - LIM_ASSUR1))

    @cache_result
    def TAXASSURC():
        """
        Montant taxe assurance  conjoint
        """
        return (arr(((BASSURC1() and TX_ASSUR1 and BASSURC1() * TX_ASSUR1 / 100) + (BASSURC2() and TX_ASSUR2 and BASSURC2() * TX_ASSUR2 / 100) + (BASSURC3() and TX_ASSUR3 and BASSURC3() * TX_ASSUR3 / 100))) and arr(((BASSURC1() and TX_ASSUR1 and BASSURC1() * TX_ASSUR1 / 100) + (BASSURC2() and TX_ASSUR2 and BASSURC2() * TX_ASSUR2 / 100) + (BASSURC3() and TX_ASSUR3 and BASSURC3() * TX_ASSUR3 / 100))) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def TAXASSUR():
        """
        Montant taxe assurance 
        """
        return (TAXASSURV() + TAXASSURC())

    @cache_result
    def BPCAPTAXV():
        """
        Base pension capital taxable vous
        From BPCAPTAXi
        """
        return (saisie_variables.get('PCAPTAXV', 0) - arr((saisie_variables.get('PCAPTAXV', 0) and TX_DEDPER and saisie_variables.get('PCAPTAXV', 0) * TX_DEDPER / 100)))

    @cache_result
    def IPCAPTAXV():
        """
        Impot liberatoire pension capital taxable vous
        From IPCAPTAXi
        """
        return arr((BPCAPTAXV() and T_PCAPTAX and BPCAPTAXV() * T_PCAPTAX / 100))

    @cache_result
    def BPCAPTAXC():
        """
        Base pension capital taxable conjoint
        From BPCAPTAXi
        """
        return (saisie_variables.get('PCAPTAXC', 0) - arr((saisie_variables.get('PCAPTAXC', 0) and TX_DEDPER and saisie_variables.get('PCAPTAXC', 0) * TX_DEDPER / 100)))

    @cache_result
    def IPCAPTAXC():
        """
        Impot liberatoire pension capital taxable conjoint
        From IPCAPTAXi
        """
        return arr((BPCAPTAXC() and T_PCAPTAX and BPCAPTAXC() * T_PCAPTAX / 100))

    @cache_result
    def IPCAPTAXTOT():
        """
        Impot liberatoire pension capital taxable total avant credit impot 8XT
        """
        return somme([IPCAPTAXV(), IPCAPTAXC()])

    @cache_result
    def TAXLOY():
        """
        taxe loy elevee
        """
        return saisie_variables.get('LOYELEV', 0)

    @cache_result
    def CIRCMAVFT():
        """
        Credit d'impot ligne 2AB
        """
        return max(0, min((IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER']), (saisie_variables.get('RCMAVFT', 0) and saisie_variables.get('RCMAVFT', 0) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))))))

    @cache_result
    def IRETS():
        """
        Retenue a la source
        """
        return max(0, min(((min(saisie_variables.get('COD8PA', 0), (IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER'] - CIRCMAVFT())) and min(saisie_variables.get('COD8PA', 0), (IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER'] - CIRCMAVFT())) * present(saisie_variables.get('COD8PA', 0))) + ((IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER'] - CIRCMAVFT()) and (IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER'] - CIRCMAVFT()) * (1 - present(saisie_variables.get('COD8PA', 0))))), (saisie_variables.get('IPSOUR', 0) and saisie_variables.get('IPSOUR', 0) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))))

    @cache_result
    def ABVIE():
        """
        Abattement personnes agees invalides
        """
        return min(ABTPA(), max((RNG() + TOTALQUO() - SDD() - SDC()), 0))

    @cache_result
    def ABMAR():
        """
        Abattement enfants maries a charge
        """
        return min(ABTMA(), max((RNG() + TOTALQUO() - SDD() - SDC() - ABTPA()), 0))

    @cache_result
    def RB018XR():
        """
        Revenu imposable RNG pour le calcul du credit 8XR
        """
        return ((RNG() and RNG() * (1 - positif((((VARIPTEFP() and VARIPTEFP() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFP', 0) and saisie_variables.get('IPTEFP', 0) * (1 - base_variables['ART1731BIS']))) + ((VARIPTEFN() and VARIPTEFN() * positif(base_variables['ART1731BIS'])) + (saisie_variables.get('IPTEFN', 0) and saisie_variables.get('IPTEFN', 0) * (1 - base_variables['ART1731BIS']))) + INDTEFF())))) + (((ABVIE() + ABMAR()) and (ABVIE() + ABMAR()) * positif(ZONIPTEFP())) + ZONIPTEFP() + (((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) and ((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((((saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) and (saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) and (((saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) and (saisie_variables.get('PVIMPOS', 0) + saisie_variables.get('PVSURSI', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) * null((2 - saisie_variables.get('FLAG_EXIT', 0)))) + (saisie_variables.get('RFROBOR', 0) and saisie_variables.get('V_INDTEO', 0) and saisie_variables.get('RFROBOR', 0) * saisie_variables.get('V_INDTEO', 0) * positif(ZONIPTEFP()))) + ((ABMAR() + ABTPATEF() + TEFFREVTOT()) and (1 - positif((ZONIPTEFP() + (((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) and ((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((((saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) and (saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) and (((saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) and (saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) * null((2 - saisie_variables.get('FLAG_EXIT', 0))))))) and (ABMAR() + ABTPATEF() + TEFFREVTOT()) * (1 - positif((ZONIPTEFP() + (((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) and ((saisie_variables.get('PVIMPOS', 0) and saisie_variables.get('PVIMPOS', 0) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) and (ZONIPTEFN() + saisie_variables.get('PVIMPOS', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))) + ((saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVIMPOS', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVIMPOS', 0)))))) * null((1 - saisie_variables.get('FLAG_EXIT', 0)))) + ((((saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) and (saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) and (((saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) and (saisie_variables.get('PVSURSI', 0) + saisie_variables.get('PVIMPOS', 0)) * positif(ZONIPTEFP())) + ((ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) and (ZONIPTEFN() + saisie_variables.get('PVSURSI', 0)) * positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))) + ((saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) and positif(ZONIPTEFN()) and (saisie_variables.get('PVSURSI', 0) - ZONIPTEFN()) * positif(ZONIPTEFN()) * (1 - positif((ZONIPTEFN() - saisie_variables.get('PVSURSI', 0)))))) * null((2 - saisie_variables.get('FLAG_EXIT', 0))))))) * INDTEFF()))

    @cache_result
    def CRCFA():
        """
        Credit d'impot revenus etrangers
        """
        return (arr((IPQ1() and saisie_variables.get('REGCI', 0) and IPQ1() * saisie_variables.get('REGCI', 0) / (RB018XR() + TONEQUO()))) and arr((IPQ1() and saisie_variables.get('REGCI', 0) and IPQ1() * saisie_variables.get('REGCI', 0) / (RB018XR() + TONEQUO()))) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def BPTPD():
        """
        Revenus au taux proportionnels 11%
        """
        return (BTP3A() and positif(V_EAD()) and BTP3A() * positif(V_EAD()) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def BPTPG():
        """
        Revenus au taux proportionnel 9%
        """
        return (BTP3A() and positif(V_EAG()) and BTP3A() * positif(V_EAG()) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def BPTP19():
        """
        Revenus au taux proportionnel 19%
        """
        return ((saisie_variables.get('BPVSJ', 0) + saisie_variables.get('GAINPEA', 0)) and (1 - positif(saisie_variables.get('IPVLOC', 0))) and (saisie_variables.get('BPVSJ', 0) + saisie_variables.get('GAINPEA', 0)) * (1 - positif(saisie_variables.get('IPVLOC', 0))) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def CREREVET():
        """
        Credit d'impot proportionnel ( sur les REVenus ETrangers)
        """
        return (min(arr(((BPTP3() + BPTPD() + BPTPG()) and TX16 and (BPTP3() + BPTPD() + BPTPG()) * TX16 / 100)), arr((saisie_variables.get('CIIMPPRO', 0) and TX_CREREVET and saisie_variables.get('CIIMPPRO', 0) * TX_CREREVET / 100))) + min(arr((BPTP19() and TX19 and BPTP19() * TX19 / 100)), arr((saisie_variables.get('CIIMPPRO2', 0) and TX19 and saisie_variables.get('CIIMPPRO2', 0) * TX19 / 100))))

    @cache_result
    def ICREREVET():
        """
        imputation limitee a l impot propor. pour le credit revenus etrangers
        """
        return max(0, min((IAD11() + ITP() - CIRCMAVFT() - IRETS() - min(IAD11(), CRCFA())), min(ITP(), CREREVET())))

    @cache_result
    def CRDIE():
        """
        Credit d'impot convention franco-allemande
        """
        return max(0, min((IRB() - REI() - base_variables['AVFISCOPTER'] - CIRCMAVFT() - IRETS()), (min((IAD11() - CIRCMAVFT() - IRETS()), CRCFA()) and min((IAD11() - CIRCMAVFT() - IRETS()), CRCFA()) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))))

    @cache_result
    def BPTP4I():
        """
        Revenus au taux proportionnel 30% (3VI, 3SI)
        """
        return ((saisie_variables.get('BPCOPTV', 0) + saisie_variables.get('BPCOPTC', 0)) and (1 - positif(saisie_variables.get('IPVLOC', 0))) and (saisie_variables.get('BPCOPTV', 0) + saisie_variables.get('BPCOPTC', 0)) * (1 - positif(saisie_variables.get('IPVLOC', 0))) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def ICIGLO():
        """
        Credit d'impot sur gain de levee d option brut
        """
        return (min(arr((BPTP18() and TX18 and BPTP18() * TX18 / 100)), arr((saisie_variables.get('COD8XF', 0) and TX18 and saisie_variables.get('COD8XF', 0) * TX18 / 100))) + (min(arr((RCM2FA() and TX24 and RCM2FA() * TX24 / 100)), arr((saisie_variables.get('COD8XV', 0) and TX24 and saisie_variables.get('COD8XV', 0) * TX24 / 100))) and min(arr((RCM2FA() and TX24 and RCM2FA() * TX24 / 100)), arr((saisie_variables.get('COD8XV', 0) and TX24 and saisie_variables.get('COD8XV', 0) * TX24 / 100))) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0))))))) + min(arr((BPTP4I() and TX30 and BPTP4I() * TX30 / 100)), arr((saisie_variables.get('COD8XG', 0) and TX30 and saisie_variables.get('COD8XG', 0) * TX30 / 100))) + min(arr((BPTP40() and TX41 and BPTP40() * TX41 / 100)), arr((saisie_variables.get('COD8XH', 0) and TX41 and saisie_variables.get('COD8XH', 0) * TX41 / 100))))

    @cache_result
    def CIGLO():
        """
        Credit d'impot sur gain de levee d option retenu
        """
        return max(0, min((IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER'] - CIRCMAVFT() - IRETS() - CRDIE() - ICREREVET()), ICIGLO()))

    @cache_result
    def BCIAQCUL():
        """
        base reduction acquisition biens culturels
        """
        return arr((saisie_variables.get('CIAQCUL', 0) and TX_CIAQCUL and saisie_variables.get('CIAQCUL', 0) * TX_CIAQCUL / 100))

    @cache_result
    def CICULTUR():
        """
        Credit d'impot investissement biens cultures retenu
        """
        return max(0, min((IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER'] - CIRCMAVFT() - REI() - IRETS() - CRDIE() - ICREREVET() - CIGLO()), min((IAD11() + ITP() + TAXASSUR() + TAXLOY() + IPCAPTAXTOT() + base_variables['CHRAPRES']), BCIAQCUL())))

    @cache_result
    def BCIGA():
        """
        base limitee du Credit d'impot groupement de prevention agree
        """
        return saisie_variables.get('CRIGA', 0)

    @cache_result
    def CIGPA():
        """
        Credit d'impot groupement de prevention agree
        """
        return max(0, min((IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER'] - CIRCMAVFT() - IRETS() - CRDIE() - ICREREVET() - CIGLO() - CICULTUR()), BCIGA()))

    @cache_result
    def BCIDONENTR():
        """
        base limitee du Credit d'impot dons oeuvres entreprises
        """
        return (saisie_variables.get('RDMECENAT', 0) and saisie_variables.get('RDMECENAT', 0) * (1 - V_CNR()))

    @cache_result
    def CIDONENTR():
        """
        Credit d'impot dons oeuvre entreprise
        """
        return max(0, min((IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER'] - CIRCMAVFT() - REI() - IRETS() - CRDIE() - ICREREVET() - CIGLO() - CICULTUR() - CIGPA()), BCIDONENTR()))

    @cache_result
    def CICORSE():
        """
        Credit d'impot investissement Corse
        """
        return max(0, min((IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER'] - CIRCMAVFT() - saisie_variables.get('IPPRICORSE', 0) - IRETS() - CRDIE() - ICREREVET() - CIGLO() - CICULTUR() - CIGPA() - CIDONENTR()), (saisie_variables.get('CIINVCORSE', 0) + saisie_variables.get('IPREPCORSE', 0))))

    @cache_result
    def CIRECH():
        """
        Credit d'impot recherche
        """
        return max(0, min((IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER'] - CIRCMAVFT() - IRETS() - CRDIE() - ICREREVET() - CIGLO() - CICULTUR() - CIGPA() - CIDONENTR() - CICORSE()), saisie_variables.get('IPCHER', 0)))

    @cache_result
    def CICOMPEMPL():
        """
        Credit d'impot competitivite emploi
        """
        return max(0, min((IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() - base_variables['AVFISCOPTER'] - CIRCMAVFT() - IRETS() - CRDIE() - ICREREVET() - CIGLO() - CICULTUR() - CIGPA() - CIDONENTR() - CICORSE() - CIRECH()), saisie_variables.get('COD8UW', 0)))

    @cache_result
    def INE():
        """
        Imputations non restituables
        """
        return ((CIRCMAVFT() + IRETS() + min(max(0, (IAD11() - CIRCMAVFT() - IRETS())), CRCFA()) + ICREREVET() + CIGLO() + CICULTUR() + CIGPA() + CIDONENTR() + CICORSE() + CIRECH() + CICOMPEMPL()) and (CIRCMAVFT() + IRETS() + min(max(0, (IAD11() - CIRCMAVFT() - IRETS())), CRCFA()) + ICREREVET() + CIGLO() + CICULTUR() + CIGPA() + CIDONENTR() + CICORSE() + CIRECH() + CICOMPEMPL()) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def IAN():
        """
        Impot apres imputations non restituables
        """
        return max(0, (IRB() - base_variables['AVFISCOPTER'] + ((CIRCMAVFT() - IRETS() - min(max(0, (IAD11() - CIRCMAVFT() - IRETS())), CRCFA()) - ICREREVET() - CIGLO() - CICULTUR() - CIGPA() - CIDONENTR() - CICORSE() - CIRECH() - CICOMPEMPL()) and (CIRCMAVFT() - IRETS() - min(max(0, (IAD11() - CIRCMAVFT() - IRETS())), CRCFA()) - ICREREVET() - CIGLO() - CICULTUR() - CIGPA() - CIDONENTR() - CICORSE() - CIRECH() - CICOMPEMPL()) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))))) + min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min((IPCAPTAXTOT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'])))))) + min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - min((IPCAPTAXTOT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'])))))) - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))))))))

    @cache_result
    def CIDIREPARGNE():
        """
        Credit d'impot ligne 2BG
        """
        return (saisie_variables.get('DIREPARGNE', 0) and (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) and saisie_variables.get('DIREPARGNE', 0) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))))

    @cache_result
    def BPLIB():
        """
        Base regularisation Prelevement Liberatoire
        """
        return (min(saisie_variables.get('RCMLIB', 0), max(0, (ABTAV() - RAVC()))) and min(saisie_variables.get('RCMLIB', 0), max(0, (ABTAV() - RAVC()))) * (1 - V_CNR()))

    @cache_result
    def EPAV():
        """
        Credit Impot sur Excedent Prelevement sur contrats Ass-Vie
        """
        return arr((BPLIB() and TX_PREVLIB and BPLIB() * TX_PREVLIB / 100))

    @cache_result
    def CRICH():
        """
        Credit recherche 8NJ plafonne
        """
        return (saisie_variables.get('IPRECH', 0) and saisie_variables.get('IPRECH', 0) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def BTANTGECUM():
        """
        cumul des depenses gros equipements anterieur N-1
        """
        return ((saisie_variables.get('V_BTGECUM', 0) and saisie_variables.get('V_BTGECUM', 0) * (1 - present(saisie_variables.get('DEPMOBIL', 0)))) + saisie_variables.get('DEPMOBIL', 0))

    @cache_result
    def P2GE():
        """
        plafond des red d impot gros equipement 2eme periode
        """
        return max((((PLAF_GE2 and PLAF_GE2 * (1 + BOOL_0AM())) + (PLAF_GE2_PACQAR and PLAF_GE2_PACQAR * (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0))) + (PLAF_GE2_PAC and PLAF_GE2_PAC * (saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0)))) - BTANTGECUM()), 0)

    @cache_result
    def BGEPAHA():
        """
        base gros equipements pers. agee handicapee
        """
        return (min(saisie_variables.get('RDEQPAHA', 0), P2GE()) and min(saisie_variables.get('RDEQPAHA', 0), P2GE()) * (1 - V_CNR()))

    @cache_result
    def BTANTGECUMWL():
        """
        cumul des depenses gros equipements anterieur N-1 7WL
        """
        return ((saisie_variables.get('V_BTGECUMWL', 0) and saisie_variables.get('V_BTGECUMWL', 0) * (1 - present(saisie_variables.get('COD7WD', 0)))) + saisie_variables.get('COD7WD', 0))

    @cache_result
    def P2GEWL():
        """
        plafond des red d impot gros equipement specifique 7WL
        """
        return max(0, (P2GE() + (PLAF_GE2 and PLAF_GE2 * (1 + BOOL_0AM())) - BGEPAHA() - BTANTGECUMWL()))

    @cache_result
    def BGTECH():
        """
        Base travaux preventions risques technologiques
        """
        return (min(saisie_variables.get('RDTECH', 0), P2GEWL()) and min(saisie_variables.get('RDTECH', 0), P2GEWL()) * (1 - V_CNR()))

    @cache_result
    def RGTECH():
        """
        Reduction travaux preventions risques technologiques
        """
        return ((BGTECH() and TX40 and BGTECH() * TX40 / 100) and (BGTECH() and TX40 and BGTECH() * TX40 / 100) * (1 - V_CNR()))

    @cache_result
    def RGEPAHA():
        """
        reduction pour les gros equipements pers. agee handicapee
        """
        return ((BGEPAHA() and TX25 and BGEPAHA() * TX25 / 100) and (BGEPAHA() and TX25 and BGEPAHA() * TX25 / 100) * (1 - V_CNR()))

    @cache_result
    def CIGE():
        """
        Credit d'impot depenses de gros equipements
        """
        return (arr((RGTECH() + RGEPAHA())) and (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) and arr((RGTECH() + RGEPAHA())) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) * (1 - V_CNR()))

    @cache_result
    def PDEVDUR():
        """
        plafond credit depenses developpement durable
        """
        return max((((PLAF_DEVDUR and PLAF_DEVDUR * (1 + BOOL_0AM())) + (PLAF_GE2_PACQAR and PLAF_GE2_PACQAR * (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0))) + (PLAF_GE2_PAC and PLAF_GE2_PAC * (saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0)))) - ((saisie_variables.get('V_BTDEVDUR', 0) and saisie_variables.get('V_BTDEVDUR', 0) * (1 - present(saisie_variables.get('DEPCHOBAS', 0)))) + saisie_variables.get('DEPCHOBAS', 0))), 0)

    @cache_result
    def BQRESS():
        """
        Base 2012 pour DEV DUR
        """
        return ((positif((saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('CRENRJ', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('MATISOSJ', 0) + saisie_variables.get('VOLISO', 0) + saisie_variables.get('PORENT', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('TRAVITWT', 0))) and positif((saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('CRENRJ', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('MATISOSJ', 0) + saisie_variables.get('VOLISO', 0) + saisie_variables.get('PORENT', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('TRAVITWT', 0))) * 1) + 0)

    @cache_result
    def BQTRAV():
        """
        Base 2012 pour DEV DUR
        """
        return (positif((((present(saisie_variables.get('TRAVITWT', 0)) + present(saisie_variables.get('COD7WU', 0))) and (present(saisie_variables.get('TRAVITWT', 0)) + present(saisie_variables.get('COD7WU', 0))) * (present(saisie_variables.get('TRAMURWC', 0)) + present(saisie_variables.get('COD7WB', 0)))) + ((present(saisie_variables.get('TRAVITWT', 0)) + present(saisie_variables.get('COD7WU', 0))) and (present(saisie_variables.get('TRAVITWT', 0)) + present(saisie_variables.get('COD7WU', 0))) * (present(saisie_variables.get('TRATOIVG', 0)) + present(saisie_variables.get('COD7VH', 0)))) + ((present(saisie_variables.get('TRAVITWT', 0)) + present(saisie_variables.get('COD7WU', 0))) and (present(saisie_variables.get('TRAVITWT', 0)) + present(saisie_variables.get('COD7WU', 0))) * (present(saisie_variables.get('CHAUBOISN', 0)) + present(saisie_variables.get('COD7RN', 0)))) + ((present(saisie_variables.get('TRAVITWT', 0)) + present(saisie_variables.get('COD7WU', 0))) and (present(saisie_variables.get('TRAVITWT', 0)) + present(saisie_variables.get('COD7WU', 0))) * (present(saisie_variables.get('POMPESR', 0)) + present(saisie_variables.get('COD7RR', 0)) + present(saisie_variables.get('CHAUFSOL', 0)) + present(saisie_variables.get('COD7RS', 0)))) + ((present(saisie_variables.get('TRAVITWT', 0)) + present(saisie_variables.get('COD7WU', 0))) and (present(saisie_variables.get('TRAVITWT', 0)) + present(saisie_variables.get('COD7WU', 0))) * (present(saisie_variables.get('CIBOIBAIL', 0)) + present(saisie_variables.get('COD7SA', 0)) + present(saisie_variables.get('CINRJBAIL', 0)) + present(saisie_variables.get('COD7SB', 0)) + present(saisie_variables.get('POMPESP', 0)) + present(saisie_variables.get('COD7RP', 0)) + present(saisie_variables.get('POMPESQ', 0)) + present(saisie_variables.get('COD7RQ', 0)) + present(saisie_variables.get('ENERGIEST', 0)) + present(saisie_variables.get('COD7RT', 0)))) + ((present(saisie_variables.get('TRAMURWC', 0)) + present(saisie_variables.get('COD7WB', 0))) and (present(saisie_variables.get('TRAMURWC', 0)) + present(saisie_variables.get('COD7WB', 0))) * (present(saisie_variables.get('TRATOIVG', 0)) + present(saisie_variables.get('COD7VH', 0)))) + ((present(saisie_variables.get('TRAMURWC', 0)) + present(saisie_variables.get('COD7WB', 0))) and (present(saisie_variables.get('TRAMURWC', 0)) + present(saisie_variables.get('COD7WB', 0))) * (present(saisie_variables.get('CHAUBOISN', 0)) + present(saisie_variables.get('COD7RN', 0)))) + ((present(saisie_variables.get('TRAMURWC', 0)) + present(saisie_variables.get('COD7WB', 0))) and (present(saisie_variables.get('TRAMURWC', 0)) + present(saisie_variables.get('COD7WB', 0))) * (present(saisie_variables.get('POMPESR', 0)) + present(saisie_variables.get('COD7RR', 0)) + present(saisie_variables.get('CHAUFSOL', 0)) + present(saisie_variables.get('COD7RS', 0)))) + ((present(saisie_variables.get('TRAMURWC', 0)) + present(saisie_variables.get('COD7WB', 0))) and (present(saisie_variables.get('TRAMURWC', 0)) + present(saisie_variables.get('COD7WB', 0))) * (present(saisie_variables.get('CIBOIBAIL', 0)) + present(saisie_variables.get('COD7SA', 0)) + present(saisie_variables.get('CINRJBAIL', 0)) + present(saisie_variables.get('COD7SB', 0)) + present(saisie_variables.get('POMPESP', 0)) + present(saisie_variables.get('COD7RP', 0)) + present(saisie_variables.get('POMPESQ', 0)) + present(saisie_variables.get('COD7RQ', 0)) + present(saisie_variables.get('ENERGIEST', 0)) + present(saisie_variables.get('COD7RT', 0)))) + ((present(saisie_variables.get('TRATOIVG', 0)) + present(saisie_variables.get('COD7VH', 0))) and (present(saisie_variables.get('TRATOIVG', 0)) + present(saisie_variables.get('COD7VH', 0))) * (present(saisie_variables.get('CHAUBOISN', 0)) + present(saisie_variables.get('COD7RN', 0)))) + ((present(saisie_variables.get('TRATOIVG', 0)) + present(saisie_variables.get('COD7VH', 0))) and (present(saisie_variables.get('TRATOIVG', 0)) + present(saisie_variables.get('COD7VH', 0))) * (present(saisie_variables.get('CHAUBOISN', 0)) + present(saisie_variables.get('COD7RN', 0)))) + ((present(saisie_variables.get('TRATOIVG', 0)) + present(saisie_variables.get('COD7VH', 0))) and (present(saisie_variables.get('TRATOIVG', 0)) + present(saisie_variables.get('COD7VH', 0))) * (present(saisie_variables.get('POMPESR', 0)) + present(saisie_variables.get('COD7RR', 0)) + present(saisie_variables.get('CHAUFSOL', 0)) + present(saisie_variables.get('COD7RS', 0)))) + ((present(saisie_variables.get('TRATOIVG', 0)) + present(saisie_variables.get('COD7VH', 0))) and (present(saisie_variables.get('TRATOIVG', 0)) + present(saisie_variables.get('COD7VH', 0))) * (present(saisie_variables.get('CIBOIBAIL', 0)) + present(saisie_variables.get('COD7SA', 0)) + present(saisie_variables.get('CINRJBAIL', 0)) + present(saisie_variables.get('COD7SB', 0)) + present(saisie_variables.get('POMPESP', 0)) + present(saisie_variables.get('COD7RP', 0)) + present(saisie_variables.get('POMPESQ', 0)) + present(saisie_variables.get('COD7RQ', 0)) + present(saisie_variables.get('ENERGIEST', 0)) + present(saisie_variables.get('COD7RT', 0)))) + ((present(saisie_variables.get('CHAUBOISN', 0)) + present(saisie_variables.get('COD7RN', 0))) and (present(saisie_variables.get('CHAUBOISN', 0)) + present(saisie_variables.get('COD7RN', 0))) * (present(saisie_variables.get('POMPESR', 0)) + present(saisie_variables.get('COD7RR', 0)) + present(saisie_variables.get('CHAUFSOL', 0)) + present(saisie_variables.get('COD7RS', 0)))) + ((present(saisie_variables.get('CHAUBOISN', 0)) + present(saisie_variables.get('COD7RN', 0))) and (present(saisie_variables.get('CHAUBOISN', 0)) + present(saisie_variables.get('COD7RN', 0))) * (present(saisie_variables.get('CIBOIBAIL', 0)) + present(saisie_variables.get('COD7SA', 0)) + present(saisie_variables.get('CINRJBAIL', 0)) + present(saisie_variables.get('COD7SB', 0)) + present(saisie_variables.get('POMPESP', 0)) + present(saisie_variables.get('COD7RP', 0)) + present(saisie_variables.get('POMPESQ', 0)) + present(saisie_variables.get('COD7RQ', 0)) + present(saisie_variables.get('ENERGIEST', 0)) + present(saisie_variables.get('COD7RT', 0)))) + ((present(saisie_variables.get('POMPESR', 0)) + present(saisie_variables.get('COD7RR', 0)) + present(saisie_variables.get('CHAUFSOL', 0)) + present(saisie_variables.get('COD7RS', 0))) and (present(saisie_variables.get('POMPESR', 0)) + present(saisie_variables.get('COD7RR', 0)) + present(saisie_variables.get('CHAUFSOL', 0)) + present(saisie_variables.get('COD7RS', 0))) * (present(saisie_variables.get('CIBOIBAIL', 0)) + present(saisie_variables.get('COD7SA', 0)) + present(saisie_variables.get('CINRJBAIL', 0)) + present(saisie_variables.get('COD7SB', 0)) + present(saisie_variables.get('POMPESP', 0)) + present(saisie_variables.get('COD7RP', 0)) + present(saisie_variables.get('POMPESQ', 0)) + present(saisie_variables.get('COD7RQ', 0)) + present(saisie_variables.get('ENERGIEST', 0)) + present(saisie_variables.get('COD7RT', 0)))))) + 0)

    @cache_result
    def PLAF1M():
        """
        Plaf 2012 Metro  pour DEV DUR
        """
        return (null((1 - saisie_variables.get('V_REGCO', 0))) and null((1 - saisie_variables.get('V_REGCO', 0))) * arr((24043 + (2808.5 and min(((NBPT() - 1) and (NBPT() - 1) * 4), 2) and 2808.5 * min(((NBPT() - 1) and (NBPT() - 1) * 4), 2) * positif((NBPT() - 1))) + (2210.5 and ((NBPT() - 1.5) and (NBPT() - 1.5) * 4) and 2210.5 * ((NBPT() - 1.5) and (NBPT() - 1.5) * 4) * positif((NBPT() - 1.5))))))

    @cache_result
    def PLAF1MGR():
        """
        Plaf 2012 Martinique  pour DEV DUR
        """
        return (null((5 - saisie_variables.get('V_REGCO', 0))) and null((5 - saisie_variables.get('V_REGCO', 0))) * arr((29058 + (3082 and min(((NBPT() - 1) and (NBPT() - 1) * 4), 2) and 3082 * min(((NBPT() - 1) and (NBPT() - 1) * 4), 2) * positif((NBPT() - 1))) + (2938.5 and min(((NBPT() - 1.5) and (NBPT() - 1.5) * 4), 2) and 2938.5 * min(((NBPT() - 1.5) and (NBPT() - 1.5) * 4), 2) * positif((NBPT() - 1.5))) + (2210.5 and ((NBPT() - 2) and (NBPT() - 2) * 4) and 2210.5 * ((NBPT() - 2) and (NBPT() - 2) * 4) * positif((NBPT() - 2))))))

    @cache_result
    def PLAF1GM():
        """
        Plaf 2012 Guyane  pour DEV DUR
        """
        return (positif((null((6 - saisie_variables.get('V_REGCO', 0))) + null((7 - saisie_variables.get('V_REGCO', 0))))) and positif((null((6 - saisie_variables.get('V_REGCO', 0))) + null((7 - saisie_variables.get('V_REGCO', 0))))) * arr((31843 + (3082 and min(((NBPT() - 1) and (NBPT() - 1) * 4), 4) and 3082 * min(((NBPT() - 1) and (NBPT() - 1) * 4), 4) * positif((NBPT() - 1))) + (2624.5 and min(((NBPT() - 2) and (NBPT() - 2) * 4), 2) and 2624.5 * min(((NBPT() - 2) and (NBPT() - 2) * 4), 2) * positif((NBPT() - 2))) + (2210.5 and ((NBPT() - 2.5) and (NBPT() - 2.5) * 4) and 2210.5 * ((NBPT() - 2.5) and (NBPT() - 2.5) * 4) * positif((NBPT() - 2.5))))))

    @cache_result
    def PLAF1():
        """
        Plaf1 2012   pour DEV DUR
        """
        return (PLAF1M() + PLAF1MGR() + PLAF1GM())

    @cache_result
    def PLAF2M():
        """
        Plaf 2013 Metro  pour DEV DUR
        """
        return (null((1 - saisie_variables.get('V_REGCO', 0))) and null((1 - saisie_variables.get('V_REGCO', 0))) * arr((25005 + (2921 and min(((NBPT() - 1) and (NBPT() - 1) * 4), 2) and 2921 * min(((NBPT() - 1) and (NBPT() - 1) * 4), 2) * positif((NBPT() - 1))) + (2299 and ((NBPT() - 1.5) and (NBPT() - 1.5) * 4) and 2299 * ((NBPT() - 1.5) and (NBPT() - 1.5) * 4) * positif((NBPT() - 1.5))))))

    @cache_result
    def PLAF2MGR():
        """
        Plaf 2013 Martinique  pour DEV DUR
        """
        return (null((5 - saisie_variables.get('V_REGCO', 0))) and null((5 - saisie_variables.get('V_REGCO', 0))) * arr((30220 + (3205.5 and min(((NBPT() - 1) and (NBPT() - 1) * 4), 2) and 3205.5 * min(((NBPT() - 1) and (NBPT() - 1) * 4), 2) * positif((NBPT() - 1))) + (3056 and min(((NBPT() - 1.5) and (NBPT() - 1.5) * 4), 2) and 3056 * min(((NBPT() - 1.5) and (NBPT() - 1.5) * 4), 2) * positif((NBPT() - 1.5))) + (2299 and ((NBPT() - 2) and (NBPT() - 2) * 4) and 2299 * ((NBPT() - 2) and (NBPT() - 2) * 4) * positif((NBPT() - 2))))))

    @cache_result
    def PLAF2GM():
        """
        Plaf 2013 Guyane  pour DEV DUR
        """
        return (positif((null((6 - saisie_variables.get('V_REGCO', 0))) + null((7 - saisie_variables.get('V_REGCO', 0))))) and positif((null((6 - saisie_variables.get('V_REGCO', 0))) + null((7 - saisie_variables.get('V_REGCO', 0))))) * arr((33117 + (3205.5 and min(((NBPT() - 1) and (NBPT() - 1) * 4), 4) and 3205.5 * min(((NBPT() - 1) and (NBPT() - 1) * 4), 4) * positif((NBPT() - 1))) + (2729.5 and min(((NBPT() - 2) and (NBPT() - 2) * 4), 2) and 2729.5 * min(((NBPT() - 2) and (NBPT() - 2) * 4), 2) * positif((NBPT() - 2))) + (2299 and ((NBPT() - 2.5) and (NBPT() - 2.5) * 4) and 2299 * ((NBPT() - 2.5) and (NBPT() - 2.5) * 4) * positif((NBPT() - 2.5))))))

    @cache_result
    def PLAF2():
        """
        Plaf1 2013   pour DEV DUR
        """
        return (PLAF2M() + PLAF2MGR() + PLAF2GM())

    @cache_result
    def RESS():
        """
        Calcul pour DEV DUR
        """
        return positif((positif_ou_nul((PLAF1() - (((saisie_variables.get('V_BTRFRN2', 0) + 0) and (saisie_variables.get('V_BTRFRN2', 0) + 0) * (1 - present(saisie_variables.get('RFRN2', 0)))) + saisie_variables.get('RFRN2', 0)))) + ((1 - positif_ou_nul((PLAF1() - (((saisie_variables.get('V_BTRFRN2', 0) + 0) and (saisie_variables.get('V_BTRFRN2', 0) + 0) * (1 - present(saisie_variables.get('RFRN2', 0)))) + saisie_variables.get('RFRN2', 0))))) and (1 - positif_ou_nul((PLAF1() - (((saisie_variables.get('V_BTRFRN2', 0) + 0) and (saisie_variables.get('V_BTRFRN2', 0) + 0) * (1 - present(saisie_variables.get('RFRN2', 0)))) + saisie_variables.get('RFRN2', 0))))) * positif_ou_nul((PLAF2() - (((saisie_variables.get('V_BTRFRN1', 0) + 0) and (saisie_variables.get('V_BTRFRN1', 0) + 0) * (1 - present(saisie_variables.get('RFRN1', 0)))) + saisie_variables.get('RFRN1', 0))))) + present(saisie_variables.get('COD7WX', 0))))

    @cache_result
    def BDEV30():
        """
        Base tx 30%  pour DEV DUR
        """
        return (min(PDEVDUR(), (saisie_variables.get('COD7SA', 0) + saisie_variables.get('COD7SB', 0) + saisie_variables.get('COD7SC', 0) + saisie_variables.get('COD7WB', 0) + saisie_variables.get('COD7RG', 0) + saisie_variables.get('COD7VH', 0) + saisie_variables.get('COD7RH', 0) + saisie_variables.get('COD7RI', 0) + saisie_variables.get('COD7WU', 0) + saisie_variables.get('COD7RJ', 0) + saisie_variables.get('COD7RK', 0) + saisie_variables.get('COD7RL', 0) + saisie_variables.get('COD7RN', 0) + saisie_variables.get('COD7RP', 0) + saisie_variables.get('COD7RR', 0) + saisie_variables.get('COD7RS', 0) + saisie_variables.get('COD7RQ', 0) + saisie_variables.get('COD7RT', 0) + saisie_variables.get('COD7TV', 0) + saisie_variables.get('COD7TW', 0) + saisie_variables.get('COD7RV', 0) + saisie_variables.get('COD7RW', 0) + saisie_variables.get('COD7RZ', 0))) and min(PDEVDUR(), (saisie_variables.get('COD7SA', 0) + saisie_variables.get('COD7SB', 0) + saisie_variables.get('COD7SC', 0) + saisie_variables.get('COD7WB', 0) + saisie_variables.get('COD7RG', 0) + saisie_variables.get('COD7VH', 0) + saisie_variables.get('COD7RH', 0) + saisie_variables.get('COD7RI', 0) + saisie_variables.get('COD7WU', 0) + saisie_variables.get('COD7RJ', 0) + saisie_variables.get('COD7RK', 0) + saisie_variables.get('COD7RL', 0) + saisie_variables.get('COD7RN', 0) + saisie_variables.get('COD7RP', 0) + saisie_variables.get('COD7RR', 0) + saisie_variables.get('COD7RS', 0) + saisie_variables.get('COD7RQ', 0) + saisie_variables.get('COD7RT', 0) + saisie_variables.get('COD7TV', 0) + saisie_variables.get('COD7TW', 0) + saisie_variables.get('COD7RV', 0) + saisie_variables.get('COD7RW', 0) + saisie_variables.get('COD7RZ', 0))) * positif(((positif(BQRESS()) and positif(BQRESS()) * positif(BQTRAV())) + (positif(BQRESS()) and null(BQTRAV()) and positif(BQRESS()) * null(BQTRAV()) * null(RESS())) + (positif(BQRESS()) and null(BQTRAV()) and positif(BQRESS()) * null(BQTRAV()) * positif(RESS())) + (positif(BQRESS()) and null(BQTRAV()) and positif(RESS()) and positif(BQRESS()) * null(BQTRAV()) * positif(RESS()) * present(saisie_variables.get('CRECHOBOI', 0))) + null(BQRESS()))))

    @cache_result
    def BDEV25():
        """
        Base tx 25%  pour DEV DUR
        """
        return (min(max(0, (PDEVDUR() - BDEV30())), (saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('TRAVITWT', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0))) and min(max(0, (PDEVDUR() - BDEV30())), (saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('TRAVITWT', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0))) * positif((positif(BQRESS()) and positif(BQRESS()) * positif(BQTRAV()))))

    @cache_result
    def BDEV15():
        """
        Base tx 15%  pour DEV DUR
        """
        return ((min(max(0, (PDEVDUR() - BDEV30() - BDEV25())), (saisie_variables.get('CRENRJ', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('MATISOSJ', 0) + saisie_variables.get('VOLISO', 0) + saisie_variables.get('PORENT', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0))) and min(max(0, (PDEVDUR() - BDEV30() - BDEV25())), (saisie_variables.get('CRENRJ', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('MATISOSJ', 0) + saisie_variables.get('VOLISO', 0) + saisie_variables.get('PORENT', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0))) * positif((positif(BQRESS()) and positif(BQRESS()) * positif(BQTRAV())))) + (min(max(0, (PDEVDUR() - BDEV30())), (((saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('CRENRJ', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('TRAVITWT', 0) + saisie_variables.get('MATISOSJ', 0) + saisie_variables.get('VOLISO', 0) + saisie_variables.get('PORENT', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0)) and (saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('CRENRJ', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('TRAVITWT', 0) + saisie_variables.get('MATISOSJ', 0) + saisie_variables.get('VOLISO', 0) + saisie_variables.get('PORENT', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0)) * (1 - present(saisie_variables.get('COD7WX', 0)))) + (present(saisie_variables.get('COD7WX', 0)) and present(saisie_variables.get('COD7WX', 0)) * saisie_variables.get('COD7WX', 0)))) and min(max(0, (PDEVDUR() - BDEV30())), (((saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('CRENRJ', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('TRAVITWT', 0) + saisie_variables.get('MATISOSJ', 0) + saisie_variables.get('VOLISO', 0) + saisie_variables.get('PORENT', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0)) and (saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('CRENRJ', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('TRAVITWT', 0) + saisie_variables.get('MATISOSJ', 0) + saisie_variables.get('VOLISO', 0) + saisie_variables.get('PORENT', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0)) * (1 - present(saisie_variables.get('COD7WX', 0)))) + (present(saisie_variables.get('COD7WX', 0)) and present(saisie_variables.get('COD7WX', 0)) * saisie_variables.get('COD7WX', 0)))) * positif((positif(BQRESS()) and null(BQTRAV()) and positif(RESS()) and positif(BQRESS()) * null(BQTRAV()) * positif(RESS()) * (1 - present(saisie_variables.get('CRECHOBOI', 0)))))) + (min(max(0, (PDEVDUR() - BDEV30())), (((saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('CRENRJ', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0)) and (saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('CRENRJ', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0)) * (1 - present(saisie_variables.get('COD7WX', 0)))) + (present(saisie_variables.get('COD7WX', 0)) and present(saisie_variables.get('COD7WX', 0)) * saisie_variables.get('COD7WX', 0)))) and min(max(0, (PDEVDUR() - BDEV30())), (((saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('CRENRJ', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0)) and (saisie_variables.get('CIBOIBAIL', 0) + saisie_variables.get('CINRJBAIL', 0) + saisie_variables.get('CRENRJ', 0) + saisie_variables.get('TRAMURWC', 0) + saisie_variables.get('CINRJ', 0) + saisie_variables.get('TRATOIVG', 0) + saisie_variables.get('CIDEP15', 0) + saisie_variables.get('MATISOSI', 0) + saisie_variables.get('CHAUBOISN', 0) + saisie_variables.get('POMPESP', 0) + saisie_variables.get('POMPESR', 0) + saisie_variables.get('CHAUFSOL', 0) + saisie_variables.get('POMPESQ', 0) + saisie_variables.get('ENERGIEST', 0) + saisie_variables.get('DIAGPERF', 0) + saisie_variables.get('RESCHAL', 0)) * (1 - present(saisie_variables.get('COD7WX', 0)))) + (present(saisie_variables.get('COD7WX', 0)) and present(saisie_variables.get('COD7WX', 0)) * saisie_variables.get('COD7WX', 0)))) * positif((positif(BQRESS()) and null(BQTRAV()) and positif(RESS()) and positif(BQRESS()) * null(BQTRAV()) * positif(RESS()) * present(saisie_variables.get('CRECHOBOI', 0))))))

    @cache_result
    def CIDEVDUR():
        """
        En faveur du developpement durable
        """
        return (arr(((BDEV30() and TX30 and BDEV30() * TX30 / 100) + (BDEV25() and TX25 and BDEV25() * TX25 / 100) + (BDEV15() and TX15 and BDEV15() * TX15 / 100))) and (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) and arr(((BDEV30() and TX30 and BDEV30() * TX30 / 100) + (BDEV25() and TX25 and BDEV25() * TX25 / 100) + (BDEV15() and TX15 and BDEV15() * TX15 / 100))) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) * (1 - V_CNR()))

    @cache_result
    def DTEC():
        """
        Depenses travaux prevention risques technologiques-Bailleur- declare
        """
        return saisie_variables.get('RISKTEC', 0)

    @cache_result
    def ATEC():
        """
        Depenses travaux prevention risques technologiques - Bailleur - retenu
        """
        return (positif(DTEC()) and positif(DTEC()) * DTEC())

    @cache_result
    def CITEC():
        """
        credit travaux prevention risques technologiques - bailleurs
        """
        return arr((ATEC() and TX40 and ATEC() * TX40 / 100))

    @cache_result
    def CICA():
        """
        Credit d'impot representatif de la taxe additionnelle au DB
        """
        return (arr((saisie_variables.get('BAILOC98', 0) and TX_BAIL and saisie_variables.get('BAILOC98', 0) * TX_BAIL / 100)) and arr((saisie_variables.get('BAILOC98', 0) and TX_BAIL and saisie_variables.get('BAILOC98', 0) * TX_BAIL / 100)) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def BRFG():
        """
        Base reduction frais de garde
        """
        return (min(saisie_variables.get('RDGARD1', 0), PLAF_REDGARD) + min(saisie_variables.get('RDGARD2', 0), PLAF_REDGARD) + min(saisie_variables.get('RDGARD3', 0), PLAF_REDGARD) + min(saisie_variables.get('RDGARD4', 0), PLAF_REDGARD) + min(saisie_variables.get('RDGARD1QAR', 0), PLAF_REDGARDQAR) + min(saisie_variables.get('RDGARD2QAR', 0), PLAF_REDGARDQAR) + min(saisie_variables.get('RDGARD3QAR', 0), PLAF_REDGARDQAR) + min(saisie_variables.get('RDGARD4QAR', 0), PLAF_REDGARDQAR))

    @cache_result
    def RFG():
        """
        Reduction frais de garde
        """
        return (arr((BRFG() and TX_REDGARD and BRFG() * TX_REDGARD / 100)) and arr((BRFG() and TX_REDGARD and BRFG() * TX_REDGARD / 100)) * (1 - V_CNR()))

    @cache_result
    def CIGARD():
        """
        Reduction retenue pour frais de garde
        """
        return (RFG() and RFG() * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def BCOS():
        """
        Base reduction cotisations syndicales
        """
        return (max(0, min((saisie_variables.get('RDSYVO', 0) + 0), arr((TX_BASECOTSYN and 100 and TX_BASECOTSYN / 100 * ((TSBV() and TSBV() * IND_10V()) - saisie_variables.get('BPCOSAV', 0) + EXPRV()))))) + max(0, min((saisie_variables.get('RDSYCJ', 0) + 0), arr((TX_BASECOTSYN and 100 and TX_BASECOTSYN / 100 * ((TSBC() and TSBC() * IND_10C()) - saisie_variables.get('BPCOSAC', 0) + EXPRC()))))) + min((saisie_variables.get('RDSYPP', 0) + 0), arr((TX_BASECOTSYN and 100 and TX_BASECOTSYN / 100 * somme([((TSB1() and TSB1() * IND_101()) + EXPR1()), ((TSB2() and TSB2() * IND_102()) + EXPR2()), ((TSB3() and TSB3() * IND_103()) + EXPR3()), ((TSB4() and TSB4() * IND_104()) + EXPR4())])))))

    @cache_result
    def CISYND():
        """
        CI cotis. syndicale
        """
        return (arr((TX_REDCOTSYN and 100 and TX_REDCOTSYN / 100 * BCOS())) and arr((TX_REDCOTSYN and 100 and TX_REDCOTSYN / 100 * BCOS())) * (1 - V_CNR()))

    @cache_result
    def APRETUD():
        """
        Interets pret etudiant retenu
        """
        return (max((min(saisie_variables.get('PRETUD', 0), LIM_PRETUD) + min(saisie_variables.get('PRETUDANT', 0), (LIM_PRETUD and LIM_PRETUD * saisie_variables.get('CASEPRETUD', 0)))), 0) and max((min(saisie_variables.get('PRETUD', 0), LIM_PRETUD) + min(saisie_variables.get('PRETUDANT', 0), (LIM_PRETUD and LIM_PRETUD * saisie_variables.get('CASEPRETUD', 0)))), 0) * (1 - V_CNR()))

    @cache_result
    def CIPRETUD():
        """
        Interets pret etudiant calcule
        """
        return (arr((APRETUD() and TX_PRETUD and APRETUD() * TX_PRETUD / 100)) and (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) and arr((APRETUD() and TX_PRETUD and APRETUD() * TX_PRETUD / 100)) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) * (1 - V_CNR()))

    @cache_result
    def CIADCRE():
        """
        Credit aide a domicile
        """
        return (arr((BADCRE() and TX_AIDOMI and BADCRE() * TX_AIDOMI / 100)) and (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) and arr((BADCRE() and TX_AIDOMI and BADCRE() * TX_AIDOMI / 100)) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) * (1 - V_CNR()))

    @cache_result
    def BCIHP():
        """
        base limitee du Credit d'impot habitation principale plafonnee
        """
        return max(((PLAFHABPRIN and (1 + BOOL_0AM()) and PLAFHABPRIN * (1 + BOOL_0AM()) * (1 + positif((saisie_variables.get('V_0AP', 0) + saisie_variables.get('V_0AF', 0) + saisie_variables.get('V_0CG', 0) + saisie_variables.get('V_0CI', 0) + saisie_variables.get('V_0CR', 0))))) + ((PLAFHABPRINENF and PLAFHABPRINENF / 2) and (PLAFHABPRINENF and PLAFHABPRINENF / 2) * (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0))) + (PLAFHABPRINENF and PLAFHABPRINENF * (saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0)))), 0)

    @cache_result
    def BCIHABPRIN1():
        """
        base limitee du Credit d'impot habitation principale 1 ere lim
        """
        return (min(BCIHP(), saisie_variables.get('PREHABT', 0)) and min(BCIHP(), saisie_variables.get('PREHABT', 0)) * (1 - V_CNR()))

    @cache_result
    def BCIHABPRIN2():
        """
        base limitee du Credit d'impot habitation principale 2 ere lim
        """
        return (min(max(0, (BCIHP() - BCIHABPRIN1())), saisie_variables.get('PREHABT1', 0)) and min(max(0, (BCIHP() - BCIHABPRIN1())), saisie_variables.get('PREHABT1', 0)) * (1 - V_CNR()))

    @cache_result
    def BCIHABPRIN3():
        """
        base limitee du Credit d'impot habitation principale 2 ere lim
        """
        return (min(max(0, (BCIHP() - BCIHABPRIN1() - BCIHABPRIN2())), saisie_variables.get('PREHABTN', 0)) and min(max(0, (BCIHP() - BCIHABPRIN1() - BCIHABPRIN2())), saisie_variables.get('PREHABTN', 0)) * (1 - V_CNR()))

    @cache_result
    def BCIHABPRIN4():
        """
        base limitee du Credit d'impot habitation principale 4eme limite
        """
        return (min(max(0, (BCIHP() - BCIHABPRIN1() - BCIHABPRIN2() - BCIHABPRIN3())), saisie_variables.get('PREHABTN1', 0)) and min(max(0, (BCIHP() - BCIHABPRIN1() - BCIHABPRIN2() - BCIHABPRIN3())), saisie_variables.get('PREHABTN1', 0)) * (1 - V_CNR()))

    @cache_result
    def BCIHABPRIN5():
        """
        base limitee du Credit d'impot habitation principale 5eme limite
        """
        return (min(max(0, (BCIHP() - BCIHABPRIN1() - BCIHABPRIN2() - BCIHABPRIN3() - BCIHABPRIN4())), saisie_variables.get('PREHABT2', 0)) and min(max(0, (BCIHP() - BCIHABPRIN1() - BCIHABPRIN2() - BCIHABPRIN3() - BCIHABPRIN4())), saisie_variables.get('PREHABT2', 0)) * (1 - V_CNR()))

    @cache_result
    def BCIHABPRIN6():
        """
        base limitee du Credit d'impot habitation principale 6eme limite
        """
        return (min(max(0, (BCIHP() - BCIHABPRIN1() - BCIHABPRIN2() - BCIHABPRIN3() - BCIHABPRIN4() - BCIHABPRIN5())), saisie_variables.get('PREHABTN2', 0)) and min(max(0, (BCIHP() - BCIHABPRIN1() - BCIHABPRIN2() - BCIHABPRIN3() - BCIHABPRIN4() - BCIHABPRIN5())), saisie_variables.get('PREHABTN2', 0)) * (1 - V_CNR()))

    @cache_result
    def BCIHABPRIN7():
        """
        base limitee du Credit d'impot habitation principale 7eme limite
        """
        return (min(max(0, (BCIHP() - BCIHABPRIN1() - BCIHABPRIN2() - BCIHABPRIN3() - BCIHABPRIN4() - BCIHABPRIN5() - BCIHABPRIN6())), saisie_variables.get('PREHABTVT', 0)) and min(max(0, (BCIHP() - BCIHABPRIN1() - BCIHABPRIN2() - BCIHABPRIN3() - BCIHABPRIN4() - BCIHABPRIN5() - BCIHABPRIN6())), saisie_variables.get('PREHABTVT', 0)) * (1 - V_CNR()))

    @cache_result
    def CIHABPRIN():
        """
        Credit d'impot habitation principale
        """
        return (arr(((BCIHABPRIN1() and TX40 and BCIHABPRIN1() * TX40 / 100) + (BCIHABPRIN2() and TX40 and BCIHABPRIN2() * TX40 / 100) + (BCIHABPRIN3() and TX30 and BCIHABPRIN3() * TX30 / 100) + (BCIHABPRIN4() and TX25 and BCIHABPRIN4() * TX25 / 100) + (BCIHABPRIN5() and TX20 and BCIHABPRIN5() * TX20 / 100) + (BCIHABPRIN6() and TX15 and BCIHABPRIN6() * TX15 / 100) + (BCIHABPRIN7() and TX10 and BCIHABPRIN7() * TX10 / 100))) and (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) and arr(((BCIHABPRIN1() and TX40 and BCIHABPRIN1() * TX40 / 100) + (BCIHABPRIN2() and TX40 and BCIHABPRIN2() * TX40 / 100) + (BCIHABPRIN3() and TX30 and BCIHABPRIN3() * TX30 / 100) + (BCIHABPRIN4() and TX25 and BCIHABPRIN4() * TX25 / 100) + (BCIHABPRIN5() and TX20 and BCIHABPRIN5() * TX20 / 100) + (BCIHABPRIN6() and TX15 and BCIHABPRIN6() * TX15 / 100) + (BCIHABPRIN7() and TX10 and BCIHABPRIN7() * TX10 / 100))) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) * (1 - V_CNR()))

    @cache_result
    def CRESINTER():
        """
        Credit pret sans interet
        """
        return saisie_variables.get('PRESINTER', 0)

    @cache_result
    def CICONGAGRI():
        """
        credit impot conge agriculteur
        """
        return (saisie_variables.get('CRECONGAGRI', 0) and saisie_variables.get('CRECONGAGRI', 0) * (1 - V_CNR()))

    @cache_result
    def DLOYIMP():
        """
        Credit assurances loyers impayes declare
        """
        return saisie_variables.get('LOYIMP', 0)

    @cache_result
    def ALOYIMP():
        """
        Credit assurances loyers impayes retenu
        """
        return DLOYIMP()

    @cache_result
    def CILOYIMP():
        """
        Primes d'assurance pour loyer impayes
        """
        return (arr((ALOYIMP() and TX_LOYIMP and ALOYIMP() * TX_LOYIMP / 100)) and arr((ALOYIMP() and TX_LOYIMP and ALOYIMP() * TX_LOYIMP / 100)) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def PPE_BOOL_SIFC():
        """
        PPE:BOOLEEN CELIBATAIRE
        """
        return ((1 - BOOL_0AM()) and (1 - BOOL_0AM()) * (1 - (positif(saisie_variables.get('V_0AV', 0)) and positif(saisie_variables.get('V_0AV', 0)) * positif(saisie_variables.get('V_0AZ', 0)))))

    @cache_result
    def PPE_BOOL_SIFM():
        """
        PPE:BOOLEEN MARIE
        """
        return (BOOL_0AM() + (positif(saisie_variables.get('V_0AV', 0)) and positif(saisie_variables.get('V_0AV', 0)) * positif(saisie_variables.get('V_0AZ', 0))))

    @cache_result
    def PPESEUILKIR():
        """
        PPE:CALCUL DU SEUIL DU REVENU FISCAL DE REFERENCE
        """
        return ((PPE_BOOL_SIFC() and PPE_BOOL_SIFC() * PPELIMC) + (PPE_BOOL_SIFM() and PPE_BOOL_SIFM() * PPELIMM) + ((NBPT() - 1 - PPE_BOOL_SIFM() - NBQAR()) and 2 and (NBPT() - 1 - PPE_BOOL_SIFM() - NBQAR()) * 2 * PPELIMPAC) + (NBQAR() and PPELIMPAC and NBQAR() * PPELIMPAC * 2))

    @cache_result
    def PVTXEFF2():
        """
        Calcul des  PV pour corriger 8ZR ou 8ZN pour RFR
        """
        return max(0, ((saisie_variables.get('BPVRCM', 0) + saisie_variables.get('COD3SG', 0) + saisie_variables.get('COD3SL', 0) + saisie_variables.get('ABDETPLUS', 0) + saisie_variables.get('ABIMPPV', 0)) - (saisie_variables.get('DPVRCM', 0) + saisie_variables.get('COD3SH', 0) + saisie_variables.get('COD3SM', 0) + saisie_variables.get('ABDETMOINS', 0) + saisie_variables.get('ABIMPMV', 0))))

    @cache_result
    def PVTXEFF():
        """
        Calcul des  PV pour corriger 8ZR ou 8ZN pour RFR
        """
        return ((saisie_variables.get('PVTAXSB', 0) + saisie_variables.get('BPVRCM', 0) - PVTXEFF2()) and (saisie_variables.get('PVTAXSB', 0) + saisie_variables.get('BPVRCM', 0) - PVTXEFF2()) * positif((present(saisie_variables.get('IPTEFN', 0)) + present(saisie_variables.get('IPTEFP', 0)))))

    @cache_result
    def SHBARFR():
        """
        Somme des revenus categoriels nets hors BA pour rfr
        """
        return (saisie_variables.get('ESFP', 0) + TSPR() + RCM() + BIN() + BNN() + PLOCNETF() + NPLOCNETF() + PVBAR() + ((RRFI() + 0) and (RRFI() + 0) * (1 - saisie_variables.get('V_INDTEO', 0))) + ((RRFTEO() + 0) and (RRFTEO() + 0) * saisie_variables.get('V_INDTEO', 0)))

    @cache_result
    def RGRFR():
        """
        Revenu global pour rfr
        """
        return (((1 - positif(saisie_variables.get('IPVLOC', 0))) and (1 - positif(saisie_variables.get('IPVLOC', 0))) * (SHBARFR() + max(BANOR(), 0) + REB() + (min(BANOR(), 0) and min(BANOR(), 0) * positif((SEUIL_IMPDEFBA + 1 - SHBARFR() - (REVTP() - BA1()) - REVQTOTQHT()))))) + (positif(saisie_variables.get('IPVLOC', 0)) and positif(saisie_variables.get('IPVLOC', 0)) * saisie_variables.get('IPVLOC', 0)))

    @cache_result
    def RBGRFR():
        """
        Revenu brut global pour rfr
        """
        return (((((1 - positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) and (1 - positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) * min(0, (RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR() + TOTALQUO()))) + (positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR())) and positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR())) * (RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) and (((1 - positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) and (1 - positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) * min(0, (RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR() + TOTALQUO()))) + (positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR())) and positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR())) * (RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - DAR()))) * (1 - positif(base_variables['ART1731BIS']))) + ((((1 - positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU())))) and (1 - positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU())))) * min(0, (RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU()) + TOTALQUO()))) + (positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU()))) and positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU()))) * (RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU())))) and (((1 - positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU())))) and (1 - positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU())))) * min(0, (RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU()) + TOTALQUO()))) + (positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU()))) and positif((RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU()))) * (RGRFR() + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0) - (DAR() - DFANTIMPU())))) * positif(base_variables['ART1731BIS'])))

    @cache_result
    def RBG2RFR():
        """
        Revenu brut global moins la CSg deductible pour rfr
        """
        return (RBGRFR() - min(RBGRFR(), DDCSG()))

    @cache_result
    def RBLRFR():
        """
        Revenu base des limitations de charges deductibles pour rfr
        """
        return ((RBG2RFR() - (min(RBG2RFR(), (DPA() + DFA() + DEDIV() + APERPV() + APERPC() + APERPP() + NUREPAR())) and min(RBG2RFR(), (DPA() + DFA() + DEDIV() + APERPV() + APERPC() + APERPP() + NUREPAR())) * (1 - V_CNR())) - (min(RBG2RFR(), saisie_variables.get('V_8ZT', 0)) and min(RBG2RFR(), saisie_variables.get('V_8ZT', 0)) * V_CR2())) and (RBG2RFR() - (min(RBG2RFR(), (DPA() + DFA() + DEDIV() + APERPV() + APERPC() + APERPP() + NUREPAR())) and min(RBG2RFR(), (DPA() + DFA() + DEDIV() + APERPV() + APERPC() + APERPP() + NUREPAR())) * (1 - V_CNR())) - (min(RBG2RFR(), saisie_variables.get('V_8ZT', 0)) and min(RBG2RFR(), saisie_variables.get('V_8ZT', 0)) * V_CR2())) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def RNGRFR():
        """
        Revenu net global pour rfr
        """
        return ((null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((V_CR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)) * saisie_variables.get('IPVLOC', 0)) + ((1 - (null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)))) and (1 - (null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)))) * RBLRFR()))

    @cache_result
    def RI1RFR():
        """
        Revenu imposable pour rfr
        """
        return max((RNGRFR() - ((1 - min(1, saisie_variables.get('IPVLOC', 0))) and (1 - min(1, saisie_variables.get('IPVLOC', 0))) * ABTPA()) - ABTMA()), 0)

    @cache_result
    def TEFF():
        """
        Taux effectif : revenu total
        """
        return (VARIPTEFP() - VARIPTEFN() + TEFFREVTOT())

    @cache_result
    def TEFFN_1():
        """
        tx effectif sans 1731 
        """
        return (((1 - positif_ou_nul(TEFF())) and (1 - positif_ou_nul(TEFF())) * (min(0, TEFF()) and min(0, TEFF()) * -1)) + 0)

    @cache_result
    def TEFFN_2():
        """
        tx effectif  avec 1731 
        """
        return (((((1 - positif_ou_nul(TEFF())) and (1 - positif_ou_nul(TEFF())) * (min(0, TEFF()) and min(0, TEFF()) * -1)) + 0) and null((base_variables['SOMMEMOND_2'] + 0)) and (((1 - positif_ou_nul(TEFF())) and (1 - positif_ou_nul(TEFF())) * (min(0, TEFF()) and min(0, TEFF()) * -1)) + 0) * null((base_variables['SOMMEMOND_2'] + 0)) * (1 - base_variables['PREM8_11'])) + 0)

    @cache_result
    def TEFFN():
        """
        Taux effectif : deficit mondial
        """
        return ((TEFFN_1() and TEFFN_1() * (1 - positif(base_variables['SOMMEMOND_2']))) + (TEFFN_2() and TEFFN_2() * positif(base_variables['SOMMEMOND_2'])))

    @cache_result
    def DRBG():
        """
        DEFICIT GLOBAL
        """
        return min(0, RRBG())

    @cache_result
    def DAR_REP():
        """
        Deficits anterieurs reportables pour calcul report
        """
        return (somme([saisie_variables.get('DEFAA0', 0), saisie_variables.get('DEFAA1', 0), saisie_variables.get('DEFAA2', 0), saisie_variables.get('DEFAA3', 0), saisie_variables.get('DEFAA4', 0)]) and somme([saisie_variables.get('DEFAA0', 0), saisie_variables.get('DEFAA1', 0), saisie_variables.get('DEFAA2', 0), saisie_variables.get('DEFAA3', 0), saisie_variables.get('DEFAA4', 0)]) * (1 - positif(saisie_variables.get('IPVLOC', 0))))

    @cache_result
    def SOMDEFICITHTS():
        """
        Somme def  pour art 1731bis
        """
        return (SOMDEFANT() + SOMDEFLOC() + SOMDEFBNC() + SOMDEFBASUP() + SOMDEFBIC() + saisie_variables.get('RFDHIS', 0))

    @cache_result
    def DFANT():
        """
        Deficits globaux des annees anterieures
        """
        return ((saisie_variables.get('DEFAA5', 0) + saisie_variables.get('DEFAA4', 0) + saisie_variables.get('DEFAA3', 0) + saisie_variables.get('DEFAA2', 0) + saisie_variables.get('DEFAA1', 0) + saisie_variables.get('DEFAA0', 0)) and (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))) and (saisie_variables.get('DEFAA5', 0) + saisie_variables.get('DEFAA4', 0) + saisie_variables.get('DEFAA3', 0) + saisie_variables.get('DEFAA2', 0) + saisie_variables.get('DEFAA1', 0) + saisie_variables.get('DEFAA0', 0)) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11']))) * (1 - positif(saisie_variables.get('IPVLOC', 0))))

    @cache_result
    def TOTALQUORET():
        """
        Total quotient pour 1731bis
        """
        return min(TOTALQUO(), max(base_variables['TOTALQUO1731'], max(base_variables['TOTALQUO_P'], base_variables['TOTALQUOP2'])))

    @cache_result
    def RNIDF():
        """
        Deficit a reporter total (toutes annees confondue)
        """
        return (((1 - positif_ou_nul((RG() - DAR() + TOTALQUO()))) and (((1 - positif_ou_nul((RG() + TOTALQUO()))) and (1 - positif_ou_nul((RG() + TOTALQUO()))) * (((RG() + TOTALQUO()) and (RG() + TOTALQUO()) * -1) + DAR_REP())) + (null((RG() + TOTALQUO())) and null((RG() + TOTALQUO())) * DAR_REP()) + (positif((RG() + TOTALQUO())) and positif((RG() + TOTALQUO())) * ((positif((RG() + TOTALQUO() - saisie_variables.get('DEFAA5', 0))) and positif((RG() + TOTALQUO() - saisie_variables.get('DEFAA5', 0))) * (RG() + TOTALQUO() - DAR())) + ((1 - positif((RG() + TOTALQUO() - saisie_variables.get('DEFAA5', 0)))) and (1 - positif((RG() + TOTALQUO() - saisie_variables.get('DEFAA5', 0)))) * DAR_REP())))) and (1 - positif_ou_nul((RG() - DAR() + TOTALQUO()))) * (((1 - positif_ou_nul((RG() + TOTALQUO()))) and (1 - positif_ou_nul((RG() + TOTALQUO()))) * (((RG() + TOTALQUO()) and (RG() + TOTALQUO()) * -1) + DAR_REP())) + (null((RG() + TOTALQUO())) and null((RG() + TOTALQUO())) * DAR_REP()) + (positif((RG() + TOTALQUO())) and positif((RG() + TOTALQUO())) * ((positif((RG() + TOTALQUO() - saisie_variables.get('DEFAA5', 0))) and positif((RG() + TOTALQUO() - saisie_variables.get('DEFAA5', 0))) * (RG() + TOTALQUO() - DAR())) + ((1 - positif((RG() + TOTALQUO() - saisie_variables.get('DEFAA5', 0)))) and (1 - positif((RG() + TOTALQUO() - saisie_variables.get('DEFAA5', 0)))) * DAR_REP())))) * (1 - positif(base_variables['ART1731BIS']))) + (max(0, (saisie_variables.get('FRNV', 0) - FRDV() + saisie_variables.get('FRNC', 0) - FRDC() + saisie_variables.get('FRN1', 0) - FRD1() + saisie_variables.get('FRN2', 0) - FRD2() + saisie_variables.get('FRN3', 0) - FRD3() + saisie_variables.get('FRN4', 0) - FRD4() + SOMDEFICITHTS() - saisie_variables.get('DEFAA5', 0) - ((saisie_variables.get('BACDEV', 0) + saisie_variables.get('BAHDEV', 0) + saisie_variables.get('BACDEC', 0) + saisie_variables.get('BAHDEC', 0) + saisie_variables.get('BACDEP', 0) + saisie_variables.get('BAHDEP', 0)) and (saisie_variables.get('BACDEV', 0) + saisie_variables.get('BAHDEV', 0) + saisie_variables.get('BACDEC', 0) + saisie_variables.get('BAHDEC', 0) + saisie_variables.get('BACDEP', 0) + saisie_variables.get('BAHDEP', 0)) * (1 - positif((SEUIL_IMPDEFBA + 1 - SHBA() - (REVTP() - BA1()) - (somme([GLN1(), GLN2(), GLN3()]) + max(0, (_4BAQV() + _4BAQC() + _4BAQP() + BAHQTOTMIN() + BAHQTOTMAXN())) + GLN4V() + GLN4C() + somme([PENALIMV(), PENALIMC(), PENALIM1(), PENALIM2(), PENALIM3(), PENALIM4()]) + somme([PENFV(), PENFC(), PENF1(), PENF2(), PENF3(), PENF4()]) + somme([TSNN2TSV(), TSNN2TSC(), TSNN2TS1(), TSNN2TS2(), TSNN2TS3(), TSNN2TS4()]) + somme([TSNN2REMPV(), TSNN2REMPC(), TSNN2REMP1(), TSNN2REMP2(), TSNN2REMP3(), TSNN2REMP4()]) + somme([PRR2V(), PRR2C(), PRR21(), PRR22(), PRR23(), PRR24()]) + T2RV() + _2RCM() + _3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + _2REVF() + _3REVF()))))))) and positif(base_variables['ART1731BIS']) and max(0, (saisie_variables.get('FRNV', 0) - FRDV() + saisie_variables.get('FRNC', 0) - FRDC() + saisie_variables.get('FRN1', 0) - FRD1() + saisie_variables.get('FRN2', 0) - FRD2() + saisie_variables.get('FRN3', 0) - FRD3() + saisie_variables.get('FRN4', 0) - FRD4() + SOMDEFICITHTS() - saisie_variables.get('DEFAA5', 0) - ((saisie_variables.get('BACDEV', 0) + saisie_variables.get('BAHDEV', 0) + saisie_variables.get('BACDEC', 0) + saisie_variables.get('BAHDEC', 0) + saisie_variables.get('BACDEP', 0) + saisie_variables.get('BAHDEP', 0)) and (saisie_variables.get('BACDEV', 0) + saisie_variables.get('BAHDEV', 0) + saisie_variables.get('BACDEC', 0) + saisie_variables.get('BAHDEC', 0) + saisie_variables.get('BACDEP', 0) + saisie_variables.get('BAHDEP', 0)) * (1 - positif((SEUIL_IMPDEFBA + 1 - SHBA() - (REVTP() - BA1()) - (somme([GLN1(), GLN2(), GLN3()]) + max(0, (_4BAQV() + _4BAQC() + _4BAQP() + BAHQTOTMIN() + BAHQTOTMAXN())) + GLN4V() + GLN4C() + somme([PENALIMV(), PENALIMC(), PENALIM1(), PENALIM2(), PENALIM3(), PENALIM4()]) + somme([PENFV(), PENFC(), PENF1(), PENF2(), PENF3(), PENF4()]) + somme([TSNN2TSV(), TSNN2TSC(), TSNN2TS1(), TSNN2TS2(), TSNN2TS3(), TSNN2TS4()]) + somme([TSNN2REMPV(), TSNN2REMPC(), TSNN2REMP1(), TSNN2REMP2(), TSNN2REMP3(), TSNN2REMP4()]) + somme([PRR2V(), PRR2C(), PRR21(), PRR22(), PRR23(), PRR24()]) + T2RV() + _2RCM() + _3RCM() + _4RCM() + _5RCM() + _6RCM() + _7RCM() + _2REVF() + _3REVF()))))))) * positif(base_variables['ART1731BIS']) * base_variables['PREM8_11']) + (((positif((DFANTIMPU() - DFANT())) and positif((DFANTIMPU() - DFANT())) * max(0, (DFANTIMPU() - TOTALQUORET() - saisie_variables.get('DEFAA5', 0)))) + ((1 - positif((DFANTIMPU() - DFANT()))) and (1 - positif((DFANTIMPU() - DFANT()))) * max(0, (DFANTIMPU() - TOTALQUORET() - max(0, (saisie_variables.get('DEFAA5', 0) + DFANTIMPU() - TOTALQUORET() - DFANT())))))) and positif(base_variables['ART1731BIS']) and ((positif((DFANTIMPU() - DFANT())) and positif((DFANTIMPU() - DFANT())) * max(0, (DFANTIMPU() - TOTALQUORET() - saisie_variables.get('DEFAA5', 0)))) + ((1 - positif((DFANTIMPU() - DFANT()))) and (1 - positif((DFANTIMPU() - DFANT()))) * max(0, (DFANTIMPU() - TOTALQUORET() - max(0, (saisie_variables.get('DEFAA5', 0) + DFANTIMPU() - TOTALQUORET() - DFANT())))))) * positif(base_variables['ART1731BIS']) * (1 - base_variables['PREM8_11'])))

    @cache_result
    def TERPQTSREMP4():
        """
        Revenu imposable suivant le quotient soumis au bar}me quot. 
        """
        return ((RPQTSREMP4() and RPQTSREMP4() * (1 - positif(INDTEFF()))) + (TRPQTSREMP4() and TRPQTSREMP4() * positif(INDTEFF())))

    @cache_result
    def QUOKIRE():
        """
        revenus au quotient>>=2 servant pour REVKIRE
        """
        return (TEGL1() + TEGL2() + TEGL3() + RPQ4() + somme([(TERPQPRRV() + TERPQPRRZV() + TEGLFV() + TERPQTSV() + TERPQTSREMPV() + TERPQPALIMV()), (TERPQPRRC() + TERPQPRRZC() + TEGLFC() + TERPQTSC() + TERPQTSREMPC() + TERPQPALIMC()), (TERPQPRR1() + TERPQPRRZ1() + TEGLF1() + TERPQTS1() + TERPQTSREMP1() + TERPQPALIM1()), (TERPQPRR2() + TERPQPRRZ2() + TEGLF2() + TERPQTS2() + TERPQTSREMP2() + TERPQPALIM2()), (TERPQPRR3() + TERPQPRRZ3() + TEGLF3() + TERPQTS3() + TERPQTSREMP3() + TERPQPALIM3()), (TERPQPRR4() + TERPQPRRZ4() + TEGLF4() + TERPQTS4() + TERPQTSREMP4() + TERPQPALIM4())]) + TERPQRF1() + TEGLRF2() + TERPQRCMDC() + TERPQRCMFU() + TERPQRCMCH() + TERPQRCMTS() + TERPQRCMGO() + TERPQRCMTR() + TERPQRVO() + TERPQRVO5() + TERPQRVO6() + TERPQRVO7())

    @cache_result
    def TEFFREVRFR():
        """
        Revenu tot BIC mic. BNC reg. spec. tx eff. auto
        """
        return (INDTEFF() and INDTEFF() * ((TBICPF() + TBICNPF() + TBNN() + BIHTAV() + BIHTAC() + BIHTAP() + BIPTAV() + BIPTAC() + BIPTAP() + saisie_variables.get('ESFP', 0) + TTSPR() + RCM() + PLOCNETF() + NPLOCNETF() + (RFNTEO() and RFNTEO() * saisie_variables.get('V_INDTEO', 0)) + (RRFI() and RRFI() * (1 - saisie_variables.get('V_INDTEO', 0))) + PVBAR() + max(BANOR(), 0) + REB() + (min(BANOR(), 0) and min(BANOR(), 0) * positif((SEUIL_IMPDEFBA + 1 - SHBA() - (REVTP() - BA1()) - REVQTOTQHT())))) + saisie_variables.get('R1649', 0)))

    @cache_result
    def RBGTEFRFR():
        """
        Revenu brut global tx effectif
        """
        return (((1 - positif((TEFFREVRFR() + saisie_variables.get('PREREV', 0) - DAR()))) and (1 - positif((TEFFREVRFR() + saisie_variables.get('PREREV', 0) - DAR()))) * min(0, (TEFFREVRFR() + saisie_variables.get('PREREV', 0) - DAR() + TOTALQUO()))) + (positif((TEFFREVRFR() + saisie_variables.get('PREREV', 0) - DAR())) and positif((TEFFREVRFR() + saisie_variables.get('PREREV', 0) - DAR())) * (TEFFREVRFR() + saisie_variables.get('PREREV', 0) - DAR())))

    @cache_result
    def RPALETEFRFR():
        """
        Pension enfants majeurs : montant retenu tx eff
        """
        return (max(0, min(somme([(min(saisie_variables.get('NCHENF1', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF1', 0) and saisie_variables.get('CHENF1', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF2', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF2', 0) and saisie_variables.get('CHENF2', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF3', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF3', 0) and saisie_variables.get('CHENF3', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF4', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF4', 0) and saisie_variables.get('CHENF4', 0) * MAJREV)), LIM_PENSALENF))]), (RBGTEFRFR() - DDCSG() + TOTALQUO() - SDD()))) and max(0, min(somme([(min(saisie_variables.get('NCHENF1', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF1', 0) and saisie_variables.get('CHENF1', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF2', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF2', 0) and saisie_variables.get('CHENF2', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF3', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF3', 0) and saisie_variables.get('CHENF3', 0) * MAJREV)), LIM_PENSALENF)), (min(saisie_variables.get('NCHENF4', 0), LIM_PENSALENF) + min(arr((saisie_variables.get('CHENF4', 0) and saisie_variables.get('CHENF4', 0) * MAJREV)), LIM_PENSALENF))]), (RBGTEFRFR() - DDCSG() + TOTALQUO() - SDD()))) * (1 - V_CNR()))

    @cache_result
    def RPALPTEFRFR():
        """
        Autres pensions alimentaires tx eff
        """
        return (max(min(TOTPA(), (RBGTEFRFR() - RPALETEFRFR() - DDCSG() + TOTALQUO() - SDD())), 0) and max(min(TOTPA(), (RBGTEFRFR() - RPALETEFRFR() - DDCSG() + TOTALQUO() - SDD())), 0) * (1 - V_CNR()))

    @cache_result
    def RFACCTEFRFR():
        """
        Frais d'accueil retenu tx eff.
        """
        return max(min(DFA(), (RBGTEFRFR() - RPALETEFRFR() - RPALPTEFRFR() - DDCSG() + TOTALQUO() - SDD())), 0)

    @cache_result
    def RDDIVTEFRFR():
        """
        Deductions diverses
        """
        return max(min((DEDIV() and DEDIV() * (1 - V_CNR())), (RBGTEFRFR() - RPALETEFRFR() - RPALPTEFRFR() - RFACCTEFRFR() - DDCSG() + TOTALQUO() - SDD())), 0)

    @cache_result
    def APERPVTEFRFR():
        """
        bse retenu PERP tx eff
        """
        return ((1 - V_CNR()) and (1 - V_CNR()) * max(min(RPERPV(), (RBGTEFRFR() - RPALETEFRFR() - RPALPTEFRFR() - RFACCTEFRFR() - RDDIVTEFRFR() - DDCSG() + TOTALQUO() - SDD())), 0))

    @cache_result
    def APERPCTEFRFR():
        """
        bse retenu PERP tx eff
        """
        return ((1 - V_CNR()) and (1 - V_CNR()) * max(min(RPERPC(), (RBGTEFRFR() - RPALETEFRFR() - RPALPTEFRFR() - RFACCTEFRFR() - RDDIVTEFRFR() - DDCSG() + TOTALQUO() - SDD() - APERPVTEFRFR())), 0))

    @cache_result
    def APERPPTEFRFR():
        """
        bse retenu PERP tx eff
        """
        return ((1 - V_CNR()) and (1 - V_CNR()) * max(min(RPERPP(), (RBGTEFRFR() - RPALETEFRFR() - RPALPTEFRFR() - RFACCTEFRFR() - RDDIVTEFRFR() - DDCSG() + TOTALQUO() - SDD() - APERPVTEFRFR() - APERPCTEFRFR())), 0))

    @cache_result
    def RRBGTEFRFR():
        """
        Revenu global tx eff
        """
        return (((TEFFREVRFR() - DAR()) and (TEFFREVRFR() - DAR()) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))))) + (positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) and positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))) * (saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0))))

    @cache_result
    def NUREPARTEFRFR():
        """
        Deduction grosses reparations nus-proprietaires tx eff
        """
        return (min(NUPROPT(), max(0, min(PLAF_NUREPAR, (RRBGTEFRFR() - RPALETEFRFR() - RPALPTEFRFR() - RFACCTEFRFR() - RDDIVTEFRFR() - APERPVTEFRFR() - APERPCTEFRFR() - APERPPTEFRFR() - DDCSG() + TOTALQUO() - SDD())))) and min(NUPROPT(), max(0, min(PLAF_NUREPAR, (RRBGTEFRFR() - RPALETEFRFR() - RPALPTEFRFR() - RFACCTEFRFR() - RDDIVTEFRFR() - APERPVTEFRFR() - APERPCTEFRFR() - APERPPTEFRFR() - DDCSG() + TOTALQUO() - SDD())))) * (1 - V_CNR()))

    @cache_result
    def RBG2TEFRFR():
        """
        Revenu brut  tx effectif
        """
        return (RBGTEFRFR() - max(0, min(RBGTEFRFR(), DDCSG())))

    @cache_result
    def RBLTEFRFR():
        """
        Revenu brut  tx effectif
        """
        return ((RBG2TEFRFR() - (max(0, min(RBG2TEFRFR(), (DPA() + DFA() + DEDIV() + APERPVTEFRFR() + APERPCTEFRFR() + APERPPTEFRFR() + NUREPARTEFRFR()))) and max(0, min(RBG2TEFRFR(), (DPA() + DFA() + DEDIV() + APERPVTEFRFR() + APERPCTEFRFR() + APERPPTEFRFR() + NUREPARTEFRFR()))) * (1 - V_CNR())) - (min(RBG2TEFRFR(), saisie_variables.get('V_8ZT', 0)) and min(RBG2TEFRFR(), saisie_variables.get('V_8ZT', 0)) * V_CR2())) and (RBG2TEFRFR() - (max(0, min(RBG2TEFRFR(), (DPA() + DFA() + DEDIV() + APERPVTEFRFR() + APERPCTEFRFR() + APERPPTEFRFR() + NUREPARTEFRFR()))) and max(0, min(RBG2TEFRFR(), (DPA() + DFA() + DEDIV() + APERPVTEFRFR() + APERPCTEFRFR() + APERPPTEFRFR() + NUREPARTEFRFR()))) * (1 - V_CNR())) - (min(RBG2TEFRFR(), saisie_variables.get('V_8ZT', 0)) and min(RBG2TEFRFR(), saisie_variables.get('V_8ZT', 0)) * V_CR2())) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def RNGTEFRFR():
        """
        Revenu net global tx effectif
        """
        return ((null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((V_CR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)) * saisie_variables.get('IPVLOC', 0)) + ((1 - (null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)))) and (1 - (null((saisie_variables.get('V_REGCO', 0) - 4)) and null((V_CNR() - 1)) and null((V_CNR2() - 1)) and null((saisie_variables.get('V_REGCO', 0) - 4)) * null((V_CNR() - 1)) * null((V_CNR2() - 1)) * null((V_CR2() - 1)))) * RBLTEFRFR()))

    @cache_result
    def NABTEFRFR():
        """
        Nombre abattements personnes agees tx eff
        """
        return (min(max((LIM_ABTRNGDBL + 1 - (RNGTEFRFR() + TOTALQUO() - SDD() - SDC())), 0), 1) + min(max((LIM_ABTRNGSIMP + 1 - (RNGTEFRFR() + TOTALQUO() - SDD() - SDC())), 0), 1))

    @cache_result
    def ABTPATEFRFR():
        """
        Abattement personnes agees ou invalides tx eff
        """
        return (NDA() and NABTEFRFR() and ABAT_UNVIEUX and NDA() * NABTEFRFR() * ABAT_UNVIEUX * (1 - V_CNR()))

    @cache_result
    def TEFFREVTOTRFR():
        """
        Revenu tot BIC mic. BNC reg. spec. tx eff. auto
        """
        return (INDTEFF() and INDTEFF() * ((TBICPF() + TBICNPF() + TBNN() + BIHTAV() + BIHTAC() + BIHTAP() + BIPTAV() + BIPTAC() + BIPTAP() + saisie_variables.get('ESFP', 0) + TTSPR() + RCM() + PLOCNETF() + NPLOCNETF() + (RFNTEO() and RFNTEO() * saisie_variables.get('V_INDTEO', 0)) + (RRFI() and RRFI() * (1 - saisie_variables.get('V_INDTEO', 0))) + PVBAR() + max(BANOR(), 0) + REB() + (min(BANOR(), 0) and min(BANOR(), 0) * positif((SEUIL_IMPDEFBA + 1 - SHBA() - (REVTP() - BA1()) - REVQTOTQHT())))) + saisie_variables.get('R1649', 0) - DAR() - max(0, min(TEFFREVINTER(), (DPA() + DFA() + DEDIV() + APERPVTEFRFR() + APERPCTEFRFR() + APERPPTEFRFR() + NUREPARTEFRFR() + ABTPATEFRFR() + ABTMA() + DDCSG())))))

    @cache_result
    def XBAV():
        """
        BA exonere nets a reintegrer vous
        From XBAi
        """
        return (saisie_variables.get('BAHEXV', 0) + saisie_variables.get('BAEXV', 0))

    @cache_result
    def XBIPV():
        """
        EXO benefice ventile: partie revenus professionnels
        From XBIPi
        """
        return (saisie_variables.get('BIHEXV', 0) + saisie_variables.get('BICEXV', 0))

    @cache_result
    def XBINPV():
        """
        EXO benefice ventile: partie revenus non professionnels
        From XBINPi
        """
        return (saisie_variables.get('BICNPHEXV', 0) + saisie_variables.get('BICNPEXV', 0))

    @cache_result
    def XBNV():
        """
        BNC exonere nets a reintegrer VOUS
        From XBNi
        """
        return (saisie_variables.get('BNHEXV', 0) + saisie_variables.get('BNCEXV', 0))

    @cache_result
    def XBNNPV():
        """
        BNC exonere non pro nets a reintegrer VOUS
        From XBNNPi
        """
        return (saisie_variables.get('BNCNPREXV', 0) + saisie_variables.get('BNCNPREXAAV', 0))

    @cache_result
    def XBAC():
        """
        BA exonere nets a reintegrer conjoint
        From XBAi
        """
        return (saisie_variables.get('BAHEXC', 0) + saisie_variables.get('BAEXC', 0))

    @cache_result
    def XBIPC():
        """
        EXO benefice ventile: partie revenus professionnels
        From XBIPi
        """
        return (saisie_variables.get('BIHEXC', 0) + saisie_variables.get('BICEXC', 0))

    @cache_result
    def XBINPC():
        """
        EXO benefice ventile: partie revenus non professionnels
        From XBINPi
        """
        return (saisie_variables.get('BICNPHEXC', 0) + saisie_variables.get('BICNPEXC', 0))

    @cache_result
    def XBNC():
        """
        BNC exonere nets a reintegrer CONJOINT
        From XBNi
        """
        return (saisie_variables.get('BNHEXC', 0) + saisie_variables.get('BNCEXC', 0))

    @cache_result
    def XBNNPC():
        """
        BNC exonere non pro nets a reintegrer conjoint
        From XBNNPi
        """
        return (saisie_variables.get('BNCNPREXC', 0) + saisie_variables.get('BNCNPREXAAC', 0))

    @cache_result
    def XBAP():
        """
        BA exonere nets a reintegrer PAC
        From XBAi
        """
        return (saisie_variables.get('BAHEXP', 0) + saisie_variables.get('BAEXP', 0))

    @cache_result
    def XBIPP():
        """
        EXO benefice ventile: partie revenus professionnels
        From XBIPi
        """
        return (saisie_variables.get('BIHEXP', 0) + saisie_variables.get('BICEXP', 0))

    @cache_result
    def XBINPP():
        """
        EXO benefice ventile: partie revenus non professionnels
        From XBINPi
        """
        return (saisie_variables.get('BICNPHEXP', 0) + saisie_variables.get('BICNPEXP', 0))

    @cache_result
    def XBNP():
        """
        BNC exonere nets a reintegrer PAC
        From XBNi
        """
        return (saisie_variables.get('BNHEXP', 0) + saisie_variables.get('BNCEXP', 0))

    @cache_result
    def XBNNPP():
        """
        BNC exonere non pro nets a reintegrer pac
        From XBNNPi
        """
        return (saisie_variables.get('BNCNPREXP', 0) + saisie_variables.get('BNCNPREXAAP', 0))

    @cache_result
    def XTSBV():
        """
        EXO Salaires declares Vous
        From XTSBi
        """
        return (somme([saisie_variables.get('GLD1V', 0), saisie_variables.get('GLD2V', 0), saisie_variables.get('GLD3V', 0)]) + TSBNV() + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('TSASSUV', 0) + saisie_variables.get('XETRANV', 0) + saisie_variables.get('EXOCETV', 0) + saisie_variables.get('GLDGRATV', 0))

    @cache_result
    def XEXTSV():
        """
        EXO Salaires totaux vous (1AJ + AAJ +BAJ + CAJ)
        From XEXTSi
        """
        return (XTSBV() + saisie_variables.get('CARTSV', 0) + saisie_variables.get('REMPLAV', 0))

    @cache_result
    def XTPS10V():
        """
        EXO abattement 10% brut
        From XTPS10i
        """
        return arr((XEXTSV() and TX_DEDFORFTS and XEXTSV() * TX_DEDFORFTS / 100))

    @cache_result
    def XDFNV():
        """
        EXO Deduction forfaitaire de 10%
        From XDFNi
        """
        return min(PLAF_DEDFORFTS, XTPS10V())

    @cache_result
    def X10MINSV():
        """
        EXO deductions hors droits d'auteur plafonnees
        From X10MINSi
        """
        return max(min(XTSBV(), DEDMINV()), XDFNV())

    @cache_result
    def XDFV():
        """
        EXO Deductions forfaitaires des frais professionnels
        From XDFi
        """
        return X10MINSV()

    @cache_result
    def XIND_10V():
        """
        Indicateur d'affichage deduction 10% pour RFR
        From XIND_10i
        """
        return positif_ou_nul((X10MINSV() - saisie_variables.get('FRNV', 0)))

    @cache_result
    def XFPTV():
        """
        EXO deduction de 10% ou frais reels
        From XFPTi
        """
        return ((XDFV() and XDFV() * XIND_10V()) + (FRDV() and FRDV() * (1 - XIND_10V())))

    @cache_result
    def XTSNTV():
        """
        EXO salaires apres deduction des frais professionnels
        From XTSNTi
        """
        return (XEXTSV() - XFPTV())

    @cache_result
    def XTSNV():
        """
        EXO Traitements et salaires nets de frais
        From XTSNi
        """
        return ((positif(XTSNTV()) and positif(XTSNTV()) * min(0, XTSNTV())) + (positif_ou_nul(XTSNTV()) and positif_ou_nul(XTSNTV()) * XTSNTV()))

    @cache_result
    def XETSNNV():
        """
        EXO salaires normaux imposables - Vous detache a l etranger
        From XETSNNi
        """
        return ((arr((positif(XTSNV()) and XTSNV() and positif(XTSNV()) * XTSNV() * (saisie_variables.get('XETRANV', 0) and saisie_variables.get('XETRANV', 0) / XEXTSV()))) and arr((positif(XTSNV()) and XTSNV() and positif(XTSNV()) * XTSNV() * (saisie_variables.get('XETRANV', 0) and saisie_variables.get('XETRANV', 0) / XEXTSV()))) * XIND_10V()) + ((1 - XIND_10V()) and (1 - XIND_10V()) * saisie_variables.get('XETRANV', 0)))

    @cache_result
    def XTSBC():
        """
        EXO Salaires declares Conjoint
        From XTSBi
        """
        return (somme([saisie_variables.get('GLD1C', 0), saisie_variables.get('GLD2C', 0), saisie_variables.get('GLD3C', 0)]) + TSBNC() + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('TSASSUC', 0) + saisie_variables.get('XETRANC', 0) + saisie_variables.get('EXOCETC', 0) + saisie_variables.get('GLDGRATC', 0))

    @cache_result
    def XEXTSC():
        """
        EXO Salaires totaux conjoint (1BJ + ABJ +BBJ + CBJ)
        From XEXTSi
        """
        return (XTSBC() + saisie_variables.get('CARTSC', 0) + saisie_variables.get('REMPLAC', 0))

    @cache_result
    def XTPS10C():
        """
        EXO abattement 10% brut
        From XTPS10i
        """
        return arr((XEXTSC() and TX_DEDFORFTS and XEXTSC() * TX_DEDFORFTS / 100))

    @cache_result
    def XDFNC():
        """
        EXO Deduction forfaitaire de 10%
        From XDFNi
        """
        return min(PLAF_DEDFORFTS, XTPS10C())

    @cache_result
    def X10MINSC():
        """
        EXO deductions hors droits d'auteur plafonnees
        From X10MINSi
        """
        return max(min(XTSBC(), DEDMINC()), XDFNC())

    @cache_result
    def XDFC():
        """
        EXO Deductions forfaitaires des frais professionnels
        From XDFi
        """
        return X10MINSC()

    @cache_result
    def XIND_10C():
        """
        Indicateur d'affichage deduction 10% pour RFR
        From XIND_10i
        """
        return positif_ou_nul((X10MINSC() - saisie_variables.get('FRNC', 0)))

    @cache_result
    def XFPTC():
        """
        EXO deduction de 10% ou frais reels
        From XFPTi
        """
        return ((XDFC() and XDFC() * XIND_10C()) + (FRDC() and FRDC() * (1 - XIND_10C())))

    @cache_result
    def XTSNTC():
        """
        EXO salaires apres deduction des frais professionnels
        From XTSNTi
        """
        return (XEXTSC() - XFPTC())

    @cache_result
    def XTSNC():
        """
        EXO Traitements et salaires nets de frais
        From XTSNi
        """
        return ((positif(XTSNTC()) and positif(XTSNTC()) * min(0, XTSNTC())) + (positif_ou_nul(XTSNTC()) and positif_ou_nul(XTSNTC()) * XTSNTC()))

    @cache_result
    def XETSNNC():
        """
        EXO salaires normaux imposables - Conjoint detache a l etranger
        From XETSNNi
        """
        return ((arr((positif(XTSNC()) and XTSNC() and positif(XTSNC()) * XTSNC() * (saisie_variables.get('XETRANC', 0) and saisie_variables.get('XETRANC', 0) / XEXTSC()))) and arr((positif(XTSNC()) and XTSNC() and positif(XTSNC()) * XTSNC() * (saisie_variables.get('XETRANC', 0) and saisie_variables.get('XETRANC', 0) / XEXTSC()))) * XIND_10C()) + ((1 - XIND_10C()) and (1 - XIND_10C()) * saisie_variables.get('XETRANC', 0)))

    @cache_result
    def XEXOCETV():
        """
        EXO salaires CET verse perco imposables - Vous
        From XEXOCETi
        """
        return ((arr((positif(XTSNV()) and XTSNV() and positif(XTSNV()) * XTSNV() * (saisie_variables.get('EXOCETV', 0) and saisie_variables.get('EXOCETV', 0) / XEXTSV()))) and arr((positif(XTSNV()) and XTSNV() and positif(XTSNV()) * XTSNV() * (saisie_variables.get('EXOCETV', 0) and saisie_variables.get('EXOCETV', 0) / XEXTSV()))) * XIND_10V()) + ((1 - XIND_10V()) and (1 - XIND_10V()) * saisie_variables.get('EXOCETV', 0)))

    @cache_result
    def XEXOCETC():
        """
        EXO salaires CET verse perco imposables - Conjoint
        From XEXOCETi
        """
        return ((arr((positif(XTSNC()) and XTSNC() and positif(XTSNC()) * XTSNC() * (saisie_variables.get('EXOCETC', 0) and saisie_variables.get('EXOCETC', 0) / XEXTSC()))) and arr((positif(XTSNC()) and XTSNC() and positif(XTSNC()) * XTSNC() * (saisie_variables.get('EXOCETC', 0) and saisie_variables.get('EXOCETC', 0) / XEXTSC()))) * XIND_10C()) + ((1 - XIND_10C()) and (1 - XIND_10C()) * saisie_variables.get('EXOCETC', 0)))

    @cache_result
    def XTSNNV():
        """
        EXO salaires normaux hors droits d'auteur imposables - Vous
        From XTSNNi
        """
        return ((arr((positif(XTSNV()) and XTSNV() and positif(XTSNV()) * XTSNV() * (saisie_variables.get('TSASSUV', 0) and saisie_variables.get('TSASSUV', 0) / XEXTSV()))) and arr((positif(XTSNV()) and XTSNV() and positif(XTSNV()) * XTSNV() * (saisie_variables.get('TSASSUV', 0) and saisie_variables.get('TSASSUV', 0) / XEXTSV()))) * XIND_10V()) + ((1 - XIND_10V()) and (1 - XIND_10V()) * saisie_variables.get('TSASSUV', 0)))

    @cache_result
    def XTSNNC():
        """
        EXO salaires normaux hors droits d'auteur imposables - Cjt
        From XTSNNi
        """
        return ((arr((positif(XTSNC()) and XTSNC() and positif(XTSNC()) * XTSNC() * (saisie_variables.get('TSASSUC', 0) and saisie_variables.get('TSASSUC', 0) / XEXTSC()))) and arr((positif(XTSNC()) and XTSNC() and positif(XTSNC()) * XTSNC() * (saisie_variables.get('TSASSUC', 0) and saisie_variables.get('TSASSUC', 0) / XEXTSC()))) * XIND_10C()) + ((1 - XIND_10C()) and (1 - XIND_10C()) * saisie_variables.get('TSASSUC', 0)))

    # WARNING: the variable "XTSNNTYV" is used in a formula at least, but is not defined.
    def XTSNNTYV(): return 0
    # WARNING: the variable "XTSNNTYC" is used in a formula at least, but is not defined.
    def XTSNNTYC(): return 0
    # WARNING: the variable "XHSUPTSNN1" is used in a formula at least, but is not defined.
    def XHSUPTSNN1(): return 0
    # WARNING: the variable "XHSUPTSNN2" is used in a formula at least, but is not defined.
    def XHSUPTSNN2(): return 0
    # WARNING: the variable "XHSUPTSNN3" is used in a formula at least, but is not defined.
    def XHSUPTSNN3(): return 0
    # WARNING: the variable "XHSUPTSNN4" is used in a formula at least, but is not defined.
    def XHSUPTSNN4(): return 0
    # WARNING: the variable "XHSUPTSNNV" is used in a formula at least, but is not defined.
    def XHSUPTSNNV(): return 0
    # WARNING: the variable "XHSUPTSNNC" is used in a formula at least, but is not defined.
    def XHSUPTSNNC(): return 0
    @cache_result
    def XFORFAIT():
        """
        EXO revenus aux forfaits
        """
        return somme([saisie_variables.get('FEXV', 0), saisie_variables.get('FEXC', 0), saisie_variables.get('FEXP', 0)])

    # WARNING: the variable "XACCESSV" is used in a formula at least, but is not defined.
    def XACCESSV(): return 0
    # WARNING: the variable "XACCESSC" is used in a formula at least, but is not defined.
    def XACCESSC(): return 0
    # WARNING: the variable "XACCESSP" is used in a formula at least, but is not defined.
    def XACCESSP(): return 0
    @cache_result
    def XACCESS():
        """
        EXO revenus accessoires VOUS + CJT + PAC
        """
        return somme([XACCESSV(), XACCESSC(), XACCESSP()])

    @cache_result
    def TRCMRABD():
        """
        total refaction sur xDC
        """
        return (RCMRABD() + _2RCMRABD())

    @cache_result
    def TRCMRTNC():
        """
        total refaction sur xFU
        """
        return (RCMRTNC() + _2RCMRTNC())

    @cache_result
    def RCMEXCREF():
        """
        montant excedentaire de la refaction a reintegrer ds REVKIRE
        """
        return (max(0, (TRCMRABD() + TRCMRTNC())) and max(0, (TRCMRABD() + TRCMRTNC())) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))))

    @cache_result
    def XELU():
        """
        zone pour visual basic:SAJE : rev exo elus locaux
        """
        return (saisie_variables.get('ELURASC', 0) + saisie_variables.get('ELURASV', 0))

    @cache_result
    def PVTAUX():
        """
        Partie de PV a taux proportionnel 
        """
        return (saisie_variables.get('BPVSJ', 0) + saisie_variables.get('BPVSK', 0) + saisie_variables.get('BPV18V', 0) + saisie_variables.get('BPV18C', 0) + saisie_variables.get('BPCOPTV', 0) + saisie_variables.get('BPCOPTC', 0) + saisie_variables.get('BPV40V', 0) + saisie_variables.get('BPV40C', 0) + saisie_variables.get('PEA', 0) + saisie_variables.get('GAINPEA', 0))

    @cache_result
    def VARREVKIRE():
        """
        variable pour donnee commune Revenu de reference et HR
        """
        return (BPCAPTAXV() + BPCAPTAXC() + somme([(XBAV() + XBIPV() + XBINPV() + XBNV() + XBNNPV()), (XBAC() + XBIPC() + XBINPC() + XBNC() + XBNNPC()), (XBAP() + XBIPP() + XBINPP() + XBNP() + XBNNPP())]) + somme([(saisie_variables.get('MIBEXV', 0) + saisie_variables.get('MIBNPEXV', 0) + saisie_variables.get('BNCPROEXV', 0) + saisie_variables.get('XSPENPV', 0)), (saisie_variables.get('MIBEXC', 0) + saisie_variables.get('MIBNPEXC', 0) + saisie_variables.get('BNCPROEXC', 0) + saisie_variables.get('XSPENPC', 0)), (saisie_variables.get('MIBEXP', 0) + saisie_variables.get('MIBNPEXP', 0) + saisie_variables.get('BNCPROEXP', 0) + saisie_variables.get('XSPENPP', 0))]) + somme([saisie_variables.get('BNCCRV', 0), saisie_variables.get('BNCCRC', 0), saisie_variables.get('BNCCRP', 0)]) + somme([saisie_variables.get('BNCCRFV', 0), saisie_variables.get('BNCCRFC', 0), saisie_variables.get('BNCCRFP', 0)]) + somme([XETSNNV(), XETSNNC()]) + somme([XEXOCETV(), XEXOCETC()]) + somme([XTSNNV(), XTSNNC()]) + somme([XTSNNTYV(), XTSNNTYC()]) + somme([XHSUPTSNN1(), XHSUPTSNN2(), XHSUPTSNN3(), XHSUPTSNN4(), XHSUPTSNNV(), XHSUPTSNNC()]) + XFORFAIT() + XACCESS() + saisie_variables.get('RCMLIB', 0) + saisie_variables.get('PPLIB', 0) + saisie_variables.get('GAINABDET', 0) + RCMEXCREF() + RCM2FA() + XELU() + saisie_variables.get('RCMIMPAT', 0) + saisie_variables.get('PVIMMO', 0) + saisie_variables.get('PVMOBNR', 0) + saisie_variables.get('PVTITRESOC', 0) + BTP3A() + ((1 - positif(saisie_variables.get('IPVLOC', 0))) and (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))) and (1 - positif(saisie_variables.get('IPVLOC', 0))) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))) * PVTAUX()))

    @cache_result
    def REVKIRE():
        """
        Revenu de reference
        """
        return ((1 - null(saisie_variables.get('IND_TDR', 0))) and (1 - null(saisie_variables.get('IND_TDR', 0))) * arr(max(0, (((((1 - positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF()))) and (1 - positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF()))) * RI1RFR()) + (positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF())) and positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF())) * ((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS'])))) + (positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF())) and positif((TEFFN() - DRBG() - RNIDF() + ((APERPV() + APERPC() + APERPP()) and (APERPV() + APERPC() + APERPP()) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0))))))) + QUOKIRE())) and positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF())) * positif((TEFFN() - DRBG() - RNIDF() + ((APERPV() + APERPC() + APERPP()) and (APERPV() + APERPC() + APERPP()) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0))))))) + QUOKIRE())) * (((APERPV() + APERPC() + APERPP()) and (APERPV() + APERPC() + APERPP()) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0))))))) + QUOKIRE())) + (max(0, (TEFFREVTOTRFR() and TEFFREVTOTRFR() * INDTEFF())) and max(0, (TEFFREVTOTRFR() and TEFFREVTOTRFR() * INDTEFF())) * (1 - positif(((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))))))) and (((1 - positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF()))) and (1 - positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF()))) * RI1RFR()) + (positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF())) and positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF())) * ((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS'])))) + (positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF())) and positif((TEFFN() - DRBG() - RNIDF() + ((APERPV() + APERPC() + APERPP()) and (APERPV() + APERPC() + APERPP()) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0))))))) + QUOKIRE())) and positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF())) * positif((TEFFN() - DRBG() - RNIDF() + ((APERPV() + APERPC() + APERPP()) and (APERPV() + APERPC() + APERPP()) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0))))))) + QUOKIRE())) * (((APERPV() + APERPC() + APERPP()) and (APERPV() + APERPC() + APERPP()) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0))))))) + QUOKIRE())) + (max(0, (TEFFREVTOTRFR() and TEFFREVTOTRFR() * INDTEFF())) and max(0, (TEFFREVTOTRFR() and TEFFREVTOTRFR() * INDTEFF())) * (1 - positif(((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))))))) * (1 - present(saisie_variables.get('IND_TDR', 0)))) + saisie_variables.get('IND_TDR', 0) + ((1 - positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF()))) and (1 - positif((((max(0, (VARIPTEFP() - PVTXEFF())) and max(0, (VARIPTEFP() - PVTXEFF())) * positif(base_variables['ART1731BIS'])) + (max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) and max(0, (saisie_variables.get('IPTEFP', 0) - PVTXEFF())) * (1 - base_variables['ART1731BIS']))) + (((VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (VARIPTEFN() + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * positif(base_variables['ART1731BIS'])) + ((saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) and (saisie_variables.get('IPTEFN', 0) + (PVTXEFF() and PVTXEFF() * present(saisie_variables.get('IPTEFN', 0)))) * (1 - base_variables['ART1731BIS']))) + INDTEFF()))) * (QUOKIRE() + ((APERPV() + APERPC() + APERPP()) and (APERPV() + APERPC() + APERPP()) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0))))))))) + VARREVKIRE()))))

    @cache_result
    def PPE_DATE_FIN():
        """
        PPE:DATE DE FIN CALCULEE EN FONCTION DE X,Y,Z
        """
        return ((positif(BOOL_0AM()) and positif((saisie_variables.get('V_0AZ', 0) + 0)) and positif(BOOL_0AM()) * positif((saisie_variables.get('V_0AZ', 0) + 0)) * (saisie_variables.get('V_0AZ', 0) + 0)) + (positif((saisie_variables.get('DATDEPETR', 0) + 0)) and (saisie_variables.get('DATDEPETR', 0) + 0) and positif((saisie_variables.get('DATDEPETR', 0) + 0)) * (saisie_variables.get('DATDEPETR', 0) + 0) * null((saisie_variables.get('V_0AZ', 0) + 0))))

    @cache_result
    def PPE_FINJJMMMM():
        """
        PPE:VARIABLE DE TRAVAIL SUR LES DATES
        """
        return (PPE_DATE_FIN() + ((30120000 + saisie_variables.get('V_ANREV', 0)) and (30120000 + saisie_variables.get('V_ANREV', 0)) * null((PPE_DATE_FIN() + 0))))

    @cache_result
    def PPE_FINJJMM():
        """
        PPE:VARIABLE DE TRAVAIL SUR LES DATES
        """
        return arr(((PPE_FINJJMMMM() - saisie_variables.get('V_ANREV', 0)) and (PPE_FINJJMMMM() - saisie_variables.get('V_ANREV', 0)) / 10000))

    @cache_result
    def PPE_FINJJ():
        """
        PPE:VARIABLE DE TRAVAIL SUR LES DATES
        """
        return inf((PPE_FINJJMM() and PPE_FINJJMM() / 100))

    @cache_result
    def PPE_FINMM():
        """
        PPE:VARIABLE DE TRAVAIL SUR LES DATES
        """
        return (PPE_FINJJMM() - (PPE_FINJJ() and PPE_FINJJ() * 100))

    @cache_result
    def PPE_FINRANG():
        """
        PPE:VARIABLE DE TRAVAIL SUR LES DATES
        """
        return (PPE_FINJJ() + ((PPE_FINMM() - 1) and (PPE_FINMM() - 1) * 30) - (1 and 1 * positif(PPE_DATE_FIN())))

    @cache_result
    def PPE_FIN():
        """
        PPE:QUANTIEME DANS L ANNE :FIN DE PERIODE  
        """
        return PPE_FINRANG()

    @cache_result
    def PPE_DATE_DEB():
        """
        PPE:DATE DE DEBUT CALCULEE EN FONCTION DE X,Y,Z
        """
        return ((positif((saisie_variables.get('V_0AV', 0) + 0)) and positif((saisie_variables.get('V_0AZ', 0) + 0)) and positif((saisie_variables.get('V_0AV', 0) + 0)) * positif((saisie_variables.get('V_0AZ', 0) + 0)) * (saisie_variables.get('V_0AZ', 0) + 0)) + (positif((saisie_variables.get('DATRETETR', 0) + 0)) and (saisie_variables.get('DATRETETR', 0) + 0) and positif((saisie_variables.get('DATRETETR', 0) + 0)) * (saisie_variables.get('DATRETETR', 0) + 0) * null((saisie_variables.get('V_0AZ', 0) + 0))))

    @cache_result
    def PPE_DEBJJMMMM():
        """
        PPE:VARIABLE DE TRAVAIL SUR LES DATES
        """
        return (PPE_DATE_DEB() + ((1010000 + saisie_variables.get('V_ANREV', 0)) and (1010000 + saisie_variables.get('V_ANREV', 0)) * null((PPE_DATE_DEB() + 0))))

    @cache_result
    def PPE_DEBJJMM():
        """
        PPE:VARIABLE DE TRAVAIL SUR LES DATES
        """
        return arr(((PPE_DEBJJMMMM() - saisie_variables.get('V_ANREV', 0)) and (PPE_DEBJJMMMM() - saisie_variables.get('V_ANREV', 0)) / 10000))

    @cache_result
    def PPE_DEBJJ():
        """
        PPE:VARIABLE DE TRAVAIL SUR LES DATES
        """
        return inf((PPE_DEBJJMM() and PPE_DEBJJMM() / 100))

    @cache_result
    def PPE_DEBMM():
        """
        PPE:VARIABLE DE TRAVAIL SUR LES DATES
        """
        return (PPE_DEBJJMM() - (PPE_DEBJJ() and PPE_DEBJJ() * 100))

    @cache_result
    def PPE_DEBRANG():
        """
        PPE:VARIABLE DE TRAVAIL SUR LES DATES
        """
        return (PPE_DEBJJ() + ((PPE_DEBMM() - 1) and (PPE_DEBMM() - 1) * 30))

    @cache_result
    def PPE_DEBUT():
        """
        PPE:QUANTIEME DANS L ANNE :DEBUT DE PERIODE  
        """
        return PPE_DEBRANG()

    @cache_result
    def PPENBJ():
        """
        PPE:NOMBRE DE JOURS DE LA PERIODE
        """
        return max(1, arr(min(PPENBJAN, (PPE_FIN() - PPE_DEBUT() + 1))))

    @cache_result
    def PPE_KIRE():
        """
        PPE:CALCUL  REVENU FISCAL DE REFERENCE SUR LA PERIODE  
        """
        return (REVKIRE() and PPENBJAN and REVKIRE() * PPENBJAN / PPENBJ())

    @cache_result
    def PPE_BOOL_KIR_COND():
        """
        PPE:BOOLEEN CONDITION SUR LE REVENU KIR
        """
        return ((1 - null(saisie_variables.get('IND_TDR', 0))) and (1 - null(saisie_variables.get('IND_TDR', 0))) * positif_ou_nul((PPESEUILKIR() - PPE_KIRE())))

    @cache_result
    def PPE_BOOL_ACT_COND():
        """
        PPE:BOOLEEN CONDITION SUR L ACTIVITE  
        """
        return positif((positif(saisie_variables.get('TSHALLOV', 0)) + positif(saisie_variables.get('TSHALLOC', 0)) + positif(saisie_variables.get('TSHALLO1', 0)) + positif(saisie_variables.get('TSHALLO2', 0)) + positif(saisie_variables.get('TSHALLO3', 0)) + positif(saisie_variables.get('TSHALLO4', 0)) + positif(saisie_variables.get('GLD1V', 0)) + positif(saisie_variables.get('GLD2V', 0)) + positif(saisie_variables.get('GLD3V', 0)) + positif(saisie_variables.get('GLD1C', 0)) + positif(saisie_variables.get('GLD2C', 0)) + positif(saisie_variables.get('GLD3C', 0)) + positif(saisie_variables.get('BPCOSAV', 0)) + positif(saisie_variables.get('BPCOSAC', 0)) + positif(saisie_variables.get('TSASSUV', 0)) + positif(saisie_variables.get('TSASSUC', 0)) + (positif(saisie_variables.get('CARTSV', 0)) and positif(saisie_variables.get('CARTSV', 0)) * positif(saisie_variables.get('CARTSNBAV', 0))) + (positif(saisie_variables.get('CARTSC', 0)) and positif(saisie_variables.get('CARTSC', 0)) * positif(saisie_variables.get('CARTSNBAC', 0))) + (positif(saisie_variables.get('CARTSP1', 0)) and positif(saisie_variables.get('CARTSP1', 0)) * positif(saisie_variables.get('CARTSNBAP1', 0))) + (positif(saisie_variables.get('CARTSP2', 0)) and positif(saisie_variables.get('CARTSP2', 0)) * positif(saisie_variables.get('CARTSNBAP2', 0))) + (positif(saisie_variables.get('CARTSP3', 0)) and positif(saisie_variables.get('CARTSP3', 0)) * positif(saisie_variables.get('CARTSNBAP3', 0))) + (positif(saisie_variables.get('CARTSP4', 0)) and positif(saisie_variables.get('CARTSP4', 0)) * positif(saisie_variables.get('CARTSNBAP4', 0))) + positif(saisie_variables.get('FEXV', 0)) + positif(saisie_variables.get('BAFV', 0)) + positif(saisie_variables.get('BAFPVV', 0)) + positif(saisie_variables.get('BAEXV', 0)) + positif(saisie_variables.get('BACREV', 0)) + positif(saisie_variables.get('4BACREV', 0)) + positif((saisie_variables.get('BACDEV', 0) and saisie_variables.get('BACDEV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BAHEXV', 0)) + positif(saisie_variables.get('BAHREV', 0)) + positif(saisie_variables.get('4BAHREV', 0)) + positif((saisie_variables.get('BAHDEV', 0) and saisie_variables.get('BAHDEV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('MIBEXV', 0)) + positif(saisie_variables.get('MIBVENV', 0)) + positif(saisie_variables.get('MIBPRESV', 0)) + positif(saisie_variables.get('MIBPVV', 0)) + positif(saisie_variables.get('BICEXV', 0)) + positif(saisie_variables.get('BICNOV', 0)) + positif((saisie_variables.get('BICDNV', 0) and saisie_variables.get('BICDNV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BIHEXV', 0)) + positif(saisie_variables.get('BIHNOV', 0)) + positif((saisie_variables.get('BIHDNV', 0) and saisie_variables.get('BIHDNV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('FEXC', 0)) + positif(saisie_variables.get('BAFC', 0)) + positif(saisie_variables.get('BAFPVC', 0)) + positif(saisie_variables.get('BAEXC', 0)) + positif(saisie_variables.get('BACREC', 0)) + positif(saisie_variables.get('4BACREC', 0)) + positif((saisie_variables.get('BACDEC', 0) and saisie_variables.get('BACDEC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BAHEXC', 0)) + positif(saisie_variables.get('BAHREC', 0)) + positif(saisie_variables.get('4BAHREC', 0)) + positif((saisie_variables.get('BAHDEC', 0) and saisie_variables.get('BAHDEC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('MIBEXC', 0)) + positif(saisie_variables.get('MIBVENC', 0)) + positif(saisie_variables.get('MIBPRESC', 0)) + positif(saisie_variables.get('MIBPVC', 0)) + positif(saisie_variables.get('BICEXC', 0)) + positif(saisie_variables.get('BICNOC', 0)) + positif((saisie_variables.get('BICDNC', 0) and saisie_variables.get('BICDNC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BIHEXC', 0)) + positif(saisie_variables.get('BIHNOC', 0)) + positif((saisie_variables.get('BIHDNC', 0) and saisie_variables.get('BIHDNC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('FEXP', 0)) + positif(saisie_variables.get('BAFP', 0)) + positif(saisie_variables.get('BAFPVP', 0)) + positif(saisie_variables.get('BAEXP', 0)) + positif(saisie_variables.get('BACREP', 0)) + positif(saisie_variables.get('4BACREP', 0)) + positif((saisie_variables.get('BACDEP', 0) and saisie_variables.get('BACDEP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BAHEXP', 0)) + positif(saisie_variables.get('BAHREP', 0)) + positif(saisie_variables.get('4BAHREP', 0)) + positif((saisie_variables.get('BAHDEP', 0) and saisie_variables.get('BAHDEP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('MIBEXP', 0)) + positif(saisie_variables.get('MIBVENP', 0)) + positif(saisie_variables.get('MIBPRESP', 0)) + positif(saisie_variables.get('BICEXP', 0)) + positif(saisie_variables.get('MIBPVP', 0)) + positif(saisie_variables.get('BICNOP', 0)) + positif((saisie_variables.get('BICDNP', 0) and saisie_variables.get('BICDNP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BIHEXP', 0)) + positif(saisie_variables.get('BIHNOP', 0)) + positif((saisie_variables.get('BIHDNP', 0) and saisie_variables.get('BIHDNP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNCPROEXV', 0)) + positif(saisie_variables.get('BNCPROV', 0)) + positif(saisie_variables.get('BNCPROPVV', 0)) + positif(saisie_variables.get('BNCEXV', 0)) + positif(saisie_variables.get('BNCREV', 0)) + positif((saisie_variables.get('BNCDEV', 0) and saisie_variables.get('BNCDEV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNHEXV', 0)) + positif(saisie_variables.get('BNHREV', 0)) + positif((saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNCCRV', 0)) + positif(saisie_variables.get('BNCPROEXC', 0)) + positif(saisie_variables.get('BNCPROC', 0)) + positif(saisie_variables.get('BNCPROPVC', 0)) + positif(saisie_variables.get('BNCEXC', 0)) + positif(saisie_variables.get('BNCREC', 0)) + positif((saisie_variables.get('BNCDEC', 0) and saisie_variables.get('BNCDEC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNHEXC', 0)) + positif(saisie_variables.get('BNHREC', 0)) + positif((saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNCCRC', 0)) + positif(saisie_variables.get('BNCPROEXP', 0)) + positif(saisie_variables.get('BNCPROP', 0)) + positif(saisie_variables.get('BNCPROPVP', 0)) + positif(saisie_variables.get('BNCEXP', 0)) + positif(saisie_variables.get('BNCREP', 0)) + positif((saisie_variables.get('BNCDEP', 0) and saisie_variables.get('BNCDEP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNHEXP', 0)) + positif(saisie_variables.get('BNHREP', 0)) + positif((saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('BNCCRP', 0)) + positif(saisie_variables.get('BIPERPV', 0)) + positif(saisie_variables.get('BIPERPC', 0)) + positif(saisie_variables.get('BIPERPP', 0)) + positif(saisie_variables.get('BAFORESTV', 0)) + positif(saisie_variables.get('BAFORESTC', 0)) + positif(saisie_variables.get('BAFORESTP', 0)) + positif(saisie_variables.get('AUTOBICVV', 0)) + positif(saisie_variables.get('AUTOBICPV', 0)) + positif(saisie_variables.get('AUTOBNCV', 0)) + positif(saisie_variables.get('AUTOBICVC', 0)) + positif(saisie_variables.get('AUTOBICPC', 0)) + positif(saisie_variables.get('AUTOBNCC', 0)) + positif(saisie_variables.get('AUTOBICVP', 0)) + positif(saisie_variables.get('AUTOBICPP', 0)) + positif(saisie_variables.get('AUTOBNCP', 0)) + positif(saisie_variables.get('LOCPROCGAV', 0)) + positif(saisie_variables.get('LOCPROV', 0)) + positif((saisie_variables.get('LOCDEFPROCGAV', 0) and saisie_variables.get('LOCDEFPROCGAV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif((saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('LOCPROCGAC', 0)) + positif(saisie_variables.get('LOCPROC', 0)) + positif((saisie_variables.get('LOCDEFPROCGAC', 0) and saisie_variables.get('LOCDEFPROCGAC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif((saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('LOCPROCGAP', 0)) + positif(saisie_variables.get('LOCPROP', 0)) + positif((saisie_variables.get('LOCDEFPROCGAP', 0) and saisie_variables.get('LOCDEFPROCGAP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif((saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif(base_variables['ART1731BIS'])))) + positif(saisie_variables.get('XHONOAAV', 0)) + positif(saisie_variables.get('XHONOAAC', 0)) + positif(saisie_variables.get('XHONOAAP', 0)) + positif(saisie_variables.get('XHONOV', 0)) + positif(saisie_variables.get('XHONOC', 0)) + positif(saisie_variables.get('XHONOP', 0)) + positif(saisie_variables.get('GLDGRATV', 0)) + positif(saisie_variables.get('GLDGRATC', 0)) + positif(saisie_variables.get('CODDAJ', 0)) + positif(saisie_variables.get('CODEAJ', 0)) + positif(saisie_variables.get('CODDBJ', 0)) + positif(saisie_variables.get('CODEBJ', 0)) + positif(saisie_variables.get('SALEXTV', 0)) + positif(saisie_variables.get('SALEXTC', 0)) + positif(saisie_variables.get('SALEXT1', 0)) + positif(saisie_variables.get('SALEXT2', 0)) + positif(saisie_variables.get('SALEXT3', 0)) + positif(saisie_variables.get('SALEXT4', 0))))

    @cache_result
    def PPE_SALAVDEF1():
        """
        PPE:REVENUS D ACTIVITE SALARIALE avant imput des deficits PAC1
        """
        return (saisie_variables.get('TSHALLO1', 0) + (saisie_variables.get('CARTSP1', 0) and saisie_variables.get('CARTSP1', 0) * positif(saisie_variables.get('CARTSNBAP1', 0))) + saisie_variables.get('SALEXT1', 0))

    @cache_result
    def PPE_BOOL_SEULPAC():
        """
        PPE:BOOLEEN : 1 SEULE ET UNIQUE PAC AU FOYER
        """
        return null((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0) + saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0) - 1))

    @cache_result
    def PPESAL1():
        """
        PPE:REVENUS D ACTIVITE SALARIALE - PAC1-
        From PPESALi
        """
        return (PPE_SALAVDEF1() and PPE_SALAVDEF1() * (1 - PPE_BOOL_SEULPAC()))

    @cache_result
    def PPE_RTA1():
        """
        PPE:REVENU TOTAL ACTIVITE SAL ET NON SAL PAC1 
        From PPE_RTAi
        """
        return PPESAL1()

    @cache_result
    def PPE_BOOL_NADA1():
        """
        PPE:BOOLEEN pas de case cochee: pas de calcul de la PPE PAC1
        """
        return min(1, ((positif((saisie_variables.get('TSHALLO1', 0) + 0)) and null((saisie_variables.get('PPETPP1', 0) + 0)) and positif((saisie_variables.get('TSHALLO1', 0) + 0)) * null((saisie_variables.get('PPETPP1', 0) + 0)) * null((saisie_variables.get('PPENHP1', 0) + 0))) + (positif((saisie_variables.get('SALEXT1', 0) + 0)) and null((saisie_variables.get('PPETPP1', 0) + 0)) and positif((saisie_variables.get('SALEXT1', 0) + 0)) * null((saisie_variables.get('PPETPP1', 0) + 0)) * null((saisie_variables.get('PPEXT1', 0) + 0)))))

    @cache_result
    def PPE_BOOL_MIN1():
        """
        PPE:BOOLEEN: CONDITION REVENUS MINIMUM REQUISE PAC1 
        From PPE_BOOL_MINi
        """
        return (positif_ou_nul((PPE_RTA1() - PPELIMRPB)) and positif_ou_nul((PPE_RTA1() - PPELIMRPB)) * (1 - PPE_BOOL_NADA1()))

    @cache_result
    def PPE_BOOL_TP1():
        """
        PPE:BOOLEEN ACTIVITE A TEMPS PLEIN   PAC1
        From PPE_BOOL_TPi
        """
        return positif(((positif(saisie_variables.get('PPETPP1', 0)) and positif(saisie_variables.get('PPETPP1', 0)) * positif((PPE_SALAVDEF1() + 0))) + (null((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPEXT1', 0) + 0)) and null((saisie_variables.get('PPETPP1', 0) + 0)) and null((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPEXT1', 0) + 0)) * null((saisie_variables.get('PPETPP1', 0) + 0)) * positif(PPE_SALAVDEF1())) + positif_ou_nul(((360 and PPENBJ() and (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPEXT1', 0)) and 360 / PPENBJ() * (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPEXT1', 0)) * positif((PPE_SALAVDEF1() + 0))) - 1820))))

    @cache_result
    def PPE_COEFF1():
        """
        PPE:coefficient conversion ACTIVITE A TEMPS PLEIN  PAC1
        From PPE_COEFFi
        """
        return ((PPE_BOOL_TP1() and 360 and PPE_BOOL_TP1() * 360 / PPENBJ()) + ((1 - PPE_BOOL_TP1()) and (1 - PPE_BOOL_TP1()) / ((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPEXT1', 0)) and positif((PPE_SALAVDEF1() + 0)) and (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPEXT1', 0)) * positif((PPE_SALAVDEF1() + 0)) / 1820)))

    @cache_result
    def PPE_RCONTP1():
        """
        PPE:REVENU TOTAL reconverti/ temps plein  PAC1
        From PPE_RCONTPi
        """
        return arr((PPE_RTA1() and PPE_RTA1() * PPE_COEFF1()))

    @cache_result
    def PPE_BOOL_MAX1():
        """
        PPE:booleen condition revenus < seuil MAX) PAC1
        From PPE_BOOL_MAXi
        """
        return positif_ou_nul((PPELIMRPH - PPE_RCONTP1()))

    @cache_result
    def PPETX1():
        """
        PPE: taux 1 calcule a partir des constantes PPE_TX1 et PPE_FTX1
        """
        return PPE_TX1

    @cache_result
    def PPETX2():
        """
        PPE: taux 2 calcule a partir des constantes PPE_TX2 et PPE_FTX2
        """
        return PPE_TX2

    @cache_result
    def PPE_SALAVDEFV():
        """
        PPE:REVENUS D ACTIVITE SALARIALE avant imput des deficits VOUS
        """
        return (saisie_variables.get('TSHALLOV', 0) + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('GLD1V', 0) + saisie_variables.get('GLD2V', 0) + saisie_variables.get('GLD3V', 0) + saisie_variables.get('TSASSUV', 0) + (saisie_variables.get('CARTSV', 0) and saisie_variables.get('CARTSV', 0) * positif(saisie_variables.get('CARTSNBAV', 0))) + saisie_variables.get('CODDAJ', 0) + saisie_variables.get('CODEAJ', 0) + saisie_variables.get('SALEXTV', 0) + saisie_variables.get('GLDGRATV', 0))

    @cache_result
    def PPE_RPRO1V():
        """
        PPE:REVENU D ACTIVIE NON SALARIEE AVANT RAPPOR DE 1,1111 VOUS
        From PPE_RPRO1i
        """
        return (saisie_variables.get('FEXV', 0) + saisie_variables.get('BAFV', 0) + saisie_variables.get('BAEXV', 0) + saisie_variables.get('BACREV', 0) + saisie_variables.get('4BACREV', 0) - (saisie_variables.get('BACDEV', 0) and saisie_variables.get('BACDEV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BAHEXV', 0) + saisie_variables.get('BAHREV', 0) + saisie_variables.get('4BAHREV', 0) - (saisie_variables.get('BAHDEV', 0) and saisie_variables.get('BAHDEV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BICEXV', 0) + saisie_variables.get('BICNOV', 0) - (saisie_variables.get('BICDNV', 0) and saisie_variables.get('BICDNV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BIHEXV', 0) + saisie_variables.get('BIHNOV', 0) - (saisie_variables.get('BIHDNV', 0) and saisie_variables.get('BIHDNV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNCEXV', 0) + saisie_variables.get('BNCREV', 0) - (saisie_variables.get('BNCDEV', 0) and saisie_variables.get('BNCDEV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNHEXV', 0) + saisie_variables.get('BNHREV', 0) - (saisie_variables.get('BNHDEV', 0) and saisie_variables.get('BNHDEV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('MIBEXV', 0) + saisie_variables.get('BNCPROEXV', 0) + TMIB_NETVV() + TMIB_NETPV() + TSPENETPV() + saisie_variables.get('BAFPVV', 0) + saisie_variables.get('MIBPVV', 0) + saisie_variables.get('BNCPROPVV', 0) + saisie_variables.get('BAFORESTV', 0) + saisie_variables.get('LOCPROV', 0) + saisie_variables.get('LOCPROCGAV', 0) - (saisie_variables.get('LOCDEFPROCGAV', 0) and saisie_variables.get('LOCDEFPROCGAV', 0) * (1 - positif(base_variables['ART1731BIS']))) - (saisie_variables.get('LOCDEFPROV', 0) and saisie_variables.get('LOCDEFPROV', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('XHONOAAV', 0) + saisie_variables.get('XHONOV', 0))

    @cache_result
    def PPE_RPROV():
        """
        PPE:REVENU D ACTIVIE NON SALARIEE - VOUS  
        From PPE_RPROi
        """
        return ((positif(PPE_RPRO1V()) and positif(PPE_RPRO1V()) * arr(((1 + (PPETXRPRO and PPETXRPRO / 100)) and (1 + (PPETXRPRO and PPETXRPRO / 100)) * PPE_RPRO1V()))) + ((1 - positif(PPE_RPRO1V())) and (1 - positif(PPE_RPRO1V())) * arr((PPE_RPRO1V() and PPE_RPRO1V() * (1 - (PPETXRPRO and PPETXRPRO / 100))))))

    @cache_result
    def PPESALV():
        """
        PPE:REVENUS D ACTIVITE SALARIALE - VOUS
        From PPESALi
        """
        return (PPE_SALAVDEFV() + (PPE_RPROV() and PPE_RPROV() * (1 - positif(PPE_RPROV()))))

    @cache_result
    def PPE_RTAV():
        """
        PPE:REVENU TOTAL ACTIVITE SAL ET NON SAL VOUS  
        From PPE_RTAi
        """
        return max(0, (PPESALV() + (PPE_RPROV() and PPE_RPROV() * positif(PPE_RPROV()))))

    @cache_result
    def PPE_SALAVDEFC():
        """
        PPE:REVENUS D ACTIVITE SALARIALE avant imput des deficits CJT
        """
        return (saisie_variables.get('TSHALLOC', 0) + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('GLD1C', 0) + saisie_variables.get('GLD2C', 0) + saisie_variables.get('GLD3C', 0) + saisie_variables.get('TSASSUC', 0) + (saisie_variables.get('CARTSC', 0) and saisie_variables.get('CARTSC', 0) * positif(saisie_variables.get('CARTSNBAC', 0))) + saisie_variables.get('CODDBJ', 0) + saisie_variables.get('CODEBJ', 0) + saisie_variables.get('SALEXTC', 0) + saisie_variables.get('GLDGRATC', 0))

    @cache_result
    def PPE_RPRO1C():
        """
        PPE:REVENU D ACTIVIE NON SALARIEE AVANT RAPPOR DE 1,1111 CJT
        From PPE_RPRO1i
        """
        return (saisie_variables.get('FEXC', 0) + saisie_variables.get('BAFC', 0) + saisie_variables.get('BAEXC', 0) + saisie_variables.get('BACREC', 0) + saisie_variables.get('4BACREC', 0) - (saisie_variables.get('BACDEC', 0) and saisie_variables.get('BACDEC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BAHEXC', 0) + saisie_variables.get('BAHREC', 0) + saisie_variables.get('4BAHREC', 0) - (saisie_variables.get('BAHDEC', 0) and saisie_variables.get('BAHDEC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BICEXC', 0) + saisie_variables.get('BICNOC', 0) - (saisie_variables.get('BICDNC', 0) and saisie_variables.get('BICDNC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BIHEXC', 0) + saisie_variables.get('BIHNOC', 0) - (saisie_variables.get('BIHDNC', 0) and saisie_variables.get('BIHDNC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNCEXC', 0) + saisie_variables.get('BNCREC', 0) - (saisie_variables.get('BNCDEC', 0) and saisie_variables.get('BNCDEC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNHEXC', 0) + saisie_variables.get('BNHREC', 0) - (saisie_variables.get('BNHDEC', 0) and saisie_variables.get('BNHDEC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('MIBEXC', 0) + saisie_variables.get('BNCPROEXC', 0) + TMIB_NETVC() + TMIB_NETPC() + TSPENETPC() + saisie_variables.get('BAFPVC', 0) + saisie_variables.get('MIBPVC', 0) + saisie_variables.get('BNCPROPVC', 0) + saisie_variables.get('BAFORESTC', 0) + saisie_variables.get('LOCPROC', 0) + saisie_variables.get('LOCPROCGAC', 0) - (saisie_variables.get('LOCDEFPROCGAC', 0) and saisie_variables.get('LOCDEFPROCGAC', 0) * (1 - positif(base_variables['ART1731BIS']))) - (saisie_variables.get('LOCDEFPROC', 0) and saisie_variables.get('LOCDEFPROC', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('XHONOAAC', 0) + saisie_variables.get('XHONOC', 0))

    @cache_result
    def PPE_RPROC():
        """
        PPE:REVENU D ACTIVIE NON SALARIEE - CJT   
        From PPE_RPROi
        """
        return ((positif(PPE_RPRO1C()) and positif(PPE_RPRO1C()) * arr(((1 + (PPETXRPRO and PPETXRPRO / 100)) and (1 + (PPETXRPRO and PPETXRPRO / 100)) * PPE_RPRO1C()))) + ((1 - positif(PPE_RPRO1C())) and (1 - positif(PPE_RPRO1C())) * arr((PPE_RPRO1C() and PPE_RPRO1C() * (1 - (PPETXRPRO and PPETXRPRO / 100))))))

    @cache_result
    def PPESALC():
        """
        PPE:REVENUS D ACTIVITE SALARIALE - CJT
        From PPESALi
        """
        return (PPE_SALAVDEFC() + (PPE_RPROC() and PPE_RPROC() * (1 - positif(PPE_RPROC()))))

    @cache_result
    def PPE_RTAC():
        """
        PPE:REVENU TOTAL ACTIVITE SAL ET NON SAL CJT 
        From PPE_RTAi
        """
        return max(0, (PPESALC() + (PPE_RPROC() and PPE_RPROC() * positif(PPE_RPROC()))))

    @cache_result
    def INDMONO():
        """
        PPE: indicateur de foyer MONOACTIF
        """
        return (BOOL_0AM() and BOOL_0AM() * ((positif_ou_nul((PPE_RTAV() - PPELIMRPB)) and positif_ou_nul((PPE_RTAV() - PPELIMRPB)) * positif((PPELIMRPB - PPE_RTAC()))) + (positif_ou_nul((PPE_RTAC() - PPELIMRPB)) and positif_ou_nul((PPE_RTAC() - PPELIMRPB)) * positif((PPELIMRPB - PPE_RTAV())))))

    @cache_result
    def PPE_AVRPRO1V():
        """
        PPE:REV D ACT NON SALARIEE AVANT RAPPOR DE 1,1111 VOUS pr avis
        From PPE_AVRPRO1i
        """
        return (present(saisie_variables.get('FEXV', 0)) + present(saisie_variables.get('BAFV', 0)) + present(saisie_variables.get('BAEXV', 0)) + present(saisie_variables.get('BACREV', 0)) + present(saisie_variables.get('4BACREV', 0)) + present(saisie_variables.get('BACDEV', 0)) + present(saisie_variables.get('BAHEXV', 0)) + present(saisie_variables.get('BAHREV', 0)) + present(saisie_variables.get('4BAHREV', 0)) + present(saisie_variables.get('BAHDEV', 0)) + present(saisie_variables.get('BICEXV', 0)) + present(saisie_variables.get('BICNOV', 0)) + present(saisie_variables.get('BICDNV', 0)) + present(saisie_variables.get('BIHEXV', 0)) + present(saisie_variables.get('BIHNOV', 0)) + present(saisie_variables.get('BIHDNV', 0)) + present(saisie_variables.get('BNCEXV', 0)) + present(saisie_variables.get('BNCREV', 0)) + present(saisie_variables.get('BNCDEV', 0)) + present(saisie_variables.get('BNHEXV', 0)) + present(saisie_variables.get('BNHREV', 0)) + present(saisie_variables.get('BNHDEV', 0)) + present(saisie_variables.get('MIBEXV', 0)) + present(saisie_variables.get('BNCPROEXV', 0)) + present(saisie_variables.get('MIBVENV', 0)) + present(saisie_variables.get('MIBPRESV', 0)) + present(saisie_variables.get('BNCPROV', 0)) + present(saisie_variables.get('BAFPVV', 0)) + present(saisie_variables.get('MIBPVV', 0)) + present(saisie_variables.get('BNCPROPVV', 0)) + present(saisie_variables.get('BAFORESTV', 0)) + present(saisie_variables.get('AUTOBICVV', 0)) + present(saisie_variables.get('AUTOBICPV', 0)) + present(saisie_variables.get('AUTOBNCV', 0)) + present(saisie_variables.get('LOCPROV', 0)) + present(saisie_variables.get('LOCPROCGAV', 0)) + present(saisie_variables.get('LOCDEFPROCGAV', 0)) + present(saisie_variables.get('LOCDEFPROV', 0)) + present(saisie_variables.get('XHONOAAV', 0)) + present(saisie_variables.get('XHONOV', 0)))

    @cache_result
    def PPE_BOOL_TPV():
        """
        PPE:BOOLEEN ACTIVITE A TEMPS PLEIN  VOUS
        From PPE_BOOL_TPi
        """
        return positif(((positif((saisie_variables.get('PPETPV', 0) + 0)) and positif((saisie_variables.get('PPETPV', 0) + 0)) * positif((PPE_SALAVDEFV() + 0))) + (null((saisie_variables.get('PPENHV', 0) + saisie_variables.get('PPEXTV', 0) + 0)) and null((saisie_variables.get('PPETPV', 0) + 0)) and null((saisie_variables.get('PPENHV', 0) + saisie_variables.get('PPEXTV', 0) + 0)) * null((saisie_variables.get('PPETPV', 0) + 0)) * positif(PPE_SALAVDEFV())) + positif(((360 and PPENBJ() and 360 / PPENBJ() * (((saisie_variables.get('PPENHV', 0) + saisie_variables.get('PPEXTV', 0)) and positif((PPE_SALAVDEFV() + 0)) and (saisie_variables.get('PPENHV', 0) + saisie_variables.get('PPEXTV', 0)) * positif((PPE_SALAVDEFV() + 0)) / 1820) + (saisie_variables.get('PPENJV', 0) and positif((PPE_AVRPRO1V() + 0)) and saisie_variables.get('PPENJV', 0) * positif((PPE_AVRPRO1V() + 0)) / 360))) - 1)) + positif_ou_nul((((saisie_variables.get('PPENHV', 0) + saisie_variables.get('PPEXTV', 0)) and (saisie_variables.get('PPENHV', 0) + saisie_variables.get('PPEXTV', 0)) * positif((PPE_SALAVDEFV() + 0))) - 1820)) + positif_ou_nul(((saisie_variables.get('PPENJV', 0) and saisie_variables.get('PPENJV', 0) * positif((PPE_AVRPRO1V() + 0))) - 360)) + positif(((saisie_variables.get('PPEACV', 0) and saisie_variables.get('PPEACV', 0) * positif((PPE_AVRPRO1V() + 0))) + 0)) + ((1 - positif((saisie_variables.get('PPENJV', 0) and saisie_variables.get('PPENJV', 0) * positif((PPE_AVRPRO1V() + 0))))) and (1 - positif((saisie_variables.get('PPENJV', 0) and saisie_variables.get('PPENJV', 0) * positif((PPE_AVRPRO1V() + 0))))) * positif((PPE_AVRPRO1V() + 0)))))

    @cache_result
    def PPE_COEFFV():
        """
        PPE:coefficient conversion ACTIVITE A TEMPS PLEIN   vous
        From PPE_COEFFi
        """
        return ((PPE_BOOL_TPV() and 360 and PPE_BOOL_TPV() * 360 / PPENBJ()) + ((1 - PPE_BOOL_TPV()) and (1 - PPE_BOOL_TPV()) / (((saisie_variables.get('PPENHV', 0) + saisie_variables.get('PPEXTV', 0)) and positif((PPE_SALAVDEFV() + 0)) and (saisie_variables.get('PPENHV', 0) + saisie_variables.get('PPEXTV', 0)) * positif((PPE_SALAVDEFV() + 0)) / 1820) + (saisie_variables.get('PPENJV', 0) and positif((PPE_AVRPRO1V() + 0)) and saisie_variables.get('PPENJV', 0) * positif((PPE_AVRPRO1V() + 0)) / 360))))

    @cache_result
    def PPE_RCONTPV():
        """
        PPE:REVENU TOTAL reconverti/ temps plein    VOUS
        From PPE_RCONTPi
        """
        return arr((PPE_RTAV() and PPE_RTAV() * PPE_COEFFV()))

    @cache_result
    def PPE_AVRPRO1C():
        """
        PPE:REV D ACT NON SALARIEE AVANT RAPPOR DE 1,1111 CJT pr avis
        From PPE_AVRPRO1i
        """
        return (present(saisie_variables.get('FEXC', 0)) + present(saisie_variables.get('BAFC', 0)) + present(saisie_variables.get('BAEXC', 0)) + present(saisie_variables.get('BACREC', 0)) + present(saisie_variables.get('4BACREC', 0)) + present(saisie_variables.get('BACDEC', 0)) + present(saisie_variables.get('BAHEXC', 0)) + present(saisie_variables.get('BAHREC', 0)) + present(saisie_variables.get('4BAHREC', 0)) + present(saisie_variables.get('BAHDEC', 0)) + present(saisie_variables.get('BICEXC', 0)) + present(saisie_variables.get('BICNOC', 0)) + present(saisie_variables.get('BICDNC', 0)) + present(saisie_variables.get('BIHEXC', 0)) + present(saisie_variables.get('BIHNOC', 0)) + present(saisie_variables.get('BIHDNC', 0)) + present(saisie_variables.get('BNCEXC', 0)) + present(saisie_variables.get('BNCREC', 0)) + present(saisie_variables.get('BNCDEC', 0)) + present(saisie_variables.get('BNHEXC', 0)) + present(saisie_variables.get('BNHREC', 0)) + present(saisie_variables.get('BNHDEC', 0)) + present(saisie_variables.get('MIBEXC', 0)) + present(saisie_variables.get('BNCPROEXC', 0)) + present(saisie_variables.get('MIBVENC', 0)) + present(saisie_variables.get('MIBPRESC', 0)) + present(saisie_variables.get('BNCPROC', 0)) + present(saisie_variables.get('BAFPVC', 0)) + present(saisie_variables.get('MIBPVC', 0)) + present(saisie_variables.get('BNCPROPVC', 0)) + present(saisie_variables.get('BAFORESTC', 0)) + present(saisie_variables.get('AUTOBICVC', 0)) + present(saisie_variables.get('AUTOBICPC', 0)) + present(saisie_variables.get('AUTOBNCC', 0)) + present(saisie_variables.get('LOCPROC', 0)) + present(saisie_variables.get('LOCPROCGAC', 0)) + present(saisie_variables.get('LOCDEFPROCGAC', 0)) + present(saisie_variables.get('LOCDEFPROC', 0)) + present(saisie_variables.get('XHONOAAC', 0)) + present(saisie_variables.get('XHONOC', 0)))

    @cache_result
    def PPE_BOOL_TPC():
        """
        PPE:BOOLEEN ACTIVITE A TEMPS PLEIN  CJT
        From PPE_BOOL_TPi
        """
        return positif(((positif((saisie_variables.get('PPETPC', 0) + 0)) and positif((saisie_variables.get('PPETPC', 0) + 0)) * positif((PPE_SALAVDEFC() + 0))) + (null((saisie_variables.get('PPENHC', 0) + saisie_variables.get('PPEXTC', 0) + 0)) and null((saisie_variables.get('PPETPC', 0) + 0)) and null((saisie_variables.get('PPENHC', 0) + saisie_variables.get('PPEXTC', 0) + 0)) * null((saisie_variables.get('PPETPC', 0) + 0)) * positif(PPE_SALAVDEFC())) + positif(((360 and PPENBJ() and 360 / PPENBJ() * (((saisie_variables.get('PPENHC', 0) + saisie_variables.get('PPEXTC', 0)) and positif((PPE_SALAVDEFC() + 0)) and (saisie_variables.get('PPENHC', 0) + saisie_variables.get('PPEXTC', 0)) * positif((PPE_SALAVDEFC() + 0)) / 1820) + (saisie_variables.get('PPENJC', 0) and positif((PPE_AVRPRO1C() + 0)) and saisie_variables.get('PPENJC', 0) * positif((PPE_AVRPRO1C() + 0)) / 360))) - 1)) + positif_ou_nul((((saisie_variables.get('PPENHC', 0) + saisie_variables.get('PPEXTC', 0)) and (saisie_variables.get('PPENHC', 0) + saisie_variables.get('PPEXTC', 0)) * positif((PPE_SALAVDEFC() + 0))) - 1820)) + positif_ou_nul(((saisie_variables.get('PPENJC', 0) and saisie_variables.get('PPENJC', 0) * positif((PPE_AVRPRO1C() + 0))) - 360)) + positif(((saisie_variables.get('PPEACC', 0) and saisie_variables.get('PPEACC', 0) * positif((PPE_AVRPRO1C() + 0))) + 0)) + ((1 - positif((saisie_variables.get('PPENJC', 0) and saisie_variables.get('PPENJC', 0) * positif((PPE_AVRPRO1C() + 0))))) and (1 - positif((saisie_variables.get('PPENJC', 0) and saisie_variables.get('PPENJC', 0) * positif((PPE_AVRPRO1C() + 0))))) * positif((PPE_AVRPRO1C() + 0)))))

    @cache_result
    def PPE_COEFFC():
        """
        PPE:coefficient conversion ACTIVITE A TEMPS PLEIN   cjt
        From PPE_COEFFi
        """
        return ((PPE_BOOL_TPC() and 360 and PPE_BOOL_TPC() * 360 / PPENBJ()) + ((1 - PPE_BOOL_TPC()) and (1 - PPE_BOOL_TPC()) / (((saisie_variables.get('PPENHC', 0) + saisie_variables.get('PPEXTC', 0)) and positif((PPE_SALAVDEFC() + 0)) and (saisie_variables.get('PPENHC', 0) + saisie_variables.get('PPEXTC', 0)) * positif((PPE_SALAVDEFC() + 0)) / 1820) + (saisie_variables.get('PPENJC', 0) and positif((PPE_AVRPRO1C() + 0)) and saisie_variables.get('PPENJC', 0) * positif((PPE_AVRPRO1C() + 0)) / 360))))

    @cache_result
    def PPE_RCONTPC():
        """
        PPE:REVENU TOTAL reconverti/ temps plein    CJT
        From PPE_RCONTPi
        """
        return arr((PPE_RTAC() and PPE_RTAC() * PPE_COEFFC()))

    @cache_result
    def PPE_HAUTE():
        """
        PPE:CALCUL DE LA LIMITE HAUTE SUIVANT LA SIF  
        """
        return ((PPELIMRPH and PPELIMRPH * (1 - BOOL_0AM())) + (PPELIMRPH and BOOL_0AM() and null(INDMONO()) and positif_ou_nul((PPE_RCONTPV() - PPELIMRPB)) and PPELIMRPH * BOOL_0AM() * null(INDMONO()) * positif_ou_nul((PPE_RCONTPV() - PPELIMRPB)) * positif_ou_nul((PPE_RCONTPC() - PPELIMRPB))) + (PPELIMRPH2 and PPELIMRPH2 * INDMONO()))

    @cache_result
    def PPETX3():
        """
        PPE: taux 3 calcule a partir des constantes PPE_TX3 et PPE_FTX3
        """
        return PPE_TX3

    @cache_result
    def PPE_FORMULE1():
        """
        PPE: formule generique de calcul de la prime 1 ere   PAC
        From PPE_FORMULEi
        """
        return (PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN1() and PPE_BOOL_MAX1() and PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN1() * PPE_BOOL_MAX1() * arr(((positif_ou_nul((PPELIMSMIC - PPE_RCONTP1())) and arr((PPE_RCONTP1() and PPETX1() and PPE_RCONTP1() * PPETX1() / 100)) and positif_ou_nul((PPELIMSMIC - PPE_RCONTP1())) * arr((PPE_RCONTP1() and PPETX1() and PPE_RCONTP1() * PPETX1() / 100)) / PPE_COEFF1()) + (positif((PPE_RCONTP1() - PPELIMSMIC)) and positif_ou_nul((PPELIMRPH - PPE_RCONTP1())) and positif((PPE_RCONTP1() - PPELIMSMIC)) * positif_ou_nul((PPELIMRPH - PPE_RCONTP1())) * arr((arr(((PPELIMRPH - PPE_RCONTP1()) and PPETX2() and (PPELIMRPH - PPE_RCONTP1()) * PPETX2() / 100)) and arr(((PPELIMRPH - PPE_RCONTP1()) and PPETX2() and (PPELIMRPH - PPE_RCONTP1()) * PPETX2() / 100)) / PPE_COEFF1()))) + (positif((PPE_RCONTP1() - PPELIMRPHI)) and positif_ou_nul((PPE_HAUTE() - PPE_RCONTP1())) and positif((PPE_RCONTP1() - PPELIMRPHI)) * positif_ou_nul((PPE_HAUTE() - PPE_RCONTP1())) * arr((arr(((PPELIMRPH2 - PPE_RCONTP1()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTP1()) * PPETX3() / 100)) and arr(((PPELIMRPH2 - PPE_RCONTP1()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTP1()) * PPETX3() / 100)) / PPE_COEFF1()))))))

    @cache_result
    def PPE_AVRPRO1P():
        """
        PPE:REV D ACT NON SALARIEE AVANT RAPPOR DE 1,1111 PAC pr avis
        From PPE_AVRPRO1i
        """
        return (present(saisie_variables.get('FEXP', 0)) + present(saisie_variables.get('BAFP', 0)) + present(saisie_variables.get('BAEXP', 0)) + present(saisie_variables.get('BACREP', 0)) + present(saisie_variables.get('4BACREP', 0)) + present(saisie_variables.get('BACDEP', 0)) + present(saisie_variables.get('BAHEXP', 0)) + present(saisie_variables.get('BAHREP', 0)) + present(saisie_variables.get('4BAHREP', 0)) + present(saisie_variables.get('BAHDEP', 0)) + present(saisie_variables.get('BICEXP', 0)) + present(saisie_variables.get('BICNOP', 0)) + present(saisie_variables.get('BICDNP', 0)) + present(saisie_variables.get('BIHEXP', 0)) + present(saisie_variables.get('BIHNOP', 0)) + present(saisie_variables.get('BIHDNP', 0)) + present(saisie_variables.get('BNCEXP', 0)) + present(saisie_variables.get('BNCREP', 0)) + present(saisie_variables.get('BNCDEP', 0)) + present(saisie_variables.get('BNHEXP', 0)) + present(saisie_variables.get('BNHREP', 0)) + present(saisie_variables.get('BNHDEP', 0)) + present(saisie_variables.get('MIBEXP', 0)) + present(saisie_variables.get('BNCPROEXP', 0)) + present(saisie_variables.get('MIBVENP', 0)) + present(saisie_variables.get('MIBPRESP', 0)) + present(saisie_variables.get('BNCPROP', 0)) + present(saisie_variables.get('BAFPVP', 0)) + present(saisie_variables.get('MIBPVP', 0)) + present(saisie_variables.get('BNCPROPVP', 0)) + present(saisie_variables.get('BAFORESTP', 0)) + present(saisie_variables.get('AUTOBICVP', 0)) + present(saisie_variables.get('AUTOBICPP', 0)) + present(saisie_variables.get('AUTOBNCP', 0)) + present(saisie_variables.get('LOCPROP', 0)) + present(saisie_variables.get('LOCPROCGAP', 0)) + present(saisie_variables.get('LOCDEFPROCGAP', 0)) + present(saisie_variables.get('LOCDEFPROP', 0)) + present(saisie_variables.get('XHONOAAP', 0)) + present(saisie_variables.get('XHONOP', 0)))

    @cache_result
    def PPE_COEFFCOND1():
        """
        PPE:coefficient condition dans regle 30620 : PAC 1
        From PPE_COEFFCONDi
        """
        return ((1 - PPE_BOOL_TP1()) and (1 - PPE_BOOL_TP1()) * ((null((PPENBJ() - 360)) and null((PPENBJ() - 360)) * PPE_COEFF1()) + ((1 - null((PPENBJ() - 360))) and (1 - null((PPENBJ() - 360))) * (PPENBJ() and 1820 and 360 and PPENBJ() * 1820 / 360 / (((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPEXT1', 0)) and (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPEXT1', 0)) * positif((PPE_SALAVDEF1() + 0))) + (saisie_variables.get('PPENJP', 0) and positif((PPE_AVRPRO1P() + 0)) and 1820 and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0)) * 1820 / 360))))))

    @cache_result
    def PPENARPRIME1():
        """
        AVIS 2000:PPE:calcul non arrondi PRIME TOUTE ACTIVITE - PAC1
        From PPENARPRIMEi
        """
        return ((PPE_FORMULE1() and (1 + PPETXMAJ2) and positif_ou_nul((PPE_COEFFCOND1() - 2)) and PPE_FORMULE1() * (1 + PPETXMAJ2) * positif_ou_nul((PPE_COEFFCOND1() - 2)) * (1 - PPE_BOOL_TP1())) + ((arr((PPE_FORMULE1() and PPE_FORMULE1() * PPETXMAJ1)) + arr((PPE_FORMULE1() and PPE_FORMULE1() * (PPE_COEFF1() and PPE_COEFF1() * PPETXMAJ2)))) and positif((2 - PPE_COEFFCOND1())) and positif((PPE_COEFFCOND1() - 1)) and (arr((PPE_FORMULE1() and PPE_FORMULE1() * PPETXMAJ1)) + arr((PPE_FORMULE1() and PPE_FORMULE1() * (PPE_COEFF1() and PPE_COEFF1() * PPETXMAJ2)))) * positif((2 - PPE_COEFFCOND1())) * positif((PPE_COEFFCOND1() - 1)) * (1 - PPE_BOOL_TP1())) + (PPE_FORMULE1() and PPE_FORMULE1() * positif((PPE_BOOL_TP1() + positif_ou_nul((1 - PPE_COEFFCOND1()))))))

    @cache_result
    def PPE_SALAVDEF2():
        """
        PPE:REVENUS D ACTIVITE SALARIALE avant imput des deficits PAC2
        """
        return (saisie_variables.get('TSHALLO2', 0) + (saisie_variables.get('CARTSP2', 0) and saisie_variables.get('CARTSP2', 0) * positif(saisie_variables.get('CARTSNBAP2', 0))) + saisie_variables.get('SALEXT2', 0))

    @cache_result
    def PPESAL2():
        """
        PPE:REVENUS D ACTIVITE SALARIALE - PAC2
        From PPESALi
        """
        return (PPE_SALAVDEF2() and PPE_SALAVDEF2() * (1 - PPE_BOOL_SEULPAC()))

    @cache_result
    def PPE_RTA2():
        """
        PPE:REVENU TOTAL ACTIVITE SAL ET NON SAL PAC2 
        From PPE_RTAi
        """
        return PPESAL2()

    @cache_result
    def PPE_BOOL_NADA2():
        """
        PPE:BOOLEEN pas de case cochee: pas de calcul de la PPE PAC2
        """
        return min(1, ((positif((saisie_variables.get('TSHALLO2', 0) + 0)) and null((saisie_variables.get('PPETPP2', 0) + 0)) and positif((saisie_variables.get('TSHALLO2', 0) + 0)) * null((saisie_variables.get('PPETPP2', 0) + 0)) * null((saisie_variables.get('PPENHP2', 0) + 0))) + (positif((saisie_variables.get('SALEXT2', 0) + 0)) and null((saisie_variables.get('PPETPP2', 0) + 0)) and positif((saisie_variables.get('SALEXT2', 0) + 0)) * null((saisie_variables.get('PPETPP2', 0) + 0)) * null((saisie_variables.get('PPEXT2', 0) + 0)))))

    @cache_result
    def PPE_BOOL_MIN2():
        """
        PPE:BOOLEEN: CONDITION REVENUS MINIMUM REQUISE PAC2 
        From PPE_BOOL_MINi
        """
        return (positif_ou_nul((PPE_RTA2() - PPELIMRPB)) and positif_ou_nul((PPE_RTA2() - PPELIMRPB)) * (1 - PPE_BOOL_NADA2()))

    @cache_result
    def PPE_BOOL_TP2():
        """
        PPE:BOOLEEN ACTIVITE A TEMPS PLEIN   PAC2
        From PPE_BOOL_TPi
        """
        return positif(((positif(saisie_variables.get('PPETPP2', 0)) and positif(saisie_variables.get('PPETPP2', 0)) * positif((PPE_SALAVDEF2() + 0))) + (null((saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPEXT2', 0) + 0)) and null((saisie_variables.get('PPETPP2', 0) + 0)) and null((saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPEXT2', 0) + 0)) * null((saisie_variables.get('PPETPP2', 0) + 0)) * positif(PPE_SALAVDEF2())) + positif_ou_nul(((360 and PPENBJ() and (saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPEXT2', 0)) and 360 / PPENBJ() * (saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPEXT2', 0)) * positif((PPE_SALAVDEF2() + 0))) - 1820))))

    @cache_result
    def PPE_COEFF2():
        """
        PPE:coefficient conversion ACTIVITE A TEMPS PLEIN  PAC2
        From PPE_COEFFi
        """
        return ((PPE_BOOL_TP2() and 360 and PPE_BOOL_TP2() * 360 / PPENBJ()) + ((1 - PPE_BOOL_TP2()) and (1 - PPE_BOOL_TP2()) / ((saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPEXT2', 0)) and positif((PPE_SALAVDEF2() + 0)) and (saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPEXT2', 0)) * positif((PPE_SALAVDEF2() + 0)) / 1820)))

    @cache_result
    def PPE_RCONTP2():
        """
        PPE:REVENU TOTAL reconverti/ temps plein  PAC2
        From PPE_RCONTPi
        """
        return arr((PPE_RTA2() and PPE_RTA2() * PPE_COEFF2()))

    @cache_result
    def PPE_BOOL_MAX2():
        """
        PPE:booleen condition revenus < seuil MAX) PAC2
        From PPE_BOOL_MAXi
        """
        return positif_ou_nul((PPELIMRPH - PPE_RCONTP2()))

    @cache_result
    def PPE_FORMULE2():
        """
        PPE: formule generique de calcul de la prime   2 eme PAC
        From PPE_FORMULEi
        """
        return (PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN2() and PPE_BOOL_MAX2() and PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN2() * PPE_BOOL_MAX2() * arr(((positif_ou_nul((PPELIMSMIC - PPE_RCONTP2())) and arr((PPE_RCONTP2() and PPETX1() and PPE_RCONTP2() * PPETX1() / 100)) and positif_ou_nul((PPELIMSMIC - PPE_RCONTP2())) * arr((PPE_RCONTP2() and PPETX1() and PPE_RCONTP2() * PPETX1() / 100)) / PPE_COEFF2()) + (positif((PPE_RCONTP2() - PPELIMSMIC)) and positif_ou_nul((PPELIMRPH - PPE_RCONTP2())) and positif((PPE_RCONTP2() - PPELIMSMIC)) * positif_ou_nul((PPELIMRPH - PPE_RCONTP2())) * arr((arr(((PPELIMRPH - PPE_RCONTP2()) and PPETX2() and (PPELIMRPH - PPE_RCONTP2()) * PPETX2() / 100)) and arr(((PPELIMRPH - PPE_RCONTP2()) and PPETX2() and (PPELIMRPH - PPE_RCONTP2()) * PPETX2() / 100)) / PPE_COEFF2()))) + (positif((PPE_RCONTP2() - PPELIMRPHI)) and positif_ou_nul((PPE_HAUTE() - PPE_RCONTP2())) and positif((PPE_RCONTP2() - PPELIMRPHI)) * positif_ou_nul((PPE_HAUTE() - PPE_RCONTP2())) * arr((arr(((PPELIMRPH2 - PPE_RCONTP2()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTP2()) * PPETX3() / 100)) and arr(((PPELIMRPH2 - PPE_RCONTP2()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTP2()) * PPETX3() / 100)) / PPE_COEFF2()))))))

    @cache_result
    def PPE_COEFFCOND2():
        """
        PPE:coefficient condition dans regle 30620 : PAC 2
        From PPE_COEFFCONDi
        """
        return ((1 - PPE_BOOL_TP2()) and (1 - PPE_BOOL_TP2()) * ((null((PPENBJ() - 360)) and null((PPENBJ() - 360)) * PPE_COEFF2()) + ((1 - null((PPENBJ() - 360))) and (1 - null((PPENBJ() - 360))) * (PPENBJ() and 1820 and 360 and PPENBJ() * 1820 / 360 / (((saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPEXT2', 0)) and (saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPEXT2', 0)) * positif((PPE_SALAVDEF2() + 0))) + (saisie_variables.get('PPENJP', 0) and positif((PPE_AVRPRO1P() + 0)) and 1820 and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0)) * 1820 / 360))))))

    @cache_result
    def PPENARPRIME2():
        """
        AVIS 2000:PPE:calcul non arrondi PRIME TOUTE ACTIVITE - PAC2
        From PPENARPRIMEi
        """
        return ((PPE_FORMULE2() and (1 + PPETXMAJ2) and positif_ou_nul((PPE_COEFFCOND2() - 2)) and PPE_FORMULE2() * (1 + PPETXMAJ2) * positif_ou_nul((PPE_COEFFCOND2() - 2)) * (1 - PPE_BOOL_TP2())) + ((arr((PPE_FORMULE2() and PPE_FORMULE2() * PPETXMAJ1)) + arr((PPE_FORMULE2() and PPE_FORMULE2() * (PPE_COEFF2() and PPE_COEFF2() * PPETXMAJ2)))) and positif((2 - PPE_COEFFCOND2())) and positif((PPE_COEFFCOND2() - 1)) and (arr((PPE_FORMULE2() and PPE_FORMULE2() * PPETXMAJ1)) + arr((PPE_FORMULE2() and PPE_FORMULE2() * (PPE_COEFF2() and PPE_COEFF2() * PPETXMAJ2)))) * positif((2 - PPE_COEFFCOND2())) * positif((PPE_COEFFCOND2() - 1)) * (1 - PPE_BOOL_TP2())) + (PPE_FORMULE2() and PPE_FORMULE2() * positif((PPE_BOOL_TP2() + positif_ou_nul((1 - PPE_COEFFCOND2()))))))

    @cache_result
    def PPE_SALAVDEF3():
        """
        PPE:REVENUS D ACTIVITE SALARIALE avant imput des deficits PAC3
        """
        return (saisie_variables.get('TSHALLO3', 0) + (saisie_variables.get('CARTSP3', 0) and saisie_variables.get('CARTSP3', 0) * positif(saisie_variables.get('CARTSNBAP3', 0))) + saisie_variables.get('SALEXT3', 0))

    @cache_result
    def PPESAL3():
        """
        PPE:REVENUS D ACTIVITE SALARIALE - PAC3
        From PPESALi
        """
        return (PPE_SALAVDEF3() and PPE_SALAVDEF3() * (1 - PPE_BOOL_SEULPAC()))

    @cache_result
    def PPE_RTA3():
        """
        PPE:REVENU TOTAL ACTIVITE SAL ET NON SAL PAC3 
        From PPE_RTAi
        """
        return PPESAL3()

    @cache_result
    def PPE_BOOL_NADA3():
        """
        PPE:BOOLEEN pas de case cochee: pas de calcul de la PPE PAC3
        """
        return min(1, ((positif((saisie_variables.get('TSHALLO3', 0) + 0)) and null((saisie_variables.get('PPETPP3', 0) + 0)) and positif((saisie_variables.get('TSHALLO3', 0) + 0)) * null((saisie_variables.get('PPETPP3', 0) + 0)) * null((saisie_variables.get('PPENHP3', 0) + 0))) + (positif((saisie_variables.get('SALEXT3', 0) + 0)) and null((saisie_variables.get('PPETPP3', 0) + 0)) and positif((saisie_variables.get('SALEXT3', 0) + 0)) * null((saisie_variables.get('PPETPP3', 0) + 0)) * null((saisie_variables.get('PPEXT3', 0) + 0)))))

    @cache_result
    def PPE_BOOL_MIN3():
        """
        PPE:BOOLEEN: CONDITION REVENUS MINIMUM REQUISE PAC3 
        From PPE_BOOL_MINi
        """
        return (positif_ou_nul((PPE_RTA3() - PPELIMRPB)) and positif_ou_nul((PPE_RTA3() - PPELIMRPB)) * (1 - PPE_BOOL_NADA3()))

    @cache_result
    def PPE_BOOL_TP3():
        """
        PPE:BOOLEEN ACTIVITE A TEMPS PLEIN   PAC3
        From PPE_BOOL_TPi
        """
        return positif(((positif(saisie_variables.get('PPETPP3', 0)) and positif(saisie_variables.get('PPETPP3', 0)) * positif((PPE_SALAVDEF3() + 0))) + (null((saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPEXT3', 0) + 0)) and null((saisie_variables.get('PPETPP3', 0) + 0)) and null((saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPEXT3', 0) + 0)) * null((saisie_variables.get('PPETPP3', 0) + 0)) * positif(PPE_SALAVDEF3())) + positif_ou_nul(((360 and PPENBJ() and (saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPEXT3', 0)) and 360 / PPENBJ() * (saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPEXT3', 0)) * positif((PPE_SALAVDEF3() + 0))) - 1820))))

    @cache_result
    def PPE_COEFF3():
        """
        PPE:coefficient conversion ACTIVITE A TEMPS PLEIN  PAC3
        From PPE_COEFFi
        """
        return ((PPE_BOOL_TP3() and 360 and PPE_BOOL_TP3() * 360 / PPENBJ()) + ((1 - PPE_BOOL_TP3()) and (1 - PPE_BOOL_TP3()) / ((saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPEXT3', 0)) and positif((PPE_SALAVDEF3() + 0)) and (saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPEXT3', 0)) * positif((PPE_SALAVDEF3() + 0)) / 1820)))

    @cache_result
    def PPE_RCONTP3():
        """
        PPE:REVENU TOTAL reconverti/ temps plein  PAC3
        From PPE_RCONTPi
        """
        return arr((PPE_RTA3() and PPE_RTA3() * PPE_COEFF3()))

    @cache_result
    def PPE_BOOL_MAX3():
        """
        PPE:booleen condition revenus < seuil MAX) PAC3
        From PPE_BOOL_MAXi
        """
        return positif_ou_nul((PPELIMRPH - PPE_RCONTP3()))

    @cache_result
    def PPE_FORMULE3():
        """
        PPE: formule generique de calcul de la prime   3 eme PAC
        From PPE_FORMULEi
        """
        return (PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN3() and PPE_BOOL_MAX3() and PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN3() * PPE_BOOL_MAX3() * arr(((positif_ou_nul((PPELIMSMIC - PPE_RCONTP3())) and arr((PPE_RCONTP3() and PPETX1() and PPE_RCONTP3() * PPETX1() / 100)) and positif_ou_nul((PPELIMSMIC - PPE_RCONTP3())) * arr((PPE_RCONTP3() and PPETX1() and PPE_RCONTP3() * PPETX1() / 100)) / PPE_COEFF3()) + (positif((PPE_RCONTP3() - PPELIMSMIC)) and positif_ou_nul((PPELIMRPH - PPE_RCONTP3())) and positif((PPE_RCONTP3() - PPELIMSMIC)) * positif_ou_nul((PPELIMRPH - PPE_RCONTP3())) * arr((arr(((PPELIMRPH - PPE_RCONTP3()) and PPETX2() and (PPELIMRPH - PPE_RCONTP3()) * PPETX2() / 100)) and arr(((PPELIMRPH - PPE_RCONTP3()) and PPETX2() and (PPELIMRPH - PPE_RCONTP3()) * PPETX2() / 100)) / PPE_COEFF3()))) + (positif((PPE_RCONTP3() - PPELIMRPHI)) and positif_ou_nul((PPE_HAUTE() - PPE_RCONTP3())) and positif((PPE_RCONTP3() - PPELIMRPHI)) * positif_ou_nul((PPE_HAUTE() - PPE_RCONTP3())) * arr((arr(((PPELIMRPH2 - PPE_RCONTP3()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTP3()) * PPETX3() / 100)) and arr(((PPELIMRPH2 - PPE_RCONTP3()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTP3()) * PPETX3() / 100)) / PPE_COEFF3()))))))

    @cache_result
    def PPE_COEFFCOND3():
        """
        PPE:coefficient condition dans regle 30620 : PAC 3
        From PPE_COEFFCONDi
        """
        return ((1 - PPE_BOOL_TP3()) and (1 - PPE_BOOL_TP3()) * ((null((PPENBJ() - 360)) and null((PPENBJ() - 360)) * PPE_COEFF3()) + ((1 - null((PPENBJ() - 360))) and (1 - null((PPENBJ() - 360))) * (PPENBJ() and 1820 and 360 and PPENBJ() * 1820 / 360 / (((saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPEXT3', 0)) and (saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPEXT3', 0)) * positif((PPE_SALAVDEF3() + 0))) + (saisie_variables.get('PPENJP', 0) and positif((PPE_AVRPRO1P() + 0)) and 1820 and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0)) * 1820 / 360))))))

    @cache_result
    def PPENARPRIME3():
        """
        AVIS 2000:PPE:calcul non arrondi PRIME TOUTE ACTIVITE - PAC3
        From PPENARPRIMEi
        """
        return ((PPE_FORMULE3() and (1 + PPETXMAJ2) and positif_ou_nul((PPE_COEFFCOND3() - 2)) and PPE_FORMULE3() * (1 + PPETXMAJ2) * positif_ou_nul((PPE_COEFFCOND3() - 2)) * (1 - PPE_BOOL_TP3())) + ((arr((PPE_FORMULE3() and PPE_FORMULE3() * PPETXMAJ1)) + arr((PPE_FORMULE3() and PPE_FORMULE3() * (PPE_COEFF3() and PPE_COEFF3() * PPETXMAJ2)))) and positif((2 - PPE_COEFFCOND3())) and positif((PPE_COEFFCOND3() - 1)) and (arr((PPE_FORMULE3() and PPE_FORMULE3() * PPETXMAJ1)) + arr((PPE_FORMULE3() and PPE_FORMULE3() * (PPE_COEFF3() and PPE_COEFF3() * PPETXMAJ2)))) * positif((2 - PPE_COEFFCOND3())) * positif((PPE_COEFFCOND3() - 1)) * (1 - PPE_BOOL_TP3())) + (PPE_FORMULE3() and PPE_FORMULE3() * positif((PPE_BOOL_TP3() + positif_ou_nul((1 - PPE_COEFFCOND3()))))))

    @cache_result
    def PPE_SALAVDEF4():
        """
        PPE:REVENUS D ACTIVITE SALARIALE avant imput des deficits PAC4
        """
        return (saisie_variables.get('TSHALLO4', 0) + (saisie_variables.get('CARTSP4', 0) and saisie_variables.get('CARTSP4', 0) * positif(saisie_variables.get('CARTSNBAP4', 0))) + saisie_variables.get('SALEXT4', 0))

    @cache_result
    def PPESAL4():
        """
        PPE:REVENUS D ACTIVITE SALARIALE -PAC4
        From PPESALi
        """
        return (PPE_SALAVDEF4() and PPE_SALAVDEF4() * (1 - PPE_BOOL_SEULPAC()))

    @cache_result
    def PPE_RTA4():
        """
        PPE:REVENU TOTAL ACTIVITE SAL ET NON SAL PAC4 
        From PPE_RTAi
        """
        return PPESAL4()

    @cache_result
    def PPE_BOOL_NADA4():
        """
        PPE:BOOLEEN pas de case cochee: pas de calcul de la PPE PAC4
        """
        return min(1, ((positif((saisie_variables.get('TSHALLO4', 0) + 0)) and null((saisie_variables.get('PPETPP4', 0) + 0)) and positif((saisie_variables.get('TSHALLO4', 0) + 0)) * null((saisie_variables.get('PPETPP4', 0) + 0)) * null((saisie_variables.get('PPENHP4', 0) + 0))) + (positif((saisie_variables.get('SALEXT4', 0) + 0)) and null((saisie_variables.get('PPETPP4', 0) + 0)) and positif((saisie_variables.get('SALEXT4', 0) + 0)) * null((saisie_variables.get('PPETPP4', 0) + 0)) * null((saisie_variables.get('PPEXT4', 0) + 0)))))

    @cache_result
    def PPE_BOOL_MIN4():
        """
        PPE:BOOLEEN: CONDITION REVENUS MINIMUM REQUISE PAC4 
        From PPE_BOOL_MINi
        """
        return (positif_ou_nul((PPE_RTA4() - PPELIMRPB)) and positif_ou_nul((PPE_RTA4() - PPELIMRPB)) * (1 - PPE_BOOL_NADA4()))

    @cache_result
    def PPE_BOOL_TP4():
        """
        PPE:BOOLEEN ACTIVITE A TEMPS PLEIN   PAC4
        From PPE_BOOL_TPi
        """
        return positif(((positif(saisie_variables.get('PPETPP4', 0)) and positif(saisie_variables.get('PPETPP4', 0)) * positif((PPE_SALAVDEF4() + 0))) + (null((saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT4', 0) + 0)) and null((saisie_variables.get('PPETPP4', 0) + 0)) and null((saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT4', 0) + 0)) * null((saisie_variables.get('PPETPP4', 0) + 0)) * positif(PPE_SALAVDEF4())) + positif_ou_nul(((360 and PPENBJ() and (saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT4', 0)) and 360 / PPENBJ() * (saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT4', 0)) * positif((PPE_SALAVDEF4() + 0))) - 1820))))

    @cache_result
    def PPE_COEFF4():
        """
        PPE:coefficient conversion ACTIVITE A TEMPS PLEIN  PAC4
        From PPE_COEFFi
        """
        return ((PPE_BOOL_TP4() and 360 and PPE_BOOL_TP4() * 360 / PPENBJ()) + ((1 - PPE_BOOL_TP4()) and (1 - PPE_BOOL_TP4()) / ((saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT4', 0)) and positif((PPE_SALAVDEF4() + 0)) and (saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT4', 0)) * positif((PPE_SALAVDEF4() + 0)) / 1820)))

    @cache_result
    def PPE_RCONTP4():
        """
        PPE:REVENU TOTAL reconverti/ temps plein  PAC4
        From PPE_RCONTPi
        """
        return arr((PPE_RTA4() and PPE_RTA4() * PPE_COEFF4()))

    @cache_result
    def PPE_BOOL_MAX4():
        """
        PPE:booleen condition revenus < seuil MAX) PAC4
        From PPE_BOOL_MAXi
        """
        return positif_ou_nul((PPELIMRPH - PPE_RCONTP4()))

    @cache_result
    def PPE_FORMULE4():
        """
        PPE: formule generique de calcul de la prime   4 eme PAC
        From PPE_FORMULEi
        """
        return (PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN4() and PPE_BOOL_MAX4() and PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN4() * PPE_BOOL_MAX4() * arr(((positif_ou_nul((PPELIMSMIC - PPE_RCONTP4())) and arr((PPE_RCONTP4() and PPETX1() and PPE_RCONTP4() * PPETX1() / 100)) and positif_ou_nul((PPELIMSMIC - PPE_RCONTP4())) * arr((PPE_RCONTP4() and PPETX1() and PPE_RCONTP4() * PPETX1() / 100)) / PPE_COEFF4()) + (positif((PPE_RCONTP4() - PPELIMSMIC)) and positif_ou_nul((PPELIMRPH - PPE_RCONTP4())) and positif((PPE_RCONTP4() - PPELIMSMIC)) * positif_ou_nul((PPELIMRPH - PPE_RCONTP4())) * arr((arr(((PPELIMRPH - PPE_RCONTP4()) and PPETX2() and (PPELIMRPH - PPE_RCONTP4()) * PPETX2() / 100)) and arr(((PPELIMRPH - PPE_RCONTP4()) and PPETX2() and (PPELIMRPH - PPE_RCONTP4()) * PPETX2() / 100)) / PPE_COEFF4()))) + (positif((PPE_RCONTP4() - PPELIMRPHI)) and positif_ou_nul((PPE_HAUTE() - PPE_RCONTP4())) and positif((PPE_RCONTP4() - PPELIMRPHI)) * positif_ou_nul((PPE_HAUTE() - PPE_RCONTP4())) * arr((arr(((PPELIMRPH2 - PPE_RCONTP4()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTP4()) * PPETX3() / 100)) and arr(((PPELIMRPH2 - PPE_RCONTP4()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTP4()) * PPETX3() / 100)) / PPE_COEFF4()))))))

    @cache_result
    def PPE_COEFFCOND4():
        """
        PPE:coefficient condition dans regle 30620 : PAC 4
        From PPE_COEFFCONDi
        """
        return ((1 - PPE_BOOL_TP4()) and (1 - PPE_BOOL_TP4()) * ((null((PPENBJ() - 360)) and null((PPENBJ() - 360)) * PPE_COEFF4()) + ((1 - null((PPENBJ() - 360))) and (1 - null((PPENBJ() - 360))) * (PPENBJ() and 1820 and 360 and PPENBJ() * 1820 / 360 / (((saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT4', 0)) and (saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT4', 0)) * positif((PPE_SALAVDEF4() + 0))) + (saisie_variables.get('PPENJP', 0) and positif((PPE_AVRPRO1P() + 0)) and 1820 and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0)) * 1820 / 360))))))

    @cache_result
    def PPENARPRIME4():
        """
        AVIS 2000:PPE:calcul non arrondi PRIME TOUTE ACTIVITE - PAC4
        From PPENARPRIMEi
        """
        return ((PPE_FORMULE4() and (1 + PPETXMAJ2) and positif_ou_nul((PPE_COEFFCOND4() - 2)) and PPE_FORMULE4() * (1 + PPETXMAJ2) * positif_ou_nul((PPE_COEFFCOND4() - 2)) * (1 - PPE_BOOL_TP4())) + ((arr((PPE_FORMULE4() and PPE_FORMULE4() * PPETXMAJ1)) + arr((PPE_FORMULE4() and PPE_FORMULE4() * (PPE_COEFF4() and PPE_COEFF4() * PPETXMAJ2)))) and positif((2 - PPE_COEFFCOND4())) and positif((PPE_COEFFCOND4() - 1)) and (arr((PPE_FORMULE4() and PPE_FORMULE4() * PPETXMAJ1)) + arr((PPE_FORMULE4() and PPE_FORMULE4() * (PPE_COEFF4() and PPE_COEFF4() * PPETXMAJ2)))) * positif((2 - PPE_COEFFCOND4())) * positif((PPE_COEFFCOND4() - 1)) * (1 - PPE_BOOL_TP4())) + (PPE_FORMULE4() and PPE_FORMULE4() * positif((PPE_BOOL_TP4() + positif_ou_nul((1 - PPE_COEFFCOND4()))))))

    @cache_result
    def PPE_BOOL_NADAV():
        """
        PPE:BOOLEEN pas de case cochee: pas de calcul de la PPE VOUS
        """
        return min(1, ((positif((saisie_variables.get('TSHALLOV', 0) + 0)) and null((saisie_variables.get('PPETPV', 0) + 0)) and positif((saisie_variables.get('TSHALLOV', 0) + 0)) * null((saisie_variables.get('PPETPV', 0) + 0)) * null((saisie_variables.get('PPENHV', 0) + 0))) + (positif((saisie_variables.get('SALEXTV', 0) + 0)) and null((saisie_variables.get('PPETPV', 0) + 0)) and positif((saisie_variables.get('SALEXTV', 0) + 0)) * null((saisie_variables.get('PPETPV', 0) + 0)) * null((saisie_variables.get('PPEXTV', 0) + 0)))))

    @cache_result
    def PPE_BOOL_MINV():
        """
        PPE:BOOLEEN: CONDITION REVENUS MINIMUM REQUISE VOUS  
        From PPE_BOOL_MINi
        """
        return (positif_ou_nul((PPE_RTAV() - PPELIMRPB)) and positif_ou_nul((PPE_RTAV() - PPELIMRPB)) * (1 - PPE_BOOL_NADAV()))

    @cache_result
    def PPE_BOOL_MAXV():
        """
        PPE:booleen condition revenus < seuil MAX)UNIQUE PAC
        From PPE_BOOL_MAXi
        """
        return positif_ou_nul((PPE_HAUTE() - PPE_RCONTPV()))

    @cache_result
    def PPE_FORMULEV():
        """
        PPE: formule generique de calcul de la prime VOUS
        From PPE_FORMULEi
        """
        return (PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINV() and PPE_BOOL_MAXV() and PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINV() * PPE_BOOL_MAXV() * arr(((positif_ou_nul((PPELIMSMIC - PPE_RCONTPV())) and arr((PPE_RCONTPV() and PPETX1() and PPE_RCONTPV() * PPETX1() / 100)) and positif_ou_nul((PPELIMSMIC - PPE_RCONTPV())) * arr((PPE_RCONTPV() and PPETX1() and PPE_RCONTPV() * PPETX1() / 100)) / PPE_COEFFV()) + (positif((PPE_RCONTPV() - PPELIMSMIC)) and positif_ou_nul((PPELIMRPH - PPE_RCONTPV())) and positif((PPE_RCONTPV() - PPELIMSMIC)) * positif_ou_nul((PPELIMRPH - PPE_RCONTPV())) * arr((arr(((PPELIMRPH - PPE_RCONTPV()) and PPETX2() and (PPELIMRPH - PPE_RCONTPV()) * PPETX2() / 100)) and arr(((PPELIMRPH - PPE_RCONTPV()) and PPETX2() and (PPELIMRPH - PPE_RCONTPV()) * PPETX2() / 100)) / PPE_COEFFV()))) + (positif((PPE_RCONTPV() - PPELIMRPHI)) and positif_ou_nul((PPE_HAUTE() - PPE_RCONTPV())) and positif((PPE_RCONTPV() - PPELIMRPHI)) * positif_ou_nul((PPE_HAUTE() - PPE_RCONTPV())) * arr((arr(((PPELIMRPH2 - PPE_RCONTPV()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTPV()) * PPETX3() / 100)) and arr(((PPELIMRPH2 - PPE_RCONTPV()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTPV()) * PPETX3() / 100)) / PPE_COEFFV()))))))

    @cache_result
    def PPE_COEFFCONDV():
        """
        PPE:coefficient condition dans regle 30620 : VOUS
        From PPE_COEFFCONDi
        """
        return ((1 - PPE_BOOL_TPV()) and (1 - PPE_BOOL_TPV()) * ((null((PPENBJ() - 360)) and null((PPENBJ() - 360)) * PPE_COEFFV()) + ((1 - null((PPENBJ() - 360))) and (1 - null((PPENBJ() - 360))) * (PPENBJ() and 1820 and 360 and PPENBJ() * 1820 / 360 / (((saisie_variables.get('PPENHV', 0) + saisie_variables.get('PPEXTV', 0)) and (saisie_variables.get('PPENHV', 0) + saisie_variables.get('PPEXTV', 0)) * positif((PPE_SALAVDEFV() + 0))) + (saisie_variables.get('PPENJV', 0) and positif((PPE_AVRPRO1V() + 0)) and 1820 and saisie_variables.get('PPENJV', 0) * positif((PPE_AVRPRO1V() + 0)) * 1820 / 360))))))

    @cache_result
    def PPENARPRIMEV():
        """
        AVIS 2000:PPE:calcul non arrondi PRIME TOUTE ACTIVITE -VOUS
        From PPENARPRIMEi
        """
        return ((PPE_FORMULEV() and (1 + PPETXMAJ2) and positif_ou_nul((PPE_COEFFCONDV() - 2)) and PPE_FORMULEV() * (1 + PPETXMAJ2) * positif_ou_nul((PPE_COEFFCONDV() - 2)) * (1 - PPE_BOOL_TPV())) + ((arr((PPE_FORMULEV() and PPE_FORMULEV() * PPETXMAJ1)) + arr((PPE_FORMULEV() and PPE_FORMULEV() * (PPE_COEFFV() and PPE_COEFFV() * PPETXMAJ2)))) and positif((2 - PPE_COEFFCONDV())) and positif((PPE_COEFFCONDV() - 1)) and (arr((PPE_FORMULEV() and PPE_FORMULEV() * PPETXMAJ1)) + arr((PPE_FORMULEV() and PPE_FORMULEV() * (PPE_COEFFV() and PPE_COEFFV() * PPETXMAJ2)))) * positif((2 - PPE_COEFFCONDV())) * positif((PPE_COEFFCONDV() - 1)) * (1 - PPE_BOOL_TPV())) + (PPE_FORMULEV() and PPE_FORMULEV() * positif((PPE_BOOL_TPV() + positif_ou_nul((1 - PPE_COEFFCONDV()))))))

    @cache_result
    def PPE_BOOL_NADAC():
        """
        PPE:BOOLEEN pas de case cochee: pas de calcul de la PPE CONJOINT
        """
        return min(1, ((positif((saisie_variables.get('TSHALLOC', 0) + 0)) and null((saisie_variables.get('PPETPC', 0) + 0)) and positif((saisie_variables.get('TSHALLOC', 0) + 0)) * null((saisie_variables.get('PPETPC', 0) + 0)) * null((saisie_variables.get('PPENHC', 0) + 0))) + (positif((saisie_variables.get('SALEXTC', 0) + 0)) and null((saisie_variables.get('PPETPC', 0) + 0)) and positif((saisie_variables.get('SALEXTC', 0) + 0)) * null((saisie_variables.get('PPETPC', 0) + 0)) * null((saisie_variables.get('PPEXTC', 0) + 0)))))

    @cache_result
    def PPE_BOOL_MINC():
        """
        PPE:BOOLEEN: CONDITION REVENUS MINIMUM REQUISE  CJT
        From PPE_BOOL_MINi
        """
        return (positif_ou_nul((PPE_RTAC() - PPELIMRPB)) and positif_ou_nul((PPE_RTAC() - PPELIMRPB)) * (1 - PPE_BOOL_NADAC()))

    @cache_result
    def PPE_BOOL_MAXC():
        """
        PPE:booleen condition revenus < seuil MAX) CJT
        From PPE_BOOL_MAXi
        """
        return positif_ou_nul((PPE_HAUTE() - PPE_RCONTPC()))

    @cache_result
    def PPE_FORMULEC():
        """
        PPE: formule generique de calcul de la prime conjoint
        From PPE_FORMULEi
        """
        return (PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINC() and PPE_BOOL_MAXC() and PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINC() * PPE_BOOL_MAXC() * arr(((positif_ou_nul((PPELIMSMIC - PPE_RCONTPC())) and arr((PPE_RCONTPC() and PPETX1() and PPE_RCONTPC() * PPETX1() / 100)) and positif_ou_nul((PPELIMSMIC - PPE_RCONTPC())) * arr((PPE_RCONTPC() and PPETX1() and PPE_RCONTPC() * PPETX1() / 100)) / PPE_COEFFC()) + (positif((PPE_RCONTPC() - PPELIMSMIC)) and positif_ou_nul((PPELIMRPH - PPE_RCONTPC())) and positif((PPE_RCONTPC() - PPELIMSMIC)) * positif_ou_nul((PPELIMRPH - PPE_RCONTPC())) * arr((arr(((PPELIMRPH - PPE_RCONTPC()) and PPETX2() and (PPELIMRPH - PPE_RCONTPC()) * PPETX2() / 100)) and arr(((PPELIMRPH - PPE_RCONTPC()) and PPETX2() and (PPELIMRPH - PPE_RCONTPC()) * PPETX2() / 100)) / PPE_COEFFC()))) + (positif((PPE_RCONTPC() - PPELIMRPHI)) and positif_ou_nul((PPE_HAUTE() - PPE_RCONTPC())) and positif((PPE_RCONTPC() - PPELIMRPHI)) * positif_ou_nul((PPE_HAUTE() - PPE_RCONTPC())) * arr((arr(((PPELIMRPH2 - PPE_RCONTPC()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTPC()) * PPETX3() / 100)) and arr(((PPELIMRPH2 - PPE_RCONTPC()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTPC()) * PPETX3() / 100)) / PPE_COEFFC()))))))

    @cache_result
    def PPE_COEFFCONDC():
        """
        PPE:coefficient condition dans regle 30620 : CJT
        From PPE_COEFFCONDi
        """
        return ((1 - PPE_BOOL_TPC()) and (1 - PPE_BOOL_TPC()) * ((null((PPENBJ() - 360)) and null((PPENBJ() - 360)) * PPE_COEFFC()) + ((1 - null((PPENBJ() - 360))) and (1 - null((PPENBJ() - 360))) * (PPENBJ() and 1820 and 360 and PPENBJ() * 1820 / 360 / (((saisie_variables.get('PPENHC', 0) + saisie_variables.get('PPEXTC', 0)) and (saisie_variables.get('PPENHC', 0) + saisie_variables.get('PPEXTC', 0)) * positif((PPE_SALAVDEFC() + 0))) + (saisie_variables.get('PPENJC', 0) and positif((PPE_AVRPRO1C() + 0)) and 1820 and saisie_variables.get('PPENJC', 0) * positif((PPE_AVRPRO1C() + 0)) * 1820 / 360))))))

    @cache_result
    def PPENARPRIMEC():
        """
        AVIS 2000:PPE:calcul non arrondi PRIME TOUTE ACTIVITE -conjoint
        From PPENARPRIMEi
        """
        return ((PPE_FORMULEC() and (1 + PPETXMAJ2) and positif_ou_nul((PPE_COEFFCONDC() - 2)) and PPE_FORMULEC() * (1 + PPETXMAJ2) * positif_ou_nul((PPE_COEFFCONDC() - 2)) * (1 - PPE_BOOL_TPC())) + ((arr((PPE_FORMULEC() and PPE_FORMULEC() * PPETXMAJ1)) + arr((PPE_FORMULEC() and PPE_FORMULEC() * (PPE_COEFFC() and PPE_COEFFC() * PPETXMAJ2)))) and positif((2 - PPE_COEFFCONDC())) and positif((PPE_COEFFCONDC() - 1)) and (arr((PPE_FORMULEC() and PPE_FORMULEC() * PPETXMAJ1)) + arr((PPE_FORMULEC() and PPE_FORMULEC() * (PPE_COEFFC() and PPE_COEFFC() * PPETXMAJ2)))) * positif((2 - PPE_COEFFCONDC())) * positif((PPE_COEFFCONDC() - 1)) * (1 - PPE_BOOL_TPC())) + (PPE_FORMULEC() and PPE_FORMULEC() * positif((PPE_BOOL_TPC() + positif_ou_nul((1 - PPE_COEFFCONDC()))))))

    @cache_result
    def PPE_SALAVDEFU():
        """
        PPE:REVENUS D ACTIVITE SALARIALE avant imput des deficits UNIQUE PAC
        """
        return (somme([PPE_SALAVDEF1(), PPE_SALAVDEF2(), PPE_SALAVDEF3(), PPE_SALAVDEF4()]) and somme([PPE_SALAVDEF1(), PPE_SALAVDEF2(), PPE_SALAVDEF3(), PPE_SALAVDEF4()]) * PPE_BOOL_SEULPAC())

    @cache_result
    def PPE_RPRO1P():
        """
        PPE:REVENU D ACTIVIE NON SALARIEE AVANT RAPPOR DE 1,1111 PAC
        From PPE_RPRO1i
        """
        return (saisie_variables.get('FEXP', 0) + saisie_variables.get('BAFP', 0) + saisie_variables.get('BAEXP', 0) + saisie_variables.get('BACREP', 0) + saisie_variables.get('4BACREP', 0) - (saisie_variables.get('BACDEP', 0) and saisie_variables.get('BACDEP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BAHEXP', 0) + saisie_variables.get('BAHREP', 0) + saisie_variables.get('4BAHREP', 0) - (saisie_variables.get('BAHDEP', 0) and saisie_variables.get('BAHDEP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BICEXP', 0) + saisie_variables.get('BICNOP', 0) - (saisie_variables.get('BICDNP', 0) and saisie_variables.get('BICDNP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BIHEXP', 0) + saisie_variables.get('BIHNOP', 0) - (saisie_variables.get('BIHDNP', 0) and saisie_variables.get('BIHDNP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNCEXP', 0) + saisie_variables.get('BNCREP', 0) - (saisie_variables.get('BNCDEP', 0) and saisie_variables.get('BNCDEP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('BNHEXP', 0) + saisie_variables.get('BNHREP', 0) - (saisie_variables.get('BNHDEP', 0) and saisie_variables.get('BNHDEP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('MIBEXP', 0) + saisie_variables.get('BNCPROEXP', 0) + TMIB_NETVP() + TMIB_NETPP() + TSPENETPP() + saisie_variables.get('BAFPVP', 0) + saisie_variables.get('MIBPVP', 0) + saisie_variables.get('BNCPROPVP', 0) + saisie_variables.get('BAFORESTP', 0) + saisie_variables.get('LOCPROP', 0) + saisie_variables.get('LOCPROCGAP', 0) - (saisie_variables.get('LOCDEFPROCGAP', 0) and saisie_variables.get('LOCDEFPROCGAP', 0) * (1 - positif(base_variables['ART1731BIS']))) - (saisie_variables.get('LOCDEFPROP', 0) and saisie_variables.get('LOCDEFPROP', 0) * (1 - positif(base_variables['ART1731BIS']))) + saisie_variables.get('XHONOAAP', 0) + saisie_variables.get('XHONOP', 0))

    @cache_result
    def PPE_RPROP():
        """
        PPE:REVENU D ACTIVIE NON SALARIEE - PAC   
        From PPE_RPROi
        """
        return ((positif(PPE_RPRO1P()) and positif(PPE_RPRO1P()) * arr(((1 + (PPETXRPRO and PPETXRPRO / 100)) and (1 + (PPETXRPRO and PPETXRPRO / 100)) * PPE_RPRO1P()))) + ((1 - positif(PPE_RPRO1P())) and (1 - positif(PPE_RPRO1P())) * arr((PPE_RPRO1P() and PPE_RPRO1P() * (1 - (PPETXRPRO and PPETXRPRO / 100))))))

    @cache_result
    def PPESALU():
        """
        PPE:REVENUS D ACTIVITE SALARIALE - PAC1- et unique PAC
        """
        return ((PPE_SALAVDEFU() + (PPE_RPROP() and PPE_RPROP() * (1 - positif(PPE_RPROP())))) and (PPE_SALAVDEFU() + (PPE_RPROP() and PPE_RPROP() * (1 - positif(PPE_RPROP())))) * PPE_BOOL_SEULPAC())

    @cache_result
    def PPE_RTAU():
        """
        PPE:REVENUS TOTAL D ACTIVITE SALARIALE - PAC1- et unique PAC
        """
        return (max(0, (PPESALU() + (PPE_RPROP() and PPE_RPROP() * positif(PPE_RPROP())))) and max(0, (PPESALU() + (PPE_RPROP() and PPE_RPROP() * positif(PPE_RPROP())))) * PPE_BOOL_SEULPAC())

    @cache_result
    def PPE_BOOL_NADAU():
        """
        PPE:BOOLEEN pas de case cochee: pas de calcul de la PPE PACU
        """
        return min(1, ((positif((saisie_variables.get('TSHALLO1', 0) + saisie_variables.get('TSHALLO2', 0) + saisie_variables.get('TSHALLO3', 0) + saisie_variables.get('TSHALLO4', 0) + 0)) and null((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0) + 0)) and positif((saisie_variables.get('TSHALLO1', 0) + saisie_variables.get('TSHALLO2', 0) + saisie_variables.get('TSHALLO3', 0) + saisie_variables.get('TSHALLO4', 0) + 0)) * null((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0) + 0)) * null((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + 0))) + (positif((saisie_variables.get('SALEXT1', 0) + saisie_variables.get('SALEXT2', 0) + saisie_variables.get('SALEXT3', 0) + saisie_variables.get('SALEXT4', 0) + 0)) and null((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0) + 0)) and positif((saisie_variables.get('SALEXT1', 0) + saisie_variables.get('SALEXT2', 0) + saisie_variables.get('SALEXT3', 0) + saisie_variables.get('SALEXT4', 0) + 0)) * null((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0) + 0)) * null((saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0) + 0)))))

    @cache_result
    def PPE_BOOL_MINU():
        """
        PPE:BOOLEEN: CONDITION REVENUS MINIMUM REQUISE PAC unique
        From PPE_BOOL_MINi
        """
        return (positif_ou_nul((PPE_RTAU() - PPELIMRPB)) and positif_ou_nul((PPE_RTAU() - PPELIMRPB)) * (1 - PPE_BOOL_NADAU()))

    @cache_result
    def PPE_BOOL_TPU():
        """
        PPE:BOOLEEN ACTIVITE A TEMPS PLEIN  unique PAC
        """
        return positif((((positif((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0))) and positif((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0))) * positif((PPE_SALAVDEF1() + PPE_SALAVDEF2() + PPE_SALAVDEF3() + PPE_SALAVDEF4()))) + (null((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0) + 0)) and null((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0) + 0)) and null((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0) + 0)) * null((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0) + 0)) * positif((PPE_SALAVDEF1() + PPE_SALAVDEF2() + PPE_SALAVDEF3() + PPE_SALAVDEF4()))) + positif((((360 and PPENBJ() and ((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) and (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) * positif((PPE_SALAVDEF1() + PPE_SALAVDEF2() + PPE_SALAVDEF3() + PPE_SALAVDEF4()))) and 360 / PPENBJ() * ((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) and (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) * positif((PPE_SALAVDEF1() + PPE_SALAVDEF2() + PPE_SALAVDEF3() + PPE_SALAVDEF4()))) / 1820) + (saisie_variables.get('PPENJP', 0) and positif((PPE_AVRPRO1P() + 0)) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0)) / 360)) - 1)) + positif_ou_nul((((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) and (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) * positif((PPE_SALAVDEF1() + PPE_SALAVDEF2() + PPE_SALAVDEF3() + PPE_SALAVDEF4()))) - 1820)) + positif_ou_nul(((saisie_variables.get('PPENJP', 0) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0))) - 360)) + positif((saisie_variables.get('PPEACP', 0) and saisie_variables.get('PPEACP', 0) * positif((PPE_AVRPRO1P() + 0)))) + ((1 - positif((saisie_variables.get('PPENJP', 0) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0))))) and (1 - positif((saisie_variables.get('PPENJP', 0) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0))))) * positif((PPE_AVRPRO1P() + 0)))) and ((positif((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0))) and positif((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0))) * positif((PPE_SALAVDEF1() + PPE_SALAVDEF2() + PPE_SALAVDEF3() + PPE_SALAVDEF4()))) + (null((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0) + 0)) and null((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0) + 0)) and null((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0) + 0)) * null((saisie_variables.get('PPETPP1', 0) + saisie_variables.get('PPETPP2', 0) + saisie_variables.get('PPETPP3', 0) + saisie_variables.get('PPETPP4', 0) + 0)) * positif((PPE_SALAVDEF1() + PPE_SALAVDEF2() + PPE_SALAVDEF3() + PPE_SALAVDEF4()))) + positif((((360 and PPENBJ() and ((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) and (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) * positif((PPE_SALAVDEF1() + PPE_SALAVDEF2() + PPE_SALAVDEF3() + PPE_SALAVDEF4()))) and 360 / PPENBJ() * ((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) and (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) * positif((PPE_SALAVDEF1() + PPE_SALAVDEF2() + PPE_SALAVDEF3() + PPE_SALAVDEF4()))) / 1820) + (saisie_variables.get('PPENJP', 0) and positif((PPE_AVRPRO1P() + 0)) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0)) / 360)) - 1)) + positif_ou_nul((((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) and (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) * positif((PPE_SALAVDEF1() + PPE_SALAVDEF2() + PPE_SALAVDEF3() + PPE_SALAVDEF4()))) - 1820)) + positif_ou_nul(((saisie_variables.get('PPENJP', 0) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0))) - 360)) + positif((saisie_variables.get('PPEACP', 0) and saisie_variables.get('PPEACP', 0) * positif((PPE_AVRPRO1P() + 0)))) + ((1 - positif((saisie_variables.get('PPENJP', 0) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0))))) and (1 - positif((saisie_variables.get('PPENJP', 0) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0))))) * positif((PPE_AVRPRO1P() + 0)))) * PPE_BOOL_SEULPAC()))

    @cache_result
    def PPE_COEFFU():
        """
        PPE:coefficient conversion ACTIVITE A TEMPS PLEIN  UNIQUE PAC
        """
        return ((PPE_BOOL_TPU() and 360 and PPE_BOOL_TPU() * 360 / PPENBJ()) + ((1 - PPE_BOOL_TPU()) and (((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) and (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) / 1820) + (saisie_variables.get('PPENJP', 0) and positif((PPE_AVRPRO1P() + 0)) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0)) / 360)) and (1 - PPE_BOOL_TPU()) / (((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) and (saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) / 1820) + (saisie_variables.get('PPENJP', 0) and positif((PPE_AVRPRO1P() + 0)) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0)) / 360)) * PPE_BOOL_SEULPAC()))

    @cache_result
    def PPE_RCONTPU():
        """
        PPE:REVENU TOTAL reconverti/ temps plein   & PAC UNIQUE
        From PPE_RCONTPi
        """
        return arr((PPE_RTAU() and PPE_RTAU() * PPE_COEFFU()))

    @cache_result
    def PPE_BOOL_MAXU():
        """
        PPE:booleen condition revenus < seuil MAX)UNIQUE PAC
        From PPE_BOOL_MAXi
        """
        return positif_ou_nul((PPELIMRPH - PPE_RCONTPU()))

    @cache_result
    def PPE_FORMULEU():
        """
        PPE: formule generique de calcul de la prime Unique PAC
        From PPE_FORMULEi
        """
        return (PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINU() and PPE_BOOL_MAXU() and PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINU() * PPE_BOOL_MAXU() * arr(((positif_ou_nul((PPELIMSMIC - PPE_RCONTPU())) and arr((PPE_RCONTPU() and PPETX1() and PPE_RCONTPU() * PPETX1() / 100)) and positif_ou_nul((PPELIMSMIC - PPE_RCONTPU())) * arr((PPE_RCONTPU() and PPETX1() and PPE_RCONTPU() * PPETX1() / 100)) / PPE_COEFFU()) + (positif((PPE_RCONTPU() - PPELIMSMIC)) and positif_ou_nul((PPELIMRPH - PPE_RCONTPU())) and positif((PPE_RCONTPU() - PPELIMSMIC)) * positif_ou_nul((PPELIMRPH - PPE_RCONTPU())) * arr((arr(((PPELIMRPH - PPE_RCONTPU()) and PPETX2() and (PPELIMRPH - PPE_RCONTPU()) * PPETX2() / 100)) and arr(((PPELIMRPH - PPE_RCONTPU()) and PPETX2() and (PPELIMRPH - PPE_RCONTPU()) * PPETX2() / 100)) / PPE_COEFFU()))) + (positif((PPE_RCONTPU() - PPELIMRPHI)) and positif_ou_nul((PPE_HAUTE() - PPE_RCONTPU())) and positif((PPE_RCONTPU() - PPELIMRPHI)) * positif_ou_nul((PPE_HAUTE() - PPE_RCONTPU())) * arr((arr(((PPELIMRPH2 - PPE_RCONTPU()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTPU()) * PPETX3() / 100)) and arr(((PPELIMRPH2 - PPE_RCONTPU()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTPU()) * PPETX3() / 100)) / PPE_COEFFU()))))))

    @cache_result
    def PPE_COEFFCONDU():
        """
        PPE:coefficient condition dans regle 30620 : Unique PAC
        From PPE_COEFFCONDi
        """
        return ((1 - PPE_BOOL_TPU()) and (1 - PPE_BOOL_TPU()) * ((null((PPENBJ() - 360)) and null((PPENBJ() - 360)) * PPE_COEFFU()) + ((1 - null((PPENBJ() - 360))) and (1 - null((PPENBJ() - 360))) * (PPENBJ() and 1820 and 360 and PPENBJ() * 1820 / 360 / ((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) + (saisie_variables.get('PPENJP', 0) and positif((PPE_AVRPRO1P() + 0)) and 1820 and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0)) * 1820 / 360))))))

    @cache_result
    def PPENARPRIMEU():
        """
        AVIS 2000:PPE:calcul non arrondi PRIME TOUTE ACTIVITE -Unique PAC
        From PPENARPRIMEi
        """
        return ((PPE_FORMULEU() and (1 + PPETXMAJ2) and positif_ou_nul((PPE_COEFFCONDU() - 2)) and PPE_FORMULEU() * (1 + PPETXMAJ2) * positif_ou_nul((PPE_COEFFCONDU() - 2)) * (1 - PPE_BOOL_TPU())) + ((arr((PPE_FORMULEU() and PPE_FORMULEU() * PPETXMAJ1)) + arr((PPE_FORMULEU() and PPE_FORMULEU() * (PPE_COEFFU() and PPE_COEFFU() * PPETXMAJ2)))) and positif((2 - PPE_COEFFCONDU())) and positif((PPE_COEFFCONDU() - 1)) and (arr((PPE_FORMULEU() and PPE_FORMULEU() * PPETXMAJ1)) + arr((PPE_FORMULEU() and PPE_FORMULEU() * (PPE_COEFFU() and PPE_COEFFU() * PPETXMAJ2)))) * positif((2 - PPE_COEFFCONDU())) * positif((PPE_COEFFCONDU() - 1)) * (1 - PPE_BOOL_TPU())) + (PPE_FORMULEU() and PPE_FORMULEU() * positif((PPE_BOOL_TPU() + positif_ou_nul((1 - PPE_COEFFCONDU()))))))

    @cache_result
    def PPE_RTAN():
        """
        PPE:REVENUS TOTAL D ACTIVITE SALARIALE pour plusieurs PAC
        """
        return (max(0, PPE_RPROP()) and max(0, PPE_RPROP()) * (1 - PPE_BOOL_SEULPAC()))

    # WARNING: the variable "PPE_BOOL_NADAN" is used in a formula at least, but is not defined.
    def PPE_BOOL_NADAN(): return 0
    @cache_result
    def PPE_BOOL_MINN():
        """
        PPE:BOOLEEN: CONDITION REVENUS MINIMUM REQUISE PAC plusieursunique
        From PPE_BOOL_MINi
        """
        return (positif_ou_nul((PPE_RTAN() - PPELIMRPB)) and positif_ou_nul((PPE_RTAN() - PPELIMRPB)) * (1 - PPE_BOOL_NADAN()))

    @cache_result
    def PPE_BOOL_TPN():
        """
        PPE:BOOLEEN ACTIVITE A TEMPS PLEIN  Plusieurs PAC
        """
        return positif((positif_ou_nul(((360 and PPENBJ() and saisie_variables.get('PPENJP', 0) and 360 / PPENBJ() * saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0))) - 360)) + positif((saisie_variables.get('PPEACP', 0) and saisie_variables.get('PPEACP', 0) * positif((PPE_AVRPRO1P() + 0)))) + ((1 - positif((saisie_variables.get('PPENJP', 0) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0))))) and (1 - positif((saisie_variables.get('PPENJP', 0) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0))))) * positif((PPE_AVRPRO1P() + 0)))))

    @cache_result
    def PPE_COEFFN():
        """
        PPE:coefficient conversion ACTIVITE A TEMPS PLEIN  act non  sal
        """
        return ((PPE_BOOL_TPN() and 360 and PPE_BOOL_TPN() * 360 / PPENBJ()) + ((1 - PPE_BOOL_TPN()) and (1 - PPE_BOOL_TPN()) / (saisie_variables.get('PPENJP', 0) and positif((PPE_AVRPRO1P() + 0)) and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0)) / 360)))

    @cache_result
    def PPE_RCONTPN():
        """
        PPE:REVENU TOTAL reconverti/ temps plein plusieurs PAC
        From PPE_RCONTPi
        """
        return arr((PPE_RTAN() and PPE_RTAN() * PPE_COEFFN()))

    @cache_result
    def PPE_BOOL_MAXN():
        """
        PPE:booleen condition revenus < seuil MAX) plusieurs PAC
        From PPE_BOOL_MAXi
        """
        return positif_ou_nul((PPELIMRPH - PPE_RCONTPN()))

    @cache_result
    def PPE_FORMULEN():
        """
        PPE: formule generique de calcul de la prime plusieurs PAC
        From PPE_FORMULEi
        """
        return (PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINN() and PPE_BOOL_MAXN() and PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINN() * PPE_BOOL_MAXN() * arr(((positif_ou_nul((PPELIMSMIC - PPE_RCONTPN())) and arr((PPE_RCONTPN() and PPETX1() and PPE_RCONTPN() * PPETX1() / 100)) and positif_ou_nul((PPELIMSMIC - PPE_RCONTPN())) * arr((PPE_RCONTPN() and PPETX1() and PPE_RCONTPN() * PPETX1() / 100)) / PPE_COEFFN()) + (positif((PPE_RCONTPN() - PPELIMSMIC)) and positif_ou_nul((PPELIMRPH - PPE_RCONTPN())) and positif((PPE_RCONTPN() - PPELIMSMIC)) * positif_ou_nul((PPELIMRPH - PPE_RCONTPN())) * arr((arr(((PPELIMRPH - PPE_RCONTPN()) and PPETX2() and (PPELIMRPH - PPE_RCONTPN()) * PPETX2() / 100)) and arr(((PPELIMRPH - PPE_RCONTPN()) and PPETX2() and (PPELIMRPH - PPE_RCONTPN()) * PPETX2() / 100)) / PPE_COEFFN()))) + (positif((PPE_RCONTPN() - PPELIMRPHI)) and positif_ou_nul((PPE_HAUTE() - PPE_RCONTPN())) and positif((PPE_RCONTPN() - PPELIMRPHI)) * positif_ou_nul((PPE_HAUTE() - PPE_RCONTPN())) * arr((arr(((PPELIMRPH2 - PPE_RCONTPN()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTPN()) * PPETX3() / 100)) and arr(((PPELIMRPH2 - PPE_RCONTPN()) and PPETX3() and (PPELIMRPH2 - PPE_RCONTPN()) * PPETX3() / 100)) / PPE_COEFFN()))))))

    @cache_result
    def PPE_COEFFCONDN():
        """
        PPE:coefficient condition dans regle 30620 : Nonbreux PAC
        From PPE_COEFFCONDi
        """
        return ((1 - PPE_BOOL_TPN()) and (1 - PPE_BOOL_TPN()) * ((null((PPENBJ() - 360)) and null((PPENBJ() - 360)) * PPE_COEFFN()) + ((1 - null((PPENBJ() - 360))) and (1 - null((PPENBJ() - 360))) * (PPENBJ() and 1820 and 360 and PPENBJ() * 1820 / 360 / ((saisie_variables.get('PPENHP1', 0) + saisie_variables.get('PPENHP2', 0) + saisie_variables.get('PPENHP3', 0) + saisie_variables.get('PPENHP4', 0) + saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPEXT4', 0)) + (saisie_variables.get('PPENJP', 0) and positif((PPE_AVRPRO1P() + 0)) and 1820 and saisie_variables.get('PPENJP', 0) * positif((PPE_AVRPRO1P() + 0)) * 1820 / 360))))))

    @cache_result
    def PPENARPRIMEN():
        """
        AVIS 2000:PPE:calcul non arrondi PRIME TOUTE ACTIVITE -plusieurs PAC
        From PPENARPRIMEi
        """
        return ((PPE_FORMULEN() and (1 + PPETXMAJ2) and positif_ou_nul((PPE_COEFFCONDN() - 2)) and PPE_FORMULEN() * (1 + PPETXMAJ2) * positif_ou_nul((PPE_COEFFCONDN() - 2)) * (1 - PPE_BOOL_TPN())) + ((arr((PPE_FORMULEN() and PPE_FORMULEN() * PPETXMAJ1)) + arr((PPE_FORMULEN() and PPE_FORMULEN() * (PPE_COEFFN() and PPE_COEFFN() * PPETXMAJ2)))) and positif((2 - PPE_COEFFCONDN())) and positif((PPE_COEFFCONDN() - 1)) and (arr((PPE_FORMULEN() and PPE_FORMULEN() * PPETXMAJ1)) + arr((PPE_FORMULEN() and PPE_FORMULEN() * (PPE_COEFFN() and PPE_COEFFN() * PPETXMAJ2)))) * positif((2 - PPE_COEFFCONDN())) * positif((PPE_COEFFCONDN() - 1)) * (1 - PPE_BOOL_TPN())) + (PPE_FORMULEN() and PPE_FORMULEN() * positif((PPE_BOOL_TPN() + positif_ou_nul((1 - PPE_COEFFCONDN()))))))

    @cache_result
    def PPEPRIMETTEV():
        """
        PPE:SUPPLEMENT PRIME DE 500F 78euros -VOUS
        """
        return (PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and (PPE_PRIMETTE and BOOL_0AM() and INDMONO() and positif_ou_nul((PPE_RTAV() - PPELIMRPB)) and positif_ou_nul((PPELIMRPHI - PPE_RCONTPV())) and PPE_PRIMETTE * BOOL_0AM() * INDMONO() * positif_ou_nul((PPE_RTAV() - PPELIMRPB)) * positif_ou_nul((PPELIMRPHI - PPE_RCONTPV())) * (1 - positif(PPE_BOOL_NADAV()))) and PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * (PPE_PRIMETTE and BOOL_0AM() and INDMONO() and positif_ou_nul((PPE_RTAV() - PPELIMRPB)) and positif_ou_nul((PPELIMRPHI - PPE_RCONTPV())) and PPE_PRIMETTE * BOOL_0AM() * INDMONO() * positif_ou_nul((PPE_RTAV() - PPELIMRPB)) * positif_ou_nul((PPELIMRPHI - PPE_RCONTPV())) * (1 - positif(PPE_BOOL_NADAV()))) * (1 - V_CNR()))

    @cache_result
    def PPEPRIMETTEC():
        """
        PPE:PRIME SUPPLEMENT PRIME DE 500F 78 EUROS - CONJOINT
        """
        return (PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and (PPE_PRIMETTE and BOOL_0AM() and INDMONO() and positif_ou_nul((PPELIMRPHI - PPE_RCONTPC())) and positif_ou_nul((PPE_RTAC() - PPELIMRPB)) and PPE_PRIMETTE * BOOL_0AM() * INDMONO() * positif_ou_nul((PPELIMRPHI - PPE_RCONTPC())) * positif_ou_nul((PPE_RTAC() - PPELIMRPB)) * (1 - positif(PPE_BOOL_NADAC()))) and PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * (PPE_PRIMETTE and BOOL_0AM() and INDMONO() and positif_ou_nul((PPELIMRPHI - PPE_RCONTPC())) and positif_ou_nul((PPE_RTAC() - PPELIMRPB)) and PPE_PRIMETTE * BOOL_0AM() * INDMONO() * positif_ou_nul((PPELIMRPHI - PPE_RCONTPC())) * positif_ou_nul((PPE_RTAC() - PPELIMRPB)) * (1 - positif(PPE_BOOL_NADAC()))) * (1 - V_CNR()))

    @cache_result
    def PPEPRIMETTE():
        """
        PPE:SUPPLEMENT PRIME DE 78 euros total (vous conjoint)
        """
        return (PPEPRIMETTEV() + PPEPRIMETTEC())

    @cache_result
    def BOOLENF():
        """
        Zone Situation de Famille - Presence d'enfants a charges
        """
        return positif((saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0CR', 0) + 0))

    @cache_result
    def PPE_BOOL_BT():
        """
        PPE:BOOLEEN CONDITION SUR LA CASE BT
        """
        return (saisie_variables.get('V_0BT', 0) and saisie_variables.get('V_0BT', 0) * positif((2 - saisie_variables.get('V_0AV', 0) - BOOLENF())))

    @cache_result
    def PPE_BOOL_MAJO():
        """
        PPE:BOOLEEN : ATTIBUTION DE LA MAJO DE 200F PAR PAC
        """
        return ((1 - PPE_BOOL_BT()) and (1 - PPE_BOOL_BT()) * positif(((positif_ou_nul((PPELIMRPH - PPE_RCONTPV())) and positif_ou_nul((PPE_RTAV() - PPELIMRPB)) and positif_ou_nul((PPELIMRPH - PPE_RCONTPV())) * positif_ou_nul((PPE_RTAV() - PPELIMRPB)) * (1 - positif(PPE_BOOL_NADAV()))) + (positif_ou_nul((PPELIMRPH - PPE_RCONTPC())) and positif_ou_nul((PPE_RTAC() - PPELIMRPB)) and positif_ou_nul((PPELIMRPH - PPE_RCONTPC())) * positif_ou_nul((PPE_RTAC() - PPELIMRPB)) * (1 - positif(PPE_BOOL_NADAC()))))))

    @cache_result
    def PPE_BOOL_MAJOBT():
        """
        PPE:BOOLEEN : ATTIBUTION DE LA MAJO DE 200F pour case T cochee
        """
        return (positif((positif_ou_nul((PPELIMRPH - PPE_RCONTPV())) and positif_ou_nul((PPE_RTAV() - PPELIMRPB)) and positif_ou_nul((PPELIMRPH - PPE_RCONTPV())) * positif_ou_nul((PPE_RTAV() - PPELIMRPB)) * (1 - positif(PPE_BOOL_NADAV())))) and positif((positif_ou_nul((PPELIMRPH - PPE_RCONTPV())) and positif_ou_nul((PPE_RTAV() - PPELIMRPB)) and positif_ou_nul((PPELIMRPH - PPE_RCONTPV())) * positif_ou_nul((PPE_RTAV() - PPELIMRPB)) * (1 - positif(PPE_BOOL_NADAV())))) * PPE_BOOL_BT())

    @cache_result
    def PPE_NB_PAC():
        """
        PPE:NOMBRE DE PERSONNE A CHARGE CALCULE
        """
        return (saisie_variables.get('V_0CF', 0) + saisie_variables.get('V_0CR', 0) + saisie_variables.get('V_0DJ', 0) + saisie_variables.get('V_0DN', 0))

    @cache_result
    def PPE_NB_PAC_QAR():
        """
        PPE:NOMBRE DE PERSONNE A CHARGE garde alternee
        """
        return (saisie_variables.get('V_0CH', 0) + saisie_variables.get('V_0DP', 0))

    @cache_result
    def PPEPRIME1():
        """
        PPE:PRIME TOUTE ACTIVITE -PAC1 
        From PPEPRIMEi
        """
        return arr(PPENARPRIME1())

    @cache_result
    def PPEPRIME2():
        """
        PPE:PRIME TOUTE ACTIVITE -PAC2 
        From PPEPRIMEi
        """
        return arr(PPENARPRIME2())

    @cache_result
    def PPEPRIME3():
        """
        PPE:PRIME TOUTE ACTIVITE -PAC3 
        From PPEPRIMEi
        """
        return arr(PPENARPRIME3())

    @cache_result
    def PPEPRIME4():
        """
        PPE:PRIME TOUTE ACTIVITE -PAC4 
        From PPEPRIMEi
        """
        return arr(PPENARPRIME4())

    @cache_result
    def PPEPRIMEU():
        """
        AVIS 2000:PPE:PRIME TOUTE ACTIVITE - Unique PAC
        From PPEPRIMEi
        """
        return arr(PPENARPRIMEU())

    @cache_result
    def PPEPRIMEN():
        """
        AVIS 2000:PPE:PRIME TOUTE ACTIVITE - plusieurs PAC
        From PPEPRIMEi
        """
        return arr(PPENARPRIMEN())

    @cache_result
    def PPE_NBNONELI():
        """
        PPE:NOMBRE DE PERSONNE A CHARGE NON ELIGIBLE A LA MAJO
        """
        return (somme([positif(PPEPRIME1()), positif(PPEPRIME2()), positif(PPEPRIME3()), positif(PPEPRIME4()), positif(PPEPRIMEU()), positif(PPEPRIMEN())]) + somme([(positif_ou_nul((PPE_RTA1() - PPELIMRPB)) and positif_ou_nul((PPE_RTA1() - PPELIMRPB)) * positif((PPE_RCONTP1() - PPELIMRPH))), (positif_ou_nul((PPE_RTA2() - PPELIMRPB)) and positif_ou_nul((PPE_RTA2() - PPELIMRPB)) * positif((PPE_RCONTP2() - PPELIMRPH))), (positif_ou_nul((PPE_RTA3() - PPELIMRPB)) and positif_ou_nul((PPE_RTA3() - PPELIMRPB)) * positif((PPE_RCONTP3() - PPELIMRPH))), (positif_ou_nul((PPE_RTA4() - PPELIMRPB)) and positif_ou_nul((PPE_RTA4() - PPELIMRPB)) * positif((PPE_RCONTP4() - PPELIMRPH))), (positif_ou_nul((PPE_RTAU() - PPELIMRPB)) and positif_ou_nul((PPE_RTAU() - PPELIMRPB)) * positif((PPE_RCONTPU() - PPELIMRPH))), (positif_ou_nul((PPE_RTAN() - PPELIMRPB)) and positif_ou_nul((PPE_RTAN() - PPELIMRPB)) * positif((PPE_RCONTPN() - PPELIMRPH)))]))

    @cache_result
    def PPE_BOOL_MONO():
        """
        PPE:BOOLEEN MAJO POUR MONOACTIF  
        """
        return ((1 - PPE_BOOL_MAJO()) and (1 - PPE_BOOL_MAJOBT()) and positif((PPE_NB_PAC() + PPE_NB_PAC_QAR() - PPE_NBNONELI())) and INDMONO() and (1 - PPE_BOOL_MAJO()) * (1 - PPE_BOOL_MAJOBT()) * positif((PPE_NB_PAC() + PPE_NB_PAC_QAR() - PPE_NBNONELI())) * INDMONO() * ((positif((PPE_BOOL_BT() + BOOL_0AM())) and positif_ou_nul((PPE_RTAV() - PPELIMRPB)) and positif_ou_nul((PPELIMRPH2 - PPE_RCONTPV())) and positif((PPE_BOOL_BT() + BOOL_0AM())) * positif_ou_nul((PPE_RTAV() - PPELIMRPB)) * positif_ou_nul((PPELIMRPH2 - PPE_RCONTPV())) * (1 - positif(PPE_BOOL_NADAV()))) + (positif(BOOL_0AM()) and positif_ou_nul((PPE_RTAC() - PPELIMRPB)) and positif_ou_nul((PPELIMRPH2 - PPE_RCONTPC())) and positif(BOOL_0AM()) * positif_ou_nul((PPE_RTAC() - PPELIMRPB)) * positif_ou_nul((PPELIMRPH2 - PPE_RCONTPC())) * (1 - positif(PPE_BOOL_NADAC())))))

    @cache_result
    def PPE_NBELIGI():
        """
        PPE:NOMBRE DE PERSONNE A CHARGE ELIGIBLE A LA MAJO
        """
        return (PPE_NB_PAC() + PPE_NB_PAC_QAR() - PPE_NBNONELI())

    @cache_result
    def PPE_NBMAJO():
        """
        PPE:NOMBRE DE PERSONNE A CHARGE pour calculer la majo
        """
        return ((positif_ou_nul((PPE_NB_PAC() - PPE_NBELIGI())) and positif_ou_nul((PPE_NB_PAC() - PPE_NBELIGI())) * PPE_NBELIGI()) + ((1 - positif_ou_nul((PPE_NB_PAC() - PPE_NBELIGI()))) and (1 - positif_ou_nul((PPE_NB_PAC() - PPE_NBELIGI()))) * PPE_NB_PAC()))

    @cache_result
    def PPE_NBMAJOQAR():
        """
        PPE:NOMBRE DE PERSONNE A CHARGE garde aleternee pour calculer la majo
        """
        return ((positif_ou_nul((PPE_NB_PAC() - PPE_NBELIGI())) and positif_ou_nul((PPE_NB_PAC() - PPE_NBELIGI())) * 0) + ((1 - positif_ou_nul((PPE_NB_PAC() - PPE_NBELIGI()))) and (1 - positif_ou_nul((PPE_NB_PAC() - PPE_NBELIGI()))) * (PPE_NBELIGI() - PPE_NB_PAC())))

    @cache_result
    def PPE_MONO():
        """
        PPE:MAJORATION POUR MONOACTIF  
        """
        return (PPE_BOOL_MONO() and (1 + PPE_BOOL_BT()) and PPE_BOOL_MONO() * (1 + PPE_BOOL_BT()) * ((positif(PPE_NBMAJO()) and positif(PPE_NBMAJO()) * PPEMONMAJO) + (null(PPE_NBMAJO()) and positif(PPE_NBMAJOQAR()) and PPEMONMAJO and null(PPE_NBMAJO()) * positif(PPE_NBMAJOQAR()) * PPEMONMAJO / 2)))

    @cache_result
    def PPE_MAJO():
        """
        PPE:MAJORATION 200F PAR PAC  
        """
        return (PPE_BOOL_MAJO() and positif(PPE_NBELIGI()) and PPE_BOOL_MAJO() * positif(PPE_NBELIGI()) * ((PPE_NBMAJO() and PPE_NBMAJO() * PPEMONMAJO) + (PPE_NBMAJOQAR() and PPEMONMAJO and PPE_NBMAJOQAR() * PPEMONMAJO / 2)))

    @cache_result
    def PPE_MABT():
        """
        PPE:MAJORATION 31 e PAR PAC pour une case T
        """
        return ((PPE_BOOL_MAJOBT() and positif(PPE_NBMAJO()) and PPE_BOOL_MAJOBT() * positif(PPE_NBMAJO()) * (((PPE_NBMAJO() + 1) and (PPE_NBMAJO() + 1) * PPEMONMAJO) + (PPE_NBMAJOQAR() and PPEMONMAJO and PPE_NBMAJOQAR() * PPEMONMAJO / 2))) + (PPE_BOOL_MAJOBT() and null((PPE_NBMAJO() + 0)) and positif(PPE_NBMAJOQAR()) and PPE_BOOL_MAJOBT() * null((PPE_NBMAJO() + 0)) * positif(PPE_NBMAJOQAR()) * ((positif((PPE_NBMAJOQAR() - 1)) and PPE_NBMAJOQAR() and PPEMONMAJO and positif((PPE_NBMAJOQAR() - 1)) * PPE_NBMAJOQAR() * PPEMONMAJO / 2) + PPEMONMAJO)) + (positif_ou_nul((PPELIMRPH2 - PPE_RCONTPV())) and positif_ou_nul((PPE_RTAV() - PPELIMRPB)) and (1 - PPE_BOOL_MAJOBT()) and (1 - positif(PPE_BOOL_NADAV())) and PPE_BOOL_BT() and positif_ou_nul((PPELIMRPH2 - PPE_RCONTPV())) * positif_ou_nul((PPE_RTAV() - PPELIMRPB)) * (1 - PPE_BOOL_MAJOBT()) * (1 - positif(PPE_BOOL_NADAV())) * PPE_BOOL_BT() * ((positif(PPE_NB_PAC()) and 2 and positif(PPE_NB_PAC()) * 2 * PPEMONMAJO) + (positif(PPE_NB_PAC_QAR()) and null((PPE_NB_PAC() + 0)) and positif(PPE_NB_PAC_QAR()) * null((PPE_NB_PAC() + 0)) * PPEMONMAJO))))

    @cache_result
    def PPEMAJORETTE():
        """
        AVIS 2000:PPE:MAJORATION FINALE(PAC + MONOACTIF)
        """
        return (PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and arr((PPE_MONO() + PPE_MAJO() + PPE_MABT())) and PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * arr((PPE_MONO() + PPE_MAJO() + PPE_MABT())) * (1 - V_CNR()))

    @cache_result
    def PPEPRIMEV():
        """
        Prime pour l'emploi - Vous
        From PPEPRIMEi
        """
        return arr(PPENARPRIMEV())

    @cache_result
    def PPEPRIMEC():
        """
        AVIS 2000: PPE:PRIME TOUTE ACTIVITE -CJT
        From PPEPRIMEi
        """
        return arr(PPENARPRIMEC())

    @cache_result
    def PPENEXOV():
        """
        Indicateur presence temps pour salaires et salaires exo - declarant 1
        From PPENEXOi
        """
        return (null((saisie_variables.get('PPETPV', 0) + 0)) + positif((saisie_variables.get('TSHALLOV', 0) + 0)) + positif((saisie_variables.get('SALEXTV', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPENHV', 0) + 0))) + (8 and 8 * positif((saisie_variables.get('PPEXTV', 0) + 0))))

    @cache_result
    def PPENEXOC():
        """
        Indicateur presence temps pour salaires et salaires exo - declarant 2
        From PPENEXOi
        """
        return (null((saisie_variables.get('PPETPC', 0) + 0)) + positif((saisie_variables.get('TSHALLOC', 0) + 0)) + positif((saisie_variables.get('SALEXTC', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPENHC', 0) + 0))) + (8 and 8 * positif((saisie_variables.get('PPEXTC', 0) + 0))))

    @cache_result
    def PPENEXO1():
        """
        Indicateur presence temps pour salaires et salaires exo - PAC 1
        From PPENEXOi
        """
        return (null((saisie_variables.get('PPETPP1', 0) + 0)) + positif((saisie_variables.get('TSHALLO1', 0) + 0)) + positif((saisie_variables.get('SALEXT1', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPENHP1', 0) + 0))) + (8 and 8 * positif((saisie_variables.get('PPEXT1', 0) + 0))))

    @cache_result
    def PPENEXO2():
        """
        Indicateur presence temps pour salaires et salaires exo - PAC 2
        From PPENEXOi
        """
        return (null((saisie_variables.get('PPETPP2', 0) + 0)) + positif((saisie_variables.get('TSHALLO2', 0) + 0)) + positif((saisie_variables.get('SALEXT2', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPENHP2', 0) + 0))) + (8 and 8 * positif((saisie_variables.get('PPEXT2', 0) + 0))))

    @cache_result
    def PPENEXO3():
        """
        Indicateur presence temps pour salaires et salaires exo - PAC 3
        From PPENEXOi
        """
        return (null((saisie_variables.get('PPETPP3', 0) + 0)) + positif((saisie_variables.get('TSHALLO3', 0) + 0)) + positif((saisie_variables.get('SALEXT3', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPENHP3', 0) + 0))) + (8 and 8 * positif((saisie_variables.get('PPEXT3', 0) + 0))))

    @cache_result
    def PPENEXO4():
        """
        Indicateur presence temps pour salaires et salaires exo - PAC 4
        From PPENEXOi
        """
        return (null((saisie_variables.get('PPETPP4', 0) + 0)) + positif((saisie_variables.get('TSHALLO4', 0) + 0)) + positif((saisie_variables.get('SALEXT4', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPENHP4', 0) + 0))) + (8 and 8 * positif((saisie_variables.get('PPEXT4', 0) + 0))))

    @cache_result
    def PPEPEXOV():
        """
        Indicateur presence temps revenu pro et salaires exo - declarant 1 
        From PPEPEXOi
        """
        return (positif((PPE_AVRPRO1V() + 0)) + positif((saisie_variables.get('SALEXTV', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPENJV', 0) + saisie_variables.get('PPEACV', 0) + 0))) + (8 and 8 * positif((saisie_variables.get('PPEXTV', 0) + saisie_variables.get('PPETPV', 0) + 0))))

    @cache_result
    def PPEPEXOC():
        """
        Indicateur presence temps revenu pro et salaires exo - declarant 2
        From PPEPEXOi
        """
        return (positif((PPE_AVRPRO1C() + 0)) + positif((saisie_variables.get('SALEXTC', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPENJC', 0) + saisie_variables.get('PPEACC', 0) + 0))) + (8 and 8 * positif((saisie_variables.get('PPEXTC', 0) + saisie_variables.get('PPETPC', 0) + 0))))

    @cache_result
    def PPEPEXO1():
        """
        Indicateur presence temps pour revenu pro et salaires exo - PAC 1
        From PPEPEXOi
        """
        return (positif((PPE_AVRPRO1P() + 0)) + positif((saisie_variables.get('SALEXT1', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPEXT1', 0) + saisie_variables.get('PPETPP1', 0) + 0))))

    @cache_result
    def PPEPEXO2():
        """
        Indicateur presence temps pour revenu pro et salaires exo - PAC 2
        From PPEPEXOi
        """
        return (positif((PPE_AVRPRO1P() + 0)) + positif((saisie_variables.get('SALEXT2', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPEXT2', 0) + saisie_variables.get('PPETPP2', 0) + 0))))

    @cache_result
    def PPEPEXO3():
        """
        Indicateur presence temps pour revenu pro et salaires exo - PAC 3
        From PPEPEXOi
        """
        return (positif((PPE_AVRPRO1P() + 0)) + positif((saisie_variables.get('SALEXT3', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPEXT3', 0) + saisie_variables.get('PPETPP3', 0) + 0))))

    @cache_result
    def PPEPEXO4():
        """
        Indicateur presence temps pour revenu pro et salaires exo - PAC 4
        From PPEPEXOi
        """
        return (positif((PPE_AVRPRO1P() + 0)) + positif((saisie_variables.get('SALEXT4', 0) + 0)) + (4 and 4 * positif((saisie_variables.get('PPEXT4', 0) + saisie_variables.get('PPETPP4', 0) + 0))))

    @cache_result
    def PPETOT():
        """
        Montant total PPE
        """
        return (positif((somme([PPENARPRIME1(), PPENARPRIME2(), PPENARPRIME3(), PPENARPRIME4(), PPENARPRIMEV(), PPENARPRIMEC(), PPENARPRIMEU(), PPENARPRIMEN()]) + PPEPRIMETTE() + PPEMAJORETTE() + 0 + somme([((1 - positif((PPELIMRPH - PPE_RCONTP1() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN1() and (1 - positif((PPELIMRPH - PPE_RCONTP1() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN1() * PPE_BOOL_MAX1()), ((1 - positif((PPELIMRPH - PPE_RCONTP2() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN2() and (1 - positif((PPELIMRPH - PPE_RCONTP2() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN2() * PPE_BOOL_MAX2()), ((1 - positif((PPELIMRPH - PPE_RCONTP3() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN3() and (1 - positif((PPELIMRPH - PPE_RCONTP3() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN3() * PPE_BOOL_MAX3()), ((1 - positif((PPELIMRPH - PPE_RCONTP4() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN4() and (1 - positif((PPELIMRPH - PPE_RCONTP4() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN4() * PPE_BOOL_MAX4()), ((1 - positif((PPELIMRPH - PPE_RCONTPV() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINV() and (1 - positif((PPELIMRPH - PPE_RCONTPV() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINV() * PPE_BOOL_MAXV()), ((1 - positif((PPELIMRPH - PPE_RCONTPC() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINC() and (1 - positif((PPELIMRPH - PPE_RCONTPC() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINC() * PPE_BOOL_MAXC()), ((1 - positif((PPELIMRPH - PPE_RCONTPU() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINU() and (1 - positif((PPELIMRPH - PPE_RCONTPU() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINU() * PPE_BOOL_MAXU()), ((1 - positif((PPELIMRPH - PPE_RCONTPN() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINN() and (1 - positif((PPELIMRPH - PPE_RCONTPN() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINN() * PPE_BOOL_MAXN())]) + somme([((1 - positif((PPELIMRPH2 - PPE_RCONTP1() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN1() and (1 - positif((PPELIMRPH2 - PPE_RCONTP1() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN1() * PPE_BOOL_MAX1()), ((1 - positif((PPELIMRPH2 - PPE_RCONTP2() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN2() and (1 - positif((PPELIMRPH2 - PPE_RCONTP2() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN2() * PPE_BOOL_MAX2()), ((1 - positif((PPELIMRPH2 - PPE_RCONTP3() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN3() and (1 - positif((PPELIMRPH2 - PPE_RCONTP3() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN3() * PPE_BOOL_MAX3()), ((1 - positif((PPELIMRPH2 - PPE_RCONTP4() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN4() and (1 - positif((PPELIMRPH2 - PPE_RCONTP4() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN4() * PPE_BOOL_MAX4()), ((1 - positif((PPELIMRPH2 - PPE_RCONTPV() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINV() and (1 - positif((PPELIMRPH2 - PPE_RCONTPV() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINV() * PPE_BOOL_MAXV()), ((1 - positif((PPELIMRPH2 - PPE_RCONTPC() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINC() and (1 - positif((PPELIMRPH2 - PPE_RCONTPC() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINC() * PPE_BOOL_MAXC()), ((1 - positif((PPELIMRPH2 - PPE_RCONTPU() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINU() and (1 - positif((PPELIMRPH2 - PPE_RCONTPU() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINU() * PPE_BOOL_MAXU()), ((1 - positif((PPELIMRPH2 - PPE_RCONTPN() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINN() and (1 - positif((PPELIMRPH2 - PPE_RCONTPN() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINN() * PPE_BOOL_MAXN())]))) and max(0, arr((somme([PPEPRIME1(), PPEPRIME2(), PPEPRIME3(), PPEPRIME4(), PPEPRIMEV(), PPEPRIMEC(), PPEPRIMEU(), PPEPRIMEN()]) + PPEPRIMETTE() + PPEMAJORETTE()))) and positif_ou_nul(arr((somme([PPEPRIME1(), PPEPRIME2(), PPEPRIME3(), PPEPRIME4(), PPEPRIMEV(), PPEPRIMEC(), PPEPRIMEU(), PPEPRIMEN()]) + PPEPRIMETTE() + PPEMAJORETTE() - PPELIMTOT))) and (1 - positif((saisie_variables.get('V_PPEISF', 0) + saisie_variables.get('PPEISFPIR', 0) + saisie_variables.get('PPEREVPRO', 0)))) and (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) and (1 - null((7 - PPENEXOV()))) and (1 - null((11 - PPENEXOV()))) and (1 - null((7 - PPENEXOC()))) and (1 - null((11 - PPENEXOC()))) and (1 - null((7 - PPENEXO1()))) and (1 - null((11 - PPENEXO1()))) and (1 - null((7 - PPENEXO2()))) and (1 - null((11 - PPENEXO2()))) and (1 - null((7 - PPENEXO3()))) and (1 - null((11 - PPENEXO3()))) and (1 - null((7 - PPENEXO4()))) and (1 - null((11 - PPENEXO4()))) and (1 - null((2 - PPEPEXOV()))) and (1 - null((2 - PPEPEXOC()))) and (1 - null((2 - PPEPEXO1()))) and (1 - null((2 - PPEPEXO2()))) and (1 - null((2 - PPEPEXO3()))) and (1 - null((2 - PPEPEXO4()))) and positif((somme([PPENARPRIME1(), PPENARPRIME2(), PPENARPRIME3(), PPENARPRIME4(), PPENARPRIMEV(), PPENARPRIMEC(), PPENARPRIMEU(), PPENARPRIMEN()]) + PPEPRIMETTE() + PPEMAJORETTE() + 0 + somme([((1 - positif((PPELIMRPH - PPE_RCONTP1() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN1() and (1 - positif((PPELIMRPH - PPE_RCONTP1() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN1() * PPE_BOOL_MAX1()), ((1 - positif((PPELIMRPH - PPE_RCONTP2() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN2() and (1 - positif((PPELIMRPH - PPE_RCONTP2() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN2() * PPE_BOOL_MAX2()), ((1 - positif((PPELIMRPH - PPE_RCONTP3() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN3() and (1 - positif((PPELIMRPH - PPE_RCONTP3() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN3() * PPE_BOOL_MAX3()), ((1 - positif((PPELIMRPH - PPE_RCONTP4() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN4() and (1 - positif((PPELIMRPH - PPE_RCONTP4() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN4() * PPE_BOOL_MAX4()), ((1 - positif((PPELIMRPH - PPE_RCONTPV() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINV() and (1 - positif((PPELIMRPH - PPE_RCONTPV() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINV() * PPE_BOOL_MAXV()), ((1 - positif((PPELIMRPH - PPE_RCONTPC() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINC() and (1 - positif((PPELIMRPH - PPE_RCONTPC() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINC() * PPE_BOOL_MAXC()), ((1 - positif((PPELIMRPH - PPE_RCONTPU() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINU() and (1 - positif((PPELIMRPH - PPE_RCONTPU() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINU() * PPE_BOOL_MAXU()), ((1 - positif((PPELIMRPH - PPE_RCONTPN() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINN() and (1 - positif((PPELIMRPH - PPE_RCONTPN() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINN() * PPE_BOOL_MAXN())]) + somme([((1 - positif((PPELIMRPH2 - PPE_RCONTP1() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN1() and (1 - positif((PPELIMRPH2 - PPE_RCONTP1() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN1() * PPE_BOOL_MAX1()), ((1 - positif((PPELIMRPH2 - PPE_RCONTP2() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN2() and (1 - positif((PPELIMRPH2 - PPE_RCONTP2() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN2() * PPE_BOOL_MAX2()), ((1 - positif((PPELIMRPH2 - PPE_RCONTP3() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN3() and (1 - positif((PPELIMRPH2 - PPE_RCONTP3() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN3() * PPE_BOOL_MAX3()), ((1 - positif((PPELIMRPH2 - PPE_RCONTP4() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MIN4() and (1 - positif((PPELIMRPH2 - PPE_RCONTP4() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MIN4() * PPE_BOOL_MAX4()), ((1 - positif((PPELIMRPH2 - PPE_RCONTPV() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINV() and (1 - positif((PPELIMRPH2 - PPE_RCONTPV() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINV() * PPE_BOOL_MAXV()), ((1 - positif((PPELIMRPH2 - PPE_RCONTPC() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINC() and (1 - positif((PPELIMRPH2 - PPE_RCONTPC() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINC() * PPE_BOOL_MAXC()), ((1 - positif((PPELIMRPH2 - PPE_RCONTPU() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINU() and (1 - positif((PPELIMRPH2 - PPE_RCONTPU() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINU() * PPE_BOOL_MAXU()), ((1 - positif((PPELIMRPH2 - PPE_RCONTPN() - 10))) and PPE_BOOL_KIR_COND() and PPE_BOOL_ACT_COND() and PPE_BOOL_MINN() and (1 - positif((PPELIMRPH2 - PPE_RCONTPN() - 10))) * PPE_BOOL_KIR_COND() * PPE_BOOL_ACT_COND() * PPE_BOOL_MINN() * PPE_BOOL_MAXN())]))) * max(0, arr((somme([PPEPRIME1(), PPEPRIME2(), PPEPRIME3(), PPEPRIME4(), PPEPRIMEV(), PPEPRIMEC(), PPEPRIMEU(), PPEPRIMEN()]) + PPEPRIMETTE() + PPEMAJORETTE()))) * positif_ou_nul(arr((somme([PPEPRIME1(), PPEPRIME2(), PPEPRIME3(), PPEPRIME4(), PPEPRIMEV(), PPEPRIMEC(), PPEPRIMEU(), PPEPRIMEN()]) + PPEPRIMETTE() + PPEMAJORETTE() - PPELIMTOT))) * (1 - positif((saisie_variables.get('V_PPEISF', 0) + saisie_variables.get('PPEISFPIR', 0) + saisie_variables.get('PPEREVPRO', 0)))) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) * (1 - null((7 - PPENEXOV()))) * (1 - null((11 - PPENEXOV()))) * (1 - null((7 - PPENEXOC()))) * (1 - null((11 - PPENEXOC()))) * (1 - null((7 - PPENEXO1()))) * (1 - null((11 - PPENEXO1()))) * (1 - null((7 - PPENEXO2()))) * (1 - null((11 - PPENEXO2()))) * (1 - null((7 - PPENEXO3()))) * (1 - null((11 - PPENEXO3()))) * (1 - null((7 - PPENEXO4()))) * (1 - null((11 - PPENEXO4()))) * (1 - null((2 - PPEPEXOV()))) * (1 - null((2 - PPEPEXOC()))) * (1 - null((2 - PPEPEXO1()))) * (1 - null((2 - PPEPEXO2()))) * (1 - null((2 - PPEPEXO3()))) * (1 - null((2 - PPEPEXO4()))) * (1 - V_CNR()))

    @cache_result
    def PPETOTMAY():
        """
        Montant total PPE Mayotte
        """
        return (arr((PPETOT() and 81 and PPETOT() * 81 / 100)) and positif_ou_nul((arr((PPETOT() and 81 and PPETOT() * 81 / 100)) - PPELIMTOT)) and arr((PPETOT() and 81 and PPETOT() * 81 / 100)) * positif_ou_nul((arr((PPETOT() and 81 and PPETOT() * 81 / 100)) - PPELIMTOT)) * null((7 - saisie_variables.get('V_REGCO', 0))))

    @cache_result
    def PPETOTX():
        """
        Montant total PPE (metropole et Mayotte)
        """
        return ((PPETOT() and PPETOT() * (1 - null((7 - saisie_variables.get('V_REGCO', 0))))) + PPETOTMAY())

    @cache_result
    def PPERSATOT():
        """
        Montant total RSA pour le foyer
        """
        return (saisie_variables.get('RSAFOYER', 0) + saisie_variables.get('RSAPAC1', 0) + saisie_variables.get('RSAPAC2', 0))

    @cache_result
    def PPERSA():
        """
        Montant total RSA pour le foyer
        """
        return (min(PPETOTX(), PPERSATOT()) and min(PPETOTX(), PPERSATOT()) * (1 - V_CNR()))

    @cache_result
    def CI2CK():
        """
        Credit d'impot RCM ligne 2CK
        """
        return (saisie_variables.get('COD2CK', 0) and (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) and saisie_variables.get('COD2CK', 0) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))) * (1 - positif((null((2 - saisie_variables.get('V_REGCO', 0))) + null((4 - saisie_variables.get('V_REGCO', 0)))))))

    @cache_result
    def BCIFORETUA():
        """
        Depenses CI Foret
        """
        return (max(0, min(saisie_variables.get('COD7UA', 0), max(0, (PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM()))))) and max(0, min(saisie_variables.get('COD7UA', 0), max(0, (PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM()))))) * (1 - V_CNR()))

    @cache_result
    def BCIFORETUB():
        """
        Depenses CI Foret
        """
        return (max(0, min(saisie_variables.get('COD7UB', 0), max(0, ((PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM())) - BCIFORETUA())))) and max(0, min(saisie_variables.get('COD7UB', 0), max(0, ((PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM())) - BCIFORETUA())))) * (1 - V_CNR()))

    @cache_result
    def BCIFORETUP():
        """
        Depenses CI Foret
        """
        return (max(0, min(saisie_variables.get('RDFORESTRA', 0), ((PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM())) - BCIFORETUA() - BCIFORETUB()))) and max(0, min(saisie_variables.get('RDFORESTRA', 0), ((PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM())) - BCIFORETUA() - BCIFORETUB()))) * (1 - V_CNR()))

    @cache_result
    def BCIFORETUT():
        """
        Depenses CI Foret
        """
        return (max(0, min(saisie_variables.get('SINISFORET', 0), max(0, ((PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM())) - BCIFORETUA() - BCIFORETUB() - BCIFORETUP())))) and max(0, min(saisie_variables.get('SINISFORET', 0), max(0, ((PLAF_FOREST1 and PLAF_FOREST1 * (1 + BOOL_0AM())) - BCIFORETUA() - BCIFORETUB() - BCIFORETUP())))) * (1 - V_CNR()))

    @cache_result
    def BCIFORETUI():
        """
        Depenses CI Foret
        """
        return (max(0, min(saisie_variables.get('COD7UI', 0), max(0, (PLAF_FOREST2 and PLAF_FOREST2 * (1 + BOOL_0AM()))))) and max(0, min(saisie_variables.get('COD7UI', 0), max(0, (PLAF_FOREST2 and PLAF_FOREST2 * (1 + BOOL_0AM()))))) * (1 - V_CNR()))

    @cache_result
    def BCIFORETUQ():
        """
        Depenses CI Foret
        """
        return (max(0, min(saisie_variables.get('RDFORESTGES', 0), ((PLAF_FOREST2 and PLAF_FOREST2 * (1 + BOOL_0AM())) - BCIFORETUI()))) and max(0, min(saisie_variables.get('RDFORESTGES', 0), ((PLAF_FOREST2 and PLAF_FOREST2 * (1 + BOOL_0AM())) - BCIFORETUI()))) * (1 - V_CNR()))

    @cache_result
    def CIFORET():
        """
        Credit impot foret
        """
        return arr(((BCIFORETUP() and TX18 and BCIFORETUP() * TX18 / 100) + (BCIFORETUT() and TX18 and BCIFORETUT() * TX18 / 100) + (BCIFORETUA() and TX25 and BCIFORETUA() * TX25 / 100) + (BCIFORETUB() and TX25 and BCIFORETUB() * TX25 / 100) + (BCIFORETUQ() and TX18 and BCIFORETUQ() * TX18 / 100) + (BCIFORETUI() and TX25 and BCIFORETUI() * TX25 / 100)))

    @cache_result
    def CIEXCEDENT():
        """
        Credit d'impot pour Non Resident code 3VE et 3UV
        """
        return (arr(((saisie_variables.get('COD3VE', 0) and TX45 and saisie_variables.get('COD3VE', 0) * TX45 / 100) + (saisie_variables.get('COD3UV', 0) and TX30 and saisie_variables.get('COD3UV', 0) * TX30 / 100))) and arr(((saisie_variables.get('COD3VE', 0) and TX45 and saisie_variables.get('COD3VE', 0) * TX45 / 100) + (saisie_variables.get('COD3UV', 0) and TX30 and saisie_variables.get('COD3UV', 0) * TX30 / 100))) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))

    @cache_result
    def IRE():
        """
        Imputations restituables
        """
        return ((1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0) + 0))) and (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0) + 0))) * (CIDIREPARGNE() + EPAV() + CRICH() + saisie_variables.get('CICORSENOW', 0) + CIGE() + CIDEVDUR() + CITEC() + saisie_variables.get('IPELUS', 0) + CICA() + CIGARD() + CISYND() + CIPRETUD() + CIADCRE() + CIHABPRIN() + saisie_variables.get('CREFAM', 0) + saisie_variables.get('CREAPP', 0) + saisie_variables.get('CREAGRIBIO', 0) + saisie_variables.get('CREPROSP', 0) + CRESINTER() + saisie_variables.get('CREFORMCHENT', 0) + saisie_variables.get('CREINTERESSE', 0) + saisie_variables.get('CREARTS', 0) + CICONGAGRI() + saisie_variables.get('CRERESTAU', 0) + CILOYIMP() + saisie_variables.get('AUTOVERSLIB', 0) + PPETOTX() - PPERSA() + CI2CK() + CIFORET() + CIEXCEDENT() + (saisie_variables.get('COD8TL', 0) and saisie_variables.get('COD8TL', 0) * (1 - positif((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)))))))

    @cache_result
    def IAR():
        """
        Impot apres imputation restituables
        """
        return (min(0, (IAN() + base_variables['AVFISCOPTER'] - IRE())) + max(0, (IAN() + base_variables['AVFISCOPTER'] - IRE())))

    @cache_result
    def IBM13():
        """
        impot avant avantage complementaire enfant etudiant
        """
        return (IAD11() + ITP() + REI() + saisie_variables.get('AUTOVERSSUP', 0) + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() + base_variables['CHRAPRES'] + base_variables['AVFISCOPTER'])

    @cache_result
    def IAMD1():
        """
        Impot apres retrait de l'avantage en impot sur dons
        """
        return IBM13()

    @cache_result
    def IRN():
        """
        Impot net ou restitution nette
        """
        return (min(0, (IAN() + base_variables['AVFISCOPTER'] - IRE())) + (max(0, (IAN() + base_variables['AVFISCOPTER'] - IRE())) and max(0, (IAN() + base_variables['AVFISCOPTER'] - IRE())) * positif((IAMD1() + 1 - SEUIL_61))))

    @cache_result
    def BTO():
        """
        Base des penalites TO
        """
        return (max(0, (IRN() - saisie_variables.get('IRANT', 0))) and max(0, (IRN() - saisie_variables.get('IRANT', 0))) * positif((IAMD1() + 1 - SEUIL_61)))

    @cache_result
    def COPETO():
        """
        Taux de penalite du a la saisie des codes 9YT et 9YW
        """
        return 10 if ((saisie_variables.get('CMAJ', 0) == 7 or saisie_variables.get('CMAJ', 0) == 10 or saisie_variables.get('CMAJ', 0) == 17 or saisie_variables.get('CMAJ', 0) == 18)) else (40 if ((saisie_variables.get('CMAJ', 0) == 8 or saisie_variables.get('CMAJ', 0) == 11)) else 80)

    @cache_result
    def BCICAP():
        """
        Credit sur prelevement liberatoire 7,5% base
        """
        return min(IPCAPTAXTOT(), arr(((saisie_variables.get('PRELIBXT', 0) - arr((saisie_variables.get('PRELIBXT', 0) and TX10 and saisie_variables.get('PRELIBXT', 0) * TX10 / 100))) and T_PCAPTAX and (saisie_variables.get('PRELIBXT', 0) - arr((saisie_variables.get('PRELIBXT', 0) and TX10 and saisie_variables.get('PRELIBXT', 0) * TX10 / 100))) * T_PCAPTAX / 100)))

    @cache_result
    def CICAP():
        """
        Credit sur prelevement liberatoire 7,5%
        """
        return max(0, min((IRB() + TAXASSUR() + IPCAPTAXTOT() + TAXLOY() + base_variables['CHRAPRES'] - base_variables['AVFISCOPTER']), min(IPCAPTAXTOT(), BCICAP())))

    @cache_result
    def IPCAPTAXT():
        """
        Impot liberatoire pension capital taxable total
        """
        return (IPCAPTAXTOT() - CICAP())

    @cache_result
    def BINRIR():
        """
        Calcul INR : Base IR pour prorata 9YI
        """
        return (max(0, (IRN() - saisie_variables.get('IRANT', 0))) + max(0, (TAXASSUR() - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, (IRN() - saisie_variables.get('IRANT', 0))))) + max(0, (IPCAPTAXT() - min((IPCAPTAXT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR())))) + max(0, (TAXLOY() - min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - IPCAPTAXT()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT())))) + max(0, (base_variables['IHAUTREVT'] + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT() + TAXLOY())))))

    @cache_result
    def RFCEPS():
        """
        Revenu foncier total apres imputation deficits 3CE art. 1731bis
        """
        return ((max(0, (RFCD() - saisie_variables.get('RFDORD', 0))) and max(0, (RFCD() - saisie_variables.get('RFDORD', 0))) * (1 - positif(base_variables['ART1731BIS']))) + (max(0, (RFCD() - DEFRF4BB())) and max(0, (RFCD() - DEFRF4BB())) * positif(base_variables['ART1731BIS'])))

    @cache_result
    def RFCFPS():
        """
        Revenu foncier total apres imputation deficits 3CF art. 1731bis
        """
        return (RFCEPS() - (saisie_variables.get('RFDHIS', 0) and saisie_variables.get('RFDHIS', 0) * (1 - positif(base_variables['PREM8_11']))))

    @cache_result
    def DEFRF4BC():
        """
        deficeit suite a imputaion 2CA
        """
        return (max(0, min(saisie_variables.get('RFDHIS', 0), (max(base_variables['DEF4BC1731'], max(base_variables['DEF4BC_P'], base_variables['DEF4BCP2'])) + saisie_variables.get('RFDHIS', 0)))) and positif((base_variables['DEFRIGLOBINF'] + base_variables['DEFRIGLOBSUP'])) and max(0, min(saisie_variables.get('RFDHIS', 0), (max(base_variables['DEF4BC1731'], max(base_variables['DEF4BC_P'], base_variables['DEF4BCP2'])) + saisie_variables.get('RFDHIS', 0)))) * positif((base_variables['DEFRIGLOBINF'] + base_variables['DEFRIGLOBSUP'])) * (1 - base_variables['PREM8_11']))

    @cache_result
    def RDRFPS():
        """
        Revenus fonciers taxes aux CSG RDS PRS pour article 1731BIS
        """
        return ((max(0, (RFCFPS() + saisie_variables.get('RFMIC', 0) - MICFR() - saisie_variables.get('RFDANT', 0))) and max(0, (RFCFPS() + saisie_variables.get('RFMIC', 0) - MICFR() - saisie_variables.get('RFDANT', 0))) * (1 - positif(base_variables['ART1731BIS']))) + (max(0, (RRFI() + REVRF() + DEFRF4BC())) and max(0, (RRFI() + REVRF() + DEFRF4BC())) * positif(base_variables['ART1731BIS'])))

    @cache_result
    def RVBCSG():
        """
        Base CSG pour les rentes viageres
        """
        return (arr(((saisie_variables.get('RVB1', 0) + saisie_variables.get('RENTAX', 0)) and TXRVT1 and (saisie_variables.get('RVB1', 0) + saisie_variables.get('RENTAX', 0)) * TXRVT1 / 100)) + arr(((saisie_variables.get('RVB2', 0) + saisie_variables.get('RENTAX5', 0)) and TXRVT2 and (saisie_variables.get('RVB2', 0) + saisie_variables.get('RENTAX5', 0)) * TXRVT2 / 100)) + arr(((saisie_variables.get('RVB3', 0) + saisie_variables.get('RENTAX6', 0)) and TXRVT3 and (saisie_variables.get('RVB3', 0) + saisie_variables.get('RENTAX6', 0)) * TXRVT3 / 100)) + arr(((saisie_variables.get('RVB4', 0) + saisie_variables.get('RENTAX7', 0)) and TXRVT4 and (saisie_variables.get('RVB4', 0) + saisie_variables.get('RENTAX7', 0)) * TXRVT4 / 100)))

    @cache_result
    def RDRV():
        """
        Rentes Viageres taxees aux CSG RDS PRS
        """
        return RVBCSG()

    @cache_result
    def DRTNC():
        """
        Revenu TOTAL titres non cotes PEA
        """
        return (saisie_variables.get('RCMTNC', 0) + saisie_variables.get('REVPEA', 0))

    @cache_result
    def RDRCM1():
        """
        Revenus de capitaux mobiliers taxes a la CRDS et a la CSG
        """
        return (TRCMABD() + DRTNC() + RAVC() + RCMNAB() + RTCAR() + RCMPRIVM() + saisie_variables.get('RCMIMPAT', 0) - saisie_variables.get('RCMSOC', 0) - (positif(saisie_variables.get('RCMRDS', 0)) and positif(saisie_variables.get('RCMRDS', 0)) * min(saisie_variables.get('RCMRDS', 0), (saisie_variables.get('RCMABD', 0) + saisie_variables.get('REVACT', 0) + saisie_variables.get('RCMAV', 0) + saisie_variables.get('PROVIE', 0) + saisie_variables.get('RCMHAD', 0) + saisie_variables.get('DISQUO', 0) + saisie_variables.get('RCMHAB', 0) + saisie_variables.get('INTERE', 0) + saisie_variables.get('RCMTNC', 0) + saisie_variables.get('REVPEA', 0) + saisie_variables.get('COD2FA', 0)))))

    @cache_result
    def RDRCM1NEGPLAF():
        """
        Revenus de capitaux mobiliers taxes a la CRDS et a la CSG negatif
        """
        return min(saisie_variables.get('COD2FA', 0), abs(RDRCM1()))

    @cache_result
    def RDRCM1BIS():
        """
        Revenus de capitaux mobiliers taxes a la CRDS et a la CSG
        """
        return (((1 - positif(RDRCM1())) and RDRCM1NEGPLAF() and (1 - positif(RDRCM1())) * RDRCM1NEGPLAF() * -1) + (positif_ou_nul(RDRCM1()) and positif_ou_nul(RDRCM1()) * RDRCM1()))

    @cache_result
    def RDRCM():
        """
        Revenus de capitaux mobiliers taxes a la CRDS et a la CSG
        """
        return (RDRCM1BIS() + saisie_variables.get('COD2FA', 0))

    @cache_result
    def NPLOCCGASV():
        """
        loctation meublee non pro  cga vous
        """
        return ((arr((NPLOCCGAV() and saisie_variables.get('LOCNPCGAV', 0) and NPLOCCGAV() * saisie_variables.get('LOCNPCGAV', 0) / (saisie_variables.get('LOCNPCGAV', 0) + saisie_variables.get('LOCGITCV', 0)))) and arr((NPLOCCGAV() and saisie_variables.get('LOCNPCGAV', 0) and NPLOCCGAV() * saisie_variables.get('LOCNPCGAV', 0) / (saisie_variables.get('LOCNPCGAV', 0) + saisie_variables.get('LOCGITCV', 0)))) * present(saisie_variables.get('LOCNPCGAV', 0))) + (min(0, NPLOCCGAV()) and min(0, NPLOCCGAV()) * (1 - present(saisie_variables.get('LOCNPCGAV', 0)))))

    @cache_result
    def NPLOCSV():
        """
        loctation meublee non pro  hors cga soumise prel soc
        """
        return ((arr((NPLOCV() and saisie_variables.get('LOCNPV', 0) and NPLOCV() * saisie_variables.get('LOCNPV', 0) / (saisie_variables.get('LOCNPV', 0) + saisie_variables.get('LOCGITHCV', 0)))) and arr((NPLOCV() and saisie_variables.get('LOCNPV', 0) and NPLOCV() * saisie_variables.get('LOCNPV', 0) / (saisie_variables.get('LOCNPV', 0) + saisie_variables.get('LOCGITHCV', 0)))) * positif(saisie_variables.get('LOCNPV', 0))) + (min(0, NPLOCV()) and min(0, NPLOCV()) * (1 - positif(saisie_variables.get('LOCNPV', 0)))))

    @cache_result
    def MIBNETNPVLSV():
        """
        ventes net  non pro soumise aux prestations soc.
        From MIBNETNPVLSi
        """
        return arr((MIB_NETNPVLV() and saisie_variables.get('MIBGITEV', 0) and MIB_NETNPVLV() * saisie_variables.get('MIBGITEV', 0) / (saisie_variables.get('MIBGITEV', 0) + saisie_variables.get('LOCGITV', 0))))

    @cache_result
    def NPLOCNETTSV():
        """
        loctation meublee non pro sous et hors CGA calcul  soumis prel
        """
        return (NPLOCCGASV() + NPLOCSV() + MIBNETNPVLSV() + MIB_NETNPPLV())

    @cache_result
    def NPLOCCGASC():
        """
        loctation meublee non pro  cga 
        """
        return ((arr((NPLOCCGAC() and saisie_variables.get('LOCNPCGAC', 0) and NPLOCCGAC() * saisie_variables.get('LOCNPCGAC', 0) / (saisie_variables.get('LOCNPCGAC', 0) + saisie_variables.get('LOCGITCC', 0)))) and arr((NPLOCCGAC() and saisie_variables.get('LOCNPCGAC', 0) and NPLOCCGAC() * saisie_variables.get('LOCNPCGAC', 0) / (saisie_variables.get('LOCNPCGAC', 0) + saisie_variables.get('LOCGITCC', 0)))) * present(saisie_variables.get('LOCNPCGAC', 0))) + (min(0, NPLOCCGAC()) and min(0, NPLOCCGAC()) * (1 - present(saisie_variables.get('LOCNPCGAC', 0)))))

    @cache_result
    def NPLOCSC():
        """
        loctation meublee non pro  hors cga soumise prel soc
        """
        return ((arr((NPLOCC() and saisie_variables.get('LOCNPC', 0) and NPLOCC() * saisie_variables.get('LOCNPC', 0) / (saisie_variables.get('LOCNPC', 0) + saisie_variables.get('LOCGITHCC', 0)))) and arr((NPLOCC() and saisie_variables.get('LOCNPC', 0) and NPLOCC() * saisie_variables.get('LOCNPC', 0) / (saisie_variables.get('LOCNPC', 0) + saisie_variables.get('LOCGITHCC', 0)))) * present(saisie_variables.get('LOCNPC', 0))) + (min(0, NPLOCC()) and min(0, NPLOCC()) * (1 - positif(saisie_variables.get('LOCNPC', 0)))))

    @cache_result
    def MIBNETNPVLSC():
        """
        ventes net  non pro soumise aux prestations soc.
        From MIBNETNPVLSi
        """
        return arr((MIB_NETNPVLC() and saisie_variables.get('MIBGITEC', 0) and MIB_NETNPVLC() * saisie_variables.get('MIBGITEC', 0) / (saisie_variables.get('MIBGITEC', 0) + saisie_variables.get('LOCGITC', 0))))

    @cache_result
    def NPLOCNETTSC():
        """
        loctation meublee non pro sous et hors CGA calcul conjoint soumis prel
        """
        return (NPLOCCGASC() + NPLOCSC() + MIBNETNPVLSC() + MIB_NETNPPLC())

    @cache_result
    def NPLOCCGASP():
        """
        loctation meublee non pro  cga 
        """
        return ((arr((NPLOCCGAPAC() and saisie_variables.get('LOCNPCGAPAC', 0) and NPLOCCGAPAC() * saisie_variables.get('LOCNPCGAPAC', 0) / (saisie_variables.get('LOCNPCGAPAC', 0) + saisie_variables.get('LOCGITCP', 0)))) and arr((NPLOCCGAPAC() and saisie_variables.get('LOCNPCGAPAC', 0) and NPLOCCGAPAC() * saisie_variables.get('LOCNPCGAPAC', 0) / (saisie_variables.get('LOCNPCGAPAC', 0) + saisie_variables.get('LOCGITCP', 0)))) * present(saisie_variables.get('LOCNPCGAPAC', 0))) + (min(0, NPLOCCGAPAC()) and min(0, NPLOCCGAPAC()) * (1 - present(saisie_variables.get('LOCNPCGAPAC', 0)))))

    @cache_result
    def NPLOCSP():
        """
        loctation meublee non pro  hors cga soumise prel soc
        """
        return ((arr((NPLOCPAC() and saisie_variables.get('LOCNPPAC', 0) and NPLOCPAC() * saisie_variables.get('LOCNPPAC', 0) / (saisie_variables.get('LOCNPPAC', 0) + saisie_variables.get('LOCGITHCP', 0)))) and arr((NPLOCPAC() and saisie_variables.get('LOCNPPAC', 0) and NPLOCPAC() * saisie_variables.get('LOCNPPAC', 0) / (saisie_variables.get('LOCNPPAC', 0) + saisie_variables.get('LOCGITHCP', 0)))) * positif(saisie_variables.get('LOCNPPAC', 0))) + (min(0, NPLOCPAC()) and min(0, NPLOCPAC()) * (1 - positif(saisie_variables.get('LOCNPPAC', 0)))))

    @cache_result
    def MIBNETNPVLSP():
        """
        ventes net  non pro soumise aux prestations soc.
        From MIBNETNPVLSi
        """
        return arr((MIB_NETNPVLP() and saisie_variables.get('MIBGITEP', 0) and MIB_NETNPVLP() * saisie_variables.get('MIBGITEP', 0) / (saisie_variables.get('MIBGITEP', 0) + saisie_variables.get('LOCGITP', 0))))

    @cache_result
    def NPLOCNETTSP():
        """
        loctation meublee non pro sous et hors CGA calcul  soumis prel
        """
        return (NPLOCCGASP() + NPLOCSP() + MIBNETNPVLSP() + MIB_NETNPPLP())

    @cache_result
    def TOTDEFLOCNPBIS():
        """
        def loc impute art 1731
        """
        return ((null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and (saisie_variables.get('LNPRODEF10', 0) + saisie_variables.get('LNPRODEF9', 0) + saisie_variables.get('LNPRODEF8', 0) + saisie_variables.get('LNPRODEF7', 0) + saisie_variables.get('LNPRODEF6', 0) + saisie_variables.get('LNPRODEF5', 0) + saisie_variables.get('LNPRODEF4', 0) + saisie_variables.get('LNPRODEF3', 0) + saisie_variables.get('LNPRODEF2', 0) + saisie_variables.get('LNPRODEF1', 0)) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * (saisie_variables.get('LNPRODEF10', 0) + saisie_variables.get('LNPRODEF9', 0) + saisie_variables.get('LNPRODEF8', 0) + saisie_variables.get('LNPRODEF7', 0) + saisie_variables.get('LNPRODEF6', 0) + saisie_variables.get('LNPRODEF5', 0) + saisie_variables.get('LNPRODEF4', 0) + saisie_variables.get('LNPRODEF3', 0) + saisie_variables.get('LNPRODEF2', 0) + saisie_variables.get('LNPRODEF1', 0)) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * max(0, min((saisie_variables.get('LNPRODEF10', 0) + saisie_variables.get('LNPRODEF9', 0) + saisie_variables.get('LNPRODEF8', 0) + saisie_variables.get('LNPRODEF7', 0) + saisie_variables.get('LNPRODEF6', 0) + saisie_variables.get('LNPRODEF5', 0) + saisie_variables.get('LNPRODEF4', 0) + saisie_variables.get('LNPRODEF3', 0) + saisie_variables.get('LNPRODEF2', 0) + saisie_variables.get('LNPRODEF1', 0)), ((base_variables['TOTDEFLOCNP1731'] and base_variables['ART1731BIS'] and base_variables['TOTDEFLOCNP1731'] * base_variables['ART1731BIS'] * (1 - base_variables['PREM8_11'])) + ((saisie_variables.get('LNPRODEF10', 0) + saisie_variables.get('LNPRODEF9', 0) + saisie_variables.get('LNPRODEF8', 0) + saisie_variables.get('LNPRODEF7', 0) + saisie_variables.get('LNPRODEF6', 0) + saisie_variables.get('LNPRODEF5', 0) + saisie_variables.get('LNPRODEF4', 0) + saisie_variables.get('LNPRODEF3', 0) + saisie_variables.get('LNPRODEF2', 0) + saisie_variables.get('LNPRODEF1', 0)) and (saisie_variables.get('LNPRODEF10', 0) + saisie_variables.get('LNPRODEF9', 0) + saisie_variables.get('LNPRODEF8', 0) + saisie_variables.get('LNPRODEF7', 0) + saisie_variables.get('LNPRODEF6', 0) + saisie_variables.get('LNPRODEF5', 0) + saisie_variables.get('LNPRODEF4', 0) + saisie_variables.get('LNPRODEF3', 0) + saisie_variables.get('LNPRODEF2', 0) + saisie_variables.get('LNPRODEF1', 0)) * (1 - positif((base_variables['ART1731BIS'] and base_variables['ART1731BIS'] * base_variables['PREM8_11'])))))))))

    @cache_result
    def NPLOCNETSF():
        """
        loctation meublee non pro total foyer soumis prel soc
        """
        return max(0, (NPLOCNETTSV() + NPLOCNETTSC() + NPLOCNETTSP() - TOTDEFLOCNPBIS()))

    @cache_result
    def RDNP():
        """
        BIC Non Profess. taxees aux CSG RDS PRS
        """
        return (saisie_variables.get('RCSV', 0) + saisie_variables.get('RCSC', 0) + saisie_variables.get('RCSP', 0) + (max(0, NPLOCNETSF()) and (1 - null((saisie_variables.get('V_REGCO', 0) - 2))) and max(0, NPLOCNETSF()) * (1 - null((saisie_variables.get('V_REGCO', 0) - 2))) * (1 - null((saisie_variables.get('V_REGCO', 0) - 4)))))

    @cache_result
    def PVBARPS():
        """
        Partie de PV passant au bareme  PS
        """
        return (max(0, ((saisie_variables.get('BPVRCM', 0) + saisie_variables.get('COD3SG', 0) + saisie_variables.get('COD3SL', 0) + saisie_variables.get('ABDETPLUS', 0) + saisie_variables.get('ABIMPPV', 0) + saisie_variables.get('CODRVG', 0)) - (saisie_variables.get('DPVRCM', 0) + saisie_variables.get('COD3SH', 0) + saisie_variables.get('COD3SM', 0) + saisie_variables.get('ABDETMOINS', 0) + saisie_variables.get('ABIMPMV', 0)))) + saisie_variables.get('PVTITRESOC', 0))

    @cache_result
    def PVTAUXPS():
        """
        Partie de PV a taux proportionnel  PS
        """
        return (saisie_variables.get('BPVSJ', 0) + saisie_variables.get('BPVSK', 0) + saisie_variables.get('BPV18V', 0) + saisie_variables.get('BPV18C', 0) + saisie_variables.get('BPCOPTV', 0) + saisie_variables.get('BPCOPTC', 0) + saisie_variables.get('BPV40V', 0) + saisie_variables.get('BPV40C', 0) + saisie_variables.get('BPCOSAV', 0) + saisie_variables.get('BPCOSAC', 0) + saisie_variables.get('PEA', 0) + saisie_variables.get('GAINPEA', 0))

    @cache_result
    def RDNCP():
        """
        Activites non Commerciales non Pro. taxees aux CSG RDS PRS
        """
        return ((PVBARPS() + PVTAUXPS()) and (PVBARPS() + PVTAUXPS()) * (1 - positif(saisie_variables.get('IPVLOC', 0))))

    @cache_result
    def RDPTP():
        """
        Plus-values a taux proportionnels taxees a la CRDS et CSG
        """
        return (saisie_variables.get('BAF1AV', 0) + saisie_variables.get('BAF1AC', 0) + saisie_variables.get('BAF1AP', 0) + saisie_variables.get('BA1AV', 0) + saisie_variables.get('BA1AC', 0) + saisie_variables.get('BA1AP', 0) + max(0, (saisie_variables.get('MIB1AV', 0) - saisie_variables.get('MIBDEV', 0))) + max(0, (saisie_variables.get('MIB1AC', 0) - saisie_variables.get('MIBDEC', 0))) + max(0, (saisie_variables.get('MIB1AP', 0) - saisie_variables.get('MIBDEP', 0))) + saisie_variables.get('BI1AV', 0) + saisie_variables.get('BI1AC', 0) + saisie_variables.get('BI1AP', 0) + max(0, (saisie_variables.get('MIBNP1AV', 0) - saisie_variables.get('MIBNPDEV', 0))) + max(0, (saisie_variables.get('MIBNP1AC', 0) - saisie_variables.get('MIBNPDEC', 0))) + max(0, (saisie_variables.get('MIBNP1AP', 0) - saisie_variables.get('MIBNPDEP', 0))) + saisie_variables.get('BI2AV', 0) + saisie_variables.get('BI2AC', 0) + saisie_variables.get('BI2AP', 0) + max(0, (saisie_variables.get('BNCPRO1AV', 0) - saisie_variables.get('BNCPRODEV', 0))) + max(0, (saisie_variables.get('BNCPRO1AC', 0) - saisie_variables.get('BNCPRODEC', 0))) + max(0, (saisie_variables.get('BNCPRO1AP', 0) - saisie_variables.get('BNCPRODEP', 0))) + saisie_variables.get('BN1AV', 0) + saisie_variables.get('BN1AC', 0) + saisie_variables.get('BN1AP', 0) + max(0, (saisie_variables.get('BNCNP1AV', 0) - saisie_variables.get('BNCNPDEV', 0))) + max(0, (saisie_variables.get('BNCNP1AC', 0) - saisie_variables.get('BNCNPDEC', 0))) + max(0, (saisie_variables.get('BNCNP1AP', 0) - saisie_variables.get('BNCNPDEP', 0))) + saisie_variables.get('PVINVE', 0) + saisie_variables.get('PVINCE', 0) + saisie_variables.get('PVINPE', 0) + saisie_variables.get('PVSOCV', 0) + saisie_variables.get('PVSOCC', 0))

    @cache_result
    def BCSG():
        """
        Base CSG
        """
        return ((arr(((RDRFPS() and RDRFPS() * (1 - null((4 - saisie_variables.get('V_REGCO', 0))))) + ((saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) and (saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) * (1 - V_CNR())))) and arr(((RDRFPS() and RDRFPS() * (1 - null((4 - saisie_variables.get('V_REGCO', 0))))) + ((saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) and (saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) * (1 - V_CNR())))) * (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0)))))) + ((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)) and (saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)) * (1 - V_CNR())))

    @cache_result
    def CSGC():
        """
        CSG nette (base * taux)
        """
        return (arr((BCSG() and T_CSG and BCSG() * T_CSG / 100)) and arr((BCSG() and T_CSG and BCSG() * T_CSG / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def CICSG():
        """
        Credit d'impot relatif a la CSG
        """
        return min(CSGC(), arr((saisie_variables.get('IPPNCS', 0) and T_CSG and saisie_variables.get('IPPNCS', 0) * T_CSG / 100)))

    @cache_result
    def CSG():
        """
        CSG
        """
        return max(0, (CSGC() - CICSG()))

    @cache_result
    def RGLOA():
        """
        Option sur titre et acquisition action gratuit taxees a la CRDS et CSG
        """
        return (saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('GLDGRATC', 0))

    @cache_result
    def BRDS():
        """
        Base CRDS
        """
        return ((arr(((RDRFPS() and RDRFPS() * (1 - null((4 - saisie_variables.get('V_REGCO', 0))))) + ((saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + RGLOA() + saisie_variables.get('SALECS', 0) + saisie_variables.get('SALECSG', 0) + saisie_variables.get('ALLECS', 0) + saisie_variables.get('INDECS', 0) + saisie_variables.get('PENECS', 0) + saisie_variables.get('COD8SA', 0) + saisie_variables.get('COD8SB', 0) + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) and (saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + RGLOA() + saisie_variables.get('SALECS', 0) + saisie_variables.get('SALECSG', 0) + saisie_variables.get('ALLECS', 0) + saisie_variables.get('INDECS', 0) + saisie_variables.get('PENECS', 0) + saisie_variables.get('COD8SA', 0) + saisie_variables.get('COD8SB', 0) + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) * (1 - V_CNR())))) and arr(((RDRFPS() and RDRFPS() * (1 - null((4 - saisie_variables.get('V_REGCO', 0))))) + ((saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + RGLOA() + saisie_variables.get('SALECS', 0) + saisie_variables.get('SALECSG', 0) + saisie_variables.get('ALLECS', 0) + saisie_variables.get('INDECS', 0) + saisie_variables.get('PENECS', 0) + saisie_variables.get('COD8SA', 0) + saisie_variables.get('COD8SB', 0) + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) and (saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + RGLOA() + saisie_variables.get('SALECS', 0) + saisie_variables.get('SALECSG', 0) + saisie_variables.get('ALLECS', 0) + saisie_variables.get('INDECS', 0) + saisie_variables.get('PENECS', 0) + saisie_variables.get('COD8SA', 0) + saisie_variables.get('COD8SB', 0) + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) * (1 - V_CNR())))) * (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0)))))) + ((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)) and (saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)) * (1 - V_CNR())))

    @cache_result
    def RDSC():
        """
        CRDS nette ( base * taux )
        """
        return (arr((BRDS() and T_RDS and BRDS() * T_RDS / 100)) and arr((BRDS() and T_RDS and BRDS() * T_RDS / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def CIRDS():
        """
        Credit d'impot relatif a la CRDS
        """
        return min(RDSC(), arr(((saisie_variables.get('IPPNCS', 0) + saisie_variables.get('REVCSXA', 0) + saisie_variables.get('REVCSXB', 0) + saisie_variables.get('REVCSXC', 0) + saisie_variables.get('REVCSXD', 0) + saisie_variables.get('REVCSXE', 0) + saisie_variables.get('COD8XI', 0) + saisie_variables.get('COD8XJ', 0)) and T_RDS and (saisie_variables.get('IPPNCS', 0) + saisie_variables.get('REVCSXA', 0) + saisie_variables.get('REVCSXB', 0) + saisie_variables.get('REVCSXC', 0) + saisie_variables.get('REVCSXD', 0) + saisie_variables.get('REVCSXE', 0) + saisie_variables.get('COD8XI', 0) + saisie_variables.get('COD8XJ', 0)) * T_RDS / 100)))

    @cache_result
    def RDSN():
        """
        CRDS
        """
        return (RDSC() - CIRDS())

    @cache_result
    def BPRS():
        """
        Base prelevement social 1% anterieur
        """
        return ((arr(((RDRFPS() and RDRFPS() * (1 - null((4 - saisie_variables.get('V_REGCO', 0))))) + ((saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) and (saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) * (1 - V_CNR())))) and arr(((RDRFPS() and RDRFPS() * (1 - null((4 - saisie_variables.get('V_REGCO', 0))))) + ((saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) and (saisie_variables.get('COD8XK', 0) + saisie_variables.get('COD8YK', 0) + RDRV() + RDRCM() + RDNP() + RDNCP() + RDPTP() + saisie_variables.get('ESFP', 0) + saisie_variables.get('R1649', 0) + saisie_variables.get('PREREV', 0)) * (1 - V_CNR())))) * (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0)))))) + ((saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)) and (saisie_variables.get('RE168', 0) + saisie_variables.get('TAX1649', 0)) * (1 - V_CNR())))

    @cache_result
    def PRSC():
        """
        PRS net ( base * taux )
        """
        return (arr((BPRS() and T_PREL_SOC and BPRS() * T_PREL_SOC / 100)) and arr((BPRS() and T_PREL_SOC and BPRS() * T_PREL_SOC / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def CIPRS():
        """
        Credit d'impot relatif au PRS
        """
        return min(PRSC(), arr((saisie_variables.get('IPPNCS', 0) and T_PREL_SOC and saisie_variables.get('IPPNCS', 0) * T_PREL_SOC / 100)))

    @cache_result
    def PRS():
        """
        Contribution sociale
        """
        return max(0, (PRSC() - CIPRS()))

    @cache_result
    def BCVNSAL():
        """
        Base cont. salariale 10%
        """
        return ((saisie_variables.get('CVNSALAV', 0) + saisie_variables.get('CVNSALAC', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('GLDGRATC', 0)) and (saisie_variables.get('CVNSALAV', 0) + saisie_variables.get('CVNSALAC', 0) + saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('GLDGRATC', 0)) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def CVNSALC():
        """
        Contribution salariale de 10 %
        """
        return (arr((BCVNSAL() and TX10 and BCVNSAL() * TX10 / 100)) and arr((BCVNSAL() and TX10 and BCVNSAL() * TX10 / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def BCDIS():
        """
        Base contribution sociale salariale
        """
        return ((saisie_variables.get('GSALV', 0) + saisie_variables.get('GSALC', 0)) and (1 - V_CNR()) and (saisie_variables.get('GSALV', 0) + saisie_variables.get('GSALC', 0)) * (1 - V_CNR()) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def CDISC():
        """
        Montant imposable contribution sociale salariale
        """
        return (arr((BCDIS() and TCDIS and BCDIS() * TCDIS / 100)) and arr((BCDIS() and TCDIS and BCDIS() * TCDIS / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def CDIS():
        """
        Contribution sociale salariale
        """
        return CDISC()

    @cache_result
    def BGLOA():
        """
        Base 1TT et 1UT
        """
        return ((saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('GLDGRATC', 0)) and (1 - V_CNR()) and (saisie_variables.get('GLDGRATV', 0) + saisie_variables.get('GLDGRATC', 0)) * (1 - V_CNR()) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def CGLOA():
        """
        contribution 1TT et 1UT
        """
        return (arr((BGLOA() and TX075 and BGLOA() * TX075 / 100)) and arr((BGLOA() and TX075 and BGLOA() * TX075 / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def BRSE1():
        """
        Base CSG revenus de source etrangere (8TQ)
        """
        return (saisie_variables.get('SALECS', 0) and (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) and saisie_variables.get('SALECS', 0) * (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) * (1 - V_CNR()))

    @cache_result
    def RSE1():
        """
        CSG revenus source etrangere (8TQ)
        """
        return (arr((BRSE1() and TXTQ and BRSE1() * TXTQ / 100)) and arr((BRSE1() and TXTQ and BRSE1() * TXTQ / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def BRSE8TV():
        """
        Base CSG revenus de source etrangere (8TV) 6,6%
        """
        return (saisie_variables.get('ALLECS', 0) and (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) and saisie_variables.get('ALLECS', 0) * (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) * (1 - V_CNR()))

    @cache_result
    def BRSE8SA():
        """
        Base CSG revenus de source etrangere (8SA) 6,6%
        """
        return (saisie_variables.get('COD8SA', 0) and (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) and saisie_variables.get('COD8SA', 0) * (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) * (1 - V_CNR()))

    @cache_result
    def RSE2():
        """
        CSG revenus source etrangere (8TV)
        """
        return ((arr((BRSE8TV() and TXTV and BRSE8TV() * TXTV / 100)) and arr((BRSE8TV() and TXTV and BRSE8TV() * TXTV / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0)))) + (arr((BRSE8SA() and TXTV and BRSE8SA() * TXTV / 100)) and arr((BRSE8SA() and TXTV and BRSE8SA() * TXTV / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0)))))

    @cache_result
    def CSPROVRSE2():
        """
        CSG provisoire revenus source etrangere (8YF 8YN)
        """
        return (saisie_variables.get('CSPROVYF', 0) + saisie_variables.get('CSPROVYN', 0))

    @cache_result
    def BRSE3():
        """
        Base CSG revenus de source etrangere (8TW)
        """
        return (saisie_variables.get('INDECS', 0) and (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) and saisie_variables.get('INDECS', 0) * (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) * (1 - V_CNR()))

    @cache_result
    def RSE3():
        """
        CSG revenus source etrangere (8TW)
        """
        return (arr((BRSE3() and TXTW and BRSE3() * TXTW / 100)) and arr((BRSE3() and TXTW and BRSE3() * TXTW / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def BRSE8TX():
        """
        Base CSG revenus de source etrangere (8TX) 3,8%
        """
        return (saisie_variables.get('PENECS', 0) and (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) and saisie_variables.get('PENECS', 0) * (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) * (1 - V_CNR()))

    @cache_result
    def BRSE8SB():
        """
        Base CSG revenus de source etrangere (8SA)  3,8%
        """
        return (saisie_variables.get('COD8SB', 0) and (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) and saisie_variables.get('COD8SB', 0) * (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) * (1 - V_CNR()))

    @cache_result
    def RSE4():
        """
        CSG revenus source etrangere (8TX)
        """
        return ((arr((BRSE8TX() and TXTX and BRSE8TX() * TXTX / 100)) and arr((BRSE8TX() and TXTX and BRSE8TX() * TXTX / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0)))) + (arr((BRSE8SB() and TXTX and BRSE8SB() * TXTX / 100)) and arr((BRSE8SB() and TXTX and BRSE8SB() * TXTX / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0)))))

    @cache_result
    def CSPROVRSE4():
        """
        CSG provisoire revenus source etrangere (8YH 8YP)
        """
        return (saisie_variables.get('CSPROVYH', 0) + saisie_variables.get('CSPROVYP', 0))

    @cache_result
    def BRSE5():
        """
        Base CSG revenus de source etrangere (8TR)
        """
        return (saisie_variables.get('SALECSG', 0) and (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) and saisie_variables.get('SALECSG', 0) * (1 - positif((present(saisie_variables.get('RE168', 0)) + present(saisie_variables.get('TAX1649', 0))))) * (1 - V_CNR()))

    @cache_result
    def RSE5():
        """
        CSG revenus source etrangere (8TR)
        """
        return (arr((BRSE5() and TX075 and BRSE5() * TX075 / 100)) and arr((BRSE5() and TX075 and BRSE5() * TX075 / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def BREGV():
        """
        Regularisation assurance-vie : complement a payer
        """
        return (saisie_variables.get('COD2LA', 0) and (1 - V_CNR()) and saisie_variables.get('COD2LA', 0) * (1 - V_CNR()) * (1 - positif((present(saisie_variables.get('TAX1649', 0)) + present(saisie_variables.get('RE168', 0))))))

    @cache_result
    def BINRPS():
        """
        Calcul INR : Base PS pour prorata 9YP
        """
        return (max(0, (CSG() - saisie_variables.get('CSGIM', 0))) + max(0, (RDSN() - saisie_variables.get('CRDSIM', 0))) + max(0, (PRS() - saisie_variables.get('PRSPROV', 0))) + max(0, (CVNSALC() - saisie_variables.get('COD8YT', 0))) + max(0, (CDIS() - saisie_variables.get('CDISPROV', 0))) + max(0, (CGLOA() - saisie_variables.get('COD8YL', 0))) + max(0, (RSE1() - saisie_variables.get('CSPROVYD', 0))) + max(0, (RSE2() - CSPROVRSE2())) + max(0, (RSE3() - saisie_variables.get('CSPROVYG', 0))) + max(0, (RSE4() - CSPROVRSE4())) + max(0, (RSE5() - saisie_variables.get('CSPROVYE', 0))) + BREGV())

    @cache_result
    def VAR9YIIR():
        """
        Calcul INR : Prorata des acomptes INR base deja verses 
        """
        return arr((saisie_variables.get('ACODELAISINR', 0) and BINRIR() and saisie_variables.get('ACODELAISINR', 0) * BINRIR() / (BINRIR() + BINRPS())))

    @cache_result
    def IR9YI():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return arr((VAR9YIIR() and max(0, (IRN() - saisie_variables.get('IRANT', 0))) and VAR9YIIR() * max(0, (IRN() - saisie_variables.get('IRANT', 0))) / BINRIR()))

    @cache_result
    def BTOINR():
        """
        Base des penalites TO IR INR
        """
        return (max(0, (IRN() - IR9YI() - saisie_variables.get('IRANT', 0))) and max(0, (IRN() - IR9YI() - saisie_variables.get('IRANT', 0))) * positif((IAMD1() + 1 - SEUIL_61)))

    @cache_result
    def INTMS():
        """
        Mois date notification
        """
        return inf((saisie_variables.get('MOISAN', 0) and saisie_variables.get('MOISAN', 0) / 10000))

    @cache_result
    def INTAN():
        """
        Annee date notification
        """
        return ((((saisie_variables.get('MOISAN', 0) and saisie_variables.get('MOISAN', 0) / 10000) - INTMS()) and ((saisie_variables.get('MOISAN', 0) and saisie_variables.get('MOISAN', 0) / 10000) - INTMS()) * 10000) and (((saisie_variables.get('MOISAN', 0) and saisie_variables.get('MOISAN', 0) / 10000) - INTMS()) and ((saisie_variables.get('MOISAN', 0) and saisie_variables.get('MOISAN', 0) / 10000) - INTMS()) * 10000) * present(saisie_variables.get('MOISAN', 0)))

    @cache_result
    def TXINT():
        """
        Taux interets de retard
        """
        return (((positif((2006 - arr(INTAN()))) and max(0, (((INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) and (INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) + INTMS() - 6)) and positif((2006 - arr(INTAN()))) * max(0, (((INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) and (INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) + INTMS() - 6)) * TXMOISRETARD) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - 2006)) and max(0, (((INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) and (INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) + INTMS() - 6)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - 2006)) * max(0, (((INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) and (INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) + INTMS() - 6)) * TXMOISRETARD2) + ((1 - positif((2006 - arr(INTAN())))) and (1 - positif_ou_nul((saisie_variables.get('V_ANREV', 0) - 2006))) and (1 - positif((2006 - arr(INTAN())))) * (1 - positif_ou_nul((saisie_variables.get('V_ANREV', 0) - 2006))) * (((((2006 - (saisie_variables.get('V_ANREV', 0) + 1)) and (2006 - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) - 6) and (((2006 - (saisie_variables.get('V_ANREV', 0) + 1)) and (2006 - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) - 6) * ((TXMOISRETARD and TXMOISRETARD * positif((2006 - (saisie_variables.get('V_ANREV', 0) + 1)))) + (TXMOISRETARD2 and TXMOISRETARD2 * null((2006 - (saisie_variables.get('V_ANREV', 0) + 1)))))) + ((((INTAN() - 2006) and (INTAN() - 2006) * 12) + INTMS()) and (((INTAN() - 2006) and (INTAN() - 2006) * 12) + INTMS()) * TXMOISRETARD2)))) and ((positif((2006 - arr(INTAN()))) and max(0, (((INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) and (INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) + INTMS() - 6)) and positif((2006 - arr(INTAN()))) * max(0, (((INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) and (INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) + INTMS() - 6)) * TXMOISRETARD) + (positif_ou_nul((saisie_variables.get('V_ANREV', 0) - 2006)) and max(0, (((INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) and (INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) + INTMS() - 6)) and positif_ou_nul((saisie_variables.get('V_ANREV', 0) - 2006)) * max(0, (((INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) and (INTAN() - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) + INTMS() - 6)) * TXMOISRETARD2) + ((1 - positif((2006 - arr(INTAN())))) and (1 - positif_ou_nul((saisie_variables.get('V_ANREV', 0) - 2006))) and (1 - positif((2006 - arr(INTAN())))) * (1 - positif_ou_nul((saisie_variables.get('V_ANREV', 0) - 2006))) * (((((2006 - (saisie_variables.get('V_ANREV', 0) + 1)) and (2006 - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) - 6) and (((2006 - (saisie_variables.get('V_ANREV', 0) + 1)) and (2006 - (saisie_variables.get('V_ANREV', 0) + 1)) * 12) - 6) * ((TXMOISRETARD and TXMOISRETARD * positif((2006 - (saisie_variables.get('V_ANREV', 0) + 1)))) + (TXMOISRETARD2 and TXMOISRETARD2 * null((2006 - (saisie_variables.get('V_ANREV', 0) + 1)))))) + ((((INTAN() - 2006) and (INTAN() - 2006) * 12) + INTMS()) and (((INTAN() - 2006) and (INTAN() - 2006) * 12) + INTMS()) * TXMOISRETARD2)))) * present(saisie_variables.get('MOISAN', 0)))

    @cache_result
    def PTOIR():
        """
        PENALITE DE TO IR ET 1% RCM
        """
        return (arr((BTO() and COPETO() and BTO() * COPETO() / 100)) + (arr((BTO() and COPETO() and BTO() * COPETO() / 100)) and arr((BTO() and COPETO() and BTO() * COPETO() / 100)) * positif((null((saisie_variables.get('CMAJ', 0) - 10)) + null((saisie_variables.get('CMAJ', 0) - 17))))) + arr((BTOINR() and TXINT() and BTOINR() * TXINT() / 100)))

    @cache_result
    def PIR():
        """
        Penalites sur IR
        """
        return (PTOIR() and PTOIR() * positif_ou_nul((IAMD1() - SEUIL_61)))

    @cache_result
    def INDTXMIN():
        """
        Indicateur de taux minimum
        """
        return (positif_ou_nul((IMI() - IPQ1())) and positif((1 - INDTXMOY())) and positif_ou_nul((IMI() - IPQ1())) * positif((1 - INDTXMOY())) * V_CR2())

    @cache_result
    def IAVIMBIS():
        """
        Impot avant imputation
        """
        return (IRB() + PIR())

    @cache_result
    def IAVIMO():
        """
        Impot avant imputation (sert au test de 2000 lorsqu'impot au tx moyen)
        """
        return ((max(0, (max((ID11() - ADO1()), IMI()) - RED())) + ITP() + REI() + PIR()) and (max(0, (max((ID11() - ADO1()), IMI()) - RED())) + ITP() + REI() + PIR()) * V_CR2())

    @cache_result
    def IRNET2():
        """
        Total de votre imposition
        """
        return (((IAR() + PIR() - saisie_variables.get('IRANT', 0)) and (1 - INDTXMIN()) and (IAR() + PIR() - saisie_variables.get('IRANT', 0)) * (1 - INDTXMIN()) * (1 - INDTXMOY())) + (min(0, (IAR() + PIR() - saisie_variables.get('IRANT', 0))) and min(0, (IAR() + PIR() - saisie_variables.get('IRANT', 0))) * (INDTXMIN() + INDTXMOY())) + (max(0, (IAR() + PIR() - saisie_variables.get('IRANT', 0))) and max(0, (IAR() + PIR() - saisie_variables.get('IRANT', 0))) * ((INDTXMIN() and INDTXMIN() * positif((IAVIMBIS() - SEUIL_TXMIN))) + (INDTXMOY() and INDTXMOY() * positif((IAVIMO() - SEUIL_TXMIN))))))

    @cache_result
    def TAXA9YI():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((IPCAPTAXT() + TAXLOY() + base_variables['IHAUTREVT'])) and positif((IPCAPTAXT() + TAXLOY() + base_variables['IHAUTREVT'])) * arr((VAR9YIIR() and max(0, (TAXASSUR() - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, (IRN() - saisie_variables.get('IRANT', 0))))) and VAR9YIIR() * max(0, (TAXASSUR() - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, (IRN() - saisie_variables.get('IRANT', 0))))) / BINRIR()))) + ((1 - positif((IPCAPTAXT() + TAXLOY() + base_variables['IHAUTREVT']))) and (1 - positif((IPCAPTAXT() + TAXLOY() + base_variables['IHAUTREVT']))) * max(0, (VAR9YIIR() - IR9YI()))))

    @cache_result
    def PTOTAXA():
        """
        PENALITE DE TO TAXAGA
        """
        return (arr((max(0, (TAXASSUR() - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, (IRN() - saisie_variables.get('IRANT', 0))))) and COPETO() and max(0, (TAXASSUR() - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, (IRN() - saisie_variables.get('IRANT', 0))))) * COPETO() / 100)) + (arr((max(0, (TAXASSUR() - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, (IRN() - saisie_variables.get('IRANT', 0))))) and COPETO() and max(0, (TAXASSUR() - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, (IRN() - saisie_variables.get('IRANT', 0))))) * COPETO() / 100)) and arr((max(0, (TAXASSUR() - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, (IRN() - saisie_variables.get('IRANT', 0))))) and COPETO() and max(0, (TAXASSUR() - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, (IRN() - saisie_variables.get('IRANT', 0))))) * COPETO() / 100)) * positif((null((saisie_variables.get('CMAJ', 0) - 10)) + null((saisie_variables.get('CMAJ', 0) - 17))))) + arr((max(0, (TAXASSUR() - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, (IRN() - saisie_variables.get('IRANT', 0))) - TAXA9YI())) and TXINT() and max(0, (TAXASSUR() - min((TAXASSUR() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, (IRN() - saisie_variables.get('IRANT', 0))) - TAXA9YI())) * TXINT() / 100)))

    @cache_result
    def PTAXA():
        """
        PENALITE TAXAGA
        """
        return PTOTAXA()

    @cache_result
    def CAP9YI():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((TAXLOY() + base_variables['IHAUTREVT'])) and positif((TAXLOY() + base_variables['IHAUTREVT'])) * arr((VAR9YIIR() and max(0, (IPCAPTAXT() - min((IPCAPTAXT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR())))) and VAR9YIIR() * max(0, (IPCAPTAXT() - min((IPCAPTAXT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR())))) / BINRIR()))) + ((1 - positif((TAXLOY() + base_variables['IHAUTREVT']))) and (1 - positif((TAXLOY() + base_variables['IHAUTREVT']))) * max(0, (VAR9YIIR() - IR9YI() - TAXA9YI()))))

    @cache_result
    def PTOTPCAP():
        """
        penalite total pension versee en capital
        """
        return (arr((max(0, (IPCAPTAXT() - min((IPCAPTAXT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR())))) and COPETO() and max(0, (IPCAPTAXT() - min((IPCAPTAXT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR())))) * COPETO() / 100)) + (arr((max(0, (IPCAPTAXT() - min((IPCAPTAXT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR())))) and COPETO() and max(0, (IPCAPTAXT() - min((IPCAPTAXT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR())))) * COPETO() / 100)) and arr((max(0, (IPCAPTAXT() - min((IPCAPTAXT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR())))) and COPETO() and max(0, (IPCAPTAXT() - min((IPCAPTAXT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR())))) * COPETO() / 100)) * positif((null((saisie_variables.get('CMAJ', 0) - 10)) + null((saisie_variables.get('CMAJ', 0) - 17))))) + arr((max(0, (IPCAPTAXT() - min((IPCAPTAXT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR())) - CAP9YI())) and TXINT() and max(0, (IPCAPTAXT() - min((IPCAPTAXT() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR())) - CAP9YI())) * TXINT() / 100)))

    @cache_result
    def PPCAP():
        """
        Penalites sur PCAPTAX
        """
        return PTOTPCAP()

    @cache_result
    def TAXANEG():
        """
        taxe + INR + majo
        """
        return min(0, (TAXASSUR() + PTAXA() - min((TAXASSUR() + PTAXA() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, IRNET2())))

    @cache_result
    def LOY9YI():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif(base_variables['IHAUTREVT']) and positif(base_variables['IHAUTREVT']) * arr((VAR9YIIR() and max(0, (TAXLOY() - min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - IPCAPTAXT()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT())))) and VAR9YIIR() * max(0, (TAXLOY() - min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - IPCAPTAXT()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT())))) / BINRIR()))) + ((1 - positif(base_variables['IHAUTREVT'])) and (1 - positif(base_variables['IHAUTREVT'])) * max(0, (VAR9YIIR() - IR9YI() - TAXA9YI() - CAP9YI()))))

    @cache_result
    def PTOTLOY():
        """
        PENALITE DE TO loyer eleve
        """
        return (arr((max(0, (TAXLOY() - min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - IPCAPTAXT()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT())))) and COPETO() and max(0, (TAXLOY() - min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - IPCAPTAXT()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT())))) * COPETO() / 100)) + (arr((max(0, (TAXLOY() - min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - IPCAPTAXT()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT())))) and COPETO() and max(0, (TAXLOY() - min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - IPCAPTAXT()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT())))) * COPETO() / 100)) and arr((max(0, (TAXLOY() - min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - IPCAPTAXT()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT())))) and COPETO() and max(0, (TAXLOY() - min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - IPCAPTAXT()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT())))) * COPETO() / 100)) * positif((null((saisie_variables.get('CMAJ', 0) - 10)) + null((saisie_variables.get('CMAJ', 0) - 17))))) + arr((max(0, (TAXLOY() - min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - IPCAPTAXT()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT())) - LOY9YI())) and TXINT() and max(0, (TAXLOY() - min((TAXLOY() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - IPCAPTAXT()))) + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT())) - LOY9YI())) * TXINT() / 100)))

    @cache_result
    def PTAXLOY():
        """
        PENALITE loyer eleve
        """
        return PTOTLOY()

    @cache_result
    def PCAPNEG():
        """
        taxe + INR + majo
        """
        return min(0, (IPCAPTAXT() + PPCAP() - min((IPCAPTAXT() + PPCAP()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA()))) + min(0, TAXANEG())))

    @cache_result
    def CHR9YI():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return max(0, (VAR9YIIR() - IR9YI() - TAXA9YI() - CAP9YI() - LOY9YI()))

    @cache_result
    def PTOTCHR():
        """
        PENALITE DE to contribution haut revenus
        """
        return (arr((max(0, (base_variables['IHAUTREVT'] + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT() + TAXLOY())))) and COPETO() and max(0, (base_variables['IHAUTREVT'] + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT() + TAXLOY())))) * COPETO() / 100)) + (arr((max(0, (base_variables['IHAUTREVT'] + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT() + TAXLOY())))) and COPETO() and max(0, (base_variables['IHAUTREVT'] + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT() + TAXLOY())))) * COPETO() / 100)) and arr((max(0, (base_variables['IHAUTREVT'] + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT() + TAXLOY())))) and COPETO() and max(0, (base_variables['IHAUTREVT'] + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT() + TAXLOY())))) * COPETO() / 100)) * positif((null((saisie_variables.get('CMAJ', 0) - 10)) + null((saisie_variables.get('CMAJ', 0) - 17))))) + arr((max(0, (base_variables['IHAUTREVT'] + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT() + TAXLOY())) - CHR9YI())) and TXINT() and max(0, (base_variables['IHAUTREVT'] + min(0, (IRN() - saisie_variables.get('IRANT', 0) + TAXASSUR() + IPCAPTAXT() + TAXLOY())) - CHR9YI())) * TXINT() / 100)))

    @cache_result
    def PHAUTREV():
        """
        Penalites sur hauts revenus
        """
        return PTOTCHR()

    @cache_result
    def LOYELEVNEG():
        """
        taxe + INR + majo
        """
        return min(0, (TAXLOY() + PTAXLOY() - min((TAXLOY() + PTAXLOY()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA() - IPCAPTAXT() - PPCAP()))) + min(0, PCAPNEG())))

    @cache_result
    def IRNETTER():
        """
        IRNET avant bidouille du 8ZI
        """
        return max(0, (IRNET2() + (TAXASSUR() + PTAXA() - min((TAXASSUR() + PTAXA() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) - max(0, (TAXASSUR() + PTAXA() - min((TAXASSUR() + PTAXA() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, IRNET2())))) + (IPCAPTAXT() + PPCAP() - min((IPCAPTAXT() + PPCAP()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA()))) - max(0, (IPCAPTAXT() + PPCAP() - min((IPCAPTAXT() + PPCAP()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA()))) + min(0, TAXANEG())))) + (TAXLOY() + PTAXLOY() - min((TAXLOY() + PTAXLOY()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA() - IPCAPTAXT() - PPCAP()))) - max(0, (TAXLOY() + PTAXLOY() - min((TAXLOY() + PTAXLOY()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA() - IPCAPTAXT() - PPCAP()))) + min(0, PCAPNEG())))) + (base_variables['IHAUTREVT'] + PHAUTREV() - max(0, (base_variables['IHAUTREVT'] + PHAUTREV() + min(0, LOYELEVNEG()))))))

    @cache_result
    def IRNETBIS():
        """
        IRNET avant bidouille du 8ZI
        """
        return max(0, (IRNETTER() - (PIR() and positif((SEUIL_12 - IRNETTER() + PIR())) and positif((SEUIL_12 - PIR())) and PIR() * positif((SEUIL_12 - IRNETTER() + PIR())) * positif((SEUIL_12 - PIR())) * positif_ou_nul((IRNETTER() - SEUIL_12)))))

    @cache_result
    def PTOT():
        """
        Total des penalites IR + PS
        """
        return PIR()

    @cache_result
    def IAVIM():
        """
        Impot avant imputation
        """
        return (IRB() + PTOT() + TAXASSUR() + PTAXA() + IPCAPTAXTOT() + PPCAP() + TAXLOY() + PTAXLOY() + base_variables['CHRAPRES'] + PHAUTREV())

    @cache_result
    def CHRNEG():
        """
        taxe + INR + majo
        """
        return min(0, (base_variables['IHAUTREVT'] + PHAUTREV() + min(0, LOYELEVNEG())))

    @cache_result
    def VAR9YIPS():
        """
        Calcul INR : Prorata des acomptes INR base deja verses 
        """
        return max(0, (saisie_variables.get('ACODELAISINR', 0) - VAR9YIIR()))

    @cache_result
    def CS9YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((RDSN() + PRS() + CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) and positif((RDSN() + PRS() + CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) * arr((VAR9YIPS() and (CSG() - saisie_variables.get('CSGIM', 0)) and VAR9YIPS() * (CSG() - saisie_variables.get('CSGIM', 0)) / BINRPS()))) + ((1 - positif((RDSN() + PRS() + CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) and (1 - positif((RDSN() + PRS() + CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) * VAR9YIPS()))

    @cache_result
    def CIRSE1():
        """
        Credit d'impot relatif a CSGTQ
        """
        return min(RSE1(), arr((saisie_variables.get('REVCSXA', 0) and TX075 and saisie_variables.get('REVCSXA', 0) * TX075 / 100)))

    @cache_result
    def RSE1N():
        """
        CSG nette apres CI 8TQ
        """
        return max(0, (RSE1() - CIRSE1()))

    @cache_result
    def RSE8TV():
        """
        CSG revenus source etrangere (8SA) 6,6%
        """
        return (arr((BRSE8TV() and TXTV and BRSE8TV() * TXTV / 100)) and arr((BRSE8TV() and TXTV and BRSE8TV() * TXTV / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def CIRSE8TV():
        """
        Credit d'impot relatif a CSG sur 8TV
        """
        return min(RSE8TV(), arr((saisie_variables.get('REVCSXC', 0) and TX066 and saisie_variables.get('REVCSXC', 0) * TX066 / 100)))

    @cache_result
    def RSE8SA():
        """
        CSG revenus source etrangere (8SA) 6,6%
        """
        return (arr((BRSE8SA() and TXTV and BRSE8SA() * TXTV / 100)) and arr((BRSE8SA() and TXTV and BRSE8SA() * TXTV / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def CIRSE8SA():
        """
        Credit d'impot relatif a CSG sur 8SA
        """
        return min(RSE8SA(), arr((saisie_variables.get('COD8XI', 0) and TX066 and saisie_variables.get('COD8XI', 0) * TX066 / 100)))

    @cache_result
    def CIRSE2():
        """
        Credit d'impot relatif a CSGTV
        """
        return (CIRSE8TV() + CIRSE8SA())

    @cache_result
    def RSE2N():
        """
        CSG nette apres CI 8TV
        """
        return max(0, (RSE2() - CIRSE2()))

    @cache_result
    def CIRSE3():
        """
        Credit d'impot relatif a CSGTW
        """
        return min(RSE3(), arr((saisie_variables.get('REVCSXD', 0) and TX062 and saisie_variables.get('REVCSXD', 0) * TX062 / 100)))

    @cache_result
    def RSE3N():
        """
        CSG nette apres CI 8TW
        """
        return max(0, (RSE3() - CIRSE3()))

    @cache_result
    def RSE8TX():
        """
        CSG revenus source etrangere (8SB) 3,8%
        """
        return (arr((BRSE8TX() and TXTX and BRSE8TX() * TXTX / 100)) and arr((BRSE8TX() and TXTX and BRSE8TX() * TXTX / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def CIRSE8TX():
        """
        Credit d'impot relatif a CSG sur 8TX
        """
        return min(RSE8TX(), arr((saisie_variables.get('REVCSXE', 0) and TX038 and saisie_variables.get('REVCSXE', 0) * TX038 / 100)))

    @cache_result
    def RSE8SB():
        """
        CSG revenus source etrangere (8SB) 3,8 %
        """
        return (arr((BRSE8SB() and TXTX and BRSE8SB() * TXTX / 100)) and arr((BRSE8SB() and TXTX and BRSE8SB() * TXTX / 100)) * (1 - positif(saisie_variables.get('ANNUL2042', 0))))

    @cache_result
    def CIRSE8SB():
        """
        Credit d'impot relatif a CSG sur 8SB
        """
        return min(RSE8SB(), arr((saisie_variables.get('COD8XJ', 0) and TX038 and saisie_variables.get('COD8XJ', 0) * TX038 / 100)))

    @cache_result
    def CIRSE4():
        """
        Credit d'impot relatif a CSGTX
        """
        return (CIRSE8TX() + CIRSE8SB())

    @cache_result
    def RSE4N():
        """
        CSG nette apres CI 8TX
        """
        return max(0, (RSE4() - CIRSE4()))

    @cache_result
    def CIRSE5():
        """
        Credit d'impot relatif a CSGTR
        """
        return min(RSE5(), arr((saisie_variables.get('REVCSXB', 0) and TX075 and saisie_variables.get('REVCSXB', 0) * TX075 / 100)))

    @cache_result
    def RSE5N():
        """
        CSG nette apres CI 8TR
        """
        return max(0, (RSE5() - CIRSE5()))

    @cache_result
    def CSTOTSSPENA():
        """
        NAP CSG RDS PRS avant imputation impot provisoire pour seuil 61 E
        """
        return max(0, (CSG() + RDSN() + PRS() + BREGV() + CVNSALC() + CDIS() + CGLOA() + RSE1N() + RSE2N() + RSE3N() + RSE4N() + RSE5N()))

    @cache_result
    def PTOCSG():
        """
        PENALITES DE TO CSG
        """
        return ((arr((max(0, (CSG() - saisie_variables.get('CSGIM', 0))) and COPETO() and max(0, (CSG() - saisie_variables.get('CSGIM', 0))) * COPETO() / 100)) + arr((max(0, (CSG() - saisie_variables.get('CSGIM', 0) - CS9YP())) and TXINT() and max(0, (CSG() - saisie_variables.get('CSGIM', 0) - CS9YP())) * TXINT() / 100))) and (arr((max(0, (CSG() - saisie_variables.get('CSGIM', 0))) and COPETO() and max(0, (CSG() - saisie_variables.get('CSGIM', 0))) * COPETO() / 100)) + arr((max(0, (CSG() - saisie_variables.get('CSGIM', 0) - CS9YP())) and TXINT() and max(0, (CSG() - saisie_variables.get('CSGIM', 0) - CS9YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PCSG():
        """
        Penalites de la CSG
        """
        return PTOCSG()

    @cache_result
    def RD9YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((PRS() + CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) and positif((PRS() + CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) * arr((VAR9YIPS() and (RDSN() - saisie_variables.get('CRDSIM', 0)) and VAR9YIPS() * (RDSN() - saisie_variables.get('CRDSIM', 0)) / BINRPS()))) + ((1 - positif((PRS() + CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) and (1 - positif((PRS() + CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) * max(0, (VAR9YIPS() - CS9YP()))))

    @cache_result
    def PTORDS():
        """
        PENALITES DE TO CRDS
        """
        return ((arr((max(0, (RDSN() - saisie_variables.get('CRDSIM', 0))) and COPETO() and max(0, (RDSN() - saisie_variables.get('CRDSIM', 0))) * COPETO() / 100)) + arr((max(0, (RDSN() - saisie_variables.get('CRDSIM', 0) - RD9YP())) and TXINT() and max(0, (RDSN() - saisie_variables.get('CRDSIM', 0) - RD9YP())) * TXINT() / 100))) and (arr((max(0, (RDSN() - saisie_variables.get('CRDSIM', 0))) and COPETO() and max(0, (RDSN() - saisie_variables.get('CRDSIM', 0))) * COPETO() / 100)) + arr((max(0, (RDSN() - saisie_variables.get('CRDSIM', 0) - RD9YP())) and TXINT() and max(0, (RDSN() - saisie_variables.get('CRDSIM', 0) - RD9YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PRDS():
        """
        PENALITES DE LA CRDS
        """
        return PTORDS()

    @cache_result
    def PS9YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) and positif((CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) * arr((VAR9YIPS() and (PRS() - saisie_variables.get('PRSPROV', 0)) and VAR9YIPS() * (PRS() - saisie_variables.get('PRSPROV', 0)) / BINRPS()))) + ((1 - positif((CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) and (1 - positif((CVNSALC() + CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) * max(0, (VAR9YIPS() - CS9YP() - RD9YP()))))

    @cache_result
    def PTOPRS():
        """
        PENALITE DE TO PRS
        """
        return ((arr((max(0, (PRS() - saisie_variables.get('PRSPROV', 0))) and COPETO() and max(0, (PRS() - saisie_variables.get('PRSPROV', 0))) * COPETO() / 100)) + arr((max(0, (PRS() - saisie_variables.get('PRSPROV', 0) - PS9YP())) and TXINT() and max(0, (PRS() - saisie_variables.get('PRSPROV', 0) - PS9YP())) * TXINT() / 100))) and (arr((max(0, (PRS() - saisie_variables.get('PRSPROV', 0))) and COPETO() and max(0, (PRS() - saisie_variables.get('PRSPROV', 0))) * COPETO() / 100)) + arr((max(0, (PRS() - saisie_variables.get('PRSPROV', 0) - PS9YP())) and TXINT() and max(0, (PRS() - saisie_variables.get('PRSPROV', 0) - PS9YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PPRS():
        """
        PENALITE DU  1%
        """
        return PTOPRS()

    @cache_result
    def CVN9YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) and positif((CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) * arr((VAR9YIPS() and (CVNSALC() - saisie_variables.get('COD8YT', 0)) and VAR9YIPS() * (CVNSALC() - saisie_variables.get('COD8YT', 0)) / BINRPS()))) + ((1 - positif((CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) and (1 - positif((CDIS() + CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) * max(0, (VAR9YIPS() - CS9YP() - RD9YP() - PS9YP()))))

    @cache_result
    def PTOCVN():
        """
        Penalites TO CVNSAL 10% 
        """
        return ((arr((max(0, (CVNSALC() - saisie_variables.get('COD8YT', 0))) and COPETO() and max(0, (CVNSALC() - saisie_variables.get('COD8YT', 0))) * COPETO() / 100)) + arr((max(0, (CVNSALC() - saisie_variables.get('COD8YT', 0) - CVN9YP())) and TXINT() and max(0, (CVNSALC() - saisie_variables.get('COD8YT', 0) - CVN9YP())) * TXINT() / 100))) and (arr((max(0, (CVNSALC() - saisie_variables.get('COD8YT', 0))) and COPETO() and max(0, (CVNSALC() - saisie_variables.get('COD8YT', 0))) * COPETO() / 100)) + arr((max(0, (CVNSALC() - saisie_variables.get('COD8YT', 0) - CVN9YP())) and TXINT() and max(0, (CVNSALC() - saisie_variables.get('COD8YT', 0) - CVN9YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PCVN():
        """
        Penalites de la CVNSAL
        """
        return PTOCVN()

    @cache_result
    def CDIS9YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) and positif((CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) * arr((VAR9YIPS() and (CDIS() - saisie_variables.get('CDISPROV', 0)) and VAR9YIPS() * (CDIS() - saisie_variables.get('CDISPROV', 0)) / BINRPS()))) + ((1 - positif((CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) and (1 - positif((CGLOA() + RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) * max(0, (VAR9YIPS() - CS9YP() - RD9YP() - PS9YP() - CVN9YP()))))

    @cache_result
    def PTOCDIS():
        """
        PENALITE DE TO Contribution sociale salariale
        """
        return ((arr((max(0, (CDIS() - saisie_variables.get('CDISPROV', 0))) and COPETO() and max(0, (CDIS() - saisie_variables.get('CDISPROV', 0))) * COPETO() / 100)) + arr((max(0, (CDISC() - saisie_variables.get('CDISPROV', 0) - CDIS9YP())) and TXINT() and max(0, (CDISC() - saisie_variables.get('CDISPROV', 0) - CDIS9YP())) * TXINT() / 100))) and (arr((max(0, (CDIS() - saisie_variables.get('CDISPROV', 0))) and COPETO() and max(0, (CDIS() - saisie_variables.get('CDISPROV', 0))) * COPETO() / 100)) + arr((max(0, (CDISC() - saisie_variables.get('CDISPROV', 0) - CDIS9YP())) and TXINT() and max(0, (CDISC() - saisie_variables.get('CDISPROV', 0) - CDIS9YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PCDIS():
        """
        Penalites contribution sociale salariale
        """
        return PTOCDIS()

    @cache_result
    def GLO9YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) and positif((RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) * arr((VAR9YIPS() and (CGLOA() - saisie_variables.get('COD8YL', 0)) and VAR9YIPS() * (CGLOA() - saisie_variables.get('COD8YL', 0)) / BINRPS()))) + ((1 - positif((RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) and (1 - positif((RSE1() + RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) * max(0, (VAR9YIPS() - CS9YP() - RD9YP() - PS9YP() - CVN9YP() - CDIS9YP()))))

    @cache_result
    def PTOGLOA():
        """
        PENALITE DE TO Contribution GLO (1TT 1UT)
        """
        return ((arr((max(0, (CGLOA() - saisie_variables.get('COD8YL', 0))) and COPETO() and max(0, (CGLOA() - saisie_variables.get('COD8YL', 0))) * COPETO() / 100)) + arr((max(0, (CGLOA() - saisie_variables.get('COD8YL', 0) - GLO9YP())) and TXINT() and max(0, (CGLOA() - saisie_variables.get('COD8YL', 0) - GLO9YP())) * TXINT() / 100))) and (arr((max(0, (CGLOA() - saisie_variables.get('COD8YL', 0))) and COPETO() and max(0, (CGLOA() - saisie_variables.get('COD8YL', 0))) * COPETO() / 100)) + arr((max(0, (CGLOA() - saisie_variables.get('COD8YL', 0) - GLO9YP())) and TXINT() and max(0, (CGLOA() - saisie_variables.get('COD8YL', 0) - GLO9YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PGLOA():
        """
        Penalites sur LOAAG (1TT et 1UT)
        """
        return PTOGLOA()

    @cache_result
    def RSE19YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) and positif((RSE2() + RSE3() + RSE4() + RSE5() + BREGV())) * arr((VAR9YIPS() and (RSE1() - saisie_variables.get('CSPROVYD', 0)) and VAR9YIPS() * (RSE1() - saisie_variables.get('CSPROVYD', 0)) / BINRPS()))) + ((1 - positif((RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) and (1 - positif((RSE2() + RSE3() + RSE4() + RSE5() + BREGV()))) * max(0, (VAR9YIPS() - CS9YP() - RD9YP() - PS9YP() - CVN9YP() - CDIS9YP() - GLO9YP()))))

    @cache_result
    def RSE29YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((RSE3() + RSE4() + RSE5() + BREGV())) and positif((RSE3() + RSE4() + RSE5() + BREGV())) * arr((VAR9YIPS() and (RSE2() - CSPROVRSE2()) and VAR9YIPS() * (RSE2() - CSPROVRSE2()) / BINRPS()))) + ((1 - positif((RSE3() + RSE4() + RSE5() + BREGV()))) and (1 - positif((RSE3() + RSE4() + RSE5() + BREGV()))) * max(0, (VAR9YIPS() - CS9YP() - RD9YP() - PS9YP() - CVN9YP() - CDIS9YP() - GLO9YP() - RSE19YP()))))

    @cache_result
    def RSE39YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((RSE4() + RSE5() + BREGV())) and positif((RSE4() + RSE5() + BREGV())) * arr((VAR9YIPS() and (RSE3() - saisie_variables.get('CSPROVYG', 0)) and VAR9YIPS() * (RSE3() - saisie_variables.get('CSPROVYG', 0)) / BINRPS()))) + ((1 - positif((RSE4() + RSE5() + BREGV()))) and (1 - positif((RSE4() + RSE5() + BREGV()))) * max(0, (VAR9YIPS() - CS9YP() - RD9YP() - PS9YP() - CVN9YP() - CDIS9YP() - GLO9YP() - RSE19YP() - RSE29YP()))))

    @cache_result
    def RSE49YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif((RSE5() + BREGV())) and positif((RSE5() + BREGV())) * arr((VAR9YIPS() and (RSE4() - CSPROVRSE4()) and VAR9YIPS() * (RSE4() - CSPROVRSE4()) / BINRPS()))) + ((1 - positif((RSE5() + BREGV()))) and (1 - positif((RSE5() + BREGV()))) * max(0, (VAR9YIPS() - CS9YP() - RD9YP() - PS9YP() - CVN9YP() - CDIS9YP() - GLO9YP() - RSE19YP() - RSE29YP() - RSE39YP()))))

    @cache_result
    def RSE59YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return ((positif(BREGV()) and positif(BREGV()) * arr((VAR9YIPS() and (RSE5() - saisie_variables.get('CSPROVYE', 0)) and VAR9YIPS() * (RSE5() - saisie_variables.get('CSPROVYE', 0)) / BINRPS()))) + ((1 - positif(BREGV())) and (1 - positif(BREGV())) * max(0, (VAR9YIPS() - CS9YP() - RD9YP() - PS9YP() - CVN9YP() - CDIS9YP() - GLO9YP() - RSE19YP() - RSE29YP() - RSE39YP() - RSE49YP()))))

    @cache_result
    def REGV9YP():
        """
        Calcul INR : Prorata des acomptes base deja verses 
        """
        return max(0, (VAR9YIPS() - CS9YP() - RD9YP() - PS9YP() - CVN9YP() - CDIS9YP() - GLO9YP() - RSE19YP() - RSE29YP() - RSE39YP() - RSE49YP() - RSE59YP()))

    @cache_result
    def PTOREGV():
        """
        PENALITE DE TO BREGV
        """
        return ((arr((BREGV() and COPETO() and BREGV() * COPETO() / 100)) + arr((max(0, (BREGV() - REGV9YP())) and TXINT() and max(0, (BREGV() - REGV9YP())) * TXINT() / 100))) and (arr((BREGV() and COPETO() and BREGV() * COPETO() / 100)) + arr((max(0, (BREGV() - REGV9YP())) and TXINT() and max(0, (BREGV() - REGV9YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PREGV():
        """
        Penalites régularisation assurance vie
        """
        return PTOREGV()

    @cache_result
    def PTORSE1():
        """
        Penalites TO CSG revenus de source etrangere (8TQ)
        """
        return ((arr((max(0, (RSE1() - CIRSE1() - saisie_variables.get('CSPROVYD', 0))) and COPETO() and max(0, (RSE1() - CIRSE1() - saisie_variables.get('CSPROVYD', 0))) * COPETO() / 100)) + arr((max(0, (RSE1() - CIRSE1() - saisie_variables.get('CSPROVYD', 0) - RSE19YP())) and TXINT() and max(0, (RSE1() - CIRSE1() - saisie_variables.get('CSPROVYD', 0) - RSE19YP())) * TXINT() / 100))) and (arr((max(0, (RSE1() - CIRSE1() - saisie_variables.get('CSPROVYD', 0))) and COPETO() and max(0, (RSE1() - CIRSE1() - saisie_variables.get('CSPROVYD', 0))) * COPETO() / 100)) + arr((max(0, (RSE1() - CIRSE1() - saisie_variables.get('CSPROVYD', 0) - RSE19YP())) and TXINT() and max(0, (RSE1() - CIRSE1() - saisie_variables.get('CSPROVYD', 0) - RSE19YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PRSE1():
        """
        Penalites de la CSG revenus de source etrangere (8TQ)
        """
        return PTORSE1()

    @cache_result
    def PTORSE2():
        """
        Penalites TO CSG revenus de source etrangere (8TV)
        """
        return ((arr((max(0, (RSE2() - CIRSE2() - CSPROVRSE2())) and COPETO() and max(0, (RSE2() - CIRSE2() - CSPROVRSE2())) * COPETO() / 100)) + arr((max(0, (RSE2() - CIRSE2() - CSPROVRSE2() - RSE29YP())) and TXINT() and max(0, (RSE2() - CIRSE2() - CSPROVRSE2() - RSE29YP())) * TXINT() / 100))) and (arr((max(0, (RSE2() - CIRSE2() - CSPROVRSE2())) and COPETO() and max(0, (RSE2() - CIRSE2() - CSPROVRSE2())) * COPETO() / 100)) + arr((max(0, (RSE2() - CIRSE2() - CSPROVRSE2() - RSE29YP())) and TXINT() and max(0, (RSE2() - CIRSE2() - CSPROVRSE2() - RSE29YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PRSE2():
        """
        Penalites de la CSG revenus de source etrangere (8TV)
        """
        return PTORSE2()

    @cache_result
    def PTORSE3():
        """
        Penalites TO CSG revenus de source etrangere (8TW)
        """
        return ((arr((max(0, (RSE3() - CIRSE3() - saisie_variables.get('CSPROVYG', 0))) and COPETO() and max(0, (RSE3() - CIRSE3() - saisie_variables.get('CSPROVYG', 0))) * COPETO() / 100)) + arr((max(0, (RSE3() - CIRSE3() - saisie_variables.get('CSPROVYG', 0) - RSE39YP())) and TXINT() and max(0, (RSE3() - CIRSE3() - saisie_variables.get('CSPROVYG', 0) - RSE39YP())) * TXINT() / 100))) and (arr((max(0, (RSE3() - CIRSE3() - saisie_variables.get('CSPROVYG', 0))) and COPETO() and max(0, (RSE3() - CIRSE3() - saisie_variables.get('CSPROVYG', 0))) * COPETO() / 100)) + arr((max(0, (RSE3() - CIRSE3() - saisie_variables.get('CSPROVYG', 0) - RSE39YP())) and TXINT() and max(0, (RSE3() - CIRSE3() - saisie_variables.get('CSPROVYG', 0) - RSE39YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PRSE3():
        """
        Penalites de la CSG revenus de source etrangere (8TW)
        """
        return PTORSE3()

    @cache_result
    def PTORSE4():
        """
        Penalites TO CSG revenus de source etrangere (8TX)
        """
        return ((arr((max(0, (RSE4() - CIRSE4() - CSPROVRSE4())) and COPETO() and max(0, (RSE4() - CIRSE4() - CSPROVRSE4())) * COPETO() / 100)) + arr((max(0, (RSE4() - CIRSE4() - CSPROVRSE4() - RSE49YP())) and TXINT() and max(0, (RSE4() - CIRSE4() - CSPROVRSE4() - RSE49YP())) * TXINT() / 100))) and (arr((max(0, (RSE4() - CIRSE4() - CSPROVRSE4())) and COPETO() and max(0, (RSE4() - CIRSE4() - CSPROVRSE4())) * COPETO() / 100)) + arr((max(0, (RSE4() - CIRSE4() - CSPROVRSE4() - RSE49YP())) and TXINT() and max(0, (RSE4() - CIRSE4() - CSPROVRSE4() - RSE49YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PRSE4():
        """
        Penalites de la CSG revenus de source etrangere (8TX)
        """
        return PTORSE4()

    @cache_result
    def PTORSE5():
        """
        Penalites TO CSG revenus de source etrangere (8TR)
        """
        return ((arr((max(0, (RSE5() - CIRSE5() - saisie_variables.get('CSPROVYE', 0))) and COPETO() and max(0, (RSE5() - CIRSE5() - saisie_variables.get('CSPROVYE', 0))) * COPETO() / 100)) + arr((max(0, (RSE5() - CIRSE5() - saisie_variables.get('CSPROVYE', 0) - RSE59YP())) and TXINT() and max(0, (RSE5() - CIRSE5() - saisie_variables.get('CSPROVYE', 0) - RSE59YP())) * TXINT() / 100))) and (arr((max(0, (RSE5() - CIRSE5() - saisie_variables.get('CSPROVYE', 0))) and COPETO() and max(0, (RSE5() - CIRSE5() - saisie_variables.get('CSPROVYE', 0))) * COPETO() / 100)) + arr((max(0, (RSE5() - CIRSE5() - saisie_variables.get('CSPROVYE', 0) - RSE59YP())) and TXINT() and max(0, (RSE5() - CIRSE5() - saisie_variables.get('CSPROVYE', 0) - RSE59YP())) * TXINT() / 100))) * positif_ou_nul((CSTOTSSPENA() - SEUIL_61)))

    @cache_result
    def PRSE5():
        """
        Penalites de la CSG revenus de source etrangere (8TR)
        """
        return PTORSE5()

    @cache_result
    def CSTOT():
        """
        NAP CSG RDS PRS avant imputation impot provisoire
        """
        return max(0, (CSG() + RDSN() + PRS() + PCSG() + PRDS() + PPRS() + CVNSALC() + PCVN() + CDIS() + PCDIS() + CGLOA() + PGLOA() + BREGV() + PREGV() + RSE1N() + PRSE1() + RSE2N() + PRSE2() + RSE3N() + PRSE3() + RSE4N() + PRSE4() + RSE5N() + PRSE5()))

    @cache_result
    def TOTCRBIS():
        """
        TOTCR intermediaire
        """
        return ((saisie_variables.get('V_ANTCR', 0) + 0)) if (((((saisie_variables.get('V_ANTCR', 0) - CSTOT())) > 0 and ((saisie_variables.get('V_ANTCR', 0) - CSTOT())) < SEUIL_8 and CSTOT() >= SEUIL_61) or (((CSTOT() - saisie_variables.get('V_ANTCR', 0))) > 0 and ((CSTOT() - saisie_variables.get('V_ANTCR', 0))) < SEUIL_61 and saisie_variables.get('V_IND_TRAIT', 0) == 4) or (((CSTOT() - saisie_variables.get('V_ANTCR', 0))) > 0 and ((CSTOT() - saisie_variables.get('V_ANTCR', 0))) < SEUIL_12 and saisie_variables.get('V_IND_TRAIT', 0) > 4))) else ((CSTOT() and CSTOT() * positif_ou_nul((CSTOT() - SEUIL_61))))

    @cache_result
    def TOTCR():
        """
        Cumul de l'imposition anterieurement acquittee CSG RDS PRS
        """
        return ((saisie_variables.get('CSGIM', 0) + saisie_variables.get('CRDSIM', 0) + saisie_variables.get('PRSPROV', 0) + saisie_variables.get('COD8YT', 0) + saisie_variables.get('CDISPROV', 0) + saisie_variables.get('COD8YL', 0) + saisie_variables.get('CSPROVYD', 0) + saisie_variables.get('CSPROVYE', 0) + saisie_variables.get('CSPROVYF', 0) + saisie_variables.get('CSPROVYN', 0) + saisie_variables.get('CSPROVYG', 0) + saisie_variables.get('CSPROVYH', 0) + saisie_variables.get('CSPROVYP', 0) + 0)) if ((((TOTCRBIS() - saisie_variables.get('CSGIM', 0) - saisie_variables.get('CRDSIM', 0) - saisie_variables.get('PRSPROV', 0) - saisie_variables.get('COD8YT', 0) - saisie_variables.get('CDISPROV', 0) - saisie_variables.get('COD8YL', 0) - saisie_variables.get('CSPROVYD', 0) - saisie_variables.get('CSPROVYE', 0) - saisie_variables.get('CSPROVYF', 0) - saisie_variables.get('CSPROVYN', 0) - saisie_variables.get('CSPROVYG', 0) - saisie_variables.get('CSPROVYH', 0) - saisie_variables.get('CSPROVYP', 0))) < SEUIL_61 and ((saisie_variables.get('CSGIM', 0) + saisie_variables.get('CRDSIM', 0) + saisie_variables.get('PRSPROV', 0) + saisie_variables.get('COD8YT', 0) + saisie_variables.get('CDISPROV', 0) + saisie_variables.get('COD8YL', 0) + saisie_variables.get('CSPROVYD', 0) + saisie_variables.get('CSPROVYE', 0) + saisie_variables.get('CSPROVYF', 0) + saisie_variables.get('CSPROVYG', 0) + saisie_variables.get('CSPROVYH', 0) + 0)) > 0)) else ((TOTCRBIS() + 0))

    @cache_result
    def IRESTIT():
        """
        Impot sur le revenu restitue total (IR + 1%)
        """
        return abs(min(0, (IRN() + PIR() + saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + RASAR() + (TAXASSUR() + PTAXA() - min((TAXASSUR() + PTAXA() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'])))) + (IPCAPTAXT() + PPCAP() - min((IPCAPTAXT() + PPCAP()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA())))) + (TAXLOY() + PTAXLOY() - min((TAXLOY() + PTAXLOY()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA() - IPCAPTAXT() - PPCAP())))) + ((base_variables['IHAUTREVT'] + PHAUTREV()) - min((base_variables['IHAUTREVT'] + PHAUTREV()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA() - IPCAPTAXT() - PPCAP() - TAXLOY() - PTAXLOY())))) + (null((4 - saisie_variables.get('V_IND_TRAIT', 0))) and max(0, (TOTCR() - saisie_variables.get('CSGIM', 0) - saisie_variables.get('CRDSIM', 0) - saisie_variables.get('PRSPROV', 0) - saisie_variables.get('COD8YT', 0) - saisie_variables.get('CDISPROV', 0) - saisie_variables.get('COD8YL', 0) - saisie_variables.get('CSPROVYD', 0) - saisie_variables.get('CSPROVYE', 0) - saisie_variables.get('CSPROVYF', 0) - saisie_variables.get('CSPROVYN', 0) - saisie_variables.get('CSPROVYG', 0) - saisie_variables.get('CSPROVYH', 0) - saisie_variables.get('CSPROVYP', 0))) and null((4 - saisie_variables.get('V_IND_TRAIT', 0))) * max(0, (TOTCR() - saisie_variables.get('CSGIM', 0) - saisie_variables.get('CRDSIM', 0) - saisie_variables.get('PRSPROV', 0) - saisie_variables.get('COD8YT', 0) - saisie_variables.get('CDISPROV', 0) - saisie_variables.get('COD8YL', 0) - saisie_variables.get('CSPROVYD', 0) - saisie_variables.get('CSPROVYE', 0) - saisie_variables.get('CSPROVYF', 0) - saisie_variables.get('CSPROVYN', 0) - saisie_variables.get('CSPROVYG', 0) - saisie_variables.get('CSPROVYH', 0) - saisie_variables.get('CSPROVYP', 0))) * positif_ou_nul(((TOTCR() - saisie_variables.get('CSGIM', 0) - saisie_variables.get('CRDSIM', 0) - saisie_variables.get('PRSPROV', 0) - saisie_variables.get('COD8YT', 0) - saisie_variables.get('CDISPROV', 0) - saisie_variables.get('COD8YL', 0) - saisie_variables.get('CSPROVYD', 0) - saisie_variables.get('CSPROVYE', 0) - saisie_variables.get('CSPROVYF', 0) - saisie_variables.get('CSPROVYN', 0) - saisie_variables.get('CSPROVYG', 0) - saisie_variables.get('CSPROVYH', 0) - saisie_variables.get('CSPROVYP', 0)) - SEUIL_61))) + (null((5 - saisie_variables.get('V_IND_TRAIT', 0))) and max(0, (TOTCR() - saisie_variables.get('CSGIM', 0) - saisie_variables.get('CRDSIM', 0) - saisie_variables.get('PRSPROV', 0) - saisie_variables.get('COD8YT', 0) - saisie_variables.get('CDISPROV', 0) - saisie_variables.get('COD8YL', 0) - saisie_variables.get('CSPROVYD', 0) - saisie_variables.get('CSPROVYE', 0) - saisie_variables.get('CSPROVYF', 0) - saisie_variables.get('CSPROVYN', 0) - saisie_variables.get('CSPROVYG', 0) - saisie_variables.get('CSPROVYH', 0) - saisie_variables.get('CSPROVYP', 0))) and null((5 - saisie_variables.get('V_IND_TRAIT', 0))) * max(0, (TOTCR() - saisie_variables.get('CSGIM', 0) - saisie_variables.get('CRDSIM', 0) - saisie_variables.get('PRSPROV', 0) - saisie_variables.get('COD8YT', 0) - saisie_variables.get('CDISPROV', 0) - saisie_variables.get('COD8YL', 0) - saisie_variables.get('CSPROVYD', 0) - saisie_variables.get('CSPROVYE', 0) - saisie_variables.get('CSPROVYF', 0) - saisie_variables.get('CSPROVYN', 0) - saisie_variables.get('CSPROVYG', 0) - saisie_variables.get('CSPROVYH', 0) - saisie_variables.get('CSPROVYP', 0))) * positif_ou_nul(((TOTCR() - saisie_variables.get('CSGIM', 0) - saisie_variables.get('CRDSIM', 0) - saisie_variables.get('PRSPROV', 0) - saisie_variables.get('COD8YT', 0) - saisie_variables.get('CDISPROV', 0) - saisie_variables.get('COD8YL', 0) - saisie_variables.get('CSPROVYD', 0) - saisie_variables.get('CSPROVYE', 0) - saisie_variables.get('CSPROVYF', 0) - saisie_variables.get('CSPROVYN', 0) - saisie_variables.get('CSPROVYG', 0) - saisie_variables.get('CSPROVYH', 0) - saisie_variables.get('CSPROVYP', 0)) - SEUIL_61))))))

    @cache_result
    def IRNET():
        """
        Total de votre imposition (si positif)
        """
        return ((null((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) and IRNETBIS() and null((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) * IRNETBIS() * positif_ou_nul((IRB() - min(max(0, (IRB() - base_variables['AVFISCOPTER'])), INE())))) + (positif((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) and positif((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) * (((positif(IRE()) + (positif_ou_nul((IAVIM() - SEUIL_61)) and positif_ou_nul((IAVIM() - SEUIL_61)) * (1 - positif(IRE())))) and max(0, (CHRNEG() + saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + (IRNETBIS() and positif(positif_ou_nul((IAVIM() - SEUIL_61))) and IRNETBIS() * positif(positif_ou_nul((IAVIM() - SEUIL_61))) * positif_ou_nul((IRB() - min(max(0, (IRB() - base_variables['AVFISCOPTER'])), INE())))))) and (positif(IRE()) + (positif_ou_nul((IAVIM() - SEUIL_61)) and positif_ou_nul((IAVIM() - SEUIL_61)) * (1 - positif(IRE())))) * max(0, (CHRNEG() + saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + (IRNETBIS() and positif(positif_ou_nul((IAVIM() - SEUIL_61))) and IRNETBIS() * positif(positif_ou_nul((IAVIM() - SEUIL_61))) * positif_ou_nul((IRB() - min(max(0, (IRB() - base_variables['AVFISCOPTER'])), INE())))))) * (1 - positif(IRESTIT()))) + ((1 - positif_ou_nul((IAVIM() - SEUIL_61))) and (1 - positif(IRE())) and (1 - positif_ou_nul((IAVIM() - SEUIL_61))) * (1 - positif(IRE())) * max(0, (CHRNEG() + saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2())))))))

    @cache_result
    def TAXNET():
        """
        taxe + INR + majo
        """
        return (positif(TAXASSUR()) and positif(TAXASSUR()) * max(0, (TAXASSUR() + PTAXA() - min((TAXASSUR() + PTAXA() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER']))) + min(0, IRNET2()))))

    @cache_result
    def TAXANET():
        """
        taxe + INR + majo
        """
        return ((null((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) and null((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) * TAXNET()) + (positif((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) and positif((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) * ((positif_ou_nul((IAMD1() - SEUIL_61)) and positif_ou_nul((IAMD1() - SEUIL_61)) * TAXNET()) + ((1 - positif_ou_nul((IAMD1() - SEUIL_61))) and (1 - positif_ou_nul((IAMD1() - SEUIL_61))) * 0))))

    @cache_result
    def LOYELEVNET():
        """
        taxe + INR + majo
        """
        return (positif(saisie_variables.get('LOYELEV', 0)) and positif(saisie_variables.get('LOYELEV', 0)) * max(0, (TAXLOY() + PTAXLOY() - min((TAXLOY() + PTAXLOY()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA() - IPCAPTAXT() - PPCAP()))) + min(0, PCAPNEG()))))

    @cache_result
    def TAXLOYNET():
        """
        taxe + INR + majo
        """
        return ((null((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) and null((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) * LOYELEVNET()) + (positif((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) and positif((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) * ((positif_ou_nul((IAMD1() - SEUIL_61)) and positif_ou_nul((IAMD1() - SEUIL_61)) * LOYELEVNET()) + ((1 - positif_ou_nul((IAMD1() - SEUIL_61))) and (1 - positif_ou_nul((IAMD1() - SEUIL_61))) * 0))))

    @cache_result
    def PCAPTAXNET():
        """
        taxe + INR + majo
        """
        return (positif(IPCAPTAXT()) and positif(IPCAPTAXT()) * max(0, (IPCAPTAXT() + PPCAP() - min((IPCAPTAXT() + PPCAP()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA()))) + min(0, TAXANEG()))))

    @cache_result
    def PCAPNET():
        """
        PCAPTAX + INR + majo
        """
        return ((null((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) and null((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) * PCAPTAXNET()) + (positif((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) and positif((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) * ((positif_ou_nul((IAMD1() - SEUIL_61)) and positif_ou_nul((IAMD1() - SEUIL_61)) * PCAPTAXNET()) + ((1 - positif_ou_nul((IAMD1() - SEUIL_61))) and (1 - positif_ou_nul((IAMD1() - SEUIL_61))) * 0))))

    @cache_result
    def CHRNET():
        """
        cont haut rev.  + INR + majo
        """
        return (positif(base_variables['IHAUTREVT']) and positif(base_variables['IHAUTREVT']) * max(0, (base_variables['IHAUTREVT'] + PHAUTREV() + min(0, LOYELEVNEG()))))

    @cache_result
    def HAUTREVNET():
        """
        Hauts revenus + INR + majo
        """
        return ((null((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) and null((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) * CHRNET()) + (positif((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) and positif((saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + (RASAR() and RASAR() * V_CR2()) + 0)) * ((positif_ou_nul((IAMD1() - SEUIL_61)) and positif_ou_nul((IAMD1() - SEUIL_61)) * CHRNET()) + ((1 - positif_ou_nul((IAMD1() - SEUIL_61))) and (1 - positif_ou_nul((IAMD1() - SEUIL_61))) * 0))))

    @cache_result
    def IRESTITIR():
        """
        Impot sur le revenu restitue total IR  sans PS
        """
        return abs(min(0, (IRN() + PIR() + saisie_variables.get('NRINET', 0) + saisie_variables.get('IMPRET', 0) + RASAR() + (TAXASSUR() + PTAXA() - min((TAXASSUR() + PTAXA() + 0), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'])))) + (IPCAPTAXT() + PPCAP() - min((IPCAPTAXT() + PPCAP()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA())))) + (TAXLOY() + PTAXLOY() - min((TAXLOY() + PTAXLOY()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA() - IPCAPTAXT() - PPCAP())))) + ((base_variables['IHAUTREVT'] + PHAUTREV()) - min((base_variables['IHAUTREVT'] + PHAUTREV()), max(0, (INE() - IRB() + base_variables['AVFISCOPTER'] - TAXASSUR() - PTAXA() - IPCAPTAXT() - PPCAP() - TAXLOY() - PTAXLOY())))))))

    @cache_result
    def NAPTIR():
        """
        Net a payer IR sans PS (ou a restituer, ou a degrever)
        """
        return (IRNET() + TAXANET() + TAXLOYNET() + PCAPNET() + HAUTREVNET() - IRESTITIR())

    @cache_result
    def IINETIR():
        """
        Total de votre imposition sans contrib. soc.
        """
        x = max(0, NAPTIR())
        inspect()
        return x

    return locals()

