# -*- coding: utf-8 -*-
# flake8: noqa


# WARNING: This file is automatically generated by a script. No not modify it by hand!

# Original files are "chap-3.json" and "chap-3.m"


IRN = min(0, IAN + AVFISCOPTER - IRE) + max(0, IAN + AVFISCOPTER - IRE) * positif(IAMD1 + 1 - SEUIL_61)

IAR = min(0, IAN + AVFISCOPTER - IRE) + max(0, IAN + AVFISCOPTER - IRE)

CREREVET = min(arr(BPTP3 + BPTPD + BPTPG * TX16 / 100), arr(CIIMPPRO * TX_CREREVET / 100)) + min(arr(BPTP19 * TX19 / 100), arr(CIIMPPRO2 * TX19 / 100))


CIIMPPROTOT = CIIMPPRO + CIIMPPRO2

ICI8XFH = min(arr(BPTP18 * TX18 / 100), arr(COD8XF * TX18 / 100)) + min(arr(BPTP4I * TX30 / 100), arr(COD8XG * TX30 / 100)) + min(arr(BPTP40 * TX41 / 100), arr(COD8XH * TX41 / 100))


ICI8XV = min(arr(RCM2FA * TX24 / 100), arr(COD8XV * TX24 / 100)) * 1 - positif(null(2 - V_REGCO) + null(4 - V_REGCO))


ICIGLO = min(arr(BPTP18 * TX18 / 100), arr(COD8XF * TX18 / 100)) + min(arr(RCM2FA * TX24 / 100), arr(COD8XV * TX24 / 100)) * 1 - positif(null(2 - V_REGCO) + null(4 - V_REGCO)) + min(arr(BPTP4I * TX30 / 100), arr(COD8XG * TX30 / 100)) + min(arr(BPTP40 * TX41 / 100), arr(COD8XH * TX41 / 100))


CIGLOTOT = COD8XF + COD8XG + COD8XH


CI8XV = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET, ICI8XV))


CI8XFH = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET - CI8XV, ICI8XFH))


CIGLO = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET, ICIGLO))

ICREREVET = max(0, min(IAD11 + ITP - CIRCMAVFT - IRETS - min(IAD11, CRCFA), min(ITP, CREREVET)))

INE = CIRCMAVFT + IRETS + min(max(0, IAD11 - CIRCMAVFT - IRETS), CRCFA) + ICREREVET + CIGLO + CICULTUR + CIGPA + CIDONENTR + CICORSE + CIRECH + CICOMPEMPL * 1 - positif(RE168 + TAX1649)


IAN = max(0, IRB - AVFISCOPTER + CIRCMAVFT - IRETS - min(max(0, IAD11 - CIRCMAVFT - IRETS), CRCFA) - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR - CICORSE - CIRECH - CICOMPEMPL * 1 - positif(RE168 + TAX1649) + min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)) + min(IPCAPTAXTOT + 0, max(0, INE - IRB + AVFISCOPTER - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)))) + min(TAXLOY + 0, max(0, INE - IRB + AVFISCOPTER - min(IPCAPTAXTOT + 0, max(0, INE - IRB + AVFISCOPTER - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)))) - min(TAXASSUR + 0, max(0, INE - IRB + AVFISCOPTER)))))

IRE = 1 - positif(RE168 + TAX1649 + 0) * CIDIREPARGNE + EPAV + CRICH + CICORSENOW + CIGE + CIDEVDUR + CITEC + IPELUS + CICA + CIGARD + CISYND + CIPRETUD + CIADCRE + CIHABPRIN + CREFAM + CREAPP + CREAGRIBIO + CREPROSP + CRESINTER + CREFORMCHENT + CREINTERESSE + CREARTS + CICONGAGRI + CRERESTAU + CILOYIMP + AUTOVERSLIB + PPETOTX - PPERSA + CI2CK + CIFORET + CIEXCEDENT + COD8TL * 1 - positif(RE168 + TAX1649)


IRE2 = IRE + BCIGA * 1 - positif(RE168 + TAX1649)

CRICH = IPRECH * 1 - positif(RE168 + TAX1649)

CIRCMAVFT = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER, RCMAVFT * 1 - positif(null(2 - V_REGCO) + null(4 - V_REGCO))))

CIEXCEDENT = arr(COD3VE * TX45 / 100 + COD3UV * TX30 / 100) * 1 - positif(RE168 + TAX1649)

CIDIREPARGNE = DIREPARGNE * 1 - positif(RE168 + TAX1649) * 1 - positif(null(2 - V_REGCO) + null(4 - V_REGCO))


CI2CK = COD2CK * 1 - positif(RE168 + TAX1649) * 1 - positif(null(2 - V_REGCO) + null(4 - V_REGCO))

CICA = arr(BAILOC98 * TX_BAIL / 100) * 1 - positif(RE168 + TAX1649)

CRCFA = arr(IPQ1 * REGCI / RB018XR + TONEQUO) * 1 - positif(RE168 + TAX1649)

IRETS = max(0, min(min(COD8PA, IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT) * present(COD8PA) + IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT * 1 - present(COD8PA), IPSOUR * 1 - positif(RE168 + TAX1649)))

CRDIE = max(0, min(IRB - REI - AVFISCOPTER - CIRCMAVFT - IRETS, min(IAD11 - CIRCMAVFT - IRETS, CRCFA) * 1 - positif(RE168 + TAX1649)))


CRDIE2 = CRDIE + 0

BCIAQCUL = arr(CIAQCUL * TX_CIAQCUL / 100)


CICULTUR = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - REI - IRETS - CRDIE - ICREREVET - CIGLO, min(IAD11 + ITP + TAXASSUR + TAXLOY + IPCAPTAXTOT + CHRAPRES, BCIAQCUL)))

BCIGA = CRIGA


CIGPA = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR, BCIGA))

BCIDONENTR = RDMECENAT * 1 - V_CNR


CIDONENTR = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - REI - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA, BCIDONENTR))

CICORSE = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IPPRICORSE - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR, CIINVCORSE + IPREPCORSE))


CICORSEAVIS = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IPPRICORSE - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR, CIINVCORSE + IPREPCORSE)) + CICORSENOW


TOTCORSE = CIINVCORSE + IPREPCORSE + CICORSENOW

CIRECH = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR - CICORSE, IPCHER))

CICOMPEMPL = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR - CICORSE - CIRECH, COD8UW))


DIEMPLOI = COD8UW + COD8TL * 1 - positif(RE168 + TAX1649)


CIEMPLOI = CICOMPEMPL + COD8TL * 1 - positif(RE168 + TAX1649)


IRECR = abs(min(0, IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY - AVFISCOPTER - CIRCMAVFT - IRETS - CRDIE - ICREREVET - CIGLO - CICULTUR - CIGPA - CIDONENTR - CICORSE - CIRECH - CICOMPEMPL))

REPCORSE = abs(CIINVCORSE + IPREPCORSE - CICORSE)


REPRECH = abs(IPCHER - CIRECH)


REPCICE = abs(COD8UW - CICOMPEMPL)

CICONGAGRI = CRECONGAGRI * 1 - V_CNR

BCICAP = min(IPCAPTAXTOT, arr(PRELIBXT - arr(PRELIBXT * TX10 / 100) * T_PCAPTAX / 100))


BCICAPAVIS = max(0, PRELIBXT - arr(PRELIBXT * TX10 / 100))


CICAP = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY + CHRAPRES - AVFISCOPTER, min(IPCAPTAXTOT, BCICAP)))

BCICHR = arr(CHRAPRES * REGCI * 1 - present(COD8XY) + COD8XY + 0 / REVKIREHR - TEFFHRC + COD8YJ)


CICHR = max(0, min(IRB + TAXASSUR + IPCAPTAXTOT + TAXLOY + CHRAPRES - AVFISCOPTER - CICAP, min(CHRAPRES, BCICHR)))

BCOS = max(0, min(RDSYVO + 0, arr(TX_BASECOTSYN / 100 * TSBV * IND_10V - BPCOSAV + EXPRV))) + max(0, min(RDSYCJ + 0, arr(TX_BASECOTSYN / 100 * TSBC * IND_10C - BPCOSAC + EXPRC))) + min(RDSYPP + 0, arr(TX_BASECOTSYN / 100 * somme((TSB(i) * IND_10(i) + EXPR(i) for i in interval(1, 4)))))


CISYND = arr(TX_REDCOTSYN / 100 * BCOS) * 1 - V_CNR


DSYND = RDSYVO + RDSYCJ + RDSYPP


ASYND = BCOS * 1 - V_CNR

IAVF = IRE - EPAV + CICORSE + CICULTUR + CIGPA + CIRCMAVFT


DIAVF2 = BCIGA + IPRECH + IPCHER + IPELUS + RCMAVFT + DIREPARGNE + COD3VE + COD3UV * 1 - positif(RE168 + TAX1649) + CIRCMAVFT * positif(RE168 + TAX1649)


IAVF2 = CIDIREPARGNE + IPRECH + CIRECH + IPELUS + CIRCMAVFT + CIGPA + CIEXCEDENT + 0 * 1 - positif(RE168 + TAX1649) + CIRCMAVFT * positif(RE168 + TAX1649)


IAVFGP = IAVF2 + CREFAM + CREAPP

I2DH = EPAV

BTANTGECUM = V_BTGECUM * 1 - present(DEPMOBIL) + DEPMOBIL


BTANTGECUMWL = V_BTGECUMWL * 1 - present(COD7WD) + COD7WD


P2GE = max(PLAF_GE2 * 1 + BOOL_0AM + PLAF_GE2_PACQAR * V_0CH + V_0DP + PLAF_GE2_PAC * V_0CR + V_0CF + V_0DJ + V_0DN - BTANTGECUM, 0)


BGEDECL = RDTECH + RDEQPAHA


BGEPAHA = min(RDEQPAHA, P2GE) * 1 - V_CNR


P2GEWL = max(0, P2GE + PLAF_GE2 * 1 + BOOL_0AM - BGEPAHA - BTANTGECUMWL)


BGTECH = min(RDTECH, P2GEWL) * 1 - V_CNR


TOTBGE = BGTECH + BGEPAHA


RGEPAHA = BGEPAHA * TX25 / 100 * 1 - V_CNR


RGTECH = BGTECH * TX40 / 100 * 1 - V_CNR


CIGE = arr(RGTECH + RGEPAHA) * 1 - positif(RE168 + TAX1649) * 1 - V_CNR


GECUM = min(P2GE, BGEPAHA + BGTECH) + BTANTGECUM


GECUMWL = max(0, BGTECH + BGEPAHA - min(P2GE, BGEPAHA + BGTECH) + BTANTGECUMWL)


DAIDC = CREAIDE


AAIDC = BADCRE * 1 - V_CNR


CIADCRE = arr(BADCRE * TX_AIDOMI / 100) * 1 - positif(RE168 + TAX1649) * 1 - V_CNR

DLOYIMP = LOYIMP


ALOYIMP = DLOYIMP


CILOYIMP = arr(ALOYIMP * TX_LOYIMP / 100) * 1 - positif(RE168 + TAX1649)

DDEVDUR = CIBOIBAIL + COD7SA + CINRJBAIL + COD7SB + CRENRJ + COD7SC + TRAMURWC + COD7WB + CINRJ + COD7RG + TRATOIVG + COD7VH + CIDEP15 + COD7RH + MATISOSI + COD7RI + TRAVITWT + COD7WU + MATISOSJ + COD7RJ + VOLISO + COD7RK + PORENT + COD7RL + CHAUBOISN + COD7RN + POMPESP + COD7RP + POMPESR + COD7RR + CHAUFSOL + COD7RS + POMPESQ + COD7RQ + ENERGIEST + COD7RT + DIAGPERF + COD7TV + RESCHAL + COD7TW + COD7RV + COD7RW + COD7RZ


PDEVDUR = max(PLAF_DEVDUR * 1 + BOOL_0AM + PLAF_GE2_PACQAR * V_0CH + V_0DP + PLAF_GE2_PAC * V_0CR + V_0CF + V_0DJ + V_0DN - V_BTDEVDUR * 1 - present(DEPCHOBAS) + DEPCHOBAS, 0)


BQRESS = positif(CIBOIBAIL + CINRJBAIL + CRENRJ + CINRJ + CIDEP15 + MATISOSI + MATISOSJ + VOLISO + PORENT + CHAUBOISN + POMPESP + POMPESR + CHAUFSOL + POMPESQ + ENERGIEST + DIAGPERF + RESCHAL + TRAMURWC + TRATOIVG + TRAVITWT) * 1 + 0


BQTRAV = positif(present(TRAVITWT) + present(COD7WU) * present(TRAMURWC) + present(COD7WB) + present(TRAVITWT) + present(COD7WU) * present(TRATOIVG) + present(COD7VH) + present(TRAVITWT) + present(COD7WU) * present(CHAUBOISN) + present(COD7RN) + present(TRAVITWT) + present(COD7WU) * present(POMPESR) + present(COD7RR) + present(CHAUFSOL) + present(COD7RS) + present(TRAVITWT) + present(COD7WU) * present(CIBOIBAIL) + present(COD7SA) + present(CINRJBAIL) + present(COD7SB) + present(POMPESP) + present(COD7RP) + present(POMPESQ) + present(COD7RQ) + present(ENERGIEST) + present(COD7RT) + present(TRAMURWC) + present(COD7WB) * present(TRATOIVG) + present(COD7VH) + present(TRAMURWC) + present(COD7WB) * present(CHAUBOISN) + present(COD7RN) + present(TRAMURWC) + present(COD7WB) * present(POMPESR) + present(COD7RR) + present(CHAUFSOL) + present(COD7RS) + present(TRAMURWC) + present(COD7WB) * present(CIBOIBAIL) + present(COD7SA) + present(CINRJBAIL) + present(COD7SB) + present(POMPESP) + present(COD7RP) + present(POMPESQ) + present(COD7RQ) + present(ENERGIEST) + present(COD7RT) + present(TRATOIVG) + present(COD7VH) * present(CHAUBOISN) + present(COD7RN) + present(TRATOIVG) + present(COD7VH) * present(CHAUBOISN) + present(COD7RN) + present(TRATOIVG) + present(COD7VH) * present(POMPESR) + present(COD7RR) + present(CHAUFSOL) + present(COD7RS) + present(TRATOIVG) + present(COD7VH) * present(CIBOIBAIL) + present(COD7SA) + present(CINRJBAIL) + present(COD7SB) + present(POMPESP) + present(COD7RP) + present(POMPESQ) + present(COD7RQ) + present(ENERGIEST) + present(COD7RT) + present(CHAUBOISN) + present(COD7RN) * present(POMPESR) + present(COD7RR) + present(CHAUFSOL) + present(COD7RS) + present(CHAUBOISN) + present(COD7RN) * present(CIBOIBAIL) + present(COD7SA) + present(CINRJBAIL) + present(COD7SB) + present(POMPESP) + present(COD7RP) + present(POMPESQ) + present(COD7RQ) + present(ENERGIEST) + present(COD7RT) + present(POMPESR) + present(COD7RR) + present(CHAUFSOL) + present(COD7RS) * present(CIBOIBAIL) + present(COD7SA) + present(CINRJBAIL) + present(COD7SB) + present(POMPESP) + present(COD7RP) + present(POMPESQ) + present(COD7RQ) + present(ENERGIEST) + present(COD7RT)) + 0


PLAF1M = null(1 - V_REGCO) * arr(24043 + 2808.5 * min(NBPT - 1 * 4, 2) * positif(NBPT - 1) + 2210.5 * NBPT - 1.5 * 4 * positif(NBPT - 1.5))


PLAF1MGR = null(5 - V_REGCO) * arr(29058 + 3082 * min(NBPT - 1 * 4, 2) * positif(NBPT - 1) + 2938.5 * min(NBPT - 1.5 * 4, 2) * positif(NBPT - 1.5) + 2210.5 * NBPT - 2 * 4 * positif(NBPT - 2))


PLAF1GM = positif(null(6 - V_REGCO) + null(7 - V_REGCO)) * arr(31843 + 3082 * min(NBPT - 1 * 4, 4) * positif(NBPT - 1) + 2624.5 * min(NBPT - 2 * 4, 2) * positif(NBPT - 2) + 2210.5 * NBPT - 2.5 * 4 * positif(NBPT - 2.5))


PLAF2M = null(1 - V_REGCO) * arr(25005 + 2921 * min(NBPT - 1 * 4, 2) * positif(NBPT - 1) + 2299 * NBPT - 1.5 * 4 * positif(NBPT - 1.5))


PLAF2MGR = null(5 - V_REGCO) * arr(30220 + 3205.5 * min(NBPT - 1 * 4, 2) * positif(NBPT - 1) + 3056 * min(NBPT - 1.5 * 4, 2) * positif(NBPT - 1.5) + 2299 * NBPT - 2 * 4 * positif(NBPT - 2))


PLAF2GM = positif(null(6 - V_REGCO) + null(7 - V_REGCO)) * arr(33117 + 3205.5 * min(NBPT - 1 * 4, 4) * positif(NBPT - 1) + 2729.5 * min(NBPT - 2 * 4, 2) * positif(NBPT - 2) + 2299 * NBPT - 2.5 * 4 * positif(NBPT - 2.5))


PLAF1 = PLAF1M + PLAF1MGR + PLAF1GM


PLAF2 = PLAF2M + PLAF2MGR + PLAF2GM


RESS = positif(positif_ou_nul(PLAF1 - V_BTRFRN2 + 0 * 1 - present(RFRN2) + RFRN2) + 1 - positif_ou_nul(PLAF1 - V_BTRFRN2 + 0 * 1 - present(RFRN2) + RFRN2) * positif_ou_nul(PLAF2 - V_BTRFRN1 + 0 * 1 - present(RFRN1) + RFRN1) + present(COD7WX))


BDEV30 = min(PDEVDUR, COD7SA + COD7SB + COD7SC + COD7WB + COD7RG + COD7VH + COD7RH + COD7RI + COD7WU + COD7RJ + COD7RK + COD7RL + COD7RN + COD7RP + COD7RR + COD7RS + COD7RQ + COD7RT + COD7TV + COD7TW + COD7RV + COD7RW + COD7RZ) * positif(positif(BQRESS) * positif(BQTRAV) + positif(BQRESS) * null(BQTRAV) * null(RESS) + positif(BQRESS) * null(BQTRAV) * positif(RESS) + positif(BQRESS) * null(BQTRAV) * positif(RESS) * present(CRECHOBOI) + null(BQRESS))


BDEV25 = min(max(0, PDEVDUR - BDEV30), CIBOIBAIL + CINRJBAIL + TRAMURWC + TRATOIVG + TRAVITWT + CHAUBOISN + POMPESP + POMPESR + CHAUFSOL + POMPESQ + ENERGIEST) * positif(positif(BQRESS) * positif(BQTRAV))


BDEV15 = min(max(0, PDEVDUR - BDEV30 - BDEV25), CRENRJ + CINRJ + CIDEP15 + MATISOSI + MATISOSJ + VOLISO + PORENT + DIAGPERF + RESCHAL) * positif(positif(BQRESS) * positif(BQTRAV)) + min(max(0, PDEVDUR - BDEV30), CIBOIBAIL + CINRJBAIL + CRENRJ + TRAMURWC + CINRJ + TRATOIVG + CIDEP15 + MATISOSI + TRAVITWT + MATISOSJ + VOLISO + PORENT + CHAUBOISN + POMPESP + POMPESR + CHAUFSOL + POMPESQ + ENERGIEST + DIAGPERF + RESCHAL * 1 - present(COD7WX) + present(COD7WX) * COD7WX) * positif(positif(BQRESS) * null(BQTRAV) * positif(RESS) * 1 - present(CRECHOBOI)) + min(max(0, PDEVDUR - BDEV30), CIBOIBAIL + CINRJBAIL + CRENRJ + TRAMURWC + CINRJ + TRATOIVG + CIDEP15 + MATISOSI + CHAUBOISN + POMPESP + POMPESR + CHAUFSOL + POMPESQ + ENERGIEST + DIAGPERF + RESCHAL * 1 - present(COD7WX) + present(COD7WX) * COD7WX) * positif(positif(BQRESS) * null(BQTRAV) * positif(RESS) * present(CRECHOBOI))


ADEVDUR = BDEV30 + BDEV25 + BDEV15


CIDEVDUR = arr(BDEV30 * TX30 / 100 + BDEV25 * TX25 / 100 + BDEV15 * TX15 / 100) * 1 - positif(RE168 + TAX1649) * 1 - V_CNR


DEVDURCUM = ADEVDUR + V_BTDEVDUR * 1 - present(DEPCHOBAS) + DEPCHOBAS

DTEC = RISKTEC


ATEC = positif(DTEC) * DTEC


CITEC = arr(ATEC * TX40 / 100)

DPRETUD = PRETUD + PRETUDANT


APRETUD = max(min(PRETUD, LIM_PRETUD) + min(PRETUDANT, LIM_PRETUD * CASEPRETUD), 0) * 1 - V_CNR


CIPRETUD = arr(APRETUD * TX_PRETUD / 100) * 1 - positif(RE168 + TAX1649) * 1 - V_CNR

EM7 = somme((min(1, max(0, V_0F(i) + AG_LIMFG - V_ANREV)) for i in interval(0, 7))) + 1 - positif(somme((V_0F(i) for i in interval(0, 7))) + 0) * V_0CF


EM7QAR = somme((min(1, max(0, V_0H(i) + AG_LIMFG - V_ANREV)) for i in interval(0, 5))) + somme((min(1, max(0, V_0P(j) + AG_LIMFG - V_ANREV)) for j in interval(0, 3))) + 1 - positif(somme((V_0H(i) for i in interval(0, 5))) + somme((V_0P(j) for j in interval(0, 3))) + 0) * V_0CH + V_0DP


BRFG = min(RDGARD1, PLAF_REDGARD) + min(RDGARD2, PLAF_REDGARD) + min(RDGARD3, PLAF_REDGARD) + min(RDGARD4, PLAF_REDGARD) + min(RDGARD1QAR, PLAF_REDGARDQAR) + min(RDGARD2QAR, PLAF_REDGARDQAR) + min(RDGARD3QAR, PLAF_REDGARDQAR) + min(RDGARD4QAR, PLAF_REDGARDQAR)


RFG = arr(BRFG * TX_REDGARD / 100) * 1 - V_CNR


DGARD = somme((RDGARD(i) for i in interval(1, 4))) + somme((RDGARD(i)QAR for i in interval(1, 4)))


AGARD = BRFG * 1 - V_CNR


CIGARD = RFG * 1 - positif(RE168 + TAX1649)

PREHAB = PREHABT + PREHABTN + PREHABTN1 + PREHABT1 + PREHABT2 + PREHABTN2 + PREHABTVT


BCIHP = max(PLAFHABPRIN * 1 + BOOL_0AM * 1 + positif(V_0AP + V_0AF + V_0CG + V_0CI + V_0CR) + PLAFHABPRINENF / 2 * V_0CH + V_0DP + PLAFHABPRINENF * V_0CR + V_0CF + V_0DJ + V_0DN, 0)


BCIHABPRIN1 = min(BCIHP, PREHABT) * 1 - V_CNR


BCIHABPRIN2 = min(max(0, BCIHP - BCIHABPRIN1), PREHABT1) * 1 - V_CNR


BCIHABPRIN3 = min(max(0, BCIHP - BCIHABPRIN1 - BCIHABPRIN2), PREHABTN) * 1 - V_CNR


BCIHABPRIN4 = min(max(0, BCIHP - BCIHABPRIN1 - BCIHABPRIN2 - BCIHABPRIN3), PREHABTN1) * 1 - V_CNR


BCIHABPRIN5 = min(max(0, BCIHP - BCIHABPRIN1 - BCIHABPRIN2 - BCIHABPRIN3 - BCIHABPRIN4), PREHABT2) * 1 - V_CNR


BCIHABPRIN6 = min(max(0, BCIHP - BCIHABPRIN1 - BCIHABPRIN2 - BCIHABPRIN3 - BCIHABPRIN4 - BCIHABPRIN5), PREHABTN2) * 1 - V_CNR


BCIHABPRIN7 = min(max(0, BCIHP - BCIHABPRIN1 - BCIHABPRIN2 - BCIHABPRIN3 - BCIHABPRIN4 - BCIHABPRIN5 - BCIHABPRIN6), PREHABTVT) * 1 - V_CNR


BCIHABPRIN = BCIHABPRIN1 + BCIHABPRIN2 + BCIHABPRIN3 + BCIHABPRIN4 + BCIHABPRIN5 + BCIHABPRIN6 + BCIHABPRIN7


CIHABPRIN = arr(BCIHABPRIN1 * TX40 / 100 + BCIHABPRIN2 * TX40 / 100 + BCIHABPRIN3 * TX30 / 100 + BCIHABPRIN4 * TX25 / 100 + BCIHABPRIN5 * TX20 / 100 + BCIHABPRIN6 * TX15 / 100 + BCIHABPRIN7 * TX10 / 100) * 1 - positif(RE168 + TAX1649) * 1 - V_CNR

BDCIFORET = RDFORESTRA + SINISFORET + COD7UA + COD7UB + RDFORESTGES + COD7UI


BCIFORETUA = max(0, min(COD7UA, max(0, PLAF_FOREST1 * 1 + BOOL_0AM))) * 1 - V_CNR


BCIFORETUB = max(0, min(COD7UB, max(0, PLAF_FOREST1 * 1 + BOOL_0AM - BCIFORETUA))) * 1 - V_CNR


BCIFORETUP = max(0, min(RDFORESTRA, PLAF_FOREST1 * 1 + BOOL_0AM - BCIFORETUA - BCIFORETUB)) * 1 - V_CNR


BCIFORETUT = max(0, min(SINISFORET, max(0, PLAF_FOREST1 * 1 + BOOL_0AM - BCIFORETUA - BCIFORETUB - BCIFORETUP))) * 1 - V_CNR


BCIFORETUI = max(0, min(COD7UI, max(0, PLAF_FOREST2 * 1 + BOOL_0AM))) * 1 - V_CNR


BCIFORETUQ = max(0, min(RDFORESTGES, PLAF_FOREST2 * 1 + BOOL_0AM - BCIFORETUI)) * 1 - V_CNR


BCIFORET = BCIFORETUP + BCIFORETUT + BCIFORETUA + BCIFORETUB + BCIFORETUQ + BCIFORETUI


CIFORET = arr(BCIFORETUP * TX18 / 100 + BCIFORETUT * TX18 / 100 + BCIFORETUA * TX25 / 100 + BCIFORETUB * TX25 / 100 + BCIFORETUQ * TX18 / 100 + BCIFORETUI * TX25 / 100)

REPCIFAD = max(0, COD7UA - PLAF_FOREST1 * 1 + BOOL_0AM) * 1 - V_CNR


REPCIFADSIN = positif_ou_nul(COD7UA - PLAF_FOREST1 * 1 + BOOL_0AM) * COD7UB + 1 - positif_ou_nul(COD7UA - PLAF_FOREST1 * 1 + BOOL_0AM) * max(0, COD7UB - PLAF_FOREST1 * 1 + BOOL_0AM - COD7UA) * 1 - V_CNR


REPCIF = positif_ou_nul(COD7UA + COD7UB - PLAF_FOREST1 * 1 + BOOL_0AM) * RDFORESTRA + 1 - positif_ou_nul(COD7UA + COD7UB - PLAF_FOREST1 * 1 + BOOL_0AM) * max(0, RDFORESTRA - PLAF_FOREST1 * 1 + BOOL_0AM - COD7UA - COD7UB) * 1 - V_CNR


REPCIFSIN = positif_ou_nul(COD7UA + COD7UB + RDFORESTRA - PLAF_FOREST1 * 1 + BOOL_0AM) * SINISFORET + 1 - positif_ou_nul(COD7UA + COD7UB + RDFORESTRA - PLAF_FOREST1 * 1 + BOOL_0AM) * max(0, SINISFORET - PLAF_FOREST1 * 1 + BOOL_0AM - COD7UA - COD7UB - RDFORESTRA) * 1 - V_CNR

CICSG = min(CSGC, arr(IPPNCS * T_CSG / 100))


CICSGAPS = min(CSGCAPS, arr(IPPNCS * T_CSG / 100))


CIRDS = min(RDSC, arr(IPPNCS + REVCSXA + REVCSXB + REVCSXC + REVCSXD + REVCSXE + COD8XI + COD8XJ * T_RDS / 100))


CIRDSAPS = min(RDSCAPS, arr(IPPNCS + REVCSXA + REVCSXB + REVCSXC + REVCSXD + REVCSXE * T_RDS / 100))


CIPRS = min(PRSC, arr(IPPNCS * T_PREL_SOC / 100))


CIPRSAPS = min(PRSCAPS, arr(IPPNCS * T_PREL_SOC / 100))


CIRSE1 = min(RSE1, arr(REVCSXA * TX075 / 100))


RSE8TV = arr(BRSE8TV * TXTV / 100) * 1 - positif(ANNUL2042)


RSE8SA = arr(BRSE8SA * TXTV / 100) * 1 - positif(ANNUL2042)


CIRSE8TV = min(RSE8TV, arr(REVCSXC * TX066 / 100))


CIRSE8SA = min(RSE8SA, arr(COD8XI * TX066 / 100))


CIRSE2 = CIRSE8TV + CIRSE8SA


CIRSE3 = min(RSE3, arr(REVCSXD * TX062 / 100))


RSE8TX = arr(BRSE8TX * TXTX / 100) * 1 - positif(ANNUL2042)


RSE8SB = arr(BRSE8SB * TXTX / 100) * 1 - positif(ANNUL2042)


CIRSE8TX = min(RSE8TX, arr(REVCSXE * TX038 / 100))


CIRSE8SB = min(RSE8SB, arr(COD8XJ * TX038 / 100))


CIRSE4 = CIRSE8TX + CIRSE8SB


CIRSE5 = min(RSE5, arr(REVCSXB * TX075 / 100))


CIRSETOT = CIRSE1 + CIRSE2 + CIRSE3 + CIRSE4 + CIRSE5

PPE_DATE_DEB = positif(V_0AV + 0) * positif(V_0AZ + 0) * V_0AZ + 0 + positif(DATRETETR + 0) * DATRETETR + 0 * null(V_0AZ + 0)


PPE_DATE_FIN = positif(BOOL_0AM) * positif(V_0AZ + 0) * V_0AZ + 0 + positif(DATDEPETR + 0) * DATDEPETR + 0 * null(V_0AZ + 0)

PPE_DEBJJMMMM = PPE_DATE_DEB + 1010000 + V_ANREV * null(PPE_DATE_DEB + 0)


PPE_DEBJJMM = arr(PPE_DEBJJMMMM - V_ANREV / 10000)


PPE_DEBJJ = inf(PPE_DEBJJMM / 100)


PPE_DEBMM = PPE_DEBJJMM - PPE_DEBJJ * 100


PPE_DEBRANG = PPE_DEBJJ + PPE_DEBMM - 1 * 30

PPE_FINJJMMMM = PPE_DATE_FIN + 30120000 + V_ANREV * null(PPE_DATE_FIN + 0)


PPE_FINJJMM = arr(PPE_FINJJMMMM - V_ANREV / 10000)


PPE_FINJJ = inf(PPE_FINJJMM / 100)


PPE_FINMM = PPE_FINJJMM - PPE_FINJJ * 100


PPE_FINRANG = PPE_FINJJ + PPE_FINMM - 1 * 30 - 1 * positif(PPE_DATE_FIN)

PPE_DEBUT = PPE_DEBRANG


PPE_FIN = PPE_FINRANG


PPENBJ = max(1, arr(min(PPENBJAN, PPE_FIN - PPE_DEBUT + 1)))

PPETX1 = PPE_TX1


PPETX2 = PPE_TX2


PPETX3 = PPE_TX3

PPE_BOOL_ACT_COND = positif(positif(TSHALLOV) + positif(TSHALLOC) + positif(TSHALLO1) + positif(TSHALLO2) + positif(TSHALLO3) + positif(TSHALLO4) + positif(GLD1V) + positif(GLD2V) + positif(GLD3V) + positif(GLD1C) + positif(GLD2C) + positif(GLD3C) + positif(BPCOSAV) + positif(BPCOSAC) + positif(TSASSUV) + positif(TSASSUC) + positif(CARTSV) * positif(CARTSNBAV) + positif(CARTSC) * positif(CARTSNBAC) + positif(CARTSP1) * positif(CARTSNBAP1) + positif(CARTSP2) * positif(CARTSNBAP2) + positif(CARTSP3) * positif(CARTSNBAP3) + positif(CARTSP4) * positif(CARTSNBAP4) + positif(FEXV) + positif(BAFV) + positif(BAFPVV) + positif(BAEXV) + positif(BACREV) + positif(__4BACREV) + positif(BACDEV * 1 - positif(ART1731BIS)) + positif(BAHEXV) + positif(BAHREV) + positif(__4BAHREV) + positif(BAHDEV * 1 - positif(ART1731BIS)) + positif(MIBEXV) + positif(MIBVENV) + positif(MIBPRESV) + positif(MIBPVV) + positif(BICEXV) + positif(BICNOV) + positif(BICDNV * 1 - positif(ART1731BIS)) + positif(BIHEXV) + positif(BIHNOV) + positif(BIHDNV * 1 - positif(ART1731BIS)) + positif(FEXC) + positif(BAFC) + positif(BAFPVC) + positif(BAEXC) + positif(BACREC) + positif(__4BACREC) + positif(BACDEC * 1 - positif(ART1731BIS)) + positif(BAHEXC) + positif(BAHREC) + positif(__4BAHREC) + positif(BAHDEC * 1 - positif(ART1731BIS)) + positif(MIBEXC) + positif(MIBVENC) + positif(MIBPRESC) + positif(MIBPVC) + positif(BICEXC) + positif(BICNOC) + positif(BICDNC * 1 - positif(ART1731BIS)) + positif(BIHEXC) + positif(BIHNOC) + positif(BIHDNC * 1 - positif(ART1731BIS)) + positif(FEXP) + positif(BAFP) + positif(BAFPVP) + positif(BAEXP) + positif(BACREP) + positif(__4BACREP) + positif(BACDEP * 1 - positif(ART1731BIS)) + positif(BAHEXP) + positif(BAHREP) + positif(__4BAHREP) + positif(BAHDEP * 1 - positif(ART1731BIS)) + positif(MIBEXP) + positif(MIBVENP) + positif(MIBPRESP) + positif(BICEXP) + positif(MIBPVP) + positif(BICNOP) + positif(BICDNP * 1 - positif(ART1731BIS)) + positif(BIHEXP) + positif(BIHNOP) + positif(BIHDNP * 1 - positif(ART1731BIS)) + positif(BNCPROEXV) + positif(BNCPROV) + positif(BNCPROPVV) + positif(BNCEXV) + positif(BNCREV) + positif(BNCDEV * 1 - positif(ART1731BIS)) + positif(BNHEXV) + positif(BNHREV) + positif(BNHDEV * 1 - positif(ART1731BIS)) + positif(BNCCRV) + positif(BNCPROEXC) + positif(BNCPROC) + positif(BNCPROPVC) + positif(BNCEXC) + positif(BNCREC) + positif(BNCDEC * 1 - positif(ART1731BIS)) + positif(BNHEXC) + positif(BNHREC) + positif(BNHDEC * 1 - positif(ART1731BIS)) + positif(BNCCRC) + positif(BNCPROEXP) + positif(BNCPROP) + positif(BNCPROPVP) + positif(BNCEXP) + positif(BNCREP) + positif(BNCDEP * 1 - positif(ART1731BIS)) + positif(BNHEXP) + positif(BNHREP) + positif(BNHDEP * 1 - positif(ART1731BIS)) + positif(BNCCRP) + positif(BIPERPV) + positif(BIPERPC) + positif(BIPERPP) + positif(BAFORESTV) + positif(BAFORESTC) + positif(BAFORESTP) + positif(AUTOBICVV) + positif(AUTOBICPV) + positif(AUTOBNCV) + positif(AUTOBICVC) + positif(AUTOBICPC) + positif(AUTOBNCC) + positif(AUTOBICVP) + positif(AUTOBICPP) + positif(AUTOBNCP) + positif(LOCPROCGAV) + positif(LOCPROV) + positif(LOCDEFPROCGAV * 1 - positif(ART1731BIS)) + positif(LOCDEFPROV * 1 - positif(ART1731BIS)) + positif(LOCPROCGAC) + positif(LOCPROC) + positif(LOCDEFPROCGAC * 1 - positif(ART1731BIS)) + positif(LOCDEFPROC * 1 - positif(ART1731BIS)) + positif(LOCPROCGAP) + positif(LOCPROP) + positif(LOCDEFPROCGAP * 1 - positif(ART1731BIS)) + positif(LOCDEFPROP * 1 - positif(ART1731BIS)) + positif(XHONOAAV) + positif(XHONOAAC) + positif(XHONOAAP) + positif(XHONOV) + positif(XHONOC) + positif(XHONOP) + positif(GLDGRATV) + positif(GLDGRATC) + positif(CODDAJ) + positif(CODEAJ) + positif(CODDBJ) + positif(CODEBJ) + positif(SALEXTV) + positif(SALEXTC) + positif(SALEXT1) + positif(SALEXT2) + positif(SALEXT3) + positif(SALEXT4))

PPE_BOOL_SIFC = 1 - BOOL_0AM * 1 - positif(V_0AV) * positif(V_0AZ)


PPE_BOOL_SIFM = BOOL_0AM + positif(V_0AV) * positif(V_0AZ)


PPESEUILKIR = PPE_BOOL_SIFC * PPELIMC + PPE_BOOL_SIFM * PPELIMM + NBPT - 1 - PPE_BOOL_SIFM - NBQAR * 2 * PPELIMPAC + NBQAR * PPELIMPAC * 2


PPE_KIRE = REVKIRE * PPENBJAN / PPENBJ


PPE_BOOL_KIR_COND = 1 - null(IND_TDR) * positif_ou_nul(PPESEUILKIR - PPE_KIRE)

PPE_BOOL_NADAV = min(1, positif(TSHALLOV + 0) * null(PPETPV + 0) * null(PPENHV + 0) + positif(SALEXTV + 0) * null(PPETPV + 0) * null(PPEXTV + 0))


PPE_BOOL_NADAC = min(1, positif(TSHALLOC + 0) * null(PPETPC + 0) * null(PPENHC + 0) + positif(SALEXTC + 0) * null(PPETPC + 0) * null(PPEXTC + 0))


PPE_BOOL_NADA1 = min(1, positif(TSHALLO1 + 0) * null(PPETPP1 + 0) * null(PPENHP1 + 0) + positif(SALEXT1 + 0) * null(PPETPP1 + 0) * null(PPEXT1 + 0))


PPE_BOOL_NADA2 = min(1, positif(TSHALLO2 + 0) * null(PPETPP2 + 0) * null(PPENHP2 + 0) + positif(SALEXT2 + 0) * null(PPETPP2 + 0) * null(PPEXT2 + 0))


PPE_BOOL_NADA3 = min(1, positif(TSHALLO3 + 0) * null(PPETPP3 + 0) * null(PPENHP3 + 0) + positif(SALEXT3 + 0) * null(PPETPP3 + 0) * null(PPEXT3 + 0))


PPE_BOOL_NADA4 = min(1, positif(TSHALLO4 + 0) * null(PPETPP4 + 0) * null(PPENHP4 + 0) + positif(SALEXT4 + 0) * null(PPETPP4 + 0) * null(PPEXT4 + 0))


PPE_BOOL_NADAU = min(1, positif(TSHALLO1 + TSHALLO2 + TSHALLO3 + TSHALLO4 + 0) * null(PPETPP1 + PPETPP2 + PPETPP3 + PPETPP4 + 0) * null(PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + 0) + positif(SALEXT1 + SALEXT2 + SALEXT3 + SALEXT4 + 0) * null(PPETPP1 + PPETPP2 + PPETPP3 + PPETPP4 + 0) * null(PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 + 0))


def PPENEXO(i):
    if i in ('V', 'C'):
        return null(PPETP(i) + 0) + positif(TSHALLO(i) + 0) + positif(SALEXT(i) + 0) + 4 * positif(PPENH(i) + 0) + 8 * positif(PPEXT(i) + 0)
    elif i in interval(1, 4):
        return null(PPETPP(i) + 0) + positif(TSHALLO(i) + 0) + positif(SALEXT(i) + 0) + 4 * positif(PPENHP(i) + 0) + 8 * positif(PPEXT(i) + 0)
    else:
        raise NotImplementedError()

PPE_SALAVDEFV = TSHALLOV + BPCOSAV + GLD1V + GLD2V + GLD3V + TSASSUV + CARTSV * positif(CARTSNBAV) + CODDAJ + CODEAJ + SALEXTV + GLDGRATV


PPE_SALAVDEFC = TSHALLOC + BPCOSAC + GLD1C + GLD2C + GLD3C + TSASSUC + CARTSC * positif(CARTSNBAC) + CODDBJ + CODEBJ + SALEXTC + GLDGRATC


PPE_SALAVDEF1 = TSHALLO1 + CARTSP1 * positif(CARTSNBAP1) + SALEXT1


PPE_SALAVDEF2 = TSHALLO2 + CARTSP2 * positif(CARTSNBAP2) + SALEXT2


PPE_SALAVDEF3 = TSHALLO3 + CARTSP3 * positif(CARTSNBAP3) + SALEXT3


PPE_SALAVDEF4 = TSHALLO4 + CARTSP4 * positif(CARTSNBAP4) + SALEXT4

def PPE_RPRO(i):
    if i in ('V', 'C', 'P'):
        return positif(PPE_RPRO1(i)) * arr(1 + PPETXRPRO / 100 * PPE_RPRO1(i)) + 1 - positif(PPE_RPRO1(i)) * arr(PPE_RPRO1(i) * 1 - PPETXRPRO / 100)
    else:
        raise NotImplementedError()


def PPE_RPRO1(i):
    if i in ('V', 'C', 'P'):
        return FEX(i) + BAF(i) + BAEX(i) + BACRE(i) + __4BACRE(i) - BACDE(i) * 1 - positif(ART1731BIS) + BAHEX(i) + BAHRE(i) + __4BAHRE(i) - BAHDE(i) * 1 - positif(ART1731BIS) + BICEX(i) + BICNO(i) - BICDN(i) * 1 - positif(ART1731BIS) + BIHEX(i) + BIHNO(i) - BIHDN(i) * 1 - positif(ART1731BIS) + BNCEX(i) + BNCRE(i) - BNCDE(i) * 1 - positif(ART1731BIS) + BNHEX(i) + BNHRE(i) - BNHDE(i) * 1 - positif(ART1731BIS) + MIBEX(i) + BNCPROEX(i) + TMIB_NETV(i) + TMIB_NETP(i) + TSPENETP(i) + BAFPV(i) + MIBPV(i) + BNCPROPV(i) + BAFOREST(i) + LOCPRO(i) + LOCPROCGA(i) - LOCDEFPROCGA(i) * 1 - positif(ART1731BIS) - LOCDEFPRO(i) * 1 - positif(ART1731BIS) + XHONOAA(i) + XHONO(i)
    else:
        raise NotImplementedError()


def PPE_AVRPRO1(i):
    if i in ('V', 'C', 'P'):
        return present(FEX(i)) + present(BAF(i)) + present(BAEX(i)) + present(BACRE(i)) + present(__4BACRE(i)) + present(BACDE(i)) + present(BAHEX(i)) + present(BAHRE(i)) + present(__4BAHRE(i)) + present(BAHDE(i)) + present(BICEX(i)) + present(BICNO(i)) + present(BICDN(i)) + present(BIHEX(i)) + present(BIHNO(i)) + present(BIHDN(i)) + present(BNCEX(i)) + present(BNCRE(i)) + present(BNCDE(i)) + present(BNHEX(i)) + present(BNHRE(i)) + present(BNHDE(i)) + present(MIBEX(i)) + present(BNCPROEX(i)) + present(MIBVEN(i)) + present(MIBPRES(i)) + present(BNCPRO(i)) + present(BAFPV(i)) + present(MIBPV(i)) + present(BNCPROPV(i)) + present(BAFOREST(i)) + present(AUTOBICV(i)) + present(AUTOBICP(i)) + present(AUTOBNC(i)) + present(LOCPRO(i)) + present(LOCPROCGA(i)) + present(LOCDEFPROCGA(i)) + present(LOCDEFPRO(i)) + present(XHONOAA(i)) + present(XHONO(i))
    else:
        raise NotImplementedError()


def PPEPEXO(i):
    if i in ('V', 'C'):
        return positif(PPE_AVRPRO1(i) + 0) + positif(SALEXT(i) + 0) + 4 * positif(PPENJ(i) + PPEAC(i) + 0) + 8 * positif(PPEXT(i) + PPETP(i) + 0)
    elif i in interval(1, 4):
        return positif(PPE_AVRPRO1P + 0) + positif(SALEXT(i) + 0) + 4 * positif(PPEXT(i) + PPETPP(i) + 0)
    else:
        raise NotImplementedError()

PPE_BOOL_SEULPAC = null(V_0CF + V_0CR + V_0DJ + V_0DN + V_0CH + V_0DP - 1)


PPE_SALAVDEFU = somme((PPE_SALAVDEF(i) for i in (1, 2, 3, 4))) * PPE_BOOL_SEULPAC


PPE_KIKEKU = 1 * positif(PPE_SALAVDEF1) + 2 * positif(PPE_SALAVDEF2) + 3 * positif(PPE_SALAVDEF3) + 4 * positif(PPE_SALAVDEF4)


PPESALU = PPE_SALAVDEFU + PPE_RPROP * 1 - positif(PPE_RPROP) * PPE_BOOL_SEULPAC


def PPESAL(i):
    if i in ('V', 'C'):
        return PPE_SALAVDEF(i) + PPE_RPRO(i) * 1 - positif(PPE_RPRO(i))
    elif i in interval(1, 4):
        return PPE_SALAVDEF(i) * 1 - PPE_BOOL_SEULPAC
    else:
        raise NotImplementedError()

PPE_RTAU = max(0, PPESALU + PPE_RPROP * positif(PPE_RPROP)) * PPE_BOOL_SEULPAC


PPE_RTAN = max(0, PPE_RPROP) * 1 - PPE_BOOL_SEULPAC


def PPE_RTA(i):
    if i in ('V', 'C'):
        return max(0, PPESAL(i) + PPE_RPRO(i) * positif(PPE_RPRO(i)))
    elif i in interval(1, 4):
        return PPESAL(i)
    else:
        raise NotImplementedError()

PPE_BOOL_TPU = positif(positif(PPETPP1 + PPETPP2 + PPETPP3 + PPETPP4) * positif(PPE_SALAVDEF1 + PPE_SALAVDEF2 + PPE_SALAVDEF3 + PPE_SALAVDEF4) + null(PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 + 0) * null(PPETPP1 + PPETPP2 + PPETPP3 + PPETPP4 + 0) * positif(PPE_SALAVDEF1 + PPE_SALAVDEF2 + PPE_SALAVDEF3 + PPE_SALAVDEF4) + positif(360 / PPENBJ * PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 * positif(PPE_SALAVDEF1 + PPE_SALAVDEF2 + PPE_SALAVDEF3 + PPE_SALAVDEF4) / 1820 + PPENJP * positif(PPE_AVRPRO1P + 0) / 360 - 1) + positif_ou_nul(PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 * positif(PPE_SALAVDEF1 + PPE_SALAVDEF2 + PPE_SALAVDEF3 + PPE_SALAVDEF4) - 1820) + positif_ou_nul(PPENJP * positif(PPE_AVRPRO1P + 0) - 360) + positif(PPEACP * positif(PPE_AVRPRO1P + 0)) + 1 - positif(PPENJP * positif(PPE_AVRPRO1P + 0)) * positif(PPE_AVRPRO1P + 0) * PPE_BOOL_SEULPAC)


PPE_BOOL_TPN = positif(positif_ou_nul(360 / PPENBJ * PPENJP * positif(PPE_AVRPRO1P + 0) - 360) + positif(PPEACP * positif(PPE_AVRPRO1P + 0)) + 1 - positif(PPENJP * positif(PPE_AVRPRO1P + 0)) * positif(PPE_AVRPRO1P + 0))


def PPE_BOOL_TP(i):
    if i in ('V', 'C'):
        return positif(positif(PPETP(i) + 0) * positif(PPE_SALAVDEF(i) + 0) + null(PPENH(i) + PPEXT(i) + 0) * null(PPETP(i) + 0) * positif(PPE_SALAVDEF(i)) + positif(360 / PPENBJ * PPENH(i) + PPEXT(i) * positif(PPE_SALAVDEF(i) + 0) / 1820 + PPENJ(i) * positif(PPE_AVRPRO1(i) + 0) / 360 - 1) + positif_ou_nul(PPENH(i) + PPEXT(i) * positif(PPE_SALAVDEF(i) + 0) - 1820) + positif_ou_nul(PPENJ(i) * positif(PPE_AVRPRO1(i) + 0) - 360) + positif(PPEAC(i) * positif(PPE_AVRPRO1(i) + 0) + 0) + 1 - positif(PPENJ(i) * positif(PPE_AVRPRO1(i) + 0)) * positif(PPE_AVRPRO1(i) + 0))
    elif i in (1, 2, 3, 4):
        return positif(positif(PPETPP(i)) * positif(PPE_SALAVDEF(i) + 0) + null(PPENHP(i) + PPEXT(i) + 0) * null(PPETPP(i) + 0) * positif(PPE_SALAVDEF(i)) + positif_ou_nul(360 / PPENBJ * PPENHP(i) + PPEXT(i) * positif(PPE_SALAVDEF(i) + 0) - 1820))
    else:
        raise NotImplementedError()


def PPENBH(i):
    if i in ('V', 'C'):
        return PPENH(i) + PPEXT(i)
    elif i in interval(1, 4):
        return PPENHP(i) + PPEXT(i)
    else:
        raise NotImplementedError()

PPE_COEFFU = PPE_BOOL_TPU * 360 / PPENBJ + 1 - PPE_BOOL_TPU / PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 / 1820 + PPENJP * positif(PPE_AVRPRO1P + 0) / 360 * PPE_BOOL_SEULPAC


PPE_COEFFN = PPE_BOOL_TPN * 360 / PPENBJ + 1 - PPE_BOOL_TPN / PPENJP * positif(PPE_AVRPRO1P + 0) / 360


def PPE_COEFF(i):
    if i in ('V', 'C'):
        return PPE_BOOL_TP(i) * 360 / PPENBJ + 1 - PPE_BOOL_TP(i) / PPENH(i) + PPEXT(i) * positif(PPE_SALAVDEF(i) + 0) / 1820 + PPENJ(i) * positif(PPE_AVRPRO1(i) + 0) / 360
    elif i in interval(1, 4):
        return PPE_BOOL_TP(i) * 360 / PPENBJ + 1 - PPE_BOOL_TP(i) / PPENHP(i) + PPEXT(i) * positif(PPE_SALAVDEF(i) + 0) / 1820
    else:
        raise NotImplementedError()


def PPE_RCONTP(i):
    if i in (1, 2, 3, 4, 'V', 'C', 'U', 'N'):
        return arr(PPE_RTA(i) * PPE_COEFF(i))
    else:
        raise NotImplementedError()

def PPE_BOOL_MIN(i):
    if i in (1, 2, 3, 4, 'V', 'C', 'U', 'N'):
        return positif_ou_nul(PPE_RTA(i) - PPELIMRPB) * 1 - PPE_BOOL_NADA(i)
    else:
        raise NotImplementedError()

INDMONO = BOOL_0AM * positif_ou_nul(PPE_RTAV - PPELIMRPB) * positif(PPELIMRPB - PPE_RTAC) + positif_ou_nul(PPE_RTAC - PPELIMRPB) * positif(PPELIMRPB - PPE_RTAV)

PPE_HAUTE = PPELIMRPH * 1 - BOOL_0AM + PPELIMRPH * BOOL_0AM * null(INDMONO) * positif_ou_nul(PPE_RCONTPV - PPELIMRPB) * positif_ou_nul(PPE_RCONTPC - PPELIMRPB) + PPELIMRPH2 * INDMONO

def PPE_BOOL_MAX(i):
    if i in ('V', 'C'):
        return positif_ou_nul(PPE_HAUTE - PPE_RCONTP(i))
    elif i in (1, 2, 3, 4, 'U', 'N'):
        return positif_ou_nul(PPELIMRPH - PPE_RCONTP(i))
    else:
        raise NotImplementedError()

def PPE_FORMULE(i):
    if i in (1, 2, 3, 4, 'V', 'C', 'U', 'N'):
        return PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN(i) * PPE_BOOL_MAX(i) * arr(positif_ou_nul(PPELIMSMIC - PPE_RCONTP(i)) * arr(PPE_RCONTP(i) * PPETX1 / 100) / PPE_COEFF(i) + positif(PPE_RCONTP(i) - PPELIMSMIC) * positif_ou_nul(PPELIMRPH - PPE_RCONTP(i)) * arr(arr(PPELIMRPH - PPE_RCONTP(i) * PPETX2 / 100) / PPE_COEFF(i)) + positif(PPE_RCONTP(i) - PPELIMRPHI) * positif_ou_nul(PPE_HAUTE - PPE_RCONTP(i)) * arr(arr(PPELIMRPH2 - PPE_RCONTP(i) * PPETX3 / 100) / PPE_COEFF(i)))
    else:
        raise NotImplementedError()

def PPE_COEFFCOND(i):
    if i in ('V', 'C'):
        return 1 - PPE_BOOL_TP(i) * null(PPENBJ - 360) * PPE_COEFF(i) + 1 - null(PPENBJ - 360) * PPENBJ * 1820 / 360 / PPENH(i) + PPEXT(i) * positif(PPE_SALAVDEF(i) + 0) + PPENJ(i) * positif(PPE_AVRPRO1(i) + 0) * 1820 / 360
    elif i in ('U', 'N'):
        return 1 - PPE_BOOL_TP(i) * null(PPENBJ - 360) * PPE_COEFF(i) + 1 - null(PPENBJ - 360) * PPENBJ * 1820 / 360 / PPENHP1 + PPENHP2 + PPENHP3 + PPENHP4 + PPEXT1 + PPEXT2 + PPEXT3 + PPEXT4 + PPENJP * positif(PPE_AVRPRO1P + 0) * 1820 / 360
    elif i in (1, 2, 3, 4):
        return 1 - PPE_BOOL_TP(i) * null(PPENBJ - 360) * PPE_COEFF(i) + 1 - null(PPENBJ - 360) * PPENBJ * 1820 / 360 / PPENHP(i) + PPEXT(i) * positif(PPE_SALAVDEF(i) + 0) + PPENJP * positif(PPE_AVRPRO1P + 0) * 1820 / 360
    else:
        raise NotImplementedError()


def PPENARPRIME(i):
    if i in (1, 2, 3, 4, 'V', 'C', 'U', 'N'):
        return PPE_FORMULE(i) * 1 + PPETXMAJ2 * positif_ou_nul(PPE_COEFFCOND(i) - 2) * 1 - PPE_BOOL_TP(i) + arr(PPE_FORMULE(i) * PPETXMAJ1) + arr(PPE_FORMULE(i) * PPE_COEFF(i) * PPETXMAJ2) * positif(2 - PPE_COEFFCOND(i)) * positif(PPE_COEFFCOND(i) - 1) * 1 - PPE_BOOL_TP(i) + PPE_FORMULE(i) * positif(PPE_BOOL_TP(i) + positif_ou_nul(1 - PPE_COEFFCOND(i)))
    else:
        raise NotImplementedError()

PPEPRIMEPAC = PPEPRIMEU + PPEPRIME1 + PPEPRIME2 + PPEPRIME3 + PPEPRIME4 + PPEPRIMEN


PPEPRIMETTEV = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_PRIMETTE * BOOL_0AM * INDMONO * positif_ou_nul(PPE_RTAV - PPELIMRPB) * positif_ou_nul(PPELIMRPHI - PPE_RCONTPV) * 1 - positif(PPE_BOOL_NADAV) * 1 - V_CNR


PPEPRIMETTEC = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_PRIMETTE * BOOL_0AM * INDMONO * positif_ou_nul(PPELIMRPHI - PPE_RCONTPC) * positif_ou_nul(PPE_RTAC - PPELIMRPB) * 1 - positif(PPE_BOOL_NADAC) * 1 - V_CNR


PPEPRIMETTE = PPEPRIMETTEV + PPEPRIMETTEC


def PPEPRIME(i):
    if i in (1, 2, 3, 4, 'V', 'C', 'U', 'N'):
        return arr(PPENARPRIME(i))
    else:
        raise NotImplementedError()

BOOLENF = positif(V_0CF + V_0CH + V_0DJ + V_0CR + 0)


PPE_NB_PAC = V_0CF + V_0CR + V_0DJ + V_0DN


PPE_NB_PAC_QAR = V_0CH + V_0DP


TOTPAC = PPE_NB_PAC + PPE_NB_PAC_QAR


PPE_NBNONELI = somme((positif(PPEPRIME(i)) for i in (1, 2, 3, 4, 'U', 'N'))) + somme((positif_ou_nul(PPE_RTA(i) - PPELIMRPB) * positif(PPE_RCONTP(i) - PPELIMRPH) for i in (1, 2, 3, 4, 'U', 'N')))


PPE_NBELIGI = PPE_NB_PAC + PPE_NB_PAC_QAR - PPE_NBNONELI


PPE_BOOL_BT = V_0BT * positif(2 - V_0AV - BOOLENF)


PPE_BOOL_MAJO = 1 - PPE_BOOL_BT * positif(positif_ou_nul(PPELIMRPH - PPE_RCONTPV) * positif_ou_nul(PPE_RTAV - PPELIMRPB) * 1 - positif(PPE_BOOL_NADAV) + positif_ou_nul(PPELIMRPH - PPE_RCONTPC) * positif_ou_nul(PPE_RTAC - PPELIMRPB) * 1 - positif(PPE_BOOL_NADAC))


PPE_NBMAJO = positif_ou_nul(PPE_NB_PAC - PPE_NBELIGI) * PPE_NBELIGI + 1 - positif_ou_nul(PPE_NB_PAC - PPE_NBELIGI) * PPE_NB_PAC


PPE_NBMAJOQAR = positif_ou_nul(PPE_NB_PAC - PPE_NBELIGI) * 0 + 1 - positif_ou_nul(PPE_NB_PAC - PPE_NBELIGI) * PPE_NBELIGI - PPE_NB_PAC


PPE_MAJO = PPE_BOOL_MAJO * positif(PPE_NBELIGI) * PPE_NBMAJO * PPEMONMAJO + PPE_NBMAJOQAR * PPEMONMAJO / 2

PPE_BOOL_MONO = 1 - PPE_BOOL_MAJO * 1 - PPE_BOOL_MAJOBT * positif(PPE_NB_PAC + PPE_NB_PAC_QAR - PPE_NBNONELI) * INDMONO * positif(PPE_BOOL_BT + BOOL_0AM) * positif_ou_nul(PPE_RTAV - PPELIMRPB) * positif_ou_nul(PPELIMRPH2 - PPE_RCONTPV) * 1 - positif(PPE_BOOL_NADAV) + positif(BOOL_0AM) * positif_ou_nul(PPE_RTAC - PPELIMRPB) * positif_ou_nul(PPELIMRPH2 - PPE_RCONTPC) * 1 - positif(PPE_BOOL_NADAC)


PPE_MONO = PPE_BOOL_MONO * 1 + PPE_BOOL_BT * positif(PPE_NBMAJO) * PPEMONMAJO + null(PPE_NBMAJO) * positif(PPE_NBMAJOQAR) * PPEMONMAJO / 2

PPE_BOOL_MAJOBT = positif(positif_ou_nul(PPELIMRPH - PPE_RCONTPV) * positif_ou_nul(PPE_RTAV - PPELIMRPB) * 1 - positif(PPE_BOOL_NADAV)) * PPE_BOOL_BT


PPE_MABT = PPE_BOOL_MAJOBT * positif(PPE_NBMAJO) * PPE_NBMAJO + 1 * PPEMONMAJO + PPE_NBMAJOQAR * PPEMONMAJO / 2 + PPE_BOOL_MAJOBT * null(PPE_NBMAJO + 0) * positif(PPE_NBMAJOQAR) * positif(PPE_NBMAJOQAR - 1) * PPE_NBMAJOQAR * PPEMONMAJO / 2 + PPEMONMAJO + positif_ou_nul(PPELIMRPH2 - PPE_RCONTPV) * positif_ou_nul(PPE_RTAV - PPELIMRPB) * 1 - PPE_BOOL_MAJOBT * 1 - positif(PPE_BOOL_NADAV) * PPE_BOOL_BT * positif(PPE_NB_PAC) * 2 * PPEMONMAJO + positif(PPE_NB_PAC_QAR) * null(PPE_NB_PAC + 0) * PPEMONMAJO

PPEMAJORETTE = PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * arr(PPE_MONO + PPE_MAJO + PPE_MABT) * 1 - V_CNR

PPETOT = positif(somme((PPENARPRIME(i) for i in (1, 2, 3, 4, 'V', 'C', 'U', 'N'))) + PPEPRIMETTE + PPEMAJORETTE + 0 + somme((1 - positif(PPELIMRPH - PPE_RCONTP(i) - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN(i) * PPE_BOOL_MAX(i) for i in (1, 2, 3, 4, 'V', 'C', 'U', 'N'))) + somme((1 - positif(PPELIMRPH2 - PPE_RCONTP(i) - 10) * PPE_BOOL_KIR_COND * PPE_BOOL_ACT_COND * PPE_BOOL_MIN(i) * PPE_BOOL_MAX(i) for i in (1, 2, 3, 4, 'V', 'C', 'U', 'N')))) * max(0, arr(somme((PPEPRIME(i) for i in (1, 2, 3, 4, 'V', 'C', 'U', 'N'))) + PPEPRIMETTE + PPEMAJORETTE)) * positif_ou_nul(arr(somme((PPEPRIME(i) for i in (1, 2, 3, 4, 'V', 'C', 'U', 'N'))) + PPEPRIMETTE + PPEMAJORETTE - PPELIMTOT)) * 1 - positif(V_PPEISF + PPEISFPIR + PPEREVPRO) * 1 - positif(RE168 + TAX1649) * 1 - null(7 - PPENEXOV) * 1 - null(11 - PPENEXOV) * 1 - null(7 - PPENEXOC) * 1 - null(11 - PPENEXOC) * 1 - null(7 - PPENEXO1) * 1 - null(11 - PPENEXO1) * 1 - null(7 - PPENEXO2) * 1 - null(11 - PPENEXO2) * 1 - null(7 - PPENEXO3) * 1 - null(11 - PPENEXO3) * 1 - null(7 - PPENEXO4) * 1 - null(11 - PPENEXO4) * 1 - null(2 - PPEPEXOV) * 1 - null(2 - PPEPEXOC) * 1 - null(2 - PPEPEXO1) * 1 - null(2 - PPEPEXO2) * 1 - null(2 - PPEPEXO3) * 1 - null(2 - PPEPEXO4) * 1 - V_CNR


PPETOT2 = PPETOT


PPETOTMAY = arr(PPETOT * 81 / 100) * positif_ou_nul(arr(PPETOT * 81 / 100) - PPELIMTOT) * null(7 - V_REGCO)


PPETOTX = PPETOT * 1 - null(7 - V_REGCO) + PPETOTMAY

PPENATREST = positif(IRE) * positif(IREST) * 1 - null(2 - V_REGCO) * null(IRE - PPETOTX + PPERSA) * 1 * 1 + 1 - positif(PPETOTX - PPERSA) * 2 + null(IRE) * 1 - positif(PPETOTX - PPERSA) * 3 + positif(PPETOTX - PPERSA) * positif(IRE - PPETOTX + PPERSA) * 4 + 2 * null(2 - V_REGCO)


PPERESTA = positif(PPENATREST) * max(0, min(IREST, PPETOTX - PPERSA))


PPENATIMPA = positif(PPETOTX - PPERSA) * positif(IINET - PPETOTX + PPERSA - ICREREVET) + positif(PPETOTX - PPERSA - PPERESTA)


PPEIMPA = positif(PPENATIMPA) * positif_ou_nul(PPERESTA) * PPETOTX - PPERSA - PPERESTA


PPENATREST2 = positif(IREST - V_ANTRE + V_ANTIR) + positif(V_ANTRE - IINET) * positif(IRE) * 1 - null(2 - V_REGCO) * null(IRE - PPETOTX + PPERSA) * 1 * 1 + 1 - positif(PPETOTX - PPERSA) * 2 + null(IRE) * 1 - positif(PPETOTX - PPERSA) * 3 + positif(PPETOTX - PPERSA) * positif(IRE - PPETOTX + PPERSA) * 4 + 2 * null(2 - V_REGCO)


PPEREST2A = positif(IRE) * positif(IRESTITIR) * max(0, min(PPETOTX - PPERSA, IRESTITIR))


PPEIMP2A = positif_ou_nul(PPEREST2A) * PPETOTX - PPERSA - PPEREST2A

def PPECOEFF(i):
    if i in (1, 2, 3, 4, 'V', 'C', 'N', 'U'):
        return arr(PPE_COEFFCOND(i) * 100)
    else:
        raise NotImplementedError()


def PPETEMPS(i):
    if i in (1, 2, 3, 4, 'V', 'C', 'N', 'U'):
        return arr(1 / PPE_COEFF(i) * 100)
    else:
        raise NotImplementedError()

CRESINTER = PRESINTER

REST = positif(IRE) * positif(IRESTITIR)


LIBREST = positif(REST) * max(0, min(AUTOVERSLIB, IRESTITIR - PPETOTX - PPERSA))


LIBIMP = positif_ou_nul(LIBREST) * AUTOVERSLIB - LIBREST


LOIREST = positif(REST) * max(0, min(CILOYIMP, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB))


LOIIMP = positif_ou_nul(LOIREST) * CILOYIMP - LOIREST


TAUREST = positif(REST) * max(0, min(CRERESTAU, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP))


TAUIMP = positif_ou_nul(TAUREST) * CRERESTAU - TAUREST


AGRREST = positif(REST) * max(0, min(CICONGAGRI, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU))


AGRIMP = positif_ou_nul(AGRREST) * CICONGAGRI - AGRREST


ARTREST = positif(REST) * max(0, min(CREARTS, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI))


ARTIMP = positif_ou_nul(ARTREST) * CREARTS - ARTREST


INTREST = positif(REST) * max(0, min(CREINTERESSE, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS))


INTIMP = positif_ou_nul(INTREST) * CREINTERESSE - INTREST


FORREST = positif(REST) * max(0, min(CREFORMCHENT, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE))


FORIMP = positif_ou_nul(FORREST) * CREFORMCHENT - FORREST


PSIREST = positif(REST) * max(0, min(CRESINTER, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT))


PSIIMP = positif_ou_nul(PSIREST) * CRESINTER - PSIREST


PROREST = positif(REST) * max(0, min(CREPROSP, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER))


PROIMP = positif_ou_nul(PROREST) * CREPROSP - PROREST


BIOREST = positif(REST) * max(0, min(CREAGRIBIO, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP))


BIOIMP = positif_ou_nul(BIOREST) * CREAGRIBIO - BIOREST


APPREST = positif(REST) * max(0, min(CREAPP, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO))


APPIMP = positif_ou_nul(APPREST) * CREAPP - APPREST


FAMREST = positif(REST) * max(0, min(CREFAM, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP))


FAMIMP = positif_ou_nul(FAMREST) * CREFAM - FAMREST


HABREST = positif(REST) * max(0, min(CIHABPRIN, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM))


HABIMP = positif_ou_nul(HABREST) * CIHABPRIN - HABREST


ROFREST = positif(REST) * max(0, min(CIFORET, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN))


ROFIMP = positif_ou_nul(ROFREST) * CIFORET - ROFREST


SALREST = positif(REST) * max(0, min(CIADCRE, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET))


SALIMP = positif_ou_nul(SALREST) * CIADCRE - SALREST


PREREST = positif(REST) * max(0, min(CIPRETUD, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE))


PREIMP = positif_ou_nul(PREREST) * CIPRETUD - PREREST


SYNREST = positif(REST) * max(0, min(CISYND, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD))


SYNIMP = positif_ou_nul(SYNREST) * CISYND - SYNREST


GARREST = positif(REST) * max(0, min(CIGARD, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND))


GARIMP = positif_ou_nul(GARREST) * CIGARD - GARREST


BAIREST = positif(REST) * max(0, min(CICA, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD))


BAIIMP = positif_ou_nul(BAIREST) * CICA - BAIREST


ELUREST = positif(REST) * max(0, min(IPELUS, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA))


ELUIMP = positif_ou_nul(ELUREST) * IPELUS - ELUREST


TECREST = positif(REST) * max(0, min(CITEC, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS))


TECIMP = positif_ou_nul(TECREST) * CITEC - TECREST


DEPREST = positif(REST) * max(0, min(CIDEVDUR, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC))


DEPIMP = positif_ou_nul(DEPREST) * CIDEVDUR - DEPREST


AIDREST = positif(REST) * max(0, min(CIGE, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR))


AIDIMP = positif_ou_nul(AIDREST) * CIGE - AIDREST


ASSREST = positif(REST) * max(0, min(I2DH, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE))


ASSIMP = positif_ou_nul(ASSREST) * I2DH - ASSREST


__2CKREST = positif(REST) * max(0, min(CI2CK, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH))


__2CKIMP = positif_ou_nul(__2CKREST) * CI2CK - __2CKREST


EMPREST = positif(REST) * max(0, min(COD8TL, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH - CI2CK))


EMPIMP = positif_ou_nul(EMPREST) * COD8TL - EMPREST


EPAREST = positif(REST) * max(0, min(CIDIREPARGNE, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH - CI2CK - COD8TL))


EPAIMP = positif_ou_nul(EPAREST) * CIDIREPARGNE - EPAREST


RECREST = positif(REST) * max(0, min(IPRECH, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH - CI2CK - COD8TL - CIDIREPARGNE))


RECIMP = positif_ou_nul(RECREST) * IPRECH - RECREST


EXCREST = positif(REST) * max(0, min(CIEXCEDENT, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH - CI2CK - COD8TL - CIDIREPARGNE - IPRECH))


EXCIMP = positif_ou_nul(EXCREST) * CIEXCEDENT - EXCREST


CORREST = positif(REST) * max(0, min(CICORSENOW, IRESTITIR - PPETOTX - PPERSA - AUTOVERSLIB - CILOYIMP - CRERESTAU - CICONGAGRI - CREARTS - CREINTERESSE - CREFORMCHENT - CRESINTER - CREPROSP - CREAGRIBIO - CREAPP - CREFAM - CIHABPRIN - CIFORET - CIADCRE - CIPRETUD - CISYND - CIGARD - CICA - IPELUS - CITEC - CIDEVDUR - CIGE - I2DH - CI2CK - COD8TL - CIDIREPARGNE - IPRECH - CIEXCEDENT))


CORIMP = positif_ou_nul(CORREST) * CICORSENOW - CORREST
